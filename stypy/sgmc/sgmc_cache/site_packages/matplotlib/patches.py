
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: # -*- coding: utf-8 -*-
2: 
3: from __future__ import (absolute_import, division, print_function,
4:                         unicode_literals)
5: 
6: import six
7: from six.moves import map, zip
8: import warnings
9: 
10: import math
11: 
12: import matplotlib as mpl
13: import numpy as np
14: import matplotlib.cbook as cbook
15: import matplotlib.artist as artist
16: from matplotlib.artist import allow_rasterization
17: import matplotlib.colors as colors
18: from matplotlib import docstring
19: import matplotlib.transforms as transforms
20: from matplotlib.path import Path
21: import matplotlib.lines as mlines
22: 
23: from matplotlib.bezier import split_bezier_intersecting_with_closedpath
24: from matplotlib.bezier import get_intersection, inside_circle, get_parallels
25: from matplotlib.bezier import make_wedged_bezier2
26: from matplotlib.bezier import split_path_inout, get_cos_sin
27: from matplotlib.bezier import make_path_regular, concatenate_paths
28: 
29: 
30: # these are not available for the object inspector until after the
31: # class is built so we define an initial set here for the init
32: # function and they will be overridden after object definition
33: docstring.interpd.update(Patch='''
34: 
35:           =================   ==============================================
36:           Property            Description
37:           =================   ==============================================
38:           alpha               float
39:           animated            [True | False]
40:           antialiased or aa   [True | False]
41:           capstyle            ['butt' | 'round' | 'projecting']
42:           clip_box            a matplotlib.transform.Bbox instance
43:           clip_on             [True | False]
44:           edgecolor or ec     any matplotlib color
45:           facecolor or fc     any matplotlib color
46:           figure              a matplotlib.figure.Figure instance
47:           fill                [True | False]
48:           hatch               unknown
49:           joinstyle           ['miter' | 'round' | 'bevel']
50:           label               any string
51:           linewidth or lw     float
52:           lod                 [True | False]
53:           transform           a matplotlib.transform transformation instance
54:           visible             [True | False]
55:           zorder              any number
56:           =================   ==============================================
57: 
58:           ''')
59: 
60: _patch_alias_map = {
61:         'antialiased': ['aa'],
62:         'edgecolor': ['ec'],
63:         'facecolor': ['fc'],
64:         'linewidth': ['lw'],
65:         'linestyle': ['ls']
66:     }
67: 
68: 
69: class Patch(artist.Artist):
70:     '''
71:     A patch is a 2D artist with a face color and an edge color.
72: 
73:     If any of *edgecolor*, *facecolor*, *linewidth*, or *antialiased*
74:     are *None*, they default to their rc params setting.
75:     '''
76:     zorder = 1
77:     validCap = ('butt', 'round', 'projecting')
78:     validJoin = ('miter', 'round', 'bevel')
79: 
80:     # Whether to draw an edge by default.  Set on a
81:     # subclass-by-subclass basis.
82:     _edge_default = False
83: 
84:     def __str__(self):
85:         return str(self.__class__).split('.')[-1]
86: 
87:     def __init__(self,
88:                  edgecolor=None,
89:                  facecolor=None,
90:                  color=None,
91:                  linewidth=None,
92:                  linestyle=None,
93:                  antialiased=None,
94:                  hatch=None,
95:                  fill=True,
96:                  capstyle=None,
97:                  joinstyle=None,
98:                  **kwargs):
99:         '''
100:         The following kwarg properties are supported
101: 
102:         %(Patch)s
103:         '''
104:         artist.Artist.__init__(self)
105: 
106:         if linewidth is None:
107:             linewidth = mpl.rcParams['patch.linewidth']
108:         if linestyle is None:
109:             linestyle = "solid"
110:         if capstyle is None:
111:             capstyle = 'butt'
112:         if joinstyle is None:
113:             joinstyle = 'miter'
114:         if antialiased is None:
115:             antialiased = mpl.rcParams['patch.antialiased']
116: 
117:         self._hatch_color = colors.to_rgba(mpl.rcParams['hatch.color'])
118:         self._fill = True  # needed for set_facecolor call
119:         if color is not None:
120:             if (edgecolor is not None or facecolor is not None):
121:                 warnings.warn("Setting the 'color' property will override"
122:                               "the edgecolor or facecolor properties. ")
123:             self.set_color(color)
124:         else:
125:             self.set_edgecolor(edgecolor)
126:             self.set_facecolor(facecolor)
127:         # unscaled dashes.  Needed to scale dash patterns by lw
128:         self._us_dashes = None
129:         self._linewidth = 0
130: 
131:         self.set_fill(fill)
132:         self.set_linestyle(linestyle)
133:         self.set_linewidth(linewidth)
134:         self.set_antialiased(antialiased)
135:         self.set_hatch(hatch)
136:         self.set_capstyle(capstyle)
137:         self.set_joinstyle(joinstyle)
138:         self._combined_transform = transforms.IdentityTransform()
139: 
140:         if len(kwargs):
141:             self.update(kwargs)
142: 
143:     def get_verts(self):
144:         '''
145:         Return a copy of the vertices used in this patch
146: 
147:         If the patch contains Bezier curves, the curves will be
148:         interpolated by line segments.  To access the curves as
149:         curves, use :meth:`get_path`.
150:         '''
151:         trans = self.get_transform()
152:         path = self.get_path()
153:         polygons = path.to_polygons(trans)
154:         if len(polygons):
155:             return polygons[0]
156:         return []
157: 
158:     def _process_radius(self, radius):
159:         if radius is not None:
160:             return radius
161:         if cbook.is_numlike(self._picker):
162:             _radius = self._picker
163:         else:
164:             if self.get_edgecolor()[3] == 0:
165:                 _radius = 0
166:             else:
167:                 _radius = self.get_linewidth()
168:         return _radius
169: 
170:     def contains(self, mouseevent, radius=None):
171:         '''Test whether the mouse event occurred in the patch.
172: 
173:         Returns T/F, {}
174:         '''
175:         if callable(self._contains):
176:             return self._contains(self, mouseevent)
177:         radius = self._process_radius(radius)
178:         inside = self.get_path().contains_point(
179:             (mouseevent.x, mouseevent.y), self.get_transform(), radius)
180:         return inside, {}
181: 
182:     def contains_point(self, point, radius=None):
183:         '''
184:         Returns *True* if the given point is inside the path
185:         (transformed with its transform attribute).
186:         '''
187:         radius = self._process_radius(radius)
188:         return self.get_path().contains_point(point,
189:                                               self.get_transform(),
190:                                               radius)
191: 
192:     def update_from(self, other):
193:         '''
194:         Updates this :class:`Patch` from the properties of *other*.
195:         '''
196:         artist.Artist.update_from(self, other)
197:         # For some properties we don't need or don't want to go through the
198:         # getters/setters, so we just copy them directly.
199:         self._edgecolor = other._edgecolor
200:         self._facecolor = other._facecolor
201:         self._fill = other._fill
202:         self._hatch = other._hatch
203:         self._hatch_color = other._hatch_color
204:         # copy the unscaled dash pattern
205:         self._us_dashes = other._us_dashes
206:         self.set_linewidth(other._linewidth)  # also sets dash properties
207:         self.set_transform(other.get_data_transform())
208: 
209:     def get_extents(self):
210:         '''
211:         Return a :class:`~matplotlib.transforms.Bbox` object defining
212:         the axis-aligned extents of the :class:`Patch`.
213:         '''
214:         return self.get_path().get_extents(self.get_transform())
215: 
216:     def get_transform(self):
217:         '''
218:         Return the :class:`~matplotlib.transforms.Transform` applied
219:         to the :class:`Patch`.
220:         '''
221:         return self.get_patch_transform() + artist.Artist.get_transform(self)
222: 
223:     def get_data_transform(self):
224:         '''
225:         Return the :class:`~matplotlib.transforms.Transform` instance which
226:         maps data coordinates to physical coordinates.
227:         '''
228:         return artist.Artist.get_transform(self)
229: 
230:     def get_patch_transform(self):
231:         '''
232:         Return the :class:`~matplotlib.transforms.Transform` instance which
233:         takes patch coordinates to data coordinates.
234: 
235:         For example, one may define a patch of a circle which represents a
236:         radius of 5 by providing coordinates for a unit circle, and a
237:         transform which scales the coordinates (the patch coordinate) by 5.
238:         '''
239:         return transforms.IdentityTransform()
240: 
241:     def get_antialiased(self):
242:         '''
243:         Returns True if the :class:`Patch` is to be drawn with antialiasing.
244:         '''
245:         return self._antialiased
246:     get_aa = get_antialiased
247: 
248:     def get_edgecolor(self):
249:         '''
250:         Return the edge color of the :class:`Patch`.
251:         '''
252:         return self._edgecolor
253:     get_ec = get_edgecolor
254: 
255:     def get_facecolor(self):
256:         '''
257:         Return the face color of the :class:`Patch`.
258:         '''
259:         return self._facecolor
260:     get_fc = get_facecolor
261: 
262:     def get_linewidth(self):
263:         '''
264:         Return the line width in points.
265:         '''
266:         return self._linewidth
267:     get_lw = get_linewidth
268: 
269:     def get_linestyle(self):
270:         '''
271:         Return the linestyle.  Will be one of ['solid' | 'dashed' |
272:         'dashdot' | 'dotted']
273:         '''
274:         return self._linestyle
275:     get_ls = get_linestyle
276: 
277:     def set_antialiased(self, aa):
278:         '''
279:         Set whether to use antialiased rendering
280: 
281:         ACCEPTS: [True | False]  or None for default
282:         '''
283:         if aa is None:
284:             aa = mpl.rcParams['patch.antialiased']
285:         self._antialiased = aa
286:         self.stale = True
287: 
288:     def set_aa(self, aa):
289:         '''alias for set_antialiased'''
290:         return self.set_antialiased(aa)
291: 
292:     def _set_edgecolor(self, color):
293:         set_hatch_color = True
294:         if color is None:
295:             if (mpl.rcParams['patch.force_edgecolor'] or
296:                     not self._fill or self._edge_default):
297:                 color = mpl.rcParams['patch.edgecolor']
298:             else:
299:                 color = 'none'
300:                 set_hatch_color = False
301: 
302:         self._edgecolor = colors.to_rgba(color, self._alpha)
303:         if set_hatch_color:
304:             self._hatch_color = self._edgecolor
305:         self.stale = True
306: 
307:     def set_edgecolor(self, color):
308:         '''
309:         Set the patch edge color
310: 
311:         ACCEPTS: mpl color spec, None, 'none', or 'auto'
312:         '''
313:         self._original_edgecolor = color
314:         self._set_edgecolor(color)
315: 
316:     def set_ec(self, color):
317:         '''alias for set_edgecolor'''
318:         return self.set_edgecolor(color)
319: 
320:     def _set_facecolor(self, color):
321:         if color is None:
322:             color = mpl.rcParams['patch.facecolor']
323:         alpha = self._alpha if self._fill else 0
324:         self._facecolor = colors.to_rgba(color, alpha)
325:         self.stale = True
326: 
327:     def set_facecolor(self, color):
328:         '''
329:         Set the patch face color
330: 
331:         ACCEPTS: mpl color spec, or None for default, or 'none' for no color
332:         '''
333:         self._original_facecolor = color
334:         self._set_facecolor(color)
335: 
336:     def set_fc(self, color):
337:         '''alias for set_facecolor'''
338:         return self.set_facecolor(color)
339: 
340:     def set_color(self, c):
341:         '''
342:         Set both the edgecolor and the facecolor.
343: 
344:         ACCEPTS: matplotlib color spec
345: 
346:         .. seealso::
347: 
348:             :meth:`set_facecolor`, :meth:`set_edgecolor`
349:                For setting the edge or face color individually.
350:         '''
351:         self.set_facecolor(c)
352:         self.set_edgecolor(c)
353: 
354:     def set_alpha(self, alpha):
355:         '''
356:         Set the alpha tranparency of the patch.
357: 
358:         ACCEPTS: float or None
359:         '''
360:         if alpha is not None:
361:             try:
362:                 float(alpha)
363:             except TypeError:
364:                 raise TypeError('alpha must be a float or None')
365:         artist.Artist.set_alpha(self, alpha)
366:         self._set_facecolor(self._original_facecolor)
367:         self._set_edgecolor(self._original_edgecolor)
368:         # stale is already True
369: 
370:     def set_linewidth(self, w):
371:         '''
372:         Set the patch linewidth in points
373: 
374:         ACCEPTS: float or None for default
375:         '''
376:         if w is None:
377:             w = mpl.rcParams['patch.linewidth']
378:             if w is None:
379:                 w = mpl.rcParams['axes.linewidth']
380: 
381:         self._linewidth = float(w)
382:         # scale the dash pattern by the linewidth
383:         offset, ls = self._us_dashes
384:         self._dashoffset, self._dashes = mlines._scale_dashes(
385:             offset, ls, self._linewidth)
386:         self.stale = True
387: 
388:     def set_lw(self, lw):
389:         '''alias for set_linewidth'''
390:         return self.set_linewidth(lw)
391: 
392:     def set_linestyle(self, ls):
393:         '''
394:         Set the patch linestyle
395: 
396:         ===========================   =================
397:         linestyle                     description
398:         ===========================   =================
399:         ``'-'`` or ``'solid'``        solid line
400:         ``'--'`` or  ``'dashed'``     dashed line
401:         ``'-.'`` or  ``'dashdot'``    dash-dotted line
402:         ``':'`` or ``'dotted'``       dotted line
403:         ===========================   =================
404: 
405:         Alternatively a dash tuple of the following form can be provided::
406: 
407:             (offset, onoffseq),
408: 
409:         where ``onoffseq`` is an even length tuple of on and off ink
410:         in points.
411: 
412:         ACCEPTS: ['solid' | 'dashed', 'dashdot', 'dotted' |
413:                    (offset, on-off-dash-seq) |
414:                    ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'None'`` |
415:                    ``' '`` | ``''``]
416: 
417:         Parameters
418:         ----------
419:         ls : { '-',  '--', '-.', ':'} and more see description
420:             The line style.
421:         '''
422:         if ls is None:
423:             ls = "solid"
424:         self._linestyle = ls
425:         # get the unscalled dash pattern
426:         offset, ls = self._us_dashes = mlines._get_dash_pattern(ls)
427:         # scale the dash pattern by the linewidth
428:         self._dashoffset, self._dashes = mlines._scale_dashes(
429:             offset, ls, self._linewidth)
430:         self.stale = True
431: 
432:     def set_ls(self, ls):
433:         '''alias for set_linestyle'''
434:         return self.set_linestyle(ls)
435: 
436:     def set_fill(self, b):
437:         '''
438:         Set whether to fill the patch
439: 
440:         ACCEPTS: [True | False]
441:         '''
442:         self._fill = bool(b)
443:         self._set_facecolor(self._original_facecolor)
444:         self._set_edgecolor(self._original_edgecolor)
445:         self.stale = True
446: 
447:     def get_fill(self):
448:         'return whether fill is set'
449:         return self._fill
450: 
451:     # Make fill a property so as to preserve the long-standing
452:     # but somewhat inconsistent behavior in which fill was an
453:     # attribute.
454:     fill = property(get_fill, set_fill)
455: 
456:     def set_capstyle(self, s):
457:         '''
458:         Set the patch capstyle
459: 
460:         ACCEPTS: ['butt' | 'round' | 'projecting']
461:         '''
462:         s = s.lower()
463:         if s not in self.validCap:
464:             raise ValueError('set_capstyle passed "%s";\n' % (s,) +
465:                              'valid capstyles are %s' % (self.validCap,))
466:         self._capstyle = s
467:         self.stale = True
468: 
469:     def get_capstyle(self):
470:         "Return the current capstyle"
471:         return self._capstyle
472: 
473:     def set_joinstyle(self, s):
474:         '''
475:         Set the patch joinstyle
476: 
477:         ACCEPTS: ['miter' | 'round' | 'bevel']
478:         '''
479:         s = s.lower()
480:         if s not in self.validJoin:
481:             raise ValueError('set_joinstyle passed "%s";\n' % (s,) +
482:                              'valid joinstyles are %s' % (self.validJoin,))
483:         self._joinstyle = s
484:         self.stale = True
485: 
486:     def get_joinstyle(self):
487:         "Return the current joinstyle"
488:         return self._joinstyle
489: 
490:     def set_hatch(self, hatch):
491:         '''
492:         Set the hatching pattern
493: 
494:         *hatch* can be one of::
495: 
496:           /   - diagonal hatching
497:           \\   - back diagonal
498:           |   - vertical
499:           -   - horizontal
500:           +   - crossed
501:           x   - crossed diagonal
502:           o   - small circle
503:           O   - large circle
504:           .   - dots
505:           *   - stars
506: 
507:         Letters can be combined, in which case all the specified
508:         hatchings are done.  If same letter repeats, it increases the
509:         density of hatching of that pattern.
510: 
511:         Hatching is supported in the PostScript, PDF, SVG and Agg
512:         backends only.
513: 
514:         ACCEPTS: ['/' | '\\\\' | '|' | '-' | '+' | 'x' | 'o' | 'O' | '.' | '*']
515:         '''
516:         self._hatch = hatch
517:         self.stale = True
518: 
519:     def get_hatch(self):
520:         'Return the current hatching pattern'
521:         return self._hatch
522: 
523:     @allow_rasterization
524:     def draw(self, renderer):
525:         'Draw the :class:`Patch` to the given *renderer*.'
526:         if not self.get_visible():
527:             return
528: 
529:         renderer.open_group('patch', self.get_gid())
530:         gc = renderer.new_gc()
531: 
532:         gc.set_foreground(self._edgecolor, isRGBA=True)
533: 
534:         lw = self._linewidth
535:         if self._edgecolor[3] == 0:
536:             lw = 0
537:         gc.set_linewidth(lw)
538:         gc.set_dashes(0, self._dashes)
539:         gc.set_capstyle(self._capstyle)
540:         gc.set_joinstyle(self._joinstyle)
541: 
542:         gc.set_antialiased(self._antialiased)
543:         self._set_gc_clip(gc)
544:         gc.set_url(self._url)
545:         gc.set_snap(self.get_snap())
546: 
547:         rgbFace = self._facecolor
548:         if rgbFace[3] == 0:
549:             rgbFace = None  # (some?) renderers expect this as no-fill signal
550: 
551:         gc.set_alpha(self._alpha)
552: 
553:         if self._hatch:
554:             gc.set_hatch(self._hatch)
555:             try:
556:                 gc.set_hatch_color(self._hatch_color)
557:             except AttributeError:
558:                 # if we end up with a GC that does not have this method
559:                 warnings.warn("Your backend does not have support for "
560:                               "setting the hatch color.")
561: 
562:         if self.get_sketch_params() is not None:
563:             gc.set_sketch_params(*self.get_sketch_params())
564: 
565:         path = self.get_path()
566:         transform = self.get_transform()
567:         tpath = transform.transform_path_non_affine(path)
568:         affine = transform.get_affine()
569: 
570:         if self.get_path_effects():
571:             from matplotlib.patheffects import PathEffectRenderer
572:             renderer = PathEffectRenderer(self.get_path_effects(), renderer)
573: 
574:         renderer.draw_path(gc, tpath, affine, rgbFace)
575: 
576:         gc.restore()
577:         renderer.close_group('patch')
578:         self.stale = False
579: 
580:     def get_path(self):
581:         '''
582:         Return the path of this patch
583:         '''
584:         raise NotImplementedError('Derived must override')
585: 
586:     def get_window_extent(self, renderer=None):
587:         return self.get_path().get_extents(self.get_transform())
588: 
589: 
590: patchdoc = artist.kwdoc(Patch)
591: for k in ('Rectangle', 'Circle', 'RegularPolygon', 'Polygon', 'Wedge', 'Arrow',
592:           'FancyArrow', 'YAArrow', 'CirclePolygon', 'Ellipse', 'Arc',
593:           'FancyBboxPatch', 'Patch'):
594:     docstring.interpd.update({k: patchdoc})
595: 
596: # define Patch.__init__ docstring after the class has been added to interpd
597: docstring.dedent_interpd(Patch.__init__)
598: 
599: 
600: class Shadow(Patch):
601:     def __str__(self):
602:         return "Shadow(%s)" % (str(self.patch))
603: 
604:     @docstring.dedent_interpd
605:     def __init__(self, patch, ox, oy, props=None, **kwargs):
606:         '''
607:         Create a shadow of the given *patch* offset by *ox*, *oy*.
608:         *props*, if not *None*, is a patch property update dictionary.
609:         If *None*, the shadow will have have the same color as the face,
610:         but darkened.
611: 
612:         kwargs are
613:         %(Patch)s
614:         '''
615:         Patch.__init__(self)
616:         self.patch = patch
617:         self.props = props
618:         self._ox, self._oy = ox, oy
619:         self._shadow_transform = transforms.Affine2D()
620:         self._update()
621: 
622:     def _update(self):
623:         self.update_from(self.patch)
624:         if self.props is not None:
625:             self.update(self.props)
626:         else:
627:             r, g, b, a = colors.to_rgba(self.patch.get_facecolor())
628:             rho = 0.3
629:             r = rho * r
630:             g = rho * g
631:             b = rho * b
632: 
633:             self.set_facecolor((r, g, b, 0.5))
634:             self.set_edgecolor((r, g, b, 0.5))
635:             self.set_alpha(0.5)
636: 
637:     def _update_transform(self, renderer):
638:         ox = renderer.points_to_pixels(self._ox)
639:         oy = renderer.points_to_pixels(self._oy)
640:         self._shadow_transform.clear().translate(ox, oy)
641: 
642:     def _get_ox(self):
643:         return self._ox
644: 
645:     def _set_ox(self, ox):
646:         self._ox = ox
647: 
648:     def _get_oy(self):
649:         return self._oy
650: 
651:     def _set_oy(self, oy):
652:         self._oy = oy
653: 
654:     def get_path(self):
655:         return self.patch.get_path()
656: 
657:     def get_patch_transform(self):
658:         return self.patch.get_patch_transform() + self._shadow_transform
659: 
660:     def draw(self, renderer):
661:         self._update_transform(renderer)
662:         Patch.draw(self, renderer)
663: 
664: 
665: class Rectangle(Patch):
666:     '''
667:     Draw a rectangle with lower left at *xy* = (*x*, *y*) with
668:     specified *width*, *height* and rotation *angle*.
669:     '''
670: 
671:     def __str__(self):
672:         pars = self._x, self._y, self._width, self._height, self.angle
673:         fmt = "Rectangle(xy=(%g, %g), width=%g, height=%g, angle=%g)"
674:         return fmt % pars
675: 
676:     @docstring.dedent_interpd
677:     def __init__(self, xy, width, height, angle=0.0, **kwargs):
678:         '''
679: 
680:         *angle*
681:           rotation in degrees (anti-clockwise)
682: 
683:         *fill* is a boolean indicating whether to fill the rectangle
684: 
685:         Valid kwargs are:
686:         %(Patch)s
687:         '''
688: 
689:         Patch.__init__(self, **kwargs)
690: 
691:         self._x = xy[0]
692:         self._y = xy[1]
693:         self._width = width
694:         self._height = height
695:         self.angle = float(angle)
696:         # Note: This cannot be calculated until this is added to an Axes
697:         self._rect_transform = transforms.IdentityTransform()
698: 
699:     def get_path(self):
700:         '''
701:         Return the vertices of the rectangle
702:         '''
703:         return Path.unit_rectangle()
704: 
705:     def _update_patch_transform(self):
706:         '''NOTE: This cannot be called until after this has been added
707:                  to an Axes, otherwise unit conversion will fail. This
708:                  maxes it very important to call the accessor method and
709:                  not directly access the transformation member variable.
710:         '''
711:         x = self.convert_xunits(self._x)
712:         y = self.convert_yunits(self._y)
713:         width = self.convert_xunits(self._width)
714:         height = self.convert_yunits(self._height)
715:         bbox = transforms.Bbox.from_bounds(x, y, width, height)
716:         rot_trans = transforms.Affine2D()
717:         rot_trans.rotate_deg_around(x, y, self.angle)
718:         self._rect_transform = transforms.BboxTransformTo(bbox)
719:         self._rect_transform += rot_trans
720: 
721:     def get_patch_transform(self):
722:         self._update_patch_transform()
723:         return self._rect_transform
724: 
725:     def get_x(self):
726:         "Return the left coord of the rectangle"
727:         return self._x
728: 
729:     def get_y(self):
730:         "Return the bottom coord of the rectangle"
731:         return self._y
732: 
733:     def get_xy(self):
734:         "Return the left and bottom coords of the rectangle"
735:         return self._x, self._y
736: 
737:     def get_width(self):
738:         "Return the width of the  rectangle"
739:         return self._width
740: 
741:     def get_height(self):
742:         "Return the height of the rectangle"
743:         return self._height
744: 
745:     def set_x(self, x):
746:         '''
747:         Set the left coord of the rectangle
748: 
749:         ACCEPTS: float
750:         '''
751:         self._x = x
752:         self.stale = True
753: 
754:     def set_y(self, y):
755:         '''
756:         Set the bottom coord of the rectangle
757: 
758:         ACCEPTS: float
759:         '''
760:         self._y = y
761:         self.stale = True
762: 
763:     def set_xy(self, xy):
764:         '''
765:         Set the left and bottom coords of the rectangle
766: 
767:         ACCEPTS: 2-item sequence
768:         '''
769:         self._x, self._y = xy
770:         self.stale = True
771: 
772:     def set_width(self, w):
773:         '''
774:         Set the width rectangle
775: 
776:         ACCEPTS: float
777:         '''
778:         self._width = w
779:         self.stale = True
780: 
781:     def set_height(self, h):
782:         '''
783:         Set the width rectangle
784: 
785:         ACCEPTS: float
786:         '''
787:         self._height = h
788:         self.stale = True
789: 
790:     def set_bounds(self, *args):
791:         '''
792:         Set the bounds of the rectangle: l,b,w,h
793: 
794:         ACCEPTS: (left, bottom, width, height)
795:         '''
796:         if len(args) == 0:
797:             l, b, w, h = args[0]
798:         else:
799:             l, b, w, h = args
800:         self._x = l
801:         self._y = b
802:         self._width = w
803:         self._height = h
804:         self.stale = True
805: 
806:     def get_bbox(self):
807:         return transforms.Bbox.from_bounds(self._x, self._y,
808:                                            self._width, self._height)
809: 
810:     xy = property(get_xy, set_xy)
811: 
812: 
813: class RegularPolygon(Patch):
814:     '''
815:     A regular polygon patch.
816:     '''
817:     def __str__(self):
818:         return "Poly%d(%g,%g)" % (self._numVertices, self._xy[0], self._xy[1])
819: 
820:     @docstring.dedent_interpd
821:     def __init__(self, xy, numVertices, radius=5, orientation=0,
822:                  **kwargs):
823:         '''
824:         Constructor arguments:
825: 
826:         *xy*
827:           A length 2 tuple (*x*, *y*) of the center.
828: 
829:         *numVertices*
830:           the number of vertices.
831: 
832:         *radius*
833:           The distance from the center to each of the vertices.
834: 
835:         *orientation*
836:           rotates the polygon (in radians).
837: 
838:         Valid kwargs are:
839:         %(Patch)s
840:         '''
841:         self._xy = xy
842:         self._numVertices = numVertices
843:         self._orientation = orientation
844:         self._radius = radius
845:         self._path = Path.unit_regular_polygon(numVertices)
846:         self._poly_transform = transforms.Affine2D()
847:         self._update_transform()
848: 
849:         Patch.__init__(self, **kwargs)
850: 
851:     def _update_transform(self):
852:         self._poly_transform.clear() \
853:             .scale(self.radius) \
854:             .rotate(self.orientation) \
855:             .translate(*self.xy)
856: 
857:     def _get_xy(self):
858:         return self._xy
859: 
860:     def _set_xy(self, xy):
861:         self._xy = xy
862:         self._update_transform()
863:     xy = property(_get_xy, _set_xy)
864: 
865:     def _get_orientation(self):
866:         return self._orientation
867: 
868:     def _set_orientation(self, orientation):
869:         self._orientation = orientation
870:         self._update_transform()
871:     orientation = property(_get_orientation, _set_orientation)
872: 
873:     def _get_radius(self):
874:         return self._radius
875: 
876:     def _set_radius(self, radius):
877:         self._radius = radius
878:         self._update_transform()
879:     radius = property(_get_radius, _set_radius)
880: 
881:     def _get_numvertices(self):
882:         return self._numVertices
883: 
884:     def _set_numvertices(self, numVertices):
885:         self._numVertices = numVertices
886: 
887:     numvertices = property(_get_numvertices, _set_numvertices)
888: 
889:     def get_path(self):
890:         return self._path
891: 
892:     def get_patch_transform(self):
893:         self._update_transform()
894:         return self._poly_transform
895: 
896: 
897: class PathPatch(Patch):
898:     '''
899:     A general polycurve path patch.
900:     '''
901:     _edge_default = True
902: 
903:     def __str__(self):
904:         return "Poly((%g, %g) ...)" % tuple(self._path.vertices[0])
905: 
906:     @docstring.dedent_interpd
907:     def __init__(self, path, **kwargs):
908:         '''
909:         *path* is a :class:`matplotlib.path.Path` object.
910: 
911:         Valid kwargs are:
912:         %(Patch)s
913: 
914:         .. seealso::
915: 
916:             :class:`Patch`
917:                 For additional kwargs
918: 
919:         '''
920:         Patch.__init__(self, **kwargs)
921:         self._path = path
922: 
923:     def get_path(self):
924:         return self._path
925: 
926: 
927: class Polygon(Patch):
928:     '''
929:     A general polygon patch.
930:     '''
931:     def __str__(self):
932:         return "Poly((%g, %g) ...)" % tuple(self._path.vertices[0])
933: 
934:     @docstring.dedent_interpd
935:     def __init__(self, xy, closed=True, **kwargs):
936:         '''
937:         *xy* is a numpy array with shape Nx2.
938: 
939:         If *closed* is *True*, the polygon will be closed so the
940:         starting and ending points are the same.
941: 
942:         Valid kwargs are:
943:         %(Patch)s
944: 
945:         .. seealso::
946: 
947:             :class:`Patch`
948:                 For additional kwargs
949: 
950:         '''
951:         Patch.__init__(self, **kwargs)
952:         self._closed = closed
953:         self.set_xy(xy)
954: 
955:     def get_path(self):
956:         '''
957:         Get the path of the polygon
958: 
959:         Returns
960:         -------
961:         path : Path
962:            The :class:`~matplotlib.path.Path` object for
963:            the polygon
964:         '''
965:         return self._path
966: 
967:     def get_closed(self):
968:         '''
969:         Returns if the polygon is closed
970: 
971:         Returns
972:         -------
973:         closed : bool
974:             If the path is closed
975:         '''
976:         return self._closed
977: 
978:     def set_closed(self, closed):
979:         '''
980:         Set if the polygon is closed
981: 
982:         Parameters
983:         ----------
984:         closed : bool
985:            True if the polygon is closed
986:         '''
987:         if self._closed == bool(closed):
988:             return
989:         self._closed = bool(closed)
990:         self.set_xy(self.get_xy())
991:         self.stale = True
992: 
993:     def get_xy(self):
994:         '''
995:         Get the vertices of the path
996: 
997:         Returns
998:         -------
999:         vertices : numpy array
1000:             The coordinates of the vertices as a Nx2
1001:             ndarray.
1002:         '''
1003:         return self._path.vertices
1004: 
1005:     def set_xy(self, xy):
1006:         '''
1007:         Set the vertices of the polygon
1008: 
1009:         Parameters
1010:         ----------
1011:         xy : numpy array or iterable of pairs
1012:             The coordinates of the vertices as a Nx2
1013:             ndarray or iterable of pairs.
1014:         '''
1015:         xy = np.asarray(xy)
1016:         if self._closed:
1017:             if len(xy) and (xy[0] != xy[-1]).any():
1018:                 xy = np.concatenate([xy, [xy[0]]])
1019:         else:
1020:             if len(xy) > 2 and (xy[0] == xy[-1]).all():
1021:                 xy = xy[:-1]
1022:         self._path = Path(xy, closed=self._closed)
1023:         self.stale = True
1024: 
1025:     _get_xy = get_xy
1026:     _set_xy = set_xy
1027:     xy = property(
1028:         get_xy, set_xy, None,
1029:         '''Set/get the vertices of the polygon.  This property is
1030:            provided for backward compatibility with matplotlib 0.91.x
1031:            only.  New code should use
1032:            :meth:`~matplotlib.patches.Polygon.get_xy` and
1033:            :meth:`~matplotlib.patches.Polygon.set_xy` instead.''')
1034: 
1035: 
1036: class Wedge(Patch):
1037:     '''
1038:     Wedge shaped patch.
1039:     '''
1040:     def __str__(self):
1041:         pars = (self.center[0], self.center[1], self.r,
1042:                 self.theta1, self.theta2, self.width)
1043:         fmt = "Wedge(center=(%g, %g), r=%g, theta1=%g, theta2=%g, width=%s)"
1044:         return fmt % pars
1045: 
1046:     @docstring.dedent_interpd
1047:     def __init__(self, center, r, theta1, theta2, width=None, **kwargs):
1048:         '''
1049:         Draw a wedge centered at *x*, *y* center with radius *r* that
1050:         sweeps *theta1* to *theta2* (in degrees).  If *width* is given,
1051:         then a partial wedge is drawn from inner radius *r* - *width*
1052:         to outer radius *r*.
1053: 
1054:         Valid kwargs are:
1055: 
1056:         %(Patch)s
1057:         '''
1058:         Patch.__init__(self, **kwargs)
1059:         self.center = center
1060:         self.r, self.width = r, width
1061:         self.theta1, self.theta2 = theta1, theta2
1062:         self._patch_transform = transforms.IdentityTransform()
1063:         self._recompute_path()
1064: 
1065:     def _recompute_path(self):
1066:         # Inner and outer rings are connected unless the annulus is complete
1067:         if abs((self.theta2 - self.theta1) - 360) <= 1e-12:
1068:             theta1, theta2 = 0, 360
1069:             connector = Path.MOVETO
1070:         else:
1071:             theta1, theta2 = self.theta1, self.theta2
1072:             connector = Path.LINETO
1073: 
1074:         # Form the outer ring
1075:         arc = Path.arc(theta1, theta2)
1076: 
1077:         if self.width is not None:
1078:             # Partial annulus needs to draw the outer ring
1079:             # followed by a reversed and scaled inner ring
1080:             v1 = arc.vertices
1081:             v2 = arc.vertices[::-1] * float(self.r - self.width) / self.r
1082:             v = np.vstack([v1, v2, v1[0, :], (0, 0)])
1083:             c = np.hstack([arc.codes, arc.codes, connector, Path.CLOSEPOLY])
1084:             c[len(arc.codes)] = connector
1085:         else:
1086:             # Wedge doesn't need an inner ring
1087:             v = np.vstack([arc.vertices, [(0, 0), arc.vertices[0, :], (0, 0)]])
1088:             c = np.hstack([arc.codes, [connector, connector, Path.CLOSEPOLY]])
1089: 
1090:         # Shift and scale the wedge to the final location.
1091:         v *= self.r
1092:         v += np.asarray(self.center)
1093:         self._path = Path(v, c)
1094: 
1095:     def set_center(self, center):
1096:         self._path = None
1097:         self.center = center
1098:         self.stale = True
1099: 
1100:     def set_radius(self, radius):
1101:         self._path = None
1102:         self.r = radius
1103:         self.stale = True
1104: 
1105:     def set_theta1(self, theta1):
1106:         self._path = None
1107:         self.theta1 = theta1
1108:         self.stale = True
1109: 
1110:     def set_theta2(self, theta2):
1111:         self._path = None
1112:         self.theta2 = theta2
1113:         self.stale = True
1114: 
1115:     def set_width(self, width):
1116:         self._path = None
1117:         self.width = width
1118:         self.stale = True
1119: 
1120:     def get_path(self):
1121:         if self._path is None:
1122:             self._recompute_path()
1123:         return self._path
1124: 
1125: 
1126: # COVERAGE NOTE: Not used internally or from examples
1127: class Arrow(Patch):
1128:     '''
1129:     An arrow patch.
1130:     '''
1131:     def __str__(self):
1132:         return "Arrow()"
1133: 
1134:     _path = Path([[0.0, 0.1], [0.0, -0.1],
1135:                   [0.8, -0.1], [0.8, -0.3],
1136:                   [1.0, 0.0], [0.8, 0.3],
1137:                   [0.8, 0.1], [0.0, 0.1]],
1138:                  closed=True)
1139: 
1140:     @docstring.dedent_interpd
1141:     def __init__(self, x, y, dx, dy, width=1.0, **kwargs):
1142:         '''
1143:         Draws an arrow from (*x*, *y*) to (*x* + *dx*, *y* + *dy*).
1144:         The width of the arrow is scaled by *width*.
1145: 
1146:         Parameters
1147:         ----------
1148:         x : scalar
1149:             x coordinate of the arrow tail
1150:         y : scalar
1151:             y coordinate of the arrow tail
1152:         dx : scalar
1153:             Arrow length in the x direction
1154:         dy : scalar
1155:             Arrow length in the y direction
1156:         width : scalar, optional (default: 1)
1157:             Scale factor for the width of the arrow. With a default value of
1158:             1, the tail width is 0.2 and head width is 0.6.
1159:         **kwargs :
1160:             Keyword arguments control the :class:`~matplotlib.patches.Patch`
1161:             properties:
1162: 
1163:             %(Patch)s
1164: 
1165:         See Also
1166:         --------
1167:         :class:`FancyArrow` :
1168:             Patch that allows independent control of the head and tail
1169:             properties
1170:         '''
1171:         Patch.__init__(self, **kwargs)
1172:         L = np.hypot(dx, dy)
1173: 
1174:         if L != 0:
1175:             cx = float(dx) / L
1176:             sx = float(dy) / L
1177:         else:
1178:             # Account for division by zero
1179:             cx, sx = 0, 1
1180: 
1181:         trans1 = transforms.Affine2D().scale(L, width)
1182:         trans2 = transforms.Affine2D.from_values(cx, sx, -sx, cx, 0.0, 0.0)
1183:         trans3 = transforms.Affine2D().translate(x, y)
1184:         trans = trans1 + trans2 + trans3
1185:         self._patch_transform = trans.frozen()
1186: 
1187:     def get_path(self):
1188:         return self._path
1189: 
1190:     def get_patch_transform(self):
1191:         return self._patch_transform
1192: 
1193: 
1194: class FancyArrow(Polygon):
1195:     '''
1196:     Like Arrow, but lets you set head width and head height independently.
1197:     '''
1198: 
1199:     _edge_default = True
1200: 
1201:     def __str__(self):
1202:         return "FancyArrow()"
1203: 
1204:     @docstring.dedent_interpd
1205:     def __init__(self, x, y, dx, dy, width=0.001, length_includes_head=False,
1206:                  head_width=None, head_length=None, shape='full', overhang=0,
1207:                  head_starts_at_zero=False, **kwargs):
1208:         '''
1209:         Constructor arguments
1210:           *width*: float (default: 0.001)
1211:             width of full arrow tail
1212: 
1213:           *length_includes_head*: [True | False] (default: False)
1214:             True if head is to be counted in calculating the length.
1215: 
1216:           *head_width*: float or None (default: 3*width)
1217:             total width of the full arrow head
1218: 
1219:           *head_length*: float or None (default: 1.5 * head_width)
1220:             length of arrow head
1221: 
1222:           *shape*: ['full', 'left', 'right'] (default: 'full')
1223:             draw the left-half, right-half, or full arrow
1224: 
1225:           *overhang*: float (default: 0)
1226:             fraction that the arrow is swept back (0 overhang means
1227:             triangular shape). Can be negative or greater than one.
1228: 
1229:           *head_starts_at_zero*: [True | False] (default: False)
1230:             if True, the head starts being drawn at coordinate 0
1231:             instead of ending at coordinate 0.
1232: 
1233:         Other valid kwargs (inherited from :class:`Patch`) are:
1234:         %(Patch)s
1235: 
1236:         '''
1237:         if head_width is None:
1238:             head_width = 3 * width
1239:         if head_length is None:
1240:             head_length = 1.5 * head_width
1241: 
1242:         distance = np.hypot(dx, dy)
1243: 
1244:         if length_includes_head:
1245:             length = distance
1246:         else:
1247:             length = distance + head_length
1248:         if not length:
1249:             verts = []  # display nothing if empty
1250:         else:
1251:             # start by drawing horizontal arrow, point at (0,0)
1252:             hw, hl, hs, lw = head_width, head_length, overhang, width
1253:             left_half_arrow = np.array([
1254:                 [0.0, 0.0],                  # tip
1255:                 [-hl, -hw / 2.0],             # leftmost
1256:                 [-hl * (1 - hs), -lw / 2.0],  # meets stem
1257:                 [-length, -lw / 2.0],          # bottom left
1258:                 [-length, 0],
1259:             ])
1260:             # if we're not including the head, shift up by head length
1261:             if not length_includes_head:
1262:                 left_half_arrow += [head_length, 0]
1263:             # if the head starts at 0, shift up by another head length
1264:             if head_starts_at_zero:
1265:                 left_half_arrow += [head_length / 2.0, 0]
1266:             # figure out the shape, and complete accordingly
1267:             if shape == 'left':
1268:                 coords = left_half_arrow
1269:             else:
1270:                 right_half_arrow = left_half_arrow * [1, -1]
1271:                 if shape == 'right':
1272:                     coords = right_half_arrow
1273:                 elif shape == 'full':
1274:                     # The half-arrows contain the midpoint of the stem,
1275:                     # which we can omit from the full arrow. Including it
1276:                     # twice caused a problem with xpdf.
1277:                     coords = np.concatenate([left_half_arrow[:-1],
1278:                                              right_half_arrow[-2::-1]])
1279:                 else:
1280:                     raise ValueError("Got unknown shape: %s" % shape)
1281:             if distance != 0:
1282:                 cx = float(dx) / distance
1283:                 sx = float(dy) / distance
1284:             else:
1285:                 #Account for division by zero
1286:                 cx, sx = 0, 1
1287:             M = np.array([[cx, sx], [-sx, cx]])
1288:             verts = np.dot(coords, M) + (x + dx, y + dy)
1289: 
1290:         Polygon.__init__(self, list(map(tuple, verts)), closed=True, **kwargs)
1291: 
1292: 
1293: docstring.interpd.update({"FancyArrow": FancyArrow.__init__.__doc__})
1294: 
1295: 
1296: class YAArrow(Patch):
1297:     '''
1298:     Yet another arrow class.
1299: 
1300:     This is an arrow that is defined in display space and has a tip at
1301:     *x1*, *y1* and a base at *x2*, *y2*.
1302:     '''
1303:     def __str__(self):
1304:         return "YAArrow()"
1305: 
1306:     @docstring.dedent_interpd
1307:     def __init__(self, figure, xytip, xybase,
1308:                  width=4, frac=0.1, headwidth=12, **kwargs):
1309:         '''
1310:         Constructor arguments:
1311: 
1312:         *xytip*
1313:           (*x*, *y*) location of arrow tip
1314: 
1315:         *xybase*
1316:           (*x*, *y*) location the arrow base mid point
1317: 
1318:         *figure*
1319:           The :class:`~matplotlib.figure.Figure` instance
1320:           (fig.dpi)
1321: 
1322:         *width*
1323:           The width of the arrow in points
1324: 
1325:         *frac*
1326:           The fraction of the arrow length occupied by the head
1327: 
1328:         *headwidth*
1329:           The width of the base of the arrow head in points
1330: 
1331:         Valid kwargs are:
1332:         %(Patch)s
1333: 
1334:         '''
1335:         self.xytip = xytip
1336:         self.xybase = xybase
1337:         self.width = width
1338:         self.frac = frac
1339:         self.headwidth = headwidth
1340:         Patch.__init__(self, **kwargs)
1341:         # Set self.figure after Patch.__init__, since it sets self.figure to
1342:         # None
1343:         self.figure = figure
1344: 
1345:     def get_path(self):
1346:         # Since this is dpi dependent, we need to recompute the path
1347:         # every time.
1348: 
1349:         # the base vertices
1350:         x1, y1 = self.xytip
1351:         x2, y2 = self.xybase
1352:         k1 = self.width * self.figure.dpi / 72. / 2.
1353:         k2 = self.headwidth * self.figure.dpi / 72. / 2.
1354:         xb1, yb1, xb2, yb2 = self.getpoints(x1, y1, x2, y2, k1)
1355: 
1356:         # a point on the segment 20% of the distance from the tip to the base
1357:         theta = math.atan2(y2 - y1, x2 - x1)
1358:         r = math.sqrt((y2 - y1) ** 2. + (x2 - x1) ** 2.)
1359:         xm = x1 + self.frac * r * math.cos(theta)
1360:         ym = y1 + self.frac * r * math.sin(theta)
1361:         xc1, yc1, xc2, yc2 = self.getpoints(x1, y1, xm, ym, k1)
1362:         xd1, yd1, xd2, yd2 = self.getpoints(x1, y1, xm, ym, k2)
1363: 
1364:         xs = self.convert_xunits([xb1, xb2, xc2, xd2, x1, xd1, xc1, xb1])
1365:         ys = self.convert_yunits([yb1, yb2, yc2, yd2, y1, yd1, yc1, yb1])
1366: 
1367:         return Path(list(zip(xs, ys)), closed=True)
1368: 
1369:     def get_patch_transform(self):
1370:         return transforms.IdentityTransform()
1371: 
1372:     def getpoints(self, x1, y1, x2, y2, k):
1373:         '''
1374:         For line segment defined by (*x1*, *y1*) and (*x2*, *y2*)
1375:         return the points on the line that is perpendicular to the
1376:         line and intersects (*x2*, *y2*) and the distance from (*x2*,
1377:         *y2*) of the returned points is *k*.
1378:         '''
1379:         x1, y1, x2, y2, k = map(float, (x1, y1, x2, y2, k))
1380: 
1381:         if y2 - y1 == 0:
1382:             return x2, y2 + k, x2, y2 - k
1383:         elif x2 - x1 == 0:
1384:             return x2 + k, y2, x2 - k, y2
1385: 
1386:         m = (y2 - y1) / (x2 - x1)
1387:         pm = -1. / m
1388:         a = 1
1389:         b = -2 * y2
1390:         c = y2 ** 2. - k ** 2. * pm ** 2. / (1. + pm ** 2.)
1391: 
1392:         y3a = (-b + math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)
1393:         x3a = (y3a - y2) / pm + x2
1394: 
1395:         y3b = (-b - math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)
1396:         x3b = (y3b - y2) / pm + x2
1397:         return x3a, y3a, x3b, y3b
1398: 
1399: 
1400: class CirclePolygon(RegularPolygon):
1401:     '''
1402:     A polygon-approximation of a circle patch.
1403:     '''
1404:     def __str__(self):
1405:         return "CirclePolygon(%d,%d)" % self.center
1406: 
1407:     @docstring.dedent_interpd
1408:     def __init__(self, xy, radius=5,
1409:                  resolution=20,  # the number of vertices
1410:                  ** kwargs):
1411:         '''
1412:         Create a circle at *xy* = (*x*, *y*) with given *radius*.
1413:         This circle is approximated by a regular polygon with
1414:         *resolution* sides.  For a smoother circle drawn with splines,
1415:         see :class:`~matplotlib.patches.Circle`.
1416: 
1417:         Valid kwargs are:
1418:         %(Patch)s
1419: 
1420:         '''
1421:         RegularPolygon.__init__(self, xy,
1422:                                 resolution,
1423:                                 radius,
1424:                                 orientation=0,
1425:                                 **kwargs)
1426: 
1427: 
1428: class Ellipse(Patch):
1429:     '''
1430:     A scale-free ellipse.
1431:     '''
1432:     def __str__(self):
1433:         pars = (self.center[0], self.center[1],
1434:                 self.width, self.height, self.angle)
1435:         fmt = "Ellipse(xy=(%s, %s), width=%s, height=%s, angle=%s)"
1436:         return fmt % pars
1437: 
1438:     @docstring.dedent_interpd
1439:     def __init__(self, xy, width, height, angle=0.0, **kwargs):
1440:         '''
1441:         *xy*
1442:           center of ellipse
1443: 
1444:         *width*
1445:           total length (diameter) of horizontal axis
1446: 
1447:         *height*
1448:           total length (diameter) of vertical axis
1449: 
1450:         *angle*
1451:           rotation in degrees (anti-clockwise)
1452: 
1453:         Valid kwargs are:
1454:         %(Patch)s
1455:         '''
1456:         Patch.__init__(self, **kwargs)
1457: 
1458:         self.center = xy
1459:         self.width, self.height = width, height
1460:         self.angle = angle
1461:         self._path = Path.unit_circle()
1462:         # Note: This cannot be calculated until this is added to an Axes
1463:         self._patch_transform = transforms.IdentityTransform()
1464: 
1465:     def _recompute_transform(self):
1466:         '''NOTE: This cannot be called until after this has been added
1467:                  to an Axes, otherwise unit conversion will fail. This
1468:                  maxes it very important to call the accessor method and
1469:                  not directly access the transformation member variable.
1470:         '''
1471:         center = (self.convert_xunits(self.center[0]),
1472:                   self.convert_yunits(self.center[1]))
1473:         width = self.convert_xunits(self.width)
1474:         height = self.convert_yunits(self.height)
1475:         self._patch_transform = transforms.Affine2D() \
1476:             .scale(width * 0.5, height * 0.5) \
1477:             .rotate_deg(self.angle) \
1478:             .translate(*center)
1479: 
1480:     def get_path(self):
1481:         '''
1482:         Return the vertices of the rectangle
1483:         '''
1484:         return self._path
1485: 
1486:     def get_patch_transform(self):
1487:         self._recompute_transform()
1488:         return self._patch_transform
1489: 
1490: 
1491: class Circle(Ellipse):
1492:     '''
1493:     A circle patch.
1494:     '''
1495:     def __str__(self):
1496:         pars = self.center[0], self.center[1], self.radius
1497:         fmt = "Circle(xy=(%g, %g), radius=%g)"
1498:         return fmt % pars
1499: 
1500:     @docstring.dedent_interpd
1501:     def __init__(self, xy, radius=5, **kwargs):
1502:         '''
1503:         Create true circle at center *xy* = (*x*, *y*) with given
1504:         *radius*.  Unlike :class:`~matplotlib.patches.CirclePolygon`
1505:         which is a polygonal approximation, this uses Bézier splines
1506:         and is much closer to a scale-free circle.
1507: 
1508:         Valid kwargs are:
1509:         %(Patch)s
1510: 
1511:         '''
1512:         Ellipse.__init__(self, xy, radius * 2, radius * 2, **kwargs)
1513:         self.radius = radius
1514: 
1515:     def set_radius(self, radius):
1516:         '''
1517:         Set the radius of the circle
1518: 
1519:         ACCEPTS: float
1520:         '''
1521:         self.width = self.height = 2 * radius
1522:         self.stale = True
1523: 
1524:     def get_radius(self):
1525:         'return the radius of the circle'
1526:         return self.width / 2.
1527: 
1528:     radius = property(get_radius, set_radius)
1529: 
1530: 
1531: class Arc(Ellipse):
1532:     '''
1533:     An elliptical arc.  Because it performs various optimizations, it
1534:     can not be filled.
1535: 
1536:     The arc must be used in an :class:`~matplotlib.axes.Axes`
1537:     instance---it can not be added directly to a
1538:     :class:`~matplotlib.figure.Figure`---because it is optimized to
1539:     only render the segments that are inside the axes bounding box
1540:     with high resolution.
1541:     '''
1542:     def __str__(self):
1543:         pars = (self.center[0], self.center[1], self.width,
1544:                 self.height, self.angle, self.theta1, self.theta2)
1545:         fmt = ("Arc(xy=(%g, %g), width=%g, "
1546:                "height=%g, angle=%g, theta1=%g, theta2=%g)")
1547:         return fmt % pars
1548: 
1549:     @docstring.dedent_interpd
1550:     def __init__(self, xy, width, height, angle=0.0,
1551:                  theta1=0.0, theta2=360.0, **kwargs):
1552:         '''
1553:         The following args are supported:
1554: 
1555:         *xy*
1556:           center of ellipse
1557: 
1558:         *width*
1559:           length of horizontal axis
1560: 
1561:         *height*
1562:           length of vertical axis
1563: 
1564:         *angle*
1565:           rotation in degrees (anti-clockwise)
1566: 
1567:         *theta1*
1568:           starting angle of the arc in degrees
1569: 
1570:         *theta2*
1571:           ending angle of the arc in degrees
1572: 
1573:         If *theta1* and *theta2* are not provided, the arc will form a
1574:         complete ellipse.
1575: 
1576:         Valid kwargs are:
1577: 
1578:         %(Patch)s
1579:         '''
1580:         fill = kwargs.setdefault('fill', False)
1581:         if fill:
1582:             raise ValueError("Arc objects can not be filled")
1583: 
1584:         Ellipse.__init__(self, xy, width, height, angle, **kwargs)
1585: 
1586:         self.theta1 = theta1
1587:         self.theta2 = theta2
1588: 
1589:     @allow_rasterization
1590:     def draw(self, renderer):
1591:         '''
1592:         Ellipses are normally drawn using an approximation that uses
1593:         eight cubic bezier splines.  The error of this approximation
1594:         is 1.89818e-6, according to this unverified source:
1595: 
1596:           Lancaster, Don.  Approximating a Circle or an Ellipse Using
1597:           Four Bezier Cubic Splines.
1598: 
1599:           http://www.tinaja.com/glib/ellipse4.pdf
1600: 
1601:         There is a use case where very large ellipses must be drawn
1602:         with very high accuracy, and it is too expensive to render the
1603:         entire ellipse with enough segments (either splines or line
1604:         segments).  Therefore, in the case where either radius of the
1605:         ellipse is large enough that the error of the spline
1606:         approximation will be visible (greater than one pixel offset
1607:         from the ideal), a different technique is used.
1608: 
1609:         In that case, only the visible parts of the ellipse are drawn,
1610:         with each visible arc using a fixed number of spline segments
1611:         (8).  The algorithm proceeds as follows:
1612: 
1613:           1. The points where the ellipse intersects the axes bounding
1614:              box are located.  (This is done be performing an inverse
1615:              transformation on the axes bbox such that it is relative
1616:              to the unit circle -- this makes the intersection
1617:              calculation much easier than doing rotated ellipse
1618:              intersection directly).
1619: 
1620:              This uses the "line intersecting a circle" algorithm
1621:              from:
1622: 
1623:                Vince, John.  Geometry for Computer Graphics: Formulae,
1624:                Examples & Proofs.  London: Springer-Verlag, 2005.
1625: 
1626:           2. The angles of each of the intersection points are
1627:              calculated.
1628: 
1629:           3. Proceeding counterclockwise starting in the positive
1630:              x-direction, each of the visible arc-segments between the
1631:              pairs of vertices are drawn using the bezier arc
1632:              approximation technique implemented in
1633:              :meth:`matplotlib.path.Path.arc`.
1634:         '''
1635:         if not hasattr(self, 'axes'):
1636:             raise RuntimeError('Arcs can only be used in Axes instances')
1637: 
1638:         self._recompute_transform()
1639: 
1640:         width = self.convert_xunits(self.width)
1641:         height = self.convert_yunits(self.height)
1642: 
1643:         # If the width and height of ellipse are not equal, take into account
1644:         # stretching when calculating angles to draw between
1645:         def theta_stretch(theta, scale):
1646:             theta = np.deg2rad(theta)
1647:             x = np.cos(theta)
1648:             y = np.sin(theta)
1649:             return np.rad2deg(np.arctan2(scale * y, x))
1650:         theta1 = theta_stretch(self.theta1, width / height)
1651:         theta2 = theta_stretch(self.theta2, width / height)
1652: 
1653:         # Get width and height in pixels
1654:         width, height = self.get_transform().transform_point((width, height))
1655:         inv_error = (1.0 / 1.89818e-6) * 0.5
1656:         if width < inv_error and height < inv_error:
1657:             self._path = Path.arc(theta1, theta2)
1658:             return Patch.draw(self, renderer)
1659: 
1660:         def iter_circle_intersect_on_line(x0, y0, x1, y1):
1661:             dx = x1 - x0
1662:             dy = y1 - y0
1663:             dr2 = dx * dx + dy * dy
1664:             D = x0 * y1 - x1 * y0
1665:             D2 = D * D
1666:             discrim = dr2 - D2
1667: 
1668:             # Single (tangential) intersection
1669:             if discrim == 0.0:
1670:                 x = (D * dy) / dr2
1671:                 y = (-D * dx) / dr2
1672:                 yield x, y
1673:             elif discrim > 0.0:
1674:                 # The definition of "sign" here is different from
1675:                 # np.sign: we never want to get 0.0
1676:                 if dy < 0.0:
1677:                     sign_dy = -1.0
1678:                 else:
1679:                     sign_dy = 1.0
1680:                 sqrt_discrim = np.sqrt(discrim)
1681:                 for sign in (1., -1.):
1682:                     x = (D * dy + sign * sign_dy * dx * sqrt_discrim) / dr2
1683:                     y = (-D * dx + sign * np.abs(dy) * sqrt_discrim) / dr2
1684:                     yield x, y
1685: 
1686:         def iter_circle_intersect_on_line_seg(x0, y0, x1, y1):
1687:             epsilon = 1e-9
1688:             if x1 < x0:
1689:                 x0e, x1e = x1, x0
1690:             else:
1691:                 x0e, x1e = x0, x1
1692:             if y1 < y0:
1693:                 y0e, y1e = y1, y0
1694:             else:
1695:                 y0e, y1e = y0, y1
1696:             x0e -= epsilon
1697:             y0e -= epsilon
1698:             x1e += epsilon
1699:             y1e += epsilon
1700:             for x, y in iter_circle_intersect_on_line(x0, y0, x1, y1):
1701:                 if x >= x0e and x <= x1e and y >= y0e and y <= y1e:
1702:                     yield x, y
1703: 
1704:         # Transforms the axes box_path so that it is relative to the unit
1705:         # circle in the same way that it is relative to the desired
1706:         # ellipse.
1707:         box_path = Path.unit_rectangle()
1708:         box_path_transform = transforms.BboxTransformTo(self.axes.bbox) + \
1709:             self.get_transform().inverted()
1710:         box_path = box_path.transformed(box_path_transform)
1711: 
1712:         thetas = set()
1713:         # For each of the point pairs, there is a line segment
1714:         for p0, p1 in zip(box_path.vertices[:-1], box_path.vertices[1:]):
1715:             x0, y0 = p0
1716:             x1, y1 = p1
1717:             for x, y in iter_circle_intersect_on_line_seg(x0, y0, x1, y1):
1718:                 theta = np.arccos(x)
1719:                 if y < 0:
1720:                     theta = 2 * np.pi - theta
1721:                 # Convert radians to angles
1722:                 theta = np.rad2deg(theta)
1723:                 if theta1 < theta < theta2:
1724:                     thetas.add(theta)
1725:         thetas = sorted(thetas) + [theta2]
1726: 
1727:         last_theta = theta1
1728:         theta1_rad = np.deg2rad(theta1)
1729:         inside = box_path.contains_point((np.cos(theta1_rad),
1730:                                           np.sin(theta1_rad)))
1731: 
1732:         # save original path
1733:         path_original = self._path
1734:         for theta in thetas:
1735:             if inside:
1736:                 Path.arc(last_theta, theta, 8)
1737:                 Patch.draw(self, renderer)
1738:                 inside = False
1739:             else:
1740:                 inside = True
1741:             last_theta = theta
1742: 
1743:         # restore original path
1744:         self._path = path_original
1745: 
1746: 
1747: def bbox_artist(artist, renderer, props=None, fill=True):
1748:     '''
1749:     This is a debug function to draw a rectangle around the bounding
1750:     box returned by
1751:     :meth:`~matplotlib.artist.Artist.get_window_extent` of an artist,
1752:     to test whether the artist is returning the correct bbox.
1753: 
1754:     *props* is a dict of rectangle props with the additional property
1755:     'pad' that sets the padding around the bbox in points.
1756:     '''
1757:     if props is None:
1758:         props = {}
1759:     props = props.copy()  # don't want to alter the pad externally
1760:     pad = props.pop('pad', 4)
1761:     pad = renderer.points_to_pixels(pad)
1762:     bbox = artist.get_window_extent(renderer)
1763:     l, b, w, h = bbox.bounds
1764:     l -= pad / 2.
1765:     b -= pad / 2.
1766:     w += pad
1767:     h += pad
1768:     r = Rectangle(xy=(l, b),
1769:                   width=w,
1770:                   height=h,
1771:                   fill=fill,
1772:                   )
1773:     r.set_transform(transforms.IdentityTransform())
1774:     r.set_clip_on(False)
1775:     r.update(props)
1776:     r.draw(renderer)
1777: 
1778: 
1779: def draw_bbox(bbox, renderer, color='k', trans=None):
1780:     '''
1781:     This is a debug function to draw a rectangle around the bounding
1782:     box returned by
1783:     :meth:`~matplotlib.artist.Artist.get_window_extent` of an artist,
1784:     to test whether the artist is returning the correct bbox.
1785:     '''
1786: 
1787:     l, b, w, h = bbox.bounds
1788:     r = Rectangle(xy=(l, b),
1789:                   width=w,
1790:                   height=h,
1791:                   edgecolor=color,
1792:                   fill=False,
1793:                   )
1794:     if trans is not None:
1795:         r.set_transform(trans)
1796:     r.set_clip_on(False)
1797:     r.draw(renderer)
1798: 
1799: 
1800: def _pprint_table(_table, leadingspace=2):
1801:     '''
1802:     Given the list of list of strings, return a string of REST table format.
1803:     '''
1804:     if leadingspace:
1805:         pad = ' ' * leadingspace
1806:     else:
1807:         pad = ''
1808: 
1809:     columns = [[] for cell in _table[0]]
1810: 
1811:     for row in _table:
1812:         for column, cell in zip(columns, row):
1813:             column.append(cell)
1814: 
1815:     col_len = [max(len(cell) for cell in column) for column in columns]
1816: 
1817:     lines = []
1818:     table_formatstr = pad + '   '.join([('=' * cl) for cl in col_len])
1819: 
1820:     lines.append('')
1821:     lines.append(table_formatstr)
1822:     lines.append(pad + '   '.join([cell.ljust(cl)
1823:                                    for cell, cl
1824:                                    in zip(_table[0], col_len)]))
1825:     lines.append(table_formatstr)
1826: 
1827:     lines.extend([(pad + '   '.join([cell.ljust(cl)
1828:                                      for cell, cl
1829:                                      in zip(row, col_len)]))
1830:                   for row in _table[1:]])
1831: 
1832:     lines.append(table_formatstr)
1833:     lines.append('')
1834:     return "\n".join(lines)
1835: 
1836: 
1837: def _pprint_styles(_styles):
1838:     '''
1839:     A helper function for the _Style class.  Given the dictionary of
1840:     (stylename : styleclass), return a formatted string listing all the
1841:     styles. Used to update the documentation.
1842:     '''
1843:     import inspect
1844: 
1845:     _table = [["Class", "Name", "Attrs"]]
1846: 
1847:     for name, cls in sorted(_styles.items()):
1848:         if six.PY2:
1849:             args, varargs, varkw, defaults = inspect.getargspec(cls.__init__)
1850:         else:
1851:             (args, varargs, varkw, defaults, kwonlyargs, kwonlydefs,
1852:                 annotations) = inspect.getfullargspec(cls.__init__)
1853:         if defaults:
1854:             args = [(argname, argdefault)
1855:                     for argname, argdefault in zip(args[1:], defaults)]
1856:         else:
1857:             args = None
1858: 
1859:         if args is None:
1860:             argstr = 'None'
1861:         else:
1862:             argstr = ",".join([("%s=%s" % (an, av))
1863:                                for an, av
1864:                                in args])
1865: 
1866:         # adding ``quotes`` since - and | have special meaning in reST
1867:         _table.append([cls.__name__, "``%s``" % name, argstr])
1868: 
1869:     return _pprint_table(_table)
1870: 
1871: 
1872: def _simpleprint_styles(_styles):
1873:     '''
1874:     A helper function for the _Style class.  Given the dictionary of
1875:     (stylename : styleclass), return a string rep of the list of keys.
1876:     Used to update the documentation.
1877:     '''
1878:     return "[{}]".format("|".join(map(" '{}' ".format, sorted(_styles))))
1879: 
1880: 
1881: class _Style(object):
1882:     '''
1883:     A base class for the Styles. It is meant to be a container class,
1884:     where actual styles are declared as subclass of it, and it
1885:     provides some helper functions.
1886:     '''
1887:     def __new__(self, stylename, **kw):
1888:         '''
1889:         return the instance of the subclass with the given style name.
1890:         '''
1891: 
1892:         # the "class" should have the _style_list attribute, which is
1893:         # a dictionary of stylname, style class paie.
1894: 
1895:         _list = stylename.replace(" ", "").split(",")
1896:         _name = _list[0].lower()
1897:         try:
1898:             _cls = self._style_list[_name]
1899:         except KeyError:
1900:             raise ValueError("Unknown style : %s" % stylename)
1901: 
1902:         try:
1903:             _args_pair = [cs.split("=") for cs in _list[1:]]
1904:             _args = {k: float(v) for k, v in _args_pair}
1905:         except ValueError:
1906:             raise ValueError("Incorrect style argument : %s" % stylename)
1907:         _args.update(kw)
1908: 
1909:         return _cls(**_args)
1910: 
1911:     @classmethod
1912:     def get_styles(klass):
1913:         '''
1914:         A class method which returns a dictionary of available styles.
1915:         '''
1916:         return klass._style_list
1917: 
1918:     @classmethod
1919:     def pprint_styles(klass):
1920:         '''
1921:         A class method which returns a string of the available styles.
1922:         '''
1923:         return _pprint_styles(klass._style_list)
1924: 
1925:     @classmethod
1926:     def register(klass, name, style):
1927:         '''
1928:         Register a new style.
1929:         '''
1930: 
1931:         if not issubclass(style, klass._Base):
1932:             raise ValueError("%s must be a subclass of %s" % (style,
1933:                                                               klass._Base))
1934:         klass._style_list[name] = style
1935: 
1936: 
1937: class BoxStyle(_Style):
1938:     '''
1939:     :class:`BoxStyle` is a container class which defines several
1940:     boxstyle classes, which are used for :class:`FancyBboxPatch`.
1941: 
1942:     A style object can be created as::
1943: 
1944:            BoxStyle.Round(pad=0.2)
1945: 
1946:     or::
1947: 
1948:            BoxStyle("Round", pad=0.2)
1949: 
1950:     or::
1951: 
1952:            BoxStyle("Round, pad=0.2")
1953: 
1954:     Following boxstyle classes are defined.
1955: 
1956:     %(AvailableBoxstyles)s
1957: 
1958:     An instance of any boxstyle class is an callable object,
1959:     whose call signature is::
1960: 
1961:        __call__(self, x0, y0, width, height, mutation_size, aspect_ratio=1.)
1962: 
1963:     and returns a :class:`Path` instance. *x0*, *y0*, *width* and
1964:     *height* specify the location and size of the box to be
1965:     drawn. *mutation_scale* determines the overall size of the
1966:     mutation (by which I mean the transformation of the rectangle to
1967:     the fancy box).  *mutation_aspect* determines the aspect-ratio of
1968:     the mutation.
1969:     '''
1970: 
1971:     _style_list = {}
1972: 
1973:     class _Base(object):
1974:         '''
1975:         :class:`BBoxTransmuterBase` and its derivatives are used to make a
1976:         fancy box around a given rectangle. The :meth:`__call__` method
1977:         returns the :class:`~matplotlib.path.Path` of the fancy box. This
1978:         class is not an artist and actual drawing of the fancy box is done
1979:         by the :class:`FancyBboxPatch` class.
1980:         '''
1981: 
1982:         # The derived classes are required to be able to be initialized
1983:         # w/o arguments, i.e., all its argument (except self) must have
1984:         # the default values.
1985: 
1986:         def __init__(self):
1987:             '''
1988:             initializtion.
1989:             '''
1990:             super(BoxStyle._Base, self).__init__()
1991: 
1992:         def transmute(self, x0, y0, width, height, mutation_size):
1993:             '''
1994:             The transmute method is a very core of the
1995:             :class:`BboxTransmuter` class and must be overridden in the
1996:             subclasses. It receives the location and size of the
1997:             rectangle, and the mutation_size, with which the amount of
1998:             padding and etc. will be scaled. It returns a
1999:             :class:`~matplotlib.path.Path` instance.
2000:             '''
2001:             raise NotImplementedError('Derived must override')
2002: 
2003:         def __call__(self, x0, y0, width, height, mutation_size,
2004:                      aspect_ratio=1.):
2005:             '''
2006:             Given the location and size of the box, return the path of
2007:             the box around it.
2008: 
2009:               - *x0*, *y0*, *width*, *height* : location and size of the box
2010:               - *mutation_size* : a reference scale for the mutation.
2011:               - *aspect_ratio* : aspect-ration for the mutation.
2012:             '''
2013:             # The __call__ method is a thin wrapper around the transmute method
2014:             # and take care of the aspect.
2015: 
2016:             if aspect_ratio is not None:
2017:                 # Squeeze the given height by the aspect_ratio
2018:                 y0, height = y0 / aspect_ratio, height / aspect_ratio
2019:                 # call transmute method with squeezed height.
2020:                 path = self.transmute(x0, y0, width, height, mutation_size)
2021:                 vertices, codes = path.vertices, path.codes
2022:                 # Restore the height
2023:                 vertices[:, 1] = vertices[:, 1] * aspect_ratio
2024:                 return Path(vertices, codes)
2025:             else:
2026:                 return self.transmute(x0, y0, width, height, mutation_size)
2027: 
2028:         def __reduce__(self):
2029:             # because we have decided to nest thes classes, we need to
2030:             # add some more information to allow instance pickling.
2031:             import matplotlib.cbook as cbook
2032:             return (cbook._NestedClassGetter(),
2033:                     (BoxStyle, self.__class__.__name__),
2034:                     self.__dict__
2035:                     )
2036: 
2037:     class Square(_Base):
2038:         '''
2039:         A simple square box.
2040:         '''
2041: 
2042:         def __init__(self, pad=0.3):
2043:             '''
2044:              *pad*
2045:                 amount of padding
2046:             '''
2047: 
2048:             self.pad = pad
2049:             super(BoxStyle.Square, self).__init__()
2050: 
2051:         def transmute(self, x0, y0, width, height, mutation_size):
2052:             pad = mutation_size * self.pad
2053: 
2054:             # width and height with padding added.
2055:             width, height = width + 2*pad, height + 2*pad
2056: 
2057:             # boundary of the padded box
2058:             x0, y0 = x0 - pad, y0 - pad,
2059:             x1, y1 = x0 + width, y0 + height
2060: 
2061:             vertices = [(x0, y0), (x1, y0), (x1, y1), (x0, y1), (x0, y0)]
2062:             codes = [Path.MOVETO] + [Path.LINETO] * 3 + [Path.CLOSEPOLY]
2063:             return Path(vertices, codes)
2064: 
2065:     _style_list["square"] = Square
2066: 
2067:     class Circle(_Base):
2068:         '''A simple circle box.'''
2069:         def __init__(self, pad=0.3):
2070:             '''
2071:             Parameters
2072:             ----------
2073:             pad : float
2074:                 The amount of padding around the original box.
2075:             '''
2076:             self.pad = pad
2077:             super(BoxStyle.Circle, self).__init__()
2078: 
2079:         def transmute(self, x0, y0, width, height, mutation_size):
2080:             pad = mutation_size * self.pad
2081:             width, height = width + 2 * pad, height + 2 * pad
2082: 
2083:             # boundary of the padded box
2084:             x0, y0 = x0 - pad, y0 - pad,
2085:             return Path.circle((x0 + width / 2, y0 + height / 2),
2086:                                max(width, height) / 2)
2087: 
2088:     _style_list["circle"] = Circle
2089: 
2090:     class LArrow(_Base):
2091:         '''
2092:         (left) Arrow Box
2093:         '''
2094:         def __init__(self, pad=0.3):
2095:             self.pad = pad
2096:             super(BoxStyle.LArrow, self).__init__()
2097: 
2098:         def transmute(self, x0, y0, width, height, mutation_size):
2099:             # padding
2100:             pad = mutation_size * self.pad
2101: 
2102:             # width and height with padding added.
2103:             width, height = width + 2. * pad, height + 2. * pad
2104: 
2105:             # boundary of the padded box
2106:             x0, y0 = x0 - pad, y0 - pad,
2107:             x1, y1 = x0 + width, y0 + height
2108: 
2109:             dx = (y1 - y0) / 2.
2110:             dxx = dx * .5
2111:             # adjust x0.  1.4 <- sqrt(2)
2112:             x0 = x0 + pad / 1.4
2113: 
2114:             cp = [(x0 + dxx, y0), (x1, y0), (x1, y1), (x0 + dxx, y1),
2115:                   (x0 + dxx, y1 + dxx), (x0 - dx, y0 + dx),
2116:                   (x0 + dxx, y0 - dxx),  # arrow
2117:                   (x0 + dxx, y0), (x0 + dxx, y0)]
2118: 
2119:             com = [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO,
2120:                    Path.LINETO, Path.LINETO, Path.LINETO,
2121:                    Path.LINETO, Path.CLOSEPOLY]
2122: 
2123:             path = Path(cp, com)
2124: 
2125:             return path
2126:     _style_list["larrow"] = LArrow
2127: 
2128:     class RArrow(LArrow):
2129:         '''
2130:         (right) Arrow Box
2131:         '''
2132: 
2133:         def __init__(self, pad=0.3):
2134:             super(BoxStyle.RArrow, self).__init__(pad)
2135: 
2136:         def transmute(self, x0, y0, width, height, mutation_size):
2137: 
2138:             p = BoxStyle.LArrow.transmute(self, x0, y0,
2139:                                           width, height, mutation_size)
2140: 
2141:             p.vertices[:, 0] = 2 * x0 + width - p.vertices[:, 0]
2142: 
2143:             return p
2144: 
2145:     _style_list["rarrow"] = RArrow
2146: 
2147:     class DArrow(_Base):
2148:         '''
2149:         (Double) Arrow Box
2150:         '''
2151:         # This source is copied from LArrow,
2152:         # modified to add a right arrow to the bbox.
2153: 
2154:         def __init__(self, pad=0.3):
2155:             self.pad = pad
2156:             super(BoxStyle.DArrow, self).__init__()
2157: 
2158:         def transmute(self, x0, y0, width, height, mutation_size):
2159: 
2160:             # padding
2161:             pad = mutation_size * self.pad
2162: 
2163:             # width and height with padding added.
2164:             # The width is padded by the arrows, so we don't need to pad it.
2165:             height = height + 2. * pad
2166: 
2167:             # boundary of the padded box
2168:             x0, y0 = x0 - pad, y0 - pad
2169:             x1, y1 = x0 + width, y0 + height
2170: 
2171:             dx = (y1 - y0)/2.
2172:             dxx = dx * .5
2173:             # adjust x0.  1.4 <- sqrt(2)
2174:             x0 = x0 + pad / 1.4
2175: 
2176:             cp = [(x0 + dxx, y0), (x1, y0),  # bot-segment
2177:                   (x1, y0 - dxx), (x1 + dx + dxx, y0 + dx),
2178:                   (x1, y1 + dxx),  # right-arrow
2179:                   (x1, y1), (x0 + dxx, y1),  # top-segment
2180:                   (x0 + dxx, y1 + dxx), (x0 - dx, y0 + dx),
2181:                   (x0 + dxx, y0 - dxx),  # left-arrow
2182:                   (x0 + dxx, y0), (x0 + dxx, y0)]  # close-poly
2183: 
2184:             com = [Path.MOVETO, Path.LINETO,
2185:                    Path.LINETO, Path.LINETO,
2186:                    Path.LINETO,
2187:                    Path.LINETO, Path.LINETO,
2188:                    Path.LINETO, Path.LINETO,
2189:                    Path.LINETO,
2190:                    Path.LINETO, Path.CLOSEPOLY]
2191: 
2192:             path = Path(cp, com)
2193: 
2194:             return path
2195: 
2196:     _style_list['darrow'] = DArrow
2197: 
2198:     class Round(_Base):
2199:         '''
2200:         A box with round corners.
2201:         '''
2202: 
2203:         def __init__(self, pad=0.3, rounding_size=None):
2204:             '''
2205:             *pad*
2206:               amount of padding
2207: 
2208:             *rounding_size*
2209:               rounding radius of corners. *pad* if None
2210:             '''
2211:             self.pad = pad
2212:             self.rounding_size = rounding_size
2213:             super(BoxStyle.Round, self).__init__()
2214: 
2215:         def transmute(self, x0, y0, width, height, mutation_size):
2216: 
2217:             # padding
2218:             pad = mutation_size * self.pad
2219: 
2220:             # size of the roudning corner
2221:             if self.rounding_size:
2222:                 dr = mutation_size * self.rounding_size
2223:             else:
2224:                 dr = pad
2225: 
2226:             width, height = width + 2. * pad, height + 2. * pad
2227: 
2228:             x0, y0 = x0 - pad, y0 - pad,
2229:             x1, y1 = x0 + width, y0 + height
2230: 
2231:             # Round corners are implemented as quadratic bezier. e.g.,
2232:             # [(x0, y0-dr), (x0, y0), (x0+dr, y0)] for lower left corner.
2233:             cp = [(x0 + dr, y0),
2234:                   (x1 - dr, y0),
2235:                   (x1, y0), (x1, y0 + dr),
2236:                   (x1, y1 - dr),
2237:                   (x1, y1), (x1 - dr, y1),
2238:                   (x0 + dr, y1),
2239:                   (x0, y1), (x0, y1 - dr),
2240:                   (x0, y0 + dr),
2241:                   (x0, y0), (x0 + dr, y0),
2242:                   (x0 + dr, y0)]
2243: 
2244:             com = [Path.MOVETO,
2245:                    Path.LINETO,
2246:                    Path.CURVE3, Path.CURVE3,
2247:                    Path.LINETO,
2248:                    Path.CURVE3, Path.CURVE3,
2249:                    Path.LINETO,
2250:                    Path.CURVE3, Path.CURVE3,
2251:                    Path.LINETO,
2252:                    Path.CURVE3, Path.CURVE3,
2253:                    Path.CLOSEPOLY]
2254: 
2255:             path = Path(cp, com)
2256: 
2257:             return path
2258: 
2259:     _style_list["round"] = Round
2260: 
2261:     class Round4(_Base):
2262:         '''
2263:         Another box with round edges.
2264:         '''
2265: 
2266:         def __init__(self, pad=0.3, rounding_size=None):
2267:             '''
2268:             *pad*
2269:               amount of padding
2270: 
2271:             *rounding_size*
2272:               rounding size of edges. *pad* if None
2273:             '''
2274: 
2275:             self.pad = pad
2276:             self.rounding_size = rounding_size
2277:             super(BoxStyle.Round4, self).__init__()
2278: 
2279:         def transmute(self, x0, y0, width, height, mutation_size):
2280: 
2281:             # padding
2282:             pad = mutation_size * self.pad
2283: 
2284:             # roudning size. Use a half of the pad if not set.
2285:             if self.rounding_size:
2286:                 dr = mutation_size * self.rounding_size
2287:             else:
2288:                 dr = pad / 2.
2289: 
2290:             width, height = (width + 2. * pad - 2 * dr,
2291:                              height + 2. * pad - 2 * dr)
2292: 
2293:             x0, y0 = x0 - pad + dr, y0 - pad + dr,
2294:             x1, y1 = x0 + width, y0 + height
2295: 
2296:             cp = [(x0, y0),
2297:                   (x0 + dr, y0 - dr), (x1 - dr, y0 - dr), (x1, y0),
2298:                   (x1 + dr, y0 + dr), (x1 + dr, y1 - dr), (x1, y1),
2299:                   (x1 - dr, y1 + dr), (x0 + dr, y1 + dr), (x0, y1),
2300:                   (x0 - dr, y1 - dr), (x0 - dr, y0 + dr), (x0, y0),
2301:                   (x0, y0)]
2302: 
2303:             com = [Path.MOVETO,
2304:                    Path.CURVE4, Path.CURVE4, Path.CURVE4,
2305:                    Path.CURVE4, Path.CURVE4, Path.CURVE4,
2306:                    Path.CURVE4, Path.CURVE4, Path.CURVE4,
2307:                    Path.CURVE4, Path.CURVE4, Path.CURVE4,
2308:                    Path.CLOSEPOLY]
2309: 
2310:             path = Path(cp, com)
2311: 
2312:             return path
2313: 
2314:     _style_list["round4"] = Round4
2315: 
2316:     class Sawtooth(_Base):
2317:         '''
2318:         A sawtooth box.
2319:         '''
2320: 
2321:         def __init__(self, pad=0.3, tooth_size=None):
2322:             '''
2323:             *pad*
2324:               amount of padding
2325: 
2326:             *tooth_size*
2327:               size of the sawtooth. pad* if None
2328:             '''
2329:             self.pad = pad
2330:             self.tooth_size = tooth_size
2331:             super(BoxStyle.Sawtooth, self).__init__()
2332: 
2333:         def _get_sawtooth_vertices(self, x0, y0, width, height, mutation_size):
2334: 
2335:             # padding
2336:             pad = mutation_size * self.pad
2337: 
2338:             # size of sawtooth
2339:             if self.tooth_size is None:
2340:                 tooth_size = self.pad * .5 * mutation_size
2341:             else:
2342:                 tooth_size = self.tooth_size * mutation_size
2343: 
2344:             tooth_size2 = tooth_size / 2.
2345:             width, height = (width + 2. * pad - tooth_size,
2346:                             height + 2. * pad - tooth_size)
2347: 
2348:             # the sizes of the vertical and horizontal sawtooth are
2349:             # separately adjusted to fit the given box size.
2350:             dsx_n = int(np.round((width - tooth_size) / (tooth_size * 2))) * 2
2351:             dsx = (width - tooth_size) / dsx_n
2352:             dsy_n = int(np.round((height - tooth_size) / (tooth_size * 2))) * 2
2353:             dsy = (height - tooth_size) / dsy_n
2354: 
2355:             x0, y0 = x0 - pad + tooth_size2, y0 - pad + tooth_size2
2356:             x1, y1 = x0 + width, y0 + height
2357: 
2358:             bottom_saw_x = [x0] + \
2359:                            [x0 + tooth_size2 + dsx * .5 * i
2360:                             for i
2361:                             in range(dsx_n * 2)] + \
2362:                            [x1 - tooth_size2]
2363: 
2364:             bottom_saw_y = [y0] + \
2365:                            [y0 - tooth_size2, y0,
2366:                             y0 + tooth_size2, y0] * dsx_n + \
2367:                            [y0 - tooth_size2]
2368: 
2369:             right_saw_x = [x1] + \
2370:                           [x1 + tooth_size2,
2371:                            x1,
2372:                            x1 - tooth_size2,
2373:                            x1] * dsx_n + \
2374:                           [x1 + tooth_size2]
2375: 
2376:             right_saw_y = [y0] + \
2377:                           [y0 + tooth_size2 + dsy * .5 * i
2378:                            for i
2379:                            in range(dsy_n * 2)] + \
2380:                           [y1 - tooth_size2]
2381: 
2382:             top_saw_x = [x1] + \
2383:                         [x1 - tooth_size2 - dsx * .5 * i
2384:                          for i
2385:                          in range(dsx_n * 2)] + \
2386:                         [x0 + tooth_size2]
2387: 
2388:             top_saw_y = [y1] + \
2389:                         [y1 + tooth_size2,
2390:                          y1,
2391:                          y1 - tooth_size2,
2392:                          y1] * dsx_n + \
2393:                         [y1 + tooth_size2]
2394: 
2395:             left_saw_x = [x0] + \
2396:                          [x0 - tooth_size2,
2397:                           x0,
2398:                           x0 + tooth_size2,
2399:                           x0] * dsy_n + \
2400:                          [x0 - tooth_size2]
2401: 
2402:             left_saw_y = [y1] + \
2403:                          [y1 - tooth_size2 - dsy * .5 * i
2404:                           for i
2405:                           in range(dsy_n * 2)] + \
2406:                          [y0 + tooth_size2]
2407: 
2408:             saw_vertices = (list(zip(bottom_saw_x, bottom_saw_y)) +
2409:                             list(zip(right_saw_x, right_saw_y)) +
2410:                             list(zip(top_saw_x, top_saw_y)) +
2411:                             list(zip(left_saw_x, left_saw_y)) +
2412:                             [(bottom_saw_x[0], bottom_saw_y[0])])
2413: 
2414:             return saw_vertices
2415: 
2416:         def transmute(self, x0, y0, width, height, mutation_size):
2417: 
2418:             saw_vertices = self._get_sawtooth_vertices(x0, y0, width,
2419:                                                        height, mutation_size)
2420:             path = Path(saw_vertices, closed=True)
2421:             return path
2422: 
2423:     _style_list["sawtooth"] = Sawtooth
2424: 
2425:     class Roundtooth(Sawtooth):
2426:         '''A rounded tooth box.'''
2427:         def __init__(self, pad=0.3, tooth_size=None):
2428:             '''
2429:             *pad*
2430:               amount of padding
2431: 
2432:             *tooth_size*
2433:               size of the sawtooth. pad* if None
2434:             '''
2435:             super(BoxStyle.Roundtooth, self).__init__(pad, tooth_size)
2436: 
2437:         def transmute(self, x0, y0, width, height, mutation_size):
2438:             saw_vertices = self._get_sawtooth_vertices(x0, y0,
2439:                                                        width, height,
2440:                                                        mutation_size)
2441:             # Add a trailing vertex to allow us to close the polygon correctly
2442:             saw_vertices = np.concatenate([np.array(saw_vertices),
2443:                                            [saw_vertices[0]]], axis=0)
2444:             codes = ([Path.MOVETO] +
2445:                      [Path.CURVE3, Path.CURVE3] * ((len(saw_vertices)-1)//2) +
2446:                      [Path.CLOSEPOLY])
2447:             return Path(saw_vertices, codes)
2448: 
2449:     _style_list["roundtooth"] = Roundtooth
2450: 
2451:     if __doc__:  # __doc__ could be None if -OO optimization is enabled
2452:         __doc__ = cbook.dedent(__doc__) % \
2453:                {"AvailableBoxstyles": _pprint_styles(_style_list)}
2454: 
2455: docstring.interpd.update(
2456:     AvailableBoxstyles=_pprint_styles(BoxStyle._style_list),
2457:     ListBoxstyles=_simpleprint_styles(BoxStyle._style_list))
2458: 
2459: 
2460: class FancyBboxPatch(Patch):
2461:     '''
2462:     Draw a fancy box around a rectangle with lower left at *xy*=(*x*,
2463:     *y*) with specified width and height.
2464: 
2465:     :class:`FancyBboxPatch` class is similar to :class:`Rectangle`
2466:     class, but it draws a fancy box around the rectangle. The
2467:     transformation of the rectangle box to the fancy box is delegated
2468:     to the :class:`BoxTransmuterBase` and its derived classes.
2469: 
2470:     '''
2471: 
2472:     _edge_default = True
2473: 
2474:     def __str__(self):
2475:         return self.__class__.__name__ \
2476:                            + "(%g,%g;%gx%g)" % (self._x, self._y,
2477:                                                 self._width, self._height)
2478: 
2479:     @docstring.dedent_interpd
2480:     def __init__(self, xy, width, height,
2481:                  boxstyle="round",
2482:                  bbox_transmuter=None,
2483:                  mutation_scale=1.,
2484:                  mutation_aspect=None,
2485:                  **kwargs):
2486:         '''
2487:         *xy* = lower left corner
2488: 
2489:         *width*, *height*
2490: 
2491:         *boxstyle* determines what kind of fancy box will be drawn. It
2492:         can be a string of the style name with a comma separated
2493:         attribute, or an instance of :class:`BoxStyle`. Following box
2494:         styles are available.
2495: 
2496:         %(AvailableBoxstyles)s
2497: 
2498:         *mutation_scale* : a value with which attributes of boxstyle
2499:         (e.g., pad) will be scaled. default=1.
2500: 
2501:         *mutation_aspect* : The height of the rectangle will be
2502:         squeezed by this value before the mutation and the mutated
2503:         box will be stretched by the inverse of it. default=None.
2504: 
2505:         Valid kwargs are:
2506:         %(Patch)s
2507:         '''
2508: 
2509:         Patch.__init__(self, **kwargs)
2510: 
2511:         self._x = xy[0]
2512:         self._y = xy[1]
2513:         self._width = width
2514:         self._height = height
2515: 
2516:         if boxstyle == "custom":
2517:             if bbox_transmuter is None:
2518:                 raise ValueError("bbox_transmuter argument is needed with "
2519:                                  "custom boxstyle")
2520:             self._bbox_transmuter = bbox_transmuter
2521:         else:
2522:             self.set_boxstyle(boxstyle)
2523: 
2524:         self._mutation_scale = mutation_scale
2525:         self._mutation_aspect = mutation_aspect
2526: 
2527:         self.stale = True
2528: 
2529:     @docstring.dedent_interpd
2530:     def set_boxstyle(self, boxstyle=None, **kw):
2531:         '''
2532:         Set the box style.
2533: 
2534:         *boxstyle* can be a string with boxstyle name with optional
2535:         comma-separated attributes. Alternatively, the attrs can
2536:         be provided as keywords::
2537: 
2538:             set_boxstyle("round,pad=0.2")
2539:             set_boxstyle("round", pad=0.2)
2540: 
2541:         Old attrs simply are forgotten.
2542: 
2543:         Without argument (or with *boxstyle* = None), it returns
2544:         available box styles.
2545: 
2546:         The following boxstyles are available:
2547:         %(AvailableBoxstyles)s
2548: 
2549:         ACCEPTS: %(ListBoxstyles)s
2550: 
2551:         '''
2552:         if boxstyle is None:
2553:             return BoxStyle.pprint_styles()
2554: 
2555:         if isinstance(boxstyle, BoxStyle._Base) or callable(boxstyle):
2556:             self._bbox_transmuter = boxstyle
2557:         else:
2558:             self._bbox_transmuter = BoxStyle(boxstyle, **kw)
2559:         self.stale = True
2560: 
2561:     def set_mutation_scale(self, scale):
2562:         '''
2563:         Set the mutation scale.
2564: 
2565:         ACCEPTS: float
2566:         '''
2567:         self._mutation_scale = scale
2568:         self.stale = True
2569: 
2570:     def get_mutation_scale(self):
2571:         '''
2572:         Return the mutation scale.
2573:         '''
2574:         return self._mutation_scale
2575: 
2576:     def set_mutation_aspect(self, aspect):
2577:         '''
2578:         Set the aspect ratio of the bbox mutation.
2579: 
2580:         ACCEPTS: float
2581:         '''
2582:         self._mutation_aspect = aspect
2583:         self.stale = True
2584: 
2585:     def get_mutation_aspect(self):
2586:         '''
2587:         Return the aspect ratio of the bbox mutation.
2588:         '''
2589:         return self._mutation_aspect
2590: 
2591:     def get_boxstyle(self):
2592:         "Return the boxstyle object"
2593:         return self._bbox_transmuter
2594: 
2595:     def get_path(self):
2596:         '''
2597:         Return the mutated path of the rectangle
2598:         '''
2599: 
2600:         _path = self.get_boxstyle()(self._x, self._y,
2601:                                     self._width, self._height,
2602:                                     self.get_mutation_scale(),
2603:                                     self.get_mutation_aspect())
2604:         return _path
2605: 
2606:     # Following methods are borrowed from the Rectangle class.
2607: 
2608:     def get_x(self):
2609:         "Return the left coord of the rectangle"
2610:         return self._x
2611: 
2612:     def get_y(self):
2613:         "Return the bottom coord of the rectangle"
2614:         return self._y
2615: 
2616:     def get_width(self):
2617:         "Return the width of the  rectangle"
2618:         return self._width
2619: 
2620:     def get_height(self):
2621:         "Return the height of the rectangle"
2622:         return self._height
2623: 
2624:     def set_x(self, x):
2625:         '''
2626:         Set the left coord of the rectangle
2627: 
2628:         ACCEPTS: float
2629:         '''
2630:         self._x = x
2631:         self.stale = True
2632: 
2633:     def set_y(self, y):
2634:         '''
2635:         Set the bottom coord of the rectangle
2636: 
2637:         ACCEPTS: float
2638:         '''
2639:         self._y = y
2640:         self.stale = True
2641: 
2642:     def set_width(self, w):
2643:         '''
2644:         Set the width rectangle
2645: 
2646:         ACCEPTS: float
2647:         '''
2648:         self._width = w
2649:         self.stale = True
2650: 
2651:     def set_height(self, h):
2652:         '''
2653:         Set the width rectangle
2654: 
2655:         ACCEPTS: float
2656:         '''
2657:         self._height = h
2658:         self.stale = True
2659: 
2660:     def set_bounds(self, *args):
2661:         '''
2662:         Set the bounds of the rectangle: l,b,w,h
2663: 
2664:         ACCEPTS: (left, bottom, width, height)
2665:         '''
2666:         if len(args) == 0:
2667:             l, b, w, h = args[0]
2668:         else:
2669:             l, b, w, h = args
2670:         self._x = l
2671:         self._y = b
2672:         self._width = w
2673:         self._height = h
2674:         self.stale = True
2675: 
2676:     def get_bbox(self):
2677:         return transforms.Bbox.from_bounds(self._x, self._y,
2678:                                            self._width, self._height)
2679: 
2680: 
2681: class ConnectionStyle(_Style):
2682:     '''
2683:     :class:`ConnectionStyle` is a container class which defines
2684:     several connectionstyle classes, which is used to create a path
2685:     between two points. These are mainly used with
2686:     :class:`FancyArrowPatch`.
2687: 
2688:     A connectionstyle object can be either created as::
2689: 
2690:            ConnectionStyle.Arc3(rad=0.2)
2691: 
2692:     or::
2693: 
2694:            ConnectionStyle("Arc3", rad=0.2)
2695: 
2696:     or::
2697: 
2698:            ConnectionStyle("Arc3, rad=0.2")
2699: 
2700:     The following classes are defined
2701: 
2702:     %(AvailableConnectorstyles)s
2703: 
2704: 
2705:     An instance of any connection style class is an callable object,
2706:     whose call signature is::
2707: 
2708:         __call__(self, posA, posB,
2709:                  patchA=None, patchB=None,
2710:                  shrinkA=2., shrinkB=2.)
2711: 
2712:     and it returns a :class:`Path` instance. *posA* and *posB* are
2713:     tuples of x,y coordinates of the two points to be
2714:     connected. *patchA* (or *patchB*) is given, the returned path is
2715:     clipped so that it start (or end) from the boundary of the
2716:     patch. The path is further shrunk by *shrinkA* (or *shrinkB*)
2717:     which is given in points.
2718: 
2719:     '''
2720: 
2721:     _style_list = {}
2722: 
2723:     class _Base(object):
2724:         '''
2725:         A base class for connectionstyle classes. The subclass needs
2726:         to implement a *connect* method whose call signature is::
2727: 
2728:           connect(posA, posB)
2729: 
2730:         where posA and posB are tuples of x, y coordinates to be
2731:         connected.  The method needs to return a path connecting two
2732:         points. This base class defines a __call__ method, and a few
2733:         helper methods.
2734:         '''
2735: 
2736:         class SimpleEvent:
2737:             def __init__(self, xy):
2738:                 self.x, self.y = xy
2739: 
2740:         def _clip(self, path, patchA, patchB):
2741:             '''
2742:             Clip the path to the boundary of the patchA and patchB.
2743:             The starting point of the path needed to be inside of the
2744:             patchA and the end point inside the patch B. The *contains*
2745:             methods of each patch object is utilized to test if the point
2746:             is inside the path.
2747:             '''
2748: 
2749:             if patchA:
2750:                 def insideA(xy_display):
2751:                     xy_event = ConnectionStyle._Base.SimpleEvent(xy_display)
2752:                     return patchA.contains(xy_event)[0]
2753: 
2754:                 try:
2755:                     left, right = split_path_inout(path, insideA)
2756:                 except ValueError:
2757:                     right = path
2758: 
2759:                 path = right
2760: 
2761:             if patchB:
2762:                 def insideB(xy_display):
2763:                     xy_event = ConnectionStyle._Base.SimpleEvent(xy_display)
2764:                     return patchB.contains(xy_event)[0]
2765: 
2766:                 try:
2767:                     left, right = split_path_inout(path, insideB)
2768:                 except ValueError:
2769:                     left = path
2770: 
2771:                 path = left
2772: 
2773:             return path
2774: 
2775:         def _shrink(self, path, shrinkA, shrinkB):
2776:             '''
2777:             Shrink the path by fixed size (in points) with shrinkA and shrinkB
2778:             '''
2779:             if shrinkA:
2780:                 x, y = path.vertices[0]
2781:                 insideA = inside_circle(x, y, shrinkA)
2782: 
2783:                 try:
2784:                     left, right = split_path_inout(path, insideA)
2785:                     path = right
2786:                 except ValueError:
2787:                     pass
2788: 
2789:             if shrinkB:
2790:                 x, y = path.vertices[-1]
2791:                 insideB = inside_circle(x, y, shrinkB)
2792: 
2793:                 try:
2794:                     left, right = split_path_inout(path, insideB)
2795:                     path = left
2796:                 except ValueError:
2797:                     pass
2798: 
2799:             return path
2800: 
2801:         def __call__(self, posA, posB,
2802:                      shrinkA=2., shrinkB=2., patchA=None, patchB=None):
2803:             '''
2804:             Calls the *connect* method to create a path between *posA*
2805:              and *posB*. The path is clipped and shrunken.
2806:             '''
2807: 
2808:             path = self.connect(posA, posB)
2809: 
2810:             clipped_path = self._clip(path, patchA, patchB)
2811:             shrunk_path = self._shrink(clipped_path, shrinkA, shrinkB)
2812: 
2813:             return shrunk_path
2814: 
2815:         def __reduce__(self):
2816:             # because we have decided to nest these classes, we need to
2817:             # add some more information to allow instance pickling.
2818:             import matplotlib.cbook as cbook
2819:             return (cbook._NestedClassGetter(),
2820:                     (ConnectionStyle, self.__class__.__name__),
2821:                     self.__dict__
2822:                     )
2823: 
2824:     class Arc3(_Base):
2825:         '''
2826:         Creates a simple quadratic bezier curve between two
2827:         points. The curve is created so that the middle contol points
2828:         (C1) is located at the same distance from the start (C0) and
2829:         end points(C2) and the distance of the C1 to the line
2830:         connecting C0-C2 is *rad* times the distance of C0-C2.
2831:         '''
2832: 
2833:         def __init__(self, rad=0.):
2834:             '''
2835:             *rad*
2836:               curvature of the curve.
2837:             '''
2838:             self.rad = rad
2839: 
2840:         def connect(self, posA, posB):
2841:             x1, y1 = posA
2842:             x2, y2 = posB
2843:             x12, y12 = (x1 + x2) / 2., (y1 + y2) / 2.
2844:             dx, dy = x2 - x1, y2 - y1
2845: 
2846:             f = self.rad
2847: 
2848:             cx, cy = x12 + f * dy, y12 - f * dx
2849: 
2850:             vertices = [(x1, y1),
2851:                         (cx, cy),
2852:                         (x2, y2)]
2853:             codes = [Path.MOVETO,
2854:                      Path.CURVE3,
2855:                      Path.CURVE3]
2856: 
2857:             return Path(vertices, codes)
2858: 
2859:     _style_list["arc3"] = Arc3
2860: 
2861:     class Angle3(_Base):
2862:         '''
2863:         Creates a simple quadratic bezier curve between two
2864:         points. The middle control points is placed at the
2865:         intersecting point of two lines which crosses the start (or
2866:         end) point and has a angle of angleA (or angleB).
2867:         '''
2868: 
2869:         def __init__(self, angleA=90, angleB=0):
2870:             '''
2871:             *angleA*
2872:               starting angle of the path
2873: 
2874:             *angleB*
2875:               ending angle of the path
2876:             '''
2877: 
2878:             self.angleA = angleA
2879:             self.angleB = angleB
2880: 
2881:         def connect(self, posA, posB):
2882:             x1, y1 = posA
2883:             x2, y2 = posB
2884: 
2885:             cosA = math.cos(math.radians(self.angleA))
2886:             sinA = math.sin(math.radians(self.angleA))
2887:             cosB = math.cos(math.radians(self.angleB))
2888:             sinB = math.sin(math.radians(self.angleB))
2889: 
2890:             cx, cy = get_intersection(x1, y1, cosA, sinA,
2891:                                       x2, y2, cosB, sinB)
2892: 
2893:             vertices = [(x1, y1), (cx, cy), (x2, y2)]
2894:             codes = [Path.MOVETO, Path.CURVE3, Path.CURVE3]
2895: 
2896:             return Path(vertices, codes)
2897: 
2898:     _style_list["angle3"] = Angle3
2899: 
2900:     class Angle(_Base):
2901:         '''
2902:         Creates a picewise continuous quadratic bezier path between
2903:         two points. The path has a one passing-through point placed at
2904:         the intersecting point of two lines which crosses the start
2905:         (or end) point and has a angle of angleA (or angleB).  The
2906:         connecting edges are rounded with *rad*.
2907:         '''
2908: 
2909:         def __init__(self, angleA=90, angleB=0, rad=0.):
2910:             '''
2911:             *angleA*
2912:               starting angle of the path
2913: 
2914:             *angleB*
2915:               ending angle of the path
2916: 
2917:             *rad*
2918:               rounding radius of the edge
2919:             '''
2920: 
2921:             self.angleA = angleA
2922:             self.angleB = angleB
2923: 
2924:             self.rad = rad
2925: 
2926:         def connect(self, posA, posB):
2927:             x1, y1 = posA
2928:             x2, y2 = posB
2929: 
2930:             cosA = math.cos(math.radians(self.angleA))
2931:             sinA = math.sin(math.radians(self.angleA))
2932:             cosB = math.cos(math.radians(self.angleB))
2933:             sinB = math.sin(math.radians(self.angleB))
2934: 
2935:             cx, cy = get_intersection(x1, y1, cosA, sinA,
2936:                                       x2, y2, cosB, sinB)
2937: 
2938:             vertices = [(x1, y1)]
2939:             codes = [Path.MOVETO]
2940: 
2941:             if self.rad == 0.:
2942:                 vertices.append((cx, cy))
2943:                 codes.append(Path.LINETO)
2944:             else:
2945:                 dx1, dy1 = x1 - cx, y1 - cy
2946:                 d1 = (dx1 ** 2 + dy1 ** 2) ** .5
2947:                 f1 = self.rad / d1
2948:                 dx2, dy2 = x2 - cx, y2 - cy
2949:                 d2 = (dx2 ** 2 + dy2 ** 2) ** .5
2950:                 f2 = self.rad / d2
2951:                 vertices.extend([(cx + dx1 * f1, cy + dy1 * f1),
2952:                                  (cx, cy),
2953:                                  (cx + dx2 * f2, cy + dy2 * f2)])
2954:                 codes.extend([Path.LINETO, Path.CURVE3, Path.CURVE3])
2955: 
2956:             vertices.append((x2, y2))
2957:             codes.append(Path.LINETO)
2958: 
2959:             return Path(vertices, codes)
2960: 
2961:     _style_list["angle"] = Angle
2962: 
2963:     class Arc(_Base):
2964:         '''
2965:         Creates a picewise continuous quadratic bezier path between
2966:         two points. The path can have two passing-through points, a
2967:         point placed at the distance of armA and angle of angleA from
2968:         point A, another point with respect to point B. The edges are
2969:         rounded with *rad*.
2970:         '''
2971: 
2972:         def __init__(self, angleA=0, angleB=0, armA=None, armB=None, rad=0.):
2973:             '''
2974:             *angleA* :
2975:               starting angle of the path
2976: 
2977:             *angleB* :
2978:               ending angle of the path
2979: 
2980:             *armA* :
2981:               length of the starting arm
2982: 
2983:             *armB* :
2984:               length of the ending arm
2985: 
2986:             *rad* :
2987:               rounding radius of the edges
2988:             '''
2989: 
2990:             self.angleA = angleA
2991:             self.angleB = angleB
2992:             self.armA = armA
2993:             self.armB = armB
2994: 
2995:             self.rad = rad
2996: 
2997:         def connect(self, posA, posB):
2998:             x1, y1 = posA
2999:             x2, y2 = posB
3000: 
3001:             vertices = [(x1, y1)]
3002:             rounded = []
3003:             codes = [Path.MOVETO]
3004: 
3005:             if self.armA:
3006:                 cosA = math.cos(math.radians(self.angleA))
3007:                 sinA = math.sin(math.radians(self.angleA))
3008:                 # x_armA, y_armB
3009:                 d = self.armA - self.rad
3010:                 rounded.append((x1 + d * cosA, y1 + d * sinA))
3011:                 d = self.armA
3012:                 rounded.append((x1 + d * cosA, y1 + d * sinA))
3013: 
3014:             if self.armB:
3015:                 cosB = math.cos(math.radians(self.angleB))
3016:                 sinB = math.sin(math.radians(self.angleB))
3017:                 x_armB, y_armB = x2 + self.armB * cosB, y2 + self.armB * sinB
3018: 
3019:                 if rounded:
3020:                     xp, yp = rounded[-1]
3021:                     dx, dy = x_armB - xp, y_armB - yp
3022:                     dd = (dx * dx + dy * dy) ** .5
3023: 
3024:                     rounded.append((xp + self.rad * dx / dd,
3025:                                     yp + self.rad * dy / dd))
3026:                     vertices.extend(rounded)
3027:                     codes.extend([Path.LINETO,
3028:                                   Path.CURVE3,
3029:                                   Path.CURVE3])
3030:                 else:
3031:                     xp, yp = vertices[-1]
3032:                     dx, dy = x_armB - xp, y_armB - yp
3033:                     dd = (dx * dx + dy * dy) ** .5
3034: 
3035:                 d = dd - self.rad
3036:                 rounded = [(xp + d * dx / dd, yp + d * dy / dd),
3037:                            (x_armB, y_armB)]
3038: 
3039:             if rounded:
3040:                 xp, yp = rounded[-1]
3041:                 dx, dy = x2 - xp, y2 - yp
3042:                 dd = (dx * dx + dy * dy) ** .5
3043: 
3044:                 rounded.append((xp + self.rad * dx / dd,
3045:                                 yp + self.rad * dy / dd))
3046:                 vertices.extend(rounded)
3047:                 codes.extend([Path.LINETO,
3048:                               Path.CURVE3,
3049:                               Path.CURVE3])
3050: 
3051:             vertices.append((x2, y2))
3052:             codes.append(Path.LINETO)
3053: 
3054:             return Path(vertices, codes)
3055: 
3056:     _style_list["arc"] = Arc
3057: 
3058:     class Bar(_Base):
3059:         '''
3060:         A line with *angle* between A and B with *armA* and
3061:         *armB*. One of the arms is extended so that they are connected in
3062:         a right angle. The length of armA is determined by (*armA*
3063:         + *fraction* x AB distance). Same for armB.
3064:         '''
3065: 
3066:         def __init__(self, armA=0., armB=0., fraction=0.3, angle=None):
3067:             '''
3068:             Parameters
3069:             ----------
3070:             armA : float
3071:                 minimum length of armA
3072: 
3073:             armB : float
3074:                 minimum length of armB
3075: 
3076:             fraction : float
3077:                 a fraction of the distance between two points that
3078:                 will be added to armA and armB.
3079: 
3080:             angle : float or None
3081:                 angle of the connecting line (if None, parallel
3082:                 to A and B)
3083:             '''
3084:             self.armA = armA
3085:             self.armB = armB
3086:             self.fraction = fraction
3087:             self.angle = angle
3088: 
3089:         def connect(self, posA, posB):
3090:             x1, y1 = posA
3091:             x20, y20 = x2, y2 = posB
3092: 
3093:             theta1 = math.atan2(y2 - y1, x2 - x1)
3094:             dx, dy = x2 - x1, y2 - y1
3095:             dd = (dx * dx + dy * dy) ** .5
3096:             ddx, ddy = dx / dd, dy / dd
3097: 
3098:             armA, armB = self.armA, self.armB
3099: 
3100:             if self.angle is not None:
3101:                 theta0 = np.deg2rad(self.angle)
3102:                 dtheta = theta1 - theta0
3103:                 dl = dd * math.sin(dtheta)
3104:                 dL = dd * math.cos(dtheta)
3105:                 x2, y2 = x1 + dL * math.cos(theta0), y1 + dL * math.sin(theta0)
3106:                 armB = armB - dl
3107: 
3108:                 # update
3109:                 dx, dy = x2 - x1, y2 - y1
3110:                 dd2 = (dx * dx + dy * dy) ** .5
3111:                 ddx, ddy = dx / dd2, dy / dd2
3112: 
3113:             else:
3114:                 dl = 0.
3115: 
3116:             arm = max(armA, armB)
3117:             f = self.fraction * dd + arm
3118: 
3119:             cx1, cy1 = x1 + f * ddy, y1 - f * ddx
3120:             cx2, cy2 = x2 + f * ddy, y2 - f * ddx
3121: 
3122:             vertices = [(x1, y1),
3123:                         (cx1, cy1),
3124:                         (cx2, cy2),
3125:                         (x20, y20)]
3126:             codes = [Path.MOVETO,
3127:                      Path.LINETO,
3128:                      Path.LINETO,
3129:                      Path.LINETO]
3130: 
3131:             return Path(vertices, codes)
3132: 
3133:     _style_list["bar"] = Bar
3134: 
3135:     if __doc__:
3136:         __doc__ = cbook.dedent(__doc__) % \
3137:                {"AvailableConnectorstyles": _pprint_styles(_style_list)}
3138: 
3139: 
3140: def _point_along_a_line(x0, y0, x1, y1, d):
3141:     '''
3142:     find a point along a line connecting (x0, y0) -- (x1, y1) whose
3143:     distance from (x0, y0) is d.
3144:     '''
3145:     dx, dy = x0 - x1, y0 - y1
3146:     ff = d / (dx * dx + dy * dy) ** .5
3147:     x2, y2 = x0 - ff * dx, y0 - ff * dy
3148: 
3149:     return x2, y2
3150: 
3151: 
3152: class ArrowStyle(_Style):
3153:     '''
3154:     :class:`ArrowStyle` is a container class which defines several
3155:     arrowstyle classes, which is used to create an arrow path along a
3156:     given path. These are mainly used with :class:`FancyArrowPatch`.
3157: 
3158:     A arrowstyle object can be either created as::
3159: 
3160:            ArrowStyle.Fancy(head_length=.4, head_width=.4, tail_width=.4)
3161: 
3162:     or::
3163: 
3164:            ArrowStyle("Fancy", head_length=.4, head_width=.4, tail_width=.4)
3165: 
3166:     or::
3167: 
3168:            ArrowStyle("Fancy, head_length=.4, head_width=.4, tail_width=.4")
3169: 
3170:     The following classes are defined
3171: 
3172:     %(AvailableArrowstyles)s
3173: 
3174: 
3175:     An instance of any arrow style class is a callable object,
3176:     whose call signature is::
3177: 
3178:         __call__(self, path, mutation_size, linewidth, aspect_ratio=1.)
3179: 
3180:     and it returns a tuple of a :class:`Path` instance and a boolean
3181:     value. *path* is a :class:`Path` instance along which the arrow
3182:     will be drawn. *mutation_size* and *aspect_ratio* have the same
3183:     meaning as in :class:`BoxStyle`. *linewidth* is a line width to be
3184:     stroked. This is meant to be used to correct the location of the
3185:     head so that it does not overshoot the destination point, but not all
3186:     classes support it.
3187:     '''
3188: 
3189:     _style_list = {}
3190: 
3191:     class _Base(object):
3192:         '''
3193:         Arrow Transmuter Base class
3194: 
3195:         ArrowTransmuterBase and its derivatives are used to make a fancy
3196:         arrow around a given path. The __call__ method returns a path
3197:         (which will be used to create a PathPatch instance) and a boolean
3198:         value indicating the path is open therefore is not fillable.  This
3199:         class is not an artist and actual drawing of the fancy arrow is
3200:         done by the FancyArrowPatch class.
3201: 
3202:         '''
3203: 
3204:         # The derived classes are required to be able to be initialized
3205:         # w/o arguments, i.e., all its argument (except self) must have
3206:         # the default values.
3207: 
3208:         def __init__(self):
3209:             super(ArrowStyle._Base, self).__init__()
3210: 
3211:         @staticmethod
3212:         def ensure_quadratic_bezier(path):
3213:             ''' Some ArrowStyle class only wokrs with a simple
3214:             quaratic bezier curve (created with Arc3Connetion or
3215:             Angle3Connector). This static method is to check if the
3216:             provided path is a simple quadratic bezier curve and returns
3217:             its control points if true.
3218:             '''
3219:             segments = list(path.iter_segments())
3220:             if ((len(segments) != 2) or (segments[0][1] != Path.MOVETO) or
3221:                     (segments[1][1] != Path.CURVE3)):
3222:                 msg = "'path' it's not a valid quadratic bezier curve"
3223:                 raise ValueError(msg)
3224: 
3225:             return list(segments[0][0]) + list(segments[1][0])
3226: 
3227:         def transmute(self, path, mutation_size, linewidth):
3228:             '''
3229:             The transmute method is the very core of the ArrowStyle
3230:             class and must be overridden in the subclasses. It receives
3231:             the path object along which the arrow will be drawn, and
3232:             the mutation_size, with which the arrow head etc.
3233:             will be scaled. The linewidth may be used to adjust
3234:             the path so that it does not pass beyond the given
3235:             points. It returns a tuple of a Path instance and a
3236:             boolean. The boolean value indicate whether the path can
3237:             be filled or not. The return value can also be a list of paths
3238:             and list of booleans of a same length.
3239:             '''
3240: 
3241:             raise NotImplementedError('Derived must override')
3242: 
3243:         def __call__(self, path, mutation_size, linewidth,
3244:                      aspect_ratio=1.):
3245:             '''
3246:             The __call__ method is a thin wrapper around the transmute method
3247:             and take care of the aspect ratio.
3248:             '''
3249: 
3250:             path = make_path_regular(path)
3251: 
3252:             if aspect_ratio is not None:
3253:                 # Squeeze the given height by the aspect_ratio
3254: 
3255:                 vertices, codes = path.vertices[:], path.codes[:]
3256:                 # Squeeze the height
3257:                 vertices[:, 1] = vertices[:, 1] / aspect_ratio
3258:                 path_shrunk = Path(vertices, codes)
3259:                 # call transmute method with squeezed height.
3260:                 path_mutated, fillable = self.transmute(path_shrunk,
3261:                                                         linewidth,
3262:                                                         mutation_size)
3263:                 if cbook.iterable(fillable):
3264:                     path_list = []
3265:                     for p in zip(path_mutated):
3266:                         v, c = p.vertices, p.codes
3267:                         # Restore the height
3268:                         v[:, 1] = v[:, 1] * aspect_ratio
3269:                         path_list.append(Path(v, c))
3270:                     return path_list, fillable
3271:                 else:
3272:                     return path_mutated, fillable
3273:             else:
3274:                 return self.transmute(path, mutation_size, linewidth)
3275: 
3276:         def __reduce__(self):
3277:             # because we have decided to nest thes classes, we need to
3278:             # add some more information to allow instance pickling.
3279:             import matplotlib.cbook as cbook
3280:             return (cbook._NestedClassGetter(),
3281:                     (ArrowStyle, self.__class__.__name__),
3282:                     self.__dict__
3283:                     )
3284: 
3285:     class _Curve(_Base):
3286:         '''
3287:         A simple arrow which will work with any path instance. The
3288:         returned path is simply concatenation of the original path + at
3289:         most two paths representing the arrow head at the begin point and the
3290:         at the end point. The arrow heads can be either open or closed.
3291:         '''
3292: 
3293:         def __init__(self, beginarrow=None, endarrow=None,
3294:                      fillbegin=False, fillend=False,
3295:                      head_length=.2, head_width=.1):
3296:             '''
3297:             The arrows are drawn if *beginarrow* and/or *endarrow* are
3298:             true. *head_length* and *head_width* determines the size
3299:             of the arrow relative to the *mutation scale*.  The
3300:             arrowhead at the begin (or end) is closed if fillbegin (or
3301:             fillend) is True.
3302:             '''
3303:             self.beginarrow, self.endarrow = beginarrow, endarrow
3304:             self.head_length, self.head_width = head_length, head_width
3305:             self.fillbegin, self.fillend = fillbegin, fillend
3306:             super(ArrowStyle._Curve, self).__init__()
3307: 
3308:         def _get_arrow_wedge(self, x0, y0, x1, y1,
3309:                              head_dist, cos_t, sin_t, linewidth
3310:                             ):
3311:             '''
3312:             Return the paths for arrow heads. Since arrow lines are
3313:             drawn with capstyle=projected, The arrow goes beyond the
3314:             desired point. This method also returns the amount of the path
3315:             to be shrunken so that it does not overshoot.
3316:             '''
3317: 
3318:             # arrow from x0, y0 to x1, y1
3319:             dx, dy = x0 - x1, y0 - y1
3320: 
3321:             cp_distance = np.hypot(dx, dy)
3322: 
3323:             # pad_projected : amount of pad to account the
3324:             # overshooting of the projection of the wedge
3325:             pad_projected = (.5 * linewidth / sin_t)
3326: 
3327:             # Account for division by zero
3328:             if cp_distance == 0:
3329:                 cp_distance = 1
3330: 
3331:             # apply pad for projected edge
3332:             ddx = pad_projected * dx / cp_distance
3333:             ddy = pad_projected * dy / cp_distance
3334: 
3335:             # offset for arrow wedge
3336:             dx = dx / cp_distance * head_dist
3337:             dy = dy / cp_distance * head_dist
3338: 
3339:             dx1, dy1 = cos_t * dx + sin_t * dy, -sin_t * dx + cos_t * dy
3340:             dx2, dy2 = cos_t * dx - sin_t * dy, sin_t * dx + cos_t * dy
3341: 
3342:             vertices_arrow = [(x1 + ddx + dx1, y1 + ddy + dy1),
3343:                               (x1 + ddx, y1 + ddy),
3344:                               (x1 + ddx + dx2, y1 + ddy + dy2)]
3345:             codes_arrow = [Path.MOVETO,
3346:                            Path.LINETO,
3347:                            Path.LINETO]
3348: 
3349:             return vertices_arrow, codes_arrow, ddx, ddy
3350: 
3351:         def transmute(self, path, mutation_size, linewidth):
3352: 
3353:             head_length = self.head_length * mutation_size
3354:             head_width = self.head_width * mutation_size
3355:             head_dist = math.sqrt(head_length ** 2 + head_width ** 2)
3356:             cos_t, sin_t = head_length / head_dist, head_width / head_dist
3357: 
3358:             # begin arrow
3359:             x0, y0 = path.vertices[0]
3360:             x1, y1 = path.vertices[1]
3361: 
3362:             # If there is no room for an arrow and a line, then skip the arrow
3363:             has_begin_arrow = self.beginarrow and not (x0 == x1 and y0 == y1)
3364:             if has_begin_arrow:
3365:                 verticesA, codesA, ddxA, ddyA = \
3366:                            self._get_arrow_wedge(x1, y1, x0, y0,
3367:                                                  head_dist, cos_t, sin_t,
3368:                                                  linewidth)
3369:             else:
3370:                 verticesA, codesA = [], []
3371:                 ddxA, ddyA = 0., 0.
3372: 
3373:             # end arrow
3374:             x2, y2 = path.vertices[-2]
3375:             x3, y3 = path.vertices[-1]
3376: 
3377:             # If there is no room for an arrow and a line, then skip the arrow
3378:             has_end_arrow = (self.endarrow and not ((x2 == x3) and (y2 == y3)))
3379:             if has_end_arrow:
3380:                 verticesB, codesB, ddxB, ddyB = \
3381:                            self._get_arrow_wedge(x2, y2, x3, y3,
3382:                                                  head_dist, cos_t, sin_t,
3383:                                                  linewidth)
3384:             else:
3385:                 verticesB, codesB = [], []
3386:                 ddxB, ddyB = 0., 0.
3387: 
3388:             # this simple code will not work if ddx, ddy is greater than
3389:             # separation bettern vertices.
3390:             _path = [Path(np.concatenate([[(x0 + ddxA, y0 + ddyA)],
3391:                                           path.vertices[1:-1],
3392:                                           [(x3 + ddxB, y3 + ddyB)]]),
3393:                           path.codes)]
3394:             _fillable = [False]
3395: 
3396:             if has_begin_arrow:
3397:                 if self.fillbegin:
3398:                     p = np.concatenate([verticesA, [verticesA[0],
3399:                                                     verticesA[0]], ])
3400:                     c = np.concatenate([codesA, [Path.LINETO, Path.CLOSEPOLY]])
3401:                     _path.append(Path(p, c))
3402:                     _fillable.append(True)
3403:                 else:
3404:                     _path.append(Path(verticesA, codesA))
3405:                     _fillable.append(False)
3406: 
3407:             if has_end_arrow:
3408:                 if self.fillend:
3409:                     _fillable.append(True)
3410:                     p = np.concatenate([verticesB, [verticesB[0],
3411:                                                     verticesB[0]], ])
3412:                     c = np.concatenate([codesB, [Path.LINETO, Path.CLOSEPOLY]])
3413:                     _path.append(Path(p, c))
3414:                 else:
3415:                     _fillable.append(False)
3416:                     _path.append(Path(verticesB, codesB))
3417: 
3418:             return _path, _fillable
3419: 
3420:     class Curve(_Curve):
3421:         '''
3422:         A simple curve without any arrow head.
3423:         '''
3424: 
3425:         def __init__(self):
3426:             super(ArrowStyle.Curve, self).__init__(
3427:                 beginarrow=False, endarrow=False)
3428: 
3429:     _style_list["-"] = Curve
3430: 
3431:     class CurveA(_Curve):
3432:         '''
3433:         An arrow with a head at its begin point.
3434:         '''
3435: 
3436:         def __init__(self, head_length=.4, head_width=.2):
3437:             '''
3438:             Parameters
3439:             ----------
3440:             head_length : float, optional, default : 0.4
3441:                 Length of the arrow head
3442: 
3443:             head_width : float, optional, default : 0.2
3444:                 Width of the arrow head
3445:             '''
3446: 
3447:             super(ArrowStyle.CurveA, self).__init__(
3448:                   beginarrow=True, endarrow=False,
3449:                   head_length=head_length, head_width=head_width)
3450: 
3451:     _style_list["<-"] = CurveA
3452: 
3453:     class CurveB(_Curve):
3454:         '''
3455:         An arrow with a head at its end point.
3456:         '''
3457: 
3458:         def __init__(self, head_length=.4, head_width=.2):
3459:             '''
3460:             Parameters
3461:             ----------
3462:             head_length : float, optional, default : 0.4
3463:                 Length of the arrow head
3464: 
3465:             head_width : float, optional, default : 0.2
3466:                 Width of the arrow head
3467:             '''
3468: 
3469:             super(ArrowStyle.CurveB, self).__init__(
3470:                 beginarrow=False, endarrow=True,
3471:                 head_length=head_length, head_width=head_width)
3472: 
3473:     _style_list["->"] = CurveB
3474: 
3475:     class CurveAB(_Curve):
3476:         '''
3477:         An arrow with heads both at the begin and the end point.
3478:         '''
3479: 
3480:         def __init__(self, head_length=.4, head_width=.2):
3481:             '''
3482:             Parameters
3483:             ----------
3484:             head_length : float, optional, default : 0.4
3485:                 Length of the arrow head
3486: 
3487:             head_width : float, optional, default : 0.2
3488:                 Width of the arrow head
3489:             '''
3490: 
3491:             super(ArrowStyle.CurveAB, self).__init__(
3492:                 beginarrow=True, endarrow=True,
3493:                 head_length=head_length, head_width=head_width)
3494: 
3495:     _style_list["<->"] = CurveAB
3496: 
3497:     class CurveFilledA(_Curve):
3498:         '''
3499:         An arrow with filled triangle head at the begin.
3500:         '''
3501: 
3502:         def __init__(self, head_length=.4, head_width=.2):
3503:             '''
3504:             Parameters
3505:             ----------
3506:             head_length : float, optional, default : 0.4
3507:                 Length of the arrow head
3508: 
3509:             head_width : float, optional, default : 0.2
3510:                 Width of the arrow head
3511:             '''
3512: 
3513:             super(ArrowStyle.CurveFilledA, self).__init__(
3514:                 beginarrow=True, endarrow=False,
3515:                 fillbegin=True, fillend=False,
3516:                 head_length=head_length, head_width=head_width)
3517: 
3518:     _style_list["<|-"] = CurveFilledA
3519: 
3520:     class CurveFilledB(_Curve):
3521:         '''
3522:         An arrow with filled triangle head at the end.
3523:         '''
3524: 
3525:         def __init__(self, head_length=.4, head_width=.2):
3526:             '''
3527:             Parameters
3528:             ----------
3529:             head_length : float, optional, default : 0.4
3530:                 Length of the arrow head
3531: 
3532:             head_width : float, optional, default : 0.2
3533:                 Width of the arrow head
3534:             '''
3535: 
3536:             super(ArrowStyle.CurveFilledB, self).__init__(
3537:                 beginarrow=False, endarrow=True,
3538:                 fillbegin=False, fillend=True,
3539:                 head_length=head_length, head_width=head_width)
3540: 
3541:     _style_list["-|>"] = CurveFilledB
3542: 
3543:     class CurveFilledAB(_Curve):
3544:         '''
3545:         An arrow with filled triangle heads at both ends.
3546:         '''
3547: 
3548:         def __init__(self, head_length=.4, head_width=.2):
3549:             '''
3550:             Parameters
3551:             ----------
3552:             head_length : float, optional, default : 0.4
3553:                 Length of the arrow head
3554: 
3555:             head_width : float, optional, default : 0.2
3556:                 Width of the arrow head
3557:             '''
3558: 
3559:             super(ArrowStyle.CurveFilledAB, self).__init__(
3560:                 beginarrow=True, endarrow=True,
3561:                 fillbegin=True, fillend=True,
3562:                 head_length=head_length, head_width=head_width)
3563: 
3564:     _style_list["<|-|>"] = CurveFilledAB
3565: 
3566:     class _Bracket(_Base):
3567: 
3568:         def __init__(self, bracketA=None, bracketB=None,
3569:                      widthA=1., widthB=1.,
3570:                      lengthA=0.2, lengthB=0.2,
3571:                      angleA=None, angleB=None,
3572:                      scaleA=None, scaleB=None):
3573:             self.bracketA, self.bracketB = bracketA, bracketB
3574:             self.widthA, self.widthB = widthA, widthB
3575:             self.lengthA, self.lengthB = lengthA, lengthB
3576:             self.angleA, self.angleB = angleA, angleB
3577:             self.scaleA, self.scaleB = scaleA, scaleB
3578: 
3579:         def _get_bracket(self, x0, y0,
3580:                          cos_t, sin_t, width, length):
3581: 
3582:             # arrow from x0, y0 to x1, y1
3583:             from matplotlib.bezier import get_normal_points
3584:             x1, y1, x2, y2 = get_normal_points(x0, y0, cos_t, sin_t, width)
3585: 
3586:             dx, dy = length * cos_t, length * sin_t
3587: 
3588:             vertices_arrow = [(x1 + dx, y1 + dy),
3589:                               (x1, y1),
3590:                               (x2, y2),
3591:                               (x2 + dx, y2 + dy)]
3592:             codes_arrow = [Path.MOVETO,
3593:                            Path.LINETO,
3594:                            Path.LINETO,
3595:                            Path.LINETO]
3596: 
3597:             return vertices_arrow, codes_arrow
3598: 
3599:         def transmute(self, path, mutation_size, linewidth):
3600: 
3601:             if self.scaleA is None:
3602:                 scaleA = mutation_size
3603:             else:
3604:                 scaleA = self.scaleA
3605: 
3606:             if self.scaleB is None:
3607:                 scaleB = mutation_size
3608:             else:
3609:                 scaleB = self.scaleB
3610: 
3611:             vertices_list, codes_list = [], []
3612: 
3613:             if self.bracketA:
3614:                 x0, y0 = path.vertices[0]
3615:                 x1, y1 = path.vertices[1]
3616:                 cos_t, sin_t = get_cos_sin(x1, y1, x0, y0)
3617:                 verticesA, codesA = self._get_bracket(x0, y0, cos_t, sin_t,
3618:                                                       self.widthA * scaleA,
3619:                                                       self.lengthA * scaleA)
3620:                 vertices_list.append(verticesA)
3621:                 codes_list.append(codesA)
3622: 
3623:             vertices_list.append(path.vertices)
3624:             codes_list.append(path.codes)
3625: 
3626:             if self.bracketB:
3627:                 x0, y0 = path.vertices[-1]
3628:                 x1, y1 = path.vertices[-2]
3629:                 cos_t, sin_t = get_cos_sin(x1, y1, x0, y0)
3630:                 verticesB, codesB = self._get_bracket(x0, y0, cos_t, sin_t,
3631:                                                       self.widthB * scaleB,
3632:                                                       self.lengthB * scaleB)
3633:                 vertices_list.append(verticesB)
3634:                 codes_list.append(codesB)
3635: 
3636:             vertices = np.concatenate(vertices_list)
3637:             codes = np.concatenate(codes_list)
3638: 
3639:             p = Path(vertices, codes)
3640: 
3641:             return p, False
3642: 
3643:     class BracketAB(_Bracket):
3644:         '''
3645:         An arrow with a bracket(]) at both ends.
3646:         '''
3647: 
3648:         def __init__(self,
3649:                      widthA=1., lengthA=0.2, angleA=None,
3650:                      widthB=1., lengthB=0.2, angleB=None):
3651:             '''
3652:             Parameters
3653:             ----------
3654:             widthA : float, optional, default : 1.0
3655:                 Width of the bracket
3656: 
3657:             lengthA : float, optional, default : 0.2
3658:                 Length of the bracket
3659: 
3660:             angleA : float, optional, default : None
3661:                 Angle between the bracket and the line
3662: 
3663:             widthB : float, optional, default : 1.0
3664:                 Width of the bracket
3665: 
3666:             lengthB : float, optional, default : 0.2
3667:                 Length of the bracket
3668: 
3669:             angleB : float, optional, default : None
3670:                 Angle between the bracket and the line
3671:             '''
3672: 
3673:             super(ArrowStyle.BracketAB, self).__init__(
3674:                         True, True, widthA=widthA, lengthA=lengthA,
3675:                         angleA=angleA, widthB=widthB, lengthB=lengthB,
3676:                         angleB=angleB)
3677: 
3678:     _style_list["]-["] = BracketAB
3679: 
3680:     class BracketA(_Bracket):
3681:         '''
3682:         An arrow with a bracket(])  at its end.
3683:         '''
3684: 
3685:         def __init__(self, widthA=1., lengthA=0.2, angleA=None):
3686:             '''
3687:             Parameters
3688:             ----------
3689:             widthA : float, optional, default : 1.0
3690:                 Width of the bracket
3691: 
3692:             lengthA : float, optional, default : 0.2
3693:                 Length of the bracket
3694: 
3695:             angleA : float, optional, default : None
3696:                 Angle between the bracket and the line
3697:             '''
3698: 
3699:             super(ArrowStyle.BracketA, self).__init__(True, None,
3700:                                                       widthA=widthA,
3701:                                                       lengthA=lengthA,
3702:                                                       angleA=angleA)
3703: 
3704:     _style_list["]-"] = BracketA
3705: 
3706:     class BracketB(_Bracket):
3707:         '''
3708:         An arrow with a bracket([)  at its end.
3709:         '''
3710: 
3711:         def __init__(self, widthB=1., lengthB=0.2, angleB=None):
3712:             '''
3713:             Parameters
3714:             ----------
3715:             widthB : float, optional, default : 1.0
3716:                 Width of the bracket
3717: 
3718:             lengthB : float, optional, default : 0.2
3719:                 Length of the bracket
3720: 
3721:             angleB : float, optional, default : None
3722:                 Angle between the bracket and the line
3723:             '''
3724: 
3725:             super(ArrowStyle.BracketB, self).__init__(None, True,
3726:                                                       widthB=widthB,
3727:                                                       lengthB=lengthB,
3728:                                                       angleB=angleB)
3729: 
3730:     _style_list["-["] = BracketB
3731: 
3732:     class BarAB(_Bracket):
3733:         '''
3734:         An arrow with a bar(|) at both ends.
3735:         '''
3736: 
3737:         def __init__(self,
3738:                      widthA=1., angleA=None,
3739:                      widthB=1., angleB=None):
3740:             '''
3741:             Parameters
3742:             ----------
3743:             widthA : float, optional, default : 1.0
3744:                 Width of the bracket
3745: 
3746:             angleA : float, optional, default : None
3747:                 Angle between the bracket and the line
3748: 
3749:             widthB : float, optional, default : 1.0
3750:                 Width of the bracket
3751: 
3752:             angleB : float, optional, default : None
3753:                 Angle between the bracket and the line
3754:             '''
3755: 
3756:             super(ArrowStyle.BarAB, self).__init__(
3757:                         True, True, widthA=widthA, lengthA=0, angleA=angleA,
3758:                         widthB=widthB, lengthB=0, angleB=angleB)
3759: 
3760:     _style_list["|-|"] = BarAB
3761: 
3762:     class Simple(_Base):
3763:         '''
3764:         A simple arrow. Only works with a quadratic bezier curve.
3765:         '''
3766: 
3767:         def __init__(self, head_length=.5, head_width=.5, tail_width=.2):
3768:             '''
3769:             Parameters
3770:             ----------
3771:             head_length : float, optional, default : 0.5
3772:                 Length of the arrow head
3773: 
3774:             head_width : float, optional, default : 0.5
3775:                 Width of the arrow head
3776: 
3777:             tail_width : float, optional, default : 0.2
3778:                 Width of the arrow tail
3779:             '''
3780: 
3781:             self.head_length, self.head_width, self.tail_width = \
3782:                 head_length, head_width, tail_width
3783:             super(ArrowStyle.Simple, self).__init__()
3784: 
3785:         def transmute(self, path, mutation_size, linewidth):
3786: 
3787:             x0, y0, x1, y1, x2, y2 = self.ensure_quadratic_bezier(path)
3788: 
3789:             # divide the path into a head and a tail
3790:             head_length = self.head_length * mutation_size
3791:             in_f = inside_circle(x2, y2, head_length)
3792:             arrow_path = [(x0, y0), (x1, y1), (x2, y2)]
3793: 
3794:             from .bezier import NonIntersectingPathException
3795: 
3796:             try:
3797:                 arrow_out, arrow_in = \
3798:                       split_bezier_intersecting_with_closedpath(arrow_path,
3799:                                                                 in_f,
3800:                                                                 tolerence=0.01)
3801:             except NonIntersectingPathException:
3802:                 # if this happens, make a straight line of the head_length
3803:                 # long.
3804:                 x0, y0 = _point_along_a_line(x2, y2, x1, y1, head_length)
3805:                 x1n, y1n = 0.5 * (x0 + x2), 0.5 * (y0 + y2)
3806:                 arrow_in = [(x0, y0), (x1n, y1n), (x2, y2)]
3807:                 arrow_out = None
3808: 
3809:             # head
3810:             head_width = self.head_width * mutation_size
3811:             head_left, head_right = make_wedged_bezier2(arrow_in,
3812:                                                         head_width / 2., wm=.5)
3813: 
3814:             # tail
3815:             if arrow_out is not None:
3816:                 tail_width = self.tail_width * mutation_size
3817:                 tail_left, tail_right = get_parallels(arrow_out,
3818:                                                       tail_width / 2.)
3819: 
3820:                 patch_path = [(Path.MOVETO, tail_right[0]),
3821:                               (Path.CURVE3, tail_right[1]),
3822:                               (Path.CURVE3, tail_right[2]),
3823:                               (Path.LINETO, head_right[0]),
3824:                               (Path.CURVE3, head_right[1]),
3825:                               (Path.CURVE3, head_right[2]),
3826:                               (Path.CURVE3, head_left[1]),
3827:                               (Path.CURVE3, head_left[0]),
3828:                               (Path.LINETO, tail_left[2]),
3829:                               (Path.CURVE3, tail_left[1]),
3830:                               (Path.CURVE3, tail_left[0]),
3831:                               (Path.LINETO, tail_right[0]),
3832:                               (Path.CLOSEPOLY, tail_right[0]),
3833:                               ]
3834:             else:
3835:                 patch_path = [(Path.MOVETO, head_right[0]),
3836:                               (Path.CURVE3, head_right[1]),
3837:                               (Path.CURVE3, head_right[2]),
3838:                               (Path.CURVE3, head_left[1]),
3839:                               (Path.CURVE3, head_left[0]),
3840:                               (Path.CLOSEPOLY, head_left[0]),
3841:                               ]
3842: 
3843:             path = Path([p for c, p in patch_path], [c for c, p in patch_path])
3844: 
3845:             return path, True
3846: 
3847:     _style_list["simple"] = Simple
3848: 
3849:     class Fancy(_Base):
3850:         '''
3851:         A fancy arrow. Only works with a quadratic bezier curve.
3852:         '''
3853: 
3854:         def __init__(self, head_length=.4, head_width=.4, tail_width=.4):
3855:             '''
3856:             Parameters
3857:             ----------
3858:             head_length : float, optional, default : 0.4
3859:                 Length of the arrow head
3860: 
3861:             head_width : float, optional, default : 0.4
3862:                 Width of the arrow head
3863: 
3864:             tail_width : float, optional, default : 0.4
3865:                 Width of the arrow tail
3866:             '''
3867: 
3868:             self.head_length, self.head_width, self.tail_width = \
3869:                 head_length, head_width, tail_width
3870:             super(ArrowStyle.Fancy, self).__init__()
3871: 
3872:         def transmute(self, path, mutation_size, linewidth):
3873: 
3874:             x0, y0, x1, y1, x2, y2 = self.ensure_quadratic_bezier(path)
3875: 
3876:             # divide the path into a head and a tail
3877:             head_length = self.head_length * mutation_size
3878:             arrow_path = [(x0, y0), (x1, y1), (x2, y2)]
3879: 
3880:             from .bezier import NonIntersectingPathException
3881: 
3882:             # path for head
3883:             in_f = inside_circle(x2, y2, head_length)
3884:             try:
3885:                 path_out, path_in = \
3886:                           split_bezier_intersecting_with_closedpath(
3887:                                 arrow_path,
3888:                                 in_f,
3889:                                 tolerence=0.01)
3890:             except NonIntersectingPathException:
3891:                 # if this happens, make a straight line of the head_length
3892:                 # long.
3893:                 x0, y0 = _point_along_a_line(x2, y2, x1, y1, head_length)
3894:                 x1n, y1n = 0.5 * (x0 + x2), 0.5 * (y0 + y2)
3895:                 arrow_path = [(x0, y0), (x1n, y1n), (x2, y2)]
3896:                 path_head = arrow_path
3897:             else:
3898:                 path_head = path_in
3899: 
3900:             # path for head
3901:             in_f = inside_circle(x2, y2, head_length * .8)
3902:             path_out, path_in = split_bezier_intersecting_with_closedpath(
3903:                                         arrow_path,
3904:                                         in_f,
3905:                                         tolerence=0.01
3906:                                 )
3907:             path_tail = path_out
3908: 
3909:             # head
3910:             head_width = self.head_width * mutation_size
3911:             head_l, head_r = make_wedged_bezier2(path_head,
3912:                                                  head_width / 2.,
3913:                                                  wm=.6)
3914: 
3915:             # tail
3916:             tail_width = self.tail_width * mutation_size
3917:             tail_left, tail_right = make_wedged_bezier2(path_tail,
3918:                                                         tail_width * .5,
3919:                                                         w1=1., wm=0.6, w2=0.3)
3920: 
3921:             # path for head
3922:             in_f = inside_circle(x0, y0, tail_width * .3)
3923:             path_in, path_out = split_bezier_intersecting_with_closedpath(
3924:                                     arrow_path,
3925:                                     in_f,
3926:                                     tolerence=0.01
3927:                                 )
3928:             tail_start = path_in[-1]
3929: 
3930:             head_right, head_left = head_r, head_l
3931:             patch_path = [(Path.MOVETO, tail_start),
3932:                           (Path.LINETO, tail_right[0]),
3933:                           (Path.CURVE3, tail_right[1]),
3934:                           (Path.CURVE3, tail_right[2]),
3935:                           (Path.LINETO, head_right[0]),
3936:                           (Path.CURVE3, head_right[1]),
3937:                           (Path.CURVE3, head_right[2]),
3938:                           (Path.CURVE3, head_left[1]),
3939:                           (Path.CURVE3, head_left[0]),
3940:                           (Path.LINETO, tail_left[2]),
3941:                           (Path.CURVE3, tail_left[1]),
3942:                           (Path.CURVE3, tail_left[0]),
3943:                           (Path.LINETO, tail_start),
3944:                           (Path.CLOSEPOLY, tail_start),
3945:                           ]
3946:             path = Path([p for c, p in patch_path], [c for c, p in patch_path])
3947: 
3948:             return path, True
3949: 
3950:     _style_list["fancy"] = Fancy
3951: 
3952:     class Wedge(_Base):
3953:         '''
3954:         Wedge(?) shape. Only works with a quadratic bezier curve.  The
3955:         begin point has a width of the tail_width and the end point has a
3956:         width of 0. At the middle, the width is shrink_factor*tail_width.
3957:         '''
3958: 
3959:         def __init__(self, tail_width=.3, shrink_factor=0.5):
3960:             '''
3961:             Parameters
3962:             ----------
3963:             tail_width : float, optional, default : 0.3
3964:                 Width of the tail
3965: 
3966:             shrink_factor : float, optional, default : 0.5
3967:                 Fraction of the arrow width at the middle point
3968:             '''
3969: 
3970:             self.tail_width = tail_width
3971:             self.shrink_factor = shrink_factor
3972:             super(ArrowStyle.Wedge, self).__init__()
3973: 
3974:         def transmute(self, path, mutation_size, linewidth):
3975: 
3976:             x0, y0, x1, y1, x2, y2 = self.ensure_quadratic_bezier(path)
3977: 
3978:             arrow_path = [(x0, y0), (x1, y1), (x2, y2)]
3979:             b_plus, b_minus = make_wedged_bezier2(
3980:                                     arrow_path,
3981:                                     self.tail_width * mutation_size / 2.,
3982:                                     wm=self.shrink_factor)
3983: 
3984:             patch_path = [(Path.MOVETO, b_plus[0]),
3985:                           (Path.CURVE3, b_plus[1]),
3986:                           (Path.CURVE3, b_plus[2]),
3987:                           (Path.LINETO, b_minus[2]),
3988:                           (Path.CURVE3, b_minus[1]),
3989:                           (Path.CURVE3, b_minus[0]),
3990:                           (Path.CLOSEPOLY, b_minus[0]),
3991:                           ]
3992:             path = Path([p for c, p in patch_path], [c for c, p in patch_path])
3993: 
3994:             return path, True
3995: 
3996:     _style_list["wedge"] = Wedge
3997: 
3998:     if __doc__:
3999:         __doc__ = cbook.dedent(__doc__) % \
4000:                {"AvailableArrowstyles": _pprint_styles(_style_list)}
4001: 
4002: 
4003: docstring.interpd.update(
4004:     AvailableArrowstyles=_pprint_styles(ArrowStyle._style_list),
4005:     AvailableConnectorstyles=_pprint_styles(ConnectionStyle._style_list),
4006: )
4007: 
4008: 
4009: class FancyArrowPatch(Patch):
4010:     '''
4011:     A fancy arrow patch. It draws an arrow using the :class:`ArrowStyle`.
4012: 
4013:     The head and tail positions are fixed at the specified start and end points
4014:     of the arrow, but the size and shape (in display coordinates) of the arrow
4015:     does not change when the axis is moved or zoomed.
4016:     '''
4017:     _edge_default = True
4018: 
4019:     def __str__(self):
4020: 
4021:         if self._posA_posB is not None:
4022:             (x1, y1), (x2, y2) = self._posA_posB
4023:             return self.__class__.__name__ \
4024:                 + "(%g,%g->%g,%g)" % (x1, y1, x2, y2)
4025:         else:
4026:             return self.__class__.__name__ \
4027:                 + "(%s)" % (str(self._path_original),)
4028: 
4029:     @docstring.dedent_interpd
4030:     def __init__(self, posA=None, posB=None,
4031:                  path=None,
4032:                  arrowstyle="simple",
4033:                  arrow_transmuter=None,
4034:                  connectionstyle="arc3",
4035:                  connector=None,
4036:                  patchA=None,
4037:                  patchB=None,
4038:                  shrinkA=2,
4039:                  shrinkB=2,
4040:                  mutation_scale=1,
4041:                  mutation_aspect=None,
4042:                  dpi_cor=1,
4043:                  **kwargs):
4044:         '''
4045:         If *posA* and *posB* are given, a path connecting two points is
4046:         created according to *connectionstyle*. The path will be
4047:         clipped with *patchA* and *patchB* and further shrunken by
4048:         *shrinkA* and *shrinkB*. An arrow is drawn along this
4049:         resulting path using the *arrowstyle* parameter.
4050: 
4051:         Alternatively if *path* is provided, an arrow is drawn along this path
4052:         and *patchA*, *patchB*, *shrinkA*, and *shrinkB* are ignored.
4053: 
4054:         Parameters
4055:         ----------
4056: 
4057:         posA, posB : None, tuple, optional (default: None)
4058:             (x,y) coordinates of arrow tail and arrow head respectively.
4059: 
4060:         path : None, Path (default: None)
4061:             :class:`matplotlib.path.Path` instance. If provided, an arrow is
4062:             drawn along this path and *patchA*, *patchB*, *shrinkA*, and
4063:             *shrinkB* are ignored.
4064: 
4065:         arrowstyle : str or ArrowStyle, optional (default: 'simple')
4066:             Describes how the fancy arrow will be
4067:             drawn. It can be string of the available arrowstyle names,
4068:             with optional comma-separated attributes, or an
4069:             :class:`ArrowStyle` instance. The optional attributes are meant to
4070:             be scaled with the *mutation_scale*. The following arrow styles are
4071:             available:
4072: 
4073:             %(AvailableArrowstyles)s
4074: 
4075:         arrow_transmuter :
4076:             Ignored
4077: 
4078:         connectionstyle : str, ConnectionStyle, or None, optional
4079:         (default: 'arc3')
4080:             Describes how *posA* and *posB* are connected. It can be an
4081:             instance of the :class:`ConnectionStyle` class or a string of the
4082:             connectionstyle name, with optional comma-separated attributes. The
4083:             following connection styles are available:
4084: 
4085:             %(AvailableConnectorstyles)s
4086: 
4087:         connector :
4088:             Ignored
4089: 
4090:         patchA, patchB : None, Patch, optional (default: None)
4091:             Head and tail patch respectively. :class:`matplotlib.patch.Patch`
4092:             instance.
4093: 
4094:         shrinkA, shrinkB : scalar, optional (default: 2)
4095:             Shrinking factor of the tail and head of the arrow respectively
4096: 
4097:         mutation_scale : scalar, optional (default: 1)
4098:             Value with which attributes of *arrowstyle* (e.g., *head_length*)
4099:             will be scaled.
4100: 
4101:         mutation_aspect : None, scalar, optional (default: None)
4102:             The height of the rectangle will be squeezed by this value before
4103:             the mutation and the mutated box will be stretched by the inverse
4104:             of it.
4105: 
4106:         dpi_cor : scalar, optional (default: 1)
4107:             dpi_cor is currently used for linewidth-related things and shrink
4108:             factor. Mutation scale is affected by this.
4109: 
4110:         Notes
4111:         -----
4112:         Valid kwargs are:
4113:         %(Patch)s
4114:         '''
4115:         Patch.__init__(self, **kwargs)
4116: 
4117:         if posA is not None and posB is not None and path is None:
4118:             self._posA_posB = [posA, posB]
4119: 
4120:             if connectionstyle is None:
4121:                 connectionstyle = "arc3"
4122:             self.set_connectionstyle(connectionstyle)
4123: 
4124:         elif posA is None and posB is None and path is not None:
4125:             self._posA_posB = None
4126:             self._connetors = None
4127:         else:
4128:             raise ValueError("either posA and posB, or path need to provided")
4129: 
4130:         self.patchA = patchA
4131:         self.patchB = patchB
4132:         self.shrinkA = shrinkA
4133:         self.shrinkB = shrinkB
4134: 
4135:         self._path_original = path
4136: 
4137:         self.set_arrowstyle(arrowstyle)
4138: 
4139:         self._mutation_scale = mutation_scale
4140:         self._mutation_aspect = mutation_aspect
4141: 
4142:         self.set_dpi_cor(dpi_cor)
4143: 
4144:     def set_dpi_cor(self, dpi_cor):
4145:         '''
4146:         dpi_cor is currently used for linewidth-related things and
4147:         shrink factor. Mutation scale is affected by this.
4148: 
4149:         Parameters
4150:         ----------
4151:         dpi_cor : scalar
4152:         '''
4153:         self._dpi_cor = dpi_cor
4154:         self.stale = True
4155: 
4156:     def get_dpi_cor(self):
4157:         '''
4158:         dpi_cor is currently used for linewidth-related things and
4159:         shrink factor. Mutation scale is affected by this.
4160: 
4161:         Returns
4162:         -------
4163:         dpi_cor : scalar
4164:         '''
4165:         return self._dpi_cor
4166: 
4167:     def set_positions(self, posA, posB):
4168:         '''
4169:         Set the begin and end positions of the connecting path.
4170: 
4171:         Parameters
4172:         ----------
4173:         posA, posB : None, tuple
4174:             (x,y) coordinates of arrow tail and arrow head respectively. If
4175:             `None` use current value.
4176:         '''
4177:         if posA is not None:
4178:             self._posA_posB[0] = posA
4179:         if posB is not None:
4180:             self._posA_posB[1] = posB
4181:         self.stale = True
4182: 
4183:     def set_patchA(self, patchA):
4184:         '''
4185:         Set the tail patch.
4186: 
4187:         Parameters
4188:         ----------
4189:         patchA : Patch
4190:             :class:`matplotlib.patch.Patch` instance.
4191:         '''
4192:         self.patchA = patchA
4193:         self.stale = True
4194: 
4195:     def set_patchB(self, patchB):
4196:         '''
4197:         Set the head patch.
4198: 
4199:         Parameters
4200:         ----------
4201:         patchB : Patch
4202:             :class:`matplotlib.patch.Patch` instance.
4203:         '''
4204:         self.patchB = patchB
4205:         self.stale = True
4206: 
4207:     def set_connectionstyle(self, connectionstyle, **kw):
4208:         '''
4209:         Set the connection style. Old attributes are forgotten.
4210: 
4211:         Parameters
4212:         ----------
4213:         connectionstyle : None, ConnectionStyle instance, or string
4214:             Can be a string with connectionstyle name with
4215:             optional comma-separated attributes, e.g.::
4216: 
4217:                 set_connectionstyle("arc,angleA=0,armA=30,rad=10")
4218: 
4219:             Alternatively, the attributes can be provided as keywords, e.g.::
4220: 
4221:                 set_connectionstyle("arc", angleA=0,armA=30,rad=10)
4222: 
4223:             Without any arguments (or with ``connectionstyle=None``), return
4224:             available styles as a list of strings.
4225:         '''
4226: 
4227:         if connectionstyle is None:
4228:             return ConnectionStyle.pprint_styles()
4229: 
4230:         if (isinstance(connectionstyle, ConnectionStyle._Base) or
4231:                 callable(connectionstyle)):
4232:             self._connector = connectionstyle
4233:         else:
4234:             self._connector = ConnectionStyle(connectionstyle, **kw)
4235:         self.stale = True
4236: 
4237:     def get_connectionstyle(self):
4238:         '''
4239:         Return the :class:`ConnectionStyle` instance.
4240:         '''
4241:         return self._connector
4242: 
4243:     def set_arrowstyle(self, arrowstyle=None, **kw):
4244:         '''
4245:         Set the arrow style. Old attributes are forgotten. Without arguments
4246:         (or with ``arrowstyle=None``) returns available box styles as a list of
4247:         strings.
4248: 
4249:         Parameters
4250:         ----------
4251:         arrowstyle : None, ArrowStyle, str, optional (default: None)
4252:             Can be a string with arrowstyle name with optional comma-separated
4253:             attributes, e.g.::
4254: 
4255:                 set_arrowstyle("Fancy,head_length=0.2")
4256: 
4257:             Alternatively attributes can be provided as keywords, e.g.::
4258: 
4259:                 set_arrowstyle("fancy", head_length=0.2)
4260: 
4261:         '''
4262: 
4263:         if arrowstyle is None:
4264:             return ArrowStyle.pprint_styles()
4265: 
4266:         if isinstance(arrowstyle, ArrowStyle._Base):
4267:             self._arrow_transmuter = arrowstyle
4268:         else:
4269:             self._arrow_transmuter = ArrowStyle(arrowstyle, **kw)
4270:         self.stale = True
4271: 
4272:     def get_arrowstyle(self):
4273:         '''
4274:         Return the arrowstyle object.
4275:         '''
4276:         return self._arrow_transmuter
4277: 
4278:     def set_mutation_scale(self, scale):
4279:         '''
4280:         Set the mutation scale.
4281: 
4282:         Parameters
4283:         ----------
4284:         scale : scalar
4285:         '''
4286:         self._mutation_scale = scale
4287:         self.stale = True
4288: 
4289:     def get_mutation_scale(self):
4290:         '''
4291:         Return the mutation scale.
4292: 
4293:         Returns
4294:         -------
4295:         scale : scalar
4296:         '''
4297:         return self._mutation_scale
4298: 
4299:     def set_mutation_aspect(self, aspect):
4300:         '''
4301:         Set the aspect ratio of the bbox mutation.
4302: 
4303:         Parameters
4304:         ----------
4305:         aspect : scalar
4306:         '''
4307:         self._mutation_aspect = aspect
4308:         self.stale = True
4309: 
4310:     def get_mutation_aspect(self):
4311:         '''
4312:         Return the aspect ratio of the bbox mutation.
4313:         '''
4314:         return self._mutation_aspect
4315: 
4316:     def get_path(self):
4317:         '''
4318:         Return the path of the arrow in the data coordinates. Use
4319:         get_path_in_displaycoord() method to retrieve the arrow path
4320:         in display coordinates.
4321:         '''
4322:         _path, fillable = self.get_path_in_displaycoord()
4323: 
4324:         if cbook.iterable(fillable):
4325:             _path = concatenate_paths(_path)
4326: 
4327:         return self.get_transform().inverted().transform_path(_path)
4328: 
4329:     def get_path_in_displaycoord(self):
4330:         '''
4331:         Return the mutated path of the arrow in display coordinates.
4332:         '''
4333: 
4334:         dpi_cor = self.get_dpi_cor()
4335: 
4336:         if self._posA_posB is not None:
4337:             posA = self.get_transform().transform_point(self._posA_posB[0])
4338:             posB = self.get_transform().transform_point(self._posA_posB[1])
4339:             _path = self.get_connectionstyle()(posA, posB,
4340:                                                patchA=self.patchA,
4341:                                                patchB=self.patchB,
4342:                                                shrinkA=self.shrinkA * dpi_cor,
4343:                                                shrinkB=self.shrinkB * dpi_cor
4344:                                                )
4345:         else:
4346:             _path = self.get_transform().transform_path(self._path_original)
4347: 
4348:         _path, fillable = self.get_arrowstyle()(
4349:             _path,
4350:             self.get_mutation_scale() * dpi_cor,
4351:             self.get_linewidth() * dpi_cor,
4352:             self.get_mutation_aspect())
4353: 
4354:         # if not fillable:
4355:         #    self._fill = False
4356: 
4357:         return _path, fillable
4358: 
4359:     def draw(self, renderer):
4360:         if not self.get_visible():
4361:             return
4362: 
4363:         renderer.open_group('patch', self.get_gid())
4364:         gc = renderer.new_gc()
4365: 
4366:         gc.set_foreground(self._edgecolor, isRGBA=True)
4367: 
4368:         lw = self._linewidth
4369:         if self._edgecolor[3] == 0:
4370:             lw = 0
4371:         gc.set_linewidth(lw)
4372:         gc.set_dashes(self._dashoffset, self._dashes)
4373: 
4374:         gc.set_antialiased(self._antialiased)
4375:         self._set_gc_clip(gc)
4376:         gc.set_capstyle('round')
4377:         gc.set_snap(self.get_snap())
4378: 
4379:         rgbFace = self._facecolor
4380:         if rgbFace[3] == 0:
4381:             rgbFace = None  # (some?) renderers expect this as no-fill signal
4382: 
4383:         gc.set_alpha(self._alpha)
4384: 
4385:         if self._hatch:
4386:             gc.set_hatch(self._hatch)
4387:             if self._hatch_color is not None:
4388:                 try:
4389:                     gc.set_hatch_color(self._hatch_color)
4390:                 except AttributeError:
4391:                     # if we end up with a GC that does not have this method
4392:                     warnings.warn("Your backend does not support setting the "
4393:                                   "hatch color.")
4394: 
4395:         if self.get_sketch_params() is not None:
4396:             gc.set_sketch_params(*self.get_sketch_params())
4397: 
4398:         # FIXME : dpi_cor is for the dpi-dependecy of the
4399:         # linewidth. There could be room for improvement.
4400:         #
4401:         # dpi_cor = renderer.points_to_pixels(1.)
4402:         self.set_dpi_cor(renderer.points_to_pixels(1.))
4403:         path, fillable = self.get_path_in_displaycoord()
4404: 
4405:         if not cbook.iterable(fillable):
4406:             path = [path]
4407:             fillable = [fillable]
4408: 
4409:         affine = transforms.IdentityTransform()
4410: 
4411:         if self.get_path_effects():
4412:             from matplotlib.patheffects import PathEffectRenderer
4413:             renderer = PathEffectRenderer(self.get_path_effects(), renderer)
4414: 
4415:         for p, f in zip(path, fillable):
4416:             if f:
4417:                 renderer.draw_path(gc, p, affine, rgbFace)
4418:             else:
4419:                 renderer.draw_path(gc, p, affine, None)
4420: 
4421:         gc.restore()
4422:         renderer.close_group('patch')
4423:         self.stale = False
4424: 
4425: 
4426: class ConnectionPatch(FancyArrowPatch):
4427:     '''
4428:     A :class:`~matplotlib.patches.ConnectionPatch` class is to make
4429:     connecting lines between two points (possibly in different axes).
4430:     '''
4431:     def __str__(self):
4432:         return "ConnectionPatch((%g,%g),(%g,%g))" % \
4433:                (self.xy1[0], self.xy1[1], self.xy2[0], self.xy2[1])
4434: 
4435:     @docstring.dedent_interpd
4436:     def __init__(self, xyA, xyB, coordsA, coordsB=None,
4437:                  axesA=None, axesB=None,
4438:                  arrowstyle="-",
4439:                  arrow_transmuter=None,
4440:                  connectionstyle="arc3",
4441:                  connector=None,
4442:                  patchA=None,
4443:                  patchB=None,
4444:                  shrinkA=0.,
4445:                  shrinkB=0.,
4446:                  mutation_scale=10.,
4447:                  mutation_aspect=None,
4448:                  clip_on=False,
4449:                  dpi_cor=1.,
4450:                  **kwargs):
4451:         '''
4452:         Connect point *xyA* in *coordsA* with point *xyB* in *coordsB*
4453: 
4454: 
4455:         Valid keys are
4456: 
4457: 
4458:         ===============  ======================================================
4459:         Key              Description
4460:         ===============  ======================================================
4461:         arrowstyle       the arrow style
4462:         connectionstyle  the connection style
4463:         relpos           default is (0.5, 0.5)
4464:         patchA           default is bounding box of the text
4465:         patchB           default is None
4466:         shrinkA          default is 2 points
4467:         shrinkB          default is 2 points
4468:         mutation_scale   default is text size (in points)
4469:         mutation_aspect  default is 1.
4470:         ?                any key for :class:`matplotlib.patches.PathPatch`
4471:         ===============  ======================================================
4472: 
4473: 
4474:         *coordsA* and *coordsB* are strings that indicate the
4475:         coordinates of *xyA* and *xyB*.
4476: 
4477:         =================   ===================================================
4478:         Property            Description
4479:         =================   ===================================================
4480:         'figure points'     points from the lower left corner of the figure
4481:         'figure pixels'     pixels from the lower left corner of the figure
4482:         'figure fraction'   0,0 is lower left of figure and 1,1 is upper, right
4483:         'axes points'       points from lower left corner of axes
4484:         'axes pixels'       pixels from lower left corner of axes
4485:         'axes fraction'     0,1 is lower left of axes and 1,1 is upper right
4486:         'data'              use the coordinate system of the object being
4487:                             annotated (default)
4488:         'offset points'     Specify an offset (in points) from the *xy* value
4489: 
4490:         'polar'             you can specify *theta*, *r* for the annotation,
4491:                             even in cartesian plots.  Note that if you
4492:                             are using a polar axes, you do not need
4493:                             to specify polar for the coordinate
4494:                             system since that is the native "data" coordinate
4495:                             system.
4496:         =================   ===================================================
4497: 
4498:         '''
4499:         if coordsB is None:
4500:             coordsB = coordsA
4501:         # we'll draw ourself after the artist we annotate by default
4502:         self.xy1 = xyA
4503:         self.xy2 = xyB
4504:         self.coords1 = coordsA
4505:         self.coords2 = coordsB
4506: 
4507:         self.axesA = axesA
4508:         self.axesB = axesB
4509: 
4510:         FancyArrowPatch.__init__(self,
4511:                                  posA=(0, 0), posB=(1, 1),
4512:                                  arrowstyle=arrowstyle,
4513:                                  arrow_transmuter=arrow_transmuter,
4514:                                  connectionstyle=connectionstyle,
4515:                                  connector=connector,
4516:                                  patchA=patchA,
4517:                                  patchB=patchB,
4518:                                  shrinkA=shrinkA,
4519:                                  shrinkB=shrinkB,
4520:                                  mutation_scale=mutation_scale,
4521:                                  mutation_aspect=mutation_aspect,
4522:                                  clip_on=clip_on,
4523:                                  dpi_cor=dpi_cor,
4524:                                  **kwargs)
4525: 
4526:         # if True, draw annotation only if self.xy is inside the axes
4527:         self._annotation_clip = None
4528: 
4529:     def _get_xy(self, x, y, s, axes=None):
4530:         '''
4531:         caculate the pixel position of given point
4532:         '''
4533: 
4534:         if axes is None:
4535:             axes = self.axes
4536: 
4537:         if s == 'data':
4538:             trans = axes.transData
4539:             x = float(self.convert_xunits(x))
4540:             y = float(self.convert_yunits(y))
4541:             return trans.transform_point((x, y))
4542:         elif s == 'offset points':
4543:             # convert the data point
4544:             dx, dy = self.xy
4545: 
4546:             # prevent recursion
4547:             if self.xycoords == 'offset points':
4548:                 return self._get_xy(dx, dy, 'data')
4549: 
4550:             dx, dy = self._get_xy(dx, dy, self.xycoords)
4551: 
4552:             # convert the offset
4553:             dpi = self.figure.get_dpi()
4554:             x *= dpi / 72.
4555:             y *= dpi / 72.
4556: 
4557:             # add the offset to the data point
4558:             x += dx
4559:             y += dy
4560: 
4561:             return x, y
4562:         elif s == 'polar':
4563:             theta, r = x, y
4564:             x = r * np.cos(theta)
4565:             y = r * np.sin(theta)
4566:             trans = axes.transData
4567:             return trans.transform_point((x, y))
4568:         elif s == 'figure points':
4569:             # points from the lower left corner of the figure
4570:             dpi = self.figure.dpi
4571:             l, b, w, h = self.figure.bbox.bounds
4572:             r = l + w
4573:             t = b + h
4574: 
4575:             x *= dpi / 72.
4576:             y *= dpi / 72.
4577:             if x < 0:
4578:                 x = r + x
4579:             if y < 0:
4580:                 y = t + y
4581:             return x, y
4582:         elif s == 'figure pixels':
4583:             # pixels from the lower left corner of the figure
4584:             l, b, w, h = self.figure.bbox.bounds
4585:             r = l + w
4586:             t = b + h
4587:             if x < 0:
4588:                 x = r + x
4589:             if y < 0:
4590:                 y = t + y
4591:             return x, y
4592:         elif s == 'figure fraction':
4593:             # (0,0) is lower left, (1,1) is upper right of figure
4594:             trans = self.figure.transFigure
4595:             return trans.transform_point((x, y))
4596:         elif s == 'axes points':
4597:             # points from the lower left corner of the axes
4598:             dpi = self.figure.dpi
4599:             l, b, w, h = axes.bbox.bounds
4600:             r = l + w
4601:             t = b + h
4602:             if x < 0:
4603:                 x = r + x * dpi / 72.
4604:             else:
4605:                 x = l + x * dpi / 72.
4606:             if y < 0:
4607:                 y = t + y * dpi / 72.
4608:             else:
4609:                 y = b + y * dpi / 72.
4610:             return x, y
4611:         elif s == 'axes pixels':
4612:             #pixels from the lower left corner of the axes
4613: 
4614:             l, b, w, h = axes.bbox.bounds
4615:             r = l + w
4616:             t = b + h
4617:             if x < 0:
4618:                 x = r + x
4619:             else:
4620:                 x = l + x
4621:             if y < 0:
4622:                 y = t + y
4623:             else:
4624:                 y = b + y
4625:             return x, y
4626:         elif s == 'axes fraction':
4627:             #(0,0) is lower left, (1,1) is upper right of axes
4628:             trans = axes.transAxes
4629:             return trans.transform_point((x, y))
4630: 
4631:     def set_annotation_clip(self, b):
4632:         '''
4633:         set *annotation_clip* attribute.
4634: 
4635:           * True: the annotation will only be drawn when self.xy is inside the
4636:                    axes.
4637:           * False: the annotation will always be drawn regardless of its
4638:                     position.
4639:           * None: the self.xy will be checked only if *xycoords* is "data"
4640:         '''
4641:         self._annotation_clip = b
4642:         self.stale = True
4643: 
4644:     def get_annotation_clip(self):
4645:         '''
4646:         Return *annotation_clip* attribute.
4647:         See :meth:`set_annotation_clip` for the meaning of return values.
4648:         '''
4649:         return self._annotation_clip
4650: 
4651:     def get_path_in_displaycoord(self):
4652:         '''
4653:         Return the mutated path of the arrow in the display coord
4654:         '''
4655: 
4656:         dpi_cor = self.get_dpi_cor()
4657: 
4658:         x, y = self.xy1
4659:         posA = self._get_xy(x, y, self.coords1, self.axesA)
4660: 
4661:         x, y = self.xy2
4662:         posB = self._get_xy(x, y, self.coords2, self.axesB)
4663: 
4664:         _path = self.get_connectionstyle()(posA, posB,
4665:                                            patchA=self.patchA,
4666:                                            patchB=self.patchB,
4667:                                            shrinkA=self.shrinkA * dpi_cor,
4668:                                            shrinkB=self.shrinkB * dpi_cor
4669:                                            )
4670: 
4671:         _path, fillable = self.get_arrowstyle()(
4672:                                         _path,
4673:                                         self.get_mutation_scale() * dpi_cor,
4674:                                         self.get_linewidth() * dpi_cor,
4675:                                         self.get_mutation_aspect()
4676:                                         )
4677: 
4678:         return _path, fillable
4679: 
4680:     def _check_xy(self, renderer):
4681:         '''
4682:         check if the annotation need to
4683:         be drawn.
4684:         '''
4685: 
4686:         b = self.get_annotation_clip()
4687: 
4688:         if b or (b is None and self.coords1 == "data"):
4689:             x, y = self.xy1
4690:             xy_pixel = self._get_xy(x, y, self.coords1, self.axesA)
4691:             if not self.axes.contains_point(xy_pixel):
4692:                 return False
4693: 
4694:         if b or (b is None and self.coords2 == "data"):
4695:             x, y = self.xy2
4696:             xy_pixel = self._get_xy(x, y, self.coords2, self.axesB)
4697:             if self.axesB is None:
4698:                 axes = self.axes
4699:             else:
4700:                 axes = self.axesB
4701:             if not axes.contains_point(xy_pixel):
4702:                 return False
4703: 
4704:         return True
4705: 
4706:     def draw(self, renderer):
4707:         '''
4708:         Draw.
4709:         '''
4710: 
4711:         if renderer is not None:
4712:             self._renderer = renderer
4713:         if not self.get_visible():
4714:             return
4715: 
4716:         if not self._check_xy(renderer):
4717:             return
4718: 
4719:         FancyArrowPatch.draw(self, renderer)
4720: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 6, 0))

# 'import six' statement (line 6)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_100787 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 6, 0), 'six')

if (type(import_100787) is not StypyTypeError):

    if (import_100787 != 'pyd_module'):
        __import__(import_100787)
        sys_modules_100788 = sys.modules[import_100787]
        import_module(stypy.reporting.localization.Localization(__file__, 6, 0), 'six', sys_modules_100788.module_type_store, module_type_store)
    else:
        import six

        import_module(stypy.reporting.localization.Localization(__file__, 6, 0), 'six', six, module_type_store)

else:
    # Assigning a type to the variable 'six' (line 6)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6, 0), 'six', import_100787)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 7, 0))

# 'from six.moves import map, zip' statement (line 7)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_100789 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'six.moves')

if (type(import_100789) is not StypyTypeError):

    if (import_100789 != 'pyd_module'):
        __import__(import_100789)
        sys_modules_100790 = sys.modules[import_100789]
        import_from_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'six.moves', sys_modules_100790.module_type_store, module_type_store, ['map', 'zip'])
        nest_module(stypy.reporting.localization.Localization(__file__, 7, 0), __file__, sys_modules_100790, sys_modules_100790.module_type_store, module_type_store)
    else:
        from six.moves import map, zip

        import_from_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'six.moves', None, module_type_store, ['map', 'zip'], [map, zip])

else:
    # Assigning a type to the variable 'six.moves' (line 7)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7, 0), 'six.moves', import_100789)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 8, 0))

# 'import warnings' statement (line 8)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 10, 0))

# 'import math' statement (line 10)
import math

import_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'math', math, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 12, 0))

# 'import matplotlib' statement (line 12)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_100791 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'matplotlib')

if (type(import_100791) is not StypyTypeError):

    if (import_100791 != 'pyd_module'):
        __import__(import_100791)
        sys_modules_100792 = sys.modules[import_100791]
        import_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'mpl', sys_modules_100792.module_type_store, module_type_store)
    else:
        import matplotlib as mpl

        import_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'mpl', matplotlib, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib' (line 12)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 12, 0), 'matplotlib', import_100791)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 13, 0))

# 'import numpy' statement (line 13)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_100793 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'numpy')

if (type(import_100793) is not StypyTypeError):

    if (import_100793 != 'pyd_module'):
        __import__(import_100793)
        sys_modules_100794 = sys.modules[import_100793]
        import_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'np', sys_modules_100794.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 13)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 13, 0), 'numpy', import_100793)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 14, 0))

# 'import matplotlib.cbook' statement (line 14)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_100795 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'matplotlib.cbook')

if (type(import_100795) is not StypyTypeError):

    if (import_100795 != 'pyd_module'):
        __import__(import_100795)
        sys_modules_100796 = sys.modules[import_100795]
        import_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'cbook', sys_modules_100796.module_type_store, module_type_store)
    else:
        import matplotlib.cbook as cbook

        import_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'cbook', matplotlib.cbook, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.cbook' (line 14)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 14, 0), 'matplotlib.cbook', import_100795)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 15, 0))

# 'import matplotlib.artist' statement (line 15)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_100797 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'matplotlib.artist')

if (type(import_100797) is not StypyTypeError):

    if (import_100797 != 'pyd_module'):
        __import__(import_100797)
        sys_modules_100798 = sys.modules[import_100797]
        import_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'artist', sys_modules_100798.module_type_store, module_type_store)
    else:
        import matplotlib.artist as artist

        import_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'artist', matplotlib.artist, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.artist' (line 15)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 15, 0), 'matplotlib.artist', import_100797)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 16, 0))

# 'from matplotlib.artist import allow_rasterization' statement (line 16)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_100799 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'matplotlib.artist')

if (type(import_100799) is not StypyTypeError):

    if (import_100799 != 'pyd_module'):
        __import__(import_100799)
        sys_modules_100800 = sys.modules[import_100799]
        import_from_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'matplotlib.artist', sys_modules_100800.module_type_store, module_type_store, ['allow_rasterization'])
        nest_module(stypy.reporting.localization.Localization(__file__, 16, 0), __file__, sys_modules_100800, sys_modules_100800.module_type_store, module_type_store)
    else:
        from matplotlib.artist import allow_rasterization

        import_from_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'matplotlib.artist', None, module_type_store, ['allow_rasterization'], [allow_rasterization])

else:
    # Assigning a type to the variable 'matplotlib.artist' (line 16)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 16, 0), 'matplotlib.artist', import_100799)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 17, 0))

# 'import matplotlib.colors' statement (line 17)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_100801 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'matplotlib.colors')

if (type(import_100801) is not StypyTypeError):

    if (import_100801 != 'pyd_module'):
        __import__(import_100801)
        sys_modules_100802 = sys.modules[import_100801]
        import_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'colors', sys_modules_100802.module_type_store, module_type_store)
    else:
        import matplotlib.colors as colors

        import_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'colors', matplotlib.colors, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.colors' (line 17)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 17, 0), 'matplotlib.colors', import_100801)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 18, 0))

# 'from matplotlib import docstring' statement (line 18)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_100803 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'matplotlib')

if (type(import_100803) is not StypyTypeError):

    if (import_100803 != 'pyd_module'):
        __import__(import_100803)
        sys_modules_100804 = sys.modules[import_100803]
        import_from_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'matplotlib', sys_modules_100804.module_type_store, module_type_store, ['docstring'])
        nest_module(stypy.reporting.localization.Localization(__file__, 18, 0), __file__, sys_modules_100804, sys_modules_100804.module_type_store, module_type_store)
    else:
        from matplotlib import docstring

        import_from_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'matplotlib', None, module_type_store, ['docstring'], [docstring])

else:
    # Assigning a type to the variable 'matplotlib' (line 18)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 18, 0), 'matplotlib', import_100803)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 19, 0))

# 'import matplotlib.transforms' statement (line 19)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_100805 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'matplotlib.transforms')

if (type(import_100805) is not StypyTypeError):

    if (import_100805 != 'pyd_module'):
        __import__(import_100805)
        sys_modules_100806 = sys.modules[import_100805]
        import_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'transforms', sys_modules_100806.module_type_store, module_type_store)
    else:
        import matplotlib.transforms as transforms

        import_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'transforms', matplotlib.transforms, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.transforms' (line 19)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 19, 0), 'matplotlib.transforms', import_100805)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 20, 0))

# 'from matplotlib.path import Path' statement (line 20)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_100807 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'matplotlib.path')

if (type(import_100807) is not StypyTypeError):

    if (import_100807 != 'pyd_module'):
        __import__(import_100807)
        sys_modules_100808 = sys.modules[import_100807]
        import_from_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'matplotlib.path', sys_modules_100808.module_type_store, module_type_store, ['Path'])
        nest_module(stypy.reporting.localization.Localization(__file__, 20, 0), __file__, sys_modules_100808, sys_modules_100808.module_type_store, module_type_store)
    else:
        from matplotlib.path import Path

        import_from_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'matplotlib.path', None, module_type_store, ['Path'], [Path])

else:
    # Assigning a type to the variable 'matplotlib.path' (line 20)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 20, 0), 'matplotlib.path', import_100807)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 21, 0))

# 'import matplotlib.lines' statement (line 21)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_100809 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'matplotlib.lines')

if (type(import_100809) is not StypyTypeError):

    if (import_100809 != 'pyd_module'):
        __import__(import_100809)
        sys_modules_100810 = sys.modules[import_100809]
        import_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'mlines', sys_modules_100810.module_type_store, module_type_store)
    else:
        import matplotlib.lines as mlines

        import_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'mlines', matplotlib.lines, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.lines' (line 21)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 21, 0), 'matplotlib.lines', import_100809)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 23, 0))

# 'from matplotlib.bezier import split_bezier_intersecting_with_closedpath' statement (line 23)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_100811 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'matplotlib.bezier')

if (type(import_100811) is not StypyTypeError):

    if (import_100811 != 'pyd_module'):
        __import__(import_100811)
        sys_modules_100812 = sys.modules[import_100811]
        import_from_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'matplotlib.bezier', sys_modules_100812.module_type_store, module_type_store, ['split_bezier_intersecting_with_closedpath'])
        nest_module(stypy.reporting.localization.Localization(__file__, 23, 0), __file__, sys_modules_100812, sys_modules_100812.module_type_store, module_type_store)
    else:
        from matplotlib.bezier import split_bezier_intersecting_with_closedpath

        import_from_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'matplotlib.bezier', None, module_type_store, ['split_bezier_intersecting_with_closedpath'], [split_bezier_intersecting_with_closedpath])

else:
    # Assigning a type to the variable 'matplotlib.bezier' (line 23)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 23, 0), 'matplotlib.bezier', import_100811)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 24, 0))

# 'from matplotlib.bezier import get_intersection, inside_circle, get_parallels' statement (line 24)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_100813 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib.bezier')

if (type(import_100813) is not StypyTypeError):

    if (import_100813 != 'pyd_module'):
        __import__(import_100813)
        sys_modules_100814 = sys.modules[import_100813]
        import_from_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib.bezier', sys_modules_100814.module_type_store, module_type_store, ['get_intersection', 'inside_circle', 'get_parallels'])
        nest_module(stypy.reporting.localization.Localization(__file__, 24, 0), __file__, sys_modules_100814, sys_modules_100814.module_type_store, module_type_store)
    else:
        from matplotlib.bezier import get_intersection, inside_circle, get_parallels

        import_from_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib.bezier', None, module_type_store, ['get_intersection', 'inside_circle', 'get_parallels'], [get_intersection, inside_circle, get_parallels])

else:
    # Assigning a type to the variable 'matplotlib.bezier' (line 24)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib.bezier', import_100813)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 25, 0))

# 'from matplotlib.bezier import make_wedged_bezier2' statement (line 25)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_100815 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'matplotlib.bezier')

if (type(import_100815) is not StypyTypeError):

    if (import_100815 != 'pyd_module'):
        __import__(import_100815)
        sys_modules_100816 = sys.modules[import_100815]
        import_from_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'matplotlib.bezier', sys_modules_100816.module_type_store, module_type_store, ['make_wedged_bezier2'])
        nest_module(stypy.reporting.localization.Localization(__file__, 25, 0), __file__, sys_modules_100816, sys_modules_100816.module_type_store, module_type_store)
    else:
        from matplotlib.bezier import make_wedged_bezier2

        import_from_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'matplotlib.bezier', None, module_type_store, ['make_wedged_bezier2'], [make_wedged_bezier2])

else:
    # Assigning a type to the variable 'matplotlib.bezier' (line 25)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 25, 0), 'matplotlib.bezier', import_100815)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 26, 0))

# 'from matplotlib.bezier import split_path_inout, get_cos_sin' statement (line 26)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_100817 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'matplotlib.bezier')

if (type(import_100817) is not StypyTypeError):

    if (import_100817 != 'pyd_module'):
        __import__(import_100817)
        sys_modules_100818 = sys.modules[import_100817]
        import_from_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'matplotlib.bezier', sys_modules_100818.module_type_store, module_type_store, ['split_path_inout', 'get_cos_sin'])
        nest_module(stypy.reporting.localization.Localization(__file__, 26, 0), __file__, sys_modules_100818, sys_modules_100818.module_type_store, module_type_store)
    else:
        from matplotlib.bezier import split_path_inout, get_cos_sin

        import_from_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'matplotlib.bezier', None, module_type_store, ['split_path_inout', 'get_cos_sin'], [split_path_inout, get_cos_sin])

else:
    # Assigning a type to the variable 'matplotlib.bezier' (line 26)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 26, 0), 'matplotlib.bezier', import_100817)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 27, 0))

# 'from matplotlib.bezier import make_path_regular, concatenate_paths' statement (line 27)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_100819 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'matplotlib.bezier')

if (type(import_100819) is not StypyTypeError):

    if (import_100819 != 'pyd_module'):
        __import__(import_100819)
        sys_modules_100820 = sys.modules[import_100819]
        import_from_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'matplotlib.bezier', sys_modules_100820.module_type_store, module_type_store, ['make_path_regular', 'concatenate_paths'])
        nest_module(stypy.reporting.localization.Localization(__file__, 27, 0), __file__, sys_modules_100820, sys_modules_100820.module_type_store, module_type_store)
    else:
        from matplotlib.bezier import make_path_regular, concatenate_paths

        import_from_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'matplotlib.bezier', None, module_type_store, ['make_path_regular', 'concatenate_paths'], [make_path_regular, concatenate_paths])

else:
    # Assigning a type to the variable 'matplotlib.bezier' (line 27)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 27, 0), 'matplotlib.bezier', import_100819)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')


# Call to update(...): (line 33)
# Processing the call keyword arguments (line 33)
unicode_100824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 58, (-1)), 'unicode', u"\n\n          =================   ==============================================\n          Property            Description\n          =================   ==============================================\n          alpha               float\n          animated            [True | False]\n          antialiased or aa   [True | False]\n          capstyle            ['butt' | 'round' | 'projecting']\n          clip_box            a matplotlib.transform.Bbox instance\n          clip_on             [True | False]\n          edgecolor or ec     any matplotlib color\n          facecolor or fc     any matplotlib color\n          figure              a matplotlib.figure.Figure instance\n          fill                [True | False]\n          hatch               unknown\n          joinstyle           ['miter' | 'round' | 'bevel']\n          label               any string\n          linewidth or lw     float\n          lod                 [True | False]\n          transform           a matplotlib.transform transformation instance\n          visible             [True | False]\n          zorder              any number\n          =================   ==============================================\n\n          ")
keyword_100825 = unicode_100824
kwargs_100826 = {'Patch': keyword_100825}
# Getting the type of 'docstring' (line 33)
docstring_100821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 33, 0), 'docstring', False)
# Obtaining the member 'interpd' of a type (line 33)
interpd_100822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 33, 0), docstring_100821, 'interpd')
# Obtaining the member 'update' of a type (line 33)
update_100823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 33, 0), interpd_100822, 'update')
# Calling update(args, kwargs) (line 33)
update_call_result_100827 = invoke(stypy.reporting.localization.Localization(__file__, 33, 0), update_100823, *[], **kwargs_100826)


# Assigning a Dict to a Name (line 60):

# Assigning a Dict to a Name (line 60):

# Assigning a Dict to a Name (line 60):

# Obtaining an instance of the builtin type 'dict' (line 60)
dict_100828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 60, 19), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 60)
# Adding element type (key, value) (line 60)
unicode_100829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 61, 8), 'unicode', u'antialiased')

# Obtaining an instance of the builtin type 'list' (line 61)
list_100830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 61, 23), 'list')
# Adding type elements to the builtin type 'list' instance (line 61)
# Adding element type (line 61)
unicode_100831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 61, 24), 'unicode', u'aa')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 61, 23), list_100830, unicode_100831)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 60, 19), dict_100828, (unicode_100829, list_100830))
# Adding element type (key, value) (line 60)
unicode_100832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 62, 8), 'unicode', u'edgecolor')

# Obtaining an instance of the builtin type 'list' (line 62)
list_100833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 62, 21), 'list')
# Adding type elements to the builtin type 'list' instance (line 62)
# Adding element type (line 62)
unicode_100834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 62, 22), 'unicode', u'ec')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 62, 21), list_100833, unicode_100834)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 60, 19), dict_100828, (unicode_100832, list_100833))
# Adding element type (key, value) (line 60)
unicode_100835 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 63, 8), 'unicode', u'facecolor')

# Obtaining an instance of the builtin type 'list' (line 63)
list_100836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 63, 21), 'list')
# Adding type elements to the builtin type 'list' instance (line 63)
# Adding element type (line 63)
unicode_100837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 63, 22), 'unicode', u'fc')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 63, 21), list_100836, unicode_100837)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 60, 19), dict_100828, (unicode_100835, list_100836))
# Adding element type (key, value) (line 60)
unicode_100838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 64, 8), 'unicode', u'linewidth')

# Obtaining an instance of the builtin type 'list' (line 64)
list_100839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 64, 21), 'list')
# Adding type elements to the builtin type 'list' instance (line 64)
# Adding element type (line 64)
unicode_100840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 64, 22), 'unicode', u'lw')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 64, 21), list_100839, unicode_100840)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 60, 19), dict_100828, (unicode_100838, list_100839))
# Adding element type (key, value) (line 60)
unicode_100841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 65, 8), 'unicode', u'linestyle')

# Obtaining an instance of the builtin type 'list' (line 65)
list_100842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 65, 21), 'list')
# Adding type elements to the builtin type 'list' instance (line 65)
# Adding element type (line 65)
unicode_100843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 65, 22), 'unicode', u'ls')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 65, 21), list_100842, unicode_100843)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 60, 19), dict_100828, (unicode_100841, list_100842))

# Assigning a type to the variable '_patch_alias_map' (line 60)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 60, 0), '_patch_alias_map', dict_100828)
# Declaration of the 'Patch' class
# Getting the type of 'artist' (line 69)
artist_100844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 69, 12), 'artist')
# Obtaining the member 'Artist' of a type (line 69)
Artist_100845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 69, 12), artist_100844, 'Artist')

class Patch(Artist_100845, ):
    unicode_100846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 75, (-1)), 'unicode', u'\n    A patch is a 2D artist with a face color and an edge color.\n\n    If any of *edgecolor*, *facecolor*, *linewidth*, or *antialiased*\n    are *None*, they default to their rc params setting.\n    ')
    
    # Assigning a Num to a Name (line 76):
    
    # Assigning a Num to a Name (line 76):
    
    # Assigning a Tuple to a Name (line 77):
    
    # Assigning a Tuple to a Name (line 77):
    
    # Assigning a Tuple to a Name (line 78):
    
    # Assigning a Tuple to a Name (line 78):
    
    # Assigning a Name to a Name (line 82):
    
    # Assigning a Name to a Name (line 82):

    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 84, 4, False)
        # Assigning a type to the variable 'self' (line 85)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 85, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        Patch.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.stypy__str__.__dict__.__setitem__('stypy_function_name', 'Patch.stypy__str__')
        Patch.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        Patch.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.stypy__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        
        # Obtaining the type of the subscript
        int_100847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, 46), 'int')
        
        # Call to split(...): (line 85)
        # Processing the call arguments (line 85)
        unicode_100854 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, 41), 'unicode', u'.')
        # Processing the call keyword arguments (line 85)
        kwargs_100855 = {}
        
        # Call to str(...): (line 85)
        # Processing the call arguments (line 85)
        # Getting the type of 'self' (line 85)
        self_100849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 19), 'self', False)
        # Obtaining the member '__class__' of a type (line 85)
        class___100850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 85, 19), self_100849, '__class__')
        # Processing the call keyword arguments (line 85)
        kwargs_100851 = {}
        # Getting the type of 'str' (line 85)
        str_100848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 15), 'str', False)
        # Calling str(args, kwargs) (line 85)
        str_call_result_100852 = invoke(stypy.reporting.localization.Localization(__file__, 85, 15), str_100848, *[class___100850], **kwargs_100851)
        
        # Obtaining the member 'split' of a type (line 85)
        split_100853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 85, 15), str_call_result_100852, 'split')
        # Calling split(args, kwargs) (line 85)
        split_call_result_100856 = invoke(stypy.reporting.localization.Localization(__file__, 85, 15), split_100853, *[unicode_100854], **kwargs_100855)
        
        # Obtaining the member '__getitem__' of a type (line 85)
        getitem___100857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 85, 15), split_call_result_100856, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 85)
        subscript_call_result_100858 = invoke(stypy.reporting.localization.Localization(__file__, 85, 15), getitem___100857, int_100847)
        
        # Assigning a type to the variable 'stypy_return_type' (line 85)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 85, 8), 'stypy_return_type', subscript_call_result_100858)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 84)
        stypy_return_type_100859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 84, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_100859)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_100859


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 88)
        None_100860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 88, 27), 'None')
        # Getting the type of 'None' (line 89)
        None_100861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 89, 27), 'None')
        # Getting the type of 'None' (line 90)
        None_100862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 90, 23), 'None')
        # Getting the type of 'None' (line 91)
        None_100863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 91, 27), 'None')
        # Getting the type of 'None' (line 92)
        None_100864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 27), 'None')
        # Getting the type of 'None' (line 93)
        None_100865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 93, 29), 'None')
        # Getting the type of 'None' (line 94)
        None_100866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 23), 'None')
        # Getting the type of 'True' (line 95)
        True_100867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 22), 'True')
        # Getting the type of 'None' (line 96)
        None_100868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 26), 'None')
        # Getting the type of 'None' (line 97)
        None_100869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 27), 'None')
        defaults = [None_100860, None_100861, None_100862, None_100863, None_100864, None_100865, None_100866, True_100867, None_100868, None_100869]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 87, 4, False)
        # Assigning a type to the variable 'self' (line 88)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 88, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.__init__', ['edgecolor', 'facecolor', 'color', 'linewidth', 'linestyle', 'antialiased', 'hatch', 'fill', 'capstyle', 'joinstyle'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['edgecolor', 'facecolor', 'color', 'linewidth', 'linestyle', 'antialiased', 'hatch', 'fill', 'capstyle', 'joinstyle'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_100870 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 103, (-1)), 'unicode', u'\n        The following kwarg properties are supported\n\n        %(Patch)s\n        ')
        
        # Call to __init__(...): (line 104)
        # Processing the call arguments (line 104)
        # Getting the type of 'self' (line 104)
        self_100874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 31), 'self', False)
        # Processing the call keyword arguments (line 104)
        kwargs_100875 = {}
        # Getting the type of 'artist' (line 104)
        artist_100871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 8), 'artist', False)
        # Obtaining the member 'Artist' of a type (line 104)
        Artist_100872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 104, 8), artist_100871, 'Artist')
        # Obtaining the member '__init__' of a type (line 104)
        init___100873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 104, 8), Artist_100872, '__init__')
        # Calling __init__(args, kwargs) (line 104)
        init___call_result_100876 = invoke(stypy.reporting.localization.Localization(__file__, 104, 8), init___100873, *[self_100874], **kwargs_100875)
        
        
        # Type idiom detected: calculating its left and rigth part (line 106)
        # Getting the type of 'linewidth' (line 106)
        linewidth_100877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 106, 11), 'linewidth')
        # Getting the type of 'None' (line 106)
        None_100878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 106, 24), 'None')
        
        (may_be_100879, more_types_in_union_100880) = may_be_none(linewidth_100877, None_100878)

        if may_be_100879:

            if more_types_in_union_100880:
                # Runtime conditional SSA (line 106)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 107):
            
            # Assigning a Subscript to a Name (line 107):
            
            # Assigning a Subscript to a Name (line 107):
            
            # Obtaining the type of the subscript
            unicode_100881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 107, 37), 'unicode', u'patch.linewidth')
            # Getting the type of 'mpl' (line 107)
            mpl_100882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 24), 'mpl')
            # Obtaining the member 'rcParams' of a type (line 107)
            rcParams_100883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 107, 24), mpl_100882, 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 107)
            getitem___100884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 107, 24), rcParams_100883, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 107)
            subscript_call_result_100885 = invoke(stypy.reporting.localization.Localization(__file__, 107, 24), getitem___100884, unicode_100881)
            
            # Assigning a type to the variable 'linewidth' (line 107)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 107, 12), 'linewidth', subscript_call_result_100885)

            if more_types_in_union_100880:
                # SSA join for if statement (line 106)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 108)
        # Getting the type of 'linestyle' (line 108)
        linestyle_100886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 11), 'linestyle')
        # Getting the type of 'None' (line 108)
        None_100887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 24), 'None')
        
        (may_be_100888, more_types_in_union_100889) = may_be_none(linestyle_100886, None_100887)

        if may_be_100888:

            if more_types_in_union_100889:
                # Runtime conditional SSA (line 108)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Str to a Name (line 109):
            
            # Assigning a Str to a Name (line 109):
            
            # Assigning a Str to a Name (line 109):
            unicode_100890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 109, 24), 'unicode', u'solid')
            # Assigning a type to the variable 'linestyle' (line 109)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 109, 12), 'linestyle', unicode_100890)

            if more_types_in_union_100889:
                # SSA join for if statement (line 108)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 110)
        # Getting the type of 'capstyle' (line 110)
        capstyle_100891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 110, 11), 'capstyle')
        # Getting the type of 'None' (line 110)
        None_100892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 110, 23), 'None')
        
        (may_be_100893, more_types_in_union_100894) = may_be_none(capstyle_100891, None_100892)

        if may_be_100893:

            if more_types_in_union_100894:
                # Runtime conditional SSA (line 110)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Str to a Name (line 111):
            
            # Assigning a Str to a Name (line 111):
            
            # Assigning a Str to a Name (line 111):
            unicode_100895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 111, 23), 'unicode', u'butt')
            # Assigning a type to the variable 'capstyle' (line 111)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 111, 12), 'capstyle', unicode_100895)

            if more_types_in_union_100894:
                # SSA join for if statement (line 110)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 112)
        # Getting the type of 'joinstyle' (line 112)
        joinstyle_100896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 112, 11), 'joinstyle')
        # Getting the type of 'None' (line 112)
        None_100897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 112, 24), 'None')
        
        (may_be_100898, more_types_in_union_100899) = may_be_none(joinstyle_100896, None_100897)

        if may_be_100898:

            if more_types_in_union_100899:
                # Runtime conditional SSA (line 112)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Str to a Name (line 113):
            
            # Assigning a Str to a Name (line 113):
            
            # Assigning a Str to a Name (line 113):
            unicode_100900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 113, 24), 'unicode', u'miter')
            # Assigning a type to the variable 'joinstyle' (line 113)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 12), 'joinstyle', unicode_100900)

            if more_types_in_union_100899:
                # SSA join for if statement (line 112)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 114)
        # Getting the type of 'antialiased' (line 114)
        antialiased_100901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 11), 'antialiased')
        # Getting the type of 'None' (line 114)
        None_100902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 26), 'None')
        
        (may_be_100903, more_types_in_union_100904) = may_be_none(antialiased_100901, None_100902)

        if may_be_100903:

            if more_types_in_union_100904:
                # Runtime conditional SSA (line 114)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 115):
            
            # Assigning a Subscript to a Name (line 115):
            
            # Assigning a Subscript to a Name (line 115):
            
            # Obtaining the type of the subscript
            unicode_100905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 115, 39), 'unicode', u'patch.antialiased')
            # Getting the type of 'mpl' (line 115)
            mpl_100906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 115, 26), 'mpl')
            # Obtaining the member 'rcParams' of a type (line 115)
            rcParams_100907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 115, 26), mpl_100906, 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 115)
            getitem___100908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 115, 26), rcParams_100907, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 115)
            subscript_call_result_100909 = invoke(stypy.reporting.localization.Localization(__file__, 115, 26), getitem___100908, unicode_100905)
            
            # Assigning a type to the variable 'antialiased' (line 115)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 115, 12), 'antialiased', subscript_call_result_100909)

            if more_types_in_union_100904:
                # SSA join for if statement (line 114)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Attribute (line 117):
        
        # Assigning a Call to a Attribute (line 117):
        
        # Assigning a Call to a Attribute (line 117):
        
        # Call to to_rgba(...): (line 117)
        # Processing the call arguments (line 117)
        
        # Obtaining the type of the subscript
        unicode_100912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 117, 56), 'unicode', u'hatch.color')
        # Getting the type of 'mpl' (line 117)
        mpl_100913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 117, 43), 'mpl', False)
        # Obtaining the member 'rcParams' of a type (line 117)
        rcParams_100914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 117, 43), mpl_100913, 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 117)
        getitem___100915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 117, 43), rcParams_100914, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 117)
        subscript_call_result_100916 = invoke(stypy.reporting.localization.Localization(__file__, 117, 43), getitem___100915, unicode_100912)
        
        # Processing the call keyword arguments (line 117)
        kwargs_100917 = {}
        # Getting the type of 'colors' (line 117)
        colors_100910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 117, 28), 'colors', False)
        # Obtaining the member 'to_rgba' of a type (line 117)
        to_rgba_100911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 117, 28), colors_100910, 'to_rgba')
        # Calling to_rgba(args, kwargs) (line 117)
        to_rgba_call_result_100918 = invoke(stypy.reporting.localization.Localization(__file__, 117, 28), to_rgba_100911, *[subscript_call_result_100916], **kwargs_100917)
        
        # Getting the type of 'self' (line 117)
        self_100919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 117, 8), 'self')
        # Setting the type of the member '_hatch_color' of a type (line 117)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 117, 8), self_100919, '_hatch_color', to_rgba_call_result_100918)
        
        # Assigning a Name to a Attribute (line 118):
        
        # Assigning a Name to a Attribute (line 118):
        
        # Assigning a Name to a Attribute (line 118):
        # Getting the type of 'True' (line 118)
        True_100920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 118, 21), 'True')
        # Getting the type of 'self' (line 118)
        self_100921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 118, 8), 'self')
        # Setting the type of the member '_fill' of a type (line 118)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 118, 8), self_100921, '_fill', True_100920)
        
        # Type idiom detected: calculating its left and rigth part (line 119)
        # Getting the type of 'color' (line 119)
        color_100922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 8), 'color')
        # Getting the type of 'None' (line 119)
        None_100923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 24), 'None')
        
        (may_be_100924, more_types_in_union_100925) = may_not_be_none(color_100922, None_100923)

        if may_be_100924:

            if more_types_in_union_100925:
                # Runtime conditional SSA (line 119)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'edgecolor' (line 120)
            edgecolor_100926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 16), 'edgecolor')
            # Getting the type of 'None' (line 120)
            None_100927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 33), 'None')
            # Applying the binary operator 'isnot' (line 120)
            result_is_not_100928 = python_operator(stypy.reporting.localization.Localization(__file__, 120, 16), 'isnot', edgecolor_100926, None_100927)
            
            
            # Getting the type of 'facecolor' (line 120)
            facecolor_100929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 41), 'facecolor')
            # Getting the type of 'None' (line 120)
            None_100930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 58), 'None')
            # Applying the binary operator 'isnot' (line 120)
            result_is_not_100931 = python_operator(stypy.reporting.localization.Localization(__file__, 120, 41), 'isnot', facecolor_100929, None_100930)
            
            # Applying the binary operator 'or' (line 120)
            result_or_keyword_100932 = python_operator(stypy.reporting.localization.Localization(__file__, 120, 16), 'or', result_is_not_100928, result_is_not_100931)
            
            # Testing the type of an if condition (line 120)
            if_condition_100933 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 120, 12), result_or_keyword_100932)
            # Assigning a type to the variable 'if_condition_100933' (line 120)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 120, 12), 'if_condition_100933', if_condition_100933)
            # SSA begins for if statement (line 120)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to warn(...): (line 121)
            # Processing the call arguments (line 121)
            unicode_100936 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 121, 30), 'unicode', u"Setting the 'color' property will overridethe edgecolor or facecolor properties. ")
            # Processing the call keyword arguments (line 121)
            kwargs_100937 = {}
            # Getting the type of 'warnings' (line 121)
            warnings_100934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 16), 'warnings', False)
            # Obtaining the member 'warn' of a type (line 121)
            warn_100935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 121, 16), warnings_100934, 'warn')
            # Calling warn(args, kwargs) (line 121)
            warn_call_result_100938 = invoke(stypy.reporting.localization.Localization(__file__, 121, 16), warn_100935, *[unicode_100936], **kwargs_100937)
            
            # SSA join for if statement (line 120)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Call to set_color(...): (line 123)
            # Processing the call arguments (line 123)
            # Getting the type of 'color' (line 123)
            color_100941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 27), 'color', False)
            # Processing the call keyword arguments (line 123)
            kwargs_100942 = {}
            # Getting the type of 'self' (line 123)
            self_100939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 12), 'self', False)
            # Obtaining the member 'set_color' of a type (line 123)
            set_color_100940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 123, 12), self_100939, 'set_color')
            # Calling set_color(args, kwargs) (line 123)
            set_color_call_result_100943 = invoke(stypy.reporting.localization.Localization(__file__, 123, 12), set_color_100940, *[color_100941], **kwargs_100942)
            

            if more_types_in_union_100925:
                # Runtime conditional SSA for else branch (line 119)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_100924) or more_types_in_union_100925):
            
            # Call to set_edgecolor(...): (line 125)
            # Processing the call arguments (line 125)
            # Getting the type of 'edgecolor' (line 125)
            edgecolor_100946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 125, 31), 'edgecolor', False)
            # Processing the call keyword arguments (line 125)
            kwargs_100947 = {}
            # Getting the type of 'self' (line 125)
            self_100944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 125, 12), 'self', False)
            # Obtaining the member 'set_edgecolor' of a type (line 125)
            set_edgecolor_100945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 125, 12), self_100944, 'set_edgecolor')
            # Calling set_edgecolor(args, kwargs) (line 125)
            set_edgecolor_call_result_100948 = invoke(stypy.reporting.localization.Localization(__file__, 125, 12), set_edgecolor_100945, *[edgecolor_100946], **kwargs_100947)
            
            
            # Call to set_facecolor(...): (line 126)
            # Processing the call arguments (line 126)
            # Getting the type of 'facecolor' (line 126)
            facecolor_100951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 31), 'facecolor', False)
            # Processing the call keyword arguments (line 126)
            kwargs_100952 = {}
            # Getting the type of 'self' (line 126)
            self_100949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 12), 'self', False)
            # Obtaining the member 'set_facecolor' of a type (line 126)
            set_facecolor_100950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 126, 12), self_100949, 'set_facecolor')
            # Calling set_facecolor(args, kwargs) (line 126)
            set_facecolor_call_result_100953 = invoke(stypy.reporting.localization.Localization(__file__, 126, 12), set_facecolor_100950, *[facecolor_100951], **kwargs_100952)
            

            if (may_be_100924 and more_types_in_union_100925):
                # SSA join for if statement (line 119)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 128):
        
        # Assigning a Name to a Attribute (line 128):
        
        # Assigning a Name to a Attribute (line 128):
        # Getting the type of 'None' (line 128)
        None_100954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 26), 'None')
        # Getting the type of 'self' (line 128)
        self_100955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 8), 'self')
        # Setting the type of the member '_us_dashes' of a type (line 128)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 128, 8), self_100955, '_us_dashes', None_100954)
        
        # Assigning a Num to a Attribute (line 129):
        
        # Assigning a Num to a Attribute (line 129):
        
        # Assigning a Num to a Attribute (line 129):
        int_100956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 129, 26), 'int')
        # Getting the type of 'self' (line 129)
        self_100957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 8), 'self')
        # Setting the type of the member '_linewidth' of a type (line 129)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 129, 8), self_100957, '_linewidth', int_100956)
        
        # Call to set_fill(...): (line 131)
        # Processing the call arguments (line 131)
        # Getting the type of 'fill' (line 131)
        fill_100960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 22), 'fill', False)
        # Processing the call keyword arguments (line 131)
        kwargs_100961 = {}
        # Getting the type of 'self' (line 131)
        self_100958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 8), 'self', False)
        # Obtaining the member 'set_fill' of a type (line 131)
        set_fill_100959 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 131, 8), self_100958, 'set_fill')
        # Calling set_fill(args, kwargs) (line 131)
        set_fill_call_result_100962 = invoke(stypy.reporting.localization.Localization(__file__, 131, 8), set_fill_100959, *[fill_100960], **kwargs_100961)
        
        
        # Call to set_linestyle(...): (line 132)
        # Processing the call arguments (line 132)
        # Getting the type of 'linestyle' (line 132)
        linestyle_100965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 27), 'linestyle', False)
        # Processing the call keyword arguments (line 132)
        kwargs_100966 = {}
        # Getting the type of 'self' (line 132)
        self_100963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 8), 'self', False)
        # Obtaining the member 'set_linestyle' of a type (line 132)
        set_linestyle_100964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 132, 8), self_100963, 'set_linestyle')
        # Calling set_linestyle(args, kwargs) (line 132)
        set_linestyle_call_result_100967 = invoke(stypy.reporting.localization.Localization(__file__, 132, 8), set_linestyle_100964, *[linestyle_100965], **kwargs_100966)
        
        
        # Call to set_linewidth(...): (line 133)
        # Processing the call arguments (line 133)
        # Getting the type of 'linewidth' (line 133)
        linewidth_100970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 27), 'linewidth', False)
        # Processing the call keyword arguments (line 133)
        kwargs_100971 = {}
        # Getting the type of 'self' (line 133)
        self_100968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 8), 'self', False)
        # Obtaining the member 'set_linewidth' of a type (line 133)
        set_linewidth_100969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 133, 8), self_100968, 'set_linewidth')
        # Calling set_linewidth(args, kwargs) (line 133)
        set_linewidth_call_result_100972 = invoke(stypy.reporting.localization.Localization(__file__, 133, 8), set_linewidth_100969, *[linewidth_100970], **kwargs_100971)
        
        
        # Call to set_antialiased(...): (line 134)
        # Processing the call arguments (line 134)
        # Getting the type of 'antialiased' (line 134)
        antialiased_100975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 29), 'antialiased', False)
        # Processing the call keyword arguments (line 134)
        kwargs_100976 = {}
        # Getting the type of 'self' (line 134)
        self_100973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 8), 'self', False)
        # Obtaining the member 'set_antialiased' of a type (line 134)
        set_antialiased_100974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 134, 8), self_100973, 'set_antialiased')
        # Calling set_antialiased(args, kwargs) (line 134)
        set_antialiased_call_result_100977 = invoke(stypy.reporting.localization.Localization(__file__, 134, 8), set_antialiased_100974, *[antialiased_100975], **kwargs_100976)
        
        
        # Call to set_hatch(...): (line 135)
        # Processing the call arguments (line 135)
        # Getting the type of 'hatch' (line 135)
        hatch_100980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 135, 23), 'hatch', False)
        # Processing the call keyword arguments (line 135)
        kwargs_100981 = {}
        # Getting the type of 'self' (line 135)
        self_100978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 135, 8), 'self', False)
        # Obtaining the member 'set_hatch' of a type (line 135)
        set_hatch_100979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 135, 8), self_100978, 'set_hatch')
        # Calling set_hatch(args, kwargs) (line 135)
        set_hatch_call_result_100982 = invoke(stypy.reporting.localization.Localization(__file__, 135, 8), set_hatch_100979, *[hatch_100980], **kwargs_100981)
        
        
        # Call to set_capstyle(...): (line 136)
        # Processing the call arguments (line 136)
        # Getting the type of 'capstyle' (line 136)
        capstyle_100985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 26), 'capstyle', False)
        # Processing the call keyword arguments (line 136)
        kwargs_100986 = {}
        # Getting the type of 'self' (line 136)
        self_100983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 8), 'self', False)
        # Obtaining the member 'set_capstyle' of a type (line 136)
        set_capstyle_100984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 136, 8), self_100983, 'set_capstyle')
        # Calling set_capstyle(args, kwargs) (line 136)
        set_capstyle_call_result_100987 = invoke(stypy.reporting.localization.Localization(__file__, 136, 8), set_capstyle_100984, *[capstyle_100985], **kwargs_100986)
        
        
        # Call to set_joinstyle(...): (line 137)
        # Processing the call arguments (line 137)
        # Getting the type of 'joinstyle' (line 137)
        joinstyle_100990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 27), 'joinstyle', False)
        # Processing the call keyword arguments (line 137)
        kwargs_100991 = {}
        # Getting the type of 'self' (line 137)
        self_100988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 8), 'self', False)
        # Obtaining the member 'set_joinstyle' of a type (line 137)
        set_joinstyle_100989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 137, 8), self_100988, 'set_joinstyle')
        # Calling set_joinstyle(args, kwargs) (line 137)
        set_joinstyle_call_result_100992 = invoke(stypy.reporting.localization.Localization(__file__, 137, 8), set_joinstyle_100989, *[joinstyle_100990], **kwargs_100991)
        
        
        # Assigning a Call to a Attribute (line 138):
        
        # Assigning a Call to a Attribute (line 138):
        
        # Assigning a Call to a Attribute (line 138):
        
        # Call to IdentityTransform(...): (line 138)
        # Processing the call keyword arguments (line 138)
        kwargs_100995 = {}
        # Getting the type of 'transforms' (line 138)
        transforms_100993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 35), 'transforms', False)
        # Obtaining the member 'IdentityTransform' of a type (line 138)
        IdentityTransform_100994 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 138, 35), transforms_100993, 'IdentityTransform')
        # Calling IdentityTransform(args, kwargs) (line 138)
        IdentityTransform_call_result_100996 = invoke(stypy.reporting.localization.Localization(__file__, 138, 35), IdentityTransform_100994, *[], **kwargs_100995)
        
        # Getting the type of 'self' (line 138)
        self_100997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 8), 'self')
        # Setting the type of the member '_combined_transform' of a type (line 138)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 138, 8), self_100997, '_combined_transform', IdentityTransform_call_result_100996)
        
        
        # Call to len(...): (line 140)
        # Processing the call arguments (line 140)
        # Getting the type of 'kwargs' (line 140)
        kwargs_100999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 15), 'kwargs', False)
        # Processing the call keyword arguments (line 140)
        kwargs_101000 = {}
        # Getting the type of 'len' (line 140)
        len_100998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 11), 'len', False)
        # Calling len(args, kwargs) (line 140)
        len_call_result_101001 = invoke(stypy.reporting.localization.Localization(__file__, 140, 11), len_100998, *[kwargs_100999], **kwargs_101000)
        
        # Testing the type of an if condition (line 140)
        if_condition_101002 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 140, 8), len_call_result_101001)
        # Assigning a type to the variable 'if_condition_101002' (line 140)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 140, 8), 'if_condition_101002', if_condition_101002)
        # SSA begins for if statement (line 140)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to update(...): (line 141)
        # Processing the call arguments (line 141)
        # Getting the type of 'kwargs' (line 141)
        kwargs_101005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 141, 24), 'kwargs', False)
        # Processing the call keyword arguments (line 141)
        kwargs_101006 = {}
        # Getting the type of 'self' (line 141)
        self_101003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 141, 12), 'self', False)
        # Obtaining the member 'update' of a type (line 141)
        update_101004 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 141, 12), self_101003, 'update')
        # Calling update(args, kwargs) (line 141)
        update_call_result_101007 = invoke(stypy.reporting.localization.Localization(__file__, 141, 12), update_101004, *[kwargs_101005], **kwargs_101006)
        
        # SSA join for if statement (line 140)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def get_verts(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_verts'
        module_type_store = module_type_store.open_function_context('get_verts', 143, 4, False)
        # Assigning a type to the variable 'self' (line 144)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 144, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.get_verts.__dict__.__setitem__('stypy_localization', localization)
        Patch.get_verts.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.get_verts.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.get_verts.__dict__.__setitem__('stypy_function_name', 'Patch.get_verts')
        Patch.get_verts.__dict__.__setitem__('stypy_param_names_list', [])
        Patch.get_verts.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.get_verts.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.get_verts.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.get_verts.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.get_verts.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.get_verts.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.get_verts', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_verts', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_verts(...)' code ##################

        unicode_101008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 150, (-1)), 'unicode', u'\n        Return a copy of the vertices used in this patch\n\n        If the patch contains Bezier curves, the curves will be\n        interpolated by line segments.  To access the curves as\n        curves, use :meth:`get_path`.\n        ')
        
        # Assigning a Call to a Name (line 151):
        
        # Assigning a Call to a Name (line 151):
        
        # Assigning a Call to a Name (line 151):
        
        # Call to get_transform(...): (line 151)
        # Processing the call keyword arguments (line 151)
        kwargs_101011 = {}
        # Getting the type of 'self' (line 151)
        self_101009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 16), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 151)
        get_transform_101010 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 151, 16), self_101009, 'get_transform')
        # Calling get_transform(args, kwargs) (line 151)
        get_transform_call_result_101012 = invoke(stypy.reporting.localization.Localization(__file__, 151, 16), get_transform_101010, *[], **kwargs_101011)
        
        # Assigning a type to the variable 'trans' (line 151)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 151, 8), 'trans', get_transform_call_result_101012)
        
        # Assigning a Call to a Name (line 152):
        
        # Assigning a Call to a Name (line 152):
        
        # Assigning a Call to a Name (line 152):
        
        # Call to get_path(...): (line 152)
        # Processing the call keyword arguments (line 152)
        kwargs_101015 = {}
        # Getting the type of 'self' (line 152)
        self_101013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 15), 'self', False)
        # Obtaining the member 'get_path' of a type (line 152)
        get_path_101014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 152, 15), self_101013, 'get_path')
        # Calling get_path(args, kwargs) (line 152)
        get_path_call_result_101016 = invoke(stypy.reporting.localization.Localization(__file__, 152, 15), get_path_101014, *[], **kwargs_101015)
        
        # Assigning a type to the variable 'path' (line 152)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 152, 8), 'path', get_path_call_result_101016)
        
        # Assigning a Call to a Name (line 153):
        
        # Assigning a Call to a Name (line 153):
        
        # Assigning a Call to a Name (line 153):
        
        # Call to to_polygons(...): (line 153)
        # Processing the call arguments (line 153)
        # Getting the type of 'trans' (line 153)
        trans_101019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 36), 'trans', False)
        # Processing the call keyword arguments (line 153)
        kwargs_101020 = {}
        # Getting the type of 'path' (line 153)
        path_101017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 19), 'path', False)
        # Obtaining the member 'to_polygons' of a type (line 153)
        to_polygons_101018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 153, 19), path_101017, 'to_polygons')
        # Calling to_polygons(args, kwargs) (line 153)
        to_polygons_call_result_101021 = invoke(stypy.reporting.localization.Localization(__file__, 153, 19), to_polygons_101018, *[trans_101019], **kwargs_101020)
        
        # Assigning a type to the variable 'polygons' (line 153)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 153, 8), 'polygons', to_polygons_call_result_101021)
        
        
        # Call to len(...): (line 154)
        # Processing the call arguments (line 154)
        # Getting the type of 'polygons' (line 154)
        polygons_101023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 15), 'polygons', False)
        # Processing the call keyword arguments (line 154)
        kwargs_101024 = {}
        # Getting the type of 'len' (line 154)
        len_101022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 11), 'len', False)
        # Calling len(args, kwargs) (line 154)
        len_call_result_101025 = invoke(stypy.reporting.localization.Localization(__file__, 154, 11), len_101022, *[polygons_101023], **kwargs_101024)
        
        # Testing the type of an if condition (line 154)
        if_condition_101026 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 154, 8), len_call_result_101025)
        # Assigning a type to the variable 'if_condition_101026' (line 154)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 154, 8), 'if_condition_101026', if_condition_101026)
        # SSA begins for if statement (line 154)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining the type of the subscript
        int_101027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 155, 28), 'int')
        # Getting the type of 'polygons' (line 155)
        polygons_101028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 19), 'polygons')
        # Obtaining the member '__getitem__' of a type (line 155)
        getitem___101029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 155, 19), polygons_101028, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 155)
        subscript_call_result_101030 = invoke(stypy.reporting.localization.Localization(__file__, 155, 19), getitem___101029, int_101027)
        
        # Assigning a type to the variable 'stypy_return_type' (line 155)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 155, 12), 'stypy_return_type', subscript_call_result_101030)
        # SSA join for if statement (line 154)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'list' (line 156)
        list_101031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 156, 15), 'list')
        # Adding type elements to the builtin type 'list' instance (line 156)
        
        # Assigning a type to the variable 'stypy_return_type' (line 156)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 156, 8), 'stypy_return_type', list_101031)
        
        # ################# End of 'get_verts(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_verts' in the type store
        # Getting the type of 'stypy_return_type' (line 143)
        stypy_return_type_101032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101032)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_verts'
        return stypy_return_type_101032


    @norecursion
    def _process_radius(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_process_radius'
        module_type_store = module_type_store.open_function_context('_process_radius', 158, 4, False)
        # Assigning a type to the variable 'self' (line 159)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 159, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch._process_radius.__dict__.__setitem__('stypy_localization', localization)
        Patch._process_radius.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch._process_radius.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch._process_radius.__dict__.__setitem__('stypy_function_name', 'Patch._process_radius')
        Patch._process_radius.__dict__.__setitem__('stypy_param_names_list', ['radius'])
        Patch._process_radius.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch._process_radius.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch._process_radius.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch._process_radius.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch._process_radius.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch._process_radius.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch._process_radius', ['radius'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_process_radius', localization, ['radius'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_process_radius(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 159)
        # Getting the type of 'radius' (line 159)
        radius_101033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 8), 'radius')
        # Getting the type of 'None' (line 159)
        None_101034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 25), 'None')
        
        (may_be_101035, more_types_in_union_101036) = may_not_be_none(radius_101033, None_101034)

        if may_be_101035:

            if more_types_in_union_101036:
                # Runtime conditional SSA (line 159)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Getting the type of 'radius' (line 160)
            radius_101037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 160, 19), 'radius')
            # Assigning a type to the variable 'stypy_return_type' (line 160)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 160, 12), 'stypy_return_type', radius_101037)

            if more_types_in_union_101036:
                # SSA join for if statement (line 159)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Call to is_numlike(...): (line 161)
        # Processing the call arguments (line 161)
        # Getting the type of 'self' (line 161)
        self_101040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 28), 'self', False)
        # Obtaining the member '_picker' of a type (line 161)
        _picker_101041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 161, 28), self_101040, '_picker')
        # Processing the call keyword arguments (line 161)
        kwargs_101042 = {}
        # Getting the type of 'cbook' (line 161)
        cbook_101038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 11), 'cbook', False)
        # Obtaining the member 'is_numlike' of a type (line 161)
        is_numlike_101039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 161, 11), cbook_101038, 'is_numlike')
        # Calling is_numlike(args, kwargs) (line 161)
        is_numlike_call_result_101043 = invoke(stypy.reporting.localization.Localization(__file__, 161, 11), is_numlike_101039, *[_picker_101041], **kwargs_101042)
        
        # Testing the type of an if condition (line 161)
        if_condition_101044 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 161, 8), is_numlike_call_result_101043)
        # Assigning a type to the variable 'if_condition_101044' (line 161)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 161, 8), 'if_condition_101044', if_condition_101044)
        # SSA begins for if statement (line 161)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 162):
        
        # Assigning a Attribute to a Name (line 162):
        
        # Assigning a Attribute to a Name (line 162):
        # Getting the type of 'self' (line 162)
        self_101045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 22), 'self')
        # Obtaining the member '_picker' of a type (line 162)
        _picker_101046 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 162, 22), self_101045, '_picker')
        # Assigning a type to the variable '_radius' (line 162)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 162, 12), '_radius', _picker_101046)
        # SSA branch for the else part of an if statement (line 161)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Obtaining the type of the subscript
        int_101047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 164, 36), 'int')
        
        # Call to get_edgecolor(...): (line 164)
        # Processing the call keyword arguments (line 164)
        kwargs_101050 = {}
        # Getting the type of 'self' (line 164)
        self_101048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 15), 'self', False)
        # Obtaining the member 'get_edgecolor' of a type (line 164)
        get_edgecolor_101049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 164, 15), self_101048, 'get_edgecolor')
        # Calling get_edgecolor(args, kwargs) (line 164)
        get_edgecolor_call_result_101051 = invoke(stypy.reporting.localization.Localization(__file__, 164, 15), get_edgecolor_101049, *[], **kwargs_101050)
        
        # Obtaining the member '__getitem__' of a type (line 164)
        getitem___101052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 164, 15), get_edgecolor_call_result_101051, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 164)
        subscript_call_result_101053 = invoke(stypy.reporting.localization.Localization(__file__, 164, 15), getitem___101052, int_101047)
        
        int_101054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 164, 42), 'int')
        # Applying the binary operator '==' (line 164)
        result_eq_101055 = python_operator(stypy.reporting.localization.Localization(__file__, 164, 15), '==', subscript_call_result_101053, int_101054)
        
        # Testing the type of an if condition (line 164)
        if_condition_101056 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 164, 12), result_eq_101055)
        # Assigning a type to the variable 'if_condition_101056' (line 164)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 164, 12), 'if_condition_101056', if_condition_101056)
        # SSA begins for if statement (line 164)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 165):
        
        # Assigning a Num to a Name (line 165):
        
        # Assigning a Num to a Name (line 165):
        int_101057 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 165, 26), 'int')
        # Assigning a type to the variable '_radius' (line 165)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 165, 16), '_radius', int_101057)
        # SSA branch for the else part of an if statement (line 164)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 167):
        
        # Assigning a Call to a Name (line 167):
        
        # Assigning a Call to a Name (line 167):
        
        # Call to get_linewidth(...): (line 167)
        # Processing the call keyword arguments (line 167)
        kwargs_101060 = {}
        # Getting the type of 'self' (line 167)
        self_101058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 167, 26), 'self', False)
        # Obtaining the member 'get_linewidth' of a type (line 167)
        get_linewidth_101059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 167, 26), self_101058, 'get_linewidth')
        # Calling get_linewidth(args, kwargs) (line 167)
        get_linewidth_call_result_101061 = invoke(stypy.reporting.localization.Localization(__file__, 167, 26), get_linewidth_101059, *[], **kwargs_101060)
        
        # Assigning a type to the variable '_radius' (line 167)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 167, 16), '_radius', get_linewidth_call_result_101061)
        # SSA join for if statement (line 164)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 161)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of '_radius' (line 168)
        _radius_101062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 15), '_radius')
        # Assigning a type to the variable 'stypy_return_type' (line 168)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 168, 8), 'stypy_return_type', _radius_101062)
        
        # ################# End of '_process_radius(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_process_radius' in the type store
        # Getting the type of 'stypy_return_type' (line 158)
        stypy_return_type_101063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101063)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_process_radius'
        return stypy_return_type_101063


    @norecursion
    def contains(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 170)
        None_101064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 42), 'None')
        defaults = [None_101064]
        # Create a new context for function 'contains'
        module_type_store = module_type_store.open_function_context('contains', 170, 4, False)
        # Assigning a type to the variable 'self' (line 171)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 171, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.contains.__dict__.__setitem__('stypy_localization', localization)
        Patch.contains.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.contains.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.contains.__dict__.__setitem__('stypy_function_name', 'Patch.contains')
        Patch.contains.__dict__.__setitem__('stypy_param_names_list', ['mouseevent', 'radius'])
        Patch.contains.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.contains.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.contains.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.contains.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.contains.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.contains.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.contains', ['mouseevent', 'radius'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'contains', localization, ['mouseevent', 'radius'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'contains(...)' code ##################

        unicode_101065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 174, (-1)), 'unicode', u'Test whether the mouse event occurred in the patch.\n\n        Returns T/F, {}\n        ')
        
        
        # Call to callable(...): (line 175)
        # Processing the call arguments (line 175)
        # Getting the type of 'self' (line 175)
        self_101067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 20), 'self', False)
        # Obtaining the member '_contains' of a type (line 175)
        _contains_101068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 175, 20), self_101067, '_contains')
        # Processing the call keyword arguments (line 175)
        kwargs_101069 = {}
        # Getting the type of 'callable' (line 175)
        callable_101066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 11), 'callable', False)
        # Calling callable(args, kwargs) (line 175)
        callable_call_result_101070 = invoke(stypy.reporting.localization.Localization(__file__, 175, 11), callable_101066, *[_contains_101068], **kwargs_101069)
        
        # Testing the type of an if condition (line 175)
        if_condition_101071 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 175, 8), callable_call_result_101070)
        # Assigning a type to the variable 'if_condition_101071' (line 175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 175, 8), 'if_condition_101071', if_condition_101071)
        # SSA begins for if statement (line 175)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _contains(...): (line 176)
        # Processing the call arguments (line 176)
        # Getting the type of 'self' (line 176)
        self_101074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 34), 'self', False)
        # Getting the type of 'mouseevent' (line 176)
        mouseevent_101075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 40), 'mouseevent', False)
        # Processing the call keyword arguments (line 176)
        kwargs_101076 = {}
        # Getting the type of 'self' (line 176)
        self_101072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 19), 'self', False)
        # Obtaining the member '_contains' of a type (line 176)
        _contains_101073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 176, 19), self_101072, '_contains')
        # Calling _contains(args, kwargs) (line 176)
        _contains_call_result_101077 = invoke(stypy.reporting.localization.Localization(__file__, 176, 19), _contains_101073, *[self_101074, mouseevent_101075], **kwargs_101076)
        
        # Assigning a type to the variable 'stypy_return_type' (line 176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 176, 12), 'stypy_return_type', _contains_call_result_101077)
        # SSA join for if statement (line 175)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 177):
        
        # Assigning a Call to a Name (line 177):
        
        # Assigning a Call to a Name (line 177):
        
        # Call to _process_radius(...): (line 177)
        # Processing the call arguments (line 177)
        # Getting the type of 'radius' (line 177)
        radius_101080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 38), 'radius', False)
        # Processing the call keyword arguments (line 177)
        kwargs_101081 = {}
        # Getting the type of 'self' (line 177)
        self_101078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 17), 'self', False)
        # Obtaining the member '_process_radius' of a type (line 177)
        _process_radius_101079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 177, 17), self_101078, '_process_radius')
        # Calling _process_radius(args, kwargs) (line 177)
        _process_radius_call_result_101082 = invoke(stypy.reporting.localization.Localization(__file__, 177, 17), _process_radius_101079, *[radius_101080], **kwargs_101081)
        
        # Assigning a type to the variable 'radius' (line 177)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 177, 8), 'radius', _process_radius_call_result_101082)
        
        # Assigning a Call to a Name (line 178):
        
        # Assigning a Call to a Name (line 178):
        
        # Assigning a Call to a Name (line 178):
        
        # Call to contains_point(...): (line 178)
        # Processing the call arguments (line 178)
        
        # Obtaining an instance of the builtin type 'tuple' (line 179)
        tuple_101088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 179, 13), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 179)
        # Adding element type (line 179)
        # Getting the type of 'mouseevent' (line 179)
        mouseevent_101089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 179, 13), 'mouseevent', False)
        # Obtaining the member 'x' of a type (line 179)
        x_101090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 179, 13), mouseevent_101089, 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 179, 13), tuple_101088, x_101090)
        # Adding element type (line 179)
        # Getting the type of 'mouseevent' (line 179)
        mouseevent_101091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 179, 27), 'mouseevent', False)
        # Obtaining the member 'y' of a type (line 179)
        y_101092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 179, 27), mouseevent_101091, 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 179, 13), tuple_101088, y_101092)
        
        
        # Call to get_transform(...): (line 179)
        # Processing the call keyword arguments (line 179)
        kwargs_101095 = {}
        # Getting the type of 'self' (line 179)
        self_101093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 179, 42), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 179)
        get_transform_101094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 179, 42), self_101093, 'get_transform')
        # Calling get_transform(args, kwargs) (line 179)
        get_transform_call_result_101096 = invoke(stypy.reporting.localization.Localization(__file__, 179, 42), get_transform_101094, *[], **kwargs_101095)
        
        # Getting the type of 'radius' (line 179)
        radius_101097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 179, 64), 'radius', False)
        # Processing the call keyword arguments (line 178)
        kwargs_101098 = {}
        
        # Call to get_path(...): (line 178)
        # Processing the call keyword arguments (line 178)
        kwargs_101085 = {}
        # Getting the type of 'self' (line 178)
        self_101083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 17), 'self', False)
        # Obtaining the member 'get_path' of a type (line 178)
        get_path_101084 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 178, 17), self_101083, 'get_path')
        # Calling get_path(args, kwargs) (line 178)
        get_path_call_result_101086 = invoke(stypy.reporting.localization.Localization(__file__, 178, 17), get_path_101084, *[], **kwargs_101085)
        
        # Obtaining the member 'contains_point' of a type (line 178)
        contains_point_101087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 178, 17), get_path_call_result_101086, 'contains_point')
        # Calling contains_point(args, kwargs) (line 178)
        contains_point_call_result_101099 = invoke(stypy.reporting.localization.Localization(__file__, 178, 17), contains_point_101087, *[tuple_101088, get_transform_call_result_101096, radius_101097], **kwargs_101098)
        
        # Assigning a type to the variable 'inside' (line 178)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 178, 8), 'inside', contains_point_call_result_101099)
        
        # Obtaining an instance of the builtin type 'tuple' (line 180)
        tuple_101100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 180, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 180)
        # Adding element type (line 180)
        # Getting the type of 'inside' (line 180)
        inside_101101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 180, 15), 'inside')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 180, 15), tuple_101100, inside_101101)
        # Adding element type (line 180)
        
        # Obtaining an instance of the builtin type 'dict' (line 180)
        dict_101102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 180, 23), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 180)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 180, 15), tuple_101100, dict_101102)
        
        # Assigning a type to the variable 'stypy_return_type' (line 180)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 180, 8), 'stypy_return_type', tuple_101100)
        
        # ################# End of 'contains(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'contains' in the type store
        # Getting the type of 'stypy_return_type' (line 170)
        stypy_return_type_101103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101103)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'contains'
        return stypy_return_type_101103


    @norecursion
    def contains_point(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 182)
        None_101104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 43), 'None')
        defaults = [None_101104]
        # Create a new context for function 'contains_point'
        module_type_store = module_type_store.open_function_context('contains_point', 182, 4, False)
        # Assigning a type to the variable 'self' (line 183)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 183, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.contains_point.__dict__.__setitem__('stypy_localization', localization)
        Patch.contains_point.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.contains_point.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.contains_point.__dict__.__setitem__('stypy_function_name', 'Patch.contains_point')
        Patch.contains_point.__dict__.__setitem__('stypy_param_names_list', ['point', 'radius'])
        Patch.contains_point.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.contains_point.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.contains_point.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.contains_point.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.contains_point.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.contains_point.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.contains_point', ['point', 'radius'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'contains_point', localization, ['point', 'radius'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'contains_point(...)' code ##################

        unicode_101105 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 186, (-1)), 'unicode', u'\n        Returns *True* if the given point is inside the path\n        (transformed with its transform attribute).\n        ')
        
        # Assigning a Call to a Name (line 187):
        
        # Assigning a Call to a Name (line 187):
        
        # Assigning a Call to a Name (line 187):
        
        # Call to _process_radius(...): (line 187)
        # Processing the call arguments (line 187)
        # Getting the type of 'radius' (line 187)
        radius_101108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 38), 'radius', False)
        # Processing the call keyword arguments (line 187)
        kwargs_101109 = {}
        # Getting the type of 'self' (line 187)
        self_101106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 17), 'self', False)
        # Obtaining the member '_process_radius' of a type (line 187)
        _process_radius_101107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 187, 17), self_101106, '_process_radius')
        # Calling _process_radius(args, kwargs) (line 187)
        _process_radius_call_result_101110 = invoke(stypy.reporting.localization.Localization(__file__, 187, 17), _process_radius_101107, *[radius_101108], **kwargs_101109)
        
        # Assigning a type to the variable 'radius' (line 187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 187, 8), 'radius', _process_radius_call_result_101110)
        
        # Call to contains_point(...): (line 188)
        # Processing the call arguments (line 188)
        # Getting the type of 'point' (line 188)
        point_101116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 46), 'point', False)
        
        # Call to get_transform(...): (line 189)
        # Processing the call keyword arguments (line 189)
        kwargs_101119 = {}
        # Getting the type of 'self' (line 189)
        self_101117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 189, 46), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 189)
        get_transform_101118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 189, 46), self_101117, 'get_transform')
        # Calling get_transform(args, kwargs) (line 189)
        get_transform_call_result_101120 = invoke(stypy.reporting.localization.Localization(__file__, 189, 46), get_transform_101118, *[], **kwargs_101119)
        
        # Getting the type of 'radius' (line 190)
        radius_101121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 46), 'radius', False)
        # Processing the call keyword arguments (line 188)
        kwargs_101122 = {}
        
        # Call to get_path(...): (line 188)
        # Processing the call keyword arguments (line 188)
        kwargs_101113 = {}
        # Getting the type of 'self' (line 188)
        self_101111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 15), 'self', False)
        # Obtaining the member 'get_path' of a type (line 188)
        get_path_101112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 188, 15), self_101111, 'get_path')
        # Calling get_path(args, kwargs) (line 188)
        get_path_call_result_101114 = invoke(stypy.reporting.localization.Localization(__file__, 188, 15), get_path_101112, *[], **kwargs_101113)
        
        # Obtaining the member 'contains_point' of a type (line 188)
        contains_point_101115 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 188, 15), get_path_call_result_101114, 'contains_point')
        # Calling contains_point(args, kwargs) (line 188)
        contains_point_call_result_101123 = invoke(stypy.reporting.localization.Localization(__file__, 188, 15), contains_point_101115, *[point_101116, get_transform_call_result_101120, radius_101121], **kwargs_101122)
        
        # Assigning a type to the variable 'stypy_return_type' (line 188)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 188, 8), 'stypy_return_type', contains_point_call_result_101123)
        
        # ################# End of 'contains_point(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'contains_point' in the type store
        # Getting the type of 'stypy_return_type' (line 182)
        stypy_return_type_101124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101124)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'contains_point'
        return stypy_return_type_101124


    @norecursion
    def update_from(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'update_from'
        module_type_store = module_type_store.open_function_context('update_from', 192, 4, False)
        # Assigning a type to the variable 'self' (line 193)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 193, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.update_from.__dict__.__setitem__('stypy_localization', localization)
        Patch.update_from.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.update_from.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.update_from.__dict__.__setitem__('stypy_function_name', 'Patch.update_from')
        Patch.update_from.__dict__.__setitem__('stypy_param_names_list', ['other'])
        Patch.update_from.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.update_from.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.update_from.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.update_from.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.update_from.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.update_from.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.update_from', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update_from', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update_from(...)' code ##################

        unicode_101125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 195, (-1)), 'unicode', u'\n        Updates this :class:`Patch` from the properties of *other*.\n        ')
        
        # Call to update_from(...): (line 196)
        # Processing the call arguments (line 196)
        # Getting the type of 'self' (line 196)
        self_101129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 34), 'self', False)
        # Getting the type of 'other' (line 196)
        other_101130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 40), 'other', False)
        # Processing the call keyword arguments (line 196)
        kwargs_101131 = {}
        # Getting the type of 'artist' (line 196)
        artist_101126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 8), 'artist', False)
        # Obtaining the member 'Artist' of a type (line 196)
        Artist_101127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 196, 8), artist_101126, 'Artist')
        # Obtaining the member 'update_from' of a type (line 196)
        update_from_101128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 196, 8), Artist_101127, 'update_from')
        # Calling update_from(args, kwargs) (line 196)
        update_from_call_result_101132 = invoke(stypy.reporting.localization.Localization(__file__, 196, 8), update_from_101128, *[self_101129, other_101130], **kwargs_101131)
        
        
        # Assigning a Attribute to a Attribute (line 199):
        
        # Assigning a Attribute to a Attribute (line 199):
        
        # Assigning a Attribute to a Attribute (line 199):
        # Getting the type of 'other' (line 199)
        other_101133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 199, 26), 'other')
        # Obtaining the member '_edgecolor' of a type (line 199)
        _edgecolor_101134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 199, 26), other_101133, '_edgecolor')
        # Getting the type of 'self' (line 199)
        self_101135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 199, 8), 'self')
        # Setting the type of the member '_edgecolor' of a type (line 199)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 199, 8), self_101135, '_edgecolor', _edgecolor_101134)
        
        # Assigning a Attribute to a Attribute (line 200):
        
        # Assigning a Attribute to a Attribute (line 200):
        
        # Assigning a Attribute to a Attribute (line 200):
        # Getting the type of 'other' (line 200)
        other_101136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 26), 'other')
        # Obtaining the member '_facecolor' of a type (line 200)
        _facecolor_101137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 200, 26), other_101136, '_facecolor')
        # Getting the type of 'self' (line 200)
        self_101138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 8), 'self')
        # Setting the type of the member '_facecolor' of a type (line 200)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 200, 8), self_101138, '_facecolor', _facecolor_101137)
        
        # Assigning a Attribute to a Attribute (line 201):
        
        # Assigning a Attribute to a Attribute (line 201):
        
        # Assigning a Attribute to a Attribute (line 201):
        # Getting the type of 'other' (line 201)
        other_101139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 21), 'other')
        # Obtaining the member '_fill' of a type (line 201)
        _fill_101140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 201, 21), other_101139, '_fill')
        # Getting the type of 'self' (line 201)
        self_101141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 8), 'self')
        # Setting the type of the member '_fill' of a type (line 201)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 201, 8), self_101141, '_fill', _fill_101140)
        
        # Assigning a Attribute to a Attribute (line 202):
        
        # Assigning a Attribute to a Attribute (line 202):
        
        # Assigning a Attribute to a Attribute (line 202):
        # Getting the type of 'other' (line 202)
        other_101142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 22), 'other')
        # Obtaining the member '_hatch' of a type (line 202)
        _hatch_101143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 202, 22), other_101142, '_hatch')
        # Getting the type of 'self' (line 202)
        self_101144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 8), 'self')
        # Setting the type of the member '_hatch' of a type (line 202)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 202, 8), self_101144, '_hatch', _hatch_101143)
        
        # Assigning a Attribute to a Attribute (line 203):
        
        # Assigning a Attribute to a Attribute (line 203):
        
        # Assigning a Attribute to a Attribute (line 203):
        # Getting the type of 'other' (line 203)
        other_101145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 28), 'other')
        # Obtaining the member '_hatch_color' of a type (line 203)
        _hatch_color_101146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 203, 28), other_101145, '_hatch_color')
        # Getting the type of 'self' (line 203)
        self_101147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 8), 'self')
        # Setting the type of the member '_hatch_color' of a type (line 203)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 203, 8), self_101147, '_hatch_color', _hatch_color_101146)
        
        # Assigning a Attribute to a Attribute (line 205):
        
        # Assigning a Attribute to a Attribute (line 205):
        
        # Assigning a Attribute to a Attribute (line 205):
        # Getting the type of 'other' (line 205)
        other_101148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 26), 'other')
        # Obtaining the member '_us_dashes' of a type (line 205)
        _us_dashes_101149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 205, 26), other_101148, '_us_dashes')
        # Getting the type of 'self' (line 205)
        self_101150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 8), 'self')
        # Setting the type of the member '_us_dashes' of a type (line 205)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 205, 8), self_101150, '_us_dashes', _us_dashes_101149)
        
        # Call to set_linewidth(...): (line 206)
        # Processing the call arguments (line 206)
        # Getting the type of 'other' (line 206)
        other_101153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 27), 'other', False)
        # Obtaining the member '_linewidth' of a type (line 206)
        _linewidth_101154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 206, 27), other_101153, '_linewidth')
        # Processing the call keyword arguments (line 206)
        kwargs_101155 = {}
        # Getting the type of 'self' (line 206)
        self_101151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 8), 'self', False)
        # Obtaining the member 'set_linewidth' of a type (line 206)
        set_linewidth_101152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 206, 8), self_101151, 'set_linewidth')
        # Calling set_linewidth(args, kwargs) (line 206)
        set_linewidth_call_result_101156 = invoke(stypy.reporting.localization.Localization(__file__, 206, 8), set_linewidth_101152, *[_linewidth_101154], **kwargs_101155)
        
        
        # Call to set_transform(...): (line 207)
        # Processing the call arguments (line 207)
        
        # Call to get_data_transform(...): (line 207)
        # Processing the call keyword arguments (line 207)
        kwargs_101161 = {}
        # Getting the type of 'other' (line 207)
        other_101159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 27), 'other', False)
        # Obtaining the member 'get_data_transform' of a type (line 207)
        get_data_transform_101160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 207, 27), other_101159, 'get_data_transform')
        # Calling get_data_transform(args, kwargs) (line 207)
        get_data_transform_call_result_101162 = invoke(stypy.reporting.localization.Localization(__file__, 207, 27), get_data_transform_101160, *[], **kwargs_101161)
        
        # Processing the call keyword arguments (line 207)
        kwargs_101163 = {}
        # Getting the type of 'self' (line 207)
        self_101157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 8), 'self', False)
        # Obtaining the member 'set_transform' of a type (line 207)
        set_transform_101158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 207, 8), self_101157, 'set_transform')
        # Calling set_transform(args, kwargs) (line 207)
        set_transform_call_result_101164 = invoke(stypy.reporting.localization.Localization(__file__, 207, 8), set_transform_101158, *[get_data_transform_call_result_101162], **kwargs_101163)
        
        
        # ################# End of 'update_from(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update_from' in the type store
        # Getting the type of 'stypy_return_type' (line 192)
        stypy_return_type_101165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101165)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update_from'
        return stypy_return_type_101165


    @norecursion
    def get_extents(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_extents'
        module_type_store = module_type_store.open_function_context('get_extents', 209, 4, False)
        # Assigning a type to the variable 'self' (line 210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 210, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.get_extents.__dict__.__setitem__('stypy_localization', localization)
        Patch.get_extents.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.get_extents.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.get_extents.__dict__.__setitem__('stypy_function_name', 'Patch.get_extents')
        Patch.get_extents.__dict__.__setitem__('stypy_param_names_list', [])
        Patch.get_extents.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.get_extents.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.get_extents.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.get_extents.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.get_extents.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.get_extents.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.get_extents', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_extents', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_extents(...)' code ##################

        unicode_101166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 213, (-1)), 'unicode', u'\n        Return a :class:`~matplotlib.transforms.Bbox` object defining\n        the axis-aligned extents of the :class:`Patch`.\n        ')
        
        # Call to get_extents(...): (line 214)
        # Processing the call arguments (line 214)
        
        # Call to get_transform(...): (line 214)
        # Processing the call keyword arguments (line 214)
        kwargs_101174 = {}
        # Getting the type of 'self' (line 214)
        self_101172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 43), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 214)
        get_transform_101173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 214, 43), self_101172, 'get_transform')
        # Calling get_transform(args, kwargs) (line 214)
        get_transform_call_result_101175 = invoke(stypy.reporting.localization.Localization(__file__, 214, 43), get_transform_101173, *[], **kwargs_101174)
        
        # Processing the call keyword arguments (line 214)
        kwargs_101176 = {}
        
        # Call to get_path(...): (line 214)
        # Processing the call keyword arguments (line 214)
        kwargs_101169 = {}
        # Getting the type of 'self' (line 214)
        self_101167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 15), 'self', False)
        # Obtaining the member 'get_path' of a type (line 214)
        get_path_101168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 214, 15), self_101167, 'get_path')
        # Calling get_path(args, kwargs) (line 214)
        get_path_call_result_101170 = invoke(stypy.reporting.localization.Localization(__file__, 214, 15), get_path_101168, *[], **kwargs_101169)
        
        # Obtaining the member 'get_extents' of a type (line 214)
        get_extents_101171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 214, 15), get_path_call_result_101170, 'get_extents')
        # Calling get_extents(args, kwargs) (line 214)
        get_extents_call_result_101177 = invoke(stypy.reporting.localization.Localization(__file__, 214, 15), get_extents_101171, *[get_transform_call_result_101175], **kwargs_101176)
        
        # Assigning a type to the variable 'stypy_return_type' (line 214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 214, 8), 'stypy_return_type', get_extents_call_result_101177)
        
        # ################# End of 'get_extents(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_extents' in the type store
        # Getting the type of 'stypy_return_type' (line 209)
        stypy_return_type_101178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101178)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_extents'
        return stypy_return_type_101178


    @norecursion
    def get_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_transform'
        module_type_store = module_type_store.open_function_context('get_transform', 216, 4, False)
        # Assigning a type to the variable 'self' (line 217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 217, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.get_transform.__dict__.__setitem__('stypy_localization', localization)
        Patch.get_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.get_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.get_transform.__dict__.__setitem__('stypy_function_name', 'Patch.get_transform')
        Patch.get_transform.__dict__.__setitem__('stypy_param_names_list', [])
        Patch.get_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.get_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.get_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.get_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.get_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.get_transform.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.get_transform', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_transform', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_transform(...)' code ##################

        unicode_101179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 220, (-1)), 'unicode', u'\n        Return the :class:`~matplotlib.transforms.Transform` applied\n        to the :class:`Patch`.\n        ')
        
        # Call to get_patch_transform(...): (line 221)
        # Processing the call keyword arguments (line 221)
        kwargs_101182 = {}
        # Getting the type of 'self' (line 221)
        self_101180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 15), 'self', False)
        # Obtaining the member 'get_patch_transform' of a type (line 221)
        get_patch_transform_101181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 15), self_101180, 'get_patch_transform')
        # Calling get_patch_transform(args, kwargs) (line 221)
        get_patch_transform_call_result_101183 = invoke(stypy.reporting.localization.Localization(__file__, 221, 15), get_patch_transform_101181, *[], **kwargs_101182)
        
        
        # Call to get_transform(...): (line 221)
        # Processing the call arguments (line 221)
        # Getting the type of 'self' (line 221)
        self_101187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 72), 'self', False)
        # Processing the call keyword arguments (line 221)
        kwargs_101188 = {}
        # Getting the type of 'artist' (line 221)
        artist_101184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 44), 'artist', False)
        # Obtaining the member 'Artist' of a type (line 221)
        Artist_101185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 44), artist_101184, 'Artist')
        # Obtaining the member 'get_transform' of a type (line 221)
        get_transform_101186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 44), Artist_101185, 'get_transform')
        # Calling get_transform(args, kwargs) (line 221)
        get_transform_call_result_101189 = invoke(stypy.reporting.localization.Localization(__file__, 221, 44), get_transform_101186, *[self_101187], **kwargs_101188)
        
        # Applying the binary operator '+' (line 221)
        result_add_101190 = python_operator(stypy.reporting.localization.Localization(__file__, 221, 15), '+', get_patch_transform_call_result_101183, get_transform_call_result_101189)
        
        # Assigning a type to the variable 'stypy_return_type' (line 221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 221, 8), 'stypy_return_type', result_add_101190)
        
        # ################# End of 'get_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 216)
        stypy_return_type_101191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101191)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_transform'
        return stypy_return_type_101191


    @norecursion
    def get_data_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_data_transform'
        module_type_store = module_type_store.open_function_context('get_data_transform', 223, 4, False)
        # Assigning a type to the variable 'self' (line 224)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 224, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.get_data_transform.__dict__.__setitem__('stypy_localization', localization)
        Patch.get_data_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.get_data_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.get_data_transform.__dict__.__setitem__('stypy_function_name', 'Patch.get_data_transform')
        Patch.get_data_transform.__dict__.__setitem__('stypy_param_names_list', [])
        Patch.get_data_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.get_data_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.get_data_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.get_data_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.get_data_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.get_data_transform.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.get_data_transform', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_data_transform', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_data_transform(...)' code ##################

        unicode_101192 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 227, (-1)), 'unicode', u'\n        Return the :class:`~matplotlib.transforms.Transform` instance which\n        maps data coordinates to physical coordinates.\n        ')
        
        # Call to get_transform(...): (line 228)
        # Processing the call arguments (line 228)
        # Getting the type of 'self' (line 228)
        self_101196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 43), 'self', False)
        # Processing the call keyword arguments (line 228)
        kwargs_101197 = {}
        # Getting the type of 'artist' (line 228)
        artist_101193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 15), 'artist', False)
        # Obtaining the member 'Artist' of a type (line 228)
        Artist_101194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 228, 15), artist_101193, 'Artist')
        # Obtaining the member 'get_transform' of a type (line 228)
        get_transform_101195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 228, 15), Artist_101194, 'get_transform')
        # Calling get_transform(args, kwargs) (line 228)
        get_transform_call_result_101198 = invoke(stypy.reporting.localization.Localization(__file__, 228, 15), get_transform_101195, *[self_101196], **kwargs_101197)
        
        # Assigning a type to the variable 'stypy_return_type' (line 228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 228, 8), 'stypy_return_type', get_transform_call_result_101198)
        
        # ################# End of 'get_data_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_data_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 223)
        stypy_return_type_101199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101199)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_data_transform'
        return stypy_return_type_101199


    @norecursion
    def get_patch_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_patch_transform'
        module_type_store = module_type_store.open_function_context('get_patch_transform', 230, 4, False)
        # Assigning a type to the variable 'self' (line 231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.get_patch_transform.__dict__.__setitem__('stypy_localization', localization)
        Patch.get_patch_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.get_patch_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.get_patch_transform.__dict__.__setitem__('stypy_function_name', 'Patch.get_patch_transform')
        Patch.get_patch_transform.__dict__.__setitem__('stypy_param_names_list', [])
        Patch.get_patch_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.get_patch_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.get_patch_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.get_patch_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.get_patch_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.get_patch_transform.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.get_patch_transform', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_patch_transform', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_patch_transform(...)' code ##################

        unicode_101200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 238, (-1)), 'unicode', u'\n        Return the :class:`~matplotlib.transforms.Transform` instance which\n        takes patch coordinates to data coordinates.\n\n        For example, one may define a patch of a circle which represents a\n        radius of 5 by providing coordinates for a unit circle, and a\n        transform which scales the coordinates (the patch coordinate) by 5.\n        ')
        
        # Call to IdentityTransform(...): (line 239)
        # Processing the call keyword arguments (line 239)
        kwargs_101203 = {}
        # Getting the type of 'transforms' (line 239)
        transforms_101201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 239, 15), 'transforms', False)
        # Obtaining the member 'IdentityTransform' of a type (line 239)
        IdentityTransform_101202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 239, 15), transforms_101201, 'IdentityTransform')
        # Calling IdentityTransform(args, kwargs) (line 239)
        IdentityTransform_call_result_101204 = invoke(stypy.reporting.localization.Localization(__file__, 239, 15), IdentityTransform_101202, *[], **kwargs_101203)
        
        # Assigning a type to the variable 'stypy_return_type' (line 239)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 239, 8), 'stypy_return_type', IdentityTransform_call_result_101204)
        
        # ################# End of 'get_patch_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_patch_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 230)
        stypy_return_type_101205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101205)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_patch_transform'
        return stypy_return_type_101205


    @norecursion
    def get_antialiased(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_antialiased'
        module_type_store = module_type_store.open_function_context('get_antialiased', 241, 4, False)
        # Assigning a type to the variable 'self' (line 242)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 242, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.get_antialiased.__dict__.__setitem__('stypy_localization', localization)
        Patch.get_antialiased.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.get_antialiased.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.get_antialiased.__dict__.__setitem__('stypy_function_name', 'Patch.get_antialiased')
        Patch.get_antialiased.__dict__.__setitem__('stypy_param_names_list', [])
        Patch.get_antialiased.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.get_antialiased.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.get_antialiased.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.get_antialiased.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.get_antialiased.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.get_antialiased.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.get_antialiased', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_antialiased', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_antialiased(...)' code ##################

        unicode_101206 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 244, (-1)), 'unicode', u'\n        Returns True if the :class:`Patch` is to be drawn with antialiasing.\n        ')
        # Getting the type of 'self' (line 245)
        self_101207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 15), 'self')
        # Obtaining the member '_antialiased' of a type (line 245)
        _antialiased_101208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 245, 15), self_101207, '_antialiased')
        # Assigning a type to the variable 'stypy_return_type' (line 245)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 245, 8), 'stypy_return_type', _antialiased_101208)
        
        # ################# End of 'get_antialiased(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_antialiased' in the type store
        # Getting the type of 'stypy_return_type' (line 241)
        stypy_return_type_101209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101209)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_antialiased'
        return stypy_return_type_101209

    
    # Assigning a Name to a Name (line 246):
    
    # Assigning a Name to a Name (line 246):

    @norecursion
    def get_edgecolor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_edgecolor'
        module_type_store = module_type_store.open_function_context('get_edgecolor', 248, 4, False)
        # Assigning a type to the variable 'self' (line 249)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 249, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.get_edgecolor.__dict__.__setitem__('stypy_localization', localization)
        Patch.get_edgecolor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.get_edgecolor.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.get_edgecolor.__dict__.__setitem__('stypy_function_name', 'Patch.get_edgecolor')
        Patch.get_edgecolor.__dict__.__setitem__('stypy_param_names_list', [])
        Patch.get_edgecolor.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.get_edgecolor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.get_edgecolor.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.get_edgecolor.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.get_edgecolor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.get_edgecolor.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.get_edgecolor', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_edgecolor', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_edgecolor(...)' code ##################

        unicode_101210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 251, (-1)), 'unicode', u'\n        Return the edge color of the :class:`Patch`.\n        ')
        # Getting the type of 'self' (line 252)
        self_101211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 15), 'self')
        # Obtaining the member '_edgecolor' of a type (line 252)
        _edgecolor_101212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 252, 15), self_101211, '_edgecolor')
        # Assigning a type to the variable 'stypy_return_type' (line 252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 252, 8), 'stypy_return_type', _edgecolor_101212)
        
        # ################# End of 'get_edgecolor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_edgecolor' in the type store
        # Getting the type of 'stypy_return_type' (line 248)
        stypy_return_type_101213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101213)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_edgecolor'
        return stypy_return_type_101213

    
    # Assigning a Name to a Name (line 253):
    
    # Assigning a Name to a Name (line 253):

    @norecursion
    def get_facecolor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_facecolor'
        module_type_store = module_type_store.open_function_context('get_facecolor', 255, 4, False)
        # Assigning a type to the variable 'self' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.get_facecolor.__dict__.__setitem__('stypy_localization', localization)
        Patch.get_facecolor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.get_facecolor.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.get_facecolor.__dict__.__setitem__('stypy_function_name', 'Patch.get_facecolor')
        Patch.get_facecolor.__dict__.__setitem__('stypy_param_names_list', [])
        Patch.get_facecolor.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.get_facecolor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.get_facecolor.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.get_facecolor.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.get_facecolor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.get_facecolor.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.get_facecolor', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_facecolor', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_facecolor(...)' code ##################

        unicode_101214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 258, (-1)), 'unicode', u'\n        Return the face color of the :class:`Patch`.\n        ')
        # Getting the type of 'self' (line 259)
        self_101215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 15), 'self')
        # Obtaining the member '_facecolor' of a type (line 259)
        _facecolor_101216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 259, 15), self_101215, '_facecolor')
        # Assigning a type to the variable 'stypy_return_type' (line 259)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 259, 8), 'stypy_return_type', _facecolor_101216)
        
        # ################# End of 'get_facecolor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_facecolor' in the type store
        # Getting the type of 'stypy_return_type' (line 255)
        stypy_return_type_101217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101217)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_facecolor'
        return stypy_return_type_101217

    
    # Assigning a Name to a Name (line 260):
    
    # Assigning a Name to a Name (line 260):

    @norecursion
    def get_linewidth(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_linewidth'
        module_type_store = module_type_store.open_function_context('get_linewidth', 262, 4, False)
        # Assigning a type to the variable 'self' (line 263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 263, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.get_linewidth.__dict__.__setitem__('stypy_localization', localization)
        Patch.get_linewidth.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.get_linewidth.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.get_linewidth.__dict__.__setitem__('stypy_function_name', 'Patch.get_linewidth')
        Patch.get_linewidth.__dict__.__setitem__('stypy_param_names_list', [])
        Patch.get_linewidth.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.get_linewidth.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.get_linewidth.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.get_linewidth.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.get_linewidth.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.get_linewidth.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.get_linewidth', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_linewidth', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_linewidth(...)' code ##################

        unicode_101218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 265, (-1)), 'unicode', u'\n        Return the line width in points.\n        ')
        # Getting the type of 'self' (line 266)
        self_101219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 266, 15), 'self')
        # Obtaining the member '_linewidth' of a type (line 266)
        _linewidth_101220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 266, 15), self_101219, '_linewidth')
        # Assigning a type to the variable 'stypy_return_type' (line 266)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 266, 8), 'stypy_return_type', _linewidth_101220)
        
        # ################# End of 'get_linewidth(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_linewidth' in the type store
        # Getting the type of 'stypy_return_type' (line 262)
        stypy_return_type_101221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 262, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101221)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_linewidth'
        return stypy_return_type_101221

    
    # Assigning a Name to a Name (line 267):
    
    # Assigning a Name to a Name (line 267):

    @norecursion
    def get_linestyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_linestyle'
        module_type_store = module_type_store.open_function_context('get_linestyle', 269, 4, False)
        # Assigning a type to the variable 'self' (line 270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 270, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.get_linestyle.__dict__.__setitem__('stypy_localization', localization)
        Patch.get_linestyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.get_linestyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.get_linestyle.__dict__.__setitem__('stypy_function_name', 'Patch.get_linestyle')
        Patch.get_linestyle.__dict__.__setitem__('stypy_param_names_list', [])
        Patch.get_linestyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.get_linestyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.get_linestyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.get_linestyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.get_linestyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.get_linestyle.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.get_linestyle', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_linestyle', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_linestyle(...)' code ##################

        unicode_101222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 273, (-1)), 'unicode', u"\n        Return the linestyle.  Will be one of ['solid' | 'dashed' |\n        'dashdot' | 'dotted']\n        ")
        # Getting the type of 'self' (line 274)
        self_101223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 15), 'self')
        # Obtaining the member '_linestyle' of a type (line 274)
        _linestyle_101224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 274, 15), self_101223, '_linestyle')
        # Assigning a type to the variable 'stypy_return_type' (line 274)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 274, 8), 'stypy_return_type', _linestyle_101224)
        
        # ################# End of 'get_linestyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_linestyle' in the type store
        # Getting the type of 'stypy_return_type' (line 269)
        stypy_return_type_101225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101225)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_linestyle'
        return stypy_return_type_101225

    
    # Assigning a Name to a Name (line 275):
    
    # Assigning a Name to a Name (line 275):

    @norecursion
    def set_antialiased(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_antialiased'
        module_type_store = module_type_store.open_function_context('set_antialiased', 277, 4, False)
        # Assigning a type to the variable 'self' (line 278)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 278, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.set_antialiased.__dict__.__setitem__('stypy_localization', localization)
        Patch.set_antialiased.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.set_antialiased.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.set_antialiased.__dict__.__setitem__('stypy_function_name', 'Patch.set_antialiased')
        Patch.set_antialiased.__dict__.__setitem__('stypy_param_names_list', ['aa'])
        Patch.set_antialiased.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.set_antialiased.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.set_antialiased.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.set_antialiased.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.set_antialiased.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.set_antialiased.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.set_antialiased', ['aa'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_antialiased', localization, ['aa'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_antialiased(...)' code ##################

        unicode_101226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 282, (-1)), 'unicode', u'\n        Set whether to use antialiased rendering\n\n        ACCEPTS: [True | False]  or None for default\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 283)
        # Getting the type of 'aa' (line 283)
        aa_101227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 11), 'aa')
        # Getting the type of 'None' (line 283)
        None_101228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 17), 'None')
        
        (may_be_101229, more_types_in_union_101230) = may_be_none(aa_101227, None_101228)

        if may_be_101229:

            if more_types_in_union_101230:
                # Runtime conditional SSA (line 283)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 284):
            
            # Assigning a Subscript to a Name (line 284):
            
            # Assigning a Subscript to a Name (line 284):
            
            # Obtaining the type of the subscript
            unicode_101231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 284, 30), 'unicode', u'patch.antialiased')
            # Getting the type of 'mpl' (line 284)
            mpl_101232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 17), 'mpl')
            # Obtaining the member 'rcParams' of a type (line 284)
            rcParams_101233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 284, 17), mpl_101232, 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 284)
            getitem___101234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 284, 17), rcParams_101233, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 284)
            subscript_call_result_101235 = invoke(stypy.reporting.localization.Localization(__file__, 284, 17), getitem___101234, unicode_101231)
            
            # Assigning a type to the variable 'aa' (line 284)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 284, 12), 'aa', subscript_call_result_101235)

            if more_types_in_union_101230:
                # SSA join for if statement (line 283)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 285):
        
        # Assigning a Name to a Attribute (line 285):
        
        # Assigning a Name to a Attribute (line 285):
        # Getting the type of 'aa' (line 285)
        aa_101236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 28), 'aa')
        # Getting the type of 'self' (line 285)
        self_101237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 8), 'self')
        # Setting the type of the member '_antialiased' of a type (line 285)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 285, 8), self_101237, '_antialiased', aa_101236)
        
        # Assigning a Name to a Attribute (line 286):
        
        # Assigning a Name to a Attribute (line 286):
        
        # Assigning a Name to a Attribute (line 286):
        # Getting the type of 'True' (line 286)
        True_101238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 21), 'True')
        # Getting the type of 'self' (line 286)
        self_101239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 286)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 286, 8), self_101239, 'stale', True_101238)
        
        # ################# End of 'set_antialiased(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_antialiased' in the type store
        # Getting the type of 'stypy_return_type' (line 277)
        stypy_return_type_101240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101240)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_antialiased'
        return stypy_return_type_101240


    @norecursion
    def set_aa(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_aa'
        module_type_store = module_type_store.open_function_context('set_aa', 288, 4, False)
        # Assigning a type to the variable 'self' (line 289)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 289, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.set_aa.__dict__.__setitem__('stypy_localization', localization)
        Patch.set_aa.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.set_aa.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.set_aa.__dict__.__setitem__('stypy_function_name', 'Patch.set_aa')
        Patch.set_aa.__dict__.__setitem__('stypy_param_names_list', ['aa'])
        Patch.set_aa.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.set_aa.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.set_aa.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.set_aa.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.set_aa.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.set_aa.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.set_aa', ['aa'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_aa', localization, ['aa'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_aa(...)' code ##################

        unicode_101241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 289, 8), 'unicode', u'alias for set_antialiased')
        
        # Call to set_antialiased(...): (line 290)
        # Processing the call arguments (line 290)
        # Getting the type of 'aa' (line 290)
        aa_101244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 36), 'aa', False)
        # Processing the call keyword arguments (line 290)
        kwargs_101245 = {}
        # Getting the type of 'self' (line 290)
        self_101242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 15), 'self', False)
        # Obtaining the member 'set_antialiased' of a type (line 290)
        set_antialiased_101243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 290, 15), self_101242, 'set_antialiased')
        # Calling set_antialiased(args, kwargs) (line 290)
        set_antialiased_call_result_101246 = invoke(stypy.reporting.localization.Localization(__file__, 290, 15), set_antialiased_101243, *[aa_101244], **kwargs_101245)
        
        # Assigning a type to the variable 'stypy_return_type' (line 290)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 290, 8), 'stypy_return_type', set_antialiased_call_result_101246)
        
        # ################# End of 'set_aa(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_aa' in the type store
        # Getting the type of 'stypy_return_type' (line 288)
        stypy_return_type_101247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101247)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_aa'
        return stypy_return_type_101247


    @norecursion
    def _set_edgecolor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_edgecolor'
        module_type_store = module_type_store.open_function_context('_set_edgecolor', 292, 4, False)
        # Assigning a type to the variable 'self' (line 293)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 293, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch._set_edgecolor.__dict__.__setitem__('stypy_localization', localization)
        Patch._set_edgecolor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch._set_edgecolor.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch._set_edgecolor.__dict__.__setitem__('stypy_function_name', 'Patch._set_edgecolor')
        Patch._set_edgecolor.__dict__.__setitem__('stypy_param_names_list', ['color'])
        Patch._set_edgecolor.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch._set_edgecolor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch._set_edgecolor.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch._set_edgecolor.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch._set_edgecolor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch._set_edgecolor.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch._set_edgecolor', ['color'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_edgecolor', localization, ['color'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_edgecolor(...)' code ##################

        
        # Assigning a Name to a Name (line 293):
        
        # Assigning a Name to a Name (line 293):
        
        # Assigning a Name to a Name (line 293):
        # Getting the type of 'True' (line 293)
        True_101248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 26), 'True')
        # Assigning a type to the variable 'set_hatch_color' (line 293)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 293, 8), 'set_hatch_color', True_101248)
        
        # Type idiom detected: calculating its left and rigth part (line 294)
        # Getting the type of 'color' (line 294)
        color_101249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 11), 'color')
        # Getting the type of 'None' (line 294)
        None_101250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 20), 'None')
        
        (may_be_101251, more_types_in_union_101252) = may_be_none(color_101249, None_101250)

        if may_be_101251:

            if more_types_in_union_101252:
                # Runtime conditional SSA (line 294)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # Evaluating a boolean operation
            
            # Obtaining the type of the subscript
            unicode_101253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 295, 29), 'unicode', u'patch.force_edgecolor')
            # Getting the type of 'mpl' (line 295)
            mpl_101254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 16), 'mpl')
            # Obtaining the member 'rcParams' of a type (line 295)
            rcParams_101255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 295, 16), mpl_101254, 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 295)
            getitem___101256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 295, 16), rcParams_101255, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 295)
            subscript_call_result_101257 = invoke(stypy.reporting.localization.Localization(__file__, 295, 16), getitem___101256, unicode_101253)
            
            
            # Getting the type of 'self' (line 296)
            self_101258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 24), 'self')
            # Obtaining the member '_fill' of a type (line 296)
            _fill_101259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 296, 24), self_101258, '_fill')
            # Applying the 'not' unary operator (line 296)
            result_not__101260 = python_operator(stypy.reporting.localization.Localization(__file__, 296, 20), 'not', _fill_101259)
            
            # Applying the binary operator 'or' (line 295)
            result_or_keyword_101261 = python_operator(stypy.reporting.localization.Localization(__file__, 295, 16), 'or', subscript_call_result_101257, result_not__101260)
            # Getting the type of 'self' (line 296)
            self_101262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 38), 'self')
            # Obtaining the member '_edge_default' of a type (line 296)
            _edge_default_101263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 296, 38), self_101262, '_edge_default')
            # Applying the binary operator 'or' (line 295)
            result_or_keyword_101264 = python_operator(stypy.reporting.localization.Localization(__file__, 295, 16), 'or', result_or_keyword_101261, _edge_default_101263)
            
            # Testing the type of an if condition (line 295)
            if_condition_101265 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 295, 12), result_or_keyword_101264)
            # Assigning a type to the variable 'if_condition_101265' (line 295)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 295, 12), 'if_condition_101265', if_condition_101265)
            # SSA begins for if statement (line 295)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Subscript to a Name (line 297):
            
            # Assigning a Subscript to a Name (line 297):
            
            # Assigning a Subscript to a Name (line 297):
            
            # Obtaining the type of the subscript
            unicode_101266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 297, 37), 'unicode', u'patch.edgecolor')
            # Getting the type of 'mpl' (line 297)
            mpl_101267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 24), 'mpl')
            # Obtaining the member 'rcParams' of a type (line 297)
            rcParams_101268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 297, 24), mpl_101267, 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 297)
            getitem___101269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 297, 24), rcParams_101268, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 297)
            subscript_call_result_101270 = invoke(stypy.reporting.localization.Localization(__file__, 297, 24), getitem___101269, unicode_101266)
            
            # Assigning a type to the variable 'color' (line 297)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 297, 16), 'color', subscript_call_result_101270)
            # SSA branch for the else part of an if statement (line 295)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Str to a Name (line 299):
            
            # Assigning a Str to a Name (line 299):
            
            # Assigning a Str to a Name (line 299):
            unicode_101271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 299, 24), 'unicode', u'none')
            # Assigning a type to the variable 'color' (line 299)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 299, 16), 'color', unicode_101271)
            
            # Assigning a Name to a Name (line 300):
            
            # Assigning a Name to a Name (line 300):
            
            # Assigning a Name to a Name (line 300):
            # Getting the type of 'False' (line 300)
            False_101272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 34), 'False')
            # Assigning a type to the variable 'set_hatch_color' (line 300)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 300, 16), 'set_hatch_color', False_101272)
            # SSA join for if statement (line 295)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_101252:
                # SSA join for if statement (line 294)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Attribute (line 302):
        
        # Assigning a Call to a Attribute (line 302):
        
        # Assigning a Call to a Attribute (line 302):
        
        # Call to to_rgba(...): (line 302)
        # Processing the call arguments (line 302)
        # Getting the type of 'color' (line 302)
        color_101275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 41), 'color', False)
        # Getting the type of 'self' (line 302)
        self_101276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 48), 'self', False)
        # Obtaining the member '_alpha' of a type (line 302)
        _alpha_101277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 302, 48), self_101276, '_alpha')
        # Processing the call keyword arguments (line 302)
        kwargs_101278 = {}
        # Getting the type of 'colors' (line 302)
        colors_101273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 26), 'colors', False)
        # Obtaining the member 'to_rgba' of a type (line 302)
        to_rgba_101274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 302, 26), colors_101273, 'to_rgba')
        # Calling to_rgba(args, kwargs) (line 302)
        to_rgba_call_result_101279 = invoke(stypy.reporting.localization.Localization(__file__, 302, 26), to_rgba_101274, *[color_101275, _alpha_101277], **kwargs_101278)
        
        # Getting the type of 'self' (line 302)
        self_101280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 8), 'self')
        # Setting the type of the member '_edgecolor' of a type (line 302)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 302, 8), self_101280, '_edgecolor', to_rgba_call_result_101279)
        
        # Getting the type of 'set_hatch_color' (line 303)
        set_hatch_color_101281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 11), 'set_hatch_color')
        # Testing the type of an if condition (line 303)
        if_condition_101282 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 303, 8), set_hatch_color_101281)
        # Assigning a type to the variable 'if_condition_101282' (line 303)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 303, 8), 'if_condition_101282', if_condition_101282)
        # SSA begins for if statement (line 303)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Attribute (line 304):
        
        # Assigning a Attribute to a Attribute (line 304):
        
        # Assigning a Attribute to a Attribute (line 304):
        # Getting the type of 'self' (line 304)
        self_101283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 32), 'self')
        # Obtaining the member '_edgecolor' of a type (line 304)
        _edgecolor_101284 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 304, 32), self_101283, '_edgecolor')
        # Getting the type of 'self' (line 304)
        self_101285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 12), 'self')
        # Setting the type of the member '_hatch_color' of a type (line 304)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 304, 12), self_101285, '_hatch_color', _edgecolor_101284)
        # SSA join for if statement (line 303)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 305):
        
        # Assigning a Name to a Attribute (line 305):
        
        # Assigning a Name to a Attribute (line 305):
        # Getting the type of 'True' (line 305)
        True_101286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 21), 'True')
        # Getting the type of 'self' (line 305)
        self_101287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 305)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 305, 8), self_101287, 'stale', True_101286)
        
        # ################# End of '_set_edgecolor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_edgecolor' in the type store
        # Getting the type of 'stypy_return_type' (line 292)
        stypy_return_type_101288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101288)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_edgecolor'
        return stypy_return_type_101288


    @norecursion
    def set_edgecolor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_edgecolor'
        module_type_store = module_type_store.open_function_context('set_edgecolor', 307, 4, False)
        # Assigning a type to the variable 'self' (line 308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 308, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.set_edgecolor.__dict__.__setitem__('stypy_localization', localization)
        Patch.set_edgecolor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.set_edgecolor.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.set_edgecolor.__dict__.__setitem__('stypy_function_name', 'Patch.set_edgecolor')
        Patch.set_edgecolor.__dict__.__setitem__('stypy_param_names_list', ['color'])
        Patch.set_edgecolor.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.set_edgecolor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.set_edgecolor.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.set_edgecolor.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.set_edgecolor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.set_edgecolor.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.set_edgecolor', ['color'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_edgecolor', localization, ['color'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_edgecolor(...)' code ##################

        unicode_101289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 312, (-1)), 'unicode', u"\n        Set the patch edge color\n\n        ACCEPTS: mpl color spec, None, 'none', or 'auto'\n        ")
        
        # Assigning a Name to a Attribute (line 313):
        
        # Assigning a Name to a Attribute (line 313):
        
        # Assigning a Name to a Attribute (line 313):
        # Getting the type of 'color' (line 313)
        color_101290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 35), 'color')
        # Getting the type of 'self' (line 313)
        self_101291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 8), 'self')
        # Setting the type of the member '_original_edgecolor' of a type (line 313)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 313, 8), self_101291, '_original_edgecolor', color_101290)
        
        # Call to _set_edgecolor(...): (line 314)
        # Processing the call arguments (line 314)
        # Getting the type of 'color' (line 314)
        color_101294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 28), 'color', False)
        # Processing the call keyword arguments (line 314)
        kwargs_101295 = {}
        # Getting the type of 'self' (line 314)
        self_101292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 8), 'self', False)
        # Obtaining the member '_set_edgecolor' of a type (line 314)
        _set_edgecolor_101293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 314, 8), self_101292, '_set_edgecolor')
        # Calling _set_edgecolor(args, kwargs) (line 314)
        _set_edgecolor_call_result_101296 = invoke(stypy.reporting.localization.Localization(__file__, 314, 8), _set_edgecolor_101293, *[color_101294], **kwargs_101295)
        
        
        # ################# End of 'set_edgecolor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_edgecolor' in the type store
        # Getting the type of 'stypy_return_type' (line 307)
        stypy_return_type_101297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101297)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_edgecolor'
        return stypy_return_type_101297


    @norecursion
    def set_ec(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_ec'
        module_type_store = module_type_store.open_function_context('set_ec', 316, 4, False)
        # Assigning a type to the variable 'self' (line 317)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 317, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.set_ec.__dict__.__setitem__('stypy_localization', localization)
        Patch.set_ec.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.set_ec.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.set_ec.__dict__.__setitem__('stypy_function_name', 'Patch.set_ec')
        Patch.set_ec.__dict__.__setitem__('stypy_param_names_list', ['color'])
        Patch.set_ec.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.set_ec.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.set_ec.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.set_ec.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.set_ec.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.set_ec.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.set_ec', ['color'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_ec', localization, ['color'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_ec(...)' code ##################

        unicode_101298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 317, 8), 'unicode', u'alias for set_edgecolor')
        
        # Call to set_edgecolor(...): (line 318)
        # Processing the call arguments (line 318)
        # Getting the type of 'color' (line 318)
        color_101301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 34), 'color', False)
        # Processing the call keyword arguments (line 318)
        kwargs_101302 = {}
        # Getting the type of 'self' (line 318)
        self_101299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 15), 'self', False)
        # Obtaining the member 'set_edgecolor' of a type (line 318)
        set_edgecolor_101300 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 318, 15), self_101299, 'set_edgecolor')
        # Calling set_edgecolor(args, kwargs) (line 318)
        set_edgecolor_call_result_101303 = invoke(stypy.reporting.localization.Localization(__file__, 318, 15), set_edgecolor_101300, *[color_101301], **kwargs_101302)
        
        # Assigning a type to the variable 'stypy_return_type' (line 318)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 318, 8), 'stypy_return_type', set_edgecolor_call_result_101303)
        
        # ################# End of 'set_ec(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_ec' in the type store
        # Getting the type of 'stypy_return_type' (line 316)
        stypy_return_type_101304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101304)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_ec'
        return stypy_return_type_101304


    @norecursion
    def _set_facecolor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_facecolor'
        module_type_store = module_type_store.open_function_context('_set_facecolor', 320, 4, False)
        # Assigning a type to the variable 'self' (line 321)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 321, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch._set_facecolor.__dict__.__setitem__('stypy_localization', localization)
        Patch._set_facecolor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch._set_facecolor.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch._set_facecolor.__dict__.__setitem__('stypy_function_name', 'Patch._set_facecolor')
        Patch._set_facecolor.__dict__.__setitem__('stypy_param_names_list', ['color'])
        Patch._set_facecolor.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch._set_facecolor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch._set_facecolor.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch._set_facecolor.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch._set_facecolor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch._set_facecolor.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch._set_facecolor', ['color'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_facecolor', localization, ['color'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_facecolor(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 321)
        # Getting the type of 'color' (line 321)
        color_101305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 11), 'color')
        # Getting the type of 'None' (line 321)
        None_101306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 20), 'None')
        
        (may_be_101307, more_types_in_union_101308) = may_be_none(color_101305, None_101306)

        if may_be_101307:

            if more_types_in_union_101308:
                # Runtime conditional SSA (line 321)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 322):
            
            # Assigning a Subscript to a Name (line 322):
            
            # Assigning a Subscript to a Name (line 322):
            
            # Obtaining the type of the subscript
            unicode_101309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 322, 33), 'unicode', u'patch.facecolor')
            # Getting the type of 'mpl' (line 322)
            mpl_101310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 20), 'mpl')
            # Obtaining the member 'rcParams' of a type (line 322)
            rcParams_101311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 322, 20), mpl_101310, 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 322)
            getitem___101312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 322, 20), rcParams_101311, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 322)
            subscript_call_result_101313 = invoke(stypy.reporting.localization.Localization(__file__, 322, 20), getitem___101312, unicode_101309)
            
            # Assigning a type to the variable 'color' (line 322)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 322, 12), 'color', subscript_call_result_101313)

            if more_types_in_union_101308:
                # SSA join for if statement (line 321)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a IfExp to a Name (line 323):
        
        # Assigning a IfExp to a Name (line 323):
        
        # Assigning a IfExp to a Name (line 323):
        
        # Getting the type of 'self' (line 323)
        self_101314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 31), 'self')
        # Obtaining the member '_fill' of a type (line 323)
        _fill_101315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 31), self_101314, '_fill')
        # Testing the type of an if expression (line 323)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 323, 16), _fill_101315)
        # SSA begins for if expression (line 323)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        # Getting the type of 'self' (line 323)
        self_101316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 16), 'self')
        # Obtaining the member '_alpha' of a type (line 323)
        _alpha_101317 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 16), self_101316, '_alpha')
        # SSA branch for the else part of an if expression (line 323)
        module_type_store.open_ssa_branch('if expression else')
        int_101318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 323, 47), 'int')
        # SSA join for if expression (line 323)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_101319 = union_type.UnionType.add(_alpha_101317, int_101318)
        
        # Assigning a type to the variable 'alpha' (line 323)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 323, 8), 'alpha', if_exp_101319)
        
        # Assigning a Call to a Attribute (line 324):
        
        # Assigning a Call to a Attribute (line 324):
        
        # Assigning a Call to a Attribute (line 324):
        
        # Call to to_rgba(...): (line 324)
        # Processing the call arguments (line 324)
        # Getting the type of 'color' (line 324)
        color_101322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 41), 'color', False)
        # Getting the type of 'alpha' (line 324)
        alpha_101323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 48), 'alpha', False)
        # Processing the call keyword arguments (line 324)
        kwargs_101324 = {}
        # Getting the type of 'colors' (line 324)
        colors_101320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 26), 'colors', False)
        # Obtaining the member 'to_rgba' of a type (line 324)
        to_rgba_101321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 324, 26), colors_101320, 'to_rgba')
        # Calling to_rgba(args, kwargs) (line 324)
        to_rgba_call_result_101325 = invoke(stypy.reporting.localization.Localization(__file__, 324, 26), to_rgba_101321, *[color_101322, alpha_101323], **kwargs_101324)
        
        # Getting the type of 'self' (line 324)
        self_101326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 8), 'self')
        # Setting the type of the member '_facecolor' of a type (line 324)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 324, 8), self_101326, '_facecolor', to_rgba_call_result_101325)
        
        # Assigning a Name to a Attribute (line 325):
        
        # Assigning a Name to a Attribute (line 325):
        
        # Assigning a Name to a Attribute (line 325):
        # Getting the type of 'True' (line 325)
        True_101327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 21), 'True')
        # Getting the type of 'self' (line 325)
        self_101328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 325)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 325, 8), self_101328, 'stale', True_101327)
        
        # ################# End of '_set_facecolor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_facecolor' in the type store
        # Getting the type of 'stypy_return_type' (line 320)
        stypy_return_type_101329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101329)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_facecolor'
        return stypy_return_type_101329


    @norecursion
    def set_facecolor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_facecolor'
        module_type_store = module_type_store.open_function_context('set_facecolor', 327, 4, False)
        # Assigning a type to the variable 'self' (line 328)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 328, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.set_facecolor.__dict__.__setitem__('stypy_localization', localization)
        Patch.set_facecolor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.set_facecolor.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.set_facecolor.__dict__.__setitem__('stypy_function_name', 'Patch.set_facecolor')
        Patch.set_facecolor.__dict__.__setitem__('stypy_param_names_list', ['color'])
        Patch.set_facecolor.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.set_facecolor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.set_facecolor.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.set_facecolor.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.set_facecolor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.set_facecolor.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.set_facecolor', ['color'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_facecolor', localization, ['color'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_facecolor(...)' code ##################

        unicode_101330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 332, (-1)), 'unicode', u"\n        Set the patch face color\n\n        ACCEPTS: mpl color spec, or None for default, or 'none' for no color\n        ")
        
        # Assigning a Name to a Attribute (line 333):
        
        # Assigning a Name to a Attribute (line 333):
        
        # Assigning a Name to a Attribute (line 333):
        # Getting the type of 'color' (line 333)
        color_101331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 35), 'color')
        # Getting the type of 'self' (line 333)
        self_101332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 8), 'self')
        # Setting the type of the member '_original_facecolor' of a type (line 333)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 333, 8), self_101332, '_original_facecolor', color_101331)
        
        # Call to _set_facecolor(...): (line 334)
        # Processing the call arguments (line 334)
        # Getting the type of 'color' (line 334)
        color_101335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 28), 'color', False)
        # Processing the call keyword arguments (line 334)
        kwargs_101336 = {}
        # Getting the type of 'self' (line 334)
        self_101333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 8), 'self', False)
        # Obtaining the member '_set_facecolor' of a type (line 334)
        _set_facecolor_101334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 334, 8), self_101333, '_set_facecolor')
        # Calling _set_facecolor(args, kwargs) (line 334)
        _set_facecolor_call_result_101337 = invoke(stypy.reporting.localization.Localization(__file__, 334, 8), _set_facecolor_101334, *[color_101335], **kwargs_101336)
        
        
        # ################# End of 'set_facecolor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_facecolor' in the type store
        # Getting the type of 'stypy_return_type' (line 327)
        stypy_return_type_101338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101338)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_facecolor'
        return stypy_return_type_101338


    @norecursion
    def set_fc(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_fc'
        module_type_store = module_type_store.open_function_context('set_fc', 336, 4, False)
        # Assigning a type to the variable 'self' (line 337)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 337, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.set_fc.__dict__.__setitem__('stypy_localization', localization)
        Patch.set_fc.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.set_fc.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.set_fc.__dict__.__setitem__('stypy_function_name', 'Patch.set_fc')
        Patch.set_fc.__dict__.__setitem__('stypy_param_names_list', ['color'])
        Patch.set_fc.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.set_fc.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.set_fc.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.set_fc.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.set_fc.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.set_fc.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.set_fc', ['color'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_fc', localization, ['color'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_fc(...)' code ##################

        unicode_101339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 337, 8), 'unicode', u'alias for set_facecolor')
        
        # Call to set_facecolor(...): (line 338)
        # Processing the call arguments (line 338)
        # Getting the type of 'color' (line 338)
        color_101342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 34), 'color', False)
        # Processing the call keyword arguments (line 338)
        kwargs_101343 = {}
        # Getting the type of 'self' (line 338)
        self_101340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 15), 'self', False)
        # Obtaining the member 'set_facecolor' of a type (line 338)
        set_facecolor_101341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 338, 15), self_101340, 'set_facecolor')
        # Calling set_facecolor(args, kwargs) (line 338)
        set_facecolor_call_result_101344 = invoke(stypy.reporting.localization.Localization(__file__, 338, 15), set_facecolor_101341, *[color_101342], **kwargs_101343)
        
        # Assigning a type to the variable 'stypy_return_type' (line 338)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 338, 8), 'stypy_return_type', set_facecolor_call_result_101344)
        
        # ################# End of 'set_fc(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_fc' in the type store
        # Getting the type of 'stypy_return_type' (line 336)
        stypy_return_type_101345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101345)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_fc'
        return stypy_return_type_101345


    @norecursion
    def set_color(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_color'
        module_type_store = module_type_store.open_function_context('set_color', 340, 4, False)
        # Assigning a type to the variable 'self' (line 341)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 341, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.set_color.__dict__.__setitem__('stypy_localization', localization)
        Patch.set_color.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.set_color.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.set_color.__dict__.__setitem__('stypy_function_name', 'Patch.set_color')
        Patch.set_color.__dict__.__setitem__('stypy_param_names_list', ['c'])
        Patch.set_color.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.set_color.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.set_color.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.set_color.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.set_color.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.set_color.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.set_color', ['c'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_color', localization, ['c'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_color(...)' code ##################

        unicode_101346 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 350, (-1)), 'unicode', u'\n        Set both the edgecolor and the facecolor.\n\n        ACCEPTS: matplotlib color spec\n\n        .. seealso::\n\n            :meth:`set_facecolor`, :meth:`set_edgecolor`\n               For setting the edge or face color individually.\n        ')
        
        # Call to set_facecolor(...): (line 351)
        # Processing the call arguments (line 351)
        # Getting the type of 'c' (line 351)
        c_101349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 27), 'c', False)
        # Processing the call keyword arguments (line 351)
        kwargs_101350 = {}
        # Getting the type of 'self' (line 351)
        self_101347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 8), 'self', False)
        # Obtaining the member 'set_facecolor' of a type (line 351)
        set_facecolor_101348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 351, 8), self_101347, 'set_facecolor')
        # Calling set_facecolor(args, kwargs) (line 351)
        set_facecolor_call_result_101351 = invoke(stypy.reporting.localization.Localization(__file__, 351, 8), set_facecolor_101348, *[c_101349], **kwargs_101350)
        
        
        # Call to set_edgecolor(...): (line 352)
        # Processing the call arguments (line 352)
        # Getting the type of 'c' (line 352)
        c_101354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 27), 'c', False)
        # Processing the call keyword arguments (line 352)
        kwargs_101355 = {}
        # Getting the type of 'self' (line 352)
        self_101352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'self', False)
        # Obtaining the member 'set_edgecolor' of a type (line 352)
        set_edgecolor_101353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 8), self_101352, 'set_edgecolor')
        # Calling set_edgecolor(args, kwargs) (line 352)
        set_edgecolor_call_result_101356 = invoke(stypy.reporting.localization.Localization(__file__, 352, 8), set_edgecolor_101353, *[c_101354], **kwargs_101355)
        
        
        # ################# End of 'set_color(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_color' in the type store
        # Getting the type of 'stypy_return_type' (line 340)
        stypy_return_type_101357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101357)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_color'
        return stypy_return_type_101357


    @norecursion
    def set_alpha(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_alpha'
        module_type_store = module_type_store.open_function_context('set_alpha', 354, 4, False)
        # Assigning a type to the variable 'self' (line 355)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 355, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.set_alpha.__dict__.__setitem__('stypy_localization', localization)
        Patch.set_alpha.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.set_alpha.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.set_alpha.__dict__.__setitem__('stypy_function_name', 'Patch.set_alpha')
        Patch.set_alpha.__dict__.__setitem__('stypy_param_names_list', ['alpha'])
        Patch.set_alpha.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.set_alpha.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.set_alpha.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.set_alpha.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.set_alpha.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.set_alpha.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.set_alpha', ['alpha'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_alpha', localization, ['alpha'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_alpha(...)' code ##################

        unicode_101358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 359, (-1)), 'unicode', u'\n        Set the alpha tranparency of the patch.\n\n        ACCEPTS: float or None\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 360)
        # Getting the type of 'alpha' (line 360)
        alpha_101359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 8), 'alpha')
        # Getting the type of 'None' (line 360)
        None_101360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 24), 'None')
        
        (may_be_101361, more_types_in_union_101362) = may_not_be_none(alpha_101359, None_101360)

        if may_be_101361:

            if more_types_in_union_101362:
                # Runtime conditional SSA (line 360)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # SSA begins for try-except statement (line 361)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            # Call to float(...): (line 362)
            # Processing the call arguments (line 362)
            # Getting the type of 'alpha' (line 362)
            alpha_101364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 22), 'alpha', False)
            # Processing the call keyword arguments (line 362)
            kwargs_101365 = {}
            # Getting the type of 'float' (line 362)
            float_101363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 16), 'float', False)
            # Calling float(args, kwargs) (line 362)
            float_call_result_101366 = invoke(stypy.reporting.localization.Localization(__file__, 362, 16), float_101363, *[alpha_101364], **kwargs_101365)
            
            # SSA branch for the except part of a try statement (line 361)
            # SSA branch for the except 'TypeError' branch of a try statement (line 361)
            module_type_store.open_ssa_branch('except')
            
            # Call to TypeError(...): (line 364)
            # Processing the call arguments (line 364)
            unicode_101368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 364, 32), 'unicode', u'alpha must be a float or None')
            # Processing the call keyword arguments (line 364)
            kwargs_101369 = {}
            # Getting the type of 'TypeError' (line 364)
            TypeError_101367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 22), 'TypeError', False)
            # Calling TypeError(args, kwargs) (line 364)
            TypeError_call_result_101370 = invoke(stypy.reporting.localization.Localization(__file__, 364, 22), TypeError_101367, *[unicode_101368], **kwargs_101369)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 364, 16), TypeError_call_result_101370, 'raise parameter', BaseException)
            # SSA join for try-except statement (line 361)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_101362:
                # SSA join for if statement (line 360)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to set_alpha(...): (line 365)
        # Processing the call arguments (line 365)
        # Getting the type of 'self' (line 365)
        self_101374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 32), 'self', False)
        # Getting the type of 'alpha' (line 365)
        alpha_101375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 38), 'alpha', False)
        # Processing the call keyword arguments (line 365)
        kwargs_101376 = {}
        # Getting the type of 'artist' (line 365)
        artist_101371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 8), 'artist', False)
        # Obtaining the member 'Artist' of a type (line 365)
        Artist_101372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 365, 8), artist_101371, 'Artist')
        # Obtaining the member 'set_alpha' of a type (line 365)
        set_alpha_101373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 365, 8), Artist_101372, 'set_alpha')
        # Calling set_alpha(args, kwargs) (line 365)
        set_alpha_call_result_101377 = invoke(stypy.reporting.localization.Localization(__file__, 365, 8), set_alpha_101373, *[self_101374, alpha_101375], **kwargs_101376)
        
        
        # Call to _set_facecolor(...): (line 366)
        # Processing the call arguments (line 366)
        # Getting the type of 'self' (line 366)
        self_101380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 28), 'self', False)
        # Obtaining the member '_original_facecolor' of a type (line 366)
        _original_facecolor_101381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 366, 28), self_101380, '_original_facecolor')
        # Processing the call keyword arguments (line 366)
        kwargs_101382 = {}
        # Getting the type of 'self' (line 366)
        self_101378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 8), 'self', False)
        # Obtaining the member '_set_facecolor' of a type (line 366)
        _set_facecolor_101379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 366, 8), self_101378, '_set_facecolor')
        # Calling _set_facecolor(args, kwargs) (line 366)
        _set_facecolor_call_result_101383 = invoke(stypy.reporting.localization.Localization(__file__, 366, 8), _set_facecolor_101379, *[_original_facecolor_101381], **kwargs_101382)
        
        
        # Call to _set_edgecolor(...): (line 367)
        # Processing the call arguments (line 367)
        # Getting the type of 'self' (line 367)
        self_101386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 28), 'self', False)
        # Obtaining the member '_original_edgecolor' of a type (line 367)
        _original_edgecolor_101387 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 367, 28), self_101386, '_original_edgecolor')
        # Processing the call keyword arguments (line 367)
        kwargs_101388 = {}
        # Getting the type of 'self' (line 367)
        self_101384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 8), 'self', False)
        # Obtaining the member '_set_edgecolor' of a type (line 367)
        _set_edgecolor_101385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 367, 8), self_101384, '_set_edgecolor')
        # Calling _set_edgecolor(args, kwargs) (line 367)
        _set_edgecolor_call_result_101389 = invoke(stypy.reporting.localization.Localization(__file__, 367, 8), _set_edgecolor_101385, *[_original_edgecolor_101387], **kwargs_101388)
        
        
        # ################# End of 'set_alpha(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_alpha' in the type store
        # Getting the type of 'stypy_return_type' (line 354)
        stypy_return_type_101390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101390)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_alpha'
        return stypy_return_type_101390


    @norecursion
    def set_linewidth(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_linewidth'
        module_type_store = module_type_store.open_function_context('set_linewidth', 370, 4, False)
        # Assigning a type to the variable 'self' (line 371)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 371, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.set_linewidth.__dict__.__setitem__('stypy_localization', localization)
        Patch.set_linewidth.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.set_linewidth.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.set_linewidth.__dict__.__setitem__('stypy_function_name', 'Patch.set_linewidth')
        Patch.set_linewidth.__dict__.__setitem__('stypy_param_names_list', ['w'])
        Patch.set_linewidth.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.set_linewidth.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.set_linewidth.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.set_linewidth.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.set_linewidth.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.set_linewidth.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.set_linewidth', ['w'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_linewidth', localization, ['w'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_linewidth(...)' code ##################

        unicode_101391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 375, (-1)), 'unicode', u'\n        Set the patch linewidth in points\n\n        ACCEPTS: float or None for default\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 376)
        # Getting the type of 'w' (line 376)
        w_101392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 11), 'w')
        # Getting the type of 'None' (line 376)
        None_101393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 16), 'None')
        
        (may_be_101394, more_types_in_union_101395) = may_be_none(w_101392, None_101393)

        if may_be_101394:

            if more_types_in_union_101395:
                # Runtime conditional SSA (line 376)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 377):
            
            # Assigning a Subscript to a Name (line 377):
            
            # Assigning a Subscript to a Name (line 377):
            
            # Obtaining the type of the subscript
            unicode_101396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 377, 29), 'unicode', u'patch.linewidth')
            # Getting the type of 'mpl' (line 377)
            mpl_101397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 16), 'mpl')
            # Obtaining the member 'rcParams' of a type (line 377)
            rcParams_101398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 377, 16), mpl_101397, 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 377)
            getitem___101399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 377, 16), rcParams_101398, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 377)
            subscript_call_result_101400 = invoke(stypy.reporting.localization.Localization(__file__, 377, 16), getitem___101399, unicode_101396)
            
            # Assigning a type to the variable 'w' (line 377)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 377, 12), 'w', subscript_call_result_101400)
            
            # Type idiom detected: calculating its left and rigth part (line 378)
            # Getting the type of 'w' (line 378)
            w_101401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 15), 'w')
            # Getting the type of 'None' (line 378)
            None_101402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 20), 'None')
            
            (may_be_101403, more_types_in_union_101404) = may_be_none(w_101401, None_101402)

            if may_be_101403:

                if more_types_in_union_101404:
                    # Runtime conditional SSA (line 378)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Assigning a Subscript to a Name (line 379):
                
                # Assigning a Subscript to a Name (line 379):
                
                # Assigning a Subscript to a Name (line 379):
                
                # Obtaining the type of the subscript
                unicode_101405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 379, 33), 'unicode', u'axes.linewidth')
                # Getting the type of 'mpl' (line 379)
                mpl_101406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 20), 'mpl')
                # Obtaining the member 'rcParams' of a type (line 379)
                rcParams_101407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 379, 20), mpl_101406, 'rcParams')
                # Obtaining the member '__getitem__' of a type (line 379)
                getitem___101408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 379, 20), rcParams_101407, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 379)
                subscript_call_result_101409 = invoke(stypy.reporting.localization.Localization(__file__, 379, 20), getitem___101408, unicode_101405)
                
                # Assigning a type to the variable 'w' (line 379)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 379, 16), 'w', subscript_call_result_101409)

                if more_types_in_union_101404:
                    # SSA join for if statement (line 378)
                    module_type_store = module_type_store.join_ssa_context()


            

            if more_types_in_union_101395:
                # SSA join for if statement (line 376)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Attribute (line 381):
        
        # Assigning a Call to a Attribute (line 381):
        
        # Assigning a Call to a Attribute (line 381):
        
        # Call to float(...): (line 381)
        # Processing the call arguments (line 381)
        # Getting the type of 'w' (line 381)
        w_101411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 32), 'w', False)
        # Processing the call keyword arguments (line 381)
        kwargs_101412 = {}
        # Getting the type of 'float' (line 381)
        float_101410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 26), 'float', False)
        # Calling float(args, kwargs) (line 381)
        float_call_result_101413 = invoke(stypy.reporting.localization.Localization(__file__, 381, 26), float_101410, *[w_101411], **kwargs_101412)
        
        # Getting the type of 'self' (line 381)
        self_101414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 8), 'self')
        # Setting the type of the member '_linewidth' of a type (line 381)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 381, 8), self_101414, '_linewidth', float_call_result_101413)
        
        # Assigning a Attribute to a Tuple (line 383):
        
        # Assigning a Subscript to a Name (line 383):
        
        # Assigning a Subscript to a Name (line 383):
        
        # Obtaining the type of the subscript
        int_101415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 383, 8), 'int')
        # Getting the type of 'self' (line 383)
        self_101416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 21), 'self')
        # Obtaining the member '_us_dashes' of a type (line 383)
        _us_dashes_101417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 383, 21), self_101416, '_us_dashes')
        # Obtaining the member '__getitem__' of a type (line 383)
        getitem___101418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 383, 8), _us_dashes_101417, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 383)
        subscript_call_result_101419 = invoke(stypy.reporting.localization.Localization(__file__, 383, 8), getitem___101418, int_101415)
        
        # Assigning a type to the variable 'tuple_var_assignment_100340' (line 383)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 383, 8), 'tuple_var_assignment_100340', subscript_call_result_101419)
        
        # Assigning a Subscript to a Name (line 383):
        
        # Assigning a Subscript to a Name (line 383):
        
        # Obtaining the type of the subscript
        int_101420 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 383, 8), 'int')
        # Getting the type of 'self' (line 383)
        self_101421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 21), 'self')
        # Obtaining the member '_us_dashes' of a type (line 383)
        _us_dashes_101422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 383, 21), self_101421, '_us_dashes')
        # Obtaining the member '__getitem__' of a type (line 383)
        getitem___101423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 383, 8), _us_dashes_101422, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 383)
        subscript_call_result_101424 = invoke(stypy.reporting.localization.Localization(__file__, 383, 8), getitem___101423, int_101420)
        
        # Assigning a type to the variable 'tuple_var_assignment_100341' (line 383)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 383, 8), 'tuple_var_assignment_100341', subscript_call_result_101424)
        
        # Assigning a Name to a Name (line 383):
        
        # Assigning a Name to a Name (line 383):
        # Getting the type of 'tuple_var_assignment_100340' (line 383)
        tuple_var_assignment_100340_101425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 8), 'tuple_var_assignment_100340')
        # Assigning a type to the variable 'offset' (line 383)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 383, 8), 'offset', tuple_var_assignment_100340_101425)
        
        # Assigning a Name to a Name (line 383):
        
        # Assigning a Name to a Name (line 383):
        # Getting the type of 'tuple_var_assignment_100341' (line 383)
        tuple_var_assignment_100341_101426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 8), 'tuple_var_assignment_100341')
        # Assigning a type to the variable 'ls' (line 383)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 383, 16), 'ls', tuple_var_assignment_100341_101426)
        
        # Assigning a Call to a Tuple (line 384):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to _scale_dashes(...): (line 384)
        # Processing the call arguments (line 384)
        # Getting the type of 'offset' (line 385)
        offset_101429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 12), 'offset', False)
        # Getting the type of 'ls' (line 385)
        ls_101430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 20), 'ls', False)
        # Getting the type of 'self' (line 385)
        self_101431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 24), 'self', False)
        # Obtaining the member '_linewidth' of a type (line 385)
        _linewidth_101432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 385, 24), self_101431, '_linewidth')
        # Processing the call keyword arguments (line 384)
        kwargs_101433 = {}
        # Getting the type of 'mlines' (line 384)
        mlines_101427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 41), 'mlines', False)
        # Obtaining the member '_scale_dashes' of a type (line 384)
        _scale_dashes_101428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 384, 41), mlines_101427, '_scale_dashes')
        # Calling _scale_dashes(args, kwargs) (line 384)
        _scale_dashes_call_result_101434 = invoke(stypy.reporting.localization.Localization(__file__, 384, 41), _scale_dashes_101428, *[offset_101429, ls_101430, _linewidth_101432], **kwargs_101433)
        
        # Assigning a type to the variable 'call_assignment_100342' (line 384)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 384, 8), 'call_assignment_100342', _scale_dashes_call_result_101434)
        
        # Assigning a Call to a Name (line 384):
        
        # Assigning a Call to a Name (line 384):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_101437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 384, 8), 'int')
        # Processing the call keyword arguments
        kwargs_101438 = {}
        # Getting the type of 'call_assignment_100342' (line 384)
        call_assignment_100342_101435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 8), 'call_assignment_100342', False)
        # Obtaining the member '__getitem__' of a type (line 384)
        getitem___101436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 384, 8), call_assignment_100342_101435, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_101439 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___101436, *[int_101437], **kwargs_101438)
        
        # Assigning a type to the variable 'call_assignment_100343' (line 384)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 384, 8), 'call_assignment_100343', getitem___call_result_101439)
        
        # Assigning a Name to a Attribute (line 384):
        
        # Assigning a Name to a Attribute (line 384):
        # Getting the type of 'call_assignment_100343' (line 384)
        call_assignment_100343_101440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 8), 'call_assignment_100343')
        # Getting the type of 'self' (line 384)
        self_101441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 8), 'self')
        # Setting the type of the member '_dashoffset' of a type (line 384)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 384, 8), self_101441, '_dashoffset', call_assignment_100343_101440)
        
        # Assigning a Call to a Name (line 384):
        
        # Assigning a Call to a Name (line 384):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_101444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 384, 8), 'int')
        # Processing the call keyword arguments
        kwargs_101445 = {}
        # Getting the type of 'call_assignment_100342' (line 384)
        call_assignment_100342_101442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 8), 'call_assignment_100342', False)
        # Obtaining the member '__getitem__' of a type (line 384)
        getitem___101443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 384, 8), call_assignment_100342_101442, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_101446 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___101443, *[int_101444], **kwargs_101445)
        
        # Assigning a type to the variable 'call_assignment_100344' (line 384)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 384, 8), 'call_assignment_100344', getitem___call_result_101446)
        
        # Assigning a Name to a Attribute (line 384):
        
        # Assigning a Name to a Attribute (line 384):
        # Getting the type of 'call_assignment_100344' (line 384)
        call_assignment_100344_101447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 8), 'call_assignment_100344')
        # Getting the type of 'self' (line 384)
        self_101448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 26), 'self')
        # Setting the type of the member '_dashes' of a type (line 384)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 384, 26), self_101448, '_dashes', call_assignment_100344_101447)
        
        # Assigning a Name to a Attribute (line 386):
        
        # Assigning a Name to a Attribute (line 386):
        
        # Assigning a Name to a Attribute (line 386):
        # Getting the type of 'True' (line 386)
        True_101449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 21), 'True')
        # Getting the type of 'self' (line 386)
        self_101450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 386)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 386, 8), self_101450, 'stale', True_101449)
        
        # ################# End of 'set_linewidth(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_linewidth' in the type store
        # Getting the type of 'stypy_return_type' (line 370)
        stypy_return_type_101451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101451)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_linewidth'
        return stypy_return_type_101451


    @norecursion
    def set_lw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_lw'
        module_type_store = module_type_store.open_function_context('set_lw', 388, 4, False)
        # Assigning a type to the variable 'self' (line 389)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.set_lw.__dict__.__setitem__('stypy_localization', localization)
        Patch.set_lw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.set_lw.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.set_lw.__dict__.__setitem__('stypy_function_name', 'Patch.set_lw')
        Patch.set_lw.__dict__.__setitem__('stypy_param_names_list', ['lw'])
        Patch.set_lw.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.set_lw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.set_lw.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.set_lw.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.set_lw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.set_lw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.set_lw', ['lw'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_lw', localization, ['lw'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_lw(...)' code ##################

        unicode_101452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 389, 8), 'unicode', u'alias for set_linewidth')
        
        # Call to set_linewidth(...): (line 390)
        # Processing the call arguments (line 390)
        # Getting the type of 'lw' (line 390)
        lw_101455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 34), 'lw', False)
        # Processing the call keyword arguments (line 390)
        kwargs_101456 = {}
        # Getting the type of 'self' (line 390)
        self_101453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 15), 'self', False)
        # Obtaining the member 'set_linewidth' of a type (line 390)
        set_linewidth_101454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 390, 15), self_101453, 'set_linewidth')
        # Calling set_linewidth(args, kwargs) (line 390)
        set_linewidth_call_result_101457 = invoke(stypy.reporting.localization.Localization(__file__, 390, 15), set_linewidth_101454, *[lw_101455], **kwargs_101456)
        
        # Assigning a type to the variable 'stypy_return_type' (line 390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 390, 8), 'stypy_return_type', set_linewidth_call_result_101457)
        
        # ################# End of 'set_lw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_lw' in the type store
        # Getting the type of 'stypy_return_type' (line 388)
        stypy_return_type_101458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101458)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_lw'
        return stypy_return_type_101458


    @norecursion
    def set_linestyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_linestyle'
        module_type_store = module_type_store.open_function_context('set_linestyle', 392, 4, False)
        # Assigning a type to the variable 'self' (line 393)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 393, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.set_linestyle.__dict__.__setitem__('stypy_localization', localization)
        Patch.set_linestyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.set_linestyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.set_linestyle.__dict__.__setitem__('stypy_function_name', 'Patch.set_linestyle')
        Patch.set_linestyle.__dict__.__setitem__('stypy_param_names_list', ['ls'])
        Patch.set_linestyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.set_linestyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.set_linestyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.set_linestyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.set_linestyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.set_linestyle.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.set_linestyle', ['ls'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_linestyle', localization, ['ls'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_linestyle(...)' code ##################

        unicode_101459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 421, (-1)), 'unicode', u"\n        Set the patch linestyle\n\n        ===========================   =================\n        linestyle                     description\n        ===========================   =================\n        ``'-'`` or ``'solid'``        solid line\n        ``'--'`` or  ``'dashed'``     dashed line\n        ``'-.'`` or  ``'dashdot'``    dash-dotted line\n        ``':'`` or ``'dotted'``       dotted line\n        ===========================   =================\n\n        Alternatively a dash tuple of the following form can be provided::\n\n            (offset, onoffseq),\n\n        where ``onoffseq`` is an even length tuple of on and off ink\n        in points.\n\n        ACCEPTS: ['solid' | 'dashed', 'dashdot', 'dotted' |\n                   (offset, on-off-dash-seq) |\n                   ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'None'`` |\n                   ``' '`` | ``''``]\n\n        Parameters\n        ----------\n        ls : { '-',  '--', '-.', ':'} and more see description\n            The line style.\n        ")
        
        # Type idiom detected: calculating its left and rigth part (line 422)
        # Getting the type of 'ls' (line 422)
        ls_101460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 11), 'ls')
        # Getting the type of 'None' (line 422)
        None_101461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 17), 'None')
        
        (may_be_101462, more_types_in_union_101463) = may_be_none(ls_101460, None_101461)

        if may_be_101462:

            if more_types_in_union_101463:
                # Runtime conditional SSA (line 422)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Str to a Name (line 423):
            
            # Assigning a Str to a Name (line 423):
            
            # Assigning a Str to a Name (line 423):
            unicode_101464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 423, 17), 'unicode', u'solid')
            # Assigning a type to the variable 'ls' (line 423)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 423, 12), 'ls', unicode_101464)

            if more_types_in_union_101463:
                # SSA join for if statement (line 422)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 424):
        
        # Assigning a Name to a Attribute (line 424):
        
        # Assigning a Name to a Attribute (line 424):
        # Getting the type of 'ls' (line 424)
        ls_101465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 26), 'ls')
        # Getting the type of 'self' (line 424)
        self_101466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 8), 'self')
        # Setting the type of the member '_linestyle' of a type (line 424)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 424, 8), self_101466, '_linestyle', ls_101465)
        
        # Multiple assignment of 2 elements.
        
        # Assigning a Call to a Attribute (line 426):
        
        # Assigning a Call to a Attribute (line 426):
        
        # Call to _get_dash_pattern(...): (line 426)
        # Processing the call arguments (line 426)
        # Getting the type of 'ls' (line 426)
        ls_101469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 64), 'ls', False)
        # Processing the call keyword arguments (line 426)
        kwargs_101470 = {}
        # Getting the type of 'mlines' (line 426)
        mlines_101467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 39), 'mlines', False)
        # Obtaining the member '_get_dash_pattern' of a type (line 426)
        _get_dash_pattern_101468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 426, 39), mlines_101467, '_get_dash_pattern')
        # Calling _get_dash_pattern(args, kwargs) (line 426)
        _get_dash_pattern_call_result_101471 = invoke(stypy.reporting.localization.Localization(__file__, 426, 39), _get_dash_pattern_101468, *[ls_101469], **kwargs_101470)
        
        # Getting the type of 'self' (line 426)
        self_101472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 21), 'self')
        # Setting the type of the member '_us_dashes' of a type (line 426)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 426, 21), self_101472, '_us_dashes', _get_dash_pattern_call_result_101471)
        
        # Assigning a Subscript to a Name (line 426):
        
        # Assigning a Subscript to a Name (line 426):
        
        # Obtaining the type of the subscript
        int_101473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 426, 8), 'int')
        # Getting the type of 'self' (line 426)
        self_101474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 21), 'self')
        # Obtaining the member '_us_dashes' of a type (line 426)
        _us_dashes_101475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 426, 21), self_101474, '_us_dashes')
        # Obtaining the member '__getitem__' of a type (line 426)
        getitem___101476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 426, 8), _us_dashes_101475, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 426)
        subscript_call_result_101477 = invoke(stypy.reporting.localization.Localization(__file__, 426, 8), getitem___101476, int_101473)
        
        # Assigning a type to the variable 'tuple_var_assignment_100345' (line 426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 426, 8), 'tuple_var_assignment_100345', subscript_call_result_101477)
        
        # Assigning a Subscript to a Name (line 426):
        
        # Assigning a Subscript to a Name (line 426):
        
        # Obtaining the type of the subscript
        int_101478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 426, 8), 'int')
        # Getting the type of 'self' (line 426)
        self_101479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 21), 'self')
        # Obtaining the member '_us_dashes' of a type (line 426)
        _us_dashes_101480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 426, 21), self_101479, '_us_dashes')
        # Obtaining the member '__getitem__' of a type (line 426)
        getitem___101481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 426, 8), _us_dashes_101480, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 426)
        subscript_call_result_101482 = invoke(stypy.reporting.localization.Localization(__file__, 426, 8), getitem___101481, int_101478)
        
        # Assigning a type to the variable 'tuple_var_assignment_100346' (line 426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 426, 8), 'tuple_var_assignment_100346', subscript_call_result_101482)
        
        # Assigning a Name to a Name (line 426):
        
        # Assigning a Name to a Name (line 426):
        # Getting the type of 'tuple_var_assignment_100345' (line 426)
        tuple_var_assignment_100345_101483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 8), 'tuple_var_assignment_100345')
        # Assigning a type to the variable 'offset' (line 426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 426, 8), 'offset', tuple_var_assignment_100345_101483)
        
        # Assigning a Name to a Name (line 426):
        
        # Assigning a Name to a Name (line 426):
        # Getting the type of 'tuple_var_assignment_100346' (line 426)
        tuple_var_assignment_100346_101484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 8), 'tuple_var_assignment_100346')
        # Assigning a type to the variable 'ls' (line 426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 426, 16), 'ls', tuple_var_assignment_100346_101484)
        
        # Assigning a Call to a Tuple (line 428):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to _scale_dashes(...): (line 428)
        # Processing the call arguments (line 428)
        # Getting the type of 'offset' (line 429)
        offset_101487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 12), 'offset', False)
        # Getting the type of 'ls' (line 429)
        ls_101488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 20), 'ls', False)
        # Getting the type of 'self' (line 429)
        self_101489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 24), 'self', False)
        # Obtaining the member '_linewidth' of a type (line 429)
        _linewidth_101490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 429, 24), self_101489, '_linewidth')
        # Processing the call keyword arguments (line 428)
        kwargs_101491 = {}
        # Getting the type of 'mlines' (line 428)
        mlines_101485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 41), 'mlines', False)
        # Obtaining the member '_scale_dashes' of a type (line 428)
        _scale_dashes_101486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 428, 41), mlines_101485, '_scale_dashes')
        # Calling _scale_dashes(args, kwargs) (line 428)
        _scale_dashes_call_result_101492 = invoke(stypy.reporting.localization.Localization(__file__, 428, 41), _scale_dashes_101486, *[offset_101487, ls_101488, _linewidth_101490], **kwargs_101491)
        
        # Assigning a type to the variable 'call_assignment_100347' (line 428)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 428, 8), 'call_assignment_100347', _scale_dashes_call_result_101492)
        
        # Assigning a Call to a Name (line 428):
        
        # Assigning a Call to a Name (line 428):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_101495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 428, 8), 'int')
        # Processing the call keyword arguments
        kwargs_101496 = {}
        # Getting the type of 'call_assignment_100347' (line 428)
        call_assignment_100347_101493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 8), 'call_assignment_100347', False)
        # Obtaining the member '__getitem__' of a type (line 428)
        getitem___101494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 428, 8), call_assignment_100347_101493, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_101497 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___101494, *[int_101495], **kwargs_101496)
        
        # Assigning a type to the variable 'call_assignment_100348' (line 428)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 428, 8), 'call_assignment_100348', getitem___call_result_101497)
        
        # Assigning a Name to a Attribute (line 428):
        
        # Assigning a Name to a Attribute (line 428):
        # Getting the type of 'call_assignment_100348' (line 428)
        call_assignment_100348_101498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 8), 'call_assignment_100348')
        # Getting the type of 'self' (line 428)
        self_101499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 8), 'self')
        # Setting the type of the member '_dashoffset' of a type (line 428)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 428, 8), self_101499, '_dashoffset', call_assignment_100348_101498)
        
        # Assigning a Call to a Name (line 428):
        
        # Assigning a Call to a Name (line 428):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_101502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 428, 8), 'int')
        # Processing the call keyword arguments
        kwargs_101503 = {}
        # Getting the type of 'call_assignment_100347' (line 428)
        call_assignment_100347_101500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 8), 'call_assignment_100347', False)
        # Obtaining the member '__getitem__' of a type (line 428)
        getitem___101501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 428, 8), call_assignment_100347_101500, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_101504 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___101501, *[int_101502], **kwargs_101503)
        
        # Assigning a type to the variable 'call_assignment_100349' (line 428)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 428, 8), 'call_assignment_100349', getitem___call_result_101504)
        
        # Assigning a Name to a Attribute (line 428):
        
        # Assigning a Name to a Attribute (line 428):
        # Getting the type of 'call_assignment_100349' (line 428)
        call_assignment_100349_101505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 8), 'call_assignment_100349')
        # Getting the type of 'self' (line 428)
        self_101506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 26), 'self')
        # Setting the type of the member '_dashes' of a type (line 428)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 428, 26), self_101506, '_dashes', call_assignment_100349_101505)
        
        # Assigning a Name to a Attribute (line 430):
        
        # Assigning a Name to a Attribute (line 430):
        
        # Assigning a Name to a Attribute (line 430):
        # Getting the type of 'True' (line 430)
        True_101507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 21), 'True')
        # Getting the type of 'self' (line 430)
        self_101508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 430)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 430, 8), self_101508, 'stale', True_101507)
        
        # ################# End of 'set_linestyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_linestyle' in the type store
        # Getting the type of 'stypy_return_type' (line 392)
        stypy_return_type_101509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101509)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_linestyle'
        return stypy_return_type_101509


    @norecursion
    def set_ls(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_ls'
        module_type_store = module_type_store.open_function_context('set_ls', 432, 4, False)
        # Assigning a type to the variable 'self' (line 433)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 433, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.set_ls.__dict__.__setitem__('stypy_localization', localization)
        Patch.set_ls.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.set_ls.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.set_ls.__dict__.__setitem__('stypy_function_name', 'Patch.set_ls')
        Patch.set_ls.__dict__.__setitem__('stypy_param_names_list', ['ls'])
        Patch.set_ls.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.set_ls.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.set_ls.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.set_ls.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.set_ls.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.set_ls.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.set_ls', ['ls'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_ls', localization, ['ls'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_ls(...)' code ##################

        unicode_101510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 433, 8), 'unicode', u'alias for set_linestyle')
        
        # Call to set_linestyle(...): (line 434)
        # Processing the call arguments (line 434)
        # Getting the type of 'ls' (line 434)
        ls_101513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 34), 'ls', False)
        # Processing the call keyword arguments (line 434)
        kwargs_101514 = {}
        # Getting the type of 'self' (line 434)
        self_101511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 15), 'self', False)
        # Obtaining the member 'set_linestyle' of a type (line 434)
        set_linestyle_101512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 434, 15), self_101511, 'set_linestyle')
        # Calling set_linestyle(args, kwargs) (line 434)
        set_linestyle_call_result_101515 = invoke(stypy.reporting.localization.Localization(__file__, 434, 15), set_linestyle_101512, *[ls_101513], **kwargs_101514)
        
        # Assigning a type to the variable 'stypy_return_type' (line 434)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 434, 8), 'stypy_return_type', set_linestyle_call_result_101515)
        
        # ################# End of 'set_ls(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_ls' in the type store
        # Getting the type of 'stypy_return_type' (line 432)
        stypy_return_type_101516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101516)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_ls'
        return stypy_return_type_101516


    @norecursion
    def set_fill(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_fill'
        module_type_store = module_type_store.open_function_context('set_fill', 436, 4, False)
        # Assigning a type to the variable 'self' (line 437)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 437, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.set_fill.__dict__.__setitem__('stypy_localization', localization)
        Patch.set_fill.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.set_fill.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.set_fill.__dict__.__setitem__('stypy_function_name', 'Patch.set_fill')
        Patch.set_fill.__dict__.__setitem__('stypy_param_names_list', ['b'])
        Patch.set_fill.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.set_fill.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.set_fill.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.set_fill.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.set_fill.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.set_fill.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.set_fill', ['b'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_fill', localization, ['b'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_fill(...)' code ##################

        unicode_101517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 441, (-1)), 'unicode', u'\n        Set whether to fill the patch\n\n        ACCEPTS: [True | False]\n        ')
        
        # Assigning a Call to a Attribute (line 442):
        
        # Assigning a Call to a Attribute (line 442):
        
        # Assigning a Call to a Attribute (line 442):
        
        # Call to bool(...): (line 442)
        # Processing the call arguments (line 442)
        # Getting the type of 'b' (line 442)
        b_101519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 26), 'b', False)
        # Processing the call keyword arguments (line 442)
        kwargs_101520 = {}
        # Getting the type of 'bool' (line 442)
        bool_101518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 21), 'bool', False)
        # Calling bool(args, kwargs) (line 442)
        bool_call_result_101521 = invoke(stypy.reporting.localization.Localization(__file__, 442, 21), bool_101518, *[b_101519], **kwargs_101520)
        
        # Getting the type of 'self' (line 442)
        self_101522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 8), 'self')
        # Setting the type of the member '_fill' of a type (line 442)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 442, 8), self_101522, '_fill', bool_call_result_101521)
        
        # Call to _set_facecolor(...): (line 443)
        # Processing the call arguments (line 443)
        # Getting the type of 'self' (line 443)
        self_101525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 28), 'self', False)
        # Obtaining the member '_original_facecolor' of a type (line 443)
        _original_facecolor_101526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 443, 28), self_101525, '_original_facecolor')
        # Processing the call keyword arguments (line 443)
        kwargs_101527 = {}
        # Getting the type of 'self' (line 443)
        self_101523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 8), 'self', False)
        # Obtaining the member '_set_facecolor' of a type (line 443)
        _set_facecolor_101524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 443, 8), self_101523, '_set_facecolor')
        # Calling _set_facecolor(args, kwargs) (line 443)
        _set_facecolor_call_result_101528 = invoke(stypy.reporting.localization.Localization(__file__, 443, 8), _set_facecolor_101524, *[_original_facecolor_101526], **kwargs_101527)
        
        
        # Call to _set_edgecolor(...): (line 444)
        # Processing the call arguments (line 444)
        # Getting the type of 'self' (line 444)
        self_101531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 28), 'self', False)
        # Obtaining the member '_original_edgecolor' of a type (line 444)
        _original_edgecolor_101532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 444, 28), self_101531, '_original_edgecolor')
        # Processing the call keyword arguments (line 444)
        kwargs_101533 = {}
        # Getting the type of 'self' (line 444)
        self_101529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 8), 'self', False)
        # Obtaining the member '_set_edgecolor' of a type (line 444)
        _set_edgecolor_101530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 444, 8), self_101529, '_set_edgecolor')
        # Calling _set_edgecolor(args, kwargs) (line 444)
        _set_edgecolor_call_result_101534 = invoke(stypy.reporting.localization.Localization(__file__, 444, 8), _set_edgecolor_101530, *[_original_edgecolor_101532], **kwargs_101533)
        
        
        # Assigning a Name to a Attribute (line 445):
        
        # Assigning a Name to a Attribute (line 445):
        
        # Assigning a Name to a Attribute (line 445):
        # Getting the type of 'True' (line 445)
        True_101535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 21), 'True')
        # Getting the type of 'self' (line 445)
        self_101536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 445)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 8), self_101536, 'stale', True_101535)
        
        # ################# End of 'set_fill(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_fill' in the type store
        # Getting the type of 'stypy_return_type' (line 436)
        stypy_return_type_101537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101537)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_fill'
        return stypy_return_type_101537


    @norecursion
    def get_fill(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_fill'
        module_type_store = module_type_store.open_function_context('get_fill', 447, 4, False)
        # Assigning a type to the variable 'self' (line 448)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 448, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.get_fill.__dict__.__setitem__('stypy_localization', localization)
        Patch.get_fill.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.get_fill.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.get_fill.__dict__.__setitem__('stypy_function_name', 'Patch.get_fill')
        Patch.get_fill.__dict__.__setitem__('stypy_param_names_list', [])
        Patch.get_fill.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.get_fill.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.get_fill.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.get_fill.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.get_fill.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.get_fill.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.get_fill', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_fill', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_fill(...)' code ##################

        unicode_101538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 448, 8), 'unicode', u'return whether fill is set')
        # Getting the type of 'self' (line 449)
        self_101539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 15), 'self')
        # Obtaining the member '_fill' of a type (line 449)
        _fill_101540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 449, 15), self_101539, '_fill')
        # Assigning a type to the variable 'stypy_return_type' (line 449)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 449, 8), 'stypy_return_type', _fill_101540)
        
        # ################# End of 'get_fill(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_fill' in the type store
        # Getting the type of 'stypy_return_type' (line 447)
        stypy_return_type_101541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101541)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_fill'
        return stypy_return_type_101541

    
    # Assigning a Call to a Name (line 454):
    
    # Assigning a Call to a Name (line 454):

    @norecursion
    def set_capstyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_capstyle'
        module_type_store = module_type_store.open_function_context('set_capstyle', 456, 4, False)
        # Assigning a type to the variable 'self' (line 457)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 457, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.set_capstyle.__dict__.__setitem__('stypy_localization', localization)
        Patch.set_capstyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.set_capstyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.set_capstyle.__dict__.__setitem__('stypy_function_name', 'Patch.set_capstyle')
        Patch.set_capstyle.__dict__.__setitem__('stypy_param_names_list', ['s'])
        Patch.set_capstyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.set_capstyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.set_capstyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.set_capstyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.set_capstyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.set_capstyle.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.set_capstyle', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_capstyle', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_capstyle(...)' code ##################

        unicode_101542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 461, (-1)), 'unicode', u"\n        Set the patch capstyle\n\n        ACCEPTS: ['butt' | 'round' | 'projecting']\n        ")
        
        # Assigning a Call to a Name (line 462):
        
        # Assigning a Call to a Name (line 462):
        
        # Assigning a Call to a Name (line 462):
        
        # Call to lower(...): (line 462)
        # Processing the call keyword arguments (line 462)
        kwargs_101545 = {}
        # Getting the type of 's' (line 462)
        s_101543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 12), 's', False)
        # Obtaining the member 'lower' of a type (line 462)
        lower_101544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 462, 12), s_101543, 'lower')
        # Calling lower(args, kwargs) (line 462)
        lower_call_result_101546 = invoke(stypy.reporting.localization.Localization(__file__, 462, 12), lower_101544, *[], **kwargs_101545)
        
        # Assigning a type to the variable 's' (line 462)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 462, 8), 's', lower_call_result_101546)
        
        
        # Getting the type of 's' (line 463)
        s_101547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 11), 's')
        # Getting the type of 'self' (line 463)
        self_101548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 20), 'self')
        # Obtaining the member 'validCap' of a type (line 463)
        validCap_101549 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 463, 20), self_101548, 'validCap')
        # Applying the binary operator 'notin' (line 463)
        result_contains_101550 = python_operator(stypy.reporting.localization.Localization(__file__, 463, 11), 'notin', s_101547, validCap_101549)
        
        # Testing the type of an if condition (line 463)
        if_condition_101551 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 463, 8), result_contains_101550)
        # Assigning a type to the variable 'if_condition_101551' (line 463)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 463, 8), 'if_condition_101551', if_condition_101551)
        # SSA begins for if statement (line 463)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 464)
        # Processing the call arguments (line 464)
        unicode_101553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 464, 29), 'unicode', u'set_capstyle passed "%s";\n')
        
        # Obtaining an instance of the builtin type 'tuple' (line 464)
        tuple_101554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 464, 62), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 464)
        # Adding element type (line 464)
        # Getting the type of 's' (line 464)
        s_101555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 62), 's', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 464, 62), tuple_101554, s_101555)
        
        # Applying the binary operator '%' (line 464)
        result_mod_101556 = python_operator(stypy.reporting.localization.Localization(__file__, 464, 29), '%', unicode_101553, tuple_101554)
        
        unicode_101557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 465, 29), 'unicode', u'valid capstyles are %s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 465)
        tuple_101558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 465, 57), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 465)
        # Adding element type (line 465)
        # Getting the type of 'self' (line 465)
        self_101559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 57), 'self', False)
        # Obtaining the member 'validCap' of a type (line 465)
        validCap_101560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 465, 57), self_101559, 'validCap')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 465, 57), tuple_101558, validCap_101560)
        
        # Applying the binary operator '%' (line 465)
        result_mod_101561 = python_operator(stypy.reporting.localization.Localization(__file__, 465, 29), '%', unicode_101557, tuple_101558)
        
        # Applying the binary operator '+' (line 464)
        result_add_101562 = python_operator(stypy.reporting.localization.Localization(__file__, 464, 29), '+', result_mod_101556, result_mod_101561)
        
        # Processing the call keyword arguments (line 464)
        kwargs_101563 = {}
        # Getting the type of 'ValueError' (line 464)
        ValueError_101552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 464)
        ValueError_call_result_101564 = invoke(stypy.reporting.localization.Localization(__file__, 464, 18), ValueError_101552, *[result_add_101562], **kwargs_101563)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 464, 12), ValueError_call_result_101564, 'raise parameter', BaseException)
        # SSA join for if statement (line 463)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 466):
        
        # Assigning a Name to a Attribute (line 466):
        
        # Assigning a Name to a Attribute (line 466):
        # Getting the type of 's' (line 466)
        s_101565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 25), 's')
        # Getting the type of 'self' (line 466)
        self_101566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 8), 'self')
        # Setting the type of the member '_capstyle' of a type (line 466)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 8), self_101566, '_capstyle', s_101565)
        
        # Assigning a Name to a Attribute (line 467):
        
        # Assigning a Name to a Attribute (line 467):
        
        # Assigning a Name to a Attribute (line 467):
        # Getting the type of 'True' (line 467)
        True_101567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 21), 'True')
        # Getting the type of 'self' (line 467)
        self_101568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 467)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 467, 8), self_101568, 'stale', True_101567)
        
        # ################# End of 'set_capstyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_capstyle' in the type store
        # Getting the type of 'stypy_return_type' (line 456)
        stypy_return_type_101569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101569)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_capstyle'
        return stypy_return_type_101569


    @norecursion
    def get_capstyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_capstyle'
        module_type_store = module_type_store.open_function_context('get_capstyle', 469, 4, False)
        # Assigning a type to the variable 'self' (line 470)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 470, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.get_capstyle.__dict__.__setitem__('stypy_localization', localization)
        Patch.get_capstyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.get_capstyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.get_capstyle.__dict__.__setitem__('stypy_function_name', 'Patch.get_capstyle')
        Patch.get_capstyle.__dict__.__setitem__('stypy_param_names_list', [])
        Patch.get_capstyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.get_capstyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.get_capstyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.get_capstyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.get_capstyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.get_capstyle.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.get_capstyle', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_capstyle', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_capstyle(...)' code ##################

        unicode_101570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 470, 8), 'unicode', u'Return the current capstyle')
        # Getting the type of 'self' (line 471)
        self_101571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 15), 'self')
        # Obtaining the member '_capstyle' of a type (line 471)
        _capstyle_101572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 471, 15), self_101571, '_capstyle')
        # Assigning a type to the variable 'stypy_return_type' (line 471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 471, 8), 'stypy_return_type', _capstyle_101572)
        
        # ################# End of 'get_capstyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_capstyle' in the type store
        # Getting the type of 'stypy_return_type' (line 469)
        stypy_return_type_101573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101573)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_capstyle'
        return stypy_return_type_101573


    @norecursion
    def set_joinstyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_joinstyle'
        module_type_store = module_type_store.open_function_context('set_joinstyle', 473, 4, False)
        # Assigning a type to the variable 'self' (line 474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.set_joinstyle.__dict__.__setitem__('stypy_localization', localization)
        Patch.set_joinstyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.set_joinstyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.set_joinstyle.__dict__.__setitem__('stypy_function_name', 'Patch.set_joinstyle')
        Patch.set_joinstyle.__dict__.__setitem__('stypy_param_names_list', ['s'])
        Patch.set_joinstyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.set_joinstyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.set_joinstyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.set_joinstyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.set_joinstyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.set_joinstyle.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.set_joinstyle', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_joinstyle', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_joinstyle(...)' code ##################

        unicode_101574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 478, (-1)), 'unicode', u"\n        Set the patch joinstyle\n\n        ACCEPTS: ['miter' | 'round' | 'bevel']\n        ")
        
        # Assigning a Call to a Name (line 479):
        
        # Assigning a Call to a Name (line 479):
        
        # Assigning a Call to a Name (line 479):
        
        # Call to lower(...): (line 479)
        # Processing the call keyword arguments (line 479)
        kwargs_101577 = {}
        # Getting the type of 's' (line 479)
        s_101575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 12), 's', False)
        # Obtaining the member 'lower' of a type (line 479)
        lower_101576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 479, 12), s_101575, 'lower')
        # Calling lower(args, kwargs) (line 479)
        lower_call_result_101578 = invoke(stypy.reporting.localization.Localization(__file__, 479, 12), lower_101576, *[], **kwargs_101577)
        
        # Assigning a type to the variable 's' (line 479)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 479, 8), 's', lower_call_result_101578)
        
        
        # Getting the type of 's' (line 480)
        s_101579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 11), 's')
        # Getting the type of 'self' (line 480)
        self_101580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 20), 'self')
        # Obtaining the member 'validJoin' of a type (line 480)
        validJoin_101581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 480, 20), self_101580, 'validJoin')
        # Applying the binary operator 'notin' (line 480)
        result_contains_101582 = python_operator(stypy.reporting.localization.Localization(__file__, 480, 11), 'notin', s_101579, validJoin_101581)
        
        # Testing the type of an if condition (line 480)
        if_condition_101583 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 480, 8), result_contains_101582)
        # Assigning a type to the variable 'if_condition_101583' (line 480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 480, 8), 'if_condition_101583', if_condition_101583)
        # SSA begins for if statement (line 480)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 481)
        # Processing the call arguments (line 481)
        unicode_101585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 481, 29), 'unicode', u'set_joinstyle passed "%s";\n')
        
        # Obtaining an instance of the builtin type 'tuple' (line 481)
        tuple_101586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 481, 63), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 481)
        # Adding element type (line 481)
        # Getting the type of 's' (line 481)
        s_101587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 63), 's', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 481, 63), tuple_101586, s_101587)
        
        # Applying the binary operator '%' (line 481)
        result_mod_101588 = python_operator(stypy.reporting.localization.Localization(__file__, 481, 29), '%', unicode_101585, tuple_101586)
        
        unicode_101589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 482, 29), 'unicode', u'valid joinstyles are %s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 482)
        tuple_101590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 482, 58), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 482)
        # Adding element type (line 482)
        # Getting the type of 'self' (line 482)
        self_101591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 58), 'self', False)
        # Obtaining the member 'validJoin' of a type (line 482)
        validJoin_101592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 482, 58), self_101591, 'validJoin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 482, 58), tuple_101590, validJoin_101592)
        
        # Applying the binary operator '%' (line 482)
        result_mod_101593 = python_operator(stypy.reporting.localization.Localization(__file__, 482, 29), '%', unicode_101589, tuple_101590)
        
        # Applying the binary operator '+' (line 481)
        result_add_101594 = python_operator(stypy.reporting.localization.Localization(__file__, 481, 29), '+', result_mod_101588, result_mod_101593)
        
        # Processing the call keyword arguments (line 481)
        kwargs_101595 = {}
        # Getting the type of 'ValueError' (line 481)
        ValueError_101584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 481)
        ValueError_call_result_101596 = invoke(stypy.reporting.localization.Localization(__file__, 481, 18), ValueError_101584, *[result_add_101594], **kwargs_101595)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 481, 12), ValueError_call_result_101596, 'raise parameter', BaseException)
        # SSA join for if statement (line 480)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 483):
        
        # Assigning a Name to a Attribute (line 483):
        
        # Assigning a Name to a Attribute (line 483):
        # Getting the type of 's' (line 483)
        s_101597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 26), 's')
        # Getting the type of 'self' (line 483)
        self_101598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 8), 'self')
        # Setting the type of the member '_joinstyle' of a type (line 483)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 483, 8), self_101598, '_joinstyle', s_101597)
        
        # Assigning a Name to a Attribute (line 484):
        
        # Assigning a Name to a Attribute (line 484):
        
        # Assigning a Name to a Attribute (line 484):
        # Getting the type of 'True' (line 484)
        True_101599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 21), 'True')
        # Getting the type of 'self' (line 484)
        self_101600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 484)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 484, 8), self_101600, 'stale', True_101599)
        
        # ################# End of 'set_joinstyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_joinstyle' in the type store
        # Getting the type of 'stypy_return_type' (line 473)
        stypy_return_type_101601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101601)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_joinstyle'
        return stypy_return_type_101601


    @norecursion
    def get_joinstyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_joinstyle'
        module_type_store = module_type_store.open_function_context('get_joinstyle', 486, 4, False)
        # Assigning a type to the variable 'self' (line 487)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 487, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.get_joinstyle.__dict__.__setitem__('stypy_localization', localization)
        Patch.get_joinstyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.get_joinstyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.get_joinstyle.__dict__.__setitem__('stypy_function_name', 'Patch.get_joinstyle')
        Patch.get_joinstyle.__dict__.__setitem__('stypy_param_names_list', [])
        Patch.get_joinstyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.get_joinstyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.get_joinstyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.get_joinstyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.get_joinstyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.get_joinstyle.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.get_joinstyle', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_joinstyle', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_joinstyle(...)' code ##################

        unicode_101602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 487, 8), 'unicode', u'Return the current joinstyle')
        # Getting the type of 'self' (line 488)
        self_101603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 15), 'self')
        # Obtaining the member '_joinstyle' of a type (line 488)
        _joinstyle_101604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 488, 15), self_101603, '_joinstyle')
        # Assigning a type to the variable 'stypy_return_type' (line 488)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 488, 8), 'stypy_return_type', _joinstyle_101604)
        
        # ################# End of 'get_joinstyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_joinstyle' in the type store
        # Getting the type of 'stypy_return_type' (line 486)
        stypy_return_type_101605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101605)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_joinstyle'
        return stypy_return_type_101605


    @norecursion
    def set_hatch(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_hatch'
        module_type_store = module_type_store.open_function_context('set_hatch', 490, 4, False)
        # Assigning a type to the variable 'self' (line 491)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 491, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.set_hatch.__dict__.__setitem__('stypy_localization', localization)
        Patch.set_hatch.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.set_hatch.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.set_hatch.__dict__.__setitem__('stypy_function_name', 'Patch.set_hatch')
        Patch.set_hatch.__dict__.__setitem__('stypy_param_names_list', ['hatch'])
        Patch.set_hatch.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.set_hatch.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.set_hatch.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.set_hatch.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.set_hatch.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.set_hatch.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.set_hatch', ['hatch'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_hatch', localization, ['hatch'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_hatch(...)' code ##################

        unicode_101606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 515, (-1)), 'unicode', u"\n        Set the hatching pattern\n\n        *hatch* can be one of::\n\n          /   - diagonal hatching\n          \\   - back diagonal\n          |   - vertical\n          -   - horizontal\n          +   - crossed\n          x   - crossed diagonal\n          o   - small circle\n          O   - large circle\n          .   - dots\n          *   - stars\n\n        Letters can be combined, in which case all the specified\n        hatchings are done.  If same letter repeats, it increases the\n        density of hatching of that pattern.\n\n        Hatching is supported in the PostScript, PDF, SVG and Agg\n        backends only.\n\n        ACCEPTS: ['/' | '\\\\' | '|' | '-' | '+' | 'x' | 'o' | 'O' | '.' | '*']\n        ")
        
        # Assigning a Name to a Attribute (line 516):
        
        # Assigning a Name to a Attribute (line 516):
        
        # Assigning a Name to a Attribute (line 516):
        # Getting the type of 'hatch' (line 516)
        hatch_101607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 22), 'hatch')
        # Getting the type of 'self' (line 516)
        self_101608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 8), 'self')
        # Setting the type of the member '_hatch' of a type (line 516)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 516, 8), self_101608, '_hatch', hatch_101607)
        
        # Assigning a Name to a Attribute (line 517):
        
        # Assigning a Name to a Attribute (line 517):
        
        # Assigning a Name to a Attribute (line 517):
        # Getting the type of 'True' (line 517)
        True_101609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 21), 'True')
        # Getting the type of 'self' (line 517)
        self_101610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 517)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 517, 8), self_101610, 'stale', True_101609)
        
        # ################# End of 'set_hatch(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_hatch' in the type store
        # Getting the type of 'stypy_return_type' (line 490)
        stypy_return_type_101611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101611)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_hatch'
        return stypy_return_type_101611


    @norecursion
    def get_hatch(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_hatch'
        module_type_store = module_type_store.open_function_context('get_hatch', 519, 4, False)
        # Assigning a type to the variable 'self' (line 520)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 520, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.get_hatch.__dict__.__setitem__('stypy_localization', localization)
        Patch.get_hatch.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.get_hatch.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.get_hatch.__dict__.__setitem__('stypy_function_name', 'Patch.get_hatch')
        Patch.get_hatch.__dict__.__setitem__('stypy_param_names_list', [])
        Patch.get_hatch.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.get_hatch.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.get_hatch.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.get_hatch.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.get_hatch.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.get_hatch.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.get_hatch', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_hatch', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_hatch(...)' code ##################

        unicode_101612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 520, 8), 'unicode', u'Return the current hatching pattern')
        # Getting the type of 'self' (line 521)
        self_101613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 15), 'self')
        # Obtaining the member '_hatch' of a type (line 521)
        _hatch_101614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 521, 15), self_101613, '_hatch')
        # Assigning a type to the variable 'stypy_return_type' (line 521)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 521, 8), 'stypy_return_type', _hatch_101614)
        
        # ################# End of 'get_hatch(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_hatch' in the type store
        # Getting the type of 'stypy_return_type' (line 519)
        stypy_return_type_101615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101615)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_hatch'
        return stypy_return_type_101615


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 523, 4, False)
        # Assigning a type to the variable 'self' (line 524)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 524, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.draw.__dict__.__setitem__('stypy_localization', localization)
        Patch.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.draw.__dict__.__setitem__('stypy_function_name', 'Patch.draw')
        Patch.draw.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        Patch.draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.draw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.draw', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        unicode_101616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 525, 8), 'unicode', u'Draw the :class:`Patch` to the given *renderer*.')
        
        
        
        # Call to get_visible(...): (line 526)
        # Processing the call keyword arguments (line 526)
        kwargs_101619 = {}
        # Getting the type of 'self' (line 526)
        self_101617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 15), 'self', False)
        # Obtaining the member 'get_visible' of a type (line 526)
        get_visible_101618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 526, 15), self_101617, 'get_visible')
        # Calling get_visible(args, kwargs) (line 526)
        get_visible_call_result_101620 = invoke(stypy.reporting.localization.Localization(__file__, 526, 15), get_visible_101618, *[], **kwargs_101619)
        
        # Applying the 'not' unary operator (line 526)
        result_not__101621 = python_operator(stypy.reporting.localization.Localization(__file__, 526, 11), 'not', get_visible_call_result_101620)
        
        # Testing the type of an if condition (line 526)
        if_condition_101622 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 526, 8), result_not__101621)
        # Assigning a type to the variable 'if_condition_101622' (line 526)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 526, 8), 'if_condition_101622', if_condition_101622)
        # SSA begins for if statement (line 526)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 527)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 527, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 526)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to open_group(...): (line 529)
        # Processing the call arguments (line 529)
        unicode_101625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 529, 28), 'unicode', u'patch')
        
        # Call to get_gid(...): (line 529)
        # Processing the call keyword arguments (line 529)
        kwargs_101628 = {}
        # Getting the type of 'self' (line 529)
        self_101626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 37), 'self', False)
        # Obtaining the member 'get_gid' of a type (line 529)
        get_gid_101627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 529, 37), self_101626, 'get_gid')
        # Calling get_gid(args, kwargs) (line 529)
        get_gid_call_result_101629 = invoke(stypy.reporting.localization.Localization(__file__, 529, 37), get_gid_101627, *[], **kwargs_101628)
        
        # Processing the call keyword arguments (line 529)
        kwargs_101630 = {}
        # Getting the type of 'renderer' (line 529)
        renderer_101623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 8), 'renderer', False)
        # Obtaining the member 'open_group' of a type (line 529)
        open_group_101624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 529, 8), renderer_101623, 'open_group')
        # Calling open_group(args, kwargs) (line 529)
        open_group_call_result_101631 = invoke(stypy.reporting.localization.Localization(__file__, 529, 8), open_group_101624, *[unicode_101625, get_gid_call_result_101629], **kwargs_101630)
        
        
        # Assigning a Call to a Name (line 530):
        
        # Assigning a Call to a Name (line 530):
        
        # Assigning a Call to a Name (line 530):
        
        # Call to new_gc(...): (line 530)
        # Processing the call keyword arguments (line 530)
        kwargs_101634 = {}
        # Getting the type of 'renderer' (line 530)
        renderer_101632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 13), 'renderer', False)
        # Obtaining the member 'new_gc' of a type (line 530)
        new_gc_101633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 530, 13), renderer_101632, 'new_gc')
        # Calling new_gc(args, kwargs) (line 530)
        new_gc_call_result_101635 = invoke(stypy.reporting.localization.Localization(__file__, 530, 13), new_gc_101633, *[], **kwargs_101634)
        
        # Assigning a type to the variable 'gc' (line 530)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 530, 8), 'gc', new_gc_call_result_101635)
        
        # Call to set_foreground(...): (line 532)
        # Processing the call arguments (line 532)
        # Getting the type of 'self' (line 532)
        self_101638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 26), 'self', False)
        # Obtaining the member '_edgecolor' of a type (line 532)
        _edgecolor_101639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 532, 26), self_101638, '_edgecolor')
        # Processing the call keyword arguments (line 532)
        # Getting the type of 'True' (line 532)
        True_101640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 50), 'True', False)
        keyword_101641 = True_101640
        kwargs_101642 = {'isRGBA': keyword_101641}
        # Getting the type of 'gc' (line 532)
        gc_101636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 8), 'gc', False)
        # Obtaining the member 'set_foreground' of a type (line 532)
        set_foreground_101637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 532, 8), gc_101636, 'set_foreground')
        # Calling set_foreground(args, kwargs) (line 532)
        set_foreground_call_result_101643 = invoke(stypy.reporting.localization.Localization(__file__, 532, 8), set_foreground_101637, *[_edgecolor_101639], **kwargs_101642)
        
        
        # Assigning a Attribute to a Name (line 534):
        
        # Assigning a Attribute to a Name (line 534):
        
        # Assigning a Attribute to a Name (line 534):
        # Getting the type of 'self' (line 534)
        self_101644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 13), 'self')
        # Obtaining the member '_linewidth' of a type (line 534)
        _linewidth_101645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 534, 13), self_101644, '_linewidth')
        # Assigning a type to the variable 'lw' (line 534)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 534, 8), 'lw', _linewidth_101645)
        
        
        
        # Obtaining the type of the subscript
        int_101646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 535, 27), 'int')
        # Getting the type of 'self' (line 535)
        self_101647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 11), 'self')
        # Obtaining the member '_edgecolor' of a type (line 535)
        _edgecolor_101648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 535, 11), self_101647, '_edgecolor')
        # Obtaining the member '__getitem__' of a type (line 535)
        getitem___101649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 535, 11), _edgecolor_101648, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 535)
        subscript_call_result_101650 = invoke(stypy.reporting.localization.Localization(__file__, 535, 11), getitem___101649, int_101646)
        
        int_101651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 535, 33), 'int')
        # Applying the binary operator '==' (line 535)
        result_eq_101652 = python_operator(stypy.reporting.localization.Localization(__file__, 535, 11), '==', subscript_call_result_101650, int_101651)
        
        # Testing the type of an if condition (line 535)
        if_condition_101653 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 535, 8), result_eq_101652)
        # Assigning a type to the variable 'if_condition_101653' (line 535)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 535, 8), 'if_condition_101653', if_condition_101653)
        # SSA begins for if statement (line 535)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 536):
        
        # Assigning a Num to a Name (line 536):
        
        # Assigning a Num to a Name (line 536):
        int_101654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 536, 17), 'int')
        # Assigning a type to the variable 'lw' (line 536)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 536, 12), 'lw', int_101654)
        # SSA join for if statement (line 535)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_linewidth(...): (line 537)
        # Processing the call arguments (line 537)
        # Getting the type of 'lw' (line 537)
        lw_101657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 25), 'lw', False)
        # Processing the call keyword arguments (line 537)
        kwargs_101658 = {}
        # Getting the type of 'gc' (line 537)
        gc_101655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 8), 'gc', False)
        # Obtaining the member 'set_linewidth' of a type (line 537)
        set_linewidth_101656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 537, 8), gc_101655, 'set_linewidth')
        # Calling set_linewidth(args, kwargs) (line 537)
        set_linewidth_call_result_101659 = invoke(stypy.reporting.localization.Localization(__file__, 537, 8), set_linewidth_101656, *[lw_101657], **kwargs_101658)
        
        
        # Call to set_dashes(...): (line 538)
        # Processing the call arguments (line 538)
        int_101662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 538, 22), 'int')
        # Getting the type of 'self' (line 538)
        self_101663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 25), 'self', False)
        # Obtaining the member '_dashes' of a type (line 538)
        _dashes_101664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 25), self_101663, '_dashes')
        # Processing the call keyword arguments (line 538)
        kwargs_101665 = {}
        # Getting the type of 'gc' (line 538)
        gc_101660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 8), 'gc', False)
        # Obtaining the member 'set_dashes' of a type (line 538)
        set_dashes_101661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 8), gc_101660, 'set_dashes')
        # Calling set_dashes(args, kwargs) (line 538)
        set_dashes_call_result_101666 = invoke(stypy.reporting.localization.Localization(__file__, 538, 8), set_dashes_101661, *[int_101662, _dashes_101664], **kwargs_101665)
        
        
        # Call to set_capstyle(...): (line 539)
        # Processing the call arguments (line 539)
        # Getting the type of 'self' (line 539)
        self_101669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 24), 'self', False)
        # Obtaining the member '_capstyle' of a type (line 539)
        _capstyle_101670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 539, 24), self_101669, '_capstyle')
        # Processing the call keyword arguments (line 539)
        kwargs_101671 = {}
        # Getting the type of 'gc' (line 539)
        gc_101667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 8), 'gc', False)
        # Obtaining the member 'set_capstyle' of a type (line 539)
        set_capstyle_101668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 539, 8), gc_101667, 'set_capstyle')
        # Calling set_capstyle(args, kwargs) (line 539)
        set_capstyle_call_result_101672 = invoke(stypy.reporting.localization.Localization(__file__, 539, 8), set_capstyle_101668, *[_capstyle_101670], **kwargs_101671)
        
        
        # Call to set_joinstyle(...): (line 540)
        # Processing the call arguments (line 540)
        # Getting the type of 'self' (line 540)
        self_101675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 25), 'self', False)
        # Obtaining the member '_joinstyle' of a type (line 540)
        _joinstyle_101676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 540, 25), self_101675, '_joinstyle')
        # Processing the call keyword arguments (line 540)
        kwargs_101677 = {}
        # Getting the type of 'gc' (line 540)
        gc_101673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 8), 'gc', False)
        # Obtaining the member 'set_joinstyle' of a type (line 540)
        set_joinstyle_101674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 540, 8), gc_101673, 'set_joinstyle')
        # Calling set_joinstyle(args, kwargs) (line 540)
        set_joinstyle_call_result_101678 = invoke(stypy.reporting.localization.Localization(__file__, 540, 8), set_joinstyle_101674, *[_joinstyle_101676], **kwargs_101677)
        
        
        # Call to set_antialiased(...): (line 542)
        # Processing the call arguments (line 542)
        # Getting the type of 'self' (line 542)
        self_101681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 27), 'self', False)
        # Obtaining the member '_antialiased' of a type (line 542)
        _antialiased_101682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 542, 27), self_101681, '_antialiased')
        # Processing the call keyword arguments (line 542)
        kwargs_101683 = {}
        # Getting the type of 'gc' (line 542)
        gc_101679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 8), 'gc', False)
        # Obtaining the member 'set_antialiased' of a type (line 542)
        set_antialiased_101680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 542, 8), gc_101679, 'set_antialiased')
        # Calling set_antialiased(args, kwargs) (line 542)
        set_antialiased_call_result_101684 = invoke(stypy.reporting.localization.Localization(__file__, 542, 8), set_antialiased_101680, *[_antialiased_101682], **kwargs_101683)
        
        
        # Call to _set_gc_clip(...): (line 543)
        # Processing the call arguments (line 543)
        # Getting the type of 'gc' (line 543)
        gc_101687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 26), 'gc', False)
        # Processing the call keyword arguments (line 543)
        kwargs_101688 = {}
        # Getting the type of 'self' (line 543)
        self_101685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 8), 'self', False)
        # Obtaining the member '_set_gc_clip' of a type (line 543)
        _set_gc_clip_101686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 543, 8), self_101685, '_set_gc_clip')
        # Calling _set_gc_clip(args, kwargs) (line 543)
        _set_gc_clip_call_result_101689 = invoke(stypy.reporting.localization.Localization(__file__, 543, 8), _set_gc_clip_101686, *[gc_101687], **kwargs_101688)
        
        
        # Call to set_url(...): (line 544)
        # Processing the call arguments (line 544)
        # Getting the type of 'self' (line 544)
        self_101692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 19), 'self', False)
        # Obtaining the member '_url' of a type (line 544)
        _url_101693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 544, 19), self_101692, '_url')
        # Processing the call keyword arguments (line 544)
        kwargs_101694 = {}
        # Getting the type of 'gc' (line 544)
        gc_101690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 8), 'gc', False)
        # Obtaining the member 'set_url' of a type (line 544)
        set_url_101691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 544, 8), gc_101690, 'set_url')
        # Calling set_url(args, kwargs) (line 544)
        set_url_call_result_101695 = invoke(stypy.reporting.localization.Localization(__file__, 544, 8), set_url_101691, *[_url_101693], **kwargs_101694)
        
        
        # Call to set_snap(...): (line 545)
        # Processing the call arguments (line 545)
        
        # Call to get_snap(...): (line 545)
        # Processing the call keyword arguments (line 545)
        kwargs_101700 = {}
        # Getting the type of 'self' (line 545)
        self_101698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 20), 'self', False)
        # Obtaining the member 'get_snap' of a type (line 545)
        get_snap_101699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 545, 20), self_101698, 'get_snap')
        # Calling get_snap(args, kwargs) (line 545)
        get_snap_call_result_101701 = invoke(stypy.reporting.localization.Localization(__file__, 545, 20), get_snap_101699, *[], **kwargs_101700)
        
        # Processing the call keyword arguments (line 545)
        kwargs_101702 = {}
        # Getting the type of 'gc' (line 545)
        gc_101696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 8), 'gc', False)
        # Obtaining the member 'set_snap' of a type (line 545)
        set_snap_101697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 545, 8), gc_101696, 'set_snap')
        # Calling set_snap(args, kwargs) (line 545)
        set_snap_call_result_101703 = invoke(stypy.reporting.localization.Localization(__file__, 545, 8), set_snap_101697, *[get_snap_call_result_101701], **kwargs_101702)
        
        
        # Assigning a Attribute to a Name (line 547):
        
        # Assigning a Attribute to a Name (line 547):
        
        # Assigning a Attribute to a Name (line 547):
        # Getting the type of 'self' (line 547)
        self_101704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 18), 'self')
        # Obtaining the member '_facecolor' of a type (line 547)
        _facecolor_101705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 547, 18), self_101704, '_facecolor')
        # Assigning a type to the variable 'rgbFace' (line 547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 547, 8), 'rgbFace', _facecolor_101705)
        
        
        
        # Obtaining the type of the subscript
        int_101706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 548, 19), 'int')
        # Getting the type of 'rgbFace' (line 548)
        rgbFace_101707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 11), 'rgbFace')
        # Obtaining the member '__getitem__' of a type (line 548)
        getitem___101708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 548, 11), rgbFace_101707, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 548)
        subscript_call_result_101709 = invoke(stypy.reporting.localization.Localization(__file__, 548, 11), getitem___101708, int_101706)
        
        int_101710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 548, 25), 'int')
        # Applying the binary operator '==' (line 548)
        result_eq_101711 = python_operator(stypy.reporting.localization.Localization(__file__, 548, 11), '==', subscript_call_result_101709, int_101710)
        
        # Testing the type of an if condition (line 548)
        if_condition_101712 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 548, 8), result_eq_101711)
        # Assigning a type to the variable 'if_condition_101712' (line 548)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 548, 8), 'if_condition_101712', if_condition_101712)
        # SSA begins for if statement (line 548)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 549):
        
        # Assigning a Name to a Name (line 549):
        
        # Assigning a Name to a Name (line 549):
        # Getting the type of 'None' (line 549)
        None_101713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 22), 'None')
        # Assigning a type to the variable 'rgbFace' (line 549)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 549, 12), 'rgbFace', None_101713)
        # SSA join for if statement (line 548)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_alpha(...): (line 551)
        # Processing the call arguments (line 551)
        # Getting the type of 'self' (line 551)
        self_101716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 21), 'self', False)
        # Obtaining the member '_alpha' of a type (line 551)
        _alpha_101717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 551, 21), self_101716, '_alpha')
        # Processing the call keyword arguments (line 551)
        kwargs_101718 = {}
        # Getting the type of 'gc' (line 551)
        gc_101714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 8), 'gc', False)
        # Obtaining the member 'set_alpha' of a type (line 551)
        set_alpha_101715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 551, 8), gc_101714, 'set_alpha')
        # Calling set_alpha(args, kwargs) (line 551)
        set_alpha_call_result_101719 = invoke(stypy.reporting.localization.Localization(__file__, 551, 8), set_alpha_101715, *[_alpha_101717], **kwargs_101718)
        
        
        # Getting the type of 'self' (line 553)
        self_101720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 11), 'self')
        # Obtaining the member '_hatch' of a type (line 553)
        _hatch_101721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 11), self_101720, '_hatch')
        # Testing the type of an if condition (line 553)
        if_condition_101722 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 553, 8), _hatch_101721)
        # Assigning a type to the variable 'if_condition_101722' (line 553)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 553, 8), 'if_condition_101722', if_condition_101722)
        # SSA begins for if statement (line 553)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_hatch(...): (line 554)
        # Processing the call arguments (line 554)
        # Getting the type of 'self' (line 554)
        self_101725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 25), 'self', False)
        # Obtaining the member '_hatch' of a type (line 554)
        _hatch_101726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 554, 25), self_101725, '_hatch')
        # Processing the call keyword arguments (line 554)
        kwargs_101727 = {}
        # Getting the type of 'gc' (line 554)
        gc_101723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 12), 'gc', False)
        # Obtaining the member 'set_hatch' of a type (line 554)
        set_hatch_101724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 554, 12), gc_101723, 'set_hatch')
        # Calling set_hatch(args, kwargs) (line 554)
        set_hatch_call_result_101728 = invoke(stypy.reporting.localization.Localization(__file__, 554, 12), set_hatch_101724, *[_hatch_101726], **kwargs_101727)
        
        
        
        # SSA begins for try-except statement (line 555)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to set_hatch_color(...): (line 556)
        # Processing the call arguments (line 556)
        # Getting the type of 'self' (line 556)
        self_101731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 35), 'self', False)
        # Obtaining the member '_hatch_color' of a type (line 556)
        _hatch_color_101732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 556, 35), self_101731, '_hatch_color')
        # Processing the call keyword arguments (line 556)
        kwargs_101733 = {}
        # Getting the type of 'gc' (line 556)
        gc_101729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 16), 'gc', False)
        # Obtaining the member 'set_hatch_color' of a type (line 556)
        set_hatch_color_101730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 556, 16), gc_101729, 'set_hatch_color')
        # Calling set_hatch_color(args, kwargs) (line 556)
        set_hatch_color_call_result_101734 = invoke(stypy.reporting.localization.Localization(__file__, 556, 16), set_hatch_color_101730, *[_hatch_color_101732], **kwargs_101733)
        
        # SSA branch for the except part of a try statement (line 555)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 555)
        module_type_store.open_ssa_branch('except')
        
        # Call to warn(...): (line 559)
        # Processing the call arguments (line 559)
        unicode_101737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 559, 30), 'unicode', u'Your backend does not have support for setting the hatch color.')
        # Processing the call keyword arguments (line 559)
        kwargs_101738 = {}
        # Getting the type of 'warnings' (line 559)
        warnings_101735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 16), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 559)
        warn_101736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 559, 16), warnings_101735, 'warn')
        # Calling warn(args, kwargs) (line 559)
        warn_call_result_101739 = invoke(stypy.reporting.localization.Localization(__file__, 559, 16), warn_101736, *[unicode_101737], **kwargs_101738)
        
        # SSA join for try-except statement (line 555)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 553)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to get_sketch_params(...): (line 562)
        # Processing the call keyword arguments (line 562)
        kwargs_101742 = {}
        # Getting the type of 'self' (line 562)
        self_101740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 11), 'self', False)
        # Obtaining the member 'get_sketch_params' of a type (line 562)
        get_sketch_params_101741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 562, 11), self_101740, 'get_sketch_params')
        # Calling get_sketch_params(args, kwargs) (line 562)
        get_sketch_params_call_result_101743 = invoke(stypy.reporting.localization.Localization(__file__, 562, 11), get_sketch_params_101741, *[], **kwargs_101742)
        
        # Getting the type of 'None' (line 562)
        None_101744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 43), 'None')
        # Applying the binary operator 'isnot' (line 562)
        result_is_not_101745 = python_operator(stypy.reporting.localization.Localization(__file__, 562, 11), 'isnot', get_sketch_params_call_result_101743, None_101744)
        
        # Testing the type of an if condition (line 562)
        if_condition_101746 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 562, 8), result_is_not_101745)
        # Assigning a type to the variable 'if_condition_101746' (line 562)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 562, 8), 'if_condition_101746', if_condition_101746)
        # SSA begins for if statement (line 562)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_sketch_params(...): (line 563)
        
        # Call to get_sketch_params(...): (line 563)
        # Processing the call keyword arguments (line 563)
        kwargs_101751 = {}
        # Getting the type of 'self' (line 563)
        self_101749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 34), 'self', False)
        # Obtaining the member 'get_sketch_params' of a type (line 563)
        get_sketch_params_101750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 563, 34), self_101749, 'get_sketch_params')
        # Calling get_sketch_params(args, kwargs) (line 563)
        get_sketch_params_call_result_101752 = invoke(stypy.reporting.localization.Localization(__file__, 563, 34), get_sketch_params_101750, *[], **kwargs_101751)
        
        # Processing the call keyword arguments (line 563)
        kwargs_101753 = {}
        # Getting the type of 'gc' (line 563)
        gc_101747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 12), 'gc', False)
        # Obtaining the member 'set_sketch_params' of a type (line 563)
        set_sketch_params_101748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 563, 12), gc_101747, 'set_sketch_params')
        # Calling set_sketch_params(args, kwargs) (line 563)
        set_sketch_params_call_result_101754 = invoke(stypy.reporting.localization.Localization(__file__, 563, 12), set_sketch_params_101748, *[get_sketch_params_call_result_101752], **kwargs_101753)
        
        # SSA join for if statement (line 562)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 565):
        
        # Assigning a Call to a Name (line 565):
        
        # Assigning a Call to a Name (line 565):
        
        # Call to get_path(...): (line 565)
        # Processing the call keyword arguments (line 565)
        kwargs_101757 = {}
        # Getting the type of 'self' (line 565)
        self_101755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 15), 'self', False)
        # Obtaining the member 'get_path' of a type (line 565)
        get_path_101756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 565, 15), self_101755, 'get_path')
        # Calling get_path(args, kwargs) (line 565)
        get_path_call_result_101758 = invoke(stypy.reporting.localization.Localization(__file__, 565, 15), get_path_101756, *[], **kwargs_101757)
        
        # Assigning a type to the variable 'path' (line 565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 565, 8), 'path', get_path_call_result_101758)
        
        # Assigning a Call to a Name (line 566):
        
        # Assigning a Call to a Name (line 566):
        
        # Assigning a Call to a Name (line 566):
        
        # Call to get_transform(...): (line 566)
        # Processing the call keyword arguments (line 566)
        kwargs_101761 = {}
        # Getting the type of 'self' (line 566)
        self_101759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 20), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 566)
        get_transform_101760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 566, 20), self_101759, 'get_transform')
        # Calling get_transform(args, kwargs) (line 566)
        get_transform_call_result_101762 = invoke(stypy.reporting.localization.Localization(__file__, 566, 20), get_transform_101760, *[], **kwargs_101761)
        
        # Assigning a type to the variable 'transform' (line 566)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 566, 8), 'transform', get_transform_call_result_101762)
        
        # Assigning a Call to a Name (line 567):
        
        # Assigning a Call to a Name (line 567):
        
        # Assigning a Call to a Name (line 567):
        
        # Call to transform_path_non_affine(...): (line 567)
        # Processing the call arguments (line 567)
        # Getting the type of 'path' (line 567)
        path_101765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 52), 'path', False)
        # Processing the call keyword arguments (line 567)
        kwargs_101766 = {}
        # Getting the type of 'transform' (line 567)
        transform_101763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 16), 'transform', False)
        # Obtaining the member 'transform_path_non_affine' of a type (line 567)
        transform_path_non_affine_101764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 567, 16), transform_101763, 'transform_path_non_affine')
        # Calling transform_path_non_affine(args, kwargs) (line 567)
        transform_path_non_affine_call_result_101767 = invoke(stypy.reporting.localization.Localization(__file__, 567, 16), transform_path_non_affine_101764, *[path_101765], **kwargs_101766)
        
        # Assigning a type to the variable 'tpath' (line 567)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 567, 8), 'tpath', transform_path_non_affine_call_result_101767)
        
        # Assigning a Call to a Name (line 568):
        
        # Assigning a Call to a Name (line 568):
        
        # Assigning a Call to a Name (line 568):
        
        # Call to get_affine(...): (line 568)
        # Processing the call keyword arguments (line 568)
        kwargs_101770 = {}
        # Getting the type of 'transform' (line 568)
        transform_101768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 17), 'transform', False)
        # Obtaining the member 'get_affine' of a type (line 568)
        get_affine_101769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 568, 17), transform_101768, 'get_affine')
        # Calling get_affine(args, kwargs) (line 568)
        get_affine_call_result_101771 = invoke(stypy.reporting.localization.Localization(__file__, 568, 17), get_affine_101769, *[], **kwargs_101770)
        
        # Assigning a type to the variable 'affine' (line 568)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 568, 8), 'affine', get_affine_call_result_101771)
        
        
        # Call to get_path_effects(...): (line 570)
        # Processing the call keyword arguments (line 570)
        kwargs_101774 = {}
        # Getting the type of 'self' (line 570)
        self_101772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 11), 'self', False)
        # Obtaining the member 'get_path_effects' of a type (line 570)
        get_path_effects_101773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 570, 11), self_101772, 'get_path_effects')
        # Calling get_path_effects(args, kwargs) (line 570)
        get_path_effects_call_result_101775 = invoke(stypy.reporting.localization.Localization(__file__, 570, 11), get_path_effects_101773, *[], **kwargs_101774)
        
        # Testing the type of an if condition (line 570)
        if_condition_101776 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 570, 8), get_path_effects_call_result_101775)
        # Assigning a type to the variable 'if_condition_101776' (line 570)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 570, 8), 'if_condition_101776', if_condition_101776)
        # SSA begins for if statement (line 570)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 571, 12))
        
        # 'from matplotlib.patheffects import PathEffectRenderer' statement (line 571)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_101777 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 571, 12), 'matplotlib.patheffects')

        if (type(import_101777) is not StypyTypeError):

            if (import_101777 != 'pyd_module'):
                __import__(import_101777)
                sys_modules_101778 = sys.modules[import_101777]
                import_from_module(stypy.reporting.localization.Localization(__file__, 571, 12), 'matplotlib.patheffects', sys_modules_101778.module_type_store, module_type_store, ['PathEffectRenderer'])
                nest_module(stypy.reporting.localization.Localization(__file__, 571, 12), __file__, sys_modules_101778, sys_modules_101778.module_type_store, module_type_store)
            else:
                from matplotlib.patheffects import PathEffectRenderer

                import_from_module(stypy.reporting.localization.Localization(__file__, 571, 12), 'matplotlib.patheffects', None, module_type_store, ['PathEffectRenderer'], [PathEffectRenderer])

        else:
            # Assigning a type to the variable 'matplotlib.patheffects' (line 571)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 571, 12), 'matplotlib.patheffects', import_101777)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Assigning a Call to a Name (line 572):
        
        # Assigning a Call to a Name (line 572):
        
        # Assigning a Call to a Name (line 572):
        
        # Call to PathEffectRenderer(...): (line 572)
        # Processing the call arguments (line 572)
        
        # Call to get_path_effects(...): (line 572)
        # Processing the call keyword arguments (line 572)
        kwargs_101782 = {}
        # Getting the type of 'self' (line 572)
        self_101780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 42), 'self', False)
        # Obtaining the member 'get_path_effects' of a type (line 572)
        get_path_effects_101781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 572, 42), self_101780, 'get_path_effects')
        # Calling get_path_effects(args, kwargs) (line 572)
        get_path_effects_call_result_101783 = invoke(stypy.reporting.localization.Localization(__file__, 572, 42), get_path_effects_101781, *[], **kwargs_101782)
        
        # Getting the type of 'renderer' (line 572)
        renderer_101784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 67), 'renderer', False)
        # Processing the call keyword arguments (line 572)
        kwargs_101785 = {}
        # Getting the type of 'PathEffectRenderer' (line 572)
        PathEffectRenderer_101779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 23), 'PathEffectRenderer', False)
        # Calling PathEffectRenderer(args, kwargs) (line 572)
        PathEffectRenderer_call_result_101786 = invoke(stypy.reporting.localization.Localization(__file__, 572, 23), PathEffectRenderer_101779, *[get_path_effects_call_result_101783, renderer_101784], **kwargs_101785)
        
        # Assigning a type to the variable 'renderer' (line 572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 572, 12), 'renderer', PathEffectRenderer_call_result_101786)
        # SSA join for if statement (line 570)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to draw_path(...): (line 574)
        # Processing the call arguments (line 574)
        # Getting the type of 'gc' (line 574)
        gc_101789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 27), 'gc', False)
        # Getting the type of 'tpath' (line 574)
        tpath_101790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 31), 'tpath', False)
        # Getting the type of 'affine' (line 574)
        affine_101791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 38), 'affine', False)
        # Getting the type of 'rgbFace' (line 574)
        rgbFace_101792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 46), 'rgbFace', False)
        # Processing the call keyword arguments (line 574)
        kwargs_101793 = {}
        # Getting the type of 'renderer' (line 574)
        renderer_101787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 8), 'renderer', False)
        # Obtaining the member 'draw_path' of a type (line 574)
        draw_path_101788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 574, 8), renderer_101787, 'draw_path')
        # Calling draw_path(args, kwargs) (line 574)
        draw_path_call_result_101794 = invoke(stypy.reporting.localization.Localization(__file__, 574, 8), draw_path_101788, *[gc_101789, tpath_101790, affine_101791, rgbFace_101792], **kwargs_101793)
        
        
        # Call to restore(...): (line 576)
        # Processing the call keyword arguments (line 576)
        kwargs_101797 = {}
        # Getting the type of 'gc' (line 576)
        gc_101795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 8), 'gc', False)
        # Obtaining the member 'restore' of a type (line 576)
        restore_101796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 576, 8), gc_101795, 'restore')
        # Calling restore(args, kwargs) (line 576)
        restore_call_result_101798 = invoke(stypy.reporting.localization.Localization(__file__, 576, 8), restore_101796, *[], **kwargs_101797)
        
        
        # Call to close_group(...): (line 577)
        # Processing the call arguments (line 577)
        unicode_101801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 577, 29), 'unicode', u'patch')
        # Processing the call keyword arguments (line 577)
        kwargs_101802 = {}
        # Getting the type of 'renderer' (line 577)
        renderer_101799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 8), 'renderer', False)
        # Obtaining the member 'close_group' of a type (line 577)
        close_group_101800 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 8), renderer_101799, 'close_group')
        # Calling close_group(args, kwargs) (line 577)
        close_group_call_result_101803 = invoke(stypy.reporting.localization.Localization(__file__, 577, 8), close_group_101800, *[unicode_101801], **kwargs_101802)
        
        
        # Assigning a Name to a Attribute (line 578):
        
        # Assigning a Name to a Attribute (line 578):
        
        # Assigning a Name to a Attribute (line 578):
        # Getting the type of 'False' (line 578)
        False_101804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 21), 'False')
        # Getting the type of 'self' (line 578)
        self_101805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 578)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 8), self_101805, 'stale', False_101804)
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 523)
        stypy_return_type_101806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101806)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_101806


    @norecursion
    def get_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_path'
        module_type_store = module_type_store.open_function_context('get_path', 580, 4, False)
        # Assigning a type to the variable 'self' (line 581)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 581, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.get_path.__dict__.__setitem__('stypy_localization', localization)
        Patch.get_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.get_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.get_path.__dict__.__setitem__('stypy_function_name', 'Patch.get_path')
        Patch.get_path.__dict__.__setitem__('stypy_param_names_list', [])
        Patch.get_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.get_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.get_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.get_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.get_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.get_path.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.get_path', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_path', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_path(...)' code ##################

        unicode_101807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 583, (-1)), 'unicode', u'\n        Return the path of this patch\n        ')
        
        # Call to NotImplementedError(...): (line 584)
        # Processing the call arguments (line 584)
        unicode_101809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 584, 34), 'unicode', u'Derived must override')
        # Processing the call keyword arguments (line 584)
        kwargs_101810 = {}
        # Getting the type of 'NotImplementedError' (line 584)
        NotImplementedError_101808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 584)
        NotImplementedError_call_result_101811 = invoke(stypy.reporting.localization.Localization(__file__, 584, 14), NotImplementedError_101808, *[unicode_101809], **kwargs_101810)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 584, 8), NotImplementedError_call_result_101811, 'raise parameter', BaseException)
        
        # ################# End of 'get_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_path' in the type store
        # Getting the type of 'stypy_return_type' (line 580)
        stypy_return_type_101812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101812)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_path'
        return stypy_return_type_101812


    @norecursion
    def get_window_extent(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 586)
        None_101813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 41), 'None')
        defaults = [None_101813]
        # Create a new context for function 'get_window_extent'
        module_type_store = module_type_store.open_function_context('get_window_extent', 586, 4, False)
        # Assigning a type to the variable 'self' (line 587)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 587, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Patch.get_window_extent.__dict__.__setitem__('stypy_localization', localization)
        Patch.get_window_extent.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Patch.get_window_extent.__dict__.__setitem__('stypy_type_store', module_type_store)
        Patch.get_window_extent.__dict__.__setitem__('stypy_function_name', 'Patch.get_window_extent')
        Patch.get_window_extent.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        Patch.get_window_extent.__dict__.__setitem__('stypy_varargs_param_name', None)
        Patch.get_window_extent.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Patch.get_window_extent.__dict__.__setitem__('stypy_call_defaults', defaults)
        Patch.get_window_extent.__dict__.__setitem__('stypy_call_varargs', varargs)
        Patch.get_window_extent.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Patch.get_window_extent.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Patch.get_window_extent', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_window_extent', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_window_extent(...)' code ##################

        
        # Call to get_extents(...): (line 587)
        # Processing the call arguments (line 587)
        
        # Call to get_transform(...): (line 587)
        # Processing the call keyword arguments (line 587)
        kwargs_101821 = {}
        # Getting the type of 'self' (line 587)
        self_101819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 43), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 587)
        get_transform_101820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 587, 43), self_101819, 'get_transform')
        # Calling get_transform(args, kwargs) (line 587)
        get_transform_call_result_101822 = invoke(stypy.reporting.localization.Localization(__file__, 587, 43), get_transform_101820, *[], **kwargs_101821)
        
        # Processing the call keyword arguments (line 587)
        kwargs_101823 = {}
        
        # Call to get_path(...): (line 587)
        # Processing the call keyword arguments (line 587)
        kwargs_101816 = {}
        # Getting the type of 'self' (line 587)
        self_101814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 15), 'self', False)
        # Obtaining the member 'get_path' of a type (line 587)
        get_path_101815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 587, 15), self_101814, 'get_path')
        # Calling get_path(args, kwargs) (line 587)
        get_path_call_result_101817 = invoke(stypy.reporting.localization.Localization(__file__, 587, 15), get_path_101815, *[], **kwargs_101816)
        
        # Obtaining the member 'get_extents' of a type (line 587)
        get_extents_101818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 587, 15), get_path_call_result_101817, 'get_extents')
        # Calling get_extents(args, kwargs) (line 587)
        get_extents_call_result_101824 = invoke(stypy.reporting.localization.Localization(__file__, 587, 15), get_extents_101818, *[get_transform_call_result_101822], **kwargs_101823)
        
        # Assigning a type to the variable 'stypy_return_type' (line 587)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 587, 8), 'stypy_return_type', get_extents_call_result_101824)
        
        # ################# End of 'get_window_extent(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_window_extent' in the type store
        # Getting the type of 'stypy_return_type' (line 586)
        stypy_return_type_101825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101825)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_window_extent'
        return stypy_return_type_101825


# Assigning a type to the variable 'Patch' (line 69)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 69, 0), 'Patch', Patch)

# Assigning a Num to a Name (line 76):
int_101826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 76, 13), 'int')
# Getting the type of 'Patch'
Patch_101827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Patch')
# Setting the type of the member 'zorder' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Patch_101827, 'zorder', int_101826)

# Assigning a Tuple to a Name (line 77):

# Obtaining an instance of the builtin type 'tuple' (line 77)
tuple_101828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 77, 16), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 77)
# Adding element type (line 77)
unicode_101829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 77, 16), 'unicode', u'butt')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 77, 16), tuple_101828, unicode_101829)
# Adding element type (line 77)
unicode_101830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 77, 24), 'unicode', u'round')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 77, 16), tuple_101828, unicode_101830)
# Adding element type (line 77)
unicode_101831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 77, 33), 'unicode', u'projecting')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 77, 16), tuple_101828, unicode_101831)

# Getting the type of 'Patch'
Patch_101832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Patch')
# Setting the type of the member 'validCap' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Patch_101832, 'validCap', tuple_101828)

# Assigning a Tuple to a Name (line 78):

# Obtaining an instance of the builtin type 'tuple' (line 78)
tuple_101833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 78, 17), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 78)
# Adding element type (line 78)
unicode_101834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 78, 17), 'unicode', u'miter')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 78, 17), tuple_101833, unicode_101834)
# Adding element type (line 78)
unicode_101835 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 78, 26), 'unicode', u'round')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 78, 17), tuple_101833, unicode_101835)
# Adding element type (line 78)
unicode_101836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 78, 35), 'unicode', u'bevel')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 78, 17), tuple_101833, unicode_101836)

# Getting the type of 'Patch'
Patch_101837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Patch')
# Setting the type of the member 'validJoin' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Patch_101837, 'validJoin', tuple_101833)

# Assigning a Name to a Name (line 82):
# Getting the type of 'False' (line 82)
False_101838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 82, 20), 'False')
# Getting the type of 'Patch'
Patch_101839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Patch')
# Setting the type of the member '_edge_default' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Patch_101839, '_edge_default', False_101838)

# Assigning a Name to a Name (line 246):
# Getting the type of 'Patch'
Patch_101840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Patch')
# Obtaining the member 'get_antialiased' of a type
get_antialiased_101841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Patch_101840, 'get_antialiased')
# Getting the type of 'Patch'
Patch_101842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Patch')
# Setting the type of the member 'get_aa' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Patch_101842, 'get_aa', get_antialiased_101841)

# Assigning a Name to a Name (line 253):
# Getting the type of 'Patch'
Patch_101843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Patch')
# Obtaining the member 'get_edgecolor' of a type
get_edgecolor_101844 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Patch_101843, 'get_edgecolor')
# Getting the type of 'Patch'
Patch_101845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Patch')
# Setting the type of the member 'get_ec' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Patch_101845, 'get_ec', get_edgecolor_101844)

# Assigning a Name to a Name (line 260):
# Getting the type of 'Patch'
Patch_101846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Patch')
# Obtaining the member 'get_facecolor' of a type
get_facecolor_101847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Patch_101846, 'get_facecolor')
# Getting the type of 'Patch'
Patch_101848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Patch')
# Setting the type of the member 'get_fc' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Patch_101848, 'get_fc', get_facecolor_101847)

# Assigning a Name to a Name (line 267):
# Getting the type of 'Patch'
Patch_101849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Patch')
# Obtaining the member 'get_linewidth' of a type
get_linewidth_101850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Patch_101849, 'get_linewidth')
# Getting the type of 'Patch'
Patch_101851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Patch')
# Setting the type of the member 'get_lw' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Patch_101851, 'get_lw', get_linewidth_101850)

# Assigning a Name to a Name (line 275):
# Getting the type of 'Patch'
Patch_101852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Patch')
# Obtaining the member 'get_linestyle' of a type
get_linestyle_101853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Patch_101852, 'get_linestyle')
# Getting the type of 'Patch'
Patch_101854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Patch')
# Setting the type of the member 'get_ls' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Patch_101854, 'get_ls', get_linestyle_101853)

# Assigning a Call to a Name (line 454):

# Call to property(...): (line 454)
# Processing the call arguments (line 454)
# Getting the type of 'Patch'
Patch_101856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Patch', False)
# Obtaining the member 'get_fill' of a type
get_fill_101857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Patch_101856, 'get_fill')
# Getting the type of 'Patch'
Patch_101858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Patch', False)
# Obtaining the member 'set_fill' of a type
set_fill_101859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Patch_101858, 'set_fill')
# Processing the call keyword arguments (line 454)
kwargs_101860 = {}
# Getting the type of 'property' (line 454)
property_101855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 11), 'property', False)
# Calling property(args, kwargs) (line 454)
property_call_result_101861 = invoke(stypy.reporting.localization.Localization(__file__, 454, 11), property_101855, *[get_fill_101857, set_fill_101859], **kwargs_101860)

# Getting the type of 'Patch'
Patch_101862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Patch')
# Setting the type of the member 'fill' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Patch_101862, 'fill', property_call_result_101861)

# Assigning a Call to a Name (line 590):

# Assigning a Call to a Name (line 590):

# Assigning a Call to a Name (line 590):

# Call to kwdoc(...): (line 590)
# Processing the call arguments (line 590)
# Getting the type of 'Patch' (line 590)
Patch_101865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 24), 'Patch', False)
# Processing the call keyword arguments (line 590)
kwargs_101866 = {}
# Getting the type of 'artist' (line 590)
artist_101863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 11), 'artist', False)
# Obtaining the member 'kwdoc' of a type (line 590)
kwdoc_101864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 11), artist_101863, 'kwdoc')
# Calling kwdoc(args, kwargs) (line 590)
kwdoc_call_result_101867 = invoke(stypy.reporting.localization.Localization(__file__, 590, 11), kwdoc_101864, *[Patch_101865], **kwargs_101866)

# Assigning a type to the variable 'patchdoc' (line 590)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 590, 0), 'patchdoc', kwdoc_call_result_101867)


# Obtaining an instance of the builtin type 'tuple' (line 591)
tuple_101868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 591, 10), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 591)
# Adding element type (line 591)
unicode_101869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 591, 10), 'unicode', u'Rectangle')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 591, 10), tuple_101868, unicode_101869)
# Adding element type (line 591)
unicode_101870 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 591, 23), 'unicode', u'Circle')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 591, 10), tuple_101868, unicode_101870)
# Adding element type (line 591)
unicode_101871 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 591, 33), 'unicode', u'RegularPolygon')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 591, 10), tuple_101868, unicode_101871)
# Adding element type (line 591)
unicode_101872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 591, 51), 'unicode', u'Polygon')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 591, 10), tuple_101868, unicode_101872)
# Adding element type (line 591)
unicode_101873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 591, 62), 'unicode', u'Wedge')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 591, 10), tuple_101868, unicode_101873)
# Adding element type (line 591)
unicode_101874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 591, 71), 'unicode', u'Arrow')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 591, 10), tuple_101868, unicode_101874)
# Adding element type (line 591)
unicode_101875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 592, 10), 'unicode', u'FancyArrow')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 591, 10), tuple_101868, unicode_101875)
# Adding element type (line 591)
unicode_101876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 592, 24), 'unicode', u'YAArrow')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 591, 10), tuple_101868, unicode_101876)
# Adding element type (line 591)
unicode_101877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 592, 35), 'unicode', u'CirclePolygon')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 591, 10), tuple_101868, unicode_101877)
# Adding element type (line 591)
unicode_101878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 592, 52), 'unicode', u'Ellipse')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 591, 10), tuple_101868, unicode_101878)
# Adding element type (line 591)
unicode_101879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 592, 63), 'unicode', u'Arc')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 591, 10), tuple_101868, unicode_101879)
# Adding element type (line 591)
unicode_101880 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 593, 10), 'unicode', u'FancyBboxPatch')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 591, 10), tuple_101868, unicode_101880)
# Adding element type (line 591)
unicode_101881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 593, 28), 'unicode', u'Patch')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 591, 10), tuple_101868, unicode_101881)

# Testing the type of a for loop iterable (line 591)
is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 591, 0), tuple_101868)
# Getting the type of the for loop variable (line 591)
for_loop_var_101882 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 591, 0), tuple_101868)
# Assigning a type to the variable 'k' (line 591)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 591, 0), 'k', for_loop_var_101882)
# SSA begins for a for statement (line 591)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')

# Call to update(...): (line 594)
# Processing the call arguments (line 594)

# Obtaining an instance of the builtin type 'dict' (line 594)
dict_101886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 594, 29), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 594)
# Adding element type (key, value) (line 594)
# Getting the type of 'k' (line 594)
k_101887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 30), 'k', False)
# Getting the type of 'patchdoc' (line 594)
patchdoc_101888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 33), 'patchdoc', False)
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 594, 29), dict_101886, (k_101887, patchdoc_101888))

# Processing the call keyword arguments (line 594)
kwargs_101889 = {}
# Getting the type of 'docstring' (line 594)
docstring_101883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 4), 'docstring', False)
# Obtaining the member 'interpd' of a type (line 594)
interpd_101884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 594, 4), docstring_101883, 'interpd')
# Obtaining the member 'update' of a type (line 594)
update_101885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 594, 4), interpd_101884, 'update')
# Calling update(args, kwargs) (line 594)
update_call_result_101890 = invoke(stypy.reporting.localization.Localization(__file__, 594, 4), update_101885, *[dict_101886], **kwargs_101889)

# SSA join for a for statement
module_type_store = module_type_store.join_ssa_context()


# Call to dedent_interpd(...): (line 597)
# Processing the call arguments (line 597)
# Getting the type of 'Patch' (line 597)
Patch_101893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 25), 'Patch', False)
# Obtaining the member '__init__' of a type (line 597)
init___101894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 597, 25), Patch_101893, '__init__')
# Processing the call keyword arguments (line 597)
kwargs_101895 = {}
# Getting the type of 'docstring' (line 597)
docstring_101891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 0), 'docstring', False)
# Obtaining the member 'dedent_interpd' of a type (line 597)
dedent_interpd_101892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 597, 0), docstring_101891, 'dedent_interpd')
# Calling dedent_interpd(args, kwargs) (line 597)
dedent_interpd_call_result_101896 = invoke(stypy.reporting.localization.Localization(__file__, 597, 0), dedent_interpd_101892, *[init___101894], **kwargs_101895)

# Declaration of the 'Shadow' class
# Getting the type of 'Patch' (line 600)
Patch_101897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 13), 'Patch')

class Shadow(Patch_101897, ):

    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 601, 4, False)
        # Assigning a type to the variable 'self' (line 602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Shadow.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        Shadow.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Shadow.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Shadow.stypy__str__.__dict__.__setitem__('stypy_function_name', 'Shadow.stypy__str__')
        Shadow.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        Shadow.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Shadow.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Shadow.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Shadow.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Shadow.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Shadow.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Shadow.stypy__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        unicode_101898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 602, 15), 'unicode', u'Shadow(%s)')
        
        # Call to str(...): (line 602)
        # Processing the call arguments (line 602)
        # Getting the type of 'self' (line 602)
        self_101900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 35), 'self', False)
        # Obtaining the member 'patch' of a type (line 602)
        patch_101901 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 602, 35), self_101900, 'patch')
        # Processing the call keyword arguments (line 602)
        kwargs_101902 = {}
        # Getting the type of 'str' (line 602)
        str_101899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 31), 'str', False)
        # Calling str(args, kwargs) (line 602)
        str_call_result_101903 = invoke(stypy.reporting.localization.Localization(__file__, 602, 31), str_101899, *[patch_101901], **kwargs_101902)
        
        # Applying the binary operator '%' (line 602)
        result_mod_101904 = python_operator(stypy.reporting.localization.Localization(__file__, 602, 15), '%', unicode_101898, str_call_result_101903)
        
        # Assigning a type to the variable 'stypy_return_type' (line 602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 8), 'stypy_return_type', result_mod_101904)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 601)
        stypy_return_type_101905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101905)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_101905


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 605)
        None_101906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 44), 'None')
        defaults = [None_101906]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 604, 4, False)
        # Assigning a type to the variable 'self' (line 605)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 605, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Shadow.__init__', ['patch', 'ox', 'oy', 'props'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['patch', 'ox', 'oy', 'props'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_101907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 614, (-1)), 'unicode', u'\n        Create a shadow of the given *patch* offset by *ox*, *oy*.\n        *props*, if not *None*, is a patch property update dictionary.\n        If *None*, the shadow will have have the same color as the face,\n        but darkened.\n\n        kwargs are\n        %(Patch)s\n        ')
        
        # Call to __init__(...): (line 615)
        # Processing the call arguments (line 615)
        # Getting the type of 'self' (line 615)
        self_101910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 23), 'self', False)
        # Processing the call keyword arguments (line 615)
        kwargs_101911 = {}
        # Getting the type of 'Patch' (line 615)
        Patch_101908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 8), 'Patch', False)
        # Obtaining the member '__init__' of a type (line 615)
        init___101909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 615, 8), Patch_101908, '__init__')
        # Calling __init__(args, kwargs) (line 615)
        init___call_result_101912 = invoke(stypy.reporting.localization.Localization(__file__, 615, 8), init___101909, *[self_101910], **kwargs_101911)
        
        
        # Assigning a Name to a Attribute (line 616):
        
        # Assigning a Name to a Attribute (line 616):
        
        # Assigning a Name to a Attribute (line 616):
        # Getting the type of 'patch' (line 616)
        patch_101913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 21), 'patch')
        # Getting the type of 'self' (line 616)
        self_101914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 8), 'self')
        # Setting the type of the member 'patch' of a type (line 616)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 8), self_101914, 'patch', patch_101913)
        
        # Assigning a Name to a Attribute (line 617):
        
        # Assigning a Name to a Attribute (line 617):
        
        # Assigning a Name to a Attribute (line 617):
        # Getting the type of 'props' (line 617)
        props_101915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 21), 'props')
        # Getting the type of 'self' (line 617)
        self_101916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 8), 'self')
        # Setting the type of the member 'props' of a type (line 617)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 617, 8), self_101916, 'props', props_101915)
        
        # Assigning a Tuple to a Tuple (line 618):
        
        # Assigning a Name to a Name (line 618):
        
        # Assigning a Name to a Name (line 618):
        # Getting the type of 'ox' (line 618)
        ox_101917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 29), 'ox')
        # Assigning a type to the variable 'tuple_assignment_100350' (line 618)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 618, 8), 'tuple_assignment_100350', ox_101917)
        
        # Assigning a Name to a Name (line 618):
        
        # Assigning a Name to a Name (line 618):
        # Getting the type of 'oy' (line 618)
        oy_101918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 33), 'oy')
        # Assigning a type to the variable 'tuple_assignment_100351' (line 618)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 618, 8), 'tuple_assignment_100351', oy_101918)
        
        # Assigning a Name to a Attribute (line 618):
        
        # Assigning a Name to a Attribute (line 618):
        # Getting the type of 'tuple_assignment_100350' (line 618)
        tuple_assignment_100350_101919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 8), 'tuple_assignment_100350')
        # Getting the type of 'self' (line 618)
        self_101920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 8), 'self')
        # Setting the type of the member '_ox' of a type (line 618)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 618, 8), self_101920, '_ox', tuple_assignment_100350_101919)
        
        # Assigning a Name to a Attribute (line 618):
        
        # Assigning a Name to a Attribute (line 618):
        # Getting the type of 'tuple_assignment_100351' (line 618)
        tuple_assignment_100351_101921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 8), 'tuple_assignment_100351')
        # Getting the type of 'self' (line 618)
        self_101922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 18), 'self')
        # Setting the type of the member '_oy' of a type (line 618)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 618, 18), self_101922, '_oy', tuple_assignment_100351_101921)
        
        # Assigning a Call to a Attribute (line 619):
        
        # Assigning a Call to a Attribute (line 619):
        
        # Assigning a Call to a Attribute (line 619):
        
        # Call to Affine2D(...): (line 619)
        # Processing the call keyword arguments (line 619)
        kwargs_101925 = {}
        # Getting the type of 'transforms' (line 619)
        transforms_101923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 33), 'transforms', False)
        # Obtaining the member 'Affine2D' of a type (line 619)
        Affine2D_101924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 619, 33), transforms_101923, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 619)
        Affine2D_call_result_101926 = invoke(stypy.reporting.localization.Localization(__file__, 619, 33), Affine2D_101924, *[], **kwargs_101925)
        
        # Getting the type of 'self' (line 619)
        self_101927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 8), 'self')
        # Setting the type of the member '_shadow_transform' of a type (line 619)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 619, 8), self_101927, '_shadow_transform', Affine2D_call_result_101926)
        
        # Call to _update(...): (line 620)
        # Processing the call keyword arguments (line 620)
        kwargs_101930 = {}
        # Getting the type of 'self' (line 620)
        self_101928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 8), 'self', False)
        # Obtaining the member '_update' of a type (line 620)
        _update_101929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 620, 8), self_101928, '_update')
        # Calling _update(args, kwargs) (line 620)
        _update_call_result_101931 = invoke(stypy.reporting.localization.Localization(__file__, 620, 8), _update_101929, *[], **kwargs_101930)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _update(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update'
        module_type_store = module_type_store.open_function_context('_update', 622, 4, False)
        # Assigning a type to the variable 'self' (line 623)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 623, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Shadow._update.__dict__.__setitem__('stypy_localization', localization)
        Shadow._update.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Shadow._update.__dict__.__setitem__('stypy_type_store', module_type_store)
        Shadow._update.__dict__.__setitem__('stypy_function_name', 'Shadow._update')
        Shadow._update.__dict__.__setitem__('stypy_param_names_list', [])
        Shadow._update.__dict__.__setitem__('stypy_varargs_param_name', None)
        Shadow._update.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Shadow._update.__dict__.__setitem__('stypy_call_defaults', defaults)
        Shadow._update.__dict__.__setitem__('stypy_call_varargs', varargs)
        Shadow._update.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Shadow._update.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Shadow._update', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update(...)' code ##################

        
        # Call to update_from(...): (line 623)
        # Processing the call arguments (line 623)
        # Getting the type of 'self' (line 623)
        self_101934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 25), 'self', False)
        # Obtaining the member 'patch' of a type (line 623)
        patch_101935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 623, 25), self_101934, 'patch')
        # Processing the call keyword arguments (line 623)
        kwargs_101936 = {}
        # Getting the type of 'self' (line 623)
        self_101932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 8), 'self', False)
        # Obtaining the member 'update_from' of a type (line 623)
        update_from_101933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 623, 8), self_101932, 'update_from')
        # Calling update_from(args, kwargs) (line 623)
        update_from_call_result_101937 = invoke(stypy.reporting.localization.Localization(__file__, 623, 8), update_from_101933, *[patch_101935], **kwargs_101936)
        
        
        
        # Getting the type of 'self' (line 624)
        self_101938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 11), 'self')
        # Obtaining the member 'props' of a type (line 624)
        props_101939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 624, 11), self_101938, 'props')
        # Getting the type of 'None' (line 624)
        None_101940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 29), 'None')
        # Applying the binary operator 'isnot' (line 624)
        result_is_not_101941 = python_operator(stypy.reporting.localization.Localization(__file__, 624, 11), 'isnot', props_101939, None_101940)
        
        # Testing the type of an if condition (line 624)
        if_condition_101942 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 624, 8), result_is_not_101941)
        # Assigning a type to the variable 'if_condition_101942' (line 624)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 624, 8), 'if_condition_101942', if_condition_101942)
        # SSA begins for if statement (line 624)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to update(...): (line 625)
        # Processing the call arguments (line 625)
        # Getting the type of 'self' (line 625)
        self_101945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 24), 'self', False)
        # Obtaining the member 'props' of a type (line 625)
        props_101946 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 625, 24), self_101945, 'props')
        # Processing the call keyword arguments (line 625)
        kwargs_101947 = {}
        # Getting the type of 'self' (line 625)
        self_101943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 12), 'self', False)
        # Obtaining the member 'update' of a type (line 625)
        update_101944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 625, 12), self_101943, 'update')
        # Calling update(args, kwargs) (line 625)
        update_call_result_101948 = invoke(stypy.reporting.localization.Localization(__file__, 625, 12), update_101944, *[props_101946], **kwargs_101947)
        
        # SSA branch for the else part of an if statement (line 624)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Tuple (line 627):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to to_rgba(...): (line 627)
        # Processing the call arguments (line 627)
        
        # Call to get_facecolor(...): (line 627)
        # Processing the call keyword arguments (line 627)
        kwargs_101954 = {}
        # Getting the type of 'self' (line 627)
        self_101951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 40), 'self', False)
        # Obtaining the member 'patch' of a type (line 627)
        patch_101952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 627, 40), self_101951, 'patch')
        # Obtaining the member 'get_facecolor' of a type (line 627)
        get_facecolor_101953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 627, 40), patch_101952, 'get_facecolor')
        # Calling get_facecolor(args, kwargs) (line 627)
        get_facecolor_call_result_101955 = invoke(stypy.reporting.localization.Localization(__file__, 627, 40), get_facecolor_101953, *[], **kwargs_101954)
        
        # Processing the call keyword arguments (line 627)
        kwargs_101956 = {}
        # Getting the type of 'colors' (line 627)
        colors_101949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 25), 'colors', False)
        # Obtaining the member 'to_rgba' of a type (line 627)
        to_rgba_101950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 627, 25), colors_101949, 'to_rgba')
        # Calling to_rgba(args, kwargs) (line 627)
        to_rgba_call_result_101957 = invoke(stypy.reporting.localization.Localization(__file__, 627, 25), to_rgba_101950, *[get_facecolor_call_result_101955], **kwargs_101956)
        
        # Assigning a type to the variable 'call_assignment_100352' (line 627)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 627, 12), 'call_assignment_100352', to_rgba_call_result_101957)
        
        # Assigning a Call to a Name (line 627):
        
        # Assigning a Call to a Name (line 627):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_101960 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 627, 12), 'int')
        # Processing the call keyword arguments
        kwargs_101961 = {}
        # Getting the type of 'call_assignment_100352' (line 627)
        call_assignment_100352_101958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 12), 'call_assignment_100352', False)
        # Obtaining the member '__getitem__' of a type (line 627)
        getitem___101959 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 627, 12), call_assignment_100352_101958, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_101962 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___101959, *[int_101960], **kwargs_101961)
        
        # Assigning a type to the variable 'call_assignment_100353' (line 627)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 627, 12), 'call_assignment_100353', getitem___call_result_101962)
        
        # Assigning a Name to a Name (line 627):
        
        # Assigning a Name to a Name (line 627):
        # Getting the type of 'call_assignment_100353' (line 627)
        call_assignment_100353_101963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 12), 'call_assignment_100353')
        # Assigning a type to the variable 'r' (line 627)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 627, 12), 'r', call_assignment_100353_101963)
        
        # Assigning a Call to a Name (line 627):
        
        # Assigning a Call to a Name (line 627):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_101966 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 627, 12), 'int')
        # Processing the call keyword arguments
        kwargs_101967 = {}
        # Getting the type of 'call_assignment_100352' (line 627)
        call_assignment_100352_101964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 12), 'call_assignment_100352', False)
        # Obtaining the member '__getitem__' of a type (line 627)
        getitem___101965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 627, 12), call_assignment_100352_101964, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_101968 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___101965, *[int_101966], **kwargs_101967)
        
        # Assigning a type to the variable 'call_assignment_100354' (line 627)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 627, 12), 'call_assignment_100354', getitem___call_result_101968)
        
        # Assigning a Name to a Name (line 627):
        
        # Assigning a Name to a Name (line 627):
        # Getting the type of 'call_assignment_100354' (line 627)
        call_assignment_100354_101969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 12), 'call_assignment_100354')
        # Assigning a type to the variable 'g' (line 627)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 627, 15), 'g', call_assignment_100354_101969)
        
        # Assigning a Call to a Name (line 627):
        
        # Assigning a Call to a Name (line 627):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_101972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 627, 12), 'int')
        # Processing the call keyword arguments
        kwargs_101973 = {}
        # Getting the type of 'call_assignment_100352' (line 627)
        call_assignment_100352_101970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 12), 'call_assignment_100352', False)
        # Obtaining the member '__getitem__' of a type (line 627)
        getitem___101971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 627, 12), call_assignment_100352_101970, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_101974 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___101971, *[int_101972], **kwargs_101973)
        
        # Assigning a type to the variable 'call_assignment_100355' (line 627)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 627, 12), 'call_assignment_100355', getitem___call_result_101974)
        
        # Assigning a Name to a Name (line 627):
        
        # Assigning a Name to a Name (line 627):
        # Getting the type of 'call_assignment_100355' (line 627)
        call_assignment_100355_101975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 12), 'call_assignment_100355')
        # Assigning a type to the variable 'b' (line 627)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 627, 18), 'b', call_assignment_100355_101975)
        
        # Assigning a Call to a Name (line 627):
        
        # Assigning a Call to a Name (line 627):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_101978 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 627, 12), 'int')
        # Processing the call keyword arguments
        kwargs_101979 = {}
        # Getting the type of 'call_assignment_100352' (line 627)
        call_assignment_100352_101976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 12), 'call_assignment_100352', False)
        # Obtaining the member '__getitem__' of a type (line 627)
        getitem___101977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 627, 12), call_assignment_100352_101976, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_101980 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___101977, *[int_101978], **kwargs_101979)
        
        # Assigning a type to the variable 'call_assignment_100356' (line 627)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 627, 12), 'call_assignment_100356', getitem___call_result_101980)
        
        # Assigning a Name to a Name (line 627):
        
        # Assigning a Name to a Name (line 627):
        # Getting the type of 'call_assignment_100356' (line 627)
        call_assignment_100356_101981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 12), 'call_assignment_100356')
        # Assigning a type to the variable 'a' (line 627)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 627, 21), 'a', call_assignment_100356_101981)
        
        # Assigning a Num to a Name (line 628):
        
        # Assigning a Num to a Name (line 628):
        
        # Assigning a Num to a Name (line 628):
        float_101982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 628, 18), 'float')
        # Assigning a type to the variable 'rho' (line 628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 12), 'rho', float_101982)
        
        # Assigning a BinOp to a Name (line 629):
        
        # Assigning a BinOp to a Name (line 629):
        
        # Assigning a BinOp to a Name (line 629):
        # Getting the type of 'rho' (line 629)
        rho_101983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 16), 'rho')
        # Getting the type of 'r' (line 629)
        r_101984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 22), 'r')
        # Applying the binary operator '*' (line 629)
        result_mul_101985 = python_operator(stypy.reporting.localization.Localization(__file__, 629, 16), '*', rho_101983, r_101984)
        
        # Assigning a type to the variable 'r' (line 629)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 629, 12), 'r', result_mul_101985)
        
        # Assigning a BinOp to a Name (line 630):
        
        # Assigning a BinOp to a Name (line 630):
        
        # Assigning a BinOp to a Name (line 630):
        # Getting the type of 'rho' (line 630)
        rho_101986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 16), 'rho')
        # Getting the type of 'g' (line 630)
        g_101987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 22), 'g')
        # Applying the binary operator '*' (line 630)
        result_mul_101988 = python_operator(stypy.reporting.localization.Localization(__file__, 630, 16), '*', rho_101986, g_101987)
        
        # Assigning a type to the variable 'g' (line 630)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 630, 12), 'g', result_mul_101988)
        
        # Assigning a BinOp to a Name (line 631):
        
        # Assigning a BinOp to a Name (line 631):
        
        # Assigning a BinOp to a Name (line 631):
        # Getting the type of 'rho' (line 631)
        rho_101989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 16), 'rho')
        # Getting the type of 'b' (line 631)
        b_101990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 22), 'b')
        # Applying the binary operator '*' (line 631)
        result_mul_101991 = python_operator(stypy.reporting.localization.Localization(__file__, 631, 16), '*', rho_101989, b_101990)
        
        # Assigning a type to the variable 'b' (line 631)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 631, 12), 'b', result_mul_101991)
        
        # Call to set_facecolor(...): (line 633)
        # Processing the call arguments (line 633)
        
        # Obtaining an instance of the builtin type 'tuple' (line 633)
        tuple_101994 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 633, 32), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 633)
        # Adding element type (line 633)
        # Getting the type of 'r' (line 633)
        r_101995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 633, 32), 'r', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 633, 32), tuple_101994, r_101995)
        # Adding element type (line 633)
        # Getting the type of 'g' (line 633)
        g_101996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 633, 35), 'g', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 633, 32), tuple_101994, g_101996)
        # Adding element type (line 633)
        # Getting the type of 'b' (line 633)
        b_101997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 633, 38), 'b', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 633, 32), tuple_101994, b_101997)
        # Adding element type (line 633)
        float_101998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 633, 41), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 633, 32), tuple_101994, float_101998)
        
        # Processing the call keyword arguments (line 633)
        kwargs_101999 = {}
        # Getting the type of 'self' (line 633)
        self_101992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 633, 12), 'self', False)
        # Obtaining the member 'set_facecolor' of a type (line 633)
        set_facecolor_101993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 633, 12), self_101992, 'set_facecolor')
        # Calling set_facecolor(args, kwargs) (line 633)
        set_facecolor_call_result_102000 = invoke(stypy.reporting.localization.Localization(__file__, 633, 12), set_facecolor_101993, *[tuple_101994], **kwargs_101999)
        
        
        # Call to set_edgecolor(...): (line 634)
        # Processing the call arguments (line 634)
        
        # Obtaining an instance of the builtin type 'tuple' (line 634)
        tuple_102003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 634, 32), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 634)
        # Adding element type (line 634)
        # Getting the type of 'r' (line 634)
        r_102004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 32), 'r', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 634, 32), tuple_102003, r_102004)
        # Adding element type (line 634)
        # Getting the type of 'g' (line 634)
        g_102005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 35), 'g', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 634, 32), tuple_102003, g_102005)
        # Adding element type (line 634)
        # Getting the type of 'b' (line 634)
        b_102006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 38), 'b', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 634, 32), tuple_102003, b_102006)
        # Adding element type (line 634)
        float_102007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 634, 41), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 634, 32), tuple_102003, float_102007)
        
        # Processing the call keyword arguments (line 634)
        kwargs_102008 = {}
        # Getting the type of 'self' (line 634)
        self_102001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 12), 'self', False)
        # Obtaining the member 'set_edgecolor' of a type (line 634)
        set_edgecolor_102002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 12), self_102001, 'set_edgecolor')
        # Calling set_edgecolor(args, kwargs) (line 634)
        set_edgecolor_call_result_102009 = invoke(stypy.reporting.localization.Localization(__file__, 634, 12), set_edgecolor_102002, *[tuple_102003], **kwargs_102008)
        
        
        # Call to set_alpha(...): (line 635)
        # Processing the call arguments (line 635)
        float_102012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 635, 27), 'float')
        # Processing the call keyword arguments (line 635)
        kwargs_102013 = {}
        # Getting the type of 'self' (line 635)
        self_102010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 12), 'self', False)
        # Obtaining the member 'set_alpha' of a type (line 635)
        set_alpha_102011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 635, 12), self_102010, 'set_alpha')
        # Calling set_alpha(args, kwargs) (line 635)
        set_alpha_call_result_102014 = invoke(stypy.reporting.localization.Localization(__file__, 635, 12), set_alpha_102011, *[float_102012], **kwargs_102013)
        
        # SSA join for if statement (line 624)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_update(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update' in the type store
        # Getting the type of 'stypy_return_type' (line 622)
        stypy_return_type_102015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102015)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update'
        return stypy_return_type_102015


    @norecursion
    def _update_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update_transform'
        module_type_store = module_type_store.open_function_context('_update_transform', 637, 4, False)
        # Assigning a type to the variable 'self' (line 638)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 638, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Shadow._update_transform.__dict__.__setitem__('stypy_localization', localization)
        Shadow._update_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Shadow._update_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        Shadow._update_transform.__dict__.__setitem__('stypy_function_name', 'Shadow._update_transform')
        Shadow._update_transform.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        Shadow._update_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        Shadow._update_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Shadow._update_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        Shadow._update_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        Shadow._update_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Shadow._update_transform.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Shadow._update_transform', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update_transform', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update_transform(...)' code ##################

        
        # Assigning a Call to a Name (line 638):
        
        # Assigning a Call to a Name (line 638):
        
        # Assigning a Call to a Name (line 638):
        
        # Call to points_to_pixels(...): (line 638)
        # Processing the call arguments (line 638)
        # Getting the type of 'self' (line 638)
        self_102018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 39), 'self', False)
        # Obtaining the member '_ox' of a type (line 638)
        _ox_102019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 638, 39), self_102018, '_ox')
        # Processing the call keyword arguments (line 638)
        kwargs_102020 = {}
        # Getting the type of 'renderer' (line 638)
        renderer_102016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 13), 'renderer', False)
        # Obtaining the member 'points_to_pixels' of a type (line 638)
        points_to_pixels_102017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 638, 13), renderer_102016, 'points_to_pixels')
        # Calling points_to_pixels(args, kwargs) (line 638)
        points_to_pixels_call_result_102021 = invoke(stypy.reporting.localization.Localization(__file__, 638, 13), points_to_pixels_102017, *[_ox_102019], **kwargs_102020)
        
        # Assigning a type to the variable 'ox' (line 638)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 638, 8), 'ox', points_to_pixels_call_result_102021)
        
        # Assigning a Call to a Name (line 639):
        
        # Assigning a Call to a Name (line 639):
        
        # Assigning a Call to a Name (line 639):
        
        # Call to points_to_pixels(...): (line 639)
        # Processing the call arguments (line 639)
        # Getting the type of 'self' (line 639)
        self_102024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 39), 'self', False)
        # Obtaining the member '_oy' of a type (line 639)
        _oy_102025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 639, 39), self_102024, '_oy')
        # Processing the call keyword arguments (line 639)
        kwargs_102026 = {}
        # Getting the type of 'renderer' (line 639)
        renderer_102022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 13), 'renderer', False)
        # Obtaining the member 'points_to_pixels' of a type (line 639)
        points_to_pixels_102023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 639, 13), renderer_102022, 'points_to_pixels')
        # Calling points_to_pixels(args, kwargs) (line 639)
        points_to_pixels_call_result_102027 = invoke(stypy.reporting.localization.Localization(__file__, 639, 13), points_to_pixels_102023, *[_oy_102025], **kwargs_102026)
        
        # Assigning a type to the variable 'oy' (line 639)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 639, 8), 'oy', points_to_pixels_call_result_102027)
        
        # Call to translate(...): (line 640)
        # Processing the call arguments (line 640)
        # Getting the type of 'ox' (line 640)
        ox_102034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 49), 'ox', False)
        # Getting the type of 'oy' (line 640)
        oy_102035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 53), 'oy', False)
        # Processing the call keyword arguments (line 640)
        kwargs_102036 = {}
        
        # Call to clear(...): (line 640)
        # Processing the call keyword arguments (line 640)
        kwargs_102031 = {}
        # Getting the type of 'self' (line 640)
        self_102028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 8), 'self', False)
        # Obtaining the member '_shadow_transform' of a type (line 640)
        _shadow_transform_102029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 640, 8), self_102028, '_shadow_transform')
        # Obtaining the member 'clear' of a type (line 640)
        clear_102030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 640, 8), _shadow_transform_102029, 'clear')
        # Calling clear(args, kwargs) (line 640)
        clear_call_result_102032 = invoke(stypy.reporting.localization.Localization(__file__, 640, 8), clear_102030, *[], **kwargs_102031)
        
        # Obtaining the member 'translate' of a type (line 640)
        translate_102033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 640, 8), clear_call_result_102032, 'translate')
        # Calling translate(args, kwargs) (line 640)
        translate_call_result_102037 = invoke(stypy.reporting.localization.Localization(__file__, 640, 8), translate_102033, *[ox_102034, oy_102035], **kwargs_102036)
        
        
        # ################# End of '_update_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 637)
        stypy_return_type_102038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102038)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update_transform'
        return stypy_return_type_102038


    @norecursion
    def _get_ox(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_ox'
        module_type_store = module_type_store.open_function_context('_get_ox', 642, 4, False)
        # Assigning a type to the variable 'self' (line 643)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 643, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Shadow._get_ox.__dict__.__setitem__('stypy_localization', localization)
        Shadow._get_ox.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Shadow._get_ox.__dict__.__setitem__('stypy_type_store', module_type_store)
        Shadow._get_ox.__dict__.__setitem__('stypy_function_name', 'Shadow._get_ox')
        Shadow._get_ox.__dict__.__setitem__('stypy_param_names_list', [])
        Shadow._get_ox.__dict__.__setitem__('stypy_varargs_param_name', None)
        Shadow._get_ox.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Shadow._get_ox.__dict__.__setitem__('stypy_call_defaults', defaults)
        Shadow._get_ox.__dict__.__setitem__('stypy_call_varargs', varargs)
        Shadow._get_ox.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Shadow._get_ox.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Shadow._get_ox', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_ox', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_ox(...)' code ##################

        # Getting the type of 'self' (line 643)
        self_102039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 15), 'self')
        # Obtaining the member '_ox' of a type (line 643)
        _ox_102040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 643, 15), self_102039, '_ox')
        # Assigning a type to the variable 'stypy_return_type' (line 643)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 643, 8), 'stypy_return_type', _ox_102040)
        
        # ################# End of '_get_ox(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_ox' in the type store
        # Getting the type of 'stypy_return_type' (line 642)
        stypy_return_type_102041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102041)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_ox'
        return stypy_return_type_102041


    @norecursion
    def _set_ox(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_ox'
        module_type_store = module_type_store.open_function_context('_set_ox', 645, 4, False)
        # Assigning a type to the variable 'self' (line 646)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 646, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Shadow._set_ox.__dict__.__setitem__('stypy_localization', localization)
        Shadow._set_ox.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Shadow._set_ox.__dict__.__setitem__('stypy_type_store', module_type_store)
        Shadow._set_ox.__dict__.__setitem__('stypy_function_name', 'Shadow._set_ox')
        Shadow._set_ox.__dict__.__setitem__('stypy_param_names_list', ['ox'])
        Shadow._set_ox.__dict__.__setitem__('stypy_varargs_param_name', None)
        Shadow._set_ox.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Shadow._set_ox.__dict__.__setitem__('stypy_call_defaults', defaults)
        Shadow._set_ox.__dict__.__setitem__('stypy_call_varargs', varargs)
        Shadow._set_ox.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Shadow._set_ox.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Shadow._set_ox', ['ox'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_ox', localization, ['ox'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_ox(...)' code ##################

        
        # Assigning a Name to a Attribute (line 646):
        
        # Assigning a Name to a Attribute (line 646):
        
        # Assigning a Name to a Attribute (line 646):
        # Getting the type of 'ox' (line 646)
        ox_102042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 19), 'ox')
        # Getting the type of 'self' (line 646)
        self_102043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 8), 'self')
        # Setting the type of the member '_ox' of a type (line 646)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 646, 8), self_102043, '_ox', ox_102042)
        
        # ################# End of '_set_ox(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_ox' in the type store
        # Getting the type of 'stypy_return_type' (line 645)
        stypy_return_type_102044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102044)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_ox'
        return stypy_return_type_102044


    @norecursion
    def _get_oy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_oy'
        module_type_store = module_type_store.open_function_context('_get_oy', 648, 4, False)
        # Assigning a type to the variable 'self' (line 649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 649, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Shadow._get_oy.__dict__.__setitem__('stypy_localization', localization)
        Shadow._get_oy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Shadow._get_oy.__dict__.__setitem__('stypy_type_store', module_type_store)
        Shadow._get_oy.__dict__.__setitem__('stypy_function_name', 'Shadow._get_oy')
        Shadow._get_oy.__dict__.__setitem__('stypy_param_names_list', [])
        Shadow._get_oy.__dict__.__setitem__('stypy_varargs_param_name', None)
        Shadow._get_oy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Shadow._get_oy.__dict__.__setitem__('stypy_call_defaults', defaults)
        Shadow._get_oy.__dict__.__setitem__('stypy_call_varargs', varargs)
        Shadow._get_oy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Shadow._get_oy.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Shadow._get_oy', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_oy', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_oy(...)' code ##################

        # Getting the type of 'self' (line 649)
        self_102045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 15), 'self')
        # Obtaining the member '_oy' of a type (line 649)
        _oy_102046 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 649, 15), self_102045, '_oy')
        # Assigning a type to the variable 'stypy_return_type' (line 649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 649, 8), 'stypy_return_type', _oy_102046)
        
        # ################# End of '_get_oy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_oy' in the type store
        # Getting the type of 'stypy_return_type' (line 648)
        stypy_return_type_102047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102047)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_oy'
        return stypy_return_type_102047


    @norecursion
    def _set_oy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_oy'
        module_type_store = module_type_store.open_function_context('_set_oy', 651, 4, False)
        # Assigning a type to the variable 'self' (line 652)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 652, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Shadow._set_oy.__dict__.__setitem__('stypy_localization', localization)
        Shadow._set_oy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Shadow._set_oy.__dict__.__setitem__('stypy_type_store', module_type_store)
        Shadow._set_oy.__dict__.__setitem__('stypy_function_name', 'Shadow._set_oy')
        Shadow._set_oy.__dict__.__setitem__('stypy_param_names_list', ['oy'])
        Shadow._set_oy.__dict__.__setitem__('stypy_varargs_param_name', None)
        Shadow._set_oy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Shadow._set_oy.__dict__.__setitem__('stypy_call_defaults', defaults)
        Shadow._set_oy.__dict__.__setitem__('stypy_call_varargs', varargs)
        Shadow._set_oy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Shadow._set_oy.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Shadow._set_oy', ['oy'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_oy', localization, ['oy'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_oy(...)' code ##################

        
        # Assigning a Name to a Attribute (line 652):
        
        # Assigning a Name to a Attribute (line 652):
        
        # Assigning a Name to a Attribute (line 652):
        # Getting the type of 'oy' (line 652)
        oy_102048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 19), 'oy')
        # Getting the type of 'self' (line 652)
        self_102049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 8), 'self')
        # Setting the type of the member '_oy' of a type (line 652)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 652, 8), self_102049, '_oy', oy_102048)
        
        # ################# End of '_set_oy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_oy' in the type store
        # Getting the type of 'stypy_return_type' (line 651)
        stypy_return_type_102050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102050)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_oy'
        return stypy_return_type_102050


    @norecursion
    def get_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_path'
        module_type_store = module_type_store.open_function_context('get_path', 654, 4, False)
        # Assigning a type to the variable 'self' (line 655)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 655, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Shadow.get_path.__dict__.__setitem__('stypy_localization', localization)
        Shadow.get_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Shadow.get_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        Shadow.get_path.__dict__.__setitem__('stypy_function_name', 'Shadow.get_path')
        Shadow.get_path.__dict__.__setitem__('stypy_param_names_list', [])
        Shadow.get_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        Shadow.get_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Shadow.get_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        Shadow.get_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        Shadow.get_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Shadow.get_path.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Shadow.get_path', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_path', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_path(...)' code ##################

        
        # Call to get_path(...): (line 655)
        # Processing the call keyword arguments (line 655)
        kwargs_102054 = {}
        # Getting the type of 'self' (line 655)
        self_102051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 655, 15), 'self', False)
        # Obtaining the member 'patch' of a type (line 655)
        patch_102052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 655, 15), self_102051, 'patch')
        # Obtaining the member 'get_path' of a type (line 655)
        get_path_102053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 655, 15), patch_102052, 'get_path')
        # Calling get_path(args, kwargs) (line 655)
        get_path_call_result_102055 = invoke(stypy.reporting.localization.Localization(__file__, 655, 15), get_path_102053, *[], **kwargs_102054)
        
        # Assigning a type to the variable 'stypy_return_type' (line 655)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 655, 8), 'stypy_return_type', get_path_call_result_102055)
        
        # ################# End of 'get_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_path' in the type store
        # Getting the type of 'stypy_return_type' (line 654)
        stypy_return_type_102056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102056)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_path'
        return stypy_return_type_102056


    @norecursion
    def get_patch_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_patch_transform'
        module_type_store = module_type_store.open_function_context('get_patch_transform', 657, 4, False)
        # Assigning a type to the variable 'self' (line 658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 658, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Shadow.get_patch_transform.__dict__.__setitem__('stypy_localization', localization)
        Shadow.get_patch_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Shadow.get_patch_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        Shadow.get_patch_transform.__dict__.__setitem__('stypy_function_name', 'Shadow.get_patch_transform')
        Shadow.get_patch_transform.__dict__.__setitem__('stypy_param_names_list', [])
        Shadow.get_patch_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        Shadow.get_patch_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Shadow.get_patch_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        Shadow.get_patch_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        Shadow.get_patch_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Shadow.get_patch_transform.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Shadow.get_patch_transform', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_patch_transform', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_patch_transform(...)' code ##################

        
        # Call to get_patch_transform(...): (line 658)
        # Processing the call keyword arguments (line 658)
        kwargs_102060 = {}
        # Getting the type of 'self' (line 658)
        self_102057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 15), 'self', False)
        # Obtaining the member 'patch' of a type (line 658)
        patch_102058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 658, 15), self_102057, 'patch')
        # Obtaining the member 'get_patch_transform' of a type (line 658)
        get_patch_transform_102059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 658, 15), patch_102058, 'get_patch_transform')
        # Calling get_patch_transform(args, kwargs) (line 658)
        get_patch_transform_call_result_102061 = invoke(stypy.reporting.localization.Localization(__file__, 658, 15), get_patch_transform_102059, *[], **kwargs_102060)
        
        # Getting the type of 'self' (line 658)
        self_102062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 50), 'self')
        # Obtaining the member '_shadow_transform' of a type (line 658)
        _shadow_transform_102063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 658, 50), self_102062, '_shadow_transform')
        # Applying the binary operator '+' (line 658)
        result_add_102064 = python_operator(stypy.reporting.localization.Localization(__file__, 658, 15), '+', get_patch_transform_call_result_102061, _shadow_transform_102063)
        
        # Assigning a type to the variable 'stypy_return_type' (line 658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 658, 8), 'stypy_return_type', result_add_102064)
        
        # ################# End of 'get_patch_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_patch_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 657)
        stypy_return_type_102065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102065)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_patch_transform'
        return stypy_return_type_102065


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 660, 4, False)
        # Assigning a type to the variable 'self' (line 661)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 661, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Shadow.draw.__dict__.__setitem__('stypy_localization', localization)
        Shadow.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Shadow.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        Shadow.draw.__dict__.__setitem__('stypy_function_name', 'Shadow.draw')
        Shadow.draw.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        Shadow.draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        Shadow.draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Shadow.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        Shadow.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        Shadow.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Shadow.draw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Shadow.draw', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        
        # Call to _update_transform(...): (line 661)
        # Processing the call arguments (line 661)
        # Getting the type of 'renderer' (line 661)
        renderer_102068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 31), 'renderer', False)
        # Processing the call keyword arguments (line 661)
        kwargs_102069 = {}
        # Getting the type of 'self' (line 661)
        self_102066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 8), 'self', False)
        # Obtaining the member '_update_transform' of a type (line 661)
        _update_transform_102067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 661, 8), self_102066, '_update_transform')
        # Calling _update_transform(args, kwargs) (line 661)
        _update_transform_call_result_102070 = invoke(stypy.reporting.localization.Localization(__file__, 661, 8), _update_transform_102067, *[renderer_102068], **kwargs_102069)
        
        
        # Call to draw(...): (line 662)
        # Processing the call arguments (line 662)
        # Getting the type of 'self' (line 662)
        self_102073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 19), 'self', False)
        # Getting the type of 'renderer' (line 662)
        renderer_102074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 25), 'renderer', False)
        # Processing the call keyword arguments (line 662)
        kwargs_102075 = {}
        # Getting the type of 'Patch' (line 662)
        Patch_102071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 8), 'Patch', False)
        # Obtaining the member 'draw' of a type (line 662)
        draw_102072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 8), Patch_102071, 'draw')
        # Calling draw(args, kwargs) (line 662)
        draw_call_result_102076 = invoke(stypy.reporting.localization.Localization(__file__, 662, 8), draw_102072, *[self_102073, renderer_102074], **kwargs_102075)
        
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 660)
        stypy_return_type_102077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102077)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_102077


# Assigning a type to the variable 'Shadow' (line 600)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 600, 0), 'Shadow', Shadow)
# Declaration of the 'Rectangle' class
# Getting the type of 'Patch' (line 665)
Patch_102078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 16), 'Patch')

class Rectangle(Patch_102078, ):
    unicode_102079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 669, (-1)), 'unicode', u'\n    Draw a rectangle with lower left at *xy* = (*x*, *y*) with\n    specified *width*, *height* and rotation *angle*.\n    ')

    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 671, 4, False)
        # Assigning a type to the variable 'self' (line 672)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 672, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Rectangle.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        Rectangle.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Rectangle.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Rectangle.stypy__str__.__dict__.__setitem__('stypy_function_name', 'Rectangle.stypy__str__')
        Rectangle.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        Rectangle.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Rectangle.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Rectangle.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Rectangle.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Rectangle.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Rectangle.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Rectangle.stypy__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        
        # Assigning a Tuple to a Name (line 672):
        
        # Assigning a Tuple to a Name (line 672):
        
        # Assigning a Tuple to a Name (line 672):
        
        # Obtaining an instance of the builtin type 'tuple' (line 672)
        tuple_102080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 672, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 672)
        # Adding element type (line 672)
        # Getting the type of 'self' (line 672)
        self_102081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 15), 'self')
        # Obtaining the member '_x' of a type (line 672)
        _x_102082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 15), self_102081, '_x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 672, 15), tuple_102080, _x_102082)
        # Adding element type (line 672)
        # Getting the type of 'self' (line 672)
        self_102083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 24), 'self')
        # Obtaining the member '_y' of a type (line 672)
        _y_102084 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 24), self_102083, '_y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 672, 15), tuple_102080, _y_102084)
        # Adding element type (line 672)
        # Getting the type of 'self' (line 672)
        self_102085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 33), 'self')
        # Obtaining the member '_width' of a type (line 672)
        _width_102086 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 33), self_102085, '_width')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 672, 15), tuple_102080, _width_102086)
        # Adding element type (line 672)
        # Getting the type of 'self' (line 672)
        self_102087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 46), 'self')
        # Obtaining the member '_height' of a type (line 672)
        _height_102088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 46), self_102087, '_height')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 672, 15), tuple_102080, _height_102088)
        # Adding element type (line 672)
        # Getting the type of 'self' (line 672)
        self_102089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 60), 'self')
        # Obtaining the member 'angle' of a type (line 672)
        angle_102090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 60), self_102089, 'angle')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 672, 15), tuple_102080, angle_102090)
        
        # Assigning a type to the variable 'pars' (line 672)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 672, 8), 'pars', tuple_102080)
        
        # Assigning a Str to a Name (line 673):
        
        # Assigning a Str to a Name (line 673):
        
        # Assigning a Str to a Name (line 673):
        unicode_102091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 673, 14), 'unicode', u'Rectangle(xy=(%g, %g), width=%g, height=%g, angle=%g)')
        # Assigning a type to the variable 'fmt' (line 673)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 673, 8), 'fmt', unicode_102091)
        # Getting the type of 'fmt' (line 674)
        fmt_102092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 15), 'fmt')
        # Getting the type of 'pars' (line 674)
        pars_102093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 21), 'pars')
        # Applying the binary operator '%' (line 674)
        result_mod_102094 = python_operator(stypy.reporting.localization.Localization(__file__, 674, 15), '%', fmt_102092, pars_102093)
        
        # Assigning a type to the variable 'stypy_return_type' (line 674)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 674, 8), 'stypy_return_type', result_mod_102094)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 671)
        stypy_return_type_102095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102095)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_102095


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        float_102096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 677, 48), 'float')
        defaults = [float_102096]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 676, 4, False)
        # Assigning a type to the variable 'self' (line 677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 677, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Rectangle.__init__', ['xy', 'width', 'height', 'angle'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['xy', 'width', 'height', 'angle'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_102097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 687, (-1)), 'unicode', u'\n\n        *angle*\n          rotation in degrees (anti-clockwise)\n\n        *fill* is a boolean indicating whether to fill the rectangle\n\n        Valid kwargs are:\n        %(Patch)s\n        ')
        
        # Call to __init__(...): (line 689)
        # Processing the call arguments (line 689)
        # Getting the type of 'self' (line 689)
        self_102100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 23), 'self', False)
        # Processing the call keyword arguments (line 689)
        # Getting the type of 'kwargs' (line 689)
        kwargs_102101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 31), 'kwargs', False)
        kwargs_102102 = {'kwargs_102101': kwargs_102101}
        # Getting the type of 'Patch' (line 689)
        Patch_102098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 8), 'Patch', False)
        # Obtaining the member '__init__' of a type (line 689)
        init___102099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 689, 8), Patch_102098, '__init__')
        # Calling __init__(args, kwargs) (line 689)
        init___call_result_102103 = invoke(stypy.reporting.localization.Localization(__file__, 689, 8), init___102099, *[self_102100], **kwargs_102102)
        
        
        # Assigning a Subscript to a Attribute (line 691):
        
        # Assigning a Subscript to a Attribute (line 691):
        
        # Assigning a Subscript to a Attribute (line 691):
        
        # Obtaining the type of the subscript
        int_102104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 691, 21), 'int')
        # Getting the type of 'xy' (line 691)
        xy_102105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 18), 'xy')
        # Obtaining the member '__getitem__' of a type (line 691)
        getitem___102106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 691, 18), xy_102105, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 691)
        subscript_call_result_102107 = invoke(stypy.reporting.localization.Localization(__file__, 691, 18), getitem___102106, int_102104)
        
        # Getting the type of 'self' (line 691)
        self_102108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 8), 'self')
        # Setting the type of the member '_x' of a type (line 691)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 691, 8), self_102108, '_x', subscript_call_result_102107)
        
        # Assigning a Subscript to a Attribute (line 692):
        
        # Assigning a Subscript to a Attribute (line 692):
        
        # Assigning a Subscript to a Attribute (line 692):
        
        # Obtaining the type of the subscript
        int_102109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 692, 21), 'int')
        # Getting the type of 'xy' (line 692)
        xy_102110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 18), 'xy')
        # Obtaining the member '__getitem__' of a type (line 692)
        getitem___102111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 18), xy_102110, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 692)
        subscript_call_result_102112 = invoke(stypy.reporting.localization.Localization(__file__, 692, 18), getitem___102111, int_102109)
        
        # Getting the type of 'self' (line 692)
        self_102113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 8), 'self')
        # Setting the type of the member '_y' of a type (line 692)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 8), self_102113, '_y', subscript_call_result_102112)
        
        # Assigning a Name to a Attribute (line 693):
        
        # Assigning a Name to a Attribute (line 693):
        
        # Assigning a Name to a Attribute (line 693):
        # Getting the type of 'width' (line 693)
        width_102114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 22), 'width')
        # Getting the type of 'self' (line 693)
        self_102115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 8), 'self')
        # Setting the type of the member '_width' of a type (line 693)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 693, 8), self_102115, '_width', width_102114)
        
        # Assigning a Name to a Attribute (line 694):
        
        # Assigning a Name to a Attribute (line 694):
        
        # Assigning a Name to a Attribute (line 694):
        # Getting the type of 'height' (line 694)
        height_102116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 23), 'height')
        # Getting the type of 'self' (line 694)
        self_102117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 8), 'self')
        # Setting the type of the member '_height' of a type (line 694)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 694, 8), self_102117, '_height', height_102116)
        
        # Assigning a Call to a Attribute (line 695):
        
        # Assigning a Call to a Attribute (line 695):
        
        # Assigning a Call to a Attribute (line 695):
        
        # Call to float(...): (line 695)
        # Processing the call arguments (line 695)
        # Getting the type of 'angle' (line 695)
        angle_102119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 27), 'angle', False)
        # Processing the call keyword arguments (line 695)
        kwargs_102120 = {}
        # Getting the type of 'float' (line 695)
        float_102118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 21), 'float', False)
        # Calling float(args, kwargs) (line 695)
        float_call_result_102121 = invoke(stypy.reporting.localization.Localization(__file__, 695, 21), float_102118, *[angle_102119], **kwargs_102120)
        
        # Getting the type of 'self' (line 695)
        self_102122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 8), 'self')
        # Setting the type of the member 'angle' of a type (line 695)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 695, 8), self_102122, 'angle', float_call_result_102121)
        
        # Assigning a Call to a Attribute (line 697):
        
        # Assigning a Call to a Attribute (line 697):
        
        # Assigning a Call to a Attribute (line 697):
        
        # Call to IdentityTransform(...): (line 697)
        # Processing the call keyword arguments (line 697)
        kwargs_102125 = {}
        # Getting the type of 'transforms' (line 697)
        transforms_102123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 31), 'transforms', False)
        # Obtaining the member 'IdentityTransform' of a type (line 697)
        IdentityTransform_102124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 697, 31), transforms_102123, 'IdentityTransform')
        # Calling IdentityTransform(args, kwargs) (line 697)
        IdentityTransform_call_result_102126 = invoke(stypy.reporting.localization.Localization(__file__, 697, 31), IdentityTransform_102124, *[], **kwargs_102125)
        
        # Getting the type of 'self' (line 697)
        self_102127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 8), 'self')
        # Setting the type of the member '_rect_transform' of a type (line 697)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 697, 8), self_102127, '_rect_transform', IdentityTransform_call_result_102126)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def get_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_path'
        module_type_store = module_type_store.open_function_context('get_path', 699, 4, False)
        # Assigning a type to the variable 'self' (line 700)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 700, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Rectangle.get_path.__dict__.__setitem__('stypy_localization', localization)
        Rectangle.get_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Rectangle.get_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        Rectangle.get_path.__dict__.__setitem__('stypy_function_name', 'Rectangle.get_path')
        Rectangle.get_path.__dict__.__setitem__('stypy_param_names_list', [])
        Rectangle.get_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        Rectangle.get_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Rectangle.get_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        Rectangle.get_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        Rectangle.get_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Rectangle.get_path.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Rectangle.get_path', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_path', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_path(...)' code ##################

        unicode_102128 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 702, (-1)), 'unicode', u'\n        Return the vertices of the rectangle\n        ')
        
        # Call to unit_rectangle(...): (line 703)
        # Processing the call keyword arguments (line 703)
        kwargs_102131 = {}
        # Getting the type of 'Path' (line 703)
        Path_102129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 15), 'Path', False)
        # Obtaining the member 'unit_rectangle' of a type (line 703)
        unit_rectangle_102130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 15), Path_102129, 'unit_rectangle')
        # Calling unit_rectangle(args, kwargs) (line 703)
        unit_rectangle_call_result_102132 = invoke(stypy.reporting.localization.Localization(__file__, 703, 15), unit_rectangle_102130, *[], **kwargs_102131)
        
        # Assigning a type to the variable 'stypy_return_type' (line 703)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 8), 'stypy_return_type', unit_rectangle_call_result_102132)
        
        # ################# End of 'get_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_path' in the type store
        # Getting the type of 'stypy_return_type' (line 699)
        stypy_return_type_102133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102133)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_path'
        return stypy_return_type_102133


    @norecursion
    def _update_patch_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update_patch_transform'
        module_type_store = module_type_store.open_function_context('_update_patch_transform', 705, 4, False)
        # Assigning a type to the variable 'self' (line 706)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 706, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Rectangle._update_patch_transform.__dict__.__setitem__('stypy_localization', localization)
        Rectangle._update_patch_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Rectangle._update_patch_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        Rectangle._update_patch_transform.__dict__.__setitem__('stypy_function_name', 'Rectangle._update_patch_transform')
        Rectangle._update_patch_transform.__dict__.__setitem__('stypy_param_names_list', [])
        Rectangle._update_patch_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        Rectangle._update_patch_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Rectangle._update_patch_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        Rectangle._update_patch_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        Rectangle._update_patch_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Rectangle._update_patch_transform.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Rectangle._update_patch_transform', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update_patch_transform', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update_patch_transform(...)' code ##################

        unicode_102134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 710, (-1)), 'unicode', u'NOTE: This cannot be called until after this has been added\n                 to an Axes, otherwise unit conversion will fail. This\n                 maxes it very important to call the accessor method and\n                 not directly access the transformation member variable.\n        ')
        
        # Assigning a Call to a Name (line 711):
        
        # Assigning a Call to a Name (line 711):
        
        # Assigning a Call to a Name (line 711):
        
        # Call to convert_xunits(...): (line 711)
        # Processing the call arguments (line 711)
        # Getting the type of 'self' (line 711)
        self_102137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 32), 'self', False)
        # Obtaining the member '_x' of a type (line 711)
        _x_102138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 711, 32), self_102137, '_x')
        # Processing the call keyword arguments (line 711)
        kwargs_102139 = {}
        # Getting the type of 'self' (line 711)
        self_102135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 12), 'self', False)
        # Obtaining the member 'convert_xunits' of a type (line 711)
        convert_xunits_102136 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 711, 12), self_102135, 'convert_xunits')
        # Calling convert_xunits(args, kwargs) (line 711)
        convert_xunits_call_result_102140 = invoke(stypy.reporting.localization.Localization(__file__, 711, 12), convert_xunits_102136, *[_x_102138], **kwargs_102139)
        
        # Assigning a type to the variable 'x' (line 711)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 711, 8), 'x', convert_xunits_call_result_102140)
        
        # Assigning a Call to a Name (line 712):
        
        # Assigning a Call to a Name (line 712):
        
        # Assigning a Call to a Name (line 712):
        
        # Call to convert_yunits(...): (line 712)
        # Processing the call arguments (line 712)
        # Getting the type of 'self' (line 712)
        self_102143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 32), 'self', False)
        # Obtaining the member '_y' of a type (line 712)
        _y_102144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 712, 32), self_102143, '_y')
        # Processing the call keyword arguments (line 712)
        kwargs_102145 = {}
        # Getting the type of 'self' (line 712)
        self_102141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 12), 'self', False)
        # Obtaining the member 'convert_yunits' of a type (line 712)
        convert_yunits_102142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 712, 12), self_102141, 'convert_yunits')
        # Calling convert_yunits(args, kwargs) (line 712)
        convert_yunits_call_result_102146 = invoke(stypy.reporting.localization.Localization(__file__, 712, 12), convert_yunits_102142, *[_y_102144], **kwargs_102145)
        
        # Assigning a type to the variable 'y' (line 712)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 712, 8), 'y', convert_yunits_call_result_102146)
        
        # Assigning a Call to a Name (line 713):
        
        # Assigning a Call to a Name (line 713):
        
        # Assigning a Call to a Name (line 713):
        
        # Call to convert_xunits(...): (line 713)
        # Processing the call arguments (line 713)
        # Getting the type of 'self' (line 713)
        self_102149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 36), 'self', False)
        # Obtaining the member '_width' of a type (line 713)
        _width_102150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 713, 36), self_102149, '_width')
        # Processing the call keyword arguments (line 713)
        kwargs_102151 = {}
        # Getting the type of 'self' (line 713)
        self_102147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 16), 'self', False)
        # Obtaining the member 'convert_xunits' of a type (line 713)
        convert_xunits_102148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 713, 16), self_102147, 'convert_xunits')
        # Calling convert_xunits(args, kwargs) (line 713)
        convert_xunits_call_result_102152 = invoke(stypy.reporting.localization.Localization(__file__, 713, 16), convert_xunits_102148, *[_width_102150], **kwargs_102151)
        
        # Assigning a type to the variable 'width' (line 713)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 713, 8), 'width', convert_xunits_call_result_102152)
        
        # Assigning a Call to a Name (line 714):
        
        # Assigning a Call to a Name (line 714):
        
        # Assigning a Call to a Name (line 714):
        
        # Call to convert_yunits(...): (line 714)
        # Processing the call arguments (line 714)
        # Getting the type of 'self' (line 714)
        self_102155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 37), 'self', False)
        # Obtaining the member '_height' of a type (line 714)
        _height_102156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 714, 37), self_102155, '_height')
        # Processing the call keyword arguments (line 714)
        kwargs_102157 = {}
        # Getting the type of 'self' (line 714)
        self_102153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 17), 'self', False)
        # Obtaining the member 'convert_yunits' of a type (line 714)
        convert_yunits_102154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 714, 17), self_102153, 'convert_yunits')
        # Calling convert_yunits(args, kwargs) (line 714)
        convert_yunits_call_result_102158 = invoke(stypy.reporting.localization.Localization(__file__, 714, 17), convert_yunits_102154, *[_height_102156], **kwargs_102157)
        
        # Assigning a type to the variable 'height' (line 714)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 714, 8), 'height', convert_yunits_call_result_102158)
        
        # Assigning a Call to a Name (line 715):
        
        # Assigning a Call to a Name (line 715):
        
        # Assigning a Call to a Name (line 715):
        
        # Call to from_bounds(...): (line 715)
        # Processing the call arguments (line 715)
        # Getting the type of 'x' (line 715)
        x_102162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 43), 'x', False)
        # Getting the type of 'y' (line 715)
        y_102163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 46), 'y', False)
        # Getting the type of 'width' (line 715)
        width_102164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 49), 'width', False)
        # Getting the type of 'height' (line 715)
        height_102165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 56), 'height', False)
        # Processing the call keyword arguments (line 715)
        kwargs_102166 = {}
        # Getting the type of 'transforms' (line 715)
        transforms_102159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 15), 'transforms', False)
        # Obtaining the member 'Bbox' of a type (line 715)
        Bbox_102160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 715, 15), transforms_102159, 'Bbox')
        # Obtaining the member 'from_bounds' of a type (line 715)
        from_bounds_102161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 715, 15), Bbox_102160, 'from_bounds')
        # Calling from_bounds(args, kwargs) (line 715)
        from_bounds_call_result_102167 = invoke(stypy.reporting.localization.Localization(__file__, 715, 15), from_bounds_102161, *[x_102162, y_102163, width_102164, height_102165], **kwargs_102166)
        
        # Assigning a type to the variable 'bbox' (line 715)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 715, 8), 'bbox', from_bounds_call_result_102167)
        
        # Assigning a Call to a Name (line 716):
        
        # Assigning a Call to a Name (line 716):
        
        # Assigning a Call to a Name (line 716):
        
        # Call to Affine2D(...): (line 716)
        # Processing the call keyword arguments (line 716)
        kwargs_102170 = {}
        # Getting the type of 'transforms' (line 716)
        transforms_102168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 20), 'transforms', False)
        # Obtaining the member 'Affine2D' of a type (line 716)
        Affine2D_102169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 716, 20), transforms_102168, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 716)
        Affine2D_call_result_102171 = invoke(stypy.reporting.localization.Localization(__file__, 716, 20), Affine2D_102169, *[], **kwargs_102170)
        
        # Assigning a type to the variable 'rot_trans' (line 716)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 716, 8), 'rot_trans', Affine2D_call_result_102171)
        
        # Call to rotate_deg_around(...): (line 717)
        # Processing the call arguments (line 717)
        # Getting the type of 'x' (line 717)
        x_102174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 36), 'x', False)
        # Getting the type of 'y' (line 717)
        y_102175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 39), 'y', False)
        # Getting the type of 'self' (line 717)
        self_102176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 42), 'self', False)
        # Obtaining the member 'angle' of a type (line 717)
        angle_102177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 717, 42), self_102176, 'angle')
        # Processing the call keyword arguments (line 717)
        kwargs_102178 = {}
        # Getting the type of 'rot_trans' (line 717)
        rot_trans_102172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 8), 'rot_trans', False)
        # Obtaining the member 'rotate_deg_around' of a type (line 717)
        rotate_deg_around_102173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 717, 8), rot_trans_102172, 'rotate_deg_around')
        # Calling rotate_deg_around(args, kwargs) (line 717)
        rotate_deg_around_call_result_102179 = invoke(stypy.reporting.localization.Localization(__file__, 717, 8), rotate_deg_around_102173, *[x_102174, y_102175, angle_102177], **kwargs_102178)
        
        
        # Assigning a Call to a Attribute (line 718):
        
        # Assigning a Call to a Attribute (line 718):
        
        # Assigning a Call to a Attribute (line 718):
        
        # Call to BboxTransformTo(...): (line 718)
        # Processing the call arguments (line 718)
        # Getting the type of 'bbox' (line 718)
        bbox_102182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 58), 'bbox', False)
        # Processing the call keyword arguments (line 718)
        kwargs_102183 = {}
        # Getting the type of 'transforms' (line 718)
        transforms_102180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 31), 'transforms', False)
        # Obtaining the member 'BboxTransformTo' of a type (line 718)
        BboxTransformTo_102181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 718, 31), transforms_102180, 'BboxTransformTo')
        # Calling BboxTransformTo(args, kwargs) (line 718)
        BboxTransformTo_call_result_102184 = invoke(stypy.reporting.localization.Localization(__file__, 718, 31), BboxTransformTo_102181, *[bbox_102182], **kwargs_102183)
        
        # Getting the type of 'self' (line 718)
        self_102185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 8), 'self')
        # Setting the type of the member '_rect_transform' of a type (line 718)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 718, 8), self_102185, '_rect_transform', BboxTransformTo_call_result_102184)
        
        # Getting the type of 'self' (line 719)
        self_102186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 8), 'self')
        # Obtaining the member '_rect_transform' of a type (line 719)
        _rect_transform_102187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 719, 8), self_102186, '_rect_transform')
        # Getting the type of 'rot_trans' (line 719)
        rot_trans_102188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 32), 'rot_trans')
        # Applying the binary operator '+=' (line 719)
        result_iadd_102189 = python_operator(stypy.reporting.localization.Localization(__file__, 719, 8), '+=', _rect_transform_102187, rot_trans_102188)
        # Getting the type of 'self' (line 719)
        self_102190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 8), 'self')
        # Setting the type of the member '_rect_transform' of a type (line 719)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 719, 8), self_102190, '_rect_transform', result_iadd_102189)
        
        
        # ################# End of '_update_patch_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update_patch_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 705)
        stypy_return_type_102191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102191)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update_patch_transform'
        return stypy_return_type_102191


    @norecursion
    def get_patch_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_patch_transform'
        module_type_store = module_type_store.open_function_context('get_patch_transform', 721, 4, False)
        # Assigning a type to the variable 'self' (line 722)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 722, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Rectangle.get_patch_transform.__dict__.__setitem__('stypy_localization', localization)
        Rectangle.get_patch_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Rectangle.get_patch_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        Rectangle.get_patch_transform.__dict__.__setitem__('stypy_function_name', 'Rectangle.get_patch_transform')
        Rectangle.get_patch_transform.__dict__.__setitem__('stypy_param_names_list', [])
        Rectangle.get_patch_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        Rectangle.get_patch_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Rectangle.get_patch_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        Rectangle.get_patch_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        Rectangle.get_patch_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Rectangle.get_patch_transform.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Rectangle.get_patch_transform', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_patch_transform', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_patch_transform(...)' code ##################

        
        # Call to _update_patch_transform(...): (line 722)
        # Processing the call keyword arguments (line 722)
        kwargs_102194 = {}
        # Getting the type of 'self' (line 722)
        self_102192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 8), 'self', False)
        # Obtaining the member '_update_patch_transform' of a type (line 722)
        _update_patch_transform_102193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 722, 8), self_102192, '_update_patch_transform')
        # Calling _update_patch_transform(args, kwargs) (line 722)
        _update_patch_transform_call_result_102195 = invoke(stypy.reporting.localization.Localization(__file__, 722, 8), _update_patch_transform_102193, *[], **kwargs_102194)
        
        # Getting the type of 'self' (line 723)
        self_102196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 15), 'self')
        # Obtaining the member '_rect_transform' of a type (line 723)
        _rect_transform_102197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 723, 15), self_102196, '_rect_transform')
        # Assigning a type to the variable 'stypy_return_type' (line 723)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 723, 8), 'stypy_return_type', _rect_transform_102197)
        
        # ################# End of 'get_patch_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_patch_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 721)
        stypy_return_type_102198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 721, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102198)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_patch_transform'
        return stypy_return_type_102198


    @norecursion
    def get_x(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_x'
        module_type_store = module_type_store.open_function_context('get_x', 725, 4, False)
        # Assigning a type to the variable 'self' (line 726)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 726, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Rectangle.get_x.__dict__.__setitem__('stypy_localization', localization)
        Rectangle.get_x.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Rectangle.get_x.__dict__.__setitem__('stypy_type_store', module_type_store)
        Rectangle.get_x.__dict__.__setitem__('stypy_function_name', 'Rectangle.get_x')
        Rectangle.get_x.__dict__.__setitem__('stypy_param_names_list', [])
        Rectangle.get_x.__dict__.__setitem__('stypy_varargs_param_name', None)
        Rectangle.get_x.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Rectangle.get_x.__dict__.__setitem__('stypy_call_defaults', defaults)
        Rectangle.get_x.__dict__.__setitem__('stypy_call_varargs', varargs)
        Rectangle.get_x.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Rectangle.get_x.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Rectangle.get_x', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_x', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_x(...)' code ##################

        unicode_102199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 726, 8), 'unicode', u'Return the left coord of the rectangle')
        # Getting the type of 'self' (line 727)
        self_102200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 15), 'self')
        # Obtaining the member '_x' of a type (line 727)
        _x_102201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 727, 15), self_102200, '_x')
        # Assigning a type to the variable 'stypy_return_type' (line 727)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 727, 8), 'stypy_return_type', _x_102201)
        
        # ################# End of 'get_x(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_x' in the type store
        # Getting the type of 'stypy_return_type' (line 725)
        stypy_return_type_102202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102202)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_x'
        return stypy_return_type_102202


    @norecursion
    def get_y(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_y'
        module_type_store = module_type_store.open_function_context('get_y', 729, 4, False)
        # Assigning a type to the variable 'self' (line 730)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 730, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Rectangle.get_y.__dict__.__setitem__('stypy_localization', localization)
        Rectangle.get_y.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Rectangle.get_y.__dict__.__setitem__('stypy_type_store', module_type_store)
        Rectangle.get_y.__dict__.__setitem__('stypy_function_name', 'Rectangle.get_y')
        Rectangle.get_y.__dict__.__setitem__('stypy_param_names_list', [])
        Rectangle.get_y.__dict__.__setitem__('stypy_varargs_param_name', None)
        Rectangle.get_y.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Rectangle.get_y.__dict__.__setitem__('stypy_call_defaults', defaults)
        Rectangle.get_y.__dict__.__setitem__('stypy_call_varargs', varargs)
        Rectangle.get_y.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Rectangle.get_y.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Rectangle.get_y', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_y', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_y(...)' code ##################

        unicode_102203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 730, 8), 'unicode', u'Return the bottom coord of the rectangle')
        # Getting the type of 'self' (line 731)
        self_102204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 15), 'self')
        # Obtaining the member '_y' of a type (line 731)
        _y_102205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 731, 15), self_102204, '_y')
        # Assigning a type to the variable 'stypy_return_type' (line 731)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 731, 8), 'stypy_return_type', _y_102205)
        
        # ################# End of 'get_y(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_y' in the type store
        # Getting the type of 'stypy_return_type' (line 729)
        stypy_return_type_102206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102206)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_y'
        return stypy_return_type_102206


    @norecursion
    def get_xy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_xy'
        module_type_store = module_type_store.open_function_context('get_xy', 733, 4, False)
        # Assigning a type to the variable 'self' (line 734)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 734, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Rectangle.get_xy.__dict__.__setitem__('stypy_localization', localization)
        Rectangle.get_xy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Rectangle.get_xy.__dict__.__setitem__('stypy_type_store', module_type_store)
        Rectangle.get_xy.__dict__.__setitem__('stypy_function_name', 'Rectangle.get_xy')
        Rectangle.get_xy.__dict__.__setitem__('stypy_param_names_list', [])
        Rectangle.get_xy.__dict__.__setitem__('stypy_varargs_param_name', None)
        Rectangle.get_xy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Rectangle.get_xy.__dict__.__setitem__('stypy_call_defaults', defaults)
        Rectangle.get_xy.__dict__.__setitem__('stypy_call_varargs', varargs)
        Rectangle.get_xy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Rectangle.get_xy.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Rectangle.get_xy', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_xy', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_xy(...)' code ##################

        unicode_102207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 734, 8), 'unicode', u'Return the left and bottom coords of the rectangle')
        
        # Obtaining an instance of the builtin type 'tuple' (line 735)
        tuple_102208 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 735, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 735)
        # Adding element type (line 735)
        # Getting the type of 'self' (line 735)
        self_102209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 15), 'self')
        # Obtaining the member '_x' of a type (line 735)
        _x_102210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 735, 15), self_102209, '_x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 735, 15), tuple_102208, _x_102210)
        # Adding element type (line 735)
        # Getting the type of 'self' (line 735)
        self_102211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 24), 'self')
        # Obtaining the member '_y' of a type (line 735)
        _y_102212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 735, 24), self_102211, '_y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 735, 15), tuple_102208, _y_102212)
        
        # Assigning a type to the variable 'stypy_return_type' (line 735)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 735, 8), 'stypy_return_type', tuple_102208)
        
        # ################# End of 'get_xy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_xy' in the type store
        # Getting the type of 'stypy_return_type' (line 733)
        stypy_return_type_102213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102213)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_xy'
        return stypy_return_type_102213


    @norecursion
    def get_width(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_width'
        module_type_store = module_type_store.open_function_context('get_width', 737, 4, False)
        # Assigning a type to the variable 'self' (line 738)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 738, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Rectangle.get_width.__dict__.__setitem__('stypy_localization', localization)
        Rectangle.get_width.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Rectangle.get_width.__dict__.__setitem__('stypy_type_store', module_type_store)
        Rectangle.get_width.__dict__.__setitem__('stypy_function_name', 'Rectangle.get_width')
        Rectangle.get_width.__dict__.__setitem__('stypy_param_names_list', [])
        Rectangle.get_width.__dict__.__setitem__('stypy_varargs_param_name', None)
        Rectangle.get_width.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Rectangle.get_width.__dict__.__setitem__('stypy_call_defaults', defaults)
        Rectangle.get_width.__dict__.__setitem__('stypy_call_varargs', varargs)
        Rectangle.get_width.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Rectangle.get_width.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Rectangle.get_width', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_width', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_width(...)' code ##################

        unicode_102214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 738, 8), 'unicode', u'Return the width of the  rectangle')
        # Getting the type of 'self' (line 739)
        self_102215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 15), 'self')
        # Obtaining the member '_width' of a type (line 739)
        _width_102216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 739, 15), self_102215, '_width')
        # Assigning a type to the variable 'stypy_return_type' (line 739)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 739, 8), 'stypy_return_type', _width_102216)
        
        # ################# End of 'get_width(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_width' in the type store
        # Getting the type of 'stypy_return_type' (line 737)
        stypy_return_type_102217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102217)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_width'
        return stypy_return_type_102217


    @norecursion
    def get_height(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_height'
        module_type_store = module_type_store.open_function_context('get_height', 741, 4, False)
        # Assigning a type to the variable 'self' (line 742)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 742, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Rectangle.get_height.__dict__.__setitem__('stypy_localization', localization)
        Rectangle.get_height.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Rectangle.get_height.__dict__.__setitem__('stypy_type_store', module_type_store)
        Rectangle.get_height.__dict__.__setitem__('stypy_function_name', 'Rectangle.get_height')
        Rectangle.get_height.__dict__.__setitem__('stypy_param_names_list', [])
        Rectangle.get_height.__dict__.__setitem__('stypy_varargs_param_name', None)
        Rectangle.get_height.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Rectangle.get_height.__dict__.__setitem__('stypy_call_defaults', defaults)
        Rectangle.get_height.__dict__.__setitem__('stypy_call_varargs', varargs)
        Rectangle.get_height.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Rectangle.get_height.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Rectangle.get_height', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_height', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_height(...)' code ##################

        unicode_102218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 742, 8), 'unicode', u'Return the height of the rectangle')
        # Getting the type of 'self' (line 743)
        self_102219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 15), 'self')
        # Obtaining the member '_height' of a type (line 743)
        _height_102220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 743, 15), self_102219, '_height')
        # Assigning a type to the variable 'stypy_return_type' (line 743)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 743, 8), 'stypy_return_type', _height_102220)
        
        # ################# End of 'get_height(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_height' in the type store
        # Getting the type of 'stypy_return_type' (line 741)
        stypy_return_type_102221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102221)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_height'
        return stypy_return_type_102221


    @norecursion
    def set_x(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_x'
        module_type_store = module_type_store.open_function_context('set_x', 745, 4, False)
        # Assigning a type to the variable 'self' (line 746)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 746, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Rectangle.set_x.__dict__.__setitem__('stypy_localization', localization)
        Rectangle.set_x.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Rectangle.set_x.__dict__.__setitem__('stypy_type_store', module_type_store)
        Rectangle.set_x.__dict__.__setitem__('stypy_function_name', 'Rectangle.set_x')
        Rectangle.set_x.__dict__.__setitem__('stypy_param_names_list', ['x'])
        Rectangle.set_x.__dict__.__setitem__('stypy_varargs_param_name', None)
        Rectangle.set_x.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Rectangle.set_x.__dict__.__setitem__('stypy_call_defaults', defaults)
        Rectangle.set_x.__dict__.__setitem__('stypy_call_varargs', varargs)
        Rectangle.set_x.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Rectangle.set_x.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Rectangle.set_x', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_x', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_x(...)' code ##################

        unicode_102222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 750, (-1)), 'unicode', u'\n        Set the left coord of the rectangle\n\n        ACCEPTS: float\n        ')
        
        # Assigning a Name to a Attribute (line 751):
        
        # Assigning a Name to a Attribute (line 751):
        
        # Assigning a Name to a Attribute (line 751):
        # Getting the type of 'x' (line 751)
        x_102223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 18), 'x')
        # Getting the type of 'self' (line 751)
        self_102224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'self')
        # Setting the type of the member '_x' of a type (line 751)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 751, 8), self_102224, '_x', x_102223)
        
        # Assigning a Name to a Attribute (line 752):
        
        # Assigning a Name to a Attribute (line 752):
        
        # Assigning a Name to a Attribute (line 752):
        # Getting the type of 'True' (line 752)
        True_102225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 21), 'True')
        # Getting the type of 'self' (line 752)
        self_102226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 752)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 752, 8), self_102226, 'stale', True_102225)
        
        # ################# End of 'set_x(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_x' in the type store
        # Getting the type of 'stypy_return_type' (line 745)
        stypy_return_type_102227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102227)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_x'
        return stypy_return_type_102227


    @norecursion
    def set_y(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_y'
        module_type_store = module_type_store.open_function_context('set_y', 754, 4, False)
        # Assigning a type to the variable 'self' (line 755)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 755, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Rectangle.set_y.__dict__.__setitem__('stypy_localization', localization)
        Rectangle.set_y.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Rectangle.set_y.__dict__.__setitem__('stypy_type_store', module_type_store)
        Rectangle.set_y.__dict__.__setitem__('stypy_function_name', 'Rectangle.set_y')
        Rectangle.set_y.__dict__.__setitem__('stypy_param_names_list', ['y'])
        Rectangle.set_y.__dict__.__setitem__('stypy_varargs_param_name', None)
        Rectangle.set_y.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Rectangle.set_y.__dict__.__setitem__('stypy_call_defaults', defaults)
        Rectangle.set_y.__dict__.__setitem__('stypy_call_varargs', varargs)
        Rectangle.set_y.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Rectangle.set_y.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Rectangle.set_y', ['y'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_y', localization, ['y'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_y(...)' code ##################

        unicode_102228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 759, (-1)), 'unicode', u'\n        Set the bottom coord of the rectangle\n\n        ACCEPTS: float\n        ')
        
        # Assigning a Name to a Attribute (line 760):
        
        # Assigning a Name to a Attribute (line 760):
        
        # Assigning a Name to a Attribute (line 760):
        # Getting the type of 'y' (line 760)
        y_102229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 18), 'y')
        # Getting the type of 'self' (line 760)
        self_102230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 8), 'self')
        # Setting the type of the member '_y' of a type (line 760)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 760, 8), self_102230, '_y', y_102229)
        
        # Assigning a Name to a Attribute (line 761):
        
        # Assigning a Name to a Attribute (line 761):
        
        # Assigning a Name to a Attribute (line 761):
        # Getting the type of 'True' (line 761)
        True_102231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 21), 'True')
        # Getting the type of 'self' (line 761)
        self_102232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 761)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 761, 8), self_102232, 'stale', True_102231)
        
        # ################# End of 'set_y(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_y' in the type store
        # Getting the type of 'stypy_return_type' (line 754)
        stypy_return_type_102233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102233)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_y'
        return stypy_return_type_102233


    @norecursion
    def set_xy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_xy'
        module_type_store = module_type_store.open_function_context('set_xy', 763, 4, False)
        # Assigning a type to the variable 'self' (line 764)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 764, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Rectangle.set_xy.__dict__.__setitem__('stypy_localization', localization)
        Rectangle.set_xy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Rectangle.set_xy.__dict__.__setitem__('stypy_type_store', module_type_store)
        Rectangle.set_xy.__dict__.__setitem__('stypy_function_name', 'Rectangle.set_xy')
        Rectangle.set_xy.__dict__.__setitem__('stypy_param_names_list', ['xy'])
        Rectangle.set_xy.__dict__.__setitem__('stypy_varargs_param_name', None)
        Rectangle.set_xy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Rectangle.set_xy.__dict__.__setitem__('stypy_call_defaults', defaults)
        Rectangle.set_xy.__dict__.__setitem__('stypy_call_varargs', varargs)
        Rectangle.set_xy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Rectangle.set_xy.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Rectangle.set_xy', ['xy'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_xy', localization, ['xy'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_xy(...)' code ##################

        unicode_102234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 768, (-1)), 'unicode', u'\n        Set the left and bottom coords of the rectangle\n\n        ACCEPTS: 2-item sequence\n        ')
        
        # Assigning a Name to a Tuple (line 769):
        
        # Assigning a Subscript to a Name (line 769):
        
        # Assigning a Subscript to a Name (line 769):
        
        # Obtaining the type of the subscript
        int_102235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 769, 8), 'int')
        # Getting the type of 'xy' (line 769)
        xy_102236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 27), 'xy')
        # Obtaining the member '__getitem__' of a type (line 769)
        getitem___102237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 769, 8), xy_102236, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 769)
        subscript_call_result_102238 = invoke(stypy.reporting.localization.Localization(__file__, 769, 8), getitem___102237, int_102235)
        
        # Assigning a type to the variable 'tuple_var_assignment_100357' (line 769)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 769, 8), 'tuple_var_assignment_100357', subscript_call_result_102238)
        
        # Assigning a Subscript to a Name (line 769):
        
        # Assigning a Subscript to a Name (line 769):
        
        # Obtaining the type of the subscript
        int_102239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 769, 8), 'int')
        # Getting the type of 'xy' (line 769)
        xy_102240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 27), 'xy')
        # Obtaining the member '__getitem__' of a type (line 769)
        getitem___102241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 769, 8), xy_102240, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 769)
        subscript_call_result_102242 = invoke(stypy.reporting.localization.Localization(__file__, 769, 8), getitem___102241, int_102239)
        
        # Assigning a type to the variable 'tuple_var_assignment_100358' (line 769)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 769, 8), 'tuple_var_assignment_100358', subscript_call_result_102242)
        
        # Assigning a Name to a Attribute (line 769):
        
        # Assigning a Name to a Attribute (line 769):
        # Getting the type of 'tuple_var_assignment_100357' (line 769)
        tuple_var_assignment_100357_102243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 8), 'tuple_var_assignment_100357')
        # Getting the type of 'self' (line 769)
        self_102244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 8), 'self')
        # Setting the type of the member '_x' of a type (line 769)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 769, 8), self_102244, '_x', tuple_var_assignment_100357_102243)
        
        # Assigning a Name to a Attribute (line 769):
        
        # Assigning a Name to a Attribute (line 769):
        # Getting the type of 'tuple_var_assignment_100358' (line 769)
        tuple_var_assignment_100358_102245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 8), 'tuple_var_assignment_100358')
        # Getting the type of 'self' (line 769)
        self_102246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 17), 'self')
        # Setting the type of the member '_y' of a type (line 769)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 769, 17), self_102246, '_y', tuple_var_assignment_100358_102245)
        
        # Assigning a Name to a Attribute (line 770):
        
        # Assigning a Name to a Attribute (line 770):
        
        # Assigning a Name to a Attribute (line 770):
        # Getting the type of 'True' (line 770)
        True_102247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 21), 'True')
        # Getting the type of 'self' (line 770)
        self_102248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 770)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 770, 8), self_102248, 'stale', True_102247)
        
        # ################# End of 'set_xy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_xy' in the type store
        # Getting the type of 'stypy_return_type' (line 763)
        stypy_return_type_102249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102249)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_xy'
        return stypy_return_type_102249


    @norecursion
    def set_width(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_width'
        module_type_store = module_type_store.open_function_context('set_width', 772, 4, False)
        # Assigning a type to the variable 'self' (line 773)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 773, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Rectangle.set_width.__dict__.__setitem__('stypy_localization', localization)
        Rectangle.set_width.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Rectangle.set_width.__dict__.__setitem__('stypy_type_store', module_type_store)
        Rectangle.set_width.__dict__.__setitem__('stypy_function_name', 'Rectangle.set_width')
        Rectangle.set_width.__dict__.__setitem__('stypy_param_names_list', ['w'])
        Rectangle.set_width.__dict__.__setitem__('stypy_varargs_param_name', None)
        Rectangle.set_width.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Rectangle.set_width.__dict__.__setitem__('stypy_call_defaults', defaults)
        Rectangle.set_width.__dict__.__setitem__('stypy_call_varargs', varargs)
        Rectangle.set_width.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Rectangle.set_width.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Rectangle.set_width', ['w'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_width', localization, ['w'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_width(...)' code ##################

        unicode_102250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 777, (-1)), 'unicode', u'\n        Set the width rectangle\n\n        ACCEPTS: float\n        ')
        
        # Assigning a Name to a Attribute (line 778):
        
        # Assigning a Name to a Attribute (line 778):
        
        # Assigning a Name to a Attribute (line 778):
        # Getting the type of 'w' (line 778)
        w_102251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 22), 'w')
        # Getting the type of 'self' (line 778)
        self_102252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 8), 'self')
        # Setting the type of the member '_width' of a type (line 778)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 778, 8), self_102252, '_width', w_102251)
        
        # Assigning a Name to a Attribute (line 779):
        
        # Assigning a Name to a Attribute (line 779):
        
        # Assigning a Name to a Attribute (line 779):
        # Getting the type of 'True' (line 779)
        True_102253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 21), 'True')
        # Getting the type of 'self' (line 779)
        self_102254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 779)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 779, 8), self_102254, 'stale', True_102253)
        
        # ################# End of 'set_width(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_width' in the type store
        # Getting the type of 'stypy_return_type' (line 772)
        stypy_return_type_102255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102255)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_width'
        return stypy_return_type_102255


    @norecursion
    def set_height(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_height'
        module_type_store = module_type_store.open_function_context('set_height', 781, 4, False)
        # Assigning a type to the variable 'self' (line 782)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 782, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Rectangle.set_height.__dict__.__setitem__('stypy_localization', localization)
        Rectangle.set_height.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Rectangle.set_height.__dict__.__setitem__('stypy_type_store', module_type_store)
        Rectangle.set_height.__dict__.__setitem__('stypy_function_name', 'Rectangle.set_height')
        Rectangle.set_height.__dict__.__setitem__('stypy_param_names_list', ['h'])
        Rectangle.set_height.__dict__.__setitem__('stypy_varargs_param_name', None)
        Rectangle.set_height.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Rectangle.set_height.__dict__.__setitem__('stypy_call_defaults', defaults)
        Rectangle.set_height.__dict__.__setitem__('stypy_call_varargs', varargs)
        Rectangle.set_height.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Rectangle.set_height.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Rectangle.set_height', ['h'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_height', localization, ['h'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_height(...)' code ##################

        unicode_102256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 786, (-1)), 'unicode', u'\n        Set the width rectangle\n\n        ACCEPTS: float\n        ')
        
        # Assigning a Name to a Attribute (line 787):
        
        # Assigning a Name to a Attribute (line 787):
        
        # Assigning a Name to a Attribute (line 787):
        # Getting the type of 'h' (line 787)
        h_102257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 23), 'h')
        # Getting the type of 'self' (line 787)
        self_102258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 8), 'self')
        # Setting the type of the member '_height' of a type (line 787)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 787, 8), self_102258, '_height', h_102257)
        
        # Assigning a Name to a Attribute (line 788):
        
        # Assigning a Name to a Attribute (line 788):
        
        # Assigning a Name to a Attribute (line 788):
        # Getting the type of 'True' (line 788)
        True_102259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 21), 'True')
        # Getting the type of 'self' (line 788)
        self_102260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 788)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 788, 8), self_102260, 'stale', True_102259)
        
        # ################# End of 'set_height(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_height' in the type store
        # Getting the type of 'stypy_return_type' (line 781)
        stypy_return_type_102261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102261)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_height'
        return stypy_return_type_102261


    @norecursion
    def set_bounds(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_bounds'
        module_type_store = module_type_store.open_function_context('set_bounds', 790, 4, False)
        # Assigning a type to the variable 'self' (line 791)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 791, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Rectangle.set_bounds.__dict__.__setitem__('stypy_localization', localization)
        Rectangle.set_bounds.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Rectangle.set_bounds.__dict__.__setitem__('stypy_type_store', module_type_store)
        Rectangle.set_bounds.__dict__.__setitem__('stypy_function_name', 'Rectangle.set_bounds')
        Rectangle.set_bounds.__dict__.__setitem__('stypy_param_names_list', [])
        Rectangle.set_bounds.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        Rectangle.set_bounds.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Rectangle.set_bounds.__dict__.__setitem__('stypy_call_defaults', defaults)
        Rectangle.set_bounds.__dict__.__setitem__('stypy_call_varargs', varargs)
        Rectangle.set_bounds.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Rectangle.set_bounds.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Rectangle.set_bounds', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_bounds', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_bounds(...)' code ##################

        unicode_102262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 795, (-1)), 'unicode', u'\n        Set the bounds of the rectangle: l,b,w,h\n\n        ACCEPTS: (left, bottom, width, height)\n        ')
        
        
        
        # Call to len(...): (line 796)
        # Processing the call arguments (line 796)
        # Getting the type of 'args' (line 796)
        args_102264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 15), 'args', False)
        # Processing the call keyword arguments (line 796)
        kwargs_102265 = {}
        # Getting the type of 'len' (line 796)
        len_102263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 11), 'len', False)
        # Calling len(args, kwargs) (line 796)
        len_call_result_102266 = invoke(stypy.reporting.localization.Localization(__file__, 796, 11), len_102263, *[args_102264], **kwargs_102265)
        
        int_102267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 796, 24), 'int')
        # Applying the binary operator '==' (line 796)
        result_eq_102268 = python_operator(stypy.reporting.localization.Localization(__file__, 796, 11), '==', len_call_result_102266, int_102267)
        
        # Testing the type of an if condition (line 796)
        if_condition_102269 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 796, 8), result_eq_102268)
        # Assigning a type to the variable 'if_condition_102269' (line 796)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 796, 8), 'if_condition_102269', if_condition_102269)
        # SSA begins for if statement (line 796)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Tuple (line 797):
        
        # Assigning a Subscript to a Name (line 797):
        
        # Assigning a Subscript to a Name (line 797):
        
        # Obtaining the type of the subscript
        int_102270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 797, 12), 'int')
        
        # Obtaining the type of the subscript
        int_102271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 797, 30), 'int')
        # Getting the type of 'args' (line 797)
        args_102272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 25), 'args')
        # Obtaining the member '__getitem__' of a type (line 797)
        getitem___102273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 25), args_102272, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 797)
        subscript_call_result_102274 = invoke(stypy.reporting.localization.Localization(__file__, 797, 25), getitem___102273, int_102271)
        
        # Obtaining the member '__getitem__' of a type (line 797)
        getitem___102275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 12), subscript_call_result_102274, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 797)
        subscript_call_result_102276 = invoke(stypy.reporting.localization.Localization(__file__, 797, 12), getitem___102275, int_102270)
        
        # Assigning a type to the variable 'tuple_var_assignment_100359' (line 797)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 797, 12), 'tuple_var_assignment_100359', subscript_call_result_102276)
        
        # Assigning a Subscript to a Name (line 797):
        
        # Assigning a Subscript to a Name (line 797):
        
        # Obtaining the type of the subscript
        int_102277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 797, 12), 'int')
        
        # Obtaining the type of the subscript
        int_102278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 797, 30), 'int')
        # Getting the type of 'args' (line 797)
        args_102279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 25), 'args')
        # Obtaining the member '__getitem__' of a type (line 797)
        getitem___102280 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 25), args_102279, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 797)
        subscript_call_result_102281 = invoke(stypy.reporting.localization.Localization(__file__, 797, 25), getitem___102280, int_102278)
        
        # Obtaining the member '__getitem__' of a type (line 797)
        getitem___102282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 12), subscript_call_result_102281, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 797)
        subscript_call_result_102283 = invoke(stypy.reporting.localization.Localization(__file__, 797, 12), getitem___102282, int_102277)
        
        # Assigning a type to the variable 'tuple_var_assignment_100360' (line 797)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 797, 12), 'tuple_var_assignment_100360', subscript_call_result_102283)
        
        # Assigning a Subscript to a Name (line 797):
        
        # Assigning a Subscript to a Name (line 797):
        
        # Obtaining the type of the subscript
        int_102284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 797, 12), 'int')
        
        # Obtaining the type of the subscript
        int_102285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 797, 30), 'int')
        # Getting the type of 'args' (line 797)
        args_102286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 25), 'args')
        # Obtaining the member '__getitem__' of a type (line 797)
        getitem___102287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 25), args_102286, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 797)
        subscript_call_result_102288 = invoke(stypy.reporting.localization.Localization(__file__, 797, 25), getitem___102287, int_102285)
        
        # Obtaining the member '__getitem__' of a type (line 797)
        getitem___102289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 12), subscript_call_result_102288, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 797)
        subscript_call_result_102290 = invoke(stypy.reporting.localization.Localization(__file__, 797, 12), getitem___102289, int_102284)
        
        # Assigning a type to the variable 'tuple_var_assignment_100361' (line 797)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 797, 12), 'tuple_var_assignment_100361', subscript_call_result_102290)
        
        # Assigning a Subscript to a Name (line 797):
        
        # Assigning a Subscript to a Name (line 797):
        
        # Obtaining the type of the subscript
        int_102291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 797, 12), 'int')
        
        # Obtaining the type of the subscript
        int_102292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 797, 30), 'int')
        # Getting the type of 'args' (line 797)
        args_102293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 25), 'args')
        # Obtaining the member '__getitem__' of a type (line 797)
        getitem___102294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 25), args_102293, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 797)
        subscript_call_result_102295 = invoke(stypy.reporting.localization.Localization(__file__, 797, 25), getitem___102294, int_102292)
        
        # Obtaining the member '__getitem__' of a type (line 797)
        getitem___102296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 12), subscript_call_result_102295, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 797)
        subscript_call_result_102297 = invoke(stypy.reporting.localization.Localization(__file__, 797, 12), getitem___102296, int_102291)
        
        # Assigning a type to the variable 'tuple_var_assignment_100362' (line 797)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 797, 12), 'tuple_var_assignment_100362', subscript_call_result_102297)
        
        # Assigning a Name to a Name (line 797):
        
        # Assigning a Name to a Name (line 797):
        # Getting the type of 'tuple_var_assignment_100359' (line 797)
        tuple_var_assignment_100359_102298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 12), 'tuple_var_assignment_100359')
        # Assigning a type to the variable 'l' (line 797)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 797, 12), 'l', tuple_var_assignment_100359_102298)
        
        # Assigning a Name to a Name (line 797):
        
        # Assigning a Name to a Name (line 797):
        # Getting the type of 'tuple_var_assignment_100360' (line 797)
        tuple_var_assignment_100360_102299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 12), 'tuple_var_assignment_100360')
        # Assigning a type to the variable 'b' (line 797)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 797, 15), 'b', tuple_var_assignment_100360_102299)
        
        # Assigning a Name to a Name (line 797):
        
        # Assigning a Name to a Name (line 797):
        # Getting the type of 'tuple_var_assignment_100361' (line 797)
        tuple_var_assignment_100361_102300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 12), 'tuple_var_assignment_100361')
        # Assigning a type to the variable 'w' (line 797)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 797, 18), 'w', tuple_var_assignment_100361_102300)
        
        # Assigning a Name to a Name (line 797):
        
        # Assigning a Name to a Name (line 797):
        # Getting the type of 'tuple_var_assignment_100362' (line 797)
        tuple_var_assignment_100362_102301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 12), 'tuple_var_assignment_100362')
        # Assigning a type to the variable 'h' (line 797)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 797, 21), 'h', tuple_var_assignment_100362_102301)
        # SSA branch for the else part of an if statement (line 796)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Tuple (line 799):
        
        # Assigning a Subscript to a Name (line 799):
        
        # Assigning a Subscript to a Name (line 799):
        
        # Obtaining the type of the subscript
        int_102302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 799, 12), 'int')
        # Getting the type of 'args' (line 799)
        args_102303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 25), 'args')
        # Obtaining the member '__getitem__' of a type (line 799)
        getitem___102304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 799, 12), args_102303, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 799)
        subscript_call_result_102305 = invoke(stypy.reporting.localization.Localization(__file__, 799, 12), getitem___102304, int_102302)
        
        # Assigning a type to the variable 'tuple_var_assignment_100363' (line 799)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 799, 12), 'tuple_var_assignment_100363', subscript_call_result_102305)
        
        # Assigning a Subscript to a Name (line 799):
        
        # Assigning a Subscript to a Name (line 799):
        
        # Obtaining the type of the subscript
        int_102306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 799, 12), 'int')
        # Getting the type of 'args' (line 799)
        args_102307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 25), 'args')
        # Obtaining the member '__getitem__' of a type (line 799)
        getitem___102308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 799, 12), args_102307, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 799)
        subscript_call_result_102309 = invoke(stypy.reporting.localization.Localization(__file__, 799, 12), getitem___102308, int_102306)
        
        # Assigning a type to the variable 'tuple_var_assignment_100364' (line 799)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 799, 12), 'tuple_var_assignment_100364', subscript_call_result_102309)
        
        # Assigning a Subscript to a Name (line 799):
        
        # Assigning a Subscript to a Name (line 799):
        
        # Obtaining the type of the subscript
        int_102310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 799, 12), 'int')
        # Getting the type of 'args' (line 799)
        args_102311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 25), 'args')
        # Obtaining the member '__getitem__' of a type (line 799)
        getitem___102312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 799, 12), args_102311, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 799)
        subscript_call_result_102313 = invoke(stypy.reporting.localization.Localization(__file__, 799, 12), getitem___102312, int_102310)
        
        # Assigning a type to the variable 'tuple_var_assignment_100365' (line 799)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 799, 12), 'tuple_var_assignment_100365', subscript_call_result_102313)
        
        # Assigning a Subscript to a Name (line 799):
        
        # Assigning a Subscript to a Name (line 799):
        
        # Obtaining the type of the subscript
        int_102314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 799, 12), 'int')
        # Getting the type of 'args' (line 799)
        args_102315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 25), 'args')
        # Obtaining the member '__getitem__' of a type (line 799)
        getitem___102316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 799, 12), args_102315, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 799)
        subscript_call_result_102317 = invoke(stypy.reporting.localization.Localization(__file__, 799, 12), getitem___102316, int_102314)
        
        # Assigning a type to the variable 'tuple_var_assignment_100366' (line 799)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 799, 12), 'tuple_var_assignment_100366', subscript_call_result_102317)
        
        # Assigning a Name to a Name (line 799):
        
        # Assigning a Name to a Name (line 799):
        # Getting the type of 'tuple_var_assignment_100363' (line 799)
        tuple_var_assignment_100363_102318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 12), 'tuple_var_assignment_100363')
        # Assigning a type to the variable 'l' (line 799)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 799, 12), 'l', tuple_var_assignment_100363_102318)
        
        # Assigning a Name to a Name (line 799):
        
        # Assigning a Name to a Name (line 799):
        # Getting the type of 'tuple_var_assignment_100364' (line 799)
        tuple_var_assignment_100364_102319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 12), 'tuple_var_assignment_100364')
        # Assigning a type to the variable 'b' (line 799)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 799, 15), 'b', tuple_var_assignment_100364_102319)
        
        # Assigning a Name to a Name (line 799):
        
        # Assigning a Name to a Name (line 799):
        # Getting the type of 'tuple_var_assignment_100365' (line 799)
        tuple_var_assignment_100365_102320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 12), 'tuple_var_assignment_100365')
        # Assigning a type to the variable 'w' (line 799)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 799, 18), 'w', tuple_var_assignment_100365_102320)
        
        # Assigning a Name to a Name (line 799):
        
        # Assigning a Name to a Name (line 799):
        # Getting the type of 'tuple_var_assignment_100366' (line 799)
        tuple_var_assignment_100366_102321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 12), 'tuple_var_assignment_100366')
        # Assigning a type to the variable 'h' (line 799)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 799, 21), 'h', tuple_var_assignment_100366_102321)
        # SSA join for if statement (line 796)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 800):
        
        # Assigning a Name to a Attribute (line 800):
        
        # Assigning a Name to a Attribute (line 800):
        # Getting the type of 'l' (line 800)
        l_102322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 18), 'l')
        # Getting the type of 'self' (line 800)
        self_102323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 8), 'self')
        # Setting the type of the member '_x' of a type (line 800)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 800, 8), self_102323, '_x', l_102322)
        
        # Assigning a Name to a Attribute (line 801):
        
        # Assigning a Name to a Attribute (line 801):
        
        # Assigning a Name to a Attribute (line 801):
        # Getting the type of 'b' (line 801)
        b_102324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 18), 'b')
        # Getting the type of 'self' (line 801)
        self_102325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 8), 'self')
        # Setting the type of the member '_y' of a type (line 801)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 801, 8), self_102325, '_y', b_102324)
        
        # Assigning a Name to a Attribute (line 802):
        
        # Assigning a Name to a Attribute (line 802):
        
        # Assigning a Name to a Attribute (line 802):
        # Getting the type of 'w' (line 802)
        w_102326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 22), 'w')
        # Getting the type of 'self' (line 802)
        self_102327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 8), 'self')
        # Setting the type of the member '_width' of a type (line 802)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 802, 8), self_102327, '_width', w_102326)
        
        # Assigning a Name to a Attribute (line 803):
        
        # Assigning a Name to a Attribute (line 803):
        
        # Assigning a Name to a Attribute (line 803):
        # Getting the type of 'h' (line 803)
        h_102328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 23), 'h')
        # Getting the type of 'self' (line 803)
        self_102329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 8), 'self')
        # Setting the type of the member '_height' of a type (line 803)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 803, 8), self_102329, '_height', h_102328)
        
        # Assigning a Name to a Attribute (line 804):
        
        # Assigning a Name to a Attribute (line 804):
        
        # Assigning a Name to a Attribute (line 804):
        # Getting the type of 'True' (line 804)
        True_102330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 21), 'True')
        # Getting the type of 'self' (line 804)
        self_102331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 804)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 804, 8), self_102331, 'stale', True_102330)
        
        # ################# End of 'set_bounds(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_bounds' in the type store
        # Getting the type of 'stypy_return_type' (line 790)
        stypy_return_type_102332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102332)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_bounds'
        return stypy_return_type_102332


    @norecursion
    def get_bbox(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_bbox'
        module_type_store = module_type_store.open_function_context('get_bbox', 806, 4, False)
        # Assigning a type to the variable 'self' (line 807)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 807, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Rectangle.get_bbox.__dict__.__setitem__('stypy_localization', localization)
        Rectangle.get_bbox.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Rectangle.get_bbox.__dict__.__setitem__('stypy_type_store', module_type_store)
        Rectangle.get_bbox.__dict__.__setitem__('stypy_function_name', 'Rectangle.get_bbox')
        Rectangle.get_bbox.__dict__.__setitem__('stypy_param_names_list', [])
        Rectangle.get_bbox.__dict__.__setitem__('stypy_varargs_param_name', None)
        Rectangle.get_bbox.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Rectangle.get_bbox.__dict__.__setitem__('stypy_call_defaults', defaults)
        Rectangle.get_bbox.__dict__.__setitem__('stypy_call_varargs', varargs)
        Rectangle.get_bbox.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Rectangle.get_bbox.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Rectangle.get_bbox', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_bbox', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_bbox(...)' code ##################

        
        # Call to from_bounds(...): (line 807)
        # Processing the call arguments (line 807)
        # Getting the type of 'self' (line 807)
        self_102336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 43), 'self', False)
        # Obtaining the member '_x' of a type (line 807)
        _x_102337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 807, 43), self_102336, '_x')
        # Getting the type of 'self' (line 807)
        self_102338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 52), 'self', False)
        # Obtaining the member '_y' of a type (line 807)
        _y_102339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 807, 52), self_102338, '_y')
        # Getting the type of 'self' (line 808)
        self_102340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 43), 'self', False)
        # Obtaining the member '_width' of a type (line 808)
        _width_102341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 43), self_102340, '_width')
        # Getting the type of 'self' (line 808)
        self_102342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 56), 'self', False)
        # Obtaining the member '_height' of a type (line 808)
        _height_102343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 56), self_102342, '_height')
        # Processing the call keyword arguments (line 807)
        kwargs_102344 = {}
        # Getting the type of 'transforms' (line 807)
        transforms_102333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 15), 'transforms', False)
        # Obtaining the member 'Bbox' of a type (line 807)
        Bbox_102334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 807, 15), transforms_102333, 'Bbox')
        # Obtaining the member 'from_bounds' of a type (line 807)
        from_bounds_102335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 807, 15), Bbox_102334, 'from_bounds')
        # Calling from_bounds(args, kwargs) (line 807)
        from_bounds_call_result_102345 = invoke(stypy.reporting.localization.Localization(__file__, 807, 15), from_bounds_102335, *[_x_102337, _y_102339, _width_102341, _height_102343], **kwargs_102344)
        
        # Assigning a type to the variable 'stypy_return_type' (line 807)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 807, 8), 'stypy_return_type', from_bounds_call_result_102345)
        
        # ################# End of 'get_bbox(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_bbox' in the type store
        # Getting the type of 'stypy_return_type' (line 806)
        stypy_return_type_102346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102346)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_bbox'
        return stypy_return_type_102346

    
    # Assigning a Call to a Name (line 810):
    
    # Assigning a Call to a Name (line 810):

# Assigning a type to the variable 'Rectangle' (line 665)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 665, 0), 'Rectangle', Rectangle)

# Assigning a Call to a Name (line 810):

# Call to property(...): (line 810)
# Processing the call arguments (line 810)
# Getting the type of 'Rectangle'
Rectangle_102348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Rectangle', False)
# Obtaining the member 'get_xy' of a type
get_xy_102349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Rectangle_102348, 'get_xy')
# Getting the type of 'Rectangle'
Rectangle_102350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Rectangle', False)
# Obtaining the member 'set_xy' of a type
set_xy_102351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Rectangle_102350, 'set_xy')
# Processing the call keyword arguments (line 810)
kwargs_102352 = {}
# Getting the type of 'property' (line 810)
property_102347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 810, 9), 'property', False)
# Calling property(args, kwargs) (line 810)
property_call_result_102353 = invoke(stypy.reporting.localization.Localization(__file__, 810, 9), property_102347, *[get_xy_102349, set_xy_102351], **kwargs_102352)

# Getting the type of 'Rectangle'
Rectangle_102354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Rectangle')
# Setting the type of the member 'xy' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Rectangle_102354, 'xy', property_call_result_102353)
# Declaration of the 'RegularPolygon' class
# Getting the type of 'Patch' (line 813)
Patch_102355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 21), 'Patch')

class RegularPolygon(Patch_102355, ):
    unicode_102356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 816, (-1)), 'unicode', u'\n    A regular polygon patch.\n    ')

    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 817, 4, False)
        # Assigning a type to the variable 'self' (line 818)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 818, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RegularPolygon.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        RegularPolygon.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RegularPolygon.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        RegularPolygon.stypy__str__.__dict__.__setitem__('stypy_function_name', 'RegularPolygon.stypy__str__')
        RegularPolygon.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        RegularPolygon.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        RegularPolygon.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RegularPolygon.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        RegularPolygon.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        RegularPolygon.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RegularPolygon.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RegularPolygon.stypy__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        unicode_102357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 818, 15), 'unicode', u'Poly%d(%g,%g)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 818)
        tuple_102358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 818, 34), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 818)
        # Adding element type (line 818)
        # Getting the type of 'self' (line 818)
        self_102359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 34), 'self')
        # Obtaining the member '_numVertices' of a type (line 818)
        _numVertices_102360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 818, 34), self_102359, '_numVertices')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 818, 34), tuple_102358, _numVertices_102360)
        # Adding element type (line 818)
        
        # Obtaining the type of the subscript
        int_102361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 818, 62), 'int')
        # Getting the type of 'self' (line 818)
        self_102362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 53), 'self')
        # Obtaining the member '_xy' of a type (line 818)
        _xy_102363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 818, 53), self_102362, '_xy')
        # Obtaining the member '__getitem__' of a type (line 818)
        getitem___102364 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 818, 53), _xy_102363, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 818)
        subscript_call_result_102365 = invoke(stypy.reporting.localization.Localization(__file__, 818, 53), getitem___102364, int_102361)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 818, 34), tuple_102358, subscript_call_result_102365)
        # Adding element type (line 818)
        
        # Obtaining the type of the subscript
        int_102366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 818, 75), 'int')
        # Getting the type of 'self' (line 818)
        self_102367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 66), 'self')
        # Obtaining the member '_xy' of a type (line 818)
        _xy_102368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 818, 66), self_102367, '_xy')
        # Obtaining the member '__getitem__' of a type (line 818)
        getitem___102369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 818, 66), _xy_102368, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 818)
        subscript_call_result_102370 = invoke(stypy.reporting.localization.Localization(__file__, 818, 66), getitem___102369, int_102366)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 818, 34), tuple_102358, subscript_call_result_102370)
        
        # Applying the binary operator '%' (line 818)
        result_mod_102371 = python_operator(stypy.reporting.localization.Localization(__file__, 818, 15), '%', unicode_102357, tuple_102358)
        
        # Assigning a type to the variable 'stypy_return_type' (line 818)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 818, 8), 'stypy_return_type', result_mod_102371)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 817)
        stypy_return_type_102372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102372)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_102372


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_102373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 821, 47), 'int')
        int_102374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 821, 62), 'int')
        defaults = [int_102373, int_102374]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 820, 4, False)
        # Assigning a type to the variable 'self' (line 821)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 821, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RegularPolygon.__init__', ['xy', 'numVertices', 'radius', 'orientation'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['xy', 'numVertices', 'radius', 'orientation'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_102375 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 840, (-1)), 'unicode', u'\n        Constructor arguments:\n\n        *xy*\n          A length 2 tuple (*x*, *y*) of the center.\n\n        *numVertices*\n          the number of vertices.\n\n        *radius*\n          The distance from the center to each of the vertices.\n\n        *orientation*\n          rotates the polygon (in radians).\n\n        Valid kwargs are:\n        %(Patch)s\n        ')
        
        # Assigning a Name to a Attribute (line 841):
        
        # Assigning a Name to a Attribute (line 841):
        
        # Assigning a Name to a Attribute (line 841):
        # Getting the type of 'xy' (line 841)
        xy_102376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 19), 'xy')
        # Getting the type of 'self' (line 841)
        self_102377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 8), 'self')
        # Setting the type of the member '_xy' of a type (line 841)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 841, 8), self_102377, '_xy', xy_102376)
        
        # Assigning a Name to a Attribute (line 842):
        
        # Assigning a Name to a Attribute (line 842):
        
        # Assigning a Name to a Attribute (line 842):
        # Getting the type of 'numVertices' (line 842)
        numVertices_102378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 28), 'numVertices')
        # Getting the type of 'self' (line 842)
        self_102379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 8), 'self')
        # Setting the type of the member '_numVertices' of a type (line 842)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 842, 8), self_102379, '_numVertices', numVertices_102378)
        
        # Assigning a Name to a Attribute (line 843):
        
        # Assigning a Name to a Attribute (line 843):
        
        # Assigning a Name to a Attribute (line 843):
        # Getting the type of 'orientation' (line 843)
        orientation_102380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 28), 'orientation')
        # Getting the type of 'self' (line 843)
        self_102381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 8), 'self')
        # Setting the type of the member '_orientation' of a type (line 843)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 843, 8), self_102381, '_orientation', orientation_102380)
        
        # Assigning a Name to a Attribute (line 844):
        
        # Assigning a Name to a Attribute (line 844):
        
        # Assigning a Name to a Attribute (line 844):
        # Getting the type of 'radius' (line 844)
        radius_102382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 23), 'radius')
        # Getting the type of 'self' (line 844)
        self_102383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 8), 'self')
        # Setting the type of the member '_radius' of a type (line 844)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 844, 8), self_102383, '_radius', radius_102382)
        
        # Assigning a Call to a Attribute (line 845):
        
        # Assigning a Call to a Attribute (line 845):
        
        # Assigning a Call to a Attribute (line 845):
        
        # Call to unit_regular_polygon(...): (line 845)
        # Processing the call arguments (line 845)
        # Getting the type of 'numVertices' (line 845)
        numVertices_102386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 47), 'numVertices', False)
        # Processing the call keyword arguments (line 845)
        kwargs_102387 = {}
        # Getting the type of 'Path' (line 845)
        Path_102384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 21), 'Path', False)
        # Obtaining the member 'unit_regular_polygon' of a type (line 845)
        unit_regular_polygon_102385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 845, 21), Path_102384, 'unit_regular_polygon')
        # Calling unit_regular_polygon(args, kwargs) (line 845)
        unit_regular_polygon_call_result_102388 = invoke(stypy.reporting.localization.Localization(__file__, 845, 21), unit_regular_polygon_102385, *[numVertices_102386], **kwargs_102387)
        
        # Getting the type of 'self' (line 845)
        self_102389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 8), 'self')
        # Setting the type of the member '_path' of a type (line 845)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 845, 8), self_102389, '_path', unit_regular_polygon_call_result_102388)
        
        # Assigning a Call to a Attribute (line 846):
        
        # Assigning a Call to a Attribute (line 846):
        
        # Assigning a Call to a Attribute (line 846):
        
        # Call to Affine2D(...): (line 846)
        # Processing the call keyword arguments (line 846)
        kwargs_102392 = {}
        # Getting the type of 'transforms' (line 846)
        transforms_102390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 31), 'transforms', False)
        # Obtaining the member 'Affine2D' of a type (line 846)
        Affine2D_102391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 846, 31), transforms_102390, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 846)
        Affine2D_call_result_102393 = invoke(stypy.reporting.localization.Localization(__file__, 846, 31), Affine2D_102391, *[], **kwargs_102392)
        
        # Getting the type of 'self' (line 846)
        self_102394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 8), 'self')
        # Setting the type of the member '_poly_transform' of a type (line 846)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 846, 8), self_102394, '_poly_transform', Affine2D_call_result_102393)
        
        # Call to _update_transform(...): (line 847)
        # Processing the call keyword arguments (line 847)
        kwargs_102397 = {}
        # Getting the type of 'self' (line 847)
        self_102395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 847, 8), 'self', False)
        # Obtaining the member '_update_transform' of a type (line 847)
        _update_transform_102396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 847, 8), self_102395, '_update_transform')
        # Calling _update_transform(args, kwargs) (line 847)
        _update_transform_call_result_102398 = invoke(stypy.reporting.localization.Localization(__file__, 847, 8), _update_transform_102396, *[], **kwargs_102397)
        
        
        # Call to __init__(...): (line 849)
        # Processing the call arguments (line 849)
        # Getting the type of 'self' (line 849)
        self_102401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 23), 'self', False)
        # Processing the call keyword arguments (line 849)
        # Getting the type of 'kwargs' (line 849)
        kwargs_102402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 31), 'kwargs', False)
        kwargs_102403 = {'kwargs_102402': kwargs_102402}
        # Getting the type of 'Patch' (line 849)
        Patch_102399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 8), 'Patch', False)
        # Obtaining the member '__init__' of a type (line 849)
        init___102400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 849, 8), Patch_102399, '__init__')
        # Calling __init__(args, kwargs) (line 849)
        init___call_result_102404 = invoke(stypy.reporting.localization.Localization(__file__, 849, 8), init___102400, *[self_102401], **kwargs_102403)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _update_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update_transform'
        module_type_store = module_type_store.open_function_context('_update_transform', 851, 4, False)
        # Assigning a type to the variable 'self' (line 852)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 852, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RegularPolygon._update_transform.__dict__.__setitem__('stypy_localization', localization)
        RegularPolygon._update_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RegularPolygon._update_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        RegularPolygon._update_transform.__dict__.__setitem__('stypy_function_name', 'RegularPolygon._update_transform')
        RegularPolygon._update_transform.__dict__.__setitem__('stypy_param_names_list', [])
        RegularPolygon._update_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        RegularPolygon._update_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RegularPolygon._update_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        RegularPolygon._update_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        RegularPolygon._update_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RegularPolygon._update_transform.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RegularPolygon._update_transform', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update_transform', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update_transform(...)' code ##################

        
        # Call to translate(...): (line 852)
        # Getting the type of 'self' (line 855)
        self_102421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 24), 'self', False)
        # Obtaining the member 'xy' of a type (line 855)
        xy_102422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 855, 24), self_102421, 'xy')
        # Processing the call keyword arguments (line 852)
        kwargs_102423 = {}
        
        # Call to rotate(...): (line 852)
        # Processing the call arguments (line 852)
        # Getting the type of 'self' (line 854)
        self_102416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 854, 20), 'self', False)
        # Obtaining the member 'orientation' of a type (line 854)
        orientation_102417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 854, 20), self_102416, 'orientation')
        # Processing the call keyword arguments (line 852)
        kwargs_102418 = {}
        
        # Call to scale(...): (line 852)
        # Processing the call arguments (line 852)
        # Getting the type of 'self' (line 853)
        self_102411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 19), 'self', False)
        # Obtaining the member 'radius' of a type (line 853)
        radius_102412 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 853, 19), self_102411, 'radius')
        # Processing the call keyword arguments (line 852)
        kwargs_102413 = {}
        
        # Call to clear(...): (line 852)
        # Processing the call keyword arguments (line 852)
        kwargs_102408 = {}
        # Getting the type of 'self' (line 852)
        self_102405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 852, 8), 'self', False)
        # Obtaining the member '_poly_transform' of a type (line 852)
        _poly_transform_102406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 852, 8), self_102405, '_poly_transform')
        # Obtaining the member 'clear' of a type (line 852)
        clear_102407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 852, 8), _poly_transform_102406, 'clear')
        # Calling clear(args, kwargs) (line 852)
        clear_call_result_102409 = invoke(stypy.reporting.localization.Localization(__file__, 852, 8), clear_102407, *[], **kwargs_102408)
        
        # Obtaining the member 'scale' of a type (line 852)
        scale_102410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 852, 8), clear_call_result_102409, 'scale')
        # Calling scale(args, kwargs) (line 852)
        scale_call_result_102414 = invoke(stypy.reporting.localization.Localization(__file__, 852, 8), scale_102410, *[radius_102412], **kwargs_102413)
        
        # Obtaining the member 'rotate' of a type (line 852)
        rotate_102415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 852, 8), scale_call_result_102414, 'rotate')
        # Calling rotate(args, kwargs) (line 852)
        rotate_call_result_102419 = invoke(stypy.reporting.localization.Localization(__file__, 852, 8), rotate_102415, *[orientation_102417], **kwargs_102418)
        
        # Obtaining the member 'translate' of a type (line 852)
        translate_102420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 852, 8), rotate_call_result_102419, 'translate')
        # Calling translate(args, kwargs) (line 852)
        translate_call_result_102424 = invoke(stypy.reporting.localization.Localization(__file__, 852, 8), translate_102420, *[xy_102422], **kwargs_102423)
        
        
        # ################# End of '_update_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 851)
        stypy_return_type_102425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 851, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102425)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update_transform'
        return stypy_return_type_102425


    @norecursion
    def _get_xy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_xy'
        module_type_store = module_type_store.open_function_context('_get_xy', 857, 4, False)
        # Assigning a type to the variable 'self' (line 858)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 858, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RegularPolygon._get_xy.__dict__.__setitem__('stypy_localization', localization)
        RegularPolygon._get_xy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RegularPolygon._get_xy.__dict__.__setitem__('stypy_type_store', module_type_store)
        RegularPolygon._get_xy.__dict__.__setitem__('stypy_function_name', 'RegularPolygon._get_xy')
        RegularPolygon._get_xy.__dict__.__setitem__('stypy_param_names_list', [])
        RegularPolygon._get_xy.__dict__.__setitem__('stypy_varargs_param_name', None)
        RegularPolygon._get_xy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RegularPolygon._get_xy.__dict__.__setitem__('stypy_call_defaults', defaults)
        RegularPolygon._get_xy.__dict__.__setitem__('stypy_call_varargs', varargs)
        RegularPolygon._get_xy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RegularPolygon._get_xy.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RegularPolygon._get_xy', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_xy', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_xy(...)' code ##################

        # Getting the type of 'self' (line 858)
        self_102426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 858, 15), 'self')
        # Obtaining the member '_xy' of a type (line 858)
        _xy_102427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 858, 15), self_102426, '_xy')
        # Assigning a type to the variable 'stypy_return_type' (line 858)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 858, 8), 'stypy_return_type', _xy_102427)
        
        # ################# End of '_get_xy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_xy' in the type store
        # Getting the type of 'stypy_return_type' (line 857)
        stypy_return_type_102428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102428)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_xy'
        return stypy_return_type_102428


    @norecursion
    def _set_xy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_xy'
        module_type_store = module_type_store.open_function_context('_set_xy', 860, 4, False)
        # Assigning a type to the variable 'self' (line 861)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 861, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RegularPolygon._set_xy.__dict__.__setitem__('stypy_localization', localization)
        RegularPolygon._set_xy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RegularPolygon._set_xy.__dict__.__setitem__('stypy_type_store', module_type_store)
        RegularPolygon._set_xy.__dict__.__setitem__('stypy_function_name', 'RegularPolygon._set_xy')
        RegularPolygon._set_xy.__dict__.__setitem__('stypy_param_names_list', ['xy'])
        RegularPolygon._set_xy.__dict__.__setitem__('stypy_varargs_param_name', None)
        RegularPolygon._set_xy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RegularPolygon._set_xy.__dict__.__setitem__('stypy_call_defaults', defaults)
        RegularPolygon._set_xy.__dict__.__setitem__('stypy_call_varargs', varargs)
        RegularPolygon._set_xy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RegularPolygon._set_xy.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RegularPolygon._set_xy', ['xy'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_xy', localization, ['xy'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_xy(...)' code ##################

        
        # Assigning a Name to a Attribute (line 861):
        
        # Assigning a Name to a Attribute (line 861):
        
        # Assigning a Name to a Attribute (line 861):
        # Getting the type of 'xy' (line 861)
        xy_102429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 19), 'xy')
        # Getting the type of 'self' (line 861)
        self_102430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 8), 'self')
        # Setting the type of the member '_xy' of a type (line 861)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 861, 8), self_102430, '_xy', xy_102429)
        
        # Call to _update_transform(...): (line 862)
        # Processing the call keyword arguments (line 862)
        kwargs_102433 = {}
        # Getting the type of 'self' (line 862)
        self_102431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 862, 8), 'self', False)
        # Obtaining the member '_update_transform' of a type (line 862)
        _update_transform_102432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 862, 8), self_102431, '_update_transform')
        # Calling _update_transform(args, kwargs) (line 862)
        _update_transform_call_result_102434 = invoke(stypy.reporting.localization.Localization(__file__, 862, 8), _update_transform_102432, *[], **kwargs_102433)
        
        
        # ################# End of '_set_xy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_xy' in the type store
        # Getting the type of 'stypy_return_type' (line 860)
        stypy_return_type_102435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102435)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_xy'
        return stypy_return_type_102435

    
    # Assigning a Call to a Name (line 863):
    
    # Assigning a Call to a Name (line 863):

    @norecursion
    def _get_orientation(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_orientation'
        module_type_store = module_type_store.open_function_context('_get_orientation', 865, 4, False)
        # Assigning a type to the variable 'self' (line 866)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 866, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RegularPolygon._get_orientation.__dict__.__setitem__('stypy_localization', localization)
        RegularPolygon._get_orientation.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RegularPolygon._get_orientation.__dict__.__setitem__('stypy_type_store', module_type_store)
        RegularPolygon._get_orientation.__dict__.__setitem__('stypy_function_name', 'RegularPolygon._get_orientation')
        RegularPolygon._get_orientation.__dict__.__setitem__('stypy_param_names_list', [])
        RegularPolygon._get_orientation.__dict__.__setitem__('stypy_varargs_param_name', None)
        RegularPolygon._get_orientation.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RegularPolygon._get_orientation.__dict__.__setitem__('stypy_call_defaults', defaults)
        RegularPolygon._get_orientation.__dict__.__setitem__('stypy_call_varargs', varargs)
        RegularPolygon._get_orientation.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RegularPolygon._get_orientation.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RegularPolygon._get_orientation', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_orientation', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_orientation(...)' code ##################

        # Getting the type of 'self' (line 866)
        self_102436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 15), 'self')
        # Obtaining the member '_orientation' of a type (line 866)
        _orientation_102437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 866, 15), self_102436, '_orientation')
        # Assigning a type to the variable 'stypy_return_type' (line 866)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 866, 8), 'stypy_return_type', _orientation_102437)
        
        # ################# End of '_get_orientation(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_orientation' in the type store
        # Getting the type of 'stypy_return_type' (line 865)
        stypy_return_type_102438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102438)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_orientation'
        return stypy_return_type_102438


    @norecursion
    def _set_orientation(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_orientation'
        module_type_store = module_type_store.open_function_context('_set_orientation', 868, 4, False)
        # Assigning a type to the variable 'self' (line 869)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 869, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RegularPolygon._set_orientation.__dict__.__setitem__('stypy_localization', localization)
        RegularPolygon._set_orientation.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RegularPolygon._set_orientation.__dict__.__setitem__('stypy_type_store', module_type_store)
        RegularPolygon._set_orientation.__dict__.__setitem__('stypy_function_name', 'RegularPolygon._set_orientation')
        RegularPolygon._set_orientation.__dict__.__setitem__('stypy_param_names_list', ['orientation'])
        RegularPolygon._set_orientation.__dict__.__setitem__('stypy_varargs_param_name', None)
        RegularPolygon._set_orientation.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RegularPolygon._set_orientation.__dict__.__setitem__('stypy_call_defaults', defaults)
        RegularPolygon._set_orientation.__dict__.__setitem__('stypy_call_varargs', varargs)
        RegularPolygon._set_orientation.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RegularPolygon._set_orientation.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RegularPolygon._set_orientation', ['orientation'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_orientation', localization, ['orientation'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_orientation(...)' code ##################

        
        # Assigning a Name to a Attribute (line 869):
        
        # Assigning a Name to a Attribute (line 869):
        
        # Assigning a Name to a Attribute (line 869):
        # Getting the type of 'orientation' (line 869)
        orientation_102439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 28), 'orientation')
        # Getting the type of 'self' (line 869)
        self_102440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 8), 'self')
        # Setting the type of the member '_orientation' of a type (line 869)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 869, 8), self_102440, '_orientation', orientation_102439)
        
        # Call to _update_transform(...): (line 870)
        # Processing the call keyword arguments (line 870)
        kwargs_102443 = {}
        # Getting the type of 'self' (line 870)
        self_102441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 8), 'self', False)
        # Obtaining the member '_update_transform' of a type (line 870)
        _update_transform_102442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 870, 8), self_102441, '_update_transform')
        # Calling _update_transform(args, kwargs) (line 870)
        _update_transform_call_result_102444 = invoke(stypy.reporting.localization.Localization(__file__, 870, 8), _update_transform_102442, *[], **kwargs_102443)
        
        
        # ################# End of '_set_orientation(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_orientation' in the type store
        # Getting the type of 'stypy_return_type' (line 868)
        stypy_return_type_102445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102445)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_orientation'
        return stypy_return_type_102445

    
    # Assigning a Call to a Name (line 871):
    
    # Assigning a Call to a Name (line 871):

    @norecursion
    def _get_radius(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_radius'
        module_type_store = module_type_store.open_function_context('_get_radius', 873, 4, False)
        # Assigning a type to the variable 'self' (line 874)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 874, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RegularPolygon._get_radius.__dict__.__setitem__('stypy_localization', localization)
        RegularPolygon._get_radius.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RegularPolygon._get_radius.__dict__.__setitem__('stypy_type_store', module_type_store)
        RegularPolygon._get_radius.__dict__.__setitem__('stypy_function_name', 'RegularPolygon._get_radius')
        RegularPolygon._get_radius.__dict__.__setitem__('stypy_param_names_list', [])
        RegularPolygon._get_radius.__dict__.__setitem__('stypy_varargs_param_name', None)
        RegularPolygon._get_radius.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RegularPolygon._get_radius.__dict__.__setitem__('stypy_call_defaults', defaults)
        RegularPolygon._get_radius.__dict__.__setitem__('stypy_call_varargs', varargs)
        RegularPolygon._get_radius.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RegularPolygon._get_radius.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RegularPolygon._get_radius', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_radius', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_radius(...)' code ##################

        # Getting the type of 'self' (line 874)
        self_102446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 15), 'self')
        # Obtaining the member '_radius' of a type (line 874)
        _radius_102447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 874, 15), self_102446, '_radius')
        # Assigning a type to the variable 'stypy_return_type' (line 874)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 874, 8), 'stypy_return_type', _radius_102447)
        
        # ################# End of '_get_radius(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_radius' in the type store
        # Getting the type of 'stypy_return_type' (line 873)
        stypy_return_type_102448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102448)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_radius'
        return stypy_return_type_102448


    @norecursion
    def _set_radius(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_radius'
        module_type_store = module_type_store.open_function_context('_set_radius', 876, 4, False)
        # Assigning a type to the variable 'self' (line 877)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 877, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RegularPolygon._set_radius.__dict__.__setitem__('stypy_localization', localization)
        RegularPolygon._set_radius.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RegularPolygon._set_radius.__dict__.__setitem__('stypy_type_store', module_type_store)
        RegularPolygon._set_radius.__dict__.__setitem__('stypy_function_name', 'RegularPolygon._set_radius')
        RegularPolygon._set_radius.__dict__.__setitem__('stypy_param_names_list', ['radius'])
        RegularPolygon._set_radius.__dict__.__setitem__('stypy_varargs_param_name', None)
        RegularPolygon._set_radius.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RegularPolygon._set_radius.__dict__.__setitem__('stypy_call_defaults', defaults)
        RegularPolygon._set_radius.__dict__.__setitem__('stypy_call_varargs', varargs)
        RegularPolygon._set_radius.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RegularPolygon._set_radius.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RegularPolygon._set_radius', ['radius'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_radius', localization, ['radius'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_radius(...)' code ##################

        
        # Assigning a Name to a Attribute (line 877):
        
        # Assigning a Name to a Attribute (line 877):
        
        # Assigning a Name to a Attribute (line 877):
        # Getting the type of 'radius' (line 877)
        radius_102449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 23), 'radius')
        # Getting the type of 'self' (line 877)
        self_102450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 8), 'self')
        # Setting the type of the member '_radius' of a type (line 877)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 877, 8), self_102450, '_radius', radius_102449)
        
        # Call to _update_transform(...): (line 878)
        # Processing the call keyword arguments (line 878)
        kwargs_102453 = {}
        # Getting the type of 'self' (line 878)
        self_102451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 8), 'self', False)
        # Obtaining the member '_update_transform' of a type (line 878)
        _update_transform_102452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 878, 8), self_102451, '_update_transform')
        # Calling _update_transform(args, kwargs) (line 878)
        _update_transform_call_result_102454 = invoke(stypy.reporting.localization.Localization(__file__, 878, 8), _update_transform_102452, *[], **kwargs_102453)
        
        
        # ################# End of '_set_radius(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_radius' in the type store
        # Getting the type of 'stypy_return_type' (line 876)
        stypy_return_type_102455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102455)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_radius'
        return stypy_return_type_102455

    
    # Assigning a Call to a Name (line 879):
    
    # Assigning a Call to a Name (line 879):

    @norecursion
    def _get_numvertices(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_numvertices'
        module_type_store = module_type_store.open_function_context('_get_numvertices', 881, 4, False)
        # Assigning a type to the variable 'self' (line 882)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 882, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RegularPolygon._get_numvertices.__dict__.__setitem__('stypy_localization', localization)
        RegularPolygon._get_numvertices.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RegularPolygon._get_numvertices.__dict__.__setitem__('stypy_type_store', module_type_store)
        RegularPolygon._get_numvertices.__dict__.__setitem__('stypy_function_name', 'RegularPolygon._get_numvertices')
        RegularPolygon._get_numvertices.__dict__.__setitem__('stypy_param_names_list', [])
        RegularPolygon._get_numvertices.__dict__.__setitem__('stypy_varargs_param_name', None)
        RegularPolygon._get_numvertices.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RegularPolygon._get_numvertices.__dict__.__setitem__('stypy_call_defaults', defaults)
        RegularPolygon._get_numvertices.__dict__.__setitem__('stypy_call_varargs', varargs)
        RegularPolygon._get_numvertices.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RegularPolygon._get_numvertices.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RegularPolygon._get_numvertices', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_numvertices', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_numvertices(...)' code ##################

        # Getting the type of 'self' (line 882)
        self_102456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 15), 'self')
        # Obtaining the member '_numVertices' of a type (line 882)
        _numVertices_102457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 15), self_102456, '_numVertices')
        # Assigning a type to the variable 'stypy_return_type' (line 882)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 882, 8), 'stypy_return_type', _numVertices_102457)
        
        # ################# End of '_get_numvertices(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_numvertices' in the type store
        # Getting the type of 'stypy_return_type' (line 881)
        stypy_return_type_102458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102458)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_numvertices'
        return stypy_return_type_102458


    @norecursion
    def _set_numvertices(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_numvertices'
        module_type_store = module_type_store.open_function_context('_set_numvertices', 884, 4, False)
        # Assigning a type to the variable 'self' (line 885)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 885, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RegularPolygon._set_numvertices.__dict__.__setitem__('stypy_localization', localization)
        RegularPolygon._set_numvertices.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RegularPolygon._set_numvertices.__dict__.__setitem__('stypy_type_store', module_type_store)
        RegularPolygon._set_numvertices.__dict__.__setitem__('stypy_function_name', 'RegularPolygon._set_numvertices')
        RegularPolygon._set_numvertices.__dict__.__setitem__('stypy_param_names_list', ['numVertices'])
        RegularPolygon._set_numvertices.__dict__.__setitem__('stypy_varargs_param_name', None)
        RegularPolygon._set_numvertices.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RegularPolygon._set_numvertices.__dict__.__setitem__('stypy_call_defaults', defaults)
        RegularPolygon._set_numvertices.__dict__.__setitem__('stypy_call_varargs', varargs)
        RegularPolygon._set_numvertices.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RegularPolygon._set_numvertices.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RegularPolygon._set_numvertices', ['numVertices'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_numvertices', localization, ['numVertices'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_numvertices(...)' code ##################

        
        # Assigning a Name to a Attribute (line 885):
        
        # Assigning a Name to a Attribute (line 885):
        
        # Assigning a Name to a Attribute (line 885):
        # Getting the type of 'numVertices' (line 885)
        numVertices_102459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 28), 'numVertices')
        # Getting the type of 'self' (line 885)
        self_102460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 8), 'self')
        # Setting the type of the member '_numVertices' of a type (line 885)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 885, 8), self_102460, '_numVertices', numVertices_102459)
        
        # ################# End of '_set_numvertices(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_numvertices' in the type store
        # Getting the type of 'stypy_return_type' (line 884)
        stypy_return_type_102461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102461)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_numvertices'
        return stypy_return_type_102461

    
    # Assigning a Call to a Name (line 887):
    
    # Assigning a Call to a Name (line 887):

    @norecursion
    def get_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_path'
        module_type_store = module_type_store.open_function_context('get_path', 889, 4, False)
        # Assigning a type to the variable 'self' (line 890)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 890, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RegularPolygon.get_path.__dict__.__setitem__('stypy_localization', localization)
        RegularPolygon.get_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RegularPolygon.get_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        RegularPolygon.get_path.__dict__.__setitem__('stypy_function_name', 'RegularPolygon.get_path')
        RegularPolygon.get_path.__dict__.__setitem__('stypy_param_names_list', [])
        RegularPolygon.get_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        RegularPolygon.get_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RegularPolygon.get_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        RegularPolygon.get_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        RegularPolygon.get_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RegularPolygon.get_path.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RegularPolygon.get_path', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_path', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_path(...)' code ##################

        # Getting the type of 'self' (line 890)
        self_102462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 890, 15), 'self')
        # Obtaining the member '_path' of a type (line 890)
        _path_102463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 890, 15), self_102462, '_path')
        # Assigning a type to the variable 'stypy_return_type' (line 890)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 890, 8), 'stypy_return_type', _path_102463)
        
        # ################# End of 'get_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_path' in the type store
        # Getting the type of 'stypy_return_type' (line 889)
        stypy_return_type_102464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102464)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_path'
        return stypy_return_type_102464


    @norecursion
    def get_patch_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_patch_transform'
        module_type_store = module_type_store.open_function_context('get_patch_transform', 892, 4, False)
        # Assigning a type to the variable 'self' (line 893)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 893, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RegularPolygon.get_patch_transform.__dict__.__setitem__('stypy_localization', localization)
        RegularPolygon.get_patch_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RegularPolygon.get_patch_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        RegularPolygon.get_patch_transform.__dict__.__setitem__('stypy_function_name', 'RegularPolygon.get_patch_transform')
        RegularPolygon.get_patch_transform.__dict__.__setitem__('stypy_param_names_list', [])
        RegularPolygon.get_patch_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        RegularPolygon.get_patch_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RegularPolygon.get_patch_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        RegularPolygon.get_patch_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        RegularPolygon.get_patch_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RegularPolygon.get_patch_transform.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RegularPolygon.get_patch_transform', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_patch_transform', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_patch_transform(...)' code ##################

        
        # Call to _update_transform(...): (line 893)
        # Processing the call keyword arguments (line 893)
        kwargs_102467 = {}
        # Getting the type of 'self' (line 893)
        self_102465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 8), 'self', False)
        # Obtaining the member '_update_transform' of a type (line 893)
        _update_transform_102466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 893, 8), self_102465, '_update_transform')
        # Calling _update_transform(args, kwargs) (line 893)
        _update_transform_call_result_102468 = invoke(stypy.reporting.localization.Localization(__file__, 893, 8), _update_transform_102466, *[], **kwargs_102467)
        
        # Getting the type of 'self' (line 894)
        self_102469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 15), 'self')
        # Obtaining the member '_poly_transform' of a type (line 894)
        _poly_transform_102470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 894, 15), self_102469, '_poly_transform')
        # Assigning a type to the variable 'stypy_return_type' (line 894)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 894, 8), 'stypy_return_type', _poly_transform_102470)
        
        # ################# End of 'get_patch_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_patch_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 892)
        stypy_return_type_102471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102471)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_patch_transform'
        return stypy_return_type_102471


# Assigning a type to the variable 'RegularPolygon' (line 813)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 813, 0), 'RegularPolygon', RegularPolygon)

# Assigning a Call to a Name (line 863):

# Call to property(...): (line 863)
# Processing the call arguments (line 863)
# Getting the type of 'RegularPolygon'
RegularPolygon_102473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'RegularPolygon', False)
# Obtaining the member '_get_xy' of a type
_get_xy_102474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), RegularPolygon_102473, '_get_xy')
# Getting the type of 'RegularPolygon'
RegularPolygon_102475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'RegularPolygon', False)
# Obtaining the member '_set_xy' of a type
_set_xy_102476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), RegularPolygon_102475, '_set_xy')
# Processing the call keyword arguments (line 863)
kwargs_102477 = {}
# Getting the type of 'property' (line 863)
property_102472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 9), 'property', False)
# Calling property(args, kwargs) (line 863)
property_call_result_102478 = invoke(stypy.reporting.localization.Localization(__file__, 863, 9), property_102472, *[_get_xy_102474, _set_xy_102476], **kwargs_102477)

# Getting the type of 'RegularPolygon'
RegularPolygon_102479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'RegularPolygon')
# Setting the type of the member 'xy' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), RegularPolygon_102479, 'xy', property_call_result_102478)

# Assigning a Call to a Name (line 871):

# Call to property(...): (line 871)
# Processing the call arguments (line 871)
# Getting the type of 'RegularPolygon'
RegularPolygon_102481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'RegularPolygon', False)
# Obtaining the member '_get_orientation' of a type
_get_orientation_102482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), RegularPolygon_102481, '_get_orientation')
# Getting the type of 'RegularPolygon'
RegularPolygon_102483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'RegularPolygon', False)
# Obtaining the member '_set_orientation' of a type
_set_orientation_102484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), RegularPolygon_102483, '_set_orientation')
# Processing the call keyword arguments (line 871)
kwargs_102485 = {}
# Getting the type of 'property' (line 871)
property_102480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 18), 'property', False)
# Calling property(args, kwargs) (line 871)
property_call_result_102486 = invoke(stypy.reporting.localization.Localization(__file__, 871, 18), property_102480, *[_get_orientation_102482, _set_orientation_102484], **kwargs_102485)

# Getting the type of 'RegularPolygon'
RegularPolygon_102487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'RegularPolygon')
# Setting the type of the member 'orientation' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), RegularPolygon_102487, 'orientation', property_call_result_102486)

# Assigning a Call to a Name (line 879):

# Call to property(...): (line 879)
# Processing the call arguments (line 879)
# Getting the type of 'RegularPolygon'
RegularPolygon_102489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'RegularPolygon', False)
# Obtaining the member '_get_radius' of a type
_get_radius_102490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), RegularPolygon_102489, '_get_radius')
# Getting the type of 'RegularPolygon'
RegularPolygon_102491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'RegularPolygon', False)
# Obtaining the member '_set_radius' of a type
_set_radius_102492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), RegularPolygon_102491, '_set_radius')
# Processing the call keyword arguments (line 879)
kwargs_102493 = {}
# Getting the type of 'property' (line 879)
property_102488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 13), 'property', False)
# Calling property(args, kwargs) (line 879)
property_call_result_102494 = invoke(stypy.reporting.localization.Localization(__file__, 879, 13), property_102488, *[_get_radius_102490, _set_radius_102492], **kwargs_102493)

# Getting the type of 'RegularPolygon'
RegularPolygon_102495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'RegularPolygon')
# Setting the type of the member 'radius' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), RegularPolygon_102495, 'radius', property_call_result_102494)

# Assigning a Call to a Name (line 887):

# Call to property(...): (line 887)
# Processing the call arguments (line 887)
# Getting the type of 'RegularPolygon'
RegularPolygon_102497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'RegularPolygon', False)
# Obtaining the member '_get_numvertices' of a type
_get_numvertices_102498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), RegularPolygon_102497, '_get_numvertices')
# Getting the type of 'RegularPolygon'
RegularPolygon_102499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'RegularPolygon', False)
# Obtaining the member '_set_numvertices' of a type
_set_numvertices_102500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), RegularPolygon_102499, '_set_numvertices')
# Processing the call keyword arguments (line 887)
kwargs_102501 = {}
# Getting the type of 'property' (line 887)
property_102496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 18), 'property', False)
# Calling property(args, kwargs) (line 887)
property_call_result_102502 = invoke(stypy.reporting.localization.Localization(__file__, 887, 18), property_102496, *[_get_numvertices_102498, _set_numvertices_102500], **kwargs_102501)

# Getting the type of 'RegularPolygon'
RegularPolygon_102503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'RegularPolygon')
# Setting the type of the member 'numvertices' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), RegularPolygon_102503, 'numvertices', property_call_result_102502)
# Declaration of the 'PathPatch' class
# Getting the type of 'Patch' (line 897)
Patch_102504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 16), 'Patch')

class PathPatch(Patch_102504, ):
    unicode_102505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 900, (-1)), 'unicode', u'\n    A general polycurve path patch.\n    ')
    
    # Assigning a Name to a Name (line 901):
    
    # Assigning a Name to a Name (line 901):

    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 903, 4, False)
        # Assigning a type to the variable 'self' (line 904)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 904, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PathPatch.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        PathPatch.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PathPatch.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        PathPatch.stypy__str__.__dict__.__setitem__('stypy_function_name', 'PathPatch.stypy__str__')
        PathPatch.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        PathPatch.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        PathPatch.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PathPatch.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        PathPatch.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        PathPatch.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PathPatch.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PathPatch.stypy__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        unicode_102506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 904, 15), 'unicode', u'Poly((%g, %g) ...)')
        
        # Call to tuple(...): (line 904)
        # Processing the call arguments (line 904)
        
        # Obtaining the type of the subscript
        int_102508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 904, 64), 'int')
        # Getting the type of 'self' (line 904)
        self_102509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 44), 'self', False)
        # Obtaining the member '_path' of a type (line 904)
        _path_102510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 904, 44), self_102509, '_path')
        # Obtaining the member 'vertices' of a type (line 904)
        vertices_102511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 904, 44), _path_102510, 'vertices')
        # Obtaining the member '__getitem__' of a type (line 904)
        getitem___102512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 904, 44), vertices_102511, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 904)
        subscript_call_result_102513 = invoke(stypy.reporting.localization.Localization(__file__, 904, 44), getitem___102512, int_102508)
        
        # Processing the call keyword arguments (line 904)
        kwargs_102514 = {}
        # Getting the type of 'tuple' (line 904)
        tuple_102507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 38), 'tuple', False)
        # Calling tuple(args, kwargs) (line 904)
        tuple_call_result_102515 = invoke(stypy.reporting.localization.Localization(__file__, 904, 38), tuple_102507, *[subscript_call_result_102513], **kwargs_102514)
        
        # Applying the binary operator '%' (line 904)
        result_mod_102516 = python_operator(stypy.reporting.localization.Localization(__file__, 904, 15), '%', unicode_102506, tuple_call_result_102515)
        
        # Assigning a type to the variable 'stypy_return_type' (line 904)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 904, 8), 'stypy_return_type', result_mod_102516)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 903)
        stypy_return_type_102517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102517)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_102517


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 906, 4, False)
        # Assigning a type to the variable 'self' (line 907)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 907, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PathPatch.__init__', ['path'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['path'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_102518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 919, (-1)), 'unicode', u'\n        *path* is a :class:`matplotlib.path.Path` object.\n\n        Valid kwargs are:\n        %(Patch)s\n\n        .. seealso::\n\n            :class:`Patch`\n                For additional kwargs\n\n        ')
        
        # Call to __init__(...): (line 920)
        # Processing the call arguments (line 920)
        # Getting the type of 'self' (line 920)
        self_102521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 23), 'self', False)
        # Processing the call keyword arguments (line 920)
        # Getting the type of 'kwargs' (line 920)
        kwargs_102522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 31), 'kwargs', False)
        kwargs_102523 = {'kwargs_102522': kwargs_102522}
        # Getting the type of 'Patch' (line 920)
        Patch_102519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 8), 'Patch', False)
        # Obtaining the member '__init__' of a type (line 920)
        init___102520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 920, 8), Patch_102519, '__init__')
        # Calling __init__(args, kwargs) (line 920)
        init___call_result_102524 = invoke(stypy.reporting.localization.Localization(__file__, 920, 8), init___102520, *[self_102521], **kwargs_102523)
        
        
        # Assigning a Name to a Attribute (line 921):
        
        # Assigning a Name to a Attribute (line 921):
        
        # Assigning a Name to a Attribute (line 921):
        # Getting the type of 'path' (line 921)
        path_102525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 21), 'path')
        # Getting the type of 'self' (line 921)
        self_102526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 8), 'self')
        # Setting the type of the member '_path' of a type (line 921)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 921, 8), self_102526, '_path', path_102525)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def get_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_path'
        module_type_store = module_type_store.open_function_context('get_path', 923, 4, False)
        # Assigning a type to the variable 'self' (line 924)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 924, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PathPatch.get_path.__dict__.__setitem__('stypy_localization', localization)
        PathPatch.get_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PathPatch.get_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        PathPatch.get_path.__dict__.__setitem__('stypy_function_name', 'PathPatch.get_path')
        PathPatch.get_path.__dict__.__setitem__('stypy_param_names_list', [])
        PathPatch.get_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        PathPatch.get_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PathPatch.get_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        PathPatch.get_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        PathPatch.get_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PathPatch.get_path.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PathPatch.get_path', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_path', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_path(...)' code ##################

        # Getting the type of 'self' (line 924)
        self_102527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 15), 'self')
        # Obtaining the member '_path' of a type (line 924)
        _path_102528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 924, 15), self_102527, '_path')
        # Assigning a type to the variable 'stypy_return_type' (line 924)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 924, 8), 'stypy_return_type', _path_102528)
        
        # ################# End of 'get_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_path' in the type store
        # Getting the type of 'stypy_return_type' (line 923)
        stypy_return_type_102529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102529)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_path'
        return stypy_return_type_102529


# Assigning a type to the variable 'PathPatch' (line 897)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 897, 0), 'PathPatch', PathPatch)

# Assigning a Name to a Name (line 901):
# Getting the type of 'True' (line 901)
True_102530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 20), 'True')
# Getting the type of 'PathPatch'
PathPatch_102531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'PathPatch')
# Setting the type of the member '_edge_default' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), PathPatch_102531, '_edge_default', True_102530)
# Declaration of the 'Polygon' class
# Getting the type of 'Patch' (line 927)
Patch_102532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 927, 14), 'Patch')

class Polygon(Patch_102532, ):
    unicode_102533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 930, (-1)), 'unicode', u'\n    A general polygon patch.\n    ')

    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 931, 4, False)
        # Assigning a type to the variable 'self' (line 932)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 932, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Polygon.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        Polygon.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Polygon.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Polygon.stypy__str__.__dict__.__setitem__('stypy_function_name', 'Polygon.stypy__str__')
        Polygon.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        Polygon.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Polygon.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Polygon.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Polygon.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Polygon.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Polygon.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Polygon.stypy__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        unicode_102534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 932, 15), 'unicode', u'Poly((%g, %g) ...)')
        
        # Call to tuple(...): (line 932)
        # Processing the call arguments (line 932)
        
        # Obtaining the type of the subscript
        int_102536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 932, 64), 'int')
        # Getting the type of 'self' (line 932)
        self_102537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 932, 44), 'self', False)
        # Obtaining the member '_path' of a type (line 932)
        _path_102538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 932, 44), self_102537, '_path')
        # Obtaining the member 'vertices' of a type (line 932)
        vertices_102539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 932, 44), _path_102538, 'vertices')
        # Obtaining the member '__getitem__' of a type (line 932)
        getitem___102540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 932, 44), vertices_102539, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 932)
        subscript_call_result_102541 = invoke(stypy.reporting.localization.Localization(__file__, 932, 44), getitem___102540, int_102536)
        
        # Processing the call keyword arguments (line 932)
        kwargs_102542 = {}
        # Getting the type of 'tuple' (line 932)
        tuple_102535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 932, 38), 'tuple', False)
        # Calling tuple(args, kwargs) (line 932)
        tuple_call_result_102543 = invoke(stypy.reporting.localization.Localization(__file__, 932, 38), tuple_102535, *[subscript_call_result_102541], **kwargs_102542)
        
        # Applying the binary operator '%' (line 932)
        result_mod_102544 = python_operator(stypy.reporting.localization.Localization(__file__, 932, 15), '%', unicode_102534, tuple_call_result_102543)
        
        # Assigning a type to the variable 'stypy_return_type' (line 932)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 932, 8), 'stypy_return_type', result_mod_102544)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 931)
        stypy_return_type_102545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102545)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_102545


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'True' (line 935)
        True_102546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 34), 'True')
        defaults = [True_102546]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 934, 4, False)
        # Assigning a type to the variable 'self' (line 935)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 935, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Polygon.__init__', ['xy', 'closed'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['xy', 'closed'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_102547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 950, (-1)), 'unicode', u'\n        *xy* is a numpy array with shape Nx2.\n\n        If *closed* is *True*, the polygon will be closed so the\n        starting and ending points are the same.\n\n        Valid kwargs are:\n        %(Patch)s\n\n        .. seealso::\n\n            :class:`Patch`\n                For additional kwargs\n\n        ')
        
        # Call to __init__(...): (line 951)
        # Processing the call arguments (line 951)
        # Getting the type of 'self' (line 951)
        self_102550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 23), 'self', False)
        # Processing the call keyword arguments (line 951)
        # Getting the type of 'kwargs' (line 951)
        kwargs_102551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 31), 'kwargs', False)
        kwargs_102552 = {'kwargs_102551': kwargs_102551}
        # Getting the type of 'Patch' (line 951)
        Patch_102548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 8), 'Patch', False)
        # Obtaining the member '__init__' of a type (line 951)
        init___102549 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 951, 8), Patch_102548, '__init__')
        # Calling __init__(args, kwargs) (line 951)
        init___call_result_102553 = invoke(stypy.reporting.localization.Localization(__file__, 951, 8), init___102549, *[self_102550], **kwargs_102552)
        
        
        # Assigning a Name to a Attribute (line 952):
        
        # Assigning a Name to a Attribute (line 952):
        
        # Assigning a Name to a Attribute (line 952):
        # Getting the type of 'closed' (line 952)
        closed_102554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 23), 'closed')
        # Getting the type of 'self' (line 952)
        self_102555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 8), 'self')
        # Setting the type of the member '_closed' of a type (line 952)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 952, 8), self_102555, '_closed', closed_102554)
        
        # Call to set_xy(...): (line 953)
        # Processing the call arguments (line 953)
        # Getting the type of 'xy' (line 953)
        xy_102558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 20), 'xy', False)
        # Processing the call keyword arguments (line 953)
        kwargs_102559 = {}
        # Getting the type of 'self' (line 953)
        self_102556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 8), 'self', False)
        # Obtaining the member 'set_xy' of a type (line 953)
        set_xy_102557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 953, 8), self_102556, 'set_xy')
        # Calling set_xy(args, kwargs) (line 953)
        set_xy_call_result_102560 = invoke(stypy.reporting.localization.Localization(__file__, 953, 8), set_xy_102557, *[xy_102558], **kwargs_102559)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def get_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_path'
        module_type_store = module_type_store.open_function_context('get_path', 955, 4, False)
        # Assigning a type to the variable 'self' (line 956)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 956, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Polygon.get_path.__dict__.__setitem__('stypy_localization', localization)
        Polygon.get_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Polygon.get_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        Polygon.get_path.__dict__.__setitem__('stypy_function_name', 'Polygon.get_path')
        Polygon.get_path.__dict__.__setitem__('stypy_param_names_list', [])
        Polygon.get_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        Polygon.get_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Polygon.get_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        Polygon.get_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        Polygon.get_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Polygon.get_path.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Polygon.get_path', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_path', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_path(...)' code ##################

        unicode_102561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 964, (-1)), 'unicode', u'\n        Get the path of the polygon\n\n        Returns\n        -------\n        path : Path\n           The :class:`~matplotlib.path.Path` object for\n           the polygon\n        ')
        # Getting the type of 'self' (line 965)
        self_102562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 15), 'self')
        # Obtaining the member '_path' of a type (line 965)
        _path_102563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 965, 15), self_102562, '_path')
        # Assigning a type to the variable 'stypy_return_type' (line 965)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 965, 8), 'stypy_return_type', _path_102563)
        
        # ################# End of 'get_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_path' in the type store
        # Getting the type of 'stypy_return_type' (line 955)
        stypy_return_type_102564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102564)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_path'
        return stypy_return_type_102564


    @norecursion
    def get_closed(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_closed'
        module_type_store = module_type_store.open_function_context('get_closed', 967, 4, False)
        # Assigning a type to the variable 'self' (line 968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 968, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Polygon.get_closed.__dict__.__setitem__('stypy_localization', localization)
        Polygon.get_closed.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Polygon.get_closed.__dict__.__setitem__('stypy_type_store', module_type_store)
        Polygon.get_closed.__dict__.__setitem__('stypy_function_name', 'Polygon.get_closed')
        Polygon.get_closed.__dict__.__setitem__('stypy_param_names_list', [])
        Polygon.get_closed.__dict__.__setitem__('stypy_varargs_param_name', None)
        Polygon.get_closed.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Polygon.get_closed.__dict__.__setitem__('stypy_call_defaults', defaults)
        Polygon.get_closed.__dict__.__setitem__('stypy_call_varargs', varargs)
        Polygon.get_closed.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Polygon.get_closed.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Polygon.get_closed', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_closed', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_closed(...)' code ##################

        unicode_102565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 975, (-1)), 'unicode', u'\n        Returns if the polygon is closed\n\n        Returns\n        -------\n        closed : bool\n            If the path is closed\n        ')
        # Getting the type of 'self' (line 976)
        self_102566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 15), 'self')
        # Obtaining the member '_closed' of a type (line 976)
        _closed_102567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 976, 15), self_102566, '_closed')
        # Assigning a type to the variable 'stypy_return_type' (line 976)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 976, 8), 'stypy_return_type', _closed_102567)
        
        # ################# End of 'get_closed(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_closed' in the type store
        # Getting the type of 'stypy_return_type' (line 967)
        stypy_return_type_102568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102568)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_closed'
        return stypy_return_type_102568


    @norecursion
    def set_closed(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_closed'
        module_type_store = module_type_store.open_function_context('set_closed', 978, 4, False)
        # Assigning a type to the variable 'self' (line 979)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 979, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Polygon.set_closed.__dict__.__setitem__('stypy_localization', localization)
        Polygon.set_closed.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Polygon.set_closed.__dict__.__setitem__('stypy_type_store', module_type_store)
        Polygon.set_closed.__dict__.__setitem__('stypy_function_name', 'Polygon.set_closed')
        Polygon.set_closed.__dict__.__setitem__('stypy_param_names_list', ['closed'])
        Polygon.set_closed.__dict__.__setitem__('stypy_varargs_param_name', None)
        Polygon.set_closed.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Polygon.set_closed.__dict__.__setitem__('stypy_call_defaults', defaults)
        Polygon.set_closed.__dict__.__setitem__('stypy_call_varargs', varargs)
        Polygon.set_closed.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Polygon.set_closed.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Polygon.set_closed', ['closed'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_closed', localization, ['closed'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_closed(...)' code ##################

        unicode_102569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 986, (-1)), 'unicode', u'\n        Set if the polygon is closed\n\n        Parameters\n        ----------\n        closed : bool\n           True if the polygon is closed\n        ')
        
        
        # Getting the type of 'self' (line 987)
        self_102570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 11), 'self')
        # Obtaining the member '_closed' of a type (line 987)
        _closed_102571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 987, 11), self_102570, '_closed')
        
        # Call to bool(...): (line 987)
        # Processing the call arguments (line 987)
        # Getting the type of 'closed' (line 987)
        closed_102573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 32), 'closed', False)
        # Processing the call keyword arguments (line 987)
        kwargs_102574 = {}
        # Getting the type of 'bool' (line 987)
        bool_102572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 27), 'bool', False)
        # Calling bool(args, kwargs) (line 987)
        bool_call_result_102575 = invoke(stypy.reporting.localization.Localization(__file__, 987, 27), bool_102572, *[closed_102573], **kwargs_102574)
        
        # Applying the binary operator '==' (line 987)
        result_eq_102576 = python_operator(stypy.reporting.localization.Localization(__file__, 987, 11), '==', _closed_102571, bool_call_result_102575)
        
        # Testing the type of an if condition (line 987)
        if_condition_102577 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 987, 8), result_eq_102576)
        # Assigning a type to the variable 'if_condition_102577' (line 987)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 987, 8), 'if_condition_102577', if_condition_102577)
        # SSA begins for if statement (line 987)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 988)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 988, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 987)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 989):
        
        # Assigning a Call to a Attribute (line 989):
        
        # Assigning a Call to a Attribute (line 989):
        
        # Call to bool(...): (line 989)
        # Processing the call arguments (line 989)
        # Getting the type of 'closed' (line 989)
        closed_102579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 28), 'closed', False)
        # Processing the call keyword arguments (line 989)
        kwargs_102580 = {}
        # Getting the type of 'bool' (line 989)
        bool_102578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 23), 'bool', False)
        # Calling bool(args, kwargs) (line 989)
        bool_call_result_102581 = invoke(stypy.reporting.localization.Localization(__file__, 989, 23), bool_102578, *[closed_102579], **kwargs_102580)
        
        # Getting the type of 'self' (line 989)
        self_102582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 8), 'self')
        # Setting the type of the member '_closed' of a type (line 989)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 989, 8), self_102582, '_closed', bool_call_result_102581)
        
        # Call to set_xy(...): (line 990)
        # Processing the call arguments (line 990)
        
        # Call to get_xy(...): (line 990)
        # Processing the call keyword arguments (line 990)
        kwargs_102587 = {}
        # Getting the type of 'self' (line 990)
        self_102585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 20), 'self', False)
        # Obtaining the member 'get_xy' of a type (line 990)
        get_xy_102586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 990, 20), self_102585, 'get_xy')
        # Calling get_xy(args, kwargs) (line 990)
        get_xy_call_result_102588 = invoke(stypy.reporting.localization.Localization(__file__, 990, 20), get_xy_102586, *[], **kwargs_102587)
        
        # Processing the call keyword arguments (line 990)
        kwargs_102589 = {}
        # Getting the type of 'self' (line 990)
        self_102583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 8), 'self', False)
        # Obtaining the member 'set_xy' of a type (line 990)
        set_xy_102584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 990, 8), self_102583, 'set_xy')
        # Calling set_xy(args, kwargs) (line 990)
        set_xy_call_result_102590 = invoke(stypy.reporting.localization.Localization(__file__, 990, 8), set_xy_102584, *[get_xy_call_result_102588], **kwargs_102589)
        
        
        # Assigning a Name to a Attribute (line 991):
        
        # Assigning a Name to a Attribute (line 991):
        
        # Assigning a Name to a Attribute (line 991):
        # Getting the type of 'True' (line 991)
        True_102591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 21), 'True')
        # Getting the type of 'self' (line 991)
        self_102592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 991)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 991, 8), self_102592, 'stale', True_102591)
        
        # ################# End of 'set_closed(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_closed' in the type store
        # Getting the type of 'stypy_return_type' (line 978)
        stypy_return_type_102593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102593)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_closed'
        return stypy_return_type_102593


    @norecursion
    def get_xy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_xy'
        module_type_store = module_type_store.open_function_context('get_xy', 993, 4, False)
        # Assigning a type to the variable 'self' (line 994)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 994, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Polygon.get_xy.__dict__.__setitem__('stypy_localization', localization)
        Polygon.get_xy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Polygon.get_xy.__dict__.__setitem__('stypy_type_store', module_type_store)
        Polygon.get_xy.__dict__.__setitem__('stypy_function_name', 'Polygon.get_xy')
        Polygon.get_xy.__dict__.__setitem__('stypy_param_names_list', [])
        Polygon.get_xy.__dict__.__setitem__('stypy_varargs_param_name', None)
        Polygon.get_xy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Polygon.get_xy.__dict__.__setitem__('stypy_call_defaults', defaults)
        Polygon.get_xy.__dict__.__setitem__('stypy_call_varargs', varargs)
        Polygon.get_xy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Polygon.get_xy.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Polygon.get_xy', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_xy', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_xy(...)' code ##################

        unicode_102594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1002, (-1)), 'unicode', u'\n        Get the vertices of the path\n\n        Returns\n        -------\n        vertices : numpy array\n            The coordinates of the vertices as a Nx2\n            ndarray.\n        ')
        # Getting the type of 'self' (line 1003)
        self_102595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 15), 'self')
        # Obtaining the member '_path' of a type (line 1003)
        _path_102596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1003, 15), self_102595, '_path')
        # Obtaining the member 'vertices' of a type (line 1003)
        vertices_102597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1003, 15), _path_102596, 'vertices')
        # Assigning a type to the variable 'stypy_return_type' (line 1003)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1003, 8), 'stypy_return_type', vertices_102597)
        
        # ################# End of 'get_xy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_xy' in the type store
        # Getting the type of 'stypy_return_type' (line 993)
        stypy_return_type_102598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102598)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_xy'
        return stypy_return_type_102598


    @norecursion
    def set_xy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_xy'
        module_type_store = module_type_store.open_function_context('set_xy', 1005, 4, False)
        # Assigning a type to the variable 'self' (line 1006)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1006, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Polygon.set_xy.__dict__.__setitem__('stypy_localization', localization)
        Polygon.set_xy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Polygon.set_xy.__dict__.__setitem__('stypy_type_store', module_type_store)
        Polygon.set_xy.__dict__.__setitem__('stypy_function_name', 'Polygon.set_xy')
        Polygon.set_xy.__dict__.__setitem__('stypy_param_names_list', ['xy'])
        Polygon.set_xy.__dict__.__setitem__('stypy_varargs_param_name', None)
        Polygon.set_xy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Polygon.set_xy.__dict__.__setitem__('stypy_call_defaults', defaults)
        Polygon.set_xy.__dict__.__setitem__('stypy_call_varargs', varargs)
        Polygon.set_xy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Polygon.set_xy.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Polygon.set_xy', ['xy'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_xy', localization, ['xy'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_xy(...)' code ##################

        unicode_102599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1014, (-1)), 'unicode', u'\n        Set the vertices of the polygon\n\n        Parameters\n        ----------\n        xy : numpy array or iterable of pairs\n            The coordinates of the vertices as a Nx2\n            ndarray or iterable of pairs.\n        ')
        
        # Assigning a Call to a Name (line 1015):
        
        # Assigning a Call to a Name (line 1015):
        
        # Assigning a Call to a Name (line 1015):
        
        # Call to asarray(...): (line 1015)
        # Processing the call arguments (line 1015)
        # Getting the type of 'xy' (line 1015)
        xy_102602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 24), 'xy', False)
        # Processing the call keyword arguments (line 1015)
        kwargs_102603 = {}
        # Getting the type of 'np' (line 1015)
        np_102600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 13), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1015)
        asarray_102601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1015, 13), np_102600, 'asarray')
        # Calling asarray(args, kwargs) (line 1015)
        asarray_call_result_102604 = invoke(stypy.reporting.localization.Localization(__file__, 1015, 13), asarray_102601, *[xy_102602], **kwargs_102603)
        
        # Assigning a type to the variable 'xy' (line 1015)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1015, 8), 'xy', asarray_call_result_102604)
        
        # Getting the type of 'self' (line 1016)
        self_102605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1016, 11), 'self')
        # Obtaining the member '_closed' of a type (line 1016)
        _closed_102606 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1016, 11), self_102605, '_closed')
        # Testing the type of an if condition (line 1016)
        if_condition_102607 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1016, 8), _closed_102606)
        # Assigning a type to the variable 'if_condition_102607' (line 1016)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1016, 8), 'if_condition_102607', if_condition_102607)
        # SSA begins for if statement (line 1016)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Evaluating a boolean operation
        
        # Call to len(...): (line 1017)
        # Processing the call arguments (line 1017)
        # Getting the type of 'xy' (line 1017)
        xy_102609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 19), 'xy', False)
        # Processing the call keyword arguments (line 1017)
        kwargs_102610 = {}
        # Getting the type of 'len' (line 1017)
        len_102608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 15), 'len', False)
        # Calling len(args, kwargs) (line 1017)
        len_call_result_102611 = invoke(stypy.reporting.localization.Localization(__file__, 1017, 15), len_102608, *[xy_102609], **kwargs_102610)
        
        
        # Call to any(...): (line 1017)
        # Processing the call keyword arguments (line 1017)
        kwargs_102622 = {}
        
        
        # Obtaining the type of the subscript
        int_102612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1017, 31), 'int')
        # Getting the type of 'xy' (line 1017)
        xy_102613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 28), 'xy', False)
        # Obtaining the member '__getitem__' of a type (line 1017)
        getitem___102614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1017, 28), xy_102613, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1017)
        subscript_call_result_102615 = invoke(stypy.reporting.localization.Localization(__file__, 1017, 28), getitem___102614, int_102612)
        
        
        # Obtaining the type of the subscript
        int_102616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1017, 40), 'int')
        # Getting the type of 'xy' (line 1017)
        xy_102617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 37), 'xy', False)
        # Obtaining the member '__getitem__' of a type (line 1017)
        getitem___102618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1017, 37), xy_102617, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1017)
        subscript_call_result_102619 = invoke(stypy.reporting.localization.Localization(__file__, 1017, 37), getitem___102618, int_102616)
        
        # Applying the binary operator '!=' (line 1017)
        result_ne_102620 = python_operator(stypy.reporting.localization.Localization(__file__, 1017, 28), '!=', subscript_call_result_102615, subscript_call_result_102619)
        
        # Obtaining the member 'any' of a type (line 1017)
        any_102621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1017, 28), result_ne_102620, 'any')
        # Calling any(args, kwargs) (line 1017)
        any_call_result_102623 = invoke(stypy.reporting.localization.Localization(__file__, 1017, 28), any_102621, *[], **kwargs_102622)
        
        # Applying the binary operator 'and' (line 1017)
        result_and_keyword_102624 = python_operator(stypy.reporting.localization.Localization(__file__, 1017, 15), 'and', len_call_result_102611, any_call_result_102623)
        
        # Testing the type of an if condition (line 1017)
        if_condition_102625 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1017, 12), result_and_keyword_102624)
        # Assigning a type to the variable 'if_condition_102625' (line 1017)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1017, 12), 'if_condition_102625', if_condition_102625)
        # SSA begins for if statement (line 1017)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1018):
        
        # Assigning a Call to a Name (line 1018):
        
        # Assigning a Call to a Name (line 1018):
        
        # Call to concatenate(...): (line 1018)
        # Processing the call arguments (line 1018)
        
        # Obtaining an instance of the builtin type 'list' (line 1018)
        list_102628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1018, 36), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1018)
        # Adding element type (line 1018)
        # Getting the type of 'xy' (line 1018)
        xy_102629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 37), 'xy', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1018, 36), list_102628, xy_102629)
        # Adding element type (line 1018)
        
        # Obtaining an instance of the builtin type 'list' (line 1018)
        list_102630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1018, 41), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1018)
        # Adding element type (line 1018)
        
        # Obtaining the type of the subscript
        int_102631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1018, 45), 'int')
        # Getting the type of 'xy' (line 1018)
        xy_102632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 42), 'xy', False)
        # Obtaining the member '__getitem__' of a type (line 1018)
        getitem___102633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1018, 42), xy_102632, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1018)
        subscript_call_result_102634 = invoke(stypy.reporting.localization.Localization(__file__, 1018, 42), getitem___102633, int_102631)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1018, 41), list_102630, subscript_call_result_102634)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1018, 36), list_102628, list_102630)
        
        # Processing the call keyword arguments (line 1018)
        kwargs_102635 = {}
        # Getting the type of 'np' (line 1018)
        np_102626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 21), 'np', False)
        # Obtaining the member 'concatenate' of a type (line 1018)
        concatenate_102627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1018, 21), np_102626, 'concatenate')
        # Calling concatenate(args, kwargs) (line 1018)
        concatenate_call_result_102636 = invoke(stypy.reporting.localization.Localization(__file__, 1018, 21), concatenate_102627, *[list_102628], **kwargs_102635)
        
        # Assigning a type to the variable 'xy' (line 1018)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1018, 16), 'xy', concatenate_call_result_102636)
        # SSA join for if statement (line 1017)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1016)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        
        # Call to len(...): (line 1020)
        # Processing the call arguments (line 1020)
        # Getting the type of 'xy' (line 1020)
        xy_102638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 19), 'xy', False)
        # Processing the call keyword arguments (line 1020)
        kwargs_102639 = {}
        # Getting the type of 'len' (line 1020)
        len_102637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 15), 'len', False)
        # Calling len(args, kwargs) (line 1020)
        len_call_result_102640 = invoke(stypy.reporting.localization.Localization(__file__, 1020, 15), len_102637, *[xy_102638], **kwargs_102639)
        
        int_102641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1020, 25), 'int')
        # Applying the binary operator '>' (line 1020)
        result_gt_102642 = python_operator(stypy.reporting.localization.Localization(__file__, 1020, 15), '>', len_call_result_102640, int_102641)
        
        
        # Call to all(...): (line 1020)
        # Processing the call keyword arguments (line 1020)
        kwargs_102653 = {}
        
        
        # Obtaining the type of the subscript
        int_102643 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1020, 35), 'int')
        # Getting the type of 'xy' (line 1020)
        xy_102644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 32), 'xy', False)
        # Obtaining the member '__getitem__' of a type (line 1020)
        getitem___102645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1020, 32), xy_102644, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1020)
        subscript_call_result_102646 = invoke(stypy.reporting.localization.Localization(__file__, 1020, 32), getitem___102645, int_102643)
        
        
        # Obtaining the type of the subscript
        int_102647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1020, 44), 'int')
        # Getting the type of 'xy' (line 1020)
        xy_102648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 41), 'xy', False)
        # Obtaining the member '__getitem__' of a type (line 1020)
        getitem___102649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1020, 41), xy_102648, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1020)
        subscript_call_result_102650 = invoke(stypy.reporting.localization.Localization(__file__, 1020, 41), getitem___102649, int_102647)
        
        # Applying the binary operator '==' (line 1020)
        result_eq_102651 = python_operator(stypy.reporting.localization.Localization(__file__, 1020, 32), '==', subscript_call_result_102646, subscript_call_result_102650)
        
        # Obtaining the member 'all' of a type (line 1020)
        all_102652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1020, 32), result_eq_102651, 'all')
        # Calling all(args, kwargs) (line 1020)
        all_call_result_102654 = invoke(stypy.reporting.localization.Localization(__file__, 1020, 32), all_102652, *[], **kwargs_102653)
        
        # Applying the binary operator 'and' (line 1020)
        result_and_keyword_102655 = python_operator(stypy.reporting.localization.Localization(__file__, 1020, 15), 'and', result_gt_102642, all_call_result_102654)
        
        # Testing the type of an if condition (line 1020)
        if_condition_102656 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1020, 12), result_and_keyword_102655)
        # Assigning a type to the variable 'if_condition_102656' (line 1020)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1020, 12), 'if_condition_102656', if_condition_102656)
        # SSA begins for if statement (line 1020)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1021):
        
        # Assigning a Subscript to a Name (line 1021):
        
        # Assigning a Subscript to a Name (line 1021):
        
        # Obtaining the type of the subscript
        int_102657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1021, 25), 'int')
        slice_102658 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1021, 21), None, int_102657, None)
        # Getting the type of 'xy' (line 1021)
        xy_102659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 21), 'xy')
        # Obtaining the member '__getitem__' of a type (line 1021)
        getitem___102660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1021, 21), xy_102659, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1021)
        subscript_call_result_102661 = invoke(stypy.reporting.localization.Localization(__file__, 1021, 21), getitem___102660, slice_102658)
        
        # Assigning a type to the variable 'xy' (line 1021)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1021, 16), 'xy', subscript_call_result_102661)
        # SSA join for if statement (line 1020)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1016)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 1022):
        
        # Assigning a Call to a Attribute (line 1022):
        
        # Assigning a Call to a Attribute (line 1022):
        
        # Call to Path(...): (line 1022)
        # Processing the call arguments (line 1022)
        # Getting the type of 'xy' (line 1022)
        xy_102663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 26), 'xy', False)
        # Processing the call keyword arguments (line 1022)
        # Getting the type of 'self' (line 1022)
        self_102664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 37), 'self', False)
        # Obtaining the member '_closed' of a type (line 1022)
        _closed_102665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1022, 37), self_102664, '_closed')
        keyword_102666 = _closed_102665
        kwargs_102667 = {'closed': keyword_102666}
        # Getting the type of 'Path' (line 1022)
        Path_102662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 21), 'Path', False)
        # Calling Path(args, kwargs) (line 1022)
        Path_call_result_102668 = invoke(stypy.reporting.localization.Localization(__file__, 1022, 21), Path_102662, *[xy_102663], **kwargs_102667)
        
        # Getting the type of 'self' (line 1022)
        self_102669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 8), 'self')
        # Setting the type of the member '_path' of a type (line 1022)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1022, 8), self_102669, '_path', Path_call_result_102668)
        
        # Assigning a Name to a Attribute (line 1023):
        
        # Assigning a Name to a Attribute (line 1023):
        
        # Assigning a Name to a Attribute (line 1023):
        # Getting the type of 'True' (line 1023)
        True_102670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 21), 'True')
        # Getting the type of 'self' (line 1023)
        self_102671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1023)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1023, 8), self_102671, 'stale', True_102670)
        
        # ################# End of 'set_xy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_xy' in the type store
        # Getting the type of 'stypy_return_type' (line 1005)
        stypy_return_type_102672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102672)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_xy'
        return stypy_return_type_102672

    
    # Assigning a Name to a Name (line 1025):
    
    # Assigning a Name to a Name (line 1025):
    
    # Assigning a Name to a Name (line 1026):
    
    # Assigning a Name to a Name (line 1026):
    
    # Assigning a Call to a Name (line 1027):
    
    # Assigning a Call to a Name (line 1027):

# Assigning a type to the variable 'Polygon' (line 927)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 927, 0), 'Polygon', Polygon)

# Assigning a Name to a Name (line 1025):
# Getting the type of 'Polygon'
Polygon_102673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Polygon')
# Obtaining the member 'get_xy' of a type
get_xy_102674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Polygon_102673, 'get_xy')
# Getting the type of 'Polygon'
Polygon_102675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Polygon')
# Setting the type of the member '_get_xy' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Polygon_102675, '_get_xy', get_xy_102674)

# Assigning a Name to a Name (line 1026):
# Getting the type of 'Polygon'
Polygon_102676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Polygon')
# Obtaining the member 'set_xy' of a type
set_xy_102677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Polygon_102676, 'set_xy')
# Getting the type of 'Polygon'
Polygon_102678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Polygon')
# Setting the type of the member '_set_xy' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Polygon_102678, '_set_xy', set_xy_102677)

# Assigning a Call to a Name (line 1027):

# Call to property(...): (line 1027)
# Processing the call arguments (line 1027)
# Getting the type of 'Polygon'
Polygon_102680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Polygon', False)
# Obtaining the member 'get_xy' of a type
get_xy_102681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Polygon_102680, 'get_xy')
# Getting the type of 'Polygon'
Polygon_102682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Polygon', False)
# Obtaining the member 'set_xy' of a type
set_xy_102683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Polygon_102682, 'set_xy')
# Getting the type of 'None' (line 1028)
None_102684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 24), 'None', False)
unicode_102685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1033, (-1)), 'unicode', u'Set/get the vertices of the polygon.  This property is\n           provided for backward compatibility with matplotlib 0.91.x\n           only.  New code should use\n           :meth:`~matplotlib.patches.Polygon.get_xy` and\n           :meth:`~matplotlib.patches.Polygon.set_xy` instead.')
# Processing the call keyword arguments (line 1027)
kwargs_102686 = {}
# Getting the type of 'property' (line 1027)
property_102679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 9), 'property', False)
# Calling property(args, kwargs) (line 1027)
property_call_result_102687 = invoke(stypy.reporting.localization.Localization(__file__, 1027, 9), property_102679, *[get_xy_102681, set_xy_102683, None_102684, unicode_102685], **kwargs_102686)

# Getting the type of 'Polygon'
Polygon_102688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Polygon')
# Setting the type of the member 'xy' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Polygon_102688, 'xy', property_call_result_102687)
# Declaration of the 'Wedge' class
# Getting the type of 'Patch' (line 1036)
Patch_102689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 12), 'Patch')

class Wedge(Patch_102689, ):
    unicode_102690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1039, (-1)), 'unicode', u'\n    Wedge shaped patch.\n    ')

    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 1040, 4, False)
        # Assigning a type to the variable 'self' (line 1041)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1041, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Wedge.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        Wedge.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Wedge.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Wedge.stypy__str__.__dict__.__setitem__('stypy_function_name', 'Wedge.stypy__str__')
        Wedge.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        Wedge.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Wedge.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Wedge.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Wedge.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Wedge.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Wedge.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Wedge.stypy__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        
        # Assigning a Tuple to a Name (line 1041):
        
        # Assigning a Tuple to a Name (line 1041):
        
        # Assigning a Tuple to a Name (line 1041):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1041)
        tuple_102691 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1041, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1041)
        # Adding element type (line 1041)
        
        # Obtaining the type of the subscript
        int_102692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1041, 28), 'int')
        # Getting the type of 'self' (line 1041)
        self_102693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 16), 'self')
        # Obtaining the member 'center' of a type (line 1041)
        center_102694 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1041, 16), self_102693, 'center')
        # Obtaining the member '__getitem__' of a type (line 1041)
        getitem___102695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1041, 16), center_102694, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1041)
        subscript_call_result_102696 = invoke(stypy.reporting.localization.Localization(__file__, 1041, 16), getitem___102695, int_102692)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1041, 16), tuple_102691, subscript_call_result_102696)
        # Adding element type (line 1041)
        
        # Obtaining the type of the subscript
        int_102697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1041, 44), 'int')
        # Getting the type of 'self' (line 1041)
        self_102698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 32), 'self')
        # Obtaining the member 'center' of a type (line 1041)
        center_102699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1041, 32), self_102698, 'center')
        # Obtaining the member '__getitem__' of a type (line 1041)
        getitem___102700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1041, 32), center_102699, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1041)
        subscript_call_result_102701 = invoke(stypy.reporting.localization.Localization(__file__, 1041, 32), getitem___102700, int_102697)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1041, 16), tuple_102691, subscript_call_result_102701)
        # Adding element type (line 1041)
        # Getting the type of 'self' (line 1041)
        self_102702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 48), 'self')
        # Obtaining the member 'r' of a type (line 1041)
        r_102703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1041, 48), self_102702, 'r')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1041, 16), tuple_102691, r_102703)
        # Adding element type (line 1041)
        # Getting the type of 'self' (line 1042)
        self_102704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 16), 'self')
        # Obtaining the member 'theta1' of a type (line 1042)
        theta1_102705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1042, 16), self_102704, 'theta1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1041, 16), tuple_102691, theta1_102705)
        # Adding element type (line 1041)
        # Getting the type of 'self' (line 1042)
        self_102706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 29), 'self')
        # Obtaining the member 'theta2' of a type (line 1042)
        theta2_102707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1042, 29), self_102706, 'theta2')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1041, 16), tuple_102691, theta2_102707)
        # Adding element type (line 1041)
        # Getting the type of 'self' (line 1042)
        self_102708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 42), 'self')
        # Obtaining the member 'width' of a type (line 1042)
        width_102709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1042, 42), self_102708, 'width')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1041, 16), tuple_102691, width_102709)
        
        # Assigning a type to the variable 'pars' (line 1041)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1041, 8), 'pars', tuple_102691)
        
        # Assigning a Str to a Name (line 1043):
        
        # Assigning a Str to a Name (line 1043):
        
        # Assigning a Str to a Name (line 1043):
        unicode_102710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1043, 14), 'unicode', u'Wedge(center=(%g, %g), r=%g, theta1=%g, theta2=%g, width=%s)')
        # Assigning a type to the variable 'fmt' (line 1043)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1043, 8), 'fmt', unicode_102710)
        # Getting the type of 'fmt' (line 1044)
        fmt_102711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 15), 'fmt')
        # Getting the type of 'pars' (line 1044)
        pars_102712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 21), 'pars')
        # Applying the binary operator '%' (line 1044)
        result_mod_102713 = python_operator(stypy.reporting.localization.Localization(__file__, 1044, 15), '%', fmt_102711, pars_102712)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1044)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1044, 8), 'stypy_return_type', result_mod_102713)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 1040)
        stypy_return_type_102714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102714)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_102714


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1047)
        None_102715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 56), 'None')
        defaults = [None_102715]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1046, 4, False)
        # Assigning a type to the variable 'self' (line 1047)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1047, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Wedge.__init__', ['center', 'r', 'theta1', 'theta2', 'width'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['center', 'r', 'theta1', 'theta2', 'width'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_102716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1057, (-1)), 'unicode', u'\n        Draw a wedge centered at *x*, *y* center with radius *r* that\n        sweeps *theta1* to *theta2* (in degrees).  If *width* is given,\n        then a partial wedge is drawn from inner radius *r* - *width*\n        to outer radius *r*.\n\n        Valid kwargs are:\n\n        %(Patch)s\n        ')
        
        # Call to __init__(...): (line 1058)
        # Processing the call arguments (line 1058)
        # Getting the type of 'self' (line 1058)
        self_102719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 23), 'self', False)
        # Processing the call keyword arguments (line 1058)
        # Getting the type of 'kwargs' (line 1058)
        kwargs_102720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 31), 'kwargs', False)
        kwargs_102721 = {'kwargs_102720': kwargs_102720}
        # Getting the type of 'Patch' (line 1058)
        Patch_102717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 8), 'Patch', False)
        # Obtaining the member '__init__' of a type (line 1058)
        init___102718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1058, 8), Patch_102717, '__init__')
        # Calling __init__(args, kwargs) (line 1058)
        init___call_result_102722 = invoke(stypy.reporting.localization.Localization(__file__, 1058, 8), init___102718, *[self_102719], **kwargs_102721)
        
        
        # Assigning a Name to a Attribute (line 1059):
        
        # Assigning a Name to a Attribute (line 1059):
        
        # Assigning a Name to a Attribute (line 1059):
        # Getting the type of 'center' (line 1059)
        center_102723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 22), 'center')
        # Getting the type of 'self' (line 1059)
        self_102724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 8), 'self')
        # Setting the type of the member 'center' of a type (line 1059)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1059, 8), self_102724, 'center', center_102723)
        
        # Assigning a Tuple to a Tuple (line 1060):
        
        # Assigning a Name to a Name (line 1060):
        
        # Assigning a Name to a Name (line 1060):
        # Getting the type of 'r' (line 1060)
        r_102725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 29), 'r')
        # Assigning a type to the variable 'tuple_assignment_100367' (line 1060)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1060, 8), 'tuple_assignment_100367', r_102725)
        
        # Assigning a Name to a Name (line 1060):
        
        # Assigning a Name to a Name (line 1060):
        # Getting the type of 'width' (line 1060)
        width_102726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 32), 'width')
        # Assigning a type to the variable 'tuple_assignment_100368' (line 1060)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1060, 8), 'tuple_assignment_100368', width_102726)
        
        # Assigning a Name to a Attribute (line 1060):
        
        # Assigning a Name to a Attribute (line 1060):
        # Getting the type of 'tuple_assignment_100367' (line 1060)
        tuple_assignment_100367_102727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 8), 'tuple_assignment_100367')
        # Getting the type of 'self' (line 1060)
        self_102728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 8), 'self')
        # Setting the type of the member 'r' of a type (line 1060)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1060, 8), self_102728, 'r', tuple_assignment_100367_102727)
        
        # Assigning a Name to a Attribute (line 1060):
        
        # Assigning a Name to a Attribute (line 1060):
        # Getting the type of 'tuple_assignment_100368' (line 1060)
        tuple_assignment_100368_102729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 8), 'tuple_assignment_100368')
        # Getting the type of 'self' (line 1060)
        self_102730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 16), 'self')
        # Setting the type of the member 'width' of a type (line 1060)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1060, 16), self_102730, 'width', tuple_assignment_100368_102729)
        
        # Assigning a Tuple to a Tuple (line 1061):
        
        # Assigning a Name to a Name (line 1061):
        
        # Assigning a Name to a Name (line 1061):
        # Getting the type of 'theta1' (line 1061)
        theta1_102731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1061, 35), 'theta1')
        # Assigning a type to the variable 'tuple_assignment_100369' (line 1061)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1061, 8), 'tuple_assignment_100369', theta1_102731)
        
        # Assigning a Name to a Name (line 1061):
        
        # Assigning a Name to a Name (line 1061):
        # Getting the type of 'theta2' (line 1061)
        theta2_102732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1061, 43), 'theta2')
        # Assigning a type to the variable 'tuple_assignment_100370' (line 1061)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1061, 8), 'tuple_assignment_100370', theta2_102732)
        
        # Assigning a Name to a Attribute (line 1061):
        
        # Assigning a Name to a Attribute (line 1061):
        # Getting the type of 'tuple_assignment_100369' (line 1061)
        tuple_assignment_100369_102733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1061, 8), 'tuple_assignment_100369')
        # Getting the type of 'self' (line 1061)
        self_102734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1061, 8), 'self')
        # Setting the type of the member 'theta1' of a type (line 1061)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1061, 8), self_102734, 'theta1', tuple_assignment_100369_102733)
        
        # Assigning a Name to a Attribute (line 1061):
        
        # Assigning a Name to a Attribute (line 1061):
        # Getting the type of 'tuple_assignment_100370' (line 1061)
        tuple_assignment_100370_102735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1061, 8), 'tuple_assignment_100370')
        # Getting the type of 'self' (line 1061)
        self_102736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1061, 21), 'self')
        # Setting the type of the member 'theta2' of a type (line 1061)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1061, 21), self_102736, 'theta2', tuple_assignment_100370_102735)
        
        # Assigning a Call to a Attribute (line 1062):
        
        # Assigning a Call to a Attribute (line 1062):
        
        # Assigning a Call to a Attribute (line 1062):
        
        # Call to IdentityTransform(...): (line 1062)
        # Processing the call keyword arguments (line 1062)
        kwargs_102739 = {}
        # Getting the type of 'transforms' (line 1062)
        transforms_102737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 32), 'transforms', False)
        # Obtaining the member 'IdentityTransform' of a type (line 1062)
        IdentityTransform_102738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1062, 32), transforms_102737, 'IdentityTransform')
        # Calling IdentityTransform(args, kwargs) (line 1062)
        IdentityTransform_call_result_102740 = invoke(stypy.reporting.localization.Localization(__file__, 1062, 32), IdentityTransform_102738, *[], **kwargs_102739)
        
        # Getting the type of 'self' (line 1062)
        self_102741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 8), 'self')
        # Setting the type of the member '_patch_transform' of a type (line 1062)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1062, 8), self_102741, '_patch_transform', IdentityTransform_call_result_102740)
        
        # Call to _recompute_path(...): (line 1063)
        # Processing the call keyword arguments (line 1063)
        kwargs_102744 = {}
        # Getting the type of 'self' (line 1063)
        self_102742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1063, 8), 'self', False)
        # Obtaining the member '_recompute_path' of a type (line 1063)
        _recompute_path_102743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1063, 8), self_102742, '_recompute_path')
        # Calling _recompute_path(args, kwargs) (line 1063)
        _recompute_path_call_result_102745 = invoke(stypy.reporting.localization.Localization(__file__, 1063, 8), _recompute_path_102743, *[], **kwargs_102744)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _recompute_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_recompute_path'
        module_type_store = module_type_store.open_function_context('_recompute_path', 1065, 4, False)
        # Assigning a type to the variable 'self' (line 1066)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1066, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Wedge._recompute_path.__dict__.__setitem__('stypy_localization', localization)
        Wedge._recompute_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Wedge._recompute_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        Wedge._recompute_path.__dict__.__setitem__('stypy_function_name', 'Wedge._recompute_path')
        Wedge._recompute_path.__dict__.__setitem__('stypy_param_names_list', [])
        Wedge._recompute_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        Wedge._recompute_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Wedge._recompute_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        Wedge._recompute_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        Wedge._recompute_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Wedge._recompute_path.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Wedge._recompute_path', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_recompute_path', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_recompute_path(...)' code ##################

        
        
        
        # Call to abs(...): (line 1067)
        # Processing the call arguments (line 1067)
        # Getting the type of 'self' (line 1067)
        self_102747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 16), 'self', False)
        # Obtaining the member 'theta2' of a type (line 1067)
        theta2_102748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1067, 16), self_102747, 'theta2')
        # Getting the type of 'self' (line 1067)
        self_102749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 30), 'self', False)
        # Obtaining the member 'theta1' of a type (line 1067)
        theta1_102750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1067, 30), self_102749, 'theta1')
        # Applying the binary operator '-' (line 1067)
        result_sub_102751 = python_operator(stypy.reporting.localization.Localization(__file__, 1067, 16), '-', theta2_102748, theta1_102750)
        
        int_102752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1067, 45), 'int')
        # Applying the binary operator '-' (line 1067)
        result_sub_102753 = python_operator(stypy.reporting.localization.Localization(__file__, 1067, 15), '-', result_sub_102751, int_102752)
        
        # Processing the call keyword arguments (line 1067)
        kwargs_102754 = {}
        # Getting the type of 'abs' (line 1067)
        abs_102746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 11), 'abs', False)
        # Calling abs(args, kwargs) (line 1067)
        abs_call_result_102755 = invoke(stypy.reporting.localization.Localization(__file__, 1067, 11), abs_102746, *[result_sub_102753], **kwargs_102754)
        
        float_102756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1067, 53), 'float')
        # Applying the binary operator '<=' (line 1067)
        result_le_102757 = python_operator(stypy.reporting.localization.Localization(__file__, 1067, 11), '<=', abs_call_result_102755, float_102756)
        
        # Testing the type of an if condition (line 1067)
        if_condition_102758 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1067, 8), result_le_102757)
        # Assigning a type to the variable 'if_condition_102758' (line 1067)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1067, 8), 'if_condition_102758', if_condition_102758)
        # SSA begins for if statement (line 1067)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 1068):
        
        # Assigning a Num to a Name (line 1068):
        
        # Assigning a Num to a Name (line 1068):
        int_102759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1068, 29), 'int')
        # Assigning a type to the variable 'tuple_assignment_100371' (line 1068)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1068, 12), 'tuple_assignment_100371', int_102759)
        
        # Assigning a Num to a Name (line 1068):
        
        # Assigning a Num to a Name (line 1068):
        int_102760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1068, 32), 'int')
        # Assigning a type to the variable 'tuple_assignment_100372' (line 1068)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1068, 12), 'tuple_assignment_100372', int_102760)
        
        # Assigning a Name to a Name (line 1068):
        
        # Assigning a Name to a Name (line 1068):
        # Getting the type of 'tuple_assignment_100371' (line 1068)
        tuple_assignment_100371_102761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 12), 'tuple_assignment_100371')
        # Assigning a type to the variable 'theta1' (line 1068)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1068, 12), 'theta1', tuple_assignment_100371_102761)
        
        # Assigning a Name to a Name (line 1068):
        
        # Assigning a Name to a Name (line 1068):
        # Getting the type of 'tuple_assignment_100372' (line 1068)
        tuple_assignment_100372_102762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 12), 'tuple_assignment_100372')
        # Assigning a type to the variable 'theta2' (line 1068)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1068, 20), 'theta2', tuple_assignment_100372_102762)
        
        # Assigning a Attribute to a Name (line 1069):
        
        # Assigning a Attribute to a Name (line 1069):
        
        # Assigning a Attribute to a Name (line 1069):
        # Getting the type of 'Path' (line 1069)
        Path_102763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1069, 24), 'Path')
        # Obtaining the member 'MOVETO' of a type (line 1069)
        MOVETO_102764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1069, 24), Path_102763, 'MOVETO')
        # Assigning a type to the variable 'connector' (line 1069)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1069, 12), 'connector', MOVETO_102764)
        # SSA branch for the else part of an if statement (line 1067)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Tuple to a Tuple (line 1071):
        
        # Assigning a Attribute to a Name (line 1071):
        
        # Assigning a Attribute to a Name (line 1071):
        # Getting the type of 'self' (line 1071)
        self_102765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1071, 29), 'self')
        # Obtaining the member 'theta1' of a type (line 1071)
        theta1_102766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1071, 29), self_102765, 'theta1')
        # Assigning a type to the variable 'tuple_assignment_100373' (line 1071)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1071, 12), 'tuple_assignment_100373', theta1_102766)
        
        # Assigning a Attribute to a Name (line 1071):
        
        # Assigning a Attribute to a Name (line 1071):
        # Getting the type of 'self' (line 1071)
        self_102767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1071, 42), 'self')
        # Obtaining the member 'theta2' of a type (line 1071)
        theta2_102768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1071, 42), self_102767, 'theta2')
        # Assigning a type to the variable 'tuple_assignment_100374' (line 1071)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1071, 12), 'tuple_assignment_100374', theta2_102768)
        
        # Assigning a Name to a Name (line 1071):
        
        # Assigning a Name to a Name (line 1071):
        # Getting the type of 'tuple_assignment_100373' (line 1071)
        tuple_assignment_100373_102769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1071, 12), 'tuple_assignment_100373')
        # Assigning a type to the variable 'theta1' (line 1071)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1071, 12), 'theta1', tuple_assignment_100373_102769)
        
        # Assigning a Name to a Name (line 1071):
        
        # Assigning a Name to a Name (line 1071):
        # Getting the type of 'tuple_assignment_100374' (line 1071)
        tuple_assignment_100374_102770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1071, 12), 'tuple_assignment_100374')
        # Assigning a type to the variable 'theta2' (line 1071)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1071, 20), 'theta2', tuple_assignment_100374_102770)
        
        # Assigning a Attribute to a Name (line 1072):
        
        # Assigning a Attribute to a Name (line 1072):
        
        # Assigning a Attribute to a Name (line 1072):
        # Getting the type of 'Path' (line 1072)
        Path_102771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 24), 'Path')
        # Obtaining the member 'LINETO' of a type (line 1072)
        LINETO_102772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1072, 24), Path_102771, 'LINETO')
        # Assigning a type to the variable 'connector' (line 1072)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1072, 12), 'connector', LINETO_102772)
        # SSA join for if statement (line 1067)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1075):
        
        # Assigning a Call to a Name (line 1075):
        
        # Assigning a Call to a Name (line 1075):
        
        # Call to arc(...): (line 1075)
        # Processing the call arguments (line 1075)
        # Getting the type of 'theta1' (line 1075)
        theta1_102775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1075, 23), 'theta1', False)
        # Getting the type of 'theta2' (line 1075)
        theta2_102776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1075, 31), 'theta2', False)
        # Processing the call keyword arguments (line 1075)
        kwargs_102777 = {}
        # Getting the type of 'Path' (line 1075)
        Path_102773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1075, 14), 'Path', False)
        # Obtaining the member 'arc' of a type (line 1075)
        arc_102774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1075, 14), Path_102773, 'arc')
        # Calling arc(args, kwargs) (line 1075)
        arc_call_result_102778 = invoke(stypy.reporting.localization.Localization(__file__, 1075, 14), arc_102774, *[theta1_102775, theta2_102776], **kwargs_102777)
        
        # Assigning a type to the variable 'arc' (line 1075)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1075, 8), 'arc', arc_call_result_102778)
        
        
        # Getting the type of 'self' (line 1077)
        self_102779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1077, 11), 'self')
        # Obtaining the member 'width' of a type (line 1077)
        width_102780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1077, 11), self_102779, 'width')
        # Getting the type of 'None' (line 1077)
        None_102781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1077, 29), 'None')
        # Applying the binary operator 'isnot' (line 1077)
        result_is_not_102782 = python_operator(stypy.reporting.localization.Localization(__file__, 1077, 11), 'isnot', width_102780, None_102781)
        
        # Testing the type of an if condition (line 1077)
        if_condition_102783 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1077, 8), result_is_not_102782)
        # Assigning a type to the variable 'if_condition_102783' (line 1077)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1077, 8), 'if_condition_102783', if_condition_102783)
        # SSA begins for if statement (line 1077)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 1080):
        
        # Assigning a Attribute to a Name (line 1080):
        
        # Assigning a Attribute to a Name (line 1080):
        # Getting the type of 'arc' (line 1080)
        arc_102784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 17), 'arc')
        # Obtaining the member 'vertices' of a type (line 1080)
        vertices_102785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1080, 17), arc_102784, 'vertices')
        # Assigning a type to the variable 'v1' (line 1080)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1080, 12), 'v1', vertices_102785)
        
        # Assigning a BinOp to a Name (line 1081):
        
        # Assigning a BinOp to a Name (line 1081):
        
        # Assigning a BinOp to a Name (line 1081):
        
        # Obtaining the type of the subscript
        int_102786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1081, 32), 'int')
        slice_102787 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1081, 17), None, None, int_102786)
        # Getting the type of 'arc' (line 1081)
        arc_102788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1081, 17), 'arc')
        # Obtaining the member 'vertices' of a type (line 1081)
        vertices_102789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1081, 17), arc_102788, 'vertices')
        # Obtaining the member '__getitem__' of a type (line 1081)
        getitem___102790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1081, 17), vertices_102789, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1081)
        subscript_call_result_102791 = invoke(stypy.reporting.localization.Localization(__file__, 1081, 17), getitem___102790, slice_102787)
        
        
        # Call to float(...): (line 1081)
        # Processing the call arguments (line 1081)
        # Getting the type of 'self' (line 1081)
        self_102793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1081, 44), 'self', False)
        # Obtaining the member 'r' of a type (line 1081)
        r_102794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1081, 44), self_102793, 'r')
        # Getting the type of 'self' (line 1081)
        self_102795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1081, 53), 'self', False)
        # Obtaining the member 'width' of a type (line 1081)
        width_102796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1081, 53), self_102795, 'width')
        # Applying the binary operator '-' (line 1081)
        result_sub_102797 = python_operator(stypy.reporting.localization.Localization(__file__, 1081, 44), '-', r_102794, width_102796)
        
        # Processing the call keyword arguments (line 1081)
        kwargs_102798 = {}
        # Getting the type of 'float' (line 1081)
        float_102792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1081, 38), 'float', False)
        # Calling float(args, kwargs) (line 1081)
        float_call_result_102799 = invoke(stypy.reporting.localization.Localization(__file__, 1081, 38), float_102792, *[result_sub_102797], **kwargs_102798)
        
        # Applying the binary operator '*' (line 1081)
        result_mul_102800 = python_operator(stypy.reporting.localization.Localization(__file__, 1081, 17), '*', subscript_call_result_102791, float_call_result_102799)
        
        # Getting the type of 'self' (line 1081)
        self_102801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1081, 67), 'self')
        # Obtaining the member 'r' of a type (line 1081)
        r_102802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1081, 67), self_102801, 'r')
        # Applying the binary operator 'div' (line 1081)
        result_div_102803 = python_operator(stypy.reporting.localization.Localization(__file__, 1081, 65), 'div', result_mul_102800, r_102802)
        
        # Assigning a type to the variable 'v2' (line 1081)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1081, 12), 'v2', result_div_102803)
        
        # Assigning a Call to a Name (line 1082):
        
        # Assigning a Call to a Name (line 1082):
        
        # Assigning a Call to a Name (line 1082):
        
        # Call to vstack(...): (line 1082)
        # Processing the call arguments (line 1082)
        
        # Obtaining an instance of the builtin type 'list' (line 1082)
        list_102806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1082, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1082)
        # Adding element type (line 1082)
        # Getting the type of 'v1' (line 1082)
        v1_102807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 27), 'v1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1082, 26), list_102806, v1_102807)
        # Adding element type (line 1082)
        # Getting the type of 'v2' (line 1082)
        v2_102808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 31), 'v2', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1082, 26), list_102806, v2_102808)
        # Adding element type (line 1082)
        
        # Obtaining the type of the subscript
        int_102809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1082, 38), 'int')
        slice_102810 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1082, 35), None, None, None)
        # Getting the type of 'v1' (line 1082)
        v1_102811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 35), 'v1', False)
        # Obtaining the member '__getitem__' of a type (line 1082)
        getitem___102812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1082, 35), v1_102811, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1082)
        subscript_call_result_102813 = invoke(stypy.reporting.localization.Localization(__file__, 1082, 35), getitem___102812, (int_102809, slice_102810))
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1082, 26), list_102806, subscript_call_result_102813)
        # Adding element type (line 1082)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1082)
        tuple_102814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1082, 46), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1082)
        # Adding element type (line 1082)
        int_102815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1082, 46), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1082, 46), tuple_102814, int_102815)
        # Adding element type (line 1082)
        int_102816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1082, 49), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1082, 46), tuple_102814, int_102816)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1082, 26), list_102806, tuple_102814)
        
        # Processing the call keyword arguments (line 1082)
        kwargs_102817 = {}
        # Getting the type of 'np' (line 1082)
        np_102804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 16), 'np', False)
        # Obtaining the member 'vstack' of a type (line 1082)
        vstack_102805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1082, 16), np_102804, 'vstack')
        # Calling vstack(args, kwargs) (line 1082)
        vstack_call_result_102818 = invoke(stypy.reporting.localization.Localization(__file__, 1082, 16), vstack_102805, *[list_102806], **kwargs_102817)
        
        # Assigning a type to the variable 'v' (line 1082)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1082, 12), 'v', vstack_call_result_102818)
        
        # Assigning a Call to a Name (line 1083):
        
        # Assigning a Call to a Name (line 1083):
        
        # Assigning a Call to a Name (line 1083):
        
        # Call to hstack(...): (line 1083)
        # Processing the call arguments (line 1083)
        
        # Obtaining an instance of the builtin type 'list' (line 1083)
        list_102821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1083, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1083)
        # Adding element type (line 1083)
        # Getting the type of 'arc' (line 1083)
        arc_102822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1083, 27), 'arc', False)
        # Obtaining the member 'codes' of a type (line 1083)
        codes_102823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1083, 27), arc_102822, 'codes')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1083, 26), list_102821, codes_102823)
        # Adding element type (line 1083)
        # Getting the type of 'arc' (line 1083)
        arc_102824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1083, 38), 'arc', False)
        # Obtaining the member 'codes' of a type (line 1083)
        codes_102825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1083, 38), arc_102824, 'codes')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1083, 26), list_102821, codes_102825)
        # Adding element type (line 1083)
        # Getting the type of 'connector' (line 1083)
        connector_102826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1083, 49), 'connector', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1083, 26), list_102821, connector_102826)
        # Adding element type (line 1083)
        # Getting the type of 'Path' (line 1083)
        Path_102827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1083, 60), 'Path', False)
        # Obtaining the member 'CLOSEPOLY' of a type (line 1083)
        CLOSEPOLY_102828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1083, 60), Path_102827, 'CLOSEPOLY')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1083, 26), list_102821, CLOSEPOLY_102828)
        
        # Processing the call keyword arguments (line 1083)
        kwargs_102829 = {}
        # Getting the type of 'np' (line 1083)
        np_102819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1083, 16), 'np', False)
        # Obtaining the member 'hstack' of a type (line 1083)
        hstack_102820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1083, 16), np_102819, 'hstack')
        # Calling hstack(args, kwargs) (line 1083)
        hstack_call_result_102830 = invoke(stypy.reporting.localization.Localization(__file__, 1083, 16), hstack_102820, *[list_102821], **kwargs_102829)
        
        # Assigning a type to the variable 'c' (line 1083)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1083, 12), 'c', hstack_call_result_102830)
        
        # Assigning a Name to a Subscript (line 1084):
        
        # Assigning a Name to a Subscript (line 1084):
        
        # Assigning a Name to a Subscript (line 1084):
        # Getting the type of 'connector' (line 1084)
        connector_102831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1084, 32), 'connector')
        # Getting the type of 'c' (line 1084)
        c_102832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1084, 12), 'c')
        
        # Call to len(...): (line 1084)
        # Processing the call arguments (line 1084)
        # Getting the type of 'arc' (line 1084)
        arc_102834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1084, 18), 'arc', False)
        # Obtaining the member 'codes' of a type (line 1084)
        codes_102835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1084, 18), arc_102834, 'codes')
        # Processing the call keyword arguments (line 1084)
        kwargs_102836 = {}
        # Getting the type of 'len' (line 1084)
        len_102833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1084, 14), 'len', False)
        # Calling len(args, kwargs) (line 1084)
        len_call_result_102837 = invoke(stypy.reporting.localization.Localization(__file__, 1084, 14), len_102833, *[codes_102835], **kwargs_102836)
        
        # Storing an element on a container (line 1084)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1084, 12), c_102832, (len_call_result_102837, connector_102831))
        # SSA branch for the else part of an if statement (line 1077)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1087):
        
        # Assigning a Call to a Name (line 1087):
        
        # Assigning a Call to a Name (line 1087):
        
        # Call to vstack(...): (line 1087)
        # Processing the call arguments (line 1087)
        
        # Obtaining an instance of the builtin type 'list' (line 1087)
        list_102840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1087, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1087)
        # Adding element type (line 1087)
        # Getting the type of 'arc' (line 1087)
        arc_102841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1087, 27), 'arc', False)
        # Obtaining the member 'vertices' of a type (line 1087)
        vertices_102842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1087, 27), arc_102841, 'vertices')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1087, 26), list_102840, vertices_102842)
        # Adding element type (line 1087)
        
        # Obtaining an instance of the builtin type 'list' (line 1087)
        list_102843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1087, 41), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1087)
        # Adding element type (line 1087)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1087)
        tuple_102844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1087, 43), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1087)
        # Adding element type (line 1087)
        int_102845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1087, 43), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1087, 43), tuple_102844, int_102845)
        # Adding element type (line 1087)
        int_102846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1087, 46), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1087, 43), tuple_102844, int_102846)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1087, 41), list_102843, tuple_102844)
        # Adding element type (line 1087)
        
        # Obtaining the type of the subscript
        int_102847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1087, 63), 'int')
        slice_102848 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1087, 50), None, None, None)
        # Getting the type of 'arc' (line 1087)
        arc_102849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1087, 50), 'arc', False)
        # Obtaining the member 'vertices' of a type (line 1087)
        vertices_102850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1087, 50), arc_102849, 'vertices')
        # Obtaining the member '__getitem__' of a type (line 1087)
        getitem___102851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1087, 50), vertices_102850, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1087)
        subscript_call_result_102852 = invoke(stypy.reporting.localization.Localization(__file__, 1087, 50), getitem___102851, (int_102847, slice_102848))
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1087, 41), list_102843, subscript_call_result_102852)
        # Adding element type (line 1087)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1087)
        tuple_102853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1087, 71), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1087)
        # Adding element type (line 1087)
        int_102854 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1087, 71), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1087, 71), tuple_102853, int_102854)
        # Adding element type (line 1087)
        int_102855 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1087, 74), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1087, 71), tuple_102853, int_102855)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1087, 41), list_102843, tuple_102853)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1087, 26), list_102840, list_102843)
        
        # Processing the call keyword arguments (line 1087)
        kwargs_102856 = {}
        # Getting the type of 'np' (line 1087)
        np_102838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1087, 16), 'np', False)
        # Obtaining the member 'vstack' of a type (line 1087)
        vstack_102839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1087, 16), np_102838, 'vstack')
        # Calling vstack(args, kwargs) (line 1087)
        vstack_call_result_102857 = invoke(stypy.reporting.localization.Localization(__file__, 1087, 16), vstack_102839, *[list_102840], **kwargs_102856)
        
        # Assigning a type to the variable 'v' (line 1087)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1087, 12), 'v', vstack_call_result_102857)
        
        # Assigning a Call to a Name (line 1088):
        
        # Assigning a Call to a Name (line 1088):
        
        # Assigning a Call to a Name (line 1088):
        
        # Call to hstack(...): (line 1088)
        # Processing the call arguments (line 1088)
        
        # Obtaining an instance of the builtin type 'list' (line 1088)
        list_102860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1088, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1088)
        # Adding element type (line 1088)
        # Getting the type of 'arc' (line 1088)
        arc_102861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 27), 'arc', False)
        # Obtaining the member 'codes' of a type (line 1088)
        codes_102862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1088, 27), arc_102861, 'codes')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1088, 26), list_102860, codes_102862)
        # Adding element type (line 1088)
        
        # Obtaining an instance of the builtin type 'list' (line 1088)
        list_102863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1088, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1088)
        # Adding element type (line 1088)
        # Getting the type of 'connector' (line 1088)
        connector_102864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 39), 'connector', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1088, 38), list_102863, connector_102864)
        # Adding element type (line 1088)
        # Getting the type of 'connector' (line 1088)
        connector_102865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 50), 'connector', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1088, 38), list_102863, connector_102865)
        # Adding element type (line 1088)
        # Getting the type of 'Path' (line 1088)
        Path_102866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 61), 'Path', False)
        # Obtaining the member 'CLOSEPOLY' of a type (line 1088)
        CLOSEPOLY_102867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1088, 61), Path_102866, 'CLOSEPOLY')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1088, 38), list_102863, CLOSEPOLY_102867)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1088, 26), list_102860, list_102863)
        
        # Processing the call keyword arguments (line 1088)
        kwargs_102868 = {}
        # Getting the type of 'np' (line 1088)
        np_102858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 16), 'np', False)
        # Obtaining the member 'hstack' of a type (line 1088)
        hstack_102859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1088, 16), np_102858, 'hstack')
        # Calling hstack(args, kwargs) (line 1088)
        hstack_call_result_102869 = invoke(stypy.reporting.localization.Localization(__file__, 1088, 16), hstack_102859, *[list_102860], **kwargs_102868)
        
        # Assigning a type to the variable 'c' (line 1088)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1088, 12), 'c', hstack_call_result_102869)
        # SSA join for if statement (line 1077)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'v' (line 1091)
        v_102870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 8), 'v')
        # Getting the type of 'self' (line 1091)
        self_102871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 13), 'self')
        # Obtaining the member 'r' of a type (line 1091)
        r_102872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1091, 13), self_102871, 'r')
        # Applying the binary operator '*=' (line 1091)
        result_imul_102873 = python_operator(stypy.reporting.localization.Localization(__file__, 1091, 8), '*=', v_102870, r_102872)
        # Assigning a type to the variable 'v' (line 1091)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1091, 8), 'v', result_imul_102873)
        
        
        # Getting the type of 'v' (line 1092)
        v_102874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 8), 'v')
        
        # Call to asarray(...): (line 1092)
        # Processing the call arguments (line 1092)
        # Getting the type of 'self' (line 1092)
        self_102877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 24), 'self', False)
        # Obtaining the member 'center' of a type (line 1092)
        center_102878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1092, 24), self_102877, 'center')
        # Processing the call keyword arguments (line 1092)
        kwargs_102879 = {}
        # Getting the type of 'np' (line 1092)
        np_102875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 13), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1092)
        asarray_102876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1092, 13), np_102875, 'asarray')
        # Calling asarray(args, kwargs) (line 1092)
        asarray_call_result_102880 = invoke(stypy.reporting.localization.Localization(__file__, 1092, 13), asarray_102876, *[center_102878], **kwargs_102879)
        
        # Applying the binary operator '+=' (line 1092)
        result_iadd_102881 = python_operator(stypy.reporting.localization.Localization(__file__, 1092, 8), '+=', v_102874, asarray_call_result_102880)
        # Assigning a type to the variable 'v' (line 1092)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1092, 8), 'v', result_iadd_102881)
        
        
        # Assigning a Call to a Attribute (line 1093):
        
        # Assigning a Call to a Attribute (line 1093):
        
        # Assigning a Call to a Attribute (line 1093):
        
        # Call to Path(...): (line 1093)
        # Processing the call arguments (line 1093)
        # Getting the type of 'v' (line 1093)
        v_102883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 26), 'v', False)
        # Getting the type of 'c' (line 1093)
        c_102884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 29), 'c', False)
        # Processing the call keyword arguments (line 1093)
        kwargs_102885 = {}
        # Getting the type of 'Path' (line 1093)
        Path_102882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 21), 'Path', False)
        # Calling Path(args, kwargs) (line 1093)
        Path_call_result_102886 = invoke(stypy.reporting.localization.Localization(__file__, 1093, 21), Path_102882, *[v_102883, c_102884], **kwargs_102885)
        
        # Getting the type of 'self' (line 1093)
        self_102887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 8), 'self')
        # Setting the type of the member '_path' of a type (line 1093)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1093, 8), self_102887, '_path', Path_call_result_102886)
        
        # ################# End of '_recompute_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_recompute_path' in the type store
        # Getting the type of 'stypy_return_type' (line 1065)
        stypy_return_type_102888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102888)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_recompute_path'
        return stypy_return_type_102888


    @norecursion
    def set_center(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_center'
        module_type_store = module_type_store.open_function_context('set_center', 1095, 4, False)
        # Assigning a type to the variable 'self' (line 1096)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1096, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Wedge.set_center.__dict__.__setitem__('stypy_localization', localization)
        Wedge.set_center.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Wedge.set_center.__dict__.__setitem__('stypy_type_store', module_type_store)
        Wedge.set_center.__dict__.__setitem__('stypy_function_name', 'Wedge.set_center')
        Wedge.set_center.__dict__.__setitem__('stypy_param_names_list', ['center'])
        Wedge.set_center.__dict__.__setitem__('stypy_varargs_param_name', None)
        Wedge.set_center.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Wedge.set_center.__dict__.__setitem__('stypy_call_defaults', defaults)
        Wedge.set_center.__dict__.__setitem__('stypy_call_varargs', varargs)
        Wedge.set_center.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Wedge.set_center.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Wedge.set_center', ['center'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_center', localization, ['center'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_center(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1096):
        
        # Assigning a Name to a Attribute (line 1096):
        
        # Assigning a Name to a Attribute (line 1096):
        # Getting the type of 'None' (line 1096)
        None_102889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 21), 'None')
        # Getting the type of 'self' (line 1096)
        self_102890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 8), 'self')
        # Setting the type of the member '_path' of a type (line 1096)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1096, 8), self_102890, '_path', None_102889)
        
        # Assigning a Name to a Attribute (line 1097):
        
        # Assigning a Name to a Attribute (line 1097):
        
        # Assigning a Name to a Attribute (line 1097):
        # Getting the type of 'center' (line 1097)
        center_102891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 22), 'center')
        # Getting the type of 'self' (line 1097)
        self_102892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 8), 'self')
        # Setting the type of the member 'center' of a type (line 1097)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1097, 8), self_102892, 'center', center_102891)
        
        # Assigning a Name to a Attribute (line 1098):
        
        # Assigning a Name to a Attribute (line 1098):
        
        # Assigning a Name to a Attribute (line 1098):
        # Getting the type of 'True' (line 1098)
        True_102893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 21), 'True')
        # Getting the type of 'self' (line 1098)
        self_102894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1098)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1098, 8), self_102894, 'stale', True_102893)
        
        # ################# End of 'set_center(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_center' in the type store
        # Getting the type of 'stypy_return_type' (line 1095)
        stypy_return_type_102895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1095, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102895)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_center'
        return stypy_return_type_102895


    @norecursion
    def set_radius(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_radius'
        module_type_store = module_type_store.open_function_context('set_radius', 1100, 4, False)
        # Assigning a type to the variable 'self' (line 1101)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1101, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Wedge.set_radius.__dict__.__setitem__('stypy_localization', localization)
        Wedge.set_radius.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Wedge.set_radius.__dict__.__setitem__('stypy_type_store', module_type_store)
        Wedge.set_radius.__dict__.__setitem__('stypy_function_name', 'Wedge.set_radius')
        Wedge.set_radius.__dict__.__setitem__('stypy_param_names_list', ['radius'])
        Wedge.set_radius.__dict__.__setitem__('stypy_varargs_param_name', None)
        Wedge.set_radius.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Wedge.set_radius.__dict__.__setitem__('stypy_call_defaults', defaults)
        Wedge.set_radius.__dict__.__setitem__('stypy_call_varargs', varargs)
        Wedge.set_radius.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Wedge.set_radius.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Wedge.set_radius', ['radius'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_radius', localization, ['radius'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_radius(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1101):
        
        # Assigning a Name to a Attribute (line 1101):
        
        # Assigning a Name to a Attribute (line 1101):
        # Getting the type of 'None' (line 1101)
        None_102896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 21), 'None')
        # Getting the type of 'self' (line 1101)
        self_102897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 8), 'self')
        # Setting the type of the member '_path' of a type (line 1101)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1101, 8), self_102897, '_path', None_102896)
        
        # Assigning a Name to a Attribute (line 1102):
        
        # Assigning a Name to a Attribute (line 1102):
        
        # Assigning a Name to a Attribute (line 1102):
        # Getting the type of 'radius' (line 1102)
        radius_102898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1102, 17), 'radius')
        # Getting the type of 'self' (line 1102)
        self_102899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1102, 8), 'self')
        # Setting the type of the member 'r' of a type (line 1102)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1102, 8), self_102899, 'r', radius_102898)
        
        # Assigning a Name to a Attribute (line 1103):
        
        # Assigning a Name to a Attribute (line 1103):
        
        # Assigning a Name to a Attribute (line 1103):
        # Getting the type of 'True' (line 1103)
        True_102900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 21), 'True')
        # Getting the type of 'self' (line 1103)
        self_102901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1103)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1103, 8), self_102901, 'stale', True_102900)
        
        # ################# End of 'set_radius(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_radius' in the type store
        # Getting the type of 'stypy_return_type' (line 1100)
        stypy_return_type_102902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1100, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102902)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_radius'
        return stypy_return_type_102902


    @norecursion
    def set_theta1(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_theta1'
        module_type_store = module_type_store.open_function_context('set_theta1', 1105, 4, False)
        # Assigning a type to the variable 'self' (line 1106)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1106, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Wedge.set_theta1.__dict__.__setitem__('stypy_localization', localization)
        Wedge.set_theta1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Wedge.set_theta1.__dict__.__setitem__('stypy_type_store', module_type_store)
        Wedge.set_theta1.__dict__.__setitem__('stypy_function_name', 'Wedge.set_theta1')
        Wedge.set_theta1.__dict__.__setitem__('stypy_param_names_list', ['theta1'])
        Wedge.set_theta1.__dict__.__setitem__('stypy_varargs_param_name', None)
        Wedge.set_theta1.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Wedge.set_theta1.__dict__.__setitem__('stypy_call_defaults', defaults)
        Wedge.set_theta1.__dict__.__setitem__('stypy_call_varargs', varargs)
        Wedge.set_theta1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Wedge.set_theta1.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Wedge.set_theta1', ['theta1'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_theta1', localization, ['theta1'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_theta1(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1106):
        
        # Assigning a Name to a Attribute (line 1106):
        
        # Assigning a Name to a Attribute (line 1106):
        # Getting the type of 'None' (line 1106)
        None_102903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 21), 'None')
        # Getting the type of 'self' (line 1106)
        self_102904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 8), 'self')
        # Setting the type of the member '_path' of a type (line 1106)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1106, 8), self_102904, '_path', None_102903)
        
        # Assigning a Name to a Attribute (line 1107):
        
        # Assigning a Name to a Attribute (line 1107):
        
        # Assigning a Name to a Attribute (line 1107):
        # Getting the type of 'theta1' (line 1107)
        theta1_102905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 22), 'theta1')
        # Getting the type of 'self' (line 1107)
        self_102906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 8), 'self')
        # Setting the type of the member 'theta1' of a type (line 1107)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1107, 8), self_102906, 'theta1', theta1_102905)
        
        # Assigning a Name to a Attribute (line 1108):
        
        # Assigning a Name to a Attribute (line 1108):
        
        # Assigning a Name to a Attribute (line 1108):
        # Getting the type of 'True' (line 1108)
        True_102907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 21), 'True')
        # Getting the type of 'self' (line 1108)
        self_102908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1108)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1108, 8), self_102908, 'stale', True_102907)
        
        # ################# End of 'set_theta1(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_theta1' in the type store
        # Getting the type of 'stypy_return_type' (line 1105)
        stypy_return_type_102909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102909)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_theta1'
        return stypy_return_type_102909


    @norecursion
    def set_theta2(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_theta2'
        module_type_store = module_type_store.open_function_context('set_theta2', 1110, 4, False)
        # Assigning a type to the variable 'self' (line 1111)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1111, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Wedge.set_theta2.__dict__.__setitem__('stypy_localization', localization)
        Wedge.set_theta2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Wedge.set_theta2.__dict__.__setitem__('stypy_type_store', module_type_store)
        Wedge.set_theta2.__dict__.__setitem__('stypy_function_name', 'Wedge.set_theta2')
        Wedge.set_theta2.__dict__.__setitem__('stypy_param_names_list', ['theta2'])
        Wedge.set_theta2.__dict__.__setitem__('stypy_varargs_param_name', None)
        Wedge.set_theta2.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Wedge.set_theta2.__dict__.__setitem__('stypy_call_defaults', defaults)
        Wedge.set_theta2.__dict__.__setitem__('stypy_call_varargs', varargs)
        Wedge.set_theta2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Wedge.set_theta2.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Wedge.set_theta2', ['theta2'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_theta2', localization, ['theta2'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_theta2(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1111):
        
        # Assigning a Name to a Attribute (line 1111):
        
        # Assigning a Name to a Attribute (line 1111):
        # Getting the type of 'None' (line 1111)
        None_102910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 21), 'None')
        # Getting the type of 'self' (line 1111)
        self_102911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 8), 'self')
        # Setting the type of the member '_path' of a type (line 1111)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1111, 8), self_102911, '_path', None_102910)
        
        # Assigning a Name to a Attribute (line 1112):
        
        # Assigning a Name to a Attribute (line 1112):
        
        # Assigning a Name to a Attribute (line 1112):
        # Getting the type of 'theta2' (line 1112)
        theta2_102912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 22), 'theta2')
        # Getting the type of 'self' (line 1112)
        self_102913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 8), 'self')
        # Setting the type of the member 'theta2' of a type (line 1112)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1112, 8), self_102913, 'theta2', theta2_102912)
        
        # Assigning a Name to a Attribute (line 1113):
        
        # Assigning a Name to a Attribute (line 1113):
        
        # Assigning a Name to a Attribute (line 1113):
        # Getting the type of 'True' (line 1113)
        True_102914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 21), 'True')
        # Getting the type of 'self' (line 1113)
        self_102915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1113)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1113, 8), self_102915, 'stale', True_102914)
        
        # ################# End of 'set_theta2(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_theta2' in the type store
        # Getting the type of 'stypy_return_type' (line 1110)
        stypy_return_type_102916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102916)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_theta2'
        return stypy_return_type_102916


    @norecursion
    def set_width(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_width'
        module_type_store = module_type_store.open_function_context('set_width', 1115, 4, False)
        # Assigning a type to the variable 'self' (line 1116)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1116, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Wedge.set_width.__dict__.__setitem__('stypy_localization', localization)
        Wedge.set_width.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Wedge.set_width.__dict__.__setitem__('stypy_type_store', module_type_store)
        Wedge.set_width.__dict__.__setitem__('stypy_function_name', 'Wedge.set_width')
        Wedge.set_width.__dict__.__setitem__('stypy_param_names_list', ['width'])
        Wedge.set_width.__dict__.__setitem__('stypy_varargs_param_name', None)
        Wedge.set_width.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Wedge.set_width.__dict__.__setitem__('stypy_call_defaults', defaults)
        Wedge.set_width.__dict__.__setitem__('stypy_call_varargs', varargs)
        Wedge.set_width.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Wedge.set_width.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Wedge.set_width', ['width'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_width', localization, ['width'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_width(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1116):
        
        # Assigning a Name to a Attribute (line 1116):
        
        # Assigning a Name to a Attribute (line 1116):
        # Getting the type of 'None' (line 1116)
        None_102917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 21), 'None')
        # Getting the type of 'self' (line 1116)
        self_102918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 8), 'self')
        # Setting the type of the member '_path' of a type (line 1116)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1116, 8), self_102918, '_path', None_102917)
        
        # Assigning a Name to a Attribute (line 1117):
        
        # Assigning a Name to a Attribute (line 1117):
        
        # Assigning a Name to a Attribute (line 1117):
        # Getting the type of 'width' (line 1117)
        width_102919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1117, 21), 'width')
        # Getting the type of 'self' (line 1117)
        self_102920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1117, 8), 'self')
        # Setting the type of the member 'width' of a type (line 1117)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1117, 8), self_102920, 'width', width_102919)
        
        # Assigning a Name to a Attribute (line 1118):
        
        # Assigning a Name to a Attribute (line 1118):
        
        # Assigning a Name to a Attribute (line 1118):
        # Getting the type of 'True' (line 1118)
        True_102921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 21), 'True')
        # Getting the type of 'self' (line 1118)
        self_102922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1118)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1118, 8), self_102922, 'stale', True_102921)
        
        # ################# End of 'set_width(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_width' in the type store
        # Getting the type of 'stypy_return_type' (line 1115)
        stypy_return_type_102923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102923)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_width'
        return stypy_return_type_102923


    @norecursion
    def get_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_path'
        module_type_store = module_type_store.open_function_context('get_path', 1120, 4, False)
        # Assigning a type to the variable 'self' (line 1121)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1121, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Wedge.get_path.__dict__.__setitem__('stypy_localization', localization)
        Wedge.get_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Wedge.get_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        Wedge.get_path.__dict__.__setitem__('stypy_function_name', 'Wedge.get_path')
        Wedge.get_path.__dict__.__setitem__('stypy_param_names_list', [])
        Wedge.get_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        Wedge.get_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Wedge.get_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        Wedge.get_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        Wedge.get_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Wedge.get_path.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Wedge.get_path', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_path', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_path(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 1121)
        # Getting the type of 'self' (line 1121)
        self_102924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1121, 11), 'self')
        # Obtaining the member '_path' of a type (line 1121)
        _path_102925 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1121, 11), self_102924, '_path')
        # Getting the type of 'None' (line 1121)
        None_102926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1121, 25), 'None')
        
        (may_be_102927, more_types_in_union_102928) = may_be_none(_path_102925, None_102926)

        if may_be_102927:

            if more_types_in_union_102928:
                # Runtime conditional SSA (line 1121)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to _recompute_path(...): (line 1122)
            # Processing the call keyword arguments (line 1122)
            kwargs_102931 = {}
            # Getting the type of 'self' (line 1122)
            self_102929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 12), 'self', False)
            # Obtaining the member '_recompute_path' of a type (line 1122)
            _recompute_path_102930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1122, 12), self_102929, '_recompute_path')
            # Calling _recompute_path(args, kwargs) (line 1122)
            _recompute_path_call_result_102932 = invoke(stypy.reporting.localization.Localization(__file__, 1122, 12), _recompute_path_102930, *[], **kwargs_102931)
            

            if more_types_in_union_102928:
                # SSA join for if statement (line 1121)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'self' (line 1123)
        self_102933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 15), 'self')
        # Obtaining the member '_path' of a type (line 1123)
        _path_102934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1123, 15), self_102933, '_path')
        # Assigning a type to the variable 'stypy_return_type' (line 1123)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1123, 8), 'stypy_return_type', _path_102934)
        
        # ################# End of 'get_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_path' in the type store
        # Getting the type of 'stypy_return_type' (line 1120)
        stypy_return_type_102935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102935)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_path'
        return stypy_return_type_102935


# Assigning a type to the variable 'Wedge' (line 1036)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1036, 0), 'Wedge', Wedge)
# Declaration of the 'Arrow' class
# Getting the type of 'Patch' (line 1127)
Patch_102936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 12), 'Patch')

class Arrow(Patch_102936, ):
    unicode_102937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1130, (-1)), 'unicode', u'\n    An arrow patch.\n    ')

    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 1131, 4, False)
        # Assigning a type to the variable 'self' (line 1132)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1132, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Arrow.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        Arrow.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Arrow.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Arrow.stypy__str__.__dict__.__setitem__('stypy_function_name', 'Arrow.stypy__str__')
        Arrow.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        Arrow.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Arrow.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Arrow.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Arrow.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Arrow.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Arrow.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Arrow.stypy__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        unicode_102938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1132, 15), 'unicode', u'Arrow()')
        # Assigning a type to the variable 'stypy_return_type' (line 1132)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1132, 8), 'stypy_return_type', unicode_102938)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 1131)
        stypy_return_type_102939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102939)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_102939

    
    # Assigning a Call to a Name (line 1134):
    
    # Assigning a Call to a Name (line 1134):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        float_102940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1141, 43), 'float')
        defaults = [float_102940]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1140, 4, False)
        # Assigning a type to the variable 'self' (line 1141)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1141, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Arrow.__init__', ['x', 'y', 'dx', 'dy', 'width'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['x', 'y', 'dx', 'dy', 'width'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_102941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1170, (-1)), 'unicode', u'\n        Draws an arrow from (*x*, *y*) to (*x* + *dx*, *y* + *dy*).\n        The width of the arrow is scaled by *width*.\n\n        Parameters\n        ----------\n        x : scalar\n            x coordinate of the arrow tail\n        y : scalar\n            y coordinate of the arrow tail\n        dx : scalar\n            Arrow length in the x direction\n        dy : scalar\n            Arrow length in the y direction\n        width : scalar, optional (default: 1)\n            Scale factor for the width of the arrow. With a default value of\n            1, the tail width is 0.2 and head width is 0.6.\n        **kwargs :\n            Keyword arguments control the :class:`~matplotlib.patches.Patch`\n            properties:\n\n            %(Patch)s\n\n        See Also\n        --------\n        :class:`FancyArrow` :\n            Patch that allows independent control of the head and tail\n            properties\n        ')
        
        # Call to __init__(...): (line 1171)
        # Processing the call arguments (line 1171)
        # Getting the type of 'self' (line 1171)
        self_102944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 23), 'self', False)
        # Processing the call keyword arguments (line 1171)
        # Getting the type of 'kwargs' (line 1171)
        kwargs_102945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 31), 'kwargs', False)
        kwargs_102946 = {'kwargs_102945': kwargs_102945}
        # Getting the type of 'Patch' (line 1171)
        Patch_102942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 8), 'Patch', False)
        # Obtaining the member '__init__' of a type (line 1171)
        init___102943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1171, 8), Patch_102942, '__init__')
        # Calling __init__(args, kwargs) (line 1171)
        init___call_result_102947 = invoke(stypy.reporting.localization.Localization(__file__, 1171, 8), init___102943, *[self_102944], **kwargs_102946)
        
        
        # Assigning a Call to a Name (line 1172):
        
        # Assigning a Call to a Name (line 1172):
        
        # Assigning a Call to a Name (line 1172):
        
        # Call to hypot(...): (line 1172)
        # Processing the call arguments (line 1172)
        # Getting the type of 'dx' (line 1172)
        dx_102950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 21), 'dx', False)
        # Getting the type of 'dy' (line 1172)
        dy_102951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 25), 'dy', False)
        # Processing the call keyword arguments (line 1172)
        kwargs_102952 = {}
        # Getting the type of 'np' (line 1172)
        np_102948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 12), 'np', False)
        # Obtaining the member 'hypot' of a type (line 1172)
        hypot_102949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1172, 12), np_102948, 'hypot')
        # Calling hypot(args, kwargs) (line 1172)
        hypot_call_result_102953 = invoke(stypy.reporting.localization.Localization(__file__, 1172, 12), hypot_102949, *[dx_102950, dy_102951], **kwargs_102952)
        
        # Assigning a type to the variable 'L' (line 1172)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1172, 8), 'L', hypot_call_result_102953)
        
        
        # Getting the type of 'L' (line 1174)
        L_102954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1174, 11), 'L')
        int_102955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1174, 16), 'int')
        # Applying the binary operator '!=' (line 1174)
        result_ne_102956 = python_operator(stypy.reporting.localization.Localization(__file__, 1174, 11), '!=', L_102954, int_102955)
        
        # Testing the type of an if condition (line 1174)
        if_condition_102957 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1174, 8), result_ne_102956)
        # Assigning a type to the variable 'if_condition_102957' (line 1174)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1174, 8), 'if_condition_102957', if_condition_102957)
        # SSA begins for if statement (line 1174)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1175):
        
        # Assigning a BinOp to a Name (line 1175):
        
        # Assigning a BinOp to a Name (line 1175):
        
        # Call to float(...): (line 1175)
        # Processing the call arguments (line 1175)
        # Getting the type of 'dx' (line 1175)
        dx_102959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 23), 'dx', False)
        # Processing the call keyword arguments (line 1175)
        kwargs_102960 = {}
        # Getting the type of 'float' (line 1175)
        float_102958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 17), 'float', False)
        # Calling float(args, kwargs) (line 1175)
        float_call_result_102961 = invoke(stypy.reporting.localization.Localization(__file__, 1175, 17), float_102958, *[dx_102959], **kwargs_102960)
        
        # Getting the type of 'L' (line 1175)
        L_102962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 29), 'L')
        # Applying the binary operator 'div' (line 1175)
        result_div_102963 = python_operator(stypy.reporting.localization.Localization(__file__, 1175, 17), 'div', float_call_result_102961, L_102962)
        
        # Assigning a type to the variable 'cx' (line 1175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1175, 12), 'cx', result_div_102963)
        
        # Assigning a BinOp to a Name (line 1176):
        
        # Assigning a BinOp to a Name (line 1176):
        
        # Assigning a BinOp to a Name (line 1176):
        
        # Call to float(...): (line 1176)
        # Processing the call arguments (line 1176)
        # Getting the type of 'dy' (line 1176)
        dy_102965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 23), 'dy', False)
        # Processing the call keyword arguments (line 1176)
        kwargs_102966 = {}
        # Getting the type of 'float' (line 1176)
        float_102964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 17), 'float', False)
        # Calling float(args, kwargs) (line 1176)
        float_call_result_102967 = invoke(stypy.reporting.localization.Localization(__file__, 1176, 17), float_102964, *[dy_102965], **kwargs_102966)
        
        # Getting the type of 'L' (line 1176)
        L_102968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 29), 'L')
        # Applying the binary operator 'div' (line 1176)
        result_div_102969 = python_operator(stypy.reporting.localization.Localization(__file__, 1176, 17), 'div', float_call_result_102967, L_102968)
        
        # Assigning a type to the variable 'sx' (line 1176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1176, 12), 'sx', result_div_102969)
        # SSA branch for the else part of an if statement (line 1174)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Tuple to a Tuple (line 1179):
        
        # Assigning a Num to a Name (line 1179):
        
        # Assigning a Num to a Name (line 1179):
        int_102970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1179, 21), 'int')
        # Assigning a type to the variable 'tuple_assignment_100375' (line 1179)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1179, 12), 'tuple_assignment_100375', int_102970)
        
        # Assigning a Num to a Name (line 1179):
        
        # Assigning a Num to a Name (line 1179):
        int_102971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1179, 24), 'int')
        # Assigning a type to the variable 'tuple_assignment_100376' (line 1179)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1179, 12), 'tuple_assignment_100376', int_102971)
        
        # Assigning a Name to a Name (line 1179):
        
        # Assigning a Name to a Name (line 1179):
        # Getting the type of 'tuple_assignment_100375' (line 1179)
        tuple_assignment_100375_102972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 12), 'tuple_assignment_100375')
        # Assigning a type to the variable 'cx' (line 1179)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1179, 12), 'cx', tuple_assignment_100375_102972)
        
        # Assigning a Name to a Name (line 1179):
        
        # Assigning a Name to a Name (line 1179):
        # Getting the type of 'tuple_assignment_100376' (line 1179)
        tuple_assignment_100376_102973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 12), 'tuple_assignment_100376')
        # Assigning a type to the variable 'sx' (line 1179)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1179, 16), 'sx', tuple_assignment_100376_102973)
        # SSA join for if statement (line 1174)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1181):
        
        # Assigning a Call to a Name (line 1181):
        
        # Assigning a Call to a Name (line 1181):
        
        # Call to scale(...): (line 1181)
        # Processing the call arguments (line 1181)
        # Getting the type of 'L' (line 1181)
        L_102979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 45), 'L', False)
        # Getting the type of 'width' (line 1181)
        width_102980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 48), 'width', False)
        # Processing the call keyword arguments (line 1181)
        kwargs_102981 = {}
        
        # Call to Affine2D(...): (line 1181)
        # Processing the call keyword arguments (line 1181)
        kwargs_102976 = {}
        # Getting the type of 'transforms' (line 1181)
        transforms_102974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 17), 'transforms', False)
        # Obtaining the member 'Affine2D' of a type (line 1181)
        Affine2D_102975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1181, 17), transforms_102974, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 1181)
        Affine2D_call_result_102977 = invoke(stypy.reporting.localization.Localization(__file__, 1181, 17), Affine2D_102975, *[], **kwargs_102976)
        
        # Obtaining the member 'scale' of a type (line 1181)
        scale_102978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1181, 17), Affine2D_call_result_102977, 'scale')
        # Calling scale(args, kwargs) (line 1181)
        scale_call_result_102982 = invoke(stypy.reporting.localization.Localization(__file__, 1181, 17), scale_102978, *[L_102979, width_102980], **kwargs_102981)
        
        # Assigning a type to the variable 'trans1' (line 1181)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1181, 8), 'trans1', scale_call_result_102982)
        
        # Assigning a Call to a Name (line 1182):
        
        # Assigning a Call to a Name (line 1182):
        
        # Assigning a Call to a Name (line 1182):
        
        # Call to from_values(...): (line 1182)
        # Processing the call arguments (line 1182)
        # Getting the type of 'cx' (line 1182)
        cx_102986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 49), 'cx', False)
        # Getting the type of 'sx' (line 1182)
        sx_102987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 53), 'sx', False)
        
        # Getting the type of 'sx' (line 1182)
        sx_102988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 58), 'sx', False)
        # Applying the 'usub' unary operator (line 1182)
        result___neg___102989 = python_operator(stypy.reporting.localization.Localization(__file__, 1182, 57), 'usub', sx_102988)
        
        # Getting the type of 'cx' (line 1182)
        cx_102990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 62), 'cx', False)
        float_102991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1182, 66), 'float')
        float_102992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1182, 71), 'float')
        # Processing the call keyword arguments (line 1182)
        kwargs_102993 = {}
        # Getting the type of 'transforms' (line 1182)
        transforms_102983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 17), 'transforms', False)
        # Obtaining the member 'Affine2D' of a type (line 1182)
        Affine2D_102984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1182, 17), transforms_102983, 'Affine2D')
        # Obtaining the member 'from_values' of a type (line 1182)
        from_values_102985 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1182, 17), Affine2D_102984, 'from_values')
        # Calling from_values(args, kwargs) (line 1182)
        from_values_call_result_102994 = invoke(stypy.reporting.localization.Localization(__file__, 1182, 17), from_values_102985, *[cx_102986, sx_102987, result___neg___102989, cx_102990, float_102991, float_102992], **kwargs_102993)
        
        # Assigning a type to the variable 'trans2' (line 1182)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1182, 8), 'trans2', from_values_call_result_102994)
        
        # Assigning a Call to a Name (line 1183):
        
        # Assigning a Call to a Name (line 1183):
        
        # Assigning a Call to a Name (line 1183):
        
        # Call to translate(...): (line 1183)
        # Processing the call arguments (line 1183)
        # Getting the type of 'x' (line 1183)
        x_103000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 49), 'x', False)
        # Getting the type of 'y' (line 1183)
        y_103001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 52), 'y', False)
        # Processing the call keyword arguments (line 1183)
        kwargs_103002 = {}
        
        # Call to Affine2D(...): (line 1183)
        # Processing the call keyword arguments (line 1183)
        kwargs_102997 = {}
        # Getting the type of 'transforms' (line 1183)
        transforms_102995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 17), 'transforms', False)
        # Obtaining the member 'Affine2D' of a type (line 1183)
        Affine2D_102996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1183, 17), transforms_102995, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 1183)
        Affine2D_call_result_102998 = invoke(stypy.reporting.localization.Localization(__file__, 1183, 17), Affine2D_102996, *[], **kwargs_102997)
        
        # Obtaining the member 'translate' of a type (line 1183)
        translate_102999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1183, 17), Affine2D_call_result_102998, 'translate')
        # Calling translate(args, kwargs) (line 1183)
        translate_call_result_103003 = invoke(stypy.reporting.localization.Localization(__file__, 1183, 17), translate_102999, *[x_103000, y_103001], **kwargs_103002)
        
        # Assigning a type to the variable 'trans3' (line 1183)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1183, 8), 'trans3', translate_call_result_103003)
        
        # Assigning a BinOp to a Name (line 1184):
        
        # Assigning a BinOp to a Name (line 1184):
        
        # Assigning a BinOp to a Name (line 1184):
        # Getting the type of 'trans1' (line 1184)
        trans1_103004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 16), 'trans1')
        # Getting the type of 'trans2' (line 1184)
        trans2_103005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 25), 'trans2')
        # Applying the binary operator '+' (line 1184)
        result_add_103006 = python_operator(stypy.reporting.localization.Localization(__file__, 1184, 16), '+', trans1_103004, trans2_103005)
        
        # Getting the type of 'trans3' (line 1184)
        trans3_103007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 34), 'trans3')
        # Applying the binary operator '+' (line 1184)
        result_add_103008 = python_operator(stypy.reporting.localization.Localization(__file__, 1184, 32), '+', result_add_103006, trans3_103007)
        
        # Assigning a type to the variable 'trans' (line 1184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1184, 8), 'trans', result_add_103008)
        
        # Assigning a Call to a Attribute (line 1185):
        
        # Assigning a Call to a Attribute (line 1185):
        
        # Assigning a Call to a Attribute (line 1185):
        
        # Call to frozen(...): (line 1185)
        # Processing the call keyword arguments (line 1185)
        kwargs_103011 = {}
        # Getting the type of 'trans' (line 1185)
        trans_103009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1185, 32), 'trans', False)
        # Obtaining the member 'frozen' of a type (line 1185)
        frozen_103010 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1185, 32), trans_103009, 'frozen')
        # Calling frozen(args, kwargs) (line 1185)
        frozen_call_result_103012 = invoke(stypy.reporting.localization.Localization(__file__, 1185, 32), frozen_103010, *[], **kwargs_103011)
        
        # Getting the type of 'self' (line 1185)
        self_103013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1185, 8), 'self')
        # Setting the type of the member '_patch_transform' of a type (line 1185)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1185, 8), self_103013, '_patch_transform', frozen_call_result_103012)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def get_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_path'
        module_type_store = module_type_store.open_function_context('get_path', 1187, 4, False)
        # Assigning a type to the variable 'self' (line 1188)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1188, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Arrow.get_path.__dict__.__setitem__('stypy_localization', localization)
        Arrow.get_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Arrow.get_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        Arrow.get_path.__dict__.__setitem__('stypy_function_name', 'Arrow.get_path')
        Arrow.get_path.__dict__.__setitem__('stypy_param_names_list', [])
        Arrow.get_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        Arrow.get_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Arrow.get_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        Arrow.get_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        Arrow.get_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Arrow.get_path.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Arrow.get_path', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_path', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_path(...)' code ##################

        # Getting the type of 'self' (line 1188)
        self_103014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 15), 'self')
        # Obtaining the member '_path' of a type (line 1188)
        _path_103015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1188, 15), self_103014, '_path')
        # Assigning a type to the variable 'stypy_return_type' (line 1188)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1188, 8), 'stypy_return_type', _path_103015)
        
        # ################# End of 'get_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_path' in the type store
        # Getting the type of 'stypy_return_type' (line 1187)
        stypy_return_type_103016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_103016)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_path'
        return stypy_return_type_103016


    @norecursion
    def get_patch_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_patch_transform'
        module_type_store = module_type_store.open_function_context('get_patch_transform', 1190, 4, False)
        # Assigning a type to the variable 'self' (line 1191)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1191, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Arrow.get_patch_transform.__dict__.__setitem__('stypy_localization', localization)
        Arrow.get_patch_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Arrow.get_patch_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        Arrow.get_patch_transform.__dict__.__setitem__('stypy_function_name', 'Arrow.get_patch_transform')
        Arrow.get_patch_transform.__dict__.__setitem__('stypy_param_names_list', [])
        Arrow.get_patch_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        Arrow.get_patch_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Arrow.get_patch_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        Arrow.get_patch_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        Arrow.get_patch_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Arrow.get_patch_transform.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Arrow.get_patch_transform', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_patch_transform', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_patch_transform(...)' code ##################

        # Getting the type of 'self' (line 1191)
        self_103017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 15), 'self')
        # Obtaining the member '_patch_transform' of a type (line 1191)
        _patch_transform_103018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1191, 15), self_103017, '_patch_transform')
        # Assigning a type to the variable 'stypy_return_type' (line 1191)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1191, 8), 'stypy_return_type', _patch_transform_103018)
        
        # ################# End of 'get_patch_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_patch_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 1190)
        stypy_return_type_103019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_103019)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_patch_transform'
        return stypy_return_type_103019


# Assigning a type to the variable 'Arrow' (line 1127)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1127, 0), 'Arrow', Arrow)

# Assigning a Call to a Name (line 1134):

# Call to Path(...): (line 1134)
# Processing the call arguments (line 1134)

# Obtaining an instance of the builtin type 'list' (line 1134)
list_103021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1134, 17), 'list')
# Adding type elements to the builtin type 'list' instance (line 1134)
# Adding element type (line 1134)

# Obtaining an instance of the builtin type 'list' (line 1134)
list_103022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1134, 18), 'list')
# Adding type elements to the builtin type 'list' instance (line 1134)
# Adding element type (line 1134)
float_103023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1134, 19), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1134, 18), list_103022, float_103023)
# Adding element type (line 1134)
float_103024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1134, 24), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1134, 18), list_103022, float_103024)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1134, 17), list_103021, list_103022)
# Adding element type (line 1134)

# Obtaining an instance of the builtin type 'list' (line 1134)
list_103025 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1134, 30), 'list')
# Adding type elements to the builtin type 'list' instance (line 1134)
# Adding element type (line 1134)
float_103026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1134, 31), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1134, 30), list_103025, float_103026)
# Adding element type (line 1134)
float_103027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1134, 36), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1134, 30), list_103025, float_103027)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1134, 17), list_103021, list_103025)
# Adding element type (line 1134)

# Obtaining an instance of the builtin type 'list' (line 1135)
list_103028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1135, 18), 'list')
# Adding type elements to the builtin type 'list' instance (line 1135)
# Adding element type (line 1135)
float_103029 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1135, 19), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1135, 18), list_103028, float_103029)
# Adding element type (line 1135)
float_103030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1135, 24), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1135, 18), list_103028, float_103030)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1134, 17), list_103021, list_103028)
# Adding element type (line 1134)

# Obtaining an instance of the builtin type 'list' (line 1135)
list_103031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1135, 31), 'list')
# Adding type elements to the builtin type 'list' instance (line 1135)
# Adding element type (line 1135)
float_103032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1135, 32), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1135, 31), list_103031, float_103032)
# Adding element type (line 1135)
float_103033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1135, 37), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1135, 31), list_103031, float_103033)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1134, 17), list_103021, list_103031)
# Adding element type (line 1134)

# Obtaining an instance of the builtin type 'list' (line 1136)
list_103034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1136, 18), 'list')
# Adding type elements to the builtin type 'list' instance (line 1136)
# Adding element type (line 1136)
float_103035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1136, 19), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1136, 18), list_103034, float_103035)
# Adding element type (line 1136)
float_103036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1136, 24), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1136, 18), list_103034, float_103036)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1134, 17), list_103021, list_103034)
# Adding element type (line 1134)

# Obtaining an instance of the builtin type 'list' (line 1136)
list_103037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1136, 30), 'list')
# Adding type elements to the builtin type 'list' instance (line 1136)
# Adding element type (line 1136)
float_103038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1136, 31), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1136, 30), list_103037, float_103038)
# Adding element type (line 1136)
float_103039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1136, 36), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1136, 30), list_103037, float_103039)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1134, 17), list_103021, list_103037)
# Adding element type (line 1134)

# Obtaining an instance of the builtin type 'list' (line 1137)
list_103040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1137, 18), 'list')
# Adding type elements to the builtin type 'list' instance (line 1137)
# Adding element type (line 1137)
float_103041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1137, 19), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1137, 18), list_103040, float_103041)
# Adding element type (line 1137)
float_103042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1137, 24), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1137, 18), list_103040, float_103042)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1134, 17), list_103021, list_103040)
# Adding element type (line 1134)

# Obtaining an instance of the builtin type 'list' (line 1137)
list_103043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1137, 30), 'list')
# Adding type elements to the builtin type 'list' instance (line 1137)
# Adding element type (line 1137)
float_103044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1137, 31), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1137, 30), list_103043, float_103044)
# Adding element type (line 1137)
float_103045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1137, 36), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1137, 30), list_103043, float_103045)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1134, 17), list_103021, list_103043)

# Processing the call keyword arguments (line 1134)
# Getting the type of 'True' (line 1138)
True_103046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 24), 'True', False)
keyword_103047 = True_103046
kwargs_103048 = {'closed': keyword_103047}
# Getting the type of 'Path' (line 1134)
Path_103020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 12), 'Path', False)
# Calling Path(args, kwargs) (line 1134)
Path_call_result_103049 = invoke(stypy.reporting.localization.Localization(__file__, 1134, 12), Path_103020, *[list_103021], **kwargs_103048)

# Getting the type of 'Arrow'
Arrow_103050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Arrow')
# Setting the type of the member '_path' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Arrow_103050, '_path', Path_call_result_103049)
# Declaration of the 'FancyArrow' class
# Getting the type of 'Polygon' (line 1194)
Polygon_103051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1194, 17), 'Polygon')

class FancyArrow(Polygon_103051, ):
    unicode_103052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1197, (-1)), 'unicode', u'\n    Like Arrow, but lets you set head width and head height independently.\n    ')
    
    # Assigning a Name to a Name (line 1199):
    
    # Assigning a Name to a Name (line 1199):

    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 1201, 4, False)
        # Assigning a type to the variable 'self' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyArrow.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        FancyArrow.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyArrow.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyArrow.stypy__str__.__dict__.__setitem__('stypy_function_name', 'FancyArrow.stypy__str__')
        FancyArrow.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        FancyArrow.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyArrow.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyArrow.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyArrow.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyArrow.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyArrow.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyArrow.stypy__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        unicode_103053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1202, 15), 'unicode', u'FancyArrow()')
        # Assigning a type to the variable 'stypy_return_type' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'stypy_return_type', unicode_103053)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 1201)
        stypy_return_type_103054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_103054)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_103054


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        float_103055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1205, 43), 'float')
        # Getting the type of 'False' (line 1205)
        False_103056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 71), 'False')
        # Getting the type of 'None' (line 1206)
        None_103057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 28), 'None')
        # Getting the type of 'None' (line 1206)
        None_103058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 46), 'None')
        unicode_103059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1206, 58), 'unicode', u'full')
        int_103060 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1206, 75), 'int')
        # Getting the type of 'False' (line 1207)
        False_103061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 37), 'False')
        defaults = [float_103055, False_103056, None_103057, None_103058, unicode_103059, int_103060, False_103061]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1204, 4, False)
        # Assigning a type to the variable 'self' (line 1205)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1205, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyArrow.__init__', ['x', 'y', 'dx', 'dy', 'width', 'length_includes_head', 'head_width', 'head_length', 'shape', 'overhang', 'head_starts_at_zero'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['x', 'y', 'dx', 'dy', 'width', 'length_includes_head', 'head_width', 'head_length', 'shape', 'overhang', 'head_starts_at_zero'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_103062 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1236, (-1)), 'unicode', u"\n        Constructor arguments\n          *width*: float (default: 0.001)\n            width of full arrow tail\n\n          *length_includes_head*: [True | False] (default: False)\n            True if head is to be counted in calculating the length.\n\n          *head_width*: float or None (default: 3*width)\n            total width of the full arrow head\n\n          *head_length*: float or None (default: 1.5 * head_width)\n            length of arrow head\n\n          *shape*: ['full', 'left', 'right'] (default: 'full')\n            draw the left-half, right-half, or full arrow\n\n          *overhang*: float (default: 0)\n            fraction that the arrow is swept back (0 overhang means\n            triangular shape). Can be negative or greater than one.\n\n          *head_starts_at_zero*: [True | False] (default: False)\n            if True, the head starts being drawn at coordinate 0\n            instead of ending at coordinate 0.\n\n        Other valid kwargs (inherited from :class:`Patch`) are:\n        %(Patch)s\n\n        ")
        
        # Type idiom detected: calculating its left and rigth part (line 1237)
        # Getting the type of 'head_width' (line 1237)
        head_width_103063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 11), 'head_width')
        # Getting the type of 'None' (line 1237)
        None_103064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 25), 'None')
        
        (may_be_103065, more_types_in_union_103066) = may_be_none(head_width_103063, None_103064)

        if may_be_103065:

            if more_types_in_union_103066:
                # Runtime conditional SSA (line 1237)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a BinOp to a Name (line 1238):
            
            # Assigning a BinOp to a Name (line 1238):
            
            # Assigning a BinOp to a Name (line 1238):
            int_103067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1238, 25), 'int')
            # Getting the type of 'width' (line 1238)
            width_103068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 29), 'width')
            # Applying the binary operator '*' (line 1238)
            result_mul_103069 = python_operator(stypy.reporting.localization.Localization(__file__, 1238, 25), '*', int_103067, width_103068)
            
            # Assigning a type to the variable 'head_width' (line 1238)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1238, 12), 'head_width', result_mul_103069)

            if more_types_in_union_103066:
                # SSA join for if statement (line 1237)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1239)
        # Getting the type of 'head_length' (line 1239)
        head_length_103070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 11), 'head_length')
        # Getting the type of 'None' (line 1239)
        None_103071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 26), 'None')
        
        (may_be_103072, more_types_in_union_103073) = may_be_none(head_length_103070, None_103071)

        if may_be_103072:

            if more_types_in_union_103073:
                # Runtime conditional SSA (line 1239)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a BinOp to a Name (line 1240):
            
            # Assigning a BinOp to a Name (line 1240):
            
            # Assigning a BinOp to a Name (line 1240):
            float_103074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1240, 26), 'float')
            # Getting the type of 'head_width' (line 1240)
            head_width_103075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 32), 'head_width')
            # Applying the binary operator '*' (line 1240)
            result_mul_103076 = python_operator(stypy.reporting.localization.Localization(__file__, 1240, 26), '*', float_103074, head_width_103075)
            
            # Assigning a type to the variable 'head_length' (line 1240)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1240, 12), 'head_length', result_mul_103076)

            if more_types_in_union_103073:
                # SSA join for if statement (line 1239)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 1242):
        
        # Assigning a Call to a Name (line 1242):
        
        # Assigning a Call to a Name (line 1242):
        
        # Call to hypot(...): (line 1242)
        # Processing the call arguments (line 1242)
        # Getting the type of 'dx' (line 1242)
        dx_103079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 28), 'dx', False)
        # Getting the type of 'dy' (line 1242)
        dy_103080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 32), 'dy', False)
        # Processing the call keyword arguments (line 1242)
        kwargs_103081 = {}
        # Getting the type of 'np' (line 1242)
        np_103077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 19), 'np', False)
        # Obtaining the member 'hypot' of a type (line 1242)
        hypot_103078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1242, 19), np_103077, 'hypot')
        # Calling hypot(args, kwargs) (line 1242)
        hypot_call_result_103082 = invoke(stypy.reporting.localization.Localization(__file__, 1242, 19), hypot_103078, *[dx_103079, dy_103080], **kwargs_103081)
        
        # Assigning a type to the variable 'distance' (line 1242)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1242, 8), 'distance', hypot_call_result_103082)
        
        # Getting the type of 'length_includes_head' (line 1244)
        length_includes_head_103083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 11), 'length_includes_head')
        # Testing the type of an if condition (line 1244)
        if_condition_103084 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1244, 8), length_includes_head_103083)
        # Assigning a type to the variable 'if_condition_103084' (line 1244)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1244, 8), 'if_condition_103084', if_condition_103084)
        # SSA begins for if statement (line 1244)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1245):
        
        # Assigning a Name to a Name (line 1245):
        
        # Assigning a Name to a Name (line 1245):
        # Getting the type of 'distance' (line 1245)
        distance_103085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1245, 21), 'distance')
        # Assigning a type to the variable 'length' (line 1245)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1245, 12), 'length', distance_103085)
        # SSA branch for the else part of an if statement (line 1244)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 1247):
        
        # Assigning a BinOp to a Name (line 1247):
        
        # Assigning a BinOp to a Name (line 1247):
        # Getting the type of 'distance' (line 1247)
        distance_103086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 21), 'distance')
        # Getting the type of 'head_length' (line 1247)
        head_length_103087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 32), 'head_length')
        # Applying the binary operator '+' (line 1247)
        result_add_103088 = python_operator(stypy.reporting.localization.Localization(__file__, 1247, 21), '+', distance_103086, head_length_103087)
        
        # Assigning a type to the variable 'length' (line 1247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1247, 12), 'length', result_add_103088)
        # SSA join for if statement (line 1244)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'length' (line 1248)
        length_103089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 15), 'length')
        # Applying the 'not' unary operator (line 1248)
        result_not__103090 = python_operator(stypy.reporting.localization.Localization(__file__, 1248, 11), 'not', length_103089)
        
        # Testing the type of an if condition (line 1248)
        if_condition_103091 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1248, 8), result_not__103090)
        # Assigning a type to the variable 'if_condition_103091' (line 1248)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1248, 8), 'if_condition_103091', if_condition_103091)
        # SSA begins for if statement (line 1248)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a List to a Name (line 1249):
        
        # Assigning a List to a Name (line 1249):
        
        # Assigning a List to a Name (line 1249):
        
        # Obtaining an instance of the builtin type 'list' (line 1249)
        list_103092 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1249, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1249)
        
        # Assigning a type to the variable 'verts' (line 1249)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1249, 12), 'verts', list_103092)
        # SSA branch for the else part of an if statement (line 1248)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Tuple to a Tuple (line 1252):
        
        # Assigning a Name to a Name (line 1252):
        
        # Assigning a Name to a Name (line 1252):
        # Getting the type of 'head_width' (line 1252)
        head_width_103093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 29), 'head_width')
        # Assigning a type to the variable 'tuple_assignment_100377' (line 1252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1252, 12), 'tuple_assignment_100377', head_width_103093)
        
        # Assigning a Name to a Name (line 1252):
        
        # Assigning a Name to a Name (line 1252):
        # Getting the type of 'head_length' (line 1252)
        head_length_103094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 41), 'head_length')
        # Assigning a type to the variable 'tuple_assignment_100378' (line 1252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1252, 12), 'tuple_assignment_100378', head_length_103094)
        
        # Assigning a Name to a Name (line 1252):
        
        # Assigning a Name to a Name (line 1252):
        # Getting the type of 'overhang' (line 1252)
        overhang_103095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 54), 'overhang')
        # Assigning a type to the variable 'tuple_assignment_100379' (line 1252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1252, 12), 'tuple_assignment_100379', overhang_103095)
        
        # Assigning a Name to a Name (line 1252):
        
        # Assigning a Name to a Name (line 1252):
        # Getting the type of 'width' (line 1252)
        width_103096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 64), 'width')
        # Assigning a type to the variable 'tuple_assignment_100380' (line 1252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1252, 12), 'tuple_assignment_100380', width_103096)
        
        # Assigning a Name to a Name (line 1252):
        
        # Assigning a Name to a Name (line 1252):
        # Getting the type of 'tuple_assignment_100377' (line 1252)
        tuple_assignment_100377_103097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 12), 'tuple_assignment_100377')
        # Assigning a type to the variable 'hw' (line 1252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1252, 12), 'hw', tuple_assignment_100377_103097)
        
        # Assigning a Name to a Name (line 1252):
        
        # Assigning a Name to a Name (line 1252):
        # Getting the type of 'tuple_assignment_100378' (line 1252)
        tuple_assignment_100378_103098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 12), 'tuple_assignment_100378')
        # Assigning a type to the variable 'hl' (line 1252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1252, 16), 'hl', tuple_assignment_100378_103098)
        
        # Assigning a Name to a Name (line 1252):
        
        # Assigning a Name to a Name (line 1252):
        # Getting the type of 'tuple_assignment_100379' (line 1252)
        tuple_assignment_100379_103099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 12), 'tuple_assignment_100379')
        # Assigning a type to the variable 'hs' (line 1252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1252, 20), 'hs', tuple_assignment_100379_103099)
        
        # Assigning a Name to a Name (line 1252):
        
        # Assigning a Name to a Name (line 1252):
        # Getting the type of 'tuple_assignment_100380' (line 1252)
        tuple_assignment_100380_103100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 12), 'tuple_assignment_100380')
        # Assigning a type to the variable 'lw' (line 1252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1252, 24), 'lw', tuple_assignment_100380_103100)
        
        # Assigning a Call to a Name (line 1253):
        
        # Assigning a Call to a Name (line 1253):
        
        # Assigning a Call to a Name (line 1253):
        
        # Call to array(...): (line 1253)
        # Processing the call arguments (line 1253)
        
        # Obtaining an instance of the builtin type 'list' (line 1253)
        list_103103 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1253, 39), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1253)
        # Adding element type (line 1253)
        
        # Obtaining an instance of the builtin type 'list' (line 1254)
        list_103104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1254, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1254)
        # Adding element type (line 1254)
        float_103105 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1254, 17), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1254, 16), list_103104, float_103105)
        # Adding element type (line 1254)
        float_103106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1254, 22), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1254, 16), list_103104, float_103106)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1253, 39), list_103103, list_103104)
        # Adding element type (line 1253)
        
        # Obtaining an instance of the builtin type 'list' (line 1255)
        list_103107 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1255, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1255)
        # Adding element type (line 1255)
        
        # Getting the type of 'hl' (line 1255)
        hl_103108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 18), 'hl', False)
        # Applying the 'usub' unary operator (line 1255)
        result___neg___103109 = python_operator(stypy.reporting.localization.Localization(__file__, 1255, 17), 'usub', hl_103108)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1255, 16), list_103107, result___neg___103109)
        # Adding element type (line 1255)
        
        # Getting the type of 'hw' (line 1255)
        hw_103110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 23), 'hw', False)
        # Applying the 'usub' unary operator (line 1255)
        result___neg___103111 = python_operator(stypy.reporting.localization.Localization(__file__, 1255, 22), 'usub', hw_103110)
        
        float_103112 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1255, 28), 'float')
        # Applying the binary operator 'div' (line 1255)
        result_div_103113 = python_operator(stypy.reporting.localization.Localization(__file__, 1255, 22), 'div', result___neg___103111, float_103112)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1255, 16), list_103107, result_div_103113)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1253, 39), list_103103, list_103107)
        # Adding element type (line 1253)
        
        # Obtaining an instance of the builtin type 'list' (line 1256)
        list_103114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1256, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1256)
        # Adding element type (line 1256)
        
        # Getting the type of 'hl' (line 1256)
        hl_103115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 18), 'hl', False)
        # Applying the 'usub' unary operator (line 1256)
        result___neg___103116 = python_operator(stypy.reporting.localization.Localization(__file__, 1256, 17), 'usub', hl_103115)
        
        int_103117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1256, 24), 'int')
        # Getting the type of 'hs' (line 1256)
        hs_103118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 28), 'hs', False)
        # Applying the binary operator '-' (line 1256)
        result_sub_103119 = python_operator(stypy.reporting.localization.Localization(__file__, 1256, 24), '-', int_103117, hs_103118)
        
        # Applying the binary operator '*' (line 1256)
        result_mul_103120 = python_operator(stypy.reporting.localization.Localization(__file__, 1256, 17), '*', result___neg___103116, result_sub_103119)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1256, 16), list_103114, result_mul_103120)
        # Adding element type (line 1256)
        
        # Getting the type of 'lw' (line 1256)
        lw_103121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 34), 'lw', False)
        # Applying the 'usub' unary operator (line 1256)
        result___neg___103122 = python_operator(stypy.reporting.localization.Localization(__file__, 1256, 33), 'usub', lw_103121)
        
        float_103123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1256, 39), 'float')
        # Applying the binary operator 'div' (line 1256)
        result_div_103124 = python_operator(stypy.reporting.localization.Localization(__file__, 1256, 33), 'div', result___neg___103122, float_103123)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1256, 16), list_103114, result_div_103124)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1253, 39), list_103103, list_103114)
        # Adding element type (line 1253)
        
        # Obtaining an instance of the builtin type 'list' (line 1257)
        list_103125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1257, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1257)
        # Adding element type (line 1257)
        
        # Getting the type of 'length' (line 1257)
        length_103126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 18), 'length', False)
        # Applying the 'usub' unary operator (line 1257)
        result___neg___103127 = python_operator(stypy.reporting.localization.Localization(__file__, 1257, 17), 'usub', length_103126)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1257, 16), list_103125, result___neg___103127)
        # Adding element type (line 1257)
        
        # Getting the type of 'lw' (line 1257)
        lw_103128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 27), 'lw', False)
        # Applying the 'usub' unary operator (line 1257)
        result___neg___103129 = python_operator(stypy.reporting.localization.Localization(__file__, 1257, 26), 'usub', lw_103128)
        
        float_103130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1257, 32), 'float')
        # Applying the binary operator 'div' (line 1257)
        result_div_103131 = python_operator(stypy.reporting.localization.Localization(__file__, 1257, 26), 'div', result___neg___103129, float_103130)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1257, 16), list_103125, result_div_103131)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1253, 39), list_103103, list_103125)
        # Adding element type (line 1253)
        
        # Obtaining an instance of the builtin type 'list' (line 1258)
        list_103132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1258, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1258)
        # Adding element type (line 1258)
        
        # Getting the type of 'length' (line 1258)
        length_103133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 18), 'length', False)
        # Applying the 'usub' unary operator (line 1258)
        result___neg___103134 = python_operator(stypy.reporting.localization.Localization(__file__, 1258, 17), 'usub', length_103133)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1258, 16), list_103132, result___neg___103134)
        # Adding element type (line 1258)
        int_103135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1258, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1258, 16), list_103132, int_103135)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1253, 39), list_103103, list_103132)
        
        # Processing the call keyword arguments (line 1253)
        kwargs_103136 = {}
        # Getting the type of 'np' (line 1253)
        np_103101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1253, 30), 'np', False)
        # Obtaining the member 'array' of a type (line 1253)
        array_103102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1253, 30), np_103101, 'array')
        # Calling array(args, kwargs) (line 1253)
        array_call_result_103137 = invoke(stypy.reporting.localization.Localization(__file__, 1253, 30), array_103102, *[list_103103], **kwargs_103136)
        
        # Assigning a type to the variable 'left_half_arrow' (line 1253)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1253, 12), 'left_half_arrow', array_call_result_103137)
        
        
        # Getting the type of 'length_includes_head' (line 1261)
        length_includes_head_103138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1261, 19), 'length_includes_head')
        # Applying the 'not' unary operator (line 1261)
        result_not__103139 = python_operator(stypy.reporting.localization.Localization(__file__, 1261, 15), 'not', length_includes_head_103138)
        
        # Testing the type of an if condition (line 1261)
        if_condition_103140 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1261, 12), result_not__103139)
        # Assigning a type to the variable 'if_condition_103140' (line 1261)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1261, 12), 'if_condition_103140', if_condition_103140)
        # SSA begins for if statement (line 1261)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'left_half_arrow' (line 1262)
        left_half_arrow_103141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 16), 'left_half_arrow')
        
        # Obtaining an instance of the builtin type 'list' (line 1262)
        list_103142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1262, 35), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1262)
        # Adding element type (line 1262)
        # Getting the type of 'head_length' (line 1262)
        head_length_103143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 36), 'head_length')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1262, 35), list_103142, head_length_103143)
        # Adding element type (line 1262)
        int_103144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1262, 49), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1262, 35), list_103142, int_103144)
        
        # Applying the binary operator '+=' (line 1262)
        result_iadd_103145 = python_operator(stypy.reporting.localization.Localization(__file__, 1262, 16), '+=', left_half_arrow_103141, list_103142)
        # Assigning a type to the variable 'left_half_arrow' (line 1262)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1262, 16), 'left_half_arrow', result_iadd_103145)
        
        # SSA join for if statement (line 1261)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'head_starts_at_zero' (line 1264)
        head_starts_at_zero_103146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 15), 'head_starts_at_zero')
        # Testing the type of an if condition (line 1264)
        if_condition_103147 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1264, 12), head_starts_at_zero_103146)
        # Assigning a type to the variable 'if_condition_103147' (line 1264)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1264, 12), 'if_condition_103147', if_condition_103147)
        # SSA begins for if statement (line 1264)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'left_half_arrow' (line 1265)
        left_half_arrow_103148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1265, 16), 'left_half_arrow')
        
        # Obtaining an instance of the builtin type 'list' (line 1265)
        list_103149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1265, 35), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1265)
        # Adding element type (line 1265)
        # Getting the type of 'head_length' (line 1265)
        head_length_103150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1265, 36), 'head_length')
        float_103151 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1265, 50), 'float')
        # Applying the binary operator 'div' (line 1265)
        result_div_103152 = python_operator(stypy.reporting.localization.Localization(__file__, 1265, 36), 'div', head_length_103150, float_103151)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1265, 35), list_103149, result_div_103152)
        # Adding element type (line 1265)
        int_103153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1265, 55), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1265, 35), list_103149, int_103153)
        
        # Applying the binary operator '+=' (line 1265)
        result_iadd_103154 = python_operator(stypy.reporting.localization.Localization(__file__, 1265, 16), '+=', left_half_arrow_103148, list_103149)
        # Assigning a type to the variable 'left_half_arrow' (line 1265)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1265, 16), 'left_half_arrow', result_iadd_103154)
        
        # SSA join for if statement (line 1264)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'shape' (line 1267)
        shape_103155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1267, 15), 'shape')
        unicode_103156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1267, 24), 'unicode', u'left')
        # Applying the binary operator '==' (line 1267)
        result_eq_103157 = python_operator(stypy.reporting.localization.Localization(__file__, 1267, 15), '==', shape_103155, unicode_103156)
        
        # Testing the type of an if condition (line 1267)
        if_condition_103158 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1267, 12), result_eq_103157)
        # Assigning a type to the variable 'if_condition_103158' (line 1267)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1267, 12), 'if_condition_103158', if_condition_103158)
        # SSA begins for if statement (line 1267)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1268):
        
        # Assigning a Name to a Name (line 1268):
        
        # Assigning a Name to a Name (line 1268):
        # Getting the type of 'left_half_arrow' (line 1268)
        left_half_arrow_103159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1268, 25), 'left_half_arrow')
        # Assigning a type to the variable 'coords' (line 1268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1268, 16), 'coords', left_half_arrow_103159)
        # SSA branch for the else part of an if statement (line 1267)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 1270):
        
        # Assigning a BinOp to a Name (line 1270):
        
        # Assigning a BinOp to a Name (line 1270):
        # Getting the type of 'left_half_arrow' (line 1270)
        left_half_arrow_103160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1270, 35), 'left_half_arrow')
        
        # Obtaining an instance of the builtin type 'list' (line 1270)
        list_103161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1270, 53), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1270)
        # Adding element type (line 1270)
        int_103162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1270, 54), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1270, 53), list_103161, int_103162)
        # Adding element type (line 1270)
        int_103163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1270, 57), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1270, 53), list_103161, int_103163)
        
        # Applying the binary operator '*' (line 1270)
        result_mul_103164 = python_operator(stypy.reporting.localization.Localization(__file__, 1270, 35), '*', left_half_arrow_103160, list_103161)
        
        # Assigning a type to the variable 'right_half_arrow' (line 1270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1270, 16), 'right_half_arrow', result_mul_103164)
        
        
        # Getting the type of 'shape' (line 1271)
        shape_103165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 19), 'shape')
        unicode_103166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1271, 28), 'unicode', u'right')
        # Applying the binary operator '==' (line 1271)
        result_eq_103167 = python_operator(stypy.reporting.localization.Localization(__file__, 1271, 19), '==', shape_103165, unicode_103166)
        
        # Testing the type of an if condition (line 1271)
        if_condition_103168 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1271, 16), result_eq_103167)
        # Assigning a type to the variable 'if_condition_103168' (line 1271)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1271, 16), 'if_condition_103168', if_condition_103168)
        # SSA begins for if statement (line 1271)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1272):
        
        # Assigning a Name to a Name (line 1272):
        
        # Assigning a Name to a Name (line 1272):
        # Getting the type of 'right_half_arrow' (line 1272)
        right_half_arrow_103169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 29), 'right_half_arrow')
        # Assigning a type to the variable 'coords' (line 1272)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1272, 20), 'coords', right_half_arrow_103169)
        # SSA branch for the else part of an if statement (line 1271)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'shape' (line 1273)
        shape_103170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1273, 21), 'shape')
        unicode_103171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1273, 30), 'unicode', u'full')
        # Applying the binary operator '==' (line 1273)
        result_eq_103172 = python_operator(stypy.reporting.localization.Localization(__file__, 1273, 21), '==', shape_103170, unicode_103171)
        
        # Testing the type of an if condition (line 1273)
        if_condition_103173 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1273, 21), result_eq_103172)
        # Assigning a type to the variable 'if_condition_103173' (line 1273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1273, 21), 'if_condition_103173', if_condition_103173)
        # SSA begins for if statement (line 1273)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1277):
        
        # Assigning a Call to a Name (line 1277):
        
        # Assigning a Call to a Name (line 1277):
        
        # Call to concatenate(...): (line 1277)
        # Processing the call arguments (line 1277)
        
        # Obtaining an instance of the builtin type 'list' (line 1277)
        list_103176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1277, 44), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1277)
        # Adding element type (line 1277)
        
        # Obtaining the type of the subscript
        int_103177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1277, 62), 'int')
        slice_103178 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1277, 45), None, int_103177, None)
        # Getting the type of 'left_half_arrow' (line 1277)
        left_half_arrow_103179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 45), 'left_half_arrow', False)
        # Obtaining the member '__getitem__' of a type (line 1277)
        getitem___103180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1277, 45), left_half_arrow_103179, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1277)
        subscript_call_result_103181 = invoke(stypy.reporting.localization.Localization(__file__, 1277, 45), getitem___103180, slice_103178)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1277, 44), list_103176, subscript_call_result_103181)
        # Adding element type (line 1277)
        
        # Obtaining the type of the subscript
        int_103182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1278, 62), 'int')
        int_103183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1278, 66), 'int')
        slice_103184 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1278, 45), int_103182, None, int_103183)
        # Getting the type of 'right_half_arrow' (line 1278)
        right_half_arrow_103185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1278, 45), 'right_half_arrow', False)
        # Obtaining the member '__getitem__' of a type (line 1278)
        getitem___103186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1278, 45), right_half_arrow_103185, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1278)
        subscript_call_result_103187 = invoke(stypy.reporting.localization.Localization(__file__, 1278, 45), getitem___103186, slice_103184)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1277, 44), list_103176, subscript_call_result_103187)
        
        # Processing the call keyword arguments (line 1277)
        kwargs_103188 = {}
        # Getting the type of 'np' (line 1277)
        np_103174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 29), 'np', False)
        # Obtaining the member 'concatenate' of a type (line 1277)
        concatenate_103175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1277, 29), np_103174, 'concatenate')
        # Calling concatenate(args, kwargs) (line 1277)
        concatenate_call_result_103189 = invoke(stypy.reporting.localization.Localization(__file__, 1277, 29), concatenate_103175, *[list_103176], **kwargs_103188)
        
        # Assigning a type to the variable 'coords' (line 1277)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1277, 20), 'coords', concatenate_call_result_103189)
        # SSA branch for the else part of an if statement (line 1273)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 1280)
        # Processing the call arguments (line 1280)
        unicode_103191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1280, 37), 'unicode', u'Got unknown shape: %s')
        # Getting the type of 'shape' (line 1280)
        shape_103192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 63), 'shape', False)
        # Applying the binary operator '%' (line 1280)
        result_mod_103193 = python_operator(stypy.reporting.localization.Localization(__file__, 1280, 37), '%', unicode_103191, shape_103192)
        
        # Processing the call keyword arguments (line 1280)
        kwargs_103194 = {}
        # Getting the type of 'ValueError' (line 1280)
        ValueError_103190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 26), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1280)
        ValueError_call_result_103195 = invoke(stypy.reporting.localization.Localization(__file__, 1280, 26), ValueError_103190, *[result_mod_103193], **kwargs_103194)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1280, 20), ValueError_call_result_103195, 'raise parameter', BaseException)
        # SSA join for if statement (line 1273)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1271)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1267)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'distance' (line 1281)
        distance_103196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 15), 'distance')
        int_103197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1281, 27), 'int')
        # Applying the binary operator '!=' (line 1281)
        result_ne_103198 = python_operator(stypy.reporting.localization.Localization(__file__, 1281, 15), '!=', distance_103196, int_103197)
        
        # Testing the type of an if condition (line 1281)
        if_condition_103199 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1281, 12), result_ne_103198)
        # Assigning a type to the variable 'if_condition_103199' (line 1281)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1281, 12), 'if_condition_103199', if_condition_103199)
        # SSA begins for if statement (line 1281)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1282):
        
        # Assigning a BinOp to a Name (line 1282):
        
        # Assigning a BinOp to a Name (line 1282):
        
        # Call to float(...): (line 1282)
        # Processing the call arguments (line 1282)
        # Getting the type of 'dx' (line 1282)
        dx_103201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1282, 27), 'dx', False)
        # Processing the call keyword arguments (line 1282)
        kwargs_103202 = {}
        # Getting the type of 'float' (line 1282)
        float_103200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1282, 21), 'float', False)
        # Calling float(args, kwargs) (line 1282)
        float_call_result_103203 = invoke(stypy.reporting.localization.Localization(__file__, 1282, 21), float_103200, *[dx_103201], **kwargs_103202)
        
        # Getting the type of 'distance' (line 1282)
        distance_103204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1282, 33), 'distance')
        # Applying the binary operator 'div' (line 1282)
        result_div_103205 = python_operator(stypy.reporting.localization.Localization(__file__, 1282, 21), 'div', float_call_result_103203, distance_103204)
        
        # Assigning a type to the variable 'cx' (line 1282)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1282, 16), 'cx', result_div_103205)
        
        # Assigning a BinOp to a Name (line 1283):
        
        # Assigning a BinOp to a Name (line 1283):
        
        # Assigning a BinOp to a Name (line 1283):
        
        # Call to float(...): (line 1283)
        # Processing the call arguments (line 1283)
        # Getting the type of 'dy' (line 1283)
        dy_103207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 27), 'dy', False)
        # Processing the call keyword arguments (line 1283)
        kwargs_103208 = {}
        # Getting the type of 'float' (line 1283)
        float_103206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 21), 'float', False)
        # Calling float(args, kwargs) (line 1283)
        float_call_result_103209 = invoke(stypy.reporting.localization.Localization(__file__, 1283, 21), float_103206, *[dy_103207], **kwargs_103208)
        
        # Getting the type of 'distance' (line 1283)
        distance_103210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 33), 'distance')
        # Applying the binary operator 'div' (line 1283)
        result_div_103211 = python_operator(stypy.reporting.localization.Localization(__file__, 1283, 21), 'div', float_call_result_103209, distance_103210)
        
        # Assigning a type to the variable 'sx' (line 1283)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1283, 16), 'sx', result_div_103211)
        # SSA branch for the else part of an if statement (line 1281)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Tuple to a Tuple (line 1286):
        
        # Assigning a Num to a Name (line 1286):
        
        # Assigning a Num to a Name (line 1286):
        int_103212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1286, 25), 'int')
        # Assigning a type to the variable 'tuple_assignment_100381' (line 1286)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1286, 16), 'tuple_assignment_100381', int_103212)
        
        # Assigning a Num to a Name (line 1286):
        
        # Assigning a Num to a Name (line 1286):
        int_103213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1286, 28), 'int')
        # Assigning a type to the variable 'tuple_assignment_100382' (line 1286)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1286, 16), 'tuple_assignment_100382', int_103213)
        
        # Assigning a Name to a Name (line 1286):
        
        # Assigning a Name to a Name (line 1286):
        # Getting the type of 'tuple_assignment_100381' (line 1286)
        tuple_assignment_100381_103214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 16), 'tuple_assignment_100381')
        # Assigning a type to the variable 'cx' (line 1286)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1286, 16), 'cx', tuple_assignment_100381_103214)
        
        # Assigning a Name to a Name (line 1286):
        
        # Assigning a Name to a Name (line 1286):
        # Getting the type of 'tuple_assignment_100382' (line 1286)
        tuple_assignment_100382_103215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 16), 'tuple_assignment_100382')
        # Assigning a type to the variable 'sx' (line 1286)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1286, 20), 'sx', tuple_assignment_100382_103215)
        # SSA join for if statement (line 1281)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1287):
        
        # Assigning a Call to a Name (line 1287):
        
        # Assigning a Call to a Name (line 1287):
        
        # Call to array(...): (line 1287)
        # Processing the call arguments (line 1287)
        
        # Obtaining an instance of the builtin type 'list' (line 1287)
        list_103218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1287, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1287)
        # Adding element type (line 1287)
        
        # Obtaining an instance of the builtin type 'list' (line 1287)
        list_103219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1287, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1287)
        # Adding element type (line 1287)
        # Getting the type of 'cx' (line 1287)
        cx_103220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 27), 'cx', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1287, 26), list_103219, cx_103220)
        # Adding element type (line 1287)
        # Getting the type of 'sx' (line 1287)
        sx_103221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 31), 'sx', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1287, 26), list_103219, sx_103221)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1287, 25), list_103218, list_103219)
        # Adding element type (line 1287)
        
        # Obtaining an instance of the builtin type 'list' (line 1287)
        list_103222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1287, 36), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1287)
        # Adding element type (line 1287)
        
        # Getting the type of 'sx' (line 1287)
        sx_103223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 38), 'sx', False)
        # Applying the 'usub' unary operator (line 1287)
        result___neg___103224 = python_operator(stypy.reporting.localization.Localization(__file__, 1287, 37), 'usub', sx_103223)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1287, 36), list_103222, result___neg___103224)
        # Adding element type (line 1287)
        # Getting the type of 'cx' (line 1287)
        cx_103225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 42), 'cx', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1287, 36), list_103222, cx_103225)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1287, 25), list_103218, list_103222)
        
        # Processing the call keyword arguments (line 1287)
        kwargs_103226 = {}
        # Getting the type of 'np' (line 1287)
        np_103216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 16), 'np', False)
        # Obtaining the member 'array' of a type (line 1287)
        array_103217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1287, 16), np_103216, 'array')
        # Calling array(args, kwargs) (line 1287)
        array_call_result_103227 = invoke(stypy.reporting.localization.Localization(__file__, 1287, 16), array_103217, *[list_103218], **kwargs_103226)
        
        # Assigning a type to the variable 'M' (line 1287)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1287, 12), 'M', array_call_result_103227)
        
        # Assigning a BinOp to a Name (line 1288):
        
        # Assigning a BinOp to a Name (line 1288):
        
        # Assigning a BinOp to a Name (line 1288):
        
        # Call to dot(...): (line 1288)
        # Processing the call arguments (line 1288)
        # Getting the type of 'coords' (line 1288)
        coords_103230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 27), 'coords', False)
        # Getting the type of 'M' (line 1288)
        M_103231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 35), 'M', False)
        # Processing the call keyword arguments (line 1288)
        kwargs_103232 = {}
        # Getting the type of 'np' (line 1288)
        np_103228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 20), 'np', False)
        # Obtaining the member 'dot' of a type (line 1288)
        dot_103229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1288, 20), np_103228, 'dot')
        # Calling dot(args, kwargs) (line 1288)
        dot_call_result_103233 = invoke(stypy.reporting.localization.Localization(__file__, 1288, 20), dot_103229, *[coords_103230, M_103231], **kwargs_103232)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1288)
        tuple_103234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1288, 41), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1288)
        # Adding element type (line 1288)
        # Getting the type of 'x' (line 1288)
        x_103235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 41), 'x')
        # Getting the type of 'dx' (line 1288)
        dx_103236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 45), 'dx')
        # Applying the binary operator '+' (line 1288)
        result_add_103237 = python_operator(stypy.reporting.localization.Localization(__file__, 1288, 41), '+', x_103235, dx_103236)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1288, 41), tuple_103234, result_add_103237)
        # Adding element type (line 1288)
        # Getting the type of 'y' (line 1288)
        y_103238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 49), 'y')
        # Getting the type of 'dy' (line 1288)
        dy_103239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 53), 'dy')
        # Applying the binary operator '+' (line 1288)
        result_add_103240 = python_operator(stypy.reporting.localization.Localization(__file__, 1288, 49), '+', y_103238, dy_103239)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1288, 41), tuple_103234, result_add_103240)
        
        # Applying the binary operator '+' (line 1288)
        result_add_103241 = python_operator(stypy.reporting.localization.Localization(__file__, 1288, 20), '+', dot_call_result_103233, tuple_103234)
        
        # Assigning a type to the variable 'verts' (line 1288)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1288, 12), 'verts', result_add_103241)
        # SSA join for if statement (line 1248)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __init__(...): (line 1290)
        # Processing the call arguments (line 1290)
        # Getting the type of 'self' (line 1290)
        self_103244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 25), 'self', False)
        
        # Call to list(...): (line 1290)
        # Processing the call arguments (line 1290)
        
        # Call to map(...): (line 1290)
        # Processing the call arguments (line 1290)
        # Getting the type of 'tuple' (line 1290)
        tuple_103247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 40), 'tuple', False)
        # Getting the type of 'verts' (line 1290)
        verts_103248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 47), 'verts', False)
        # Processing the call keyword arguments (line 1290)
        kwargs_103249 = {}
        # Getting the type of 'map' (line 1290)
        map_103246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 36), 'map', False)
        # Calling map(args, kwargs) (line 1290)
        map_call_result_103250 = invoke(stypy.reporting.localization.Localization(__file__, 1290, 36), map_103246, *[tuple_103247, verts_103248], **kwargs_103249)
        
        # Processing the call keyword arguments (line 1290)
        kwargs_103251 = {}
        # Getting the type of 'list' (line 1290)
        list_103245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 31), 'list', False)
        # Calling list(args, kwargs) (line 1290)
        list_call_result_103252 = invoke(stypy.reporting.localization.Localization(__file__, 1290, 31), list_103245, *[map_call_result_103250], **kwargs_103251)
        
        # Processing the call keyword arguments (line 1290)
        # Getting the type of 'True' (line 1290)
        True_103253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 63), 'True', False)
        keyword_103254 = True_103253
        # Getting the type of 'kwargs' (line 1290)
        kwargs_103255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 71), 'kwargs', False)
        kwargs_103256 = {'closed': keyword_103254, 'kwargs_103255': kwargs_103255}
        # Getting the type of 'Polygon' (line 1290)
        Polygon_103242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 8), 'Polygon', False)
        # Obtaining the member '__init__' of a type (line 1290)
        init___103243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1290, 8), Polygon_103242, '__init__')
        # Calling __init__(args, kwargs) (line 1290)
        init___call_result_103257 = invoke(stypy.reporting.localization.Localization(__file__, 1290, 8), init___103243, *[self_103244, list_call_result_103252], **kwargs_103256)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'FancyArrow' (line 1194)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1194, 0), 'FancyArrow', FancyArrow)

# Assigning a Name to a Name (line 1199):
# Getting the type of 'True' (line 1199)
True_103258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 20), 'True')
# Getting the type of 'FancyArrow'
FancyArrow_103259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'FancyArrow')
# Setting the type of the member '_edge_default' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), FancyArrow_103259, '_edge_default', True_103258)

# Call to update(...): (line 1293)
# Processing the call arguments (line 1293)

# Obtaining an instance of the builtin type 'dict' (line 1293)
dict_103263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1293, 25), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 1293)
# Adding element type (key, value) (line 1293)
unicode_103264 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1293, 26), 'unicode', u'FancyArrow')
# Getting the type of 'FancyArrow' (line 1293)
FancyArrow_103265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 40), 'FancyArrow', False)
# Obtaining the member '__init__' of a type (line 1293)
init___103266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1293, 40), FancyArrow_103265, '__init__')
# Obtaining the member '__doc__' of a type (line 1293)
doc___103267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1293, 40), init___103266, '__doc__')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1293, 25), dict_103263, (unicode_103264, doc___103267))

# Processing the call keyword arguments (line 1293)
kwargs_103268 = {}
# Getting the type of 'docstring' (line 1293)
docstring_103260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 0), 'docstring', False)
# Obtaining the member 'interpd' of a type (line 1293)
interpd_103261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1293, 0), docstring_103260, 'interpd')
# Obtaining the member 'update' of a type (line 1293)
update_103262 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1293, 0), interpd_103261, 'update')
# Calling update(args, kwargs) (line 1293)
update_call_result_103269 = invoke(stypy.reporting.localization.Localization(__file__, 1293, 0), update_103262, *[dict_103263], **kwargs_103268)

# Declaration of the 'YAArrow' class
# Getting the type of 'Patch' (line 1296)
Patch_103270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 14), 'Patch')

class YAArrow(Patch_103270, ):
    unicode_103271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1302, (-1)), 'unicode', u'\n    Yet another arrow class.\n\n    This is an arrow that is defined in display space and has a tip at\n    *x1*, *y1* and a base at *x2*, *y2*.\n    ')

    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 1303, 4, False)
        # Assigning a type to the variable 'self' (line 1304)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1304, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YAArrow.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        YAArrow.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YAArrow.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        YAArrow.stypy__str__.__dict__.__setitem__('stypy_function_name', 'YAArrow.stypy__str__')
        YAArrow.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        YAArrow.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        YAArrow.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YAArrow.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        YAArrow.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        YAArrow.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YAArrow.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YAArrow.stypy__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        unicode_103272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1304, 15), 'unicode', u'YAArrow()')
        # Assigning a type to the variable 'stypy_return_type' (line 1304)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1304, 8), 'stypy_return_type', unicode_103272)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 1303)
        stypy_return_type_103273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_103273)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_103273


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_103274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1308, 23), 'int')
        float_103275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1308, 31), 'float')
        int_103276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1308, 46), 'int')
        defaults = [int_103274, float_103275, int_103276]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1306, 4, False)
        # Assigning a type to the variable 'self' (line 1307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1307, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YAArrow.__init__', ['figure', 'xytip', 'xybase', 'width', 'frac', 'headwidth'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['figure', 'xytip', 'xybase', 'width', 'frac', 'headwidth'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_103277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1334, (-1)), 'unicode', u'\n        Constructor arguments:\n\n        *xytip*\n          (*x*, *y*) location of arrow tip\n\n        *xybase*\n          (*x*, *y*) location the arrow base mid point\n\n        *figure*\n          The :class:`~matplotlib.figure.Figure` instance\n          (fig.dpi)\n\n        *width*\n          The width of the arrow in points\n\n        *frac*\n          The fraction of the arrow length occupied by the head\n\n        *headwidth*\n          The width of the base of the arrow head in points\n\n        Valid kwargs are:\n        %(Patch)s\n\n        ')
        
        # Assigning a Name to a Attribute (line 1335):
        
        # Assigning a Name to a Attribute (line 1335):
        
        # Assigning a Name to a Attribute (line 1335):
        # Getting the type of 'xytip' (line 1335)
        xytip_103278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 21), 'xytip')
        # Getting the type of 'self' (line 1335)
        self_103279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 8), 'self')
        # Setting the type of the member 'xytip' of a type (line 1335)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1335, 8), self_103279, 'xytip', xytip_103278)
        
        # Assigning a Name to a Attribute (line 1336):
        
        # Assigning a Name to a Attribute (line 1336):
        
        # Assigning a Name to a Attribute (line 1336):
        # Getting the type of 'xybase' (line 1336)
        xybase_103280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 22), 'xybase')
        # Getting the type of 'self' (line 1336)
        self_103281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 8), 'self')
        # Setting the type of the member 'xybase' of a type (line 1336)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1336, 8), self_103281, 'xybase', xybase_103280)
        
        # Assigning a Name to a Attribute (line 1337):
        
        # Assigning a Name to a Attribute (line 1337):
        
        # Assigning a Name to a Attribute (line 1337):
        # Getting the type of 'width' (line 1337)
        width_103282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 21), 'width')
        # Getting the type of 'self' (line 1337)
        self_103283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 8), 'self')
        # Setting the type of the member 'width' of a type (line 1337)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1337, 8), self_103283, 'width', width_103282)
        
        # Assigning a Name to a Attribute (line 1338):
        
        # Assigning a Name to a Attribute (line 1338):
        
        # Assigning a Name to a Attribute (line 1338):
        # Getting the type of 'frac' (line 1338)
        frac_103284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 20), 'frac')
        # Getting the type of 'self' (line 1338)
        self_103285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 8), 'self')
        # Setting the type of the member 'frac' of a type (line 1338)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1338, 8), self_103285, 'frac', frac_103284)
        
        # Assigning a Name to a Attribute (line 1339):
        
        # Assigning a Name to a Attribute (line 1339):
        
        # Assigning a Name to a Attribute (line 1339):
        # Getting the type of 'headwidth' (line 1339)
        headwidth_103286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1339, 25), 'headwidth')
        # Getting the type of 'self' (line 1339)
        self_103287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1339, 8), 'self')
        # Setting the type of the member 'headwidth' of a type (line 1339)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1339, 8), self_103287, 'headwidth', headwidth_103286)
        
        # Call to __init__(...): (line 1340)
        # Processing the call arguments (line 1340)
        # Getting the type of 'self' (line 1340)
        self_103290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 23), 'self', False)
        # Processing the call keyword arguments (line 1340)
        # Getting the type of 'kwargs' (line 1340)
        kwargs_103291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 31), 'kwargs', False)
        kwargs_103292 = {'kwargs_103291': kwargs_103291}
        # Getting the type of 'Patch' (line 1340)
        Patch_103288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 8), 'Patch', False)
        # Obtaining the member '__init__' of a type (line 1340)
        init___103289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1340, 8), Patch_103288, '__init__')
        # Calling __init__(args, kwargs) (line 1340)
        init___call_result_103293 = invoke(stypy.reporting.localization.Localization(__file__, 1340, 8), init___103289, *[self_103290], **kwargs_103292)
        
        
        # Assigning a Name to a Attribute (line 1343):
        
        # Assigning a Name to a Attribute (line 1343):
        
        # Assigning a Name to a Attribute (line 1343):
        # Getting the type of 'figure' (line 1343)
        figure_103294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 22), 'figure')
        # Getting the type of 'self' (line 1343)
        self_103295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 8), 'self')
        # Setting the type of the member 'figure' of a type (line 1343)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1343, 8), self_103295, 'figure', figure_103294)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def get_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_path'
        module_type_store = module_type_store.open_function_context('get_path', 1345, 4, False)
        # Assigning a type to the variable 'self' (line 1346)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1346, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YAArrow.get_path.__dict__.__setitem__('stypy_localization', localization)
        YAArrow.get_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YAArrow.get_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        YAArrow.get_path.__dict__.__setitem__('stypy_function_name', 'YAArrow.get_path')
        YAArrow.get_path.__dict__.__setitem__('stypy_param_names_list', [])
        YAArrow.get_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        YAArrow.get_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YAArrow.get_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        YAArrow.get_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        YAArrow.get_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YAArrow.get_path.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YAArrow.get_path', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_path', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_path(...)' code ##################

        
        # Assigning a Attribute to a Tuple (line 1350):
        
        # Assigning a Subscript to a Name (line 1350):
        
        # Assigning a Subscript to a Name (line 1350):
        
        # Obtaining the type of the subscript
        int_103296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1350, 8), 'int')
        # Getting the type of 'self' (line 1350)
        self_103297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 17), 'self')
        # Obtaining the member 'xytip' of a type (line 1350)
        xytip_103298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1350, 17), self_103297, 'xytip')
        # Obtaining the member '__getitem__' of a type (line 1350)
        getitem___103299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1350, 8), xytip_103298, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1350)
        subscript_call_result_103300 = invoke(stypy.reporting.localization.Localization(__file__, 1350, 8), getitem___103299, int_103296)
        
        # Assigning a type to the variable 'tuple_var_assignment_100383' (line 1350)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1350, 8), 'tuple_var_assignment_100383', subscript_call_result_103300)
        
        # Assigning a Subscript to a Name (line 1350):
        
        # Assigning a Subscript to a Name (line 1350):
        
        # Obtaining the type of the subscript
        int_103301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1350, 8), 'int')
        # Getting the type of 'self' (line 1350)
        self_103302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 17), 'self')
        # Obtaining the member 'xytip' of a type (line 1350)
        xytip_103303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1350, 17), self_103302, 'xytip')
        # Obtaining the member '__getitem__' of a type (line 1350)
        getitem___103304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1350, 8), xytip_103303, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1350)
        subscript_call_result_103305 = invoke(stypy.reporting.localization.Localization(__file__, 1350, 8), getitem___103304, int_103301)
        
        # Assigning a type to the variable 'tuple_var_assignment_100384' (line 1350)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1350, 8), 'tuple_var_assignment_100384', subscript_call_result_103305)
        
        # Assigning a Name to a Name (line 1350):
        
        # Assigning a Name to a Name (line 1350):
        # Getting the type of 'tuple_var_assignment_100383' (line 1350)
        tuple_var_assignment_100383_103306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 8), 'tuple_var_assignment_100383')
        # Assigning a type to the variable 'x1' (line 1350)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1350, 8), 'x1', tuple_var_assignment_100383_103306)
        
        # Assigning a Name to a Name (line 1350):
        
        # Assigning a Name to a Name (line 1350):
        # Getting the type of 'tuple_var_assignment_100384' (line 1350)
        tuple_var_assignment_100384_103307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 8), 'tuple_var_assignment_100384')
        # Assigning a type to the variable 'y1' (line 1350)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1350, 12), 'y1', tuple_var_assignment_100384_103307)
        
        # Assigning a Attribute to a Tuple (line 1351):
        
        # Assigning a Subscript to a Name (line 1351):
        
        # Assigning a Subscript to a Name (line 1351):
        
        # Obtaining the type of the subscript
        int_103308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1351, 8), 'int')
        # Getting the type of 'self' (line 1351)
        self_103309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 17), 'self')
        # Obtaining the member 'xybase' of a type (line 1351)
        xybase_103310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1351, 17), self_103309, 'xybase')
        # Obtaining the member '__getitem__' of a type (line 1351)
        getitem___103311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1351, 8), xybase_103310, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1351)
        subscript_call_result_103312 = invoke(stypy.reporting.localization.Localization(__file__, 1351, 8), getitem___103311, int_103308)
        
        # Assigning a type to the variable 'tuple_var_assignment_100385' (line 1351)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1351, 8), 'tuple_var_assignment_100385', subscript_call_result_103312)
        
        # Assigning a Subscript to a Name (line 1351):
        
        # Assigning a Subscript to a Name (line 1351):
        
        # Obtaining the type of the subscript
        int_103313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1351, 8), 'int')
        # Getting the type of 'self' (line 1351)
        self_103314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 17), 'self')
        # Obtaining the member 'xybase' of a type (line 1351)
        xybase_103315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1351, 17), self_103314, 'xybase')
        # Obtaining the member '__getitem__' of a type (line 1351)
        getitem___103316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1351, 8), xybase_103315, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1351)
        subscript_call_result_103317 = invoke(stypy.reporting.localization.Localization(__file__, 1351, 8), getitem___103316, int_103313)
        
        # Assigning a type to the variable 'tuple_var_assignment_100386' (line 1351)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1351, 8), 'tuple_var_assignment_100386', subscript_call_result_103317)
        
        # Assigning a Name to a Name (line 1351):
        
        # Assigning a Name to a Name (line 1351):
        # Getting the type of 'tuple_var_assignment_100385' (line 1351)
        tuple_var_assignment_100385_103318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 8), 'tuple_var_assignment_100385')
        # Assigning a type to the variable 'x2' (line 1351)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1351, 8), 'x2', tuple_var_assignment_100385_103318)
        
        # Assigning a Name to a Name (line 1351):
        
        # Assigning a Name to a Name (line 1351):
        # Getting the type of 'tuple_var_assignment_100386' (line 1351)
        tuple_var_assignment_100386_103319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 8), 'tuple_var_assignment_100386')
        # Assigning a type to the variable 'y2' (line 1351)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1351, 12), 'y2', tuple_var_assignment_100386_103319)
        
        # Assigning a BinOp to a Name (line 1352):
        
        # Assigning a BinOp to a Name (line 1352):
        
        # Assigning a BinOp to a Name (line 1352):
        # Getting the type of 'self' (line 1352)
        self_103320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 13), 'self')
        # Obtaining the member 'width' of a type (line 1352)
        width_103321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1352, 13), self_103320, 'width')
        # Getting the type of 'self' (line 1352)
        self_103322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 26), 'self')
        # Obtaining the member 'figure' of a type (line 1352)
        figure_103323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1352, 26), self_103322, 'figure')
        # Obtaining the member 'dpi' of a type (line 1352)
        dpi_103324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1352, 26), figure_103323, 'dpi')
        # Applying the binary operator '*' (line 1352)
        result_mul_103325 = python_operator(stypy.reporting.localization.Localization(__file__, 1352, 13), '*', width_103321, dpi_103324)
        
        float_103326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1352, 44), 'float')
        # Applying the binary operator 'div' (line 1352)
        result_div_103327 = python_operator(stypy.reporting.localization.Localization(__file__, 1352, 42), 'div', result_mul_103325, float_103326)
        
        float_103328 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1352, 50), 'float')
        # Applying the binary operator 'div' (line 1352)
        result_div_103329 = python_operator(stypy.reporting.localization.Localization(__file__, 1352, 48), 'div', result_div_103327, float_103328)
        
        # Assigning a type to the variable 'k1' (line 1352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1352, 8), 'k1', result_div_103329)
        
        # Assigning a BinOp to a Name (line 1353):
        
        # Assigning a BinOp to a Name (line 1353):
        
        # Assigning a BinOp to a Name (line 1353):
        # Getting the type of 'self' (line 1353)
        self_103330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1353, 13), 'self')
        # Obtaining the member 'headwidth' of a type (line 1353)
        headwidth_103331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1353, 13), self_103330, 'headwidth')
        # Getting the type of 'self' (line 1353)
        self_103332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1353, 30), 'self')
        # Obtaining the member 'figure' of a type (line 1353)
        figure_103333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1353, 30), self_103332, 'figure')
        # Obtaining the member 'dpi' of a type (line 1353)
        dpi_103334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1353, 30), figure_103333, 'dpi')
        # Applying the binary operator '*' (line 1353)
        result_mul_103335 = python_operator(stypy.reporting.localization.Localization(__file__, 1353, 13), '*', headwidth_103331, dpi_103334)
        
        float_103336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1353, 48), 'float')
        # Applying the binary operator 'div' (line 1353)
        result_div_103337 = python_operator(stypy.reporting.localization.Localization(__file__, 1353, 46), 'div', result_mul_103335, float_103336)
        
        float_103338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1353, 54), 'float')
        # Applying the binary operator 'div' (line 1353)
        result_div_103339 = python_operator(stypy.reporting.localization.Localization(__file__, 1353, 52), 'div', result_div_103337, float_103338)
        
        # Assigning a type to the variable 'k2' (line 1353)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1353, 8), 'k2', result_div_103339)
        
        # Assigning a Call to a Tuple (line 1354):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to getpoints(...): (line 1354)
        # Processing the call arguments (line 1354)
        # Getting the type of 'x1' (line 1354)
        x1_103342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 44), 'x1', False)
        # Getting the type of 'y1' (line 1354)
        y1_103343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 48), 'y1', False)
        # Getting the type of 'x2' (line 1354)
        x2_103344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 52), 'x2', False)
        # Getting the type of 'y2' (line 1354)
        y2_103345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 56), 'y2', False)
        # Getting the type of 'k1' (line 1354)
        k1_103346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 60), 'k1', False)
        # Processing the call keyword arguments (line 1354)
        kwargs_103347 = {}
        # Getting the type of 'self' (line 1354)
        self_103340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 29), 'self', False)
        # Obtaining the member 'getpoints' of a type (line 1354)
        getpoints_103341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1354, 29), self_103340, 'getpoints')
        # Calling getpoints(args, kwargs) (line 1354)
        getpoints_call_result_103348 = invoke(stypy.reporting.localization.Localization(__file__, 1354, 29), getpoints_103341, *[x1_103342, y1_103343, x2_103344, y2_103345, k1_103346], **kwargs_103347)
        
        # Assigning a type to the variable 'call_assignment_100387' (line 1354)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1354, 8), 'call_assignment_100387', getpoints_call_result_103348)
        
        # Assigning a Call to a Name (line 1354):
        
        # Assigning a Call to a Name (line 1354):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_103351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1354, 8), 'int')
        # Processing the call keyword arguments
        kwargs_103352 = {}
        # Getting the type of 'call_assignment_100387' (line 1354)
        call_assignment_100387_103349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 8), 'call_assignment_100387', False)
        # Obtaining the member '__getitem__' of a type (line 1354)
        getitem___103350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1354, 8), call_assignment_100387_103349, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_103353 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___103350, *[int_103351], **kwargs_103352)
        
        # Assigning a type to the variable 'call_assignment_100388' (line 1354)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1354, 8), 'call_assignment_100388', getitem___call_result_103353)
        
        # Assigning a Name to a Name (line 1354):
        
        # Assigning a Name to a Name (line 1354):
        # Getting the type of 'call_assignment_100388' (line 1354)
        call_assignment_100388_103354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 8), 'call_assignment_100388')
        # Assigning a type to the variable 'xb1' (line 1354)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1354, 8), 'xb1', call_assignment_100388_103354)
        
        # Assigning a Call to a Name (line 1354):
        
        # Assigning a Call to a Name (line 1354):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_103357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1354, 8), 'int')
        # Processing the call keyword arguments
        kwargs_103358 = {}
        # Getting the type of 'call_assignment_100387' (line 1354)
        call_assignment_100387_103355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 8), 'call_assignment_100387', False)
        # Obtaining the member '__getitem__' of a type (line 1354)
        getitem___103356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1354, 8), call_assignment_100387_103355, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_103359 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___103356, *[int_103357], **kwargs_103358)
        
        # Assigning a type to the variable 'call_assignment_100389' (line 1354)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1354, 8), 'call_assignment_100389', getitem___call_result_103359)
        
        # Assigning a Name to a Name (line 1354):
        
        # Assigning a Name to a Name (line 1354):
        # Getting the type of 'call_assignment_100389' (line 1354)
        call_assignment_100389_103360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 8), 'call_assignment_100389')
        # Assigning a type to the variable 'yb1' (line 1354)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1354, 13), 'yb1', call_assignment_100389_103360)
        
        # Assigning a Call to a Name (line 1354):
        
        # Assigning a Call to a Name (line 1354):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_103363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1354, 8), 'int')
        # Processing the call keyword arguments
        kwargs_103364 = {}
        # Getting the type of 'call_assignment_100387' (line 1354)
        call_assignment_100387_103361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 8), 'call_assignment_100387', False)
        # Obtaining the member '__getitem__' of a type (line 1354)
        getitem___103362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1354, 8), call_assignment_100387_103361, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_103365 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___103362, *[int_103363], **kwargs_103364)
        
        # Assigning a type to the variable 'call_assignment_100390' (line 1354)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1354, 8), 'call_assignment_100390', getitem___call_result_103365)
        
        # Assigning a Name to a Name (line 1354):
        
        # Assigning a Name to a Name (line 1354):
        # Getting the type of 'call_assignment_100390' (line 1354)
        call_assignment_100390_103366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 8), 'call_assignment_100390')
        # Assigning a type to the variable 'xb2' (line 1354)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1354, 18), 'xb2', call_assignment_100390_103366)
        
        # Assigning a Call to a Name (line 1354):
        
        # Assigning a Call to a Name (line 1354):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_103369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1354, 8), 'int')
        # Processing the call keyword arguments
        kwargs_103370 = {}
        # Getting the type of 'call_assignment_100387' (line 1354)
        call_assignment_100387_103367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 8), 'call_assignment_100387', False)
        # Obtaining the member '__getitem__' of a type (line 1354)
        getitem___103368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1354, 8), call_assignment_100387_103367, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_103371 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___103368, *[int_103369], **kwargs_103370)
        
        # Assigning a type to the variable 'call_assignment_100391' (line 1354)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1354, 8), 'call_assignment_100391', getitem___call_result_103371)
        
        # Assigning a Name to a Name (line 1354):
        
        # Assigning a Name to a Name (line 1354):
        # Getting the type of 'call_assignment_100391' (line 1354)
        call_assignment_100391_103372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 8), 'call_assignment_100391')
        # Assigning a type to the variable 'yb2' (line 1354)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1354, 23), 'yb2', call_assignment_100391_103372)
        
        # Assigning a Call to a Name (line 1357):
        
        # Assigning a Call to a Name (line 1357):
        
        # Assigning a Call to a Name (line 1357):
        
        # Call to atan2(...): (line 1357)
        # Processing the call arguments (line 1357)
        # Getting the type of 'y2' (line 1357)
        y2_103375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 27), 'y2', False)
        # Getting the type of 'y1' (line 1357)
        y1_103376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 32), 'y1', False)
        # Applying the binary operator '-' (line 1357)
        result_sub_103377 = python_operator(stypy.reporting.localization.Localization(__file__, 1357, 27), '-', y2_103375, y1_103376)
        
        # Getting the type of 'x2' (line 1357)
        x2_103378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 36), 'x2', False)
        # Getting the type of 'x1' (line 1357)
        x1_103379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 41), 'x1', False)
        # Applying the binary operator '-' (line 1357)
        result_sub_103380 = python_operator(stypy.reporting.localization.Localization(__file__, 1357, 36), '-', x2_103378, x1_103379)
        
        # Processing the call keyword arguments (line 1357)
        kwargs_103381 = {}
        # Getting the type of 'math' (line 1357)
        math_103373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 16), 'math', False)
        # Obtaining the member 'atan2' of a type (line 1357)
        atan2_103374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1357, 16), math_103373, 'atan2')
        # Calling atan2(args, kwargs) (line 1357)
        atan2_call_result_103382 = invoke(stypy.reporting.localization.Localization(__file__, 1357, 16), atan2_103374, *[result_sub_103377, result_sub_103380], **kwargs_103381)
        
        # Assigning a type to the variable 'theta' (line 1357)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1357, 8), 'theta', atan2_call_result_103382)
        
        # Assigning a Call to a Name (line 1358):
        
        # Assigning a Call to a Name (line 1358):
        
        # Assigning a Call to a Name (line 1358):
        
        # Call to sqrt(...): (line 1358)
        # Processing the call arguments (line 1358)
        # Getting the type of 'y2' (line 1358)
        y2_103385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1358, 23), 'y2', False)
        # Getting the type of 'y1' (line 1358)
        y1_103386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1358, 28), 'y1', False)
        # Applying the binary operator '-' (line 1358)
        result_sub_103387 = python_operator(stypy.reporting.localization.Localization(__file__, 1358, 23), '-', y2_103385, y1_103386)
        
        float_103388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1358, 35), 'float')
        # Applying the binary operator '**' (line 1358)
        result_pow_103389 = python_operator(stypy.reporting.localization.Localization(__file__, 1358, 22), '**', result_sub_103387, float_103388)
        
        # Getting the type of 'x2' (line 1358)
        x2_103390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1358, 41), 'x2', False)
        # Getting the type of 'x1' (line 1358)
        x1_103391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1358, 46), 'x1', False)
        # Applying the binary operator '-' (line 1358)
        result_sub_103392 = python_operator(stypy.reporting.localization.Localization(__file__, 1358, 41), '-', x2_103390, x1_103391)
        
        float_103393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1358, 53), 'float')
        # Applying the binary operator '**' (line 1358)
        result_pow_103394 = python_operator(stypy.reporting.localization.Localization(__file__, 1358, 40), '**', result_sub_103392, float_103393)
        
        # Applying the binary operator '+' (line 1358)
        result_add_103395 = python_operator(stypy.reporting.localization.Localization(__file__, 1358, 22), '+', result_pow_103389, result_pow_103394)
        
        # Processing the call keyword arguments (line 1358)
        kwargs_103396 = {}
        # Getting the type of 'math' (line 1358)
        math_103383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1358, 12), 'math', False)
        # Obtaining the member 'sqrt' of a type (line 1358)
        sqrt_103384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1358, 12), math_103383, 'sqrt')
        # Calling sqrt(args, kwargs) (line 1358)
        sqrt_call_result_103397 = invoke(stypy.reporting.localization.Localization(__file__, 1358, 12), sqrt_103384, *[result_add_103395], **kwargs_103396)
        
        # Assigning a type to the variable 'r' (line 1358)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1358, 8), 'r', sqrt_call_result_103397)
        
        # Assigning a BinOp to a Name (line 1359):
        
        # Assigning a BinOp to a Name (line 1359):
        
        # Assigning a BinOp to a Name (line 1359):
        # Getting the type of 'x1' (line 1359)
        x1_103398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 13), 'x1')
        # Getting the type of 'self' (line 1359)
        self_103399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 18), 'self')
        # Obtaining the member 'frac' of a type (line 1359)
        frac_103400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1359, 18), self_103399, 'frac')
        # Getting the type of 'r' (line 1359)
        r_103401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 30), 'r')
        # Applying the binary operator '*' (line 1359)
        result_mul_103402 = python_operator(stypy.reporting.localization.Localization(__file__, 1359, 18), '*', frac_103400, r_103401)
        
        
        # Call to cos(...): (line 1359)
        # Processing the call arguments (line 1359)
        # Getting the type of 'theta' (line 1359)
        theta_103405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 43), 'theta', False)
        # Processing the call keyword arguments (line 1359)
        kwargs_103406 = {}
        # Getting the type of 'math' (line 1359)
        math_103403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 34), 'math', False)
        # Obtaining the member 'cos' of a type (line 1359)
        cos_103404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1359, 34), math_103403, 'cos')
        # Calling cos(args, kwargs) (line 1359)
        cos_call_result_103407 = invoke(stypy.reporting.localization.Localization(__file__, 1359, 34), cos_103404, *[theta_103405], **kwargs_103406)
        
        # Applying the binary operator '*' (line 1359)
        result_mul_103408 = python_operator(stypy.reporting.localization.Localization(__file__, 1359, 32), '*', result_mul_103402, cos_call_result_103407)
        
        # Applying the binary operator '+' (line 1359)
        result_add_103409 = python_operator(stypy.reporting.localization.Localization(__file__, 1359, 13), '+', x1_103398, result_mul_103408)
        
        # Assigning a type to the variable 'xm' (line 1359)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1359, 8), 'xm', result_add_103409)
        
        # Assigning a BinOp to a Name (line 1360):
        
        # Assigning a BinOp to a Name (line 1360):
        
        # Assigning a BinOp to a Name (line 1360):
        # Getting the type of 'y1' (line 1360)
        y1_103410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 13), 'y1')
        # Getting the type of 'self' (line 1360)
        self_103411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 18), 'self')
        # Obtaining the member 'frac' of a type (line 1360)
        frac_103412 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1360, 18), self_103411, 'frac')
        # Getting the type of 'r' (line 1360)
        r_103413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 30), 'r')
        # Applying the binary operator '*' (line 1360)
        result_mul_103414 = python_operator(stypy.reporting.localization.Localization(__file__, 1360, 18), '*', frac_103412, r_103413)
        
        
        # Call to sin(...): (line 1360)
        # Processing the call arguments (line 1360)
        # Getting the type of 'theta' (line 1360)
        theta_103417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 43), 'theta', False)
        # Processing the call keyword arguments (line 1360)
        kwargs_103418 = {}
        # Getting the type of 'math' (line 1360)
        math_103415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 34), 'math', False)
        # Obtaining the member 'sin' of a type (line 1360)
        sin_103416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1360, 34), math_103415, 'sin')
        # Calling sin(args, kwargs) (line 1360)
        sin_call_result_103419 = invoke(stypy.reporting.localization.Localization(__file__, 1360, 34), sin_103416, *[theta_103417], **kwargs_103418)
        
        # Applying the binary operator '*' (line 1360)
        result_mul_103420 = python_operator(stypy.reporting.localization.Localization(__file__, 1360, 32), '*', result_mul_103414, sin_call_result_103419)
        
        # Applying the binary operator '+' (line 1360)
        result_add_103421 = python_operator(stypy.reporting.localization.Localization(__file__, 1360, 13), '+', y1_103410, result_mul_103420)
        
        # Assigning a type to the variable 'ym' (line 1360)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1360, 8), 'ym', result_add_103421)
        
        # Assigning a Call to a Tuple (line 1361):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to getpoints(...): (line 1361)
        # Processing the call arguments (line 1361)
        # Getting the type of 'x1' (line 1361)
        x1_103424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 44), 'x1', False)
        # Getting the type of 'y1' (line 1361)
        y1_103425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 48), 'y1', False)
        # Getting the type of 'xm' (line 1361)
        xm_103426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 52), 'xm', False)
        # Getting the type of 'ym' (line 1361)
        ym_103427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 56), 'ym', False)
        # Getting the type of 'k1' (line 1361)
        k1_103428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 60), 'k1', False)
        # Processing the call keyword arguments (line 1361)
        kwargs_103429 = {}
        # Getting the type of 'self' (line 1361)
        self_103422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 29), 'self', False)
        # Obtaining the member 'getpoints' of a type (line 1361)
        getpoints_103423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1361, 29), self_103422, 'getpoints')
        # Calling getpoints(args, kwargs) (line 1361)
        getpoints_call_result_103430 = invoke(stypy.reporting.localization.Localization(__file__, 1361, 29), getpoints_103423, *[x1_103424, y1_103425, xm_103426, ym_103427, k1_103428], **kwargs_103429)
        
        # Assigning a type to the variable 'call_assignment_100392' (line 1361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1361, 8), 'call_assignment_100392', getpoints_call_result_103430)
        
        # Assigning a Call to a Name (line 1361):
        
        # Assigning a Call to a Name (line 1361):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_103433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1361, 8), 'int')
        # Processing the call keyword arguments
        kwargs_103434 = {}
        # Getting the type of 'call_assignment_100392' (line 1361)
        call_assignment_100392_103431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 8), 'call_assignment_100392', False)
        # Obtaining the member '__getitem__' of a type (line 1361)
        getitem___103432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1361, 8), call_assignment_100392_103431, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_103435 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___103432, *[int_103433], **kwargs_103434)
        
        # Assigning a type to the variable 'call_assignment_100393' (line 1361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1361, 8), 'call_assignment_100393', getitem___call_result_103435)
        
        # Assigning a Name to a Name (line 1361):
        
        # Assigning a Name to a Name (line 1361):
        # Getting the type of 'call_assignment_100393' (line 1361)
        call_assignment_100393_103436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 8), 'call_assignment_100393')
        # Assigning a type to the variable 'xc1' (line 1361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1361, 8), 'xc1', call_assignment_100393_103436)
        
        # Assigning a Call to a Name (line 1361):
        
        # Assigning a Call to a Name (line 1361):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_103439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1361, 8), 'int')
        # Processing the call keyword arguments
        kwargs_103440 = {}
        # Getting the type of 'call_assignment_100392' (line 1361)
        call_assignment_100392_103437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 8), 'call_assignment_100392', False)
        # Obtaining the member '__getitem__' of a type (line 1361)
        getitem___103438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1361, 8), call_assignment_100392_103437, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_103441 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___103438, *[int_103439], **kwargs_103440)
        
        # Assigning a type to the variable 'call_assignment_100394' (line 1361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1361, 8), 'call_assignment_100394', getitem___call_result_103441)
        
        # Assigning a Name to a Name (line 1361):
        
        # Assigning a Name to a Name (line 1361):
        # Getting the type of 'call_assignment_100394' (line 1361)
        call_assignment_100394_103442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 8), 'call_assignment_100394')
        # Assigning a type to the variable 'yc1' (line 1361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1361, 13), 'yc1', call_assignment_100394_103442)
        
        # Assigning a Call to a Name (line 1361):
        
        # Assigning a Call to a Name (line 1361):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_103445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1361, 8), 'int')
        # Processing the call keyword arguments
        kwargs_103446 = {}
        # Getting the type of 'call_assignment_100392' (line 1361)
        call_assignment_100392_103443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 8), 'call_assignment_100392', False)
        # Obtaining the member '__getitem__' of a type (line 1361)
        getitem___103444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1361, 8), call_assignment_100392_103443, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_103447 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___103444, *[int_103445], **kwargs_103446)
        
        # Assigning a type to the variable 'call_assignment_100395' (line 1361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1361, 8), 'call_assignment_100395', getitem___call_result_103447)
        
        # Assigning a Name to a Name (line 1361):
        
        # Assigning a Name to a Name (line 1361):
        # Getting the type of 'call_assignment_100395' (line 1361)
        call_assignment_100395_103448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 8), 'call_assignment_100395')
        # Assigning a type to the variable 'xc2' (line 1361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1361, 18), 'xc2', call_assignment_100395_103448)
        
        # Assigning a Call to a Name (line 1361):
        
        # Assigning a Call to a Name (line 1361):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_103451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1361, 8), 'int')
        # Processing the call keyword arguments
        kwargs_103452 = {}
        # Getting the type of 'call_assignment_100392' (line 1361)
        call_assignment_100392_103449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 8), 'call_assignment_100392', False)
        # Obtaining the member '__getitem__' of a type (line 1361)
        getitem___103450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1361, 8), call_assignment_100392_103449, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_103453 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___103450, *[int_103451], **kwargs_103452)
        
        # Assigning a type to the variable 'call_assignment_100396' (line 1361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1361, 8), 'call_assignment_100396', getitem___call_result_103453)
        
        # Assigning a Name to a Name (line 1361):
        
        # Assigning a Name to a Name (line 1361):
        # Getting the type of 'call_assignment_100396' (line 1361)
        call_assignment_100396_103454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 8), 'call_assignment_100396')
        # Assigning a type to the variable 'yc2' (line 1361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1361, 23), 'yc2', call_assignment_100396_103454)
        
        # Assigning a Call to a Tuple (line 1362):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to getpoints(...): (line 1362)
        # Processing the call arguments (line 1362)
        # Getting the type of 'x1' (line 1362)
        x1_103457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 44), 'x1', False)
        # Getting the type of 'y1' (line 1362)
        y1_103458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 48), 'y1', False)
        # Getting the type of 'xm' (line 1362)
        xm_103459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 52), 'xm', False)
        # Getting the type of 'ym' (line 1362)
        ym_103460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 56), 'ym', False)
        # Getting the type of 'k2' (line 1362)
        k2_103461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 60), 'k2', False)
        # Processing the call keyword arguments (line 1362)
        kwargs_103462 = {}
        # Getting the type of 'self' (line 1362)
        self_103455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 29), 'self', False)
        # Obtaining the member 'getpoints' of a type (line 1362)
        getpoints_103456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1362, 29), self_103455, 'getpoints')
        # Calling getpoints(args, kwargs) (line 1362)
        getpoints_call_result_103463 = invoke(stypy.reporting.localization.Localization(__file__, 1362, 29), getpoints_103456, *[x1_103457, y1_103458, xm_103459, ym_103460, k2_103461], **kwargs_103462)
        
        # Assigning a type to the variable 'call_assignment_100397' (line 1362)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1362, 8), 'call_assignment_100397', getpoints_call_result_103463)
        
        # Assigning a Call to a Name (line 1362):
        
        # Assigning a Call to a Name (line 1362):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_103466 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1362, 8), 'int')
        # Processing the call keyword arguments
        kwargs_103467 = {}
        # Getting the type of 'call_assignment_100397' (line 1362)
        call_assignment_100397_103464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 8), 'call_assignment_100397', False)
        # Obtaining the member '__getitem__' of a type (line 1362)
        getitem___103465 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1362, 8), call_assignment_100397_103464, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_103468 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___103465, *[int_103466], **kwargs_103467)
        
        # Assigning a type to the variable 'call_assignment_100398' (line 1362)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1362, 8), 'call_assignment_100398', getitem___call_result_103468)
        
        # Assigning a Name to a Name (line 1362):
        
        # Assigning a Name to a Name (line 1362):
        # Getting the type of 'call_assignment_100398' (line 1362)
        call_assignment_100398_103469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 8), 'call_assignment_100398')
        # Assigning a type to the variable 'xd1' (line 1362)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1362, 8), 'xd1', call_assignment_100398_103469)
        
        # Assigning a Call to a Name (line 1362):
        
        # Assigning a Call to a Name (line 1362):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_103472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1362, 8), 'int')
        # Processing the call keyword arguments
        kwargs_103473 = {}
        # Getting the type of 'call_assignment_100397' (line 1362)
        call_assignment_100397_103470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 8), 'call_assignment_100397', False)
        # Obtaining the member '__getitem__' of a type (line 1362)
        getitem___103471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1362, 8), call_assignment_100397_103470, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_103474 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___103471, *[int_103472], **kwargs_103473)
        
        # Assigning a type to the variable 'call_assignment_100399' (line 1362)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1362, 8), 'call_assignment_100399', getitem___call_result_103474)
        
        # Assigning a Name to a Name (line 1362):
        
        # Assigning a Name to a Name (line 1362):
        # Getting the type of 'call_assignment_100399' (line 1362)
        call_assignment_100399_103475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 8), 'call_assignment_100399')
        # Assigning a type to the variable 'yd1' (line 1362)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1362, 13), 'yd1', call_assignment_100399_103475)
        
        # Assigning a Call to a Name (line 1362):
        
        # Assigning a Call to a Name (line 1362):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_103478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1362, 8), 'int')
        # Processing the call keyword arguments
        kwargs_103479 = {}
        # Getting the type of 'call_assignment_100397' (line 1362)
        call_assignment_100397_103476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 8), 'call_assignment_100397', False)
        # Obtaining the member '__getitem__' of a type (line 1362)
        getitem___103477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1362, 8), call_assignment_100397_103476, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_103480 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___103477, *[int_103478], **kwargs_103479)
        
        # Assigning a type to the variable 'call_assignment_100400' (line 1362)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1362, 8), 'call_assignment_100400', getitem___call_result_103480)
        
        # Assigning a Name to a Name (line 1362):
        
        # Assigning a Name to a Name (line 1362):
        # Getting the type of 'call_assignment_100400' (line 1362)
        call_assignment_100400_103481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 8), 'call_assignment_100400')
        # Assigning a type to the variable 'xd2' (line 1362)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1362, 18), 'xd2', call_assignment_100400_103481)
        
        # Assigning a Call to a Name (line 1362):
        
        # Assigning a Call to a Name (line 1362):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_103484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1362, 8), 'int')
        # Processing the call keyword arguments
        kwargs_103485 = {}
        # Getting the type of 'call_assignment_100397' (line 1362)
        call_assignment_100397_103482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 8), 'call_assignment_100397', False)
        # Obtaining the member '__getitem__' of a type (line 1362)
        getitem___103483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1362, 8), call_assignment_100397_103482, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_103486 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___103483, *[int_103484], **kwargs_103485)
        
        # Assigning a type to the variable 'call_assignment_100401' (line 1362)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1362, 8), 'call_assignment_100401', getitem___call_result_103486)
        
        # Assigning a Name to a Name (line 1362):
        
        # Assigning a Name to a Name (line 1362):
        # Getting the type of 'call_assignment_100401' (line 1362)
        call_assignment_100401_103487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 8), 'call_assignment_100401')
        # Assigning a type to the variable 'yd2' (line 1362)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1362, 23), 'yd2', call_assignment_100401_103487)
        
        # Assigning a Call to a Name (line 1364):
        
        # Assigning a Call to a Name (line 1364):
        
        # Assigning a Call to a Name (line 1364):
        
        # Call to convert_xunits(...): (line 1364)
        # Processing the call arguments (line 1364)
        
        # Obtaining an instance of the builtin type 'list' (line 1364)
        list_103490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1364, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1364)
        # Adding element type (line 1364)
        # Getting the type of 'xb1' (line 1364)
        xb1_103491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1364, 34), 'xb1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1364, 33), list_103490, xb1_103491)
        # Adding element type (line 1364)
        # Getting the type of 'xb2' (line 1364)
        xb2_103492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1364, 39), 'xb2', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1364, 33), list_103490, xb2_103492)
        # Adding element type (line 1364)
        # Getting the type of 'xc2' (line 1364)
        xc2_103493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1364, 44), 'xc2', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1364, 33), list_103490, xc2_103493)
        # Adding element type (line 1364)
        # Getting the type of 'xd2' (line 1364)
        xd2_103494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1364, 49), 'xd2', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1364, 33), list_103490, xd2_103494)
        # Adding element type (line 1364)
        # Getting the type of 'x1' (line 1364)
        x1_103495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1364, 54), 'x1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1364, 33), list_103490, x1_103495)
        # Adding element type (line 1364)
        # Getting the type of 'xd1' (line 1364)
        xd1_103496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1364, 58), 'xd1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1364, 33), list_103490, xd1_103496)
        # Adding element type (line 1364)
        # Getting the type of 'xc1' (line 1364)
        xc1_103497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1364, 63), 'xc1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1364, 33), list_103490, xc1_103497)
        # Adding element type (line 1364)
        # Getting the type of 'xb1' (line 1364)
        xb1_103498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1364, 68), 'xb1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1364, 33), list_103490, xb1_103498)
        
        # Processing the call keyword arguments (line 1364)
        kwargs_103499 = {}
        # Getting the type of 'self' (line 1364)
        self_103488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1364, 13), 'self', False)
        # Obtaining the member 'convert_xunits' of a type (line 1364)
        convert_xunits_103489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1364, 13), self_103488, 'convert_xunits')
        # Calling convert_xunits(args, kwargs) (line 1364)
        convert_xunits_call_result_103500 = invoke(stypy.reporting.localization.Localization(__file__, 1364, 13), convert_xunits_103489, *[list_103490], **kwargs_103499)
        
        # Assigning a type to the variable 'xs' (line 1364)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1364, 8), 'xs', convert_xunits_call_result_103500)
        
        # Assigning a Call to a Name (line 1365):
        
        # Assigning a Call to a Name (line 1365):
        
        # Assigning a Call to a Name (line 1365):
        
        # Call to convert_yunits(...): (line 1365)
        # Processing the call arguments (line 1365)
        
        # Obtaining an instance of the builtin type 'list' (line 1365)
        list_103503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1365, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1365)
        # Adding element type (line 1365)
        # Getting the type of 'yb1' (line 1365)
        yb1_103504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 34), 'yb1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1365, 33), list_103503, yb1_103504)
        # Adding element type (line 1365)
        # Getting the type of 'yb2' (line 1365)
        yb2_103505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 39), 'yb2', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1365, 33), list_103503, yb2_103505)
        # Adding element type (line 1365)
        # Getting the type of 'yc2' (line 1365)
        yc2_103506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 44), 'yc2', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1365, 33), list_103503, yc2_103506)
        # Adding element type (line 1365)
        # Getting the type of 'yd2' (line 1365)
        yd2_103507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 49), 'yd2', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1365, 33), list_103503, yd2_103507)
        # Adding element type (line 1365)
        # Getting the type of 'y1' (line 1365)
        y1_103508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 54), 'y1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1365, 33), list_103503, y1_103508)
        # Adding element type (line 1365)
        # Getting the type of 'yd1' (line 1365)
        yd1_103509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 58), 'yd1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1365, 33), list_103503, yd1_103509)
        # Adding element type (line 1365)
        # Getting the type of 'yc1' (line 1365)
        yc1_103510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 63), 'yc1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1365, 33), list_103503, yc1_103510)
        # Adding element type (line 1365)
        # Getting the type of 'yb1' (line 1365)
        yb1_103511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 68), 'yb1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1365, 33), list_103503, yb1_103511)
        
        # Processing the call keyword arguments (line 1365)
        kwargs_103512 = {}
        # Getting the type of 'self' (line 1365)
        self_103501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 13), 'self', False)
        # Obtaining the member 'convert_yunits' of a type (line 1365)
        convert_yunits_103502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1365, 13), self_103501, 'convert_yunits')
        # Calling convert_yunits(args, kwargs) (line 1365)
        convert_yunits_call_result_103513 = invoke(stypy.reporting.localization.Localization(__file__, 1365, 13), convert_yunits_103502, *[list_103503], **kwargs_103512)
        
        # Assigning a type to the variable 'ys' (line 1365)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1365, 8), 'ys', convert_yunits_call_result_103513)
        
        # Call to Path(...): (line 1367)
        # Processing the call arguments (line 1367)
        
        # Call to list(...): (line 1367)
        # Processing the call arguments (line 1367)
        
        # Call to zip(...): (line 1367)
        # Processing the call arguments (line 1367)
        # Getting the type of 'xs' (line 1367)
        xs_103517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 29), 'xs', False)
        # Getting the type of 'ys' (line 1367)
        ys_103518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 33), 'ys', False)
        # Processing the call keyword arguments (line 1367)
        kwargs_103519 = {}
        # Getting the type of 'zip' (line 1367)
        zip_103516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 25), 'zip', False)
        # Calling zip(args, kwargs) (line 1367)
        zip_call_result_103520 = invoke(stypy.reporting.localization.Localization(__file__, 1367, 25), zip_103516, *[xs_103517, ys_103518], **kwargs_103519)
        
        # Processing the call keyword arguments (line 1367)
        kwargs_103521 = {}
        # Getting the type of 'list' (line 1367)
        list_103515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 20), 'list', False)
        # Calling list(args, kwargs) (line 1367)
        list_call_result_103522 = invoke(stypy.reporting.localization.Localization(__file__, 1367, 20), list_103515, *[zip_call_result_103520], **kwargs_103521)
        
        # Processing the call keyword arguments (line 1367)
        # Getting the type of 'True' (line 1367)
        True_103523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 46), 'True', False)
        keyword_103524 = True_103523
        kwargs_103525 = {'closed': keyword_103524}
        # Getting the type of 'Path' (line 1367)
        Path_103514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 15), 'Path', False)
        # Calling Path(args, kwargs) (line 1367)
        Path_call_result_103526 = invoke(stypy.reporting.localization.Localization(__file__, 1367, 15), Path_103514, *[list_call_result_103522], **kwargs_103525)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1367)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1367, 8), 'stypy_return_type', Path_call_result_103526)
        
        # ################# End of 'get_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_path' in the type store
        # Getting the type of 'stypy_return_type' (line 1345)
        stypy_return_type_103527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_103527)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_path'
        return stypy_return_type_103527


    @norecursion
    def get_patch_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_patch_transform'
        module_type_store = module_type_store.open_function_context('get_patch_transform', 1369, 4, False)
        # Assigning a type to the variable 'self' (line 1370)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1370, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YAArrow.get_patch_transform.__dict__.__setitem__('stypy_localization', localization)
        YAArrow.get_patch_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YAArrow.get_patch_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        YAArrow.get_patch_transform.__dict__.__setitem__('stypy_function_name', 'YAArrow.get_patch_transform')
        YAArrow.get_patch_transform.__dict__.__setitem__('stypy_param_names_list', [])
        YAArrow.get_patch_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        YAArrow.get_patch_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YAArrow.get_patch_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        YAArrow.get_patch_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        YAArrow.get_patch_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YAArrow.get_patch_transform.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YAArrow.get_patch_transform', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_patch_transform', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_patch_transform(...)' code ##################

        
        # Call to IdentityTransform(...): (line 1370)
        # Processing the call keyword arguments (line 1370)
        kwargs_103530 = {}
        # Getting the type of 'transforms' (line 1370)
        transforms_103528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1370, 15), 'transforms', False)
        # Obtaining the member 'IdentityTransform' of a type (line 1370)
        IdentityTransform_103529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1370, 15), transforms_103528, 'IdentityTransform')
        # Calling IdentityTransform(args, kwargs) (line 1370)
        IdentityTransform_call_result_103531 = invoke(stypy.reporting.localization.Localization(__file__, 1370, 15), IdentityTransform_103529, *[], **kwargs_103530)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1370)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1370, 8), 'stypy_return_type', IdentityTransform_call_result_103531)
        
        # ################# End of 'get_patch_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_patch_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 1369)
        stypy_return_type_103532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1369, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_103532)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_patch_transform'
        return stypy_return_type_103532


    @norecursion
    def getpoints(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'getpoints'
        module_type_store = module_type_store.open_function_context('getpoints', 1372, 4, False)
        # Assigning a type to the variable 'self' (line 1373)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1373, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YAArrow.getpoints.__dict__.__setitem__('stypy_localization', localization)
        YAArrow.getpoints.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YAArrow.getpoints.__dict__.__setitem__('stypy_type_store', module_type_store)
        YAArrow.getpoints.__dict__.__setitem__('stypy_function_name', 'YAArrow.getpoints')
        YAArrow.getpoints.__dict__.__setitem__('stypy_param_names_list', ['x1', 'y1', 'x2', 'y2', 'k'])
        YAArrow.getpoints.__dict__.__setitem__('stypy_varargs_param_name', None)
        YAArrow.getpoints.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YAArrow.getpoints.__dict__.__setitem__('stypy_call_defaults', defaults)
        YAArrow.getpoints.__dict__.__setitem__('stypy_call_varargs', varargs)
        YAArrow.getpoints.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YAArrow.getpoints.__dict__.__setitem__('stypy_declared_arg_number', 6)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YAArrow.getpoints', ['x1', 'y1', 'x2', 'y2', 'k'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'getpoints', localization, ['x1', 'y1', 'x2', 'y2', 'k'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'getpoints(...)' code ##################

        unicode_103533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1378, (-1)), 'unicode', u'\n        For line segment defined by (*x1*, *y1*) and (*x2*, *y2*)\n        return the points on the line that is perpendicular to the\n        line and intersects (*x2*, *y2*) and the distance from (*x2*,\n        *y2*) of the returned points is *k*.\n        ')
        
        # Assigning a Call to a Tuple (line 1379):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to map(...): (line 1379)
        # Processing the call arguments (line 1379)
        # Getting the type of 'float' (line 1379)
        float_103535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 32), 'float', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1379)
        tuple_103536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1379, 40), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1379)
        # Adding element type (line 1379)
        # Getting the type of 'x1' (line 1379)
        x1_103537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 40), 'x1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1379, 40), tuple_103536, x1_103537)
        # Adding element type (line 1379)
        # Getting the type of 'y1' (line 1379)
        y1_103538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 44), 'y1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1379, 40), tuple_103536, y1_103538)
        # Adding element type (line 1379)
        # Getting the type of 'x2' (line 1379)
        x2_103539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 48), 'x2', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1379, 40), tuple_103536, x2_103539)
        # Adding element type (line 1379)
        # Getting the type of 'y2' (line 1379)
        y2_103540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 52), 'y2', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1379, 40), tuple_103536, y2_103540)
        # Adding element type (line 1379)
        # Getting the type of 'k' (line 1379)
        k_103541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 56), 'k', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1379, 40), tuple_103536, k_103541)
        
        # Processing the call keyword arguments (line 1379)
        kwargs_103542 = {}
        # Getting the type of 'map' (line 1379)
        map_103534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 28), 'map', False)
        # Calling map(args, kwargs) (line 1379)
        map_call_result_103543 = invoke(stypy.reporting.localization.Localization(__file__, 1379, 28), map_103534, *[float_103535, tuple_103536], **kwargs_103542)
        
        # Assigning a type to the variable 'call_assignment_100402' (line 1379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1379, 8), 'call_assignment_100402', map_call_result_103543)
        
        # Assigning a Call to a Name (line 1379):
        
        # Assigning a Call to a Name (line 1379):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_103546 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1379, 8), 'int')
        # Processing the call keyword arguments
        kwargs_103547 = {}
        # Getting the type of 'call_assignment_100402' (line 1379)
        call_assignment_100402_103544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 8), 'call_assignment_100402', False)
        # Obtaining the member '__getitem__' of a type (line 1379)
        getitem___103545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1379, 8), call_assignment_100402_103544, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_103548 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___103545, *[int_103546], **kwargs_103547)
        
        # Assigning a type to the variable 'call_assignment_100403' (line 1379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1379, 8), 'call_assignment_100403', getitem___call_result_103548)
        
        # Assigning a Name to a Name (line 1379):
        
        # Assigning a Name to a Name (line 1379):
        # Getting the type of 'call_assignment_100403' (line 1379)
        call_assignment_100403_103549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 8), 'call_assignment_100403')
        # Assigning a type to the variable 'x1' (line 1379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1379, 8), 'x1', call_assignment_100403_103549)
        
        # Assigning a Call to a Name (line 1379):
        
        # Assigning a Call to a Name (line 1379):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_103552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1379, 8), 'int')
        # Processing the call keyword arguments
        kwargs_103553 = {}
        # Getting the type of 'call_assignment_100402' (line 1379)
        call_assignment_100402_103550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 8), 'call_assignment_100402', False)
        # Obtaining the member '__getitem__' of a type (line 1379)
        getitem___103551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1379, 8), call_assignment_100402_103550, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_103554 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___103551, *[int_103552], **kwargs_103553)
        
        # Assigning a type to the variable 'call_assignment_100404' (line 1379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1379, 8), 'call_assignment_100404', getitem___call_result_103554)
        
        # Assigning a Name to a Name (line 1379):
        
        # Assigning a Name to a Name (line 1379):
        # Getting the type of 'call_assignment_100404' (line 1379)
        call_assignment_100404_103555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 8), 'call_assignment_100404')
        # Assigning a type to the variable 'y1' (line 1379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1379, 12), 'y1', call_assignment_100404_103555)
        
        # Assigning a Call to a Name (line 1379):
        
        # Assigning a Call to a Name (line 1379):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_103558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1379, 8), 'int')
        # Processing the call keyword arguments
        kwargs_103559 = {}
        # Getting the type of 'call_assignment_100402' (line 1379)
        call_assignment_100402_103556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 8), 'call_assignment_100402', False)
        # Obtaining the member '__getitem__' of a type (line 1379)
        getitem___103557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1379, 8), call_assignment_100402_103556, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_103560 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___103557, *[int_103558], **kwargs_103559)
        
        # Assigning a type to the variable 'call_assignment_100405' (line 1379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1379, 8), 'call_assignment_100405', getitem___call_result_103560)
        
        # Assigning a Name to a Name (line 1379):
        
        # Assigning a Name to a Name (line 1379):
        # Getting the type of 'call_assignment_100405' (line 1379)
        call_assignment_100405_103561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 8), 'call_assignment_100405')
        # Assigning a type to the variable 'x2' (line 1379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1379, 16), 'x2', call_assignment_100405_103561)
        
        # Assigning a Call to a Name (line 1379):
        
        # Assigning a Call to a Name (line 1379):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_103564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1379, 8), 'int')
        # Processing the call keyword arguments
        kwargs_103565 = {}
        # Getting the type of 'call_assignment_100402' (line 1379)
        call_assignment_100402_103562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 8), 'call_assignment_100402', False)
        # Obtaining the member '__getitem__' of a type (line 1379)
        getitem___103563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1379, 8), call_assignment_100402_103562, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_103566 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___103563, *[int_103564], **kwargs_103565)
        
        # Assigning a type to the variable 'call_assignment_100406' (line 1379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1379, 8), 'call_assignment_100406', getitem___call_result_103566)
        
        # Assigning a Name to a Name (line 1379):
        
        # Assigning a Name to a Name (line 1379):
        # Getting the type of 'call_assignment_100406' (line 1379)
        call_assignment_100406_103567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 8), 'call_assignment_100406')
        # Assigning a type to the variable 'y2' (line 1379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1379, 20), 'y2', call_assignment_100406_103567)
        
        # Assigning a Call to a Name (line 1379):
        
        # Assigning a Call to a Name (line 1379):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_103570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1379, 8), 'int')
        # Processing the call keyword arguments
        kwargs_103571 = {}
        # Getting the type of 'call_assignment_100402' (line 1379)
        call_assignment_100402_103568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 8), 'call_assignment_100402', False)
        # Obtaining the member '__getitem__' of a type (line 1379)
        getitem___103569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1379, 8), call_assignment_100402_103568, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_103572 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___103569, *[int_103570], **kwargs_103571)
        
        # Assigning a type to the variable 'call_assignment_100407' (line 1379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1379, 8), 'call_assignment_100407', getitem___call_result_103572)
        
        # Assigning a Name to a Name (line 1379):
        
        # Assigning a Name to a Name (line 1379):
        # Getting the type of 'call_assignment_100407' (line 1379)
        call_assignment_100407_103573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 8), 'call_assignment_100407')
        # Assigning a type to the variable 'k' (line 1379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1379, 24), 'k', call_assignment_100407_103573)
        
        
        # Getting the type of 'y2' (line 1381)
        y2_103574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 11), 'y2')
        # Getting the type of 'y1' (line 1381)
        y1_103575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 16), 'y1')
        # Applying the binary operator '-' (line 1381)
        result_sub_103576 = python_operator(stypy.reporting.localization.Localization(__file__, 1381, 11), '-', y2_103574, y1_103575)
        
        int_103577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1381, 22), 'int')
        # Applying the binary operator '==' (line 1381)
        result_eq_103578 = python_operator(stypy.reporting.localization.Localization(__file__, 1381, 11), '==', result_sub_103576, int_103577)
        
        # Testing the type of an if condition (line 1381)
        if_condition_103579 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1381, 8), result_eq_103578)
        # Assigning a type to the variable 'if_condition_103579' (line 1381)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1381, 8), 'if_condition_103579', if_condition_103579)
        # SSA begins for if statement (line 1381)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1382)
        tuple_103580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1382, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1382)
        # Adding element type (line 1382)
        # Getting the type of 'x2' (line 1382)
        x2_103581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 19), 'x2')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1382, 19), tuple_103580, x2_103581)
        # Adding element type (line 1382)
        # Getting the type of 'y2' (line 1382)
        y2_103582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 23), 'y2')
        # Getting the type of 'k' (line 1382)
        k_103583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 28), 'k')
        # Applying the binary operator '+' (line 1382)
        result_add_103584 = python_operator(stypy.reporting.localization.Localization(__file__, 1382, 23), '+', y2_103582, k_103583)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1382, 19), tuple_103580, result_add_103584)
        # Adding element type (line 1382)
        # Getting the type of 'x2' (line 1382)
        x2_103585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 31), 'x2')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1382, 19), tuple_103580, x2_103585)
        # Adding element type (line 1382)
        # Getting the type of 'y2' (line 1382)
        y2_103586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 35), 'y2')
        # Getting the type of 'k' (line 1382)
        k_103587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 40), 'k')
        # Applying the binary operator '-' (line 1382)
        result_sub_103588 = python_operator(stypy.reporting.localization.Localization(__file__, 1382, 35), '-', y2_103586, k_103587)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1382, 19), tuple_103580, result_sub_103588)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1382)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1382, 12), 'stypy_return_type', tuple_103580)
        # SSA branch for the else part of an if statement (line 1381)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'x2' (line 1383)
        x2_103589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 13), 'x2')
        # Getting the type of 'x1' (line 1383)
        x1_103590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 18), 'x1')
        # Applying the binary operator '-' (line 1383)
        result_sub_103591 = python_operator(stypy.reporting.localization.Localization(__file__, 1383, 13), '-', x2_103589, x1_103590)
        
        int_103592 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1383, 24), 'int')
        # Applying the binary operator '==' (line 1383)
        result_eq_103593 = python_operator(stypy.reporting.localization.Localization(__file__, 1383, 13), '==', result_sub_103591, int_103592)
        
        # Testing the type of an if condition (line 1383)
        if_condition_103594 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1383, 13), result_eq_103593)
        # Assigning a type to the variable 'if_condition_103594' (line 1383)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1383, 13), 'if_condition_103594', if_condition_103594)
        # SSA begins for if statement (line 1383)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1384)
        tuple_103595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1384, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1384)
        # Adding element type (line 1384)
        # Getting the type of 'x2' (line 1384)
        x2_103596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 19), 'x2')
        # Getting the type of 'k' (line 1384)
        k_103597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 24), 'k')
        # Applying the binary operator '+' (line 1384)
        result_add_103598 = python_operator(stypy.reporting.localization.Localization(__file__, 1384, 19), '+', x2_103596, k_103597)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1384, 19), tuple_103595, result_add_103598)
        # Adding element type (line 1384)
        # Getting the type of 'y2' (line 1384)
        y2_103599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 27), 'y2')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1384, 19), tuple_103595, y2_103599)
        # Adding element type (line 1384)
        # Getting the type of 'x2' (line 1384)
        x2_103600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 31), 'x2')
        # Getting the type of 'k' (line 1384)
        k_103601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 36), 'k')
        # Applying the binary operator '-' (line 1384)
        result_sub_103602 = python_operator(stypy.reporting.localization.Localization(__file__, 1384, 31), '-', x2_103600, k_103601)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1384, 19), tuple_103595, result_sub_103602)
        # Adding element type (line 1384)
        # Getting the type of 'y2' (line 1384)
        y2_103603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 39), 'y2')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1384, 19), tuple_103595, y2_103603)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1384)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1384, 12), 'stypy_return_type', tuple_103595)
        # SSA join for if statement (line 1383)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1381)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 1386):
        
        # Assigning a BinOp to a Name (line 1386):
        
        # Assigning a BinOp to a Name (line 1386):
        # Getting the type of 'y2' (line 1386)
        y2_103604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 13), 'y2')
        # Getting the type of 'y1' (line 1386)
        y1_103605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 18), 'y1')
        # Applying the binary operator '-' (line 1386)
        result_sub_103606 = python_operator(stypy.reporting.localization.Localization(__file__, 1386, 13), '-', y2_103604, y1_103605)
        
        # Getting the type of 'x2' (line 1386)
        x2_103607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 25), 'x2')
        # Getting the type of 'x1' (line 1386)
        x1_103608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 30), 'x1')
        # Applying the binary operator '-' (line 1386)
        result_sub_103609 = python_operator(stypy.reporting.localization.Localization(__file__, 1386, 25), '-', x2_103607, x1_103608)
        
        # Applying the binary operator 'div' (line 1386)
        result_div_103610 = python_operator(stypy.reporting.localization.Localization(__file__, 1386, 12), 'div', result_sub_103606, result_sub_103609)
        
        # Assigning a type to the variable 'm' (line 1386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1386, 8), 'm', result_div_103610)
        
        # Assigning a BinOp to a Name (line 1387):
        
        # Assigning a BinOp to a Name (line 1387):
        
        # Assigning a BinOp to a Name (line 1387):
        float_103611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1387, 13), 'float')
        # Getting the type of 'm' (line 1387)
        m_103612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 19), 'm')
        # Applying the binary operator 'div' (line 1387)
        result_div_103613 = python_operator(stypy.reporting.localization.Localization(__file__, 1387, 13), 'div', float_103611, m_103612)
        
        # Assigning a type to the variable 'pm' (line 1387)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1387, 8), 'pm', result_div_103613)
        
        # Assigning a Num to a Name (line 1388):
        
        # Assigning a Num to a Name (line 1388):
        
        # Assigning a Num to a Name (line 1388):
        int_103614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1388, 12), 'int')
        # Assigning a type to the variable 'a' (line 1388)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1388, 8), 'a', int_103614)
        
        # Assigning a BinOp to a Name (line 1389):
        
        # Assigning a BinOp to a Name (line 1389):
        
        # Assigning a BinOp to a Name (line 1389):
        int_103615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1389, 12), 'int')
        # Getting the type of 'y2' (line 1389)
        y2_103616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 17), 'y2')
        # Applying the binary operator '*' (line 1389)
        result_mul_103617 = python_operator(stypy.reporting.localization.Localization(__file__, 1389, 12), '*', int_103615, y2_103616)
        
        # Assigning a type to the variable 'b' (line 1389)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1389, 8), 'b', result_mul_103617)
        
        # Assigning a BinOp to a Name (line 1390):
        
        # Assigning a BinOp to a Name (line 1390):
        
        # Assigning a BinOp to a Name (line 1390):
        # Getting the type of 'y2' (line 1390)
        y2_103618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 12), 'y2')
        float_103619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1390, 18), 'float')
        # Applying the binary operator '**' (line 1390)
        result_pow_103620 = python_operator(stypy.reporting.localization.Localization(__file__, 1390, 12), '**', y2_103618, float_103619)
        
        # Getting the type of 'k' (line 1390)
        k_103621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 23), 'k')
        float_103622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1390, 28), 'float')
        # Applying the binary operator '**' (line 1390)
        result_pow_103623 = python_operator(stypy.reporting.localization.Localization(__file__, 1390, 23), '**', k_103621, float_103622)
        
        # Getting the type of 'pm' (line 1390)
        pm_103624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 33), 'pm')
        float_103625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1390, 39), 'float')
        # Applying the binary operator '**' (line 1390)
        result_pow_103626 = python_operator(stypy.reporting.localization.Localization(__file__, 1390, 33), '**', pm_103624, float_103625)
        
        # Applying the binary operator '*' (line 1390)
        result_mul_103627 = python_operator(stypy.reporting.localization.Localization(__file__, 1390, 23), '*', result_pow_103623, result_pow_103626)
        
        float_103628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1390, 45), 'float')
        # Getting the type of 'pm' (line 1390)
        pm_103629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 50), 'pm')
        float_103630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1390, 56), 'float')
        # Applying the binary operator '**' (line 1390)
        result_pow_103631 = python_operator(stypy.reporting.localization.Localization(__file__, 1390, 50), '**', pm_103629, float_103630)
        
        # Applying the binary operator '+' (line 1390)
        result_add_103632 = python_operator(stypy.reporting.localization.Localization(__file__, 1390, 45), '+', float_103628, result_pow_103631)
        
        # Applying the binary operator 'div' (line 1390)
        result_div_103633 = python_operator(stypy.reporting.localization.Localization(__file__, 1390, 42), 'div', result_mul_103627, result_add_103632)
        
        # Applying the binary operator '-' (line 1390)
        result_sub_103634 = python_operator(stypy.reporting.localization.Localization(__file__, 1390, 12), '-', result_pow_103620, result_div_103633)
        
        # Assigning a type to the variable 'c' (line 1390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1390, 8), 'c', result_sub_103634)
        
        # Assigning a BinOp to a Name (line 1392):
        
        # Assigning a BinOp to a Name (line 1392):
        
        # Assigning a BinOp to a Name (line 1392):
        
        # Getting the type of 'b' (line 1392)
        b_103635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 16), 'b')
        # Applying the 'usub' unary operator (line 1392)
        result___neg___103636 = python_operator(stypy.reporting.localization.Localization(__file__, 1392, 15), 'usub', b_103635)
        
        
        # Call to sqrt(...): (line 1392)
        # Processing the call arguments (line 1392)
        # Getting the type of 'b' (line 1392)
        b_103639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 30), 'b', False)
        int_103640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1392, 35), 'int')
        # Applying the binary operator '**' (line 1392)
        result_pow_103641 = python_operator(stypy.reporting.localization.Localization(__file__, 1392, 30), '**', b_103639, int_103640)
        
        int_103642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1392, 39), 'int')
        # Getting the type of 'a' (line 1392)
        a_103643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 43), 'a', False)
        # Applying the binary operator '*' (line 1392)
        result_mul_103644 = python_operator(stypy.reporting.localization.Localization(__file__, 1392, 39), '*', int_103642, a_103643)
        
        # Getting the type of 'c' (line 1392)
        c_103645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 47), 'c', False)
        # Applying the binary operator '*' (line 1392)
        result_mul_103646 = python_operator(stypy.reporting.localization.Localization(__file__, 1392, 45), '*', result_mul_103644, c_103645)
        
        # Applying the binary operator '-' (line 1392)
        result_sub_103647 = python_operator(stypy.reporting.localization.Localization(__file__, 1392, 30), '-', result_pow_103641, result_mul_103646)
        
        # Processing the call keyword arguments (line 1392)
        kwargs_103648 = {}
        # Getting the type of 'math' (line 1392)
        math_103637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 20), 'math', False)
        # Obtaining the member 'sqrt' of a type (line 1392)
        sqrt_103638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1392, 20), math_103637, 'sqrt')
        # Calling sqrt(args, kwargs) (line 1392)
        sqrt_call_result_103649 = invoke(stypy.reporting.localization.Localization(__file__, 1392, 20), sqrt_103638, *[result_sub_103647], **kwargs_103648)
        
        # Applying the binary operator '+' (line 1392)
        result_add_103650 = python_operator(stypy.reporting.localization.Localization(__file__, 1392, 15), '+', result___neg___103636, sqrt_call_result_103649)
        
        int_103651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1392, 54), 'int')
        # Getting the type of 'a' (line 1392)
        a_103652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 58), 'a')
        # Applying the binary operator '*' (line 1392)
        result_mul_103653 = python_operator(stypy.reporting.localization.Localization(__file__, 1392, 54), '*', int_103651, a_103652)
        
        # Applying the binary operator 'div' (line 1392)
        result_div_103654 = python_operator(stypy.reporting.localization.Localization(__file__, 1392, 14), 'div', result_add_103650, result_mul_103653)
        
        # Assigning a type to the variable 'y3a' (line 1392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1392, 8), 'y3a', result_div_103654)
        
        # Assigning a BinOp to a Name (line 1393):
        
        # Assigning a BinOp to a Name (line 1393):
        
        # Assigning a BinOp to a Name (line 1393):
        # Getting the type of 'y3a' (line 1393)
        y3a_103655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 15), 'y3a')
        # Getting the type of 'y2' (line 1393)
        y2_103656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 21), 'y2')
        # Applying the binary operator '-' (line 1393)
        result_sub_103657 = python_operator(stypy.reporting.localization.Localization(__file__, 1393, 15), '-', y3a_103655, y2_103656)
        
        # Getting the type of 'pm' (line 1393)
        pm_103658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 27), 'pm')
        # Applying the binary operator 'div' (line 1393)
        result_div_103659 = python_operator(stypy.reporting.localization.Localization(__file__, 1393, 14), 'div', result_sub_103657, pm_103658)
        
        # Getting the type of 'x2' (line 1393)
        x2_103660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 32), 'x2')
        # Applying the binary operator '+' (line 1393)
        result_add_103661 = python_operator(stypy.reporting.localization.Localization(__file__, 1393, 14), '+', result_div_103659, x2_103660)
        
        # Assigning a type to the variable 'x3a' (line 1393)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1393, 8), 'x3a', result_add_103661)
        
        # Assigning a BinOp to a Name (line 1395):
        
        # Assigning a BinOp to a Name (line 1395):
        
        # Assigning a BinOp to a Name (line 1395):
        
        # Getting the type of 'b' (line 1395)
        b_103662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 16), 'b')
        # Applying the 'usub' unary operator (line 1395)
        result___neg___103663 = python_operator(stypy.reporting.localization.Localization(__file__, 1395, 15), 'usub', b_103662)
        
        
        # Call to sqrt(...): (line 1395)
        # Processing the call arguments (line 1395)
        # Getting the type of 'b' (line 1395)
        b_103666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 30), 'b', False)
        int_103667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1395, 35), 'int')
        # Applying the binary operator '**' (line 1395)
        result_pow_103668 = python_operator(stypy.reporting.localization.Localization(__file__, 1395, 30), '**', b_103666, int_103667)
        
        int_103669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1395, 39), 'int')
        # Getting the type of 'a' (line 1395)
        a_103670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 43), 'a', False)
        # Applying the binary operator '*' (line 1395)
        result_mul_103671 = python_operator(stypy.reporting.localization.Localization(__file__, 1395, 39), '*', int_103669, a_103670)
        
        # Getting the type of 'c' (line 1395)
        c_103672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 47), 'c', False)
        # Applying the binary operator '*' (line 1395)
        result_mul_103673 = python_operator(stypy.reporting.localization.Localization(__file__, 1395, 45), '*', result_mul_103671, c_103672)
        
        # Applying the binary operator '-' (line 1395)
        result_sub_103674 = python_operator(stypy.reporting.localization.Localization(__file__, 1395, 30), '-', result_pow_103668, result_mul_103673)
        
        # Processing the call keyword arguments (line 1395)
        kwargs_103675 = {}
        # Getting the type of 'math' (line 1395)
        math_103664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 20), 'math', False)
        # Obtaining the member 'sqrt' of a type (line 1395)
        sqrt_103665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1395, 20), math_103664, 'sqrt')
        # Calling sqrt(args, kwargs) (line 1395)
        sqrt_call_result_103676 = invoke(stypy.reporting.localization.Localization(__file__, 1395, 20), sqrt_103665, *[result_sub_103674], **kwargs_103675)
        
        # Applying the binary operator '-' (line 1395)
        result_sub_103677 = python_operator(stypy.reporting.localization.Localization(__file__, 1395, 15), '-', result___neg___103663, sqrt_call_result_103676)
        
        int_103678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1395, 54), 'int')
        # Getting the type of 'a' (line 1395)
        a_103679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 58), 'a')
        # Applying the binary operator '*' (line 1395)
        result_mul_103680 = python_operator(stypy.reporting.localization.Localization(__file__, 1395, 54), '*', int_103678, a_103679)
        
        # Applying the binary operator 'div' (line 1395)
        result_div_103681 = python_operator(stypy.reporting.localization.Localization(__file__, 1395, 14), 'div', result_sub_103677, result_mul_103680)
        
        # Assigning a type to the variable 'y3b' (line 1395)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1395, 8), 'y3b', result_div_103681)
        
        # Assigning a BinOp to a Name (line 1396):
        
        # Assigning a BinOp to a Name (line 1396):
        
        # Assigning a BinOp to a Name (line 1396):
        # Getting the type of 'y3b' (line 1396)
        y3b_103682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1396, 15), 'y3b')
        # Getting the type of 'y2' (line 1396)
        y2_103683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1396, 21), 'y2')
        # Applying the binary operator '-' (line 1396)
        result_sub_103684 = python_operator(stypy.reporting.localization.Localization(__file__, 1396, 15), '-', y3b_103682, y2_103683)
        
        # Getting the type of 'pm' (line 1396)
        pm_103685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1396, 27), 'pm')
        # Applying the binary operator 'div' (line 1396)
        result_div_103686 = python_operator(stypy.reporting.localization.Localization(__file__, 1396, 14), 'div', result_sub_103684, pm_103685)
        
        # Getting the type of 'x2' (line 1396)
        x2_103687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1396, 32), 'x2')
        # Applying the binary operator '+' (line 1396)
        result_add_103688 = python_operator(stypy.reporting.localization.Localization(__file__, 1396, 14), '+', result_div_103686, x2_103687)
        
        # Assigning a type to the variable 'x3b' (line 1396)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1396, 8), 'x3b', result_add_103688)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1397)
        tuple_103689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1397, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1397)
        # Adding element type (line 1397)
        # Getting the type of 'x3a' (line 1397)
        x3a_103690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 15), 'x3a')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1397, 15), tuple_103689, x3a_103690)
        # Adding element type (line 1397)
        # Getting the type of 'y3a' (line 1397)
        y3a_103691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 20), 'y3a')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1397, 15), tuple_103689, y3a_103691)
        # Adding element type (line 1397)
        # Getting the type of 'x3b' (line 1397)
        x3b_103692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 25), 'x3b')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1397, 15), tuple_103689, x3b_103692)
        # Adding element type (line 1397)
        # Getting the type of 'y3b' (line 1397)
        y3b_103693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 30), 'y3b')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1397, 15), tuple_103689, y3b_103693)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1397)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1397, 8), 'stypy_return_type', tuple_103689)
        
        # ################# End of 'getpoints(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'getpoints' in the type store
        # Getting the type of 'stypy_return_type' (line 1372)
        stypy_return_type_103694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_103694)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'getpoints'
        return stypy_return_type_103694


# Assigning a type to the variable 'YAArrow' (line 1296)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1296, 0), 'YAArrow', YAArrow)
# Declaration of the 'CirclePolygon' class
# Getting the type of 'RegularPolygon' (line 1400)
RegularPolygon_103695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 20), 'RegularPolygon')

class CirclePolygon(RegularPolygon_103695, ):
    unicode_103696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1403, (-1)), 'unicode', u'\n    A polygon-approximation of a circle patch.\n    ')

    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 1404, 4, False)
        # Assigning a type to the variable 'self' (line 1405)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1405, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CirclePolygon.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        CirclePolygon.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CirclePolygon.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        CirclePolygon.stypy__str__.__dict__.__setitem__('stypy_function_name', 'CirclePolygon.stypy__str__')
        CirclePolygon.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        CirclePolygon.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        CirclePolygon.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CirclePolygon.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        CirclePolygon.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        CirclePolygon.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CirclePolygon.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CirclePolygon.stypy__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        unicode_103697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1405, 15), 'unicode', u'CirclePolygon(%d,%d)')
        # Getting the type of 'self' (line 1405)
        self_103698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 40), 'self')
        # Obtaining the member 'center' of a type (line 1405)
        center_103699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1405, 40), self_103698, 'center')
        # Applying the binary operator '%' (line 1405)
        result_mod_103700 = python_operator(stypy.reporting.localization.Localization(__file__, 1405, 15), '%', unicode_103697, center_103699)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1405)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1405, 8), 'stypy_return_type', result_mod_103700)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 1404)
        stypy_return_type_103701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_103701)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_103701


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_103702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1408, 34), 'int')
        int_103703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1409, 28), 'int')
        defaults = [int_103702, int_103703]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1407, 4, False)
        # Assigning a type to the variable 'self' (line 1408)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1408, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CirclePolygon.__init__', ['xy', 'radius', 'resolution'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['xy', 'radius', 'resolution'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_103704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1420, (-1)), 'unicode', u'\n        Create a circle at *xy* = (*x*, *y*) with given *radius*.\n        This circle is approximated by a regular polygon with\n        *resolution* sides.  For a smoother circle drawn with splines,\n        see :class:`~matplotlib.patches.Circle`.\n\n        Valid kwargs are:\n        %(Patch)s\n\n        ')
        
        # Call to __init__(...): (line 1421)
        # Processing the call arguments (line 1421)
        # Getting the type of 'self' (line 1421)
        self_103707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 32), 'self', False)
        # Getting the type of 'xy' (line 1421)
        xy_103708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 38), 'xy', False)
        # Getting the type of 'resolution' (line 1422)
        resolution_103709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1422, 32), 'resolution', False)
        # Getting the type of 'radius' (line 1423)
        radius_103710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1423, 32), 'radius', False)
        # Processing the call keyword arguments (line 1421)
        int_103711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1424, 44), 'int')
        keyword_103712 = int_103711
        # Getting the type of 'kwargs' (line 1425)
        kwargs_103713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 34), 'kwargs', False)
        kwargs_103714 = {'kwargs_103713': kwargs_103713, 'orientation': keyword_103712}
        # Getting the type of 'RegularPolygon' (line 1421)
        RegularPolygon_103705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 8), 'RegularPolygon', False)
        # Obtaining the member '__init__' of a type (line 1421)
        init___103706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1421, 8), RegularPolygon_103705, '__init__')
        # Calling __init__(args, kwargs) (line 1421)
        init___call_result_103715 = invoke(stypy.reporting.localization.Localization(__file__, 1421, 8), init___103706, *[self_103707, xy_103708, resolution_103709, radius_103710], **kwargs_103714)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'CirclePolygon' (line 1400)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1400, 0), 'CirclePolygon', CirclePolygon)
# Declaration of the 'Ellipse' class
# Getting the type of 'Patch' (line 1428)
Patch_103716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1428, 14), 'Patch')

class Ellipse(Patch_103716, ):
    unicode_103717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1431, (-1)), 'unicode', u'\n    A scale-free ellipse.\n    ')

    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 1432, 4, False)
        # Assigning a type to the variable 'self' (line 1433)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1433, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Ellipse.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        Ellipse.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Ellipse.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Ellipse.stypy__str__.__dict__.__setitem__('stypy_function_name', 'Ellipse.stypy__str__')
        Ellipse.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        Ellipse.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Ellipse.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Ellipse.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Ellipse.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Ellipse.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Ellipse.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Ellipse.stypy__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        
        # Assigning a Tuple to a Name (line 1433):
        
        # Assigning a Tuple to a Name (line 1433):
        
        # Assigning a Tuple to a Name (line 1433):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1433)
        tuple_103718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1433, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1433)
        # Adding element type (line 1433)
        
        # Obtaining the type of the subscript
        int_103719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1433, 28), 'int')
        # Getting the type of 'self' (line 1433)
        self_103720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1433, 16), 'self')
        # Obtaining the member 'center' of a type (line 1433)
        center_103721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1433, 16), self_103720, 'center')
        # Obtaining the member '__getitem__' of a type (line 1433)
        getitem___103722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1433, 16), center_103721, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1433)
        subscript_call_result_103723 = invoke(stypy.reporting.localization.Localization(__file__, 1433, 16), getitem___103722, int_103719)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1433, 16), tuple_103718, subscript_call_result_103723)
        # Adding element type (line 1433)
        
        # Obtaining the type of the subscript
        int_103724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1433, 44), 'int')
        # Getting the type of 'self' (line 1433)
        self_103725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1433, 32), 'self')
        # Obtaining the member 'center' of a type (line 1433)
        center_103726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1433, 32), self_103725, 'center')
        # Obtaining the member '__getitem__' of a type (line 1433)
        getitem___103727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1433, 32), center_103726, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1433)
        subscript_call_result_103728 = invoke(stypy.reporting.localization.Localization(__file__, 1433, 32), getitem___103727, int_103724)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1433, 16), tuple_103718, subscript_call_result_103728)
        # Adding element type (line 1433)
        # Getting the type of 'self' (line 1434)
        self_103729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 16), 'self')
        # Obtaining the member 'width' of a type (line 1434)
        width_103730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1434, 16), self_103729, 'width')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1433, 16), tuple_103718, width_103730)
        # Adding element type (line 1433)
        # Getting the type of 'self' (line 1434)
        self_103731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 28), 'self')
        # Obtaining the member 'height' of a type (line 1434)
        height_103732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1434, 28), self_103731, 'height')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1433, 16), tuple_103718, height_103732)
        # Adding element type (line 1433)
        # Getting the type of 'self' (line 1434)
        self_103733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 41), 'self')
        # Obtaining the member 'angle' of a type (line 1434)
        angle_103734 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1434, 41), self_103733, 'angle')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1433, 16), tuple_103718, angle_103734)
        
        # Assigning a type to the variable 'pars' (line 1433)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1433, 8), 'pars', tuple_103718)
        
        # Assigning a Str to a Name (line 1435):
        
        # Assigning a Str to a Name (line 1435):
        
        # Assigning a Str to a Name (line 1435):
        unicode_103735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1435, 14), 'unicode', u'Ellipse(xy=(%s, %s), width=%s, height=%s, angle=%s)')
        # Assigning a type to the variable 'fmt' (line 1435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1435, 8), 'fmt', unicode_103735)
        # Getting the type of 'fmt' (line 1436)
        fmt_103736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1436, 15), 'fmt')
        # Getting the type of 'pars' (line 1436)
        pars_103737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1436, 21), 'pars')
        # Applying the binary operator '%' (line 1436)
        result_mod_103738 = python_operator(stypy.reporting.localization.Localization(__file__, 1436, 15), '%', fmt_103736, pars_103737)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1436)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1436, 8), 'stypy_return_type', result_mod_103738)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 1432)
        stypy_return_type_103739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1432, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_103739)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_103739


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        float_103740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1439, 48), 'float')
        defaults = [float_103740]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1438, 4, False)
        # Assigning a type to the variable 'self' (line 1439)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1439, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Ellipse.__init__', ['xy', 'width', 'height', 'angle'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['xy', 'width', 'height', 'angle'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_103741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1455, (-1)), 'unicode', u'\n        *xy*\n          center of ellipse\n\n        *width*\n          total length (diameter) of horizontal axis\n\n        *height*\n          total length (diameter) of vertical axis\n\n        *angle*\n          rotation in degrees (anti-clockwise)\n\n        Valid kwargs are:\n        %(Patch)s\n        ')
        
        # Call to __init__(...): (line 1456)
        # Processing the call arguments (line 1456)
        # Getting the type of 'self' (line 1456)
        self_103744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 23), 'self', False)
        # Processing the call keyword arguments (line 1456)
        # Getting the type of 'kwargs' (line 1456)
        kwargs_103745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 31), 'kwargs', False)
        kwargs_103746 = {'kwargs_103745': kwargs_103745}
        # Getting the type of 'Patch' (line 1456)
        Patch_103742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 8), 'Patch', False)
        # Obtaining the member '__init__' of a type (line 1456)
        init___103743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1456, 8), Patch_103742, '__init__')
        # Calling __init__(args, kwargs) (line 1456)
        init___call_result_103747 = invoke(stypy.reporting.localization.Localization(__file__, 1456, 8), init___103743, *[self_103744], **kwargs_103746)
        
        
        # Assigning a Name to a Attribute (line 1458):
        
        # Assigning a Name to a Attribute (line 1458):
        
        # Assigning a Name to a Attribute (line 1458):
        # Getting the type of 'xy' (line 1458)
        xy_103748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 22), 'xy')
        # Getting the type of 'self' (line 1458)
        self_103749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 8), 'self')
        # Setting the type of the member 'center' of a type (line 1458)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1458, 8), self_103749, 'center', xy_103748)
        
        # Assigning a Tuple to a Tuple (line 1459):
        
        # Assigning a Name to a Name (line 1459):
        
        # Assigning a Name to a Name (line 1459):
        # Getting the type of 'width' (line 1459)
        width_103750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 34), 'width')
        # Assigning a type to the variable 'tuple_assignment_100408' (line 1459)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1459, 8), 'tuple_assignment_100408', width_103750)
        
        # Assigning a Name to a Name (line 1459):
        
        # Assigning a Name to a Name (line 1459):
        # Getting the type of 'height' (line 1459)
        height_103751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 41), 'height')
        # Assigning a type to the variable 'tuple_assignment_100409' (line 1459)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1459, 8), 'tuple_assignment_100409', height_103751)
        
        # Assigning a Name to a Attribute (line 1459):
        
        # Assigning a Name to a Attribute (line 1459):
        # Getting the type of 'tuple_assignment_100408' (line 1459)
        tuple_assignment_100408_103752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 8), 'tuple_assignment_100408')
        # Getting the type of 'self' (line 1459)
        self_103753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 8), 'self')
        # Setting the type of the member 'width' of a type (line 1459)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1459, 8), self_103753, 'width', tuple_assignment_100408_103752)
        
        # Assigning a Name to a Attribute (line 1459):
        
        # Assigning a Name to a Attribute (line 1459):
        # Getting the type of 'tuple_assignment_100409' (line 1459)
        tuple_assignment_100409_103754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 8), 'tuple_assignment_100409')
        # Getting the type of 'self' (line 1459)
        self_103755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 20), 'self')
        # Setting the type of the member 'height' of a type (line 1459)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1459, 20), self_103755, 'height', tuple_assignment_100409_103754)
        
        # Assigning a Name to a Attribute (line 1460):
        
        # Assigning a Name to a Attribute (line 1460):
        
        # Assigning a Name to a Attribute (line 1460):
        # Getting the type of 'angle' (line 1460)
        angle_103756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 21), 'angle')
        # Getting the type of 'self' (line 1460)
        self_103757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 8), 'self')
        # Setting the type of the member 'angle' of a type (line 1460)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1460, 8), self_103757, 'angle', angle_103756)
        
        # Assigning a Call to a Attribute (line 1461):
        
        # Assigning a Call to a Attribute (line 1461):
        
        # Assigning a Call to a Attribute (line 1461):
        
        # Call to unit_circle(...): (line 1461)
        # Processing the call keyword arguments (line 1461)
        kwargs_103760 = {}
        # Getting the type of 'Path' (line 1461)
        Path_103758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 21), 'Path', False)
        # Obtaining the member 'unit_circle' of a type (line 1461)
        unit_circle_103759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1461, 21), Path_103758, 'unit_circle')
        # Calling unit_circle(args, kwargs) (line 1461)
        unit_circle_call_result_103761 = invoke(stypy.reporting.localization.Localization(__file__, 1461, 21), unit_circle_103759, *[], **kwargs_103760)
        
        # Getting the type of 'self' (line 1461)
        self_103762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 8), 'self')
        # Setting the type of the member '_path' of a type (line 1461)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1461, 8), self_103762, '_path', unit_circle_call_result_103761)
        
        # Assigning a Call to a Attribute (line 1463):
        
        # Assigning a Call to a Attribute (line 1463):
        
        # Assigning a Call to a Attribute (line 1463):
        
        # Call to IdentityTransform(...): (line 1463)
        # Processing the call keyword arguments (line 1463)
        kwargs_103765 = {}
        # Getting the type of 'transforms' (line 1463)
        transforms_103763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1463, 32), 'transforms', False)
        # Obtaining the member 'IdentityTransform' of a type (line 1463)
        IdentityTransform_103764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1463, 32), transforms_103763, 'IdentityTransform')
        # Calling IdentityTransform(args, kwargs) (line 1463)
        IdentityTransform_call_result_103766 = invoke(stypy.reporting.localization.Localization(__file__, 1463, 32), IdentityTransform_103764, *[], **kwargs_103765)
        
        # Getting the type of 'self' (line 1463)
        self_103767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1463, 8), 'self')
        # Setting the type of the member '_patch_transform' of a type (line 1463)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1463, 8), self_103767, '_patch_transform', IdentityTransform_call_result_103766)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _recompute_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_recompute_transform'
        module_type_store = module_type_store.open_function_context('_recompute_transform', 1465, 4, False)
        # Assigning a type to the variable 'self' (line 1466)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1466, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Ellipse._recompute_transform.__dict__.__setitem__('stypy_localization', localization)
        Ellipse._recompute_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Ellipse._recompute_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        Ellipse._recompute_transform.__dict__.__setitem__('stypy_function_name', 'Ellipse._recompute_transform')
        Ellipse._recompute_transform.__dict__.__setitem__('stypy_param_names_list', [])
        Ellipse._recompute_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        Ellipse._recompute_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Ellipse._recompute_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        Ellipse._recompute_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        Ellipse._recompute_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Ellipse._recompute_transform.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Ellipse._recompute_transform', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_recompute_transform', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_recompute_transform(...)' code ##################

        unicode_103768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1470, (-1)), 'unicode', u'NOTE: This cannot be called until after this has been added\n                 to an Axes, otherwise unit conversion will fail. This\n                 maxes it very important to call the accessor method and\n                 not directly access the transformation member variable.\n        ')
        
        # Assigning a Tuple to a Name (line 1471):
        
        # Assigning a Tuple to a Name (line 1471):
        
        # Assigning a Tuple to a Name (line 1471):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1471)
        tuple_103769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1471, 18), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1471)
        # Adding element type (line 1471)
        
        # Call to convert_xunits(...): (line 1471)
        # Processing the call arguments (line 1471)
        
        # Obtaining the type of the subscript
        int_103772 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1471, 50), 'int')
        # Getting the type of 'self' (line 1471)
        self_103773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 38), 'self', False)
        # Obtaining the member 'center' of a type (line 1471)
        center_103774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1471, 38), self_103773, 'center')
        # Obtaining the member '__getitem__' of a type (line 1471)
        getitem___103775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1471, 38), center_103774, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1471)
        subscript_call_result_103776 = invoke(stypy.reporting.localization.Localization(__file__, 1471, 38), getitem___103775, int_103772)
        
        # Processing the call keyword arguments (line 1471)
        kwargs_103777 = {}
        # Getting the type of 'self' (line 1471)
        self_103770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 18), 'self', False)
        # Obtaining the member 'convert_xunits' of a type (line 1471)
        convert_xunits_103771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1471, 18), self_103770, 'convert_xunits')
        # Calling convert_xunits(args, kwargs) (line 1471)
        convert_xunits_call_result_103778 = invoke(stypy.reporting.localization.Localization(__file__, 1471, 18), convert_xunits_103771, *[subscript_call_result_103776], **kwargs_103777)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1471, 18), tuple_103769, convert_xunits_call_result_103778)
        # Adding element type (line 1471)
        
        # Call to convert_yunits(...): (line 1472)
        # Processing the call arguments (line 1472)
        
        # Obtaining the type of the subscript
        int_103781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1472, 50), 'int')
        # Getting the type of 'self' (line 1472)
        self_103782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 38), 'self', False)
        # Obtaining the member 'center' of a type (line 1472)
        center_103783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1472, 38), self_103782, 'center')
        # Obtaining the member '__getitem__' of a type (line 1472)
        getitem___103784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1472, 38), center_103783, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1472)
        subscript_call_result_103785 = invoke(stypy.reporting.localization.Localization(__file__, 1472, 38), getitem___103784, int_103781)
        
        # Processing the call keyword arguments (line 1472)
        kwargs_103786 = {}
        # Getting the type of 'self' (line 1472)
        self_103779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 18), 'self', False)
        # Obtaining the member 'convert_yunits' of a type (line 1472)
        convert_yunits_103780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1472, 18), self_103779, 'convert_yunits')
        # Calling convert_yunits(args, kwargs) (line 1472)
        convert_yunits_call_result_103787 = invoke(stypy.reporting.localization.Localization(__file__, 1472, 18), convert_yunits_103780, *[subscript_call_result_103785], **kwargs_103786)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1471, 18), tuple_103769, convert_yunits_call_result_103787)
        
        # Assigning a type to the variable 'center' (line 1471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1471, 8), 'center', tuple_103769)
        
        # Assigning a Call to a Name (line 1473):
        
        # Assigning a Call to a Name (line 1473):
        
        # Assigning a Call to a Name (line 1473):
        
        # Call to convert_xunits(...): (line 1473)
        # Processing the call arguments (line 1473)
        # Getting the type of 'self' (line 1473)
        self_103790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 36), 'self', False)
        # Obtaining the member 'width' of a type (line 1473)
        width_103791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1473, 36), self_103790, 'width')
        # Processing the call keyword arguments (line 1473)
        kwargs_103792 = {}
        # Getting the type of 'self' (line 1473)
        self_103788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 16), 'self', False)
        # Obtaining the member 'convert_xunits' of a type (line 1473)
        convert_xunits_103789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1473, 16), self_103788, 'convert_xunits')
        # Calling convert_xunits(args, kwargs) (line 1473)
        convert_xunits_call_result_103793 = invoke(stypy.reporting.localization.Localization(__file__, 1473, 16), convert_xunits_103789, *[width_103791], **kwargs_103792)
        
        # Assigning a type to the variable 'width' (line 1473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1473, 8), 'width', convert_xunits_call_result_103793)
        
        # Assigning a Call to a Name (line 1474):
        
        # Assigning a Call to a Name (line 1474):
        
        # Assigning a Call to a Name (line 1474):
        
        # Call to convert_yunits(...): (line 1474)
        # Processing the call arguments (line 1474)
        # Getting the type of 'self' (line 1474)
        self_103796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 37), 'self', False)
        # Obtaining the member 'height' of a type (line 1474)
        height_103797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1474, 37), self_103796, 'height')
        # Processing the call keyword arguments (line 1474)
        kwargs_103798 = {}
        # Getting the type of 'self' (line 1474)
        self_103794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 17), 'self', False)
        # Obtaining the member 'convert_yunits' of a type (line 1474)
        convert_yunits_103795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1474, 17), self_103794, 'convert_yunits')
        # Calling convert_yunits(args, kwargs) (line 1474)
        convert_yunits_call_result_103799 = invoke(stypy.reporting.localization.Localization(__file__, 1474, 17), convert_yunits_103795, *[height_103797], **kwargs_103798)
        
        # Assigning a type to the variable 'height' (line 1474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1474, 8), 'height', convert_yunits_call_result_103799)
        
        # Assigning a Call to a Attribute (line 1475):
        
        # Assigning a Call to a Attribute (line 1475):
        
        # Assigning a Call to a Attribute (line 1475):
        
        # Call to translate(...): (line 1475)
        # Getting the type of 'center' (line 1478)
        center_103819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 24), 'center', False)
        # Processing the call keyword arguments (line 1475)
        kwargs_103820 = {}
        
        # Call to rotate_deg(...): (line 1475)
        # Processing the call arguments (line 1475)
        # Getting the type of 'self' (line 1477)
        self_103814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 24), 'self', False)
        # Obtaining the member 'angle' of a type (line 1477)
        angle_103815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1477, 24), self_103814, 'angle')
        # Processing the call keyword arguments (line 1475)
        kwargs_103816 = {}
        
        # Call to scale(...): (line 1475)
        # Processing the call arguments (line 1475)
        # Getting the type of 'width' (line 1476)
        width_103805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 19), 'width', False)
        float_103806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1476, 27), 'float')
        # Applying the binary operator '*' (line 1476)
        result_mul_103807 = python_operator(stypy.reporting.localization.Localization(__file__, 1476, 19), '*', width_103805, float_103806)
        
        # Getting the type of 'height' (line 1476)
        height_103808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 32), 'height', False)
        float_103809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1476, 41), 'float')
        # Applying the binary operator '*' (line 1476)
        result_mul_103810 = python_operator(stypy.reporting.localization.Localization(__file__, 1476, 32), '*', height_103808, float_103809)
        
        # Processing the call keyword arguments (line 1475)
        kwargs_103811 = {}
        
        # Call to Affine2D(...): (line 1475)
        # Processing the call keyword arguments (line 1475)
        kwargs_103802 = {}
        # Getting the type of 'transforms' (line 1475)
        transforms_103800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 32), 'transforms', False)
        # Obtaining the member 'Affine2D' of a type (line 1475)
        Affine2D_103801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1475, 32), transforms_103800, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 1475)
        Affine2D_call_result_103803 = invoke(stypy.reporting.localization.Localization(__file__, 1475, 32), Affine2D_103801, *[], **kwargs_103802)
        
        # Obtaining the member 'scale' of a type (line 1475)
        scale_103804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1475, 32), Affine2D_call_result_103803, 'scale')
        # Calling scale(args, kwargs) (line 1475)
        scale_call_result_103812 = invoke(stypy.reporting.localization.Localization(__file__, 1475, 32), scale_103804, *[result_mul_103807, result_mul_103810], **kwargs_103811)
        
        # Obtaining the member 'rotate_deg' of a type (line 1475)
        rotate_deg_103813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1475, 32), scale_call_result_103812, 'rotate_deg')
        # Calling rotate_deg(args, kwargs) (line 1475)
        rotate_deg_call_result_103817 = invoke(stypy.reporting.localization.Localization(__file__, 1475, 32), rotate_deg_103813, *[angle_103815], **kwargs_103816)
        
        # Obtaining the member 'translate' of a type (line 1475)
        translate_103818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1475, 32), rotate_deg_call_result_103817, 'translate')
        # Calling translate(args, kwargs) (line 1475)
        translate_call_result_103821 = invoke(stypy.reporting.localization.Localization(__file__, 1475, 32), translate_103818, *[center_103819], **kwargs_103820)
        
        # Getting the type of 'self' (line 1475)
        self_103822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 8), 'self')
        # Setting the type of the member '_patch_transform' of a type (line 1475)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1475, 8), self_103822, '_patch_transform', translate_call_result_103821)
        
        # ################# End of '_recompute_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_recompute_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 1465)
        stypy_return_type_103823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1465, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_103823)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_recompute_transform'
        return stypy_return_type_103823


    @norecursion
    def get_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_path'
        module_type_store = module_type_store.open_function_context('get_path', 1480, 4, False)
        # Assigning a type to the variable 'self' (line 1481)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1481, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Ellipse.get_path.__dict__.__setitem__('stypy_localization', localization)
        Ellipse.get_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Ellipse.get_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        Ellipse.get_path.__dict__.__setitem__('stypy_function_name', 'Ellipse.get_path')
        Ellipse.get_path.__dict__.__setitem__('stypy_param_names_list', [])
        Ellipse.get_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        Ellipse.get_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Ellipse.get_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        Ellipse.get_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        Ellipse.get_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Ellipse.get_path.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Ellipse.get_path', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_path', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_path(...)' code ##################

        unicode_103824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1483, (-1)), 'unicode', u'\n        Return the vertices of the rectangle\n        ')
        # Getting the type of 'self' (line 1484)
        self_103825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1484, 15), 'self')
        # Obtaining the member '_path' of a type (line 1484)
        _path_103826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1484, 15), self_103825, '_path')
        # Assigning a type to the variable 'stypy_return_type' (line 1484)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1484, 8), 'stypy_return_type', _path_103826)
        
        # ################# End of 'get_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_path' in the type store
        # Getting the type of 'stypy_return_type' (line 1480)
        stypy_return_type_103827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1480, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_103827)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_path'
        return stypy_return_type_103827


    @norecursion
    def get_patch_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_patch_transform'
        module_type_store = module_type_store.open_function_context('get_patch_transform', 1486, 4, False)
        # Assigning a type to the variable 'self' (line 1487)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1487, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Ellipse.get_patch_transform.__dict__.__setitem__('stypy_localization', localization)
        Ellipse.get_patch_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Ellipse.get_patch_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        Ellipse.get_patch_transform.__dict__.__setitem__('stypy_function_name', 'Ellipse.get_patch_transform')
        Ellipse.get_patch_transform.__dict__.__setitem__('stypy_param_names_list', [])
        Ellipse.get_patch_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        Ellipse.get_patch_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Ellipse.get_patch_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        Ellipse.get_patch_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        Ellipse.get_patch_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Ellipse.get_patch_transform.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Ellipse.get_patch_transform', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_patch_transform', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_patch_transform(...)' code ##################

        
        # Call to _recompute_transform(...): (line 1487)
        # Processing the call keyword arguments (line 1487)
        kwargs_103830 = {}
        # Getting the type of 'self' (line 1487)
        self_103828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1487, 8), 'self', False)
        # Obtaining the member '_recompute_transform' of a type (line 1487)
        _recompute_transform_103829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1487, 8), self_103828, '_recompute_transform')
        # Calling _recompute_transform(args, kwargs) (line 1487)
        _recompute_transform_call_result_103831 = invoke(stypy.reporting.localization.Localization(__file__, 1487, 8), _recompute_transform_103829, *[], **kwargs_103830)
        
        # Getting the type of 'self' (line 1488)
        self_103832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1488, 15), 'self')
        # Obtaining the member '_patch_transform' of a type (line 1488)
        _patch_transform_103833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1488, 15), self_103832, '_patch_transform')
        # Assigning a type to the variable 'stypy_return_type' (line 1488)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1488, 8), 'stypy_return_type', _patch_transform_103833)
        
        # ################# End of 'get_patch_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_patch_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 1486)
        stypy_return_type_103834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_103834)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_patch_transform'
        return stypy_return_type_103834


# Assigning a type to the variable 'Ellipse' (line 1428)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1428, 0), 'Ellipse', Ellipse)
# Declaration of the 'Circle' class
# Getting the type of 'Ellipse' (line 1491)
Ellipse_103835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 13), 'Ellipse')

class Circle(Ellipse_103835, ):
    unicode_103836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1494, (-1)), 'unicode', u'\n    A circle patch.\n    ')

    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 1495, 4, False)
        # Assigning a type to the variable 'self' (line 1496)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1496, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Circle.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        Circle.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Circle.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Circle.stypy__str__.__dict__.__setitem__('stypy_function_name', 'Circle.stypy__str__')
        Circle.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        Circle.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Circle.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Circle.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Circle.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Circle.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Circle.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Circle.stypy__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        
        # Assigning a Tuple to a Name (line 1496):
        
        # Assigning a Tuple to a Name (line 1496):
        
        # Assigning a Tuple to a Name (line 1496):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1496)
        tuple_103837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1496, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1496)
        # Adding element type (line 1496)
        
        # Obtaining the type of the subscript
        int_103838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1496, 27), 'int')
        # Getting the type of 'self' (line 1496)
        self_103839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 15), 'self')
        # Obtaining the member 'center' of a type (line 1496)
        center_103840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1496, 15), self_103839, 'center')
        # Obtaining the member '__getitem__' of a type (line 1496)
        getitem___103841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1496, 15), center_103840, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1496)
        subscript_call_result_103842 = invoke(stypy.reporting.localization.Localization(__file__, 1496, 15), getitem___103841, int_103838)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1496, 15), tuple_103837, subscript_call_result_103842)
        # Adding element type (line 1496)
        
        # Obtaining the type of the subscript
        int_103843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1496, 43), 'int')
        # Getting the type of 'self' (line 1496)
        self_103844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 31), 'self')
        # Obtaining the member 'center' of a type (line 1496)
        center_103845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1496, 31), self_103844, 'center')
        # Obtaining the member '__getitem__' of a type (line 1496)
        getitem___103846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1496, 31), center_103845, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1496)
        subscript_call_result_103847 = invoke(stypy.reporting.localization.Localization(__file__, 1496, 31), getitem___103846, int_103843)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1496, 15), tuple_103837, subscript_call_result_103847)
        # Adding element type (line 1496)
        # Getting the type of 'self' (line 1496)
        self_103848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 47), 'self')
        # Obtaining the member 'radius' of a type (line 1496)
        radius_103849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1496, 47), self_103848, 'radius')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1496, 15), tuple_103837, radius_103849)
        
        # Assigning a type to the variable 'pars' (line 1496)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1496, 8), 'pars', tuple_103837)
        
        # Assigning a Str to a Name (line 1497):
        
        # Assigning a Str to a Name (line 1497):
        
        # Assigning a Str to a Name (line 1497):
        unicode_103850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1497, 14), 'unicode', u'Circle(xy=(%g, %g), radius=%g)')
        # Assigning a type to the variable 'fmt' (line 1497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1497, 8), 'fmt', unicode_103850)
        # Getting the type of 'fmt' (line 1498)
        fmt_103851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 15), 'fmt')
        # Getting the type of 'pars' (line 1498)
        pars_103852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 21), 'pars')
        # Applying the binary operator '%' (line 1498)
        result_mod_103853 = python_operator(stypy.reporting.localization.Localization(__file__, 1498, 15), '%', fmt_103851, pars_103852)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1498)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1498, 8), 'stypy_return_type', result_mod_103853)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 1495)
        stypy_return_type_103854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1495, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_103854)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_103854


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_103855 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1501, 34), 'int')
        defaults = [int_103855]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1500, 4, False)
        # Assigning a type to the variable 'self' (line 1501)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1501, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Circle.__init__', ['xy', 'radius'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['xy', 'radius'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_103856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1511, (-1)), 'unicode', u'\n        Create true circle at center *xy* = (*x*, *y*) with given\n        *radius*.  Unlike :class:`~matplotlib.patches.CirclePolygon`\n        which is a polygonal approximation, this uses B\xe9zier splines\n        and is much closer to a scale-free circle.\n\n        Valid kwargs are:\n        %(Patch)s\n\n        ')
        
        # Call to __init__(...): (line 1512)
        # Processing the call arguments (line 1512)
        # Getting the type of 'self' (line 1512)
        self_103859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 25), 'self', False)
        # Getting the type of 'xy' (line 1512)
        xy_103860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 31), 'xy', False)
        # Getting the type of 'radius' (line 1512)
        radius_103861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 35), 'radius', False)
        int_103862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1512, 44), 'int')
        # Applying the binary operator '*' (line 1512)
        result_mul_103863 = python_operator(stypy.reporting.localization.Localization(__file__, 1512, 35), '*', radius_103861, int_103862)
        
        # Getting the type of 'radius' (line 1512)
        radius_103864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 47), 'radius', False)
        int_103865 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1512, 56), 'int')
        # Applying the binary operator '*' (line 1512)
        result_mul_103866 = python_operator(stypy.reporting.localization.Localization(__file__, 1512, 47), '*', radius_103864, int_103865)
        
        # Processing the call keyword arguments (line 1512)
        # Getting the type of 'kwargs' (line 1512)
        kwargs_103867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 61), 'kwargs', False)
        kwargs_103868 = {'kwargs_103867': kwargs_103867}
        # Getting the type of 'Ellipse' (line 1512)
        Ellipse_103857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 8), 'Ellipse', False)
        # Obtaining the member '__init__' of a type (line 1512)
        init___103858 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1512, 8), Ellipse_103857, '__init__')
        # Calling __init__(args, kwargs) (line 1512)
        init___call_result_103869 = invoke(stypy.reporting.localization.Localization(__file__, 1512, 8), init___103858, *[self_103859, xy_103860, result_mul_103863, result_mul_103866], **kwargs_103868)
        
        
        # Assigning a Name to a Attribute (line 1513):
        
        # Assigning a Name to a Attribute (line 1513):
        
        # Assigning a Name to a Attribute (line 1513):
        # Getting the type of 'radius' (line 1513)
        radius_103870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1513, 22), 'radius')
        # Getting the type of 'self' (line 1513)
        self_103871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1513, 8), 'self')
        # Setting the type of the member 'radius' of a type (line 1513)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1513, 8), self_103871, 'radius', radius_103870)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def set_radius(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_radius'
        module_type_store = module_type_store.open_function_context('set_radius', 1515, 4, False)
        # Assigning a type to the variable 'self' (line 1516)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1516, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Circle.set_radius.__dict__.__setitem__('stypy_localization', localization)
        Circle.set_radius.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Circle.set_radius.__dict__.__setitem__('stypy_type_store', module_type_store)
        Circle.set_radius.__dict__.__setitem__('stypy_function_name', 'Circle.set_radius')
        Circle.set_radius.__dict__.__setitem__('stypy_param_names_list', ['radius'])
        Circle.set_radius.__dict__.__setitem__('stypy_varargs_param_name', None)
        Circle.set_radius.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Circle.set_radius.__dict__.__setitem__('stypy_call_defaults', defaults)
        Circle.set_radius.__dict__.__setitem__('stypy_call_varargs', varargs)
        Circle.set_radius.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Circle.set_radius.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Circle.set_radius', ['radius'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_radius', localization, ['radius'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_radius(...)' code ##################

        unicode_103872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1520, (-1)), 'unicode', u'\n        Set the radius of the circle\n\n        ACCEPTS: float\n        ')
        
        # Multiple assignment of 2 elements.
        
        # Assigning a BinOp to a Attribute (line 1521):
        
        # Assigning a BinOp to a Attribute (line 1521):
        int_103873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1521, 35), 'int')
        # Getting the type of 'radius' (line 1521)
        radius_103874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 39), 'radius')
        # Applying the binary operator '*' (line 1521)
        result_mul_103875 = python_operator(stypy.reporting.localization.Localization(__file__, 1521, 35), '*', int_103873, radius_103874)
        
        # Getting the type of 'self' (line 1521)
        self_103876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 21), 'self')
        # Setting the type of the member 'height' of a type (line 1521)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1521, 21), self_103876, 'height', result_mul_103875)
        
        # Assigning a Attribute to a Attribute (line 1521):
        
        # Assigning a Attribute to a Attribute (line 1521):
        # Getting the type of 'self' (line 1521)
        self_103877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 21), 'self')
        # Obtaining the member 'height' of a type (line 1521)
        height_103878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1521, 21), self_103877, 'height')
        # Getting the type of 'self' (line 1521)
        self_103879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 8), 'self')
        # Setting the type of the member 'width' of a type (line 1521)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1521, 8), self_103879, 'width', height_103878)
        
        # Assigning a Name to a Attribute (line 1522):
        
        # Assigning a Name to a Attribute (line 1522):
        
        # Assigning a Name to a Attribute (line 1522):
        # Getting the type of 'True' (line 1522)
        True_103880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1522, 21), 'True')
        # Getting the type of 'self' (line 1522)
        self_103881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1522, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1522)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1522, 8), self_103881, 'stale', True_103880)
        
        # ################# End of 'set_radius(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_radius' in the type store
        # Getting the type of 'stypy_return_type' (line 1515)
        stypy_return_type_103882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1515, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_103882)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_radius'
        return stypy_return_type_103882


    @norecursion
    def get_radius(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_radius'
        module_type_store = module_type_store.open_function_context('get_radius', 1524, 4, False)
        # Assigning a type to the variable 'self' (line 1525)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1525, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Circle.get_radius.__dict__.__setitem__('stypy_localization', localization)
        Circle.get_radius.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Circle.get_radius.__dict__.__setitem__('stypy_type_store', module_type_store)
        Circle.get_radius.__dict__.__setitem__('stypy_function_name', 'Circle.get_radius')
        Circle.get_radius.__dict__.__setitem__('stypy_param_names_list', [])
        Circle.get_radius.__dict__.__setitem__('stypy_varargs_param_name', None)
        Circle.get_radius.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Circle.get_radius.__dict__.__setitem__('stypy_call_defaults', defaults)
        Circle.get_radius.__dict__.__setitem__('stypy_call_varargs', varargs)
        Circle.get_radius.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Circle.get_radius.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Circle.get_radius', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_radius', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_radius(...)' code ##################

        unicode_103883 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1525, 8), 'unicode', u'return the radius of the circle')
        # Getting the type of 'self' (line 1526)
        self_103884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 15), 'self')
        # Obtaining the member 'width' of a type (line 1526)
        width_103885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1526, 15), self_103884, 'width')
        float_103886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1526, 28), 'float')
        # Applying the binary operator 'div' (line 1526)
        result_div_103887 = python_operator(stypy.reporting.localization.Localization(__file__, 1526, 15), 'div', width_103885, float_103886)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1526)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1526, 8), 'stypy_return_type', result_div_103887)
        
        # ################# End of 'get_radius(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_radius' in the type store
        # Getting the type of 'stypy_return_type' (line 1524)
        stypy_return_type_103888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_103888)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_radius'
        return stypy_return_type_103888

    
    # Assigning a Call to a Name (line 1528):
    
    # Assigning a Call to a Name (line 1528):

# Assigning a type to the variable 'Circle' (line 1491)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1491, 0), 'Circle', Circle)

# Assigning a Call to a Name (line 1528):

# Call to property(...): (line 1528)
# Processing the call arguments (line 1528)
# Getting the type of 'Circle'
Circle_103890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Circle', False)
# Obtaining the member 'get_radius' of a type
get_radius_103891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Circle_103890, 'get_radius')
# Getting the type of 'Circle'
Circle_103892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Circle', False)
# Obtaining the member 'set_radius' of a type
set_radius_103893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Circle_103892, 'set_radius')
# Processing the call keyword arguments (line 1528)
kwargs_103894 = {}
# Getting the type of 'property' (line 1528)
property_103889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 13), 'property', False)
# Calling property(args, kwargs) (line 1528)
property_call_result_103895 = invoke(stypy.reporting.localization.Localization(__file__, 1528, 13), property_103889, *[get_radius_103891, set_radius_103893], **kwargs_103894)

# Getting the type of 'Circle'
Circle_103896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Circle')
# Setting the type of the member 'radius' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Circle_103896, 'radius', property_call_result_103895)
# Declaration of the 'Arc' class
# Getting the type of 'Ellipse' (line 1531)
Ellipse_103897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 10), 'Ellipse')

class Arc(Ellipse_103897, ):
    unicode_103898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1541, (-1)), 'unicode', u'\n    An elliptical arc.  Because it performs various optimizations, it\n    can not be filled.\n\n    The arc must be used in an :class:`~matplotlib.axes.Axes`\n    instance---it can not be added directly to a\n    :class:`~matplotlib.figure.Figure`---because it is optimized to\n    only render the segments that are inside the axes bounding box\n    with high resolution.\n    ')

    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 1542, 4, False)
        # Assigning a type to the variable 'self' (line 1543)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1543, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Arc.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        Arc.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Arc.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Arc.stypy__str__.__dict__.__setitem__('stypy_function_name', 'Arc.stypy__str__')
        Arc.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        Arc.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Arc.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Arc.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Arc.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Arc.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Arc.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Arc.stypy__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        
        # Assigning a Tuple to a Name (line 1543):
        
        # Assigning a Tuple to a Name (line 1543):
        
        # Assigning a Tuple to a Name (line 1543):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1543)
        tuple_103899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1543, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1543)
        # Adding element type (line 1543)
        
        # Obtaining the type of the subscript
        int_103900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1543, 28), 'int')
        # Getting the type of 'self' (line 1543)
        self_103901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 16), 'self')
        # Obtaining the member 'center' of a type (line 1543)
        center_103902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1543, 16), self_103901, 'center')
        # Obtaining the member '__getitem__' of a type (line 1543)
        getitem___103903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1543, 16), center_103902, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1543)
        subscript_call_result_103904 = invoke(stypy.reporting.localization.Localization(__file__, 1543, 16), getitem___103903, int_103900)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1543, 16), tuple_103899, subscript_call_result_103904)
        # Adding element type (line 1543)
        
        # Obtaining the type of the subscript
        int_103905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1543, 44), 'int')
        # Getting the type of 'self' (line 1543)
        self_103906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 32), 'self')
        # Obtaining the member 'center' of a type (line 1543)
        center_103907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1543, 32), self_103906, 'center')
        # Obtaining the member '__getitem__' of a type (line 1543)
        getitem___103908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1543, 32), center_103907, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1543)
        subscript_call_result_103909 = invoke(stypy.reporting.localization.Localization(__file__, 1543, 32), getitem___103908, int_103905)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1543, 16), tuple_103899, subscript_call_result_103909)
        # Adding element type (line 1543)
        # Getting the type of 'self' (line 1543)
        self_103910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 48), 'self')
        # Obtaining the member 'width' of a type (line 1543)
        width_103911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1543, 48), self_103910, 'width')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1543, 16), tuple_103899, width_103911)
        # Adding element type (line 1543)
        # Getting the type of 'self' (line 1544)
        self_103912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1544, 16), 'self')
        # Obtaining the member 'height' of a type (line 1544)
        height_103913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1544, 16), self_103912, 'height')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1543, 16), tuple_103899, height_103913)
        # Adding element type (line 1543)
        # Getting the type of 'self' (line 1544)
        self_103914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1544, 29), 'self')
        # Obtaining the member 'angle' of a type (line 1544)
        angle_103915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1544, 29), self_103914, 'angle')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1543, 16), tuple_103899, angle_103915)
        # Adding element type (line 1543)
        # Getting the type of 'self' (line 1544)
        self_103916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1544, 41), 'self')
        # Obtaining the member 'theta1' of a type (line 1544)
        theta1_103917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1544, 41), self_103916, 'theta1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1543, 16), tuple_103899, theta1_103917)
        # Adding element type (line 1543)
        # Getting the type of 'self' (line 1544)
        self_103918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1544, 54), 'self')
        # Obtaining the member 'theta2' of a type (line 1544)
        theta2_103919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1544, 54), self_103918, 'theta2')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1543, 16), tuple_103899, theta2_103919)
        
        # Assigning a type to the variable 'pars' (line 1543)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1543, 8), 'pars', tuple_103899)
        
        # Assigning a Str to a Name (line 1545):
        
        # Assigning a Str to a Name (line 1545):
        
        # Assigning a Str to a Name (line 1545):
        unicode_103920 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1545, 15), 'unicode', u'Arc(xy=(%g, %g), width=%g, height=%g, angle=%g, theta1=%g, theta2=%g)')
        # Assigning a type to the variable 'fmt' (line 1545)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1545, 8), 'fmt', unicode_103920)
        # Getting the type of 'fmt' (line 1547)
        fmt_103921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1547, 15), 'fmt')
        # Getting the type of 'pars' (line 1547)
        pars_103922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1547, 21), 'pars')
        # Applying the binary operator '%' (line 1547)
        result_mod_103923 = python_operator(stypy.reporting.localization.Localization(__file__, 1547, 15), '%', fmt_103921, pars_103922)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1547, 8), 'stypy_return_type', result_mod_103923)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 1542)
        stypy_return_type_103924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_103924)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_103924


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        float_103925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1550, 48), 'float')
        float_103926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1551, 24), 'float')
        float_103927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1551, 36), 'float')
        defaults = [float_103925, float_103926, float_103927]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1549, 4, False)
        # Assigning a type to the variable 'self' (line 1550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1550, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Arc.__init__', ['xy', 'width', 'height', 'angle', 'theta1', 'theta2'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['xy', 'width', 'height', 'angle', 'theta1', 'theta2'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_103928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1579, (-1)), 'unicode', u'\n        The following args are supported:\n\n        *xy*\n          center of ellipse\n\n        *width*\n          length of horizontal axis\n\n        *height*\n          length of vertical axis\n\n        *angle*\n          rotation in degrees (anti-clockwise)\n\n        *theta1*\n          starting angle of the arc in degrees\n\n        *theta2*\n          ending angle of the arc in degrees\n\n        If *theta1* and *theta2* are not provided, the arc will form a\n        complete ellipse.\n\n        Valid kwargs are:\n\n        %(Patch)s\n        ')
        
        # Assigning a Call to a Name (line 1580):
        
        # Assigning a Call to a Name (line 1580):
        
        # Assigning a Call to a Name (line 1580):
        
        # Call to setdefault(...): (line 1580)
        # Processing the call arguments (line 1580)
        unicode_103931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1580, 33), 'unicode', u'fill')
        # Getting the type of 'False' (line 1580)
        False_103932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1580, 41), 'False', False)
        # Processing the call keyword arguments (line 1580)
        kwargs_103933 = {}
        # Getting the type of 'kwargs' (line 1580)
        kwargs_103929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1580, 15), 'kwargs', False)
        # Obtaining the member 'setdefault' of a type (line 1580)
        setdefault_103930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1580, 15), kwargs_103929, 'setdefault')
        # Calling setdefault(args, kwargs) (line 1580)
        setdefault_call_result_103934 = invoke(stypy.reporting.localization.Localization(__file__, 1580, 15), setdefault_103930, *[unicode_103931, False_103932], **kwargs_103933)
        
        # Assigning a type to the variable 'fill' (line 1580)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1580, 8), 'fill', setdefault_call_result_103934)
        
        # Getting the type of 'fill' (line 1581)
        fill_103935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 11), 'fill')
        # Testing the type of an if condition (line 1581)
        if_condition_103936 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1581, 8), fill_103935)
        # Assigning a type to the variable 'if_condition_103936' (line 1581)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1581, 8), 'if_condition_103936', if_condition_103936)
        # SSA begins for if statement (line 1581)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1582)
        # Processing the call arguments (line 1582)
        unicode_103938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1582, 29), 'unicode', u'Arc objects can not be filled')
        # Processing the call keyword arguments (line 1582)
        kwargs_103939 = {}
        # Getting the type of 'ValueError' (line 1582)
        ValueError_103937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1582)
        ValueError_call_result_103940 = invoke(stypy.reporting.localization.Localization(__file__, 1582, 18), ValueError_103937, *[unicode_103938], **kwargs_103939)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1582, 12), ValueError_call_result_103940, 'raise parameter', BaseException)
        # SSA join for if statement (line 1581)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __init__(...): (line 1584)
        # Processing the call arguments (line 1584)
        # Getting the type of 'self' (line 1584)
        self_103943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 25), 'self', False)
        # Getting the type of 'xy' (line 1584)
        xy_103944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 31), 'xy', False)
        # Getting the type of 'width' (line 1584)
        width_103945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 35), 'width', False)
        # Getting the type of 'height' (line 1584)
        height_103946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 42), 'height', False)
        # Getting the type of 'angle' (line 1584)
        angle_103947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 50), 'angle', False)
        # Processing the call keyword arguments (line 1584)
        # Getting the type of 'kwargs' (line 1584)
        kwargs_103948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 59), 'kwargs', False)
        kwargs_103949 = {'kwargs_103948': kwargs_103948}
        # Getting the type of 'Ellipse' (line 1584)
        Ellipse_103941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 8), 'Ellipse', False)
        # Obtaining the member '__init__' of a type (line 1584)
        init___103942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1584, 8), Ellipse_103941, '__init__')
        # Calling __init__(args, kwargs) (line 1584)
        init___call_result_103950 = invoke(stypy.reporting.localization.Localization(__file__, 1584, 8), init___103942, *[self_103943, xy_103944, width_103945, height_103946, angle_103947], **kwargs_103949)
        
        
        # Assigning a Name to a Attribute (line 1586):
        
        # Assigning a Name to a Attribute (line 1586):
        
        # Assigning a Name to a Attribute (line 1586):
        # Getting the type of 'theta1' (line 1586)
        theta1_103951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1586, 22), 'theta1')
        # Getting the type of 'self' (line 1586)
        self_103952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1586, 8), 'self')
        # Setting the type of the member 'theta1' of a type (line 1586)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1586, 8), self_103952, 'theta1', theta1_103951)
        
        # Assigning a Name to a Attribute (line 1587):
        
        # Assigning a Name to a Attribute (line 1587):
        
        # Assigning a Name to a Attribute (line 1587):
        # Getting the type of 'theta2' (line 1587)
        theta2_103953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1587, 22), 'theta2')
        # Getting the type of 'self' (line 1587)
        self_103954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1587, 8), 'self')
        # Setting the type of the member 'theta2' of a type (line 1587)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1587, 8), self_103954, 'theta2', theta2_103953)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 1589, 4, False)
        # Assigning a type to the variable 'self' (line 1590)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1590, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Arc.draw.__dict__.__setitem__('stypy_localization', localization)
        Arc.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Arc.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        Arc.draw.__dict__.__setitem__('stypy_function_name', 'Arc.draw')
        Arc.draw.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        Arc.draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        Arc.draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Arc.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        Arc.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        Arc.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Arc.draw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Arc.draw', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        unicode_103955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1634, (-1)), 'unicode', u'\n        Ellipses are normally drawn using an approximation that uses\n        eight cubic bezier splines.  The error of this approximation\n        is 1.89818e-6, according to this unverified source:\n\n          Lancaster, Don.  Approximating a Circle or an Ellipse Using\n          Four Bezier Cubic Splines.\n\n          http://www.tinaja.com/glib/ellipse4.pdf\n\n        There is a use case where very large ellipses must be drawn\n        with very high accuracy, and it is too expensive to render the\n        entire ellipse with enough segments (either splines or line\n        segments).  Therefore, in the case where either radius of the\n        ellipse is large enough that the error of the spline\n        approximation will be visible (greater than one pixel offset\n        from the ideal), a different technique is used.\n\n        In that case, only the visible parts of the ellipse are drawn,\n        with each visible arc using a fixed number of spline segments\n        (8).  The algorithm proceeds as follows:\n\n          1. The points where the ellipse intersects the axes bounding\n             box are located.  (This is done be performing an inverse\n             transformation on the axes bbox such that it is relative\n             to the unit circle -- this makes the intersection\n             calculation much easier than doing rotated ellipse\n             intersection directly).\n\n             This uses the "line intersecting a circle" algorithm\n             from:\n\n               Vince, John.  Geometry for Computer Graphics: Formulae,\n               Examples & Proofs.  London: Springer-Verlag, 2005.\n\n          2. The angles of each of the intersection points are\n             calculated.\n\n          3. Proceeding counterclockwise starting in the positive\n             x-direction, each of the visible arc-segments between the\n             pairs of vertices are drawn using the bezier arc\n             approximation technique implemented in\n             :meth:`matplotlib.path.Path.arc`.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1635)
        unicode_103956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1635, 29), 'unicode', u'axes')
        # Getting the type of 'self' (line 1635)
        self_103957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1635, 23), 'self')
        
        (may_be_103958, more_types_in_union_103959) = may_not_provide_member(unicode_103956, self_103957)

        if may_be_103958:

            if more_types_in_union_103959:
                # Runtime conditional SSA (line 1635)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'self' (line 1635)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1635, 8), 'self', remove_member_provider_from_union(self_103957, u'axes'))
            
            # Call to RuntimeError(...): (line 1636)
            # Processing the call arguments (line 1636)
            unicode_103961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1636, 31), 'unicode', u'Arcs can only be used in Axes instances')
            # Processing the call keyword arguments (line 1636)
            kwargs_103962 = {}
            # Getting the type of 'RuntimeError' (line 1636)
            RuntimeError_103960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1636, 18), 'RuntimeError', False)
            # Calling RuntimeError(args, kwargs) (line 1636)
            RuntimeError_call_result_103963 = invoke(stypy.reporting.localization.Localization(__file__, 1636, 18), RuntimeError_103960, *[unicode_103961], **kwargs_103962)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1636, 12), RuntimeError_call_result_103963, 'raise parameter', BaseException)

            if more_types_in_union_103959:
                # SSA join for if statement (line 1635)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to _recompute_transform(...): (line 1638)
        # Processing the call keyword arguments (line 1638)
        kwargs_103966 = {}
        # Getting the type of 'self' (line 1638)
        self_103964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 8), 'self', False)
        # Obtaining the member '_recompute_transform' of a type (line 1638)
        _recompute_transform_103965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1638, 8), self_103964, '_recompute_transform')
        # Calling _recompute_transform(args, kwargs) (line 1638)
        _recompute_transform_call_result_103967 = invoke(stypy.reporting.localization.Localization(__file__, 1638, 8), _recompute_transform_103965, *[], **kwargs_103966)
        
        
        # Assigning a Call to a Name (line 1640):
        
        # Assigning a Call to a Name (line 1640):
        
        # Assigning a Call to a Name (line 1640):
        
        # Call to convert_xunits(...): (line 1640)
        # Processing the call arguments (line 1640)
        # Getting the type of 'self' (line 1640)
        self_103970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 36), 'self', False)
        # Obtaining the member 'width' of a type (line 1640)
        width_103971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1640, 36), self_103970, 'width')
        # Processing the call keyword arguments (line 1640)
        kwargs_103972 = {}
        # Getting the type of 'self' (line 1640)
        self_103968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 16), 'self', False)
        # Obtaining the member 'convert_xunits' of a type (line 1640)
        convert_xunits_103969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1640, 16), self_103968, 'convert_xunits')
        # Calling convert_xunits(args, kwargs) (line 1640)
        convert_xunits_call_result_103973 = invoke(stypy.reporting.localization.Localization(__file__, 1640, 16), convert_xunits_103969, *[width_103971], **kwargs_103972)
        
        # Assigning a type to the variable 'width' (line 1640)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1640, 8), 'width', convert_xunits_call_result_103973)
        
        # Assigning a Call to a Name (line 1641):
        
        # Assigning a Call to a Name (line 1641):
        
        # Assigning a Call to a Name (line 1641):
        
        # Call to convert_yunits(...): (line 1641)
        # Processing the call arguments (line 1641)
        # Getting the type of 'self' (line 1641)
        self_103976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 37), 'self', False)
        # Obtaining the member 'height' of a type (line 1641)
        height_103977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1641, 37), self_103976, 'height')
        # Processing the call keyword arguments (line 1641)
        kwargs_103978 = {}
        # Getting the type of 'self' (line 1641)
        self_103974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 17), 'self', False)
        # Obtaining the member 'convert_yunits' of a type (line 1641)
        convert_yunits_103975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1641, 17), self_103974, 'convert_yunits')
        # Calling convert_yunits(args, kwargs) (line 1641)
        convert_yunits_call_result_103979 = invoke(stypy.reporting.localization.Localization(__file__, 1641, 17), convert_yunits_103975, *[height_103977], **kwargs_103978)
        
        # Assigning a type to the variable 'height' (line 1641)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1641, 8), 'height', convert_yunits_call_result_103979)

        @norecursion
        def theta_stretch(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'theta_stretch'
            module_type_store = module_type_store.open_function_context('theta_stretch', 1645, 8, False)
            
            # Passed parameters checking function
            theta_stretch.stypy_localization = localization
            theta_stretch.stypy_type_of_self = None
            theta_stretch.stypy_type_store = module_type_store
            theta_stretch.stypy_function_name = 'theta_stretch'
            theta_stretch.stypy_param_names_list = ['theta', 'scale']
            theta_stretch.stypy_varargs_param_name = None
            theta_stretch.stypy_kwargs_param_name = None
            theta_stretch.stypy_call_defaults = defaults
            theta_stretch.stypy_call_varargs = varargs
            theta_stretch.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'theta_stretch', ['theta', 'scale'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'theta_stretch', localization, ['theta', 'scale'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'theta_stretch(...)' code ##################

            
            # Assigning a Call to a Name (line 1646):
            
            # Assigning a Call to a Name (line 1646):
            
            # Assigning a Call to a Name (line 1646):
            
            # Call to deg2rad(...): (line 1646)
            # Processing the call arguments (line 1646)
            # Getting the type of 'theta' (line 1646)
            theta_103982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 31), 'theta', False)
            # Processing the call keyword arguments (line 1646)
            kwargs_103983 = {}
            # Getting the type of 'np' (line 1646)
            np_103980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 20), 'np', False)
            # Obtaining the member 'deg2rad' of a type (line 1646)
            deg2rad_103981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1646, 20), np_103980, 'deg2rad')
            # Calling deg2rad(args, kwargs) (line 1646)
            deg2rad_call_result_103984 = invoke(stypy.reporting.localization.Localization(__file__, 1646, 20), deg2rad_103981, *[theta_103982], **kwargs_103983)
            
            # Assigning a type to the variable 'theta' (line 1646)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1646, 12), 'theta', deg2rad_call_result_103984)
            
            # Assigning a Call to a Name (line 1647):
            
            # Assigning a Call to a Name (line 1647):
            
            # Assigning a Call to a Name (line 1647):
            
            # Call to cos(...): (line 1647)
            # Processing the call arguments (line 1647)
            # Getting the type of 'theta' (line 1647)
            theta_103987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 23), 'theta', False)
            # Processing the call keyword arguments (line 1647)
            kwargs_103988 = {}
            # Getting the type of 'np' (line 1647)
            np_103985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 16), 'np', False)
            # Obtaining the member 'cos' of a type (line 1647)
            cos_103986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1647, 16), np_103985, 'cos')
            # Calling cos(args, kwargs) (line 1647)
            cos_call_result_103989 = invoke(stypy.reporting.localization.Localization(__file__, 1647, 16), cos_103986, *[theta_103987], **kwargs_103988)
            
            # Assigning a type to the variable 'x' (line 1647)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1647, 12), 'x', cos_call_result_103989)
            
            # Assigning a Call to a Name (line 1648):
            
            # Assigning a Call to a Name (line 1648):
            
            # Assigning a Call to a Name (line 1648):
            
            # Call to sin(...): (line 1648)
            # Processing the call arguments (line 1648)
            # Getting the type of 'theta' (line 1648)
            theta_103992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 23), 'theta', False)
            # Processing the call keyword arguments (line 1648)
            kwargs_103993 = {}
            # Getting the type of 'np' (line 1648)
            np_103990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 16), 'np', False)
            # Obtaining the member 'sin' of a type (line 1648)
            sin_103991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1648, 16), np_103990, 'sin')
            # Calling sin(args, kwargs) (line 1648)
            sin_call_result_103994 = invoke(stypy.reporting.localization.Localization(__file__, 1648, 16), sin_103991, *[theta_103992], **kwargs_103993)
            
            # Assigning a type to the variable 'y' (line 1648)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1648, 12), 'y', sin_call_result_103994)
            
            # Call to rad2deg(...): (line 1649)
            # Processing the call arguments (line 1649)
            
            # Call to arctan2(...): (line 1649)
            # Processing the call arguments (line 1649)
            # Getting the type of 'scale' (line 1649)
            scale_103999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 41), 'scale', False)
            # Getting the type of 'y' (line 1649)
            y_104000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 49), 'y', False)
            # Applying the binary operator '*' (line 1649)
            result_mul_104001 = python_operator(stypy.reporting.localization.Localization(__file__, 1649, 41), '*', scale_103999, y_104000)
            
            # Getting the type of 'x' (line 1649)
            x_104002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 52), 'x', False)
            # Processing the call keyword arguments (line 1649)
            kwargs_104003 = {}
            # Getting the type of 'np' (line 1649)
            np_103997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 30), 'np', False)
            # Obtaining the member 'arctan2' of a type (line 1649)
            arctan2_103998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1649, 30), np_103997, 'arctan2')
            # Calling arctan2(args, kwargs) (line 1649)
            arctan2_call_result_104004 = invoke(stypy.reporting.localization.Localization(__file__, 1649, 30), arctan2_103998, *[result_mul_104001, x_104002], **kwargs_104003)
            
            # Processing the call keyword arguments (line 1649)
            kwargs_104005 = {}
            # Getting the type of 'np' (line 1649)
            np_103995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 19), 'np', False)
            # Obtaining the member 'rad2deg' of a type (line 1649)
            rad2deg_103996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1649, 19), np_103995, 'rad2deg')
            # Calling rad2deg(args, kwargs) (line 1649)
            rad2deg_call_result_104006 = invoke(stypy.reporting.localization.Localization(__file__, 1649, 19), rad2deg_103996, *[arctan2_call_result_104004], **kwargs_104005)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1649)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1649, 12), 'stypy_return_type', rad2deg_call_result_104006)
            
            # ################# End of 'theta_stretch(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'theta_stretch' in the type store
            # Getting the type of 'stypy_return_type' (line 1645)
            stypy_return_type_104007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_104007)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'theta_stretch'
            return stypy_return_type_104007

        # Assigning a type to the variable 'theta_stretch' (line 1645)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1645, 8), 'theta_stretch', theta_stretch)
        
        # Assigning a Call to a Name (line 1650):
        
        # Assigning a Call to a Name (line 1650):
        
        # Assigning a Call to a Name (line 1650):
        
        # Call to theta_stretch(...): (line 1650)
        # Processing the call arguments (line 1650)
        # Getting the type of 'self' (line 1650)
        self_104009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 31), 'self', False)
        # Obtaining the member 'theta1' of a type (line 1650)
        theta1_104010 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1650, 31), self_104009, 'theta1')
        # Getting the type of 'width' (line 1650)
        width_104011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 44), 'width', False)
        # Getting the type of 'height' (line 1650)
        height_104012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 52), 'height', False)
        # Applying the binary operator 'div' (line 1650)
        result_div_104013 = python_operator(stypy.reporting.localization.Localization(__file__, 1650, 44), 'div', width_104011, height_104012)
        
        # Processing the call keyword arguments (line 1650)
        kwargs_104014 = {}
        # Getting the type of 'theta_stretch' (line 1650)
        theta_stretch_104008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 17), 'theta_stretch', False)
        # Calling theta_stretch(args, kwargs) (line 1650)
        theta_stretch_call_result_104015 = invoke(stypy.reporting.localization.Localization(__file__, 1650, 17), theta_stretch_104008, *[theta1_104010, result_div_104013], **kwargs_104014)
        
        # Assigning a type to the variable 'theta1' (line 1650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1650, 8), 'theta1', theta_stretch_call_result_104015)
        
        # Assigning a Call to a Name (line 1651):
        
        # Assigning a Call to a Name (line 1651):
        
        # Assigning a Call to a Name (line 1651):
        
        # Call to theta_stretch(...): (line 1651)
        # Processing the call arguments (line 1651)
        # Getting the type of 'self' (line 1651)
        self_104017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 31), 'self', False)
        # Obtaining the member 'theta2' of a type (line 1651)
        theta2_104018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1651, 31), self_104017, 'theta2')
        # Getting the type of 'width' (line 1651)
        width_104019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 44), 'width', False)
        # Getting the type of 'height' (line 1651)
        height_104020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 52), 'height', False)
        # Applying the binary operator 'div' (line 1651)
        result_div_104021 = python_operator(stypy.reporting.localization.Localization(__file__, 1651, 44), 'div', width_104019, height_104020)
        
        # Processing the call keyword arguments (line 1651)
        kwargs_104022 = {}
        # Getting the type of 'theta_stretch' (line 1651)
        theta_stretch_104016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 17), 'theta_stretch', False)
        # Calling theta_stretch(args, kwargs) (line 1651)
        theta_stretch_call_result_104023 = invoke(stypy.reporting.localization.Localization(__file__, 1651, 17), theta_stretch_104016, *[theta2_104018, result_div_104021], **kwargs_104022)
        
        # Assigning a type to the variable 'theta2' (line 1651)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1651, 8), 'theta2', theta_stretch_call_result_104023)
        
        # Assigning a Call to a Tuple (line 1654):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to transform_point(...): (line 1654)
        # Processing the call arguments (line 1654)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1654)
        tuple_104029 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1654, 62), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1654)
        # Adding element type (line 1654)
        # Getting the type of 'width' (line 1654)
        width_104030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 62), 'width', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1654, 62), tuple_104029, width_104030)
        # Adding element type (line 1654)
        # Getting the type of 'height' (line 1654)
        height_104031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 69), 'height', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1654, 62), tuple_104029, height_104031)
        
        # Processing the call keyword arguments (line 1654)
        kwargs_104032 = {}
        
        # Call to get_transform(...): (line 1654)
        # Processing the call keyword arguments (line 1654)
        kwargs_104026 = {}
        # Getting the type of 'self' (line 1654)
        self_104024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 24), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 1654)
        get_transform_104025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1654, 24), self_104024, 'get_transform')
        # Calling get_transform(args, kwargs) (line 1654)
        get_transform_call_result_104027 = invoke(stypy.reporting.localization.Localization(__file__, 1654, 24), get_transform_104025, *[], **kwargs_104026)
        
        # Obtaining the member 'transform_point' of a type (line 1654)
        transform_point_104028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1654, 24), get_transform_call_result_104027, 'transform_point')
        # Calling transform_point(args, kwargs) (line 1654)
        transform_point_call_result_104033 = invoke(stypy.reporting.localization.Localization(__file__, 1654, 24), transform_point_104028, *[tuple_104029], **kwargs_104032)
        
        # Assigning a type to the variable 'call_assignment_100410' (line 1654)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1654, 8), 'call_assignment_100410', transform_point_call_result_104033)
        
        # Assigning a Call to a Name (line 1654):
        
        # Assigning a Call to a Name (line 1654):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_104036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1654, 8), 'int')
        # Processing the call keyword arguments
        kwargs_104037 = {}
        # Getting the type of 'call_assignment_100410' (line 1654)
        call_assignment_100410_104034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 8), 'call_assignment_100410', False)
        # Obtaining the member '__getitem__' of a type (line 1654)
        getitem___104035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1654, 8), call_assignment_100410_104034, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_104038 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___104035, *[int_104036], **kwargs_104037)
        
        # Assigning a type to the variable 'call_assignment_100411' (line 1654)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1654, 8), 'call_assignment_100411', getitem___call_result_104038)
        
        # Assigning a Name to a Name (line 1654):
        
        # Assigning a Name to a Name (line 1654):
        # Getting the type of 'call_assignment_100411' (line 1654)
        call_assignment_100411_104039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 8), 'call_assignment_100411')
        # Assigning a type to the variable 'width' (line 1654)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1654, 8), 'width', call_assignment_100411_104039)
        
        # Assigning a Call to a Name (line 1654):
        
        # Assigning a Call to a Name (line 1654):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_104042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1654, 8), 'int')
        # Processing the call keyword arguments
        kwargs_104043 = {}
        # Getting the type of 'call_assignment_100410' (line 1654)
        call_assignment_100410_104040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 8), 'call_assignment_100410', False)
        # Obtaining the member '__getitem__' of a type (line 1654)
        getitem___104041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1654, 8), call_assignment_100410_104040, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_104044 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___104041, *[int_104042], **kwargs_104043)
        
        # Assigning a type to the variable 'call_assignment_100412' (line 1654)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1654, 8), 'call_assignment_100412', getitem___call_result_104044)
        
        # Assigning a Name to a Name (line 1654):
        
        # Assigning a Name to a Name (line 1654):
        # Getting the type of 'call_assignment_100412' (line 1654)
        call_assignment_100412_104045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 8), 'call_assignment_100412')
        # Assigning a type to the variable 'height' (line 1654)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1654, 15), 'height', call_assignment_100412_104045)
        
        # Assigning a BinOp to a Name (line 1655):
        
        # Assigning a BinOp to a Name (line 1655):
        
        # Assigning a BinOp to a Name (line 1655):
        float_104046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1655, 21), 'float')
        float_104047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1655, 27), 'float')
        # Applying the binary operator 'div' (line 1655)
        result_div_104048 = python_operator(stypy.reporting.localization.Localization(__file__, 1655, 21), 'div', float_104046, float_104047)
        
        float_104049 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1655, 41), 'float')
        # Applying the binary operator '*' (line 1655)
        result_mul_104050 = python_operator(stypy.reporting.localization.Localization(__file__, 1655, 20), '*', result_div_104048, float_104049)
        
        # Assigning a type to the variable 'inv_error' (line 1655)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1655, 8), 'inv_error', result_mul_104050)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'width' (line 1656)
        width_104051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1656, 11), 'width')
        # Getting the type of 'inv_error' (line 1656)
        inv_error_104052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1656, 19), 'inv_error')
        # Applying the binary operator '<' (line 1656)
        result_lt_104053 = python_operator(stypy.reporting.localization.Localization(__file__, 1656, 11), '<', width_104051, inv_error_104052)
        
        
        # Getting the type of 'height' (line 1656)
        height_104054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1656, 33), 'height')
        # Getting the type of 'inv_error' (line 1656)
        inv_error_104055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1656, 42), 'inv_error')
        # Applying the binary operator '<' (line 1656)
        result_lt_104056 = python_operator(stypy.reporting.localization.Localization(__file__, 1656, 33), '<', height_104054, inv_error_104055)
        
        # Applying the binary operator 'and' (line 1656)
        result_and_keyword_104057 = python_operator(stypy.reporting.localization.Localization(__file__, 1656, 11), 'and', result_lt_104053, result_lt_104056)
        
        # Testing the type of an if condition (line 1656)
        if_condition_104058 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1656, 8), result_and_keyword_104057)
        # Assigning a type to the variable 'if_condition_104058' (line 1656)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1656, 8), 'if_condition_104058', if_condition_104058)
        # SSA begins for if statement (line 1656)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 1657):
        
        # Assigning a Call to a Attribute (line 1657):
        
        # Assigning a Call to a Attribute (line 1657):
        
        # Call to arc(...): (line 1657)
        # Processing the call arguments (line 1657)
        # Getting the type of 'theta1' (line 1657)
        theta1_104061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 34), 'theta1', False)
        # Getting the type of 'theta2' (line 1657)
        theta2_104062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 42), 'theta2', False)
        # Processing the call keyword arguments (line 1657)
        kwargs_104063 = {}
        # Getting the type of 'Path' (line 1657)
        Path_104059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 25), 'Path', False)
        # Obtaining the member 'arc' of a type (line 1657)
        arc_104060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1657, 25), Path_104059, 'arc')
        # Calling arc(args, kwargs) (line 1657)
        arc_call_result_104064 = invoke(stypy.reporting.localization.Localization(__file__, 1657, 25), arc_104060, *[theta1_104061, theta2_104062], **kwargs_104063)
        
        # Getting the type of 'self' (line 1657)
        self_104065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 12), 'self')
        # Setting the type of the member '_path' of a type (line 1657)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1657, 12), self_104065, '_path', arc_call_result_104064)
        
        # Call to draw(...): (line 1658)
        # Processing the call arguments (line 1658)
        # Getting the type of 'self' (line 1658)
        self_104068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 30), 'self', False)
        # Getting the type of 'renderer' (line 1658)
        renderer_104069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 36), 'renderer', False)
        # Processing the call keyword arguments (line 1658)
        kwargs_104070 = {}
        # Getting the type of 'Patch' (line 1658)
        Patch_104066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 19), 'Patch', False)
        # Obtaining the member 'draw' of a type (line 1658)
        draw_104067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1658, 19), Patch_104066, 'draw')
        # Calling draw(args, kwargs) (line 1658)
        draw_call_result_104071 = invoke(stypy.reporting.localization.Localization(__file__, 1658, 19), draw_104067, *[self_104068, renderer_104069], **kwargs_104070)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1658, 12), 'stypy_return_type', draw_call_result_104071)
        # SSA join for if statement (line 1656)
        module_type_store = module_type_store.join_ssa_context()
        

        @norecursion
        def iter_circle_intersect_on_line(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'iter_circle_intersect_on_line'
            module_type_store = module_type_store.open_function_context('iter_circle_intersect_on_line', 1660, 8, False)
            
            # Passed parameters checking function
            iter_circle_intersect_on_line.stypy_localization = localization
            iter_circle_intersect_on_line.stypy_type_of_self = None
            iter_circle_intersect_on_line.stypy_type_store = module_type_store
            iter_circle_intersect_on_line.stypy_function_name = 'iter_circle_intersect_on_line'
            iter_circle_intersect_on_line.stypy_param_names_list = ['x0', 'y0', 'x1', 'y1']
            iter_circle_intersect_on_line.stypy_varargs_param_name = None
            iter_circle_intersect_on_line.stypy_kwargs_param_name = None
            iter_circle_intersect_on_line.stypy_call_defaults = defaults
            iter_circle_intersect_on_line.stypy_call_varargs = varargs
            iter_circle_intersect_on_line.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'iter_circle_intersect_on_line', ['x0', 'y0', 'x1', 'y1'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'iter_circle_intersect_on_line', localization, ['x0', 'y0', 'x1', 'y1'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'iter_circle_intersect_on_line(...)' code ##################

            
            # Assigning a BinOp to a Name (line 1661):
            
            # Assigning a BinOp to a Name (line 1661):
            
            # Assigning a BinOp to a Name (line 1661):
            # Getting the type of 'x1' (line 1661)
            x1_104072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 17), 'x1')
            # Getting the type of 'x0' (line 1661)
            x0_104073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 22), 'x0')
            # Applying the binary operator '-' (line 1661)
            result_sub_104074 = python_operator(stypy.reporting.localization.Localization(__file__, 1661, 17), '-', x1_104072, x0_104073)
            
            # Assigning a type to the variable 'dx' (line 1661)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1661, 12), 'dx', result_sub_104074)
            
            # Assigning a BinOp to a Name (line 1662):
            
            # Assigning a BinOp to a Name (line 1662):
            
            # Assigning a BinOp to a Name (line 1662):
            # Getting the type of 'y1' (line 1662)
            y1_104075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1662, 17), 'y1')
            # Getting the type of 'y0' (line 1662)
            y0_104076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1662, 22), 'y0')
            # Applying the binary operator '-' (line 1662)
            result_sub_104077 = python_operator(stypy.reporting.localization.Localization(__file__, 1662, 17), '-', y1_104075, y0_104076)
            
            # Assigning a type to the variable 'dy' (line 1662)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1662, 12), 'dy', result_sub_104077)
            
            # Assigning a BinOp to a Name (line 1663):
            
            # Assigning a BinOp to a Name (line 1663):
            
            # Assigning a BinOp to a Name (line 1663):
            # Getting the type of 'dx' (line 1663)
            dx_104078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 18), 'dx')
            # Getting the type of 'dx' (line 1663)
            dx_104079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 23), 'dx')
            # Applying the binary operator '*' (line 1663)
            result_mul_104080 = python_operator(stypy.reporting.localization.Localization(__file__, 1663, 18), '*', dx_104078, dx_104079)
            
            # Getting the type of 'dy' (line 1663)
            dy_104081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 28), 'dy')
            # Getting the type of 'dy' (line 1663)
            dy_104082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 33), 'dy')
            # Applying the binary operator '*' (line 1663)
            result_mul_104083 = python_operator(stypy.reporting.localization.Localization(__file__, 1663, 28), '*', dy_104081, dy_104082)
            
            # Applying the binary operator '+' (line 1663)
            result_add_104084 = python_operator(stypy.reporting.localization.Localization(__file__, 1663, 18), '+', result_mul_104080, result_mul_104083)
            
            # Assigning a type to the variable 'dr2' (line 1663)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1663, 12), 'dr2', result_add_104084)
            
            # Assigning a BinOp to a Name (line 1664):
            
            # Assigning a BinOp to a Name (line 1664):
            
            # Assigning a BinOp to a Name (line 1664):
            # Getting the type of 'x0' (line 1664)
            x0_104085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 16), 'x0')
            # Getting the type of 'y1' (line 1664)
            y1_104086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 21), 'y1')
            # Applying the binary operator '*' (line 1664)
            result_mul_104087 = python_operator(stypy.reporting.localization.Localization(__file__, 1664, 16), '*', x0_104085, y1_104086)
            
            # Getting the type of 'x1' (line 1664)
            x1_104088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 26), 'x1')
            # Getting the type of 'y0' (line 1664)
            y0_104089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 31), 'y0')
            # Applying the binary operator '*' (line 1664)
            result_mul_104090 = python_operator(stypy.reporting.localization.Localization(__file__, 1664, 26), '*', x1_104088, y0_104089)
            
            # Applying the binary operator '-' (line 1664)
            result_sub_104091 = python_operator(stypy.reporting.localization.Localization(__file__, 1664, 16), '-', result_mul_104087, result_mul_104090)
            
            # Assigning a type to the variable 'D' (line 1664)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1664, 12), 'D', result_sub_104091)
            
            # Assigning a BinOp to a Name (line 1665):
            
            # Assigning a BinOp to a Name (line 1665):
            
            # Assigning a BinOp to a Name (line 1665):
            # Getting the type of 'D' (line 1665)
            D_104092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1665, 17), 'D')
            # Getting the type of 'D' (line 1665)
            D_104093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1665, 21), 'D')
            # Applying the binary operator '*' (line 1665)
            result_mul_104094 = python_operator(stypy.reporting.localization.Localization(__file__, 1665, 17), '*', D_104092, D_104093)
            
            # Assigning a type to the variable 'D2' (line 1665)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1665, 12), 'D2', result_mul_104094)
            
            # Assigning a BinOp to a Name (line 1666):
            
            # Assigning a BinOp to a Name (line 1666):
            
            # Assigning a BinOp to a Name (line 1666):
            # Getting the type of 'dr2' (line 1666)
            dr2_104095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 22), 'dr2')
            # Getting the type of 'D2' (line 1666)
            D2_104096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 28), 'D2')
            # Applying the binary operator '-' (line 1666)
            result_sub_104097 = python_operator(stypy.reporting.localization.Localization(__file__, 1666, 22), '-', dr2_104095, D2_104096)
            
            # Assigning a type to the variable 'discrim' (line 1666)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1666, 12), 'discrim', result_sub_104097)
            
            
            # Getting the type of 'discrim' (line 1669)
            discrim_104098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1669, 15), 'discrim')
            float_104099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1669, 26), 'float')
            # Applying the binary operator '==' (line 1669)
            result_eq_104100 = python_operator(stypy.reporting.localization.Localization(__file__, 1669, 15), '==', discrim_104098, float_104099)
            
            # Testing the type of an if condition (line 1669)
            if_condition_104101 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1669, 12), result_eq_104100)
            # Assigning a type to the variable 'if_condition_104101' (line 1669)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1669, 12), 'if_condition_104101', if_condition_104101)
            # SSA begins for if statement (line 1669)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a BinOp to a Name (line 1670):
            
            # Assigning a BinOp to a Name (line 1670):
            
            # Assigning a BinOp to a Name (line 1670):
            # Getting the type of 'D' (line 1670)
            D_104102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 21), 'D')
            # Getting the type of 'dy' (line 1670)
            dy_104103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 25), 'dy')
            # Applying the binary operator '*' (line 1670)
            result_mul_104104 = python_operator(stypy.reporting.localization.Localization(__file__, 1670, 21), '*', D_104102, dy_104103)
            
            # Getting the type of 'dr2' (line 1670)
            dr2_104105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 31), 'dr2')
            # Applying the binary operator 'div' (line 1670)
            result_div_104106 = python_operator(stypy.reporting.localization.Localization(__file__, 1670, 20), 'div', result_mul_104104, dr2_104105)
            
            # Assigning a type to the variable 'x' (line 1670)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1670, 16), 'x', result_div_104106)
            
            # Assigning a BinOp to a Name (line 1671):
            
            # Assigning a BinOp to a Name (line 1671):
            
            # Assigning a BinOp to a Name (line 1671):
            
            # Getting the type of 'D' (line 1671)
            D_104107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 22), 'D')
            # Applying the 'usub' unary operator (line 1671)
            result___neg___104108 = python_operator(stypy.reporting.localization.Localization(__file__, 1671, 21), 'usub', D_104107)
            
            # Getting the type of 'dx' (line 1671)
            dx_104109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 26), 'dx')
            # Applying the binary operator '*' (line 1671)
            result_mul_104110 = python_operator(stypy.reporting.localization.Localization(__file__, 1671, 21), '*', result___neg___104108, dx_104109)
            
            # Getting the type of 'dr2' (line 1671)
            dr2_104111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 32), 'dr2')
            # Applying the binary operator 'div' (line 1671)
            result_div_104112 = python_operator(stypy.reporting.localization.Localization(__file__, 1671, 20), 'div', result_mul_104110, dr2_104111)
            
            # Assigning a type to the variable 'y' (line 1671)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1671, 16), 'y', result_div_104112)
            # Creating a generator
            
            # Obtaining an instance of the builtin type 'tuple' (line 1672)
            tuple_104113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1672, 22), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1672)
            # Adding element type (line 1672)
            # Getting the type of 'x' (line 1672)
            x_104114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1672, 22), 'x')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1672, 22), tuple_104113, x_104114)
            # Adding element type (line 1672)
            # Getting the type of 'y' (line 1672)
            y_104115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1672, 25), 'y')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1672, 22), tuple_104113, y_104115)
            
            GeneratorType_104116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1672, 16), 'GeneratorType')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1672, 16), GeneratorType_104116, tuple_104113)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1672, 16), 'stypy_return_type', GeneratorType_104116)
            # SSA branch for the else part of an if statement (line 1669)
            module_type_store.open_ssa_branch('else')
            
            
            # Getting the type of 'discrim' (line 1673)
            discrim_104117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 17), 'discrim')
            float_104118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1673, 27), 'float')
            # Applying the binary operator '>' (line 1673)
            result_gt_104119 = python_operator(stypy.reporting.localization.Localization(__file__, 1673, 17), '>', discrim_104117, float_104118)
            
            # Testing the type of an if condition (line 1673)
            if_condition_104120 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1673, 17), result_gt_104119)
            # Assigning a type to the variable 'if_condition_104120' (line 1673)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1673, 17), 'if_condition_104120', if_condition_104120)
            # SSA begins for if statement (line 1673)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            
            # Getting the type of 'dy' (line 1676)
            dy_104121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 19), 'dy')
            float_104122 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1676, 24), 'float')
            # Applying the binary operator '<' (line 1676)
            result_lt_104123 = python_operator(stypy.reporting.localization.Localization(__file__, 1676, 19), '<', dy_104121, float_104122)
            
            # Testing the type of an if condition (line 1676)
            if_condition_104124 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1676, 16), result_lt_104123)
            # Assigning a type to the variable 'if_condition_104124' (line 1676)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1676, 16), 'if_condition_104124', if_condition_104124)
            # SSA begins for if statement (line 1676)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Num to a Name (line 1677):
            
            # Assigning a Num to a Name (line 1677):
            
            # Assigning a Num to a Name (line 1677):
            float_104125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1677, 30), 'float')
            # Assigning a type to the variable 'sign_dy' (line 1677)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1677, 20), 'sign_dy', float_104125)
            # SSA branch for the else part of an if statement (line 1676)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Num to a Name (line 1679):
            
            # Assigning a Num to a Name (line 1679):
            
            # Assigning a Num to a Name (line 1679):
            float_104126 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1679, 30), 'float')
            # Assigning a type to the variable 'sign_dy' (line 1679)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1679, 20), 'sign_dy', float_104126)
            # SSA join for if statement (line 1676)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Name (line 1680):
            
            # Assigning a Call to a Name (line 1680):
            
            # Assigning a Call to a Name (line 1680):
            
            # Call to sqrt(...): (line 1680)
            # Processing the call arguments (line 1680)
            # Getting the type of 'discrim' (line 1680)
            discrim_104129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 39), 'discrim', False)
            # Processing the call keyword arguments (line 1680)
            kwargs_104130 = {}
            # Getting the type of 'np' (line 1680)
            np_104127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 31), 'np', False)
            # Obtaining the member 'sqrt' of a type (line 1680)
            sqrt_104128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1680, 31), np_104127, 'sqrt')
            # Calling sqrt(args, kwargs) (line 1680)
            sqrt_call_result_104131 = invoke(stypy.reporting.localization.Localization(__file__, 1680, 31), sqrt_104128, *[discrim_104129], **kwargs_104130)
            
            # Assigning a type to the variable 'sqrt_discrim' (line 1680)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1680, 16), 'sqrt_discrim', sqrt_call_result_104131)
            
            
            # Obtaining an instance of the builtin type 'tuple' (line 1681)
            tuple_104132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1681, 29), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1681)
            # Adding element type (line 1681)
            float_104133 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1681, 29), 'float')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1681, 29), tuple_104132, float_104133)
            # Adding element type (line 1681)
            float_104134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1681, 33), 'float')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1681, 29), tuple_104132, float_104134)
            
            # Testing the type of a for loop iterable (line 1681)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1681, 16), tuple_104132)
            # Getting the type of the for loop variable (line 1681)
            for_loop_var_104135 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1681, 16), tuple_104132)
            # Assigning a type to the variable 'sign' (line 1681)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1681, 16), 'sign', for_loop_var_104135)
            # SSA begins for a for statement (line 1681)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            # Assigning a BinOp to a Name (line 1682):
            
            # Assigning a BinOp to a Name (line 1682):
            
            # Assigning a BinOp to a Name (line 1682):
            # Getting the type of 'D' (line 1682)
            D_104136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 25), 'D')
            # Getting the type of 'dy' (line 1682)
            dy_104137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 29), 'dy')
            # Applying the binary operator '*' (line 1682)
            result_mul_104138 = python_operator(stypy.reporting.localization.Localization(__file__, 1682, 25), '*', D_104136, dy_104137)
            
            # Getting the type of 'sign' (line 1682)
            sign_104139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 34), 'sign')
            # Getting the type of 'sign_dy' (line 1682)
            sign_dy_104140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 41), 'sign_dy')
            # Applying the binary operator '*' (line 1682)
            result_mul_104141 = python_operator(stypy.reporting.localization.Localization(__file__, 1682, 34), '*', sign_104139, sign_dy_104140)
            
            # Getting the type of 'dx' (line 1682)
            dx_104142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 51), 'dx')
            # Applying the binary operator '*' (line 1682)
            result_mul_104143 = python_operator(stypy.reporting.localization.Localization(__file__, 1682, 49), '*', result_mul_104141, dx_104142)
            
            # Getting the type of 'sqrt_discrim' (line 1682)
            sqrt_discrim_104144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 56), 'sqrt_discrim')
            # Applying the binary operator '*' (line 1682)
            result_mul_104145 = python_operator(stypy.reporting.localization.Localization(__file__, 1682, 54), '*', result_mul_104143, sqrt_discrim_104144)
            
            # Applying the binary operator '+' (line 1682)
            result_add_104146 = python_operator(stypy.reporting.localization.Localization(__file__, 1682, 25), '+', result_mul_104138, result_mul_104145)
            
            # Getting the type of 'dr2' (line 1682)
            dr2_104147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 72), 'dr2')
            # Applying the binary operator 'div' (line 1682)
            result_div_104148 = python_operator(stypy.reporting.localization.Localization(__file__, 1682, 24), 'div', result_add_104146, dr2_104147)
            
            # Assigning a type to the variable 'x' (line 1682)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1682, 20), 'x', result_div_104148)
            
            # Assigning a BinOp to a Name (line 1683):
            
            # Assigning a BinOp to a Name (line 1683):
            
            # Assigning a BinOp to a Name (line 1683):
            
            # Getting the type of 'D' (line 1683)
            D_104149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 26), 'D')
            # Applying the 'usub' unary operator (line 1683)
            result___neg___104150 = python_operator(stypy.reporting.localization.Localization(__file__, 1683, 25), 'usub', D_104149)
            
            # Getting the type of 'dx' (line 1683)
            dx_104151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 30), 'dx')
            # Applying the binary operator '*' (line 1683)
            result_mul_104152 = python_operator(stypy.reporting.localization.Localization(__file__, 1683, 25), '*', result___neg___104150, dx_104151)
            
            # Getting the type of 'sign' (line 1683)
            sign_104153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 35), 'sign')
            
            # Call to abs(...): (line 1683)
            # Processing the call arguments (line 1683)
            # Getting the type of 'dy' (line 1683)
            dy_104156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 49), 'dy', False)
            # Processing the call keyword arguments (line 1683)
            kwargs_104157 = {}
            # Getting the type of 'np' (line 1683)
            np_104154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 42), 'np', False)
            # Obtaining the member 'abs' of a type (line 1683)
            abs_104155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1683, 42), np_104154, 'abs')
            # Calling abs(args, kwargs) (line 1683)
            abs_call_result_104158 = invoke(stypy.reporting.localization.Localization(__file__, 1683, 42), abs_104155, *[dy_104156], **kwargs_104157)
            
            # Applying the binary operator '*' (line 1683)
            result_mul_104159 = python_operator(stypy.reporting.localization.Localization(__file__, 1683, 35), '*', sign_104153, abs_call_result_104158)
            
            # Getting the type of 'sqrt_discrim' (line 1683)
            sqrt_discrim_104160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 55), 'sqrt_discrim')
            # Applying the binary operator '*' (line 1683)
            result_mul_104161 = python_operator(stypy.reporting.localization.Localization(__file__, 1683, 53), '*', result_mul_104159, sqrt_discrim_104160)
            
            # Applying the binary operator '+' (line 1683)
            result_add_104162 = python_operator(stypy.reporting.localization.Localization(__file__, 1683, 25), '+', result_mul_104152, result_mul_104161)
            
            # Getting the type of 'dr2' (line 1683)
            dr2_104163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 71), 'dr2')
            # Applying the binary operator 'div' (line 1683)
            result_div_104164 = python_operator(stypy.reporting.localization.Localization(__file__, 1683, 24), 'div', result_add_104162, dr2_104163)
            
            # Assigning a type to the variable 'y' (line 1683)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1683, 20), 'y', result_div_104164)
            # Creating a generator
            
            # Obtaining an instance of the builtin type 'tuple' (line 1684)
            tuple_104165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1684, 26), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1684)
            # Adding element type (line 1684)
            # Getting the type of 'x' (line 1684)
            x_104166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1684, 26), 'x')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1684, 26), tuple_104165, x_104166)
            # Adding element type (line 1684)
            # Getting the type of 'y' (line 1684)
            y_104167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1684, 29), 'y')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1684, 26), tuple_104165, y_104167)
            
            GeneratorType_104168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1684, 20), 'GeneratorType')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1684, 20), GeneratorType_104168, tuple_104165)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1684, 20), 'stypy_return_type', GeneratorType_104168)
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 1673)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 1669)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # ################# End of 'iter_circle_intersect_on_line(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'iter_circle_intersect_on_line' in the type store
            # Getting the type of 'stypy_return_type' (line 1660)
            stypy_return_type_104169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_104169)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'iter_circle_intersect_on_line'
            return stypy_return_type_104169

        # Assigning a type to the variable 'iter_circle_intersect_on_line' (line 1660)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1660, 8), 'iter_circle_intersect_on_line', iter_circle_intersect_on_line)

        @norecursion
        def iter_circle_intersect_on_line_seg(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'iter_circle_intersect_on_line_seg'
            module_type_store = module_type_store.open_function_context('iter_circle_intersect_on_line_seg', 1686, 8, False)
            
            # Passed parameters checking function
            iter_circle_intersect_on_line_seg.stypy_localization = localization
            iter_circle_intersect_on_line_seg.stypy_type_of_self = None
            iter_circle_intersect_on_line_seg.stypy_type_store = module_type_store
            iter_circle_intersect_on_line_seg.stypy_function_name = 'iter_circle_intersect_on_line_seg'
            iter_circle_intersect_on_line_seg.stypy_param_names_list = ['x0', 'y0', 'x1', 'y1']
            iter_circle_intersect_on_line_seg.stypy_varargs_param_name = None
            iter_circle_intersect_on_line_seg.stypy_kwargs_param_name = None
            iter_circle_intersect_on_line_seg.stypy_call_defaults = defaults
            iter_circle_intersect_on_line_seg.stypy_call_varargs = varargs
            iter_circle_intersect_on_line_seg.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'iter_circle_intersect_on_line_seg', ['x0', 'y0', 'x1', 'y1'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'iter_circle_intersect_on_line_seg', localization, ['x0', 'y0', 'x1', 'y1'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'iter_circle_intersect_on_line_seg(...)' code ##################

            
            # Assigning a Num to a Name (line 1687):
            
            # Assigning a Num to a Name (line 1687):
            
            # Assigning a Num to a Name (line 1687):
            float_104170 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1687, 22), 'float')
            # Assigning a type to the variable 'epsilon' (line 1687)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1687, 12), 'epsilon', float_104170)
            
            
            # Getting the type of 'x1' (line 1688)
            x1_104171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 15), 'x1')
            # Getting the type of 'x0' (line 1688)
            x0_104172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 20), 'x0')
            # Applying the binary operator '<' (line 1688)
            result_lt_104173 = python_operator(stypy.reporting.localization.Localization(__file__, 1688, 15), '<', x1_104171, x0_104172)
            
            # Testing the type of an if condition (line 1688)
            if_condition_104174 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1688, 12), result_lt_104173)
            # Assigning a type to the variable 'if_condition_104174' (line 1688)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1688, 12), 'if_condition_104174', if_condition_104174)
            # SSA begins for if statement (line 1688)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Tuple to a Tuple (line 1689):
            
            # Assigning a Name to a Name (line 1689):
            
            # Assigning a Name to a Name (line 1689):
            # Getting the type of 'x1' (line 1689)
            x1_104175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1689, 27), 'x1')
            # Assigning a type to the variable 'tuple_assignment_100413' (line 1689)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1689, 16), 'tuple_assignment_100413', x1_104175)
            
            # Assigning a Name to a Name (line 1689):
            
            # Assigning a Name to a Name (line 1689):
            # Getting the type of 'x0' (line 1689)
            x0_104176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1689, 31), 'x0')
            # Assigning a type to the variable 'tuple_assignment_100414' (line 1689)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1689, 16), 'tuple_assignment_100414', x0_104176)
            
            # Assigning a Name to a Name (line 1689):
            
            # Assigning a Name to a Name (line 1689):
            # Getting the type of 'tuple_assignment_100413' (line 1689)
            tuple_assignment_100413_104177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1689, 16), 'tuple_assignment_100413')
            # Assigning a type to the variable 'x0e' (line 1689)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1689, 16), 'x0e', tuple_assignment_100413_104177)
            
            # Assigning a Name to a Name (line 1689):
            
            # Assigning a Name to a Name (line 1689):
            # Getting the type of 'tuple_assignment_100414' (line 1689)
            tuple_assignment_100414_104178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1689, 16), 'tuple_assignment_100414')
            # Assigning a type to the variable 'x1e' (line 1689)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1689, 21), 'x1e', tuple_assignment_100414_104178)
            # SSA branch for the else part of an if statement (line 1688)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Tuple to a Tuple (line 1691):
            
            # Assigning a Name to a Name (line 1691):
            
            # Assigning a Name to a Name (line 1691):
            # Getting the type of 'x0' (line 1691)
            x0_104179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 27), 'x0')
            # Assigning a type to the variable 'tuple_assignment_100415' (line 1691)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1691, 16), 'tuple_assignment_100415', x0_104179)
            
            # Assigning a Name to a Name (line 1691):
            
            # Assigning a Name to a Name (line 1691):
            # Getting the type of 'x1' (line 1691)
            x1_104180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 31), 'x1')
            # Assigning a type to the variable 'tuple_assignment_100416' (line 1691)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1691, 16), 'tuple_assignment_100416', x1_104180)
            
            # Assigning a Name to a Name (line 1691):
            
            # Assigning a Name to a Name (line 1691):
            # Getting the type of 'tuple_assignment_100415' (line 1691)
            tuple_assignment_100415_104181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 16), 'tuple_assignment_100415')
            # Assigning a type to the variable 'x0e' (line 1691)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1691, 16), 'x0e', tuple_assignment_100415_104181)
            
            # Assigning a Name to a Name (line 1691):
            
            # Assigning a Name to a Name (line 1691):
            # Getting the type of 'tuple_assignment_100416' (line 1691)
            tuple_assignment_100416_104182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 16), 'tuple_assignment_100416')
            # Assigning a type to the variable 'x1e' (line 1691)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1691, 21), 'x1e', tuple_assignment_100416_104182)
            # SSA join for if statement (line 1688)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            # Getting the type of 'y1' (line 1692)
            y1_104183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 15), 'y1')
            # Getting the type of 'y0' (line 1692)
            y0_104184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 20), 'y0')
            # Applying the binary operator '<' (line 1692)
            result_lt_104185 = python_operator(stypy.reporting.localization.Localization(__file__, 1692, 15), '<', y1_104183, y0_104184)
            
            # Testing the type of an if condition (line 1692)
            if_condition_104186 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1692, 12), result_lt_104185)
            # Assigning a type to the variable 'if_condition_104186' (line 1692)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1692, 12), 'if_condition_104186', if_condition_104186)
            # SSA begins for if statement (line 1692)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Tuple to a Tuple (line 1693):
            
            # Assigning a Name to a Name (line 1693):
            
            # Assigning a Name to a Name (line 1693):
            # Getting the type of 'y1' (line 1693)
            y1_104187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 27), 'y1')
            # Assigning a type to the variable 'tuple_assignment_100417' (line 1693)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1693, 16), 'tuple_assignment_100417', y1_104187)
            
            # Assigning a Name to a Name (line 1693):
            
            # Assigning a Name to a Name (line 1693):
            # Getting the type of 'y0' (line 1693)
            y0_104188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 31), 'y0')
            # Assigning a type to the variable 'tuple_assignment_100418' (line 1693)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1693, 16), 'tuple_assignment_100418', y0_104188)
            
            # Assigning a Name to a Name (line 1693):
            
            # Assigning a Name to a Name (line 1693):
            # Getting the type of 'tuple_assignment_100417' (line 1693)
            tuple_assignment_100417_104189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 16), 'tuple_assignment_100417')
            # Assigning a type to the variable 'y0e' (line 1693)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1693, 16), 'y0e', tuple_assignment_100417_104189)
            
            # Assigning a Name to a Name (line 1693):
            
            # Assigning a Name to a Name (line 1693):
            # Getting the type of 'tuple_assignment_100418' (line 1693)
            tuple_assignment_100418_104190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 16), 'tuple_assignment_100418')
            # Assigning a type to the variable 'y1e' (line 1693)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1693, 21), 'y1e', tuple_assignment_100418_104190)
            # SSA branch for the else part of an if statement (line 1692)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Tuple to a Tuple (line 1695):
            
            # Assigning a Name to a Name (line 1695):
            
            # Assigning a Name to a Name (line 1695):
            # Getting the type of 'y0' (line 1695)
            y0_104191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1695, 27), 'y0')
            # Assigning a type to the variable 'tuple_assignment_100419' (line 1695)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1695, 16), 'tuple_assignment_100419', y0_104191)
            
            # Assigning a Name to a Name (line 1695):
            
            # Assigning a Name to a Name (line 1695):
            # Getting the type of 'y1' (line 1695)
            y1_104192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1695, 31), 'y1')
            # Assigning a type to the variable 'tuple_assignment_100420' (line 1695)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1695, 16), 'tuple_assignment_100420', y1_104192)
            
            # Assigning a Name to a Name (line 1695):
            
            # Assigning a Name to a Name (line 1695):
            # Getting the type of 'tuple_assignment_100419' (line 1695)
            tuple_assignment_100419_104193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1695, 16), 'tuple_assignment_100419')
            # Assigning a type to the variable 'y0e' (line 1695)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1695, 16), 'y0e', tuple_assignment_100419_104193)
            
            # Assigning a Name to a Name (line 1695):
            
            # Assigning a Name to a Name (line 1695):
            # Getting the type of 'tuple_assignment_100420' (line 1695)
            tuple_assignment_100420_104194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1695, 16), 'tuple_assignment_100420')
            # Assigning a type to the variable 'y1e' (line 1695)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1695, 21), 'y1e', tuple_assignment_100420_104194)
            # SSA join for if statement (line 1692)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Getting the type of 'x0e' (line 1696)
            x0e_104195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1696, 12), 'x0e')
            # Getting the type of 'epsilon' (line 1696)
            epsilon_104196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1696, 19), 'epsilon')
            # Applying the binary operator '-=' (line 1696)
            result_isub_104197 = python_operator(stypy.reporting.localization.Localization(__file__, 1696, 12), '-=', x0e_104195, epsilon_104196)
            # Assigning a type to the variable 'x0e' (line 1696)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1696, 12), 'x0e', result_isub_104197)
            
            
            # Getting the type of 'y0e' (line 1697)
            y0e_104198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1697, 12), 'y0e')
            # Getting the type of 'epsilon' (line 1697)
            epsilon_104199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1697, 19), 'epsilon')
            # Applying the binary operator '-=' (line 1697)
            result_isub_104200 = python_operator(stypy.reporting.localization.Localization(__file__, 1697, 12), '-=', y0e_104198, epsilon_104199)
            # Assigning a type to the variable 'y0e' (line 1697)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1697, 12), 'y0e', result_isub_104200)
            
            
            # Getting the type of 'x1e' (line 1698)
            x1e_104201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1698, 12), 'x1e')
            # Getting the type of 'epsilon' (line 1698)
            epsilon_104202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1698, 19), 'epsilon')
            # Applying the binary operator '+=' (line 1698)
            result_iadd_104203 = python_operator(stypy.reporting.localization.Localization(__file__, 1698, 12), '+=', x1e_104201, epsilon_104202)
            # Assigning a type to the variable 'x1e' (line 1698)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1698, 12), 'x1e', result_iadd_104203)
            
            
            # Getting the type of 'y1e' (line 1699)
            y1e_104204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 12), 'y1e')
            # Getting the type of 'epsilon' (line 1699)
            epsilon_104205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 19), 'epsilon')
            # Applying the binary operator '+=' (line 1699)
            result_iadd_104206 = python_operator(stypy.reporting.localization.Localization(__file__, 1699, 12), '+=', y1e_104204, epsilon_104205)
            # Assigning a type to the variable 'y1e' (line 1699)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1699, 12), 'y1e', result_iadd_104206)
            
            
            
            # Call to iter_circle_intersect_on_line(...): (line 1700)
            # Processing the call arguments (line 1700)
            # Getting the type of 'x0' (line 1700)
            x0_104208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1700, 54), 'x0', False)
            # Getting the type of 'y0' (line 1700)
            y0_104209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1700, 58), 'y0', False)
            # Getting the type of 'x1' (line 1700)
            x1_104210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1700, 62), 'x1', False)
            # Getting the type of 'y1' (line 1700)
            y1_104211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1700, 66), 'y1', False)
            # Processing the call keyword arguments (line 1700)
            kwargs_104212 = {}
            # Getting the type of 'iter_circle_intersect_on_line' (line 1700)
            iter_circle_intersect_on_line_104207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1700, 24), 'iter_circle_intersect_on_line', False)
            # Calling iter_circle_intersect_on_line(args, kwargs) (line 1700)
            iter_circle_intersect_on_line_call_result_104213 = invoke(stypy.reporting.localization.Localization(__file__, 1700, 24), iter_circle_intersect_on_line_104207, *[x0_104208, y0_104209, x1_104210, y1_104211], **kwargs_104212)
            
            # Testing the type of a for loop iterable (line 1700)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1700, 12), iter_circle_intersect_on_line_call_result_104213)
            # Getting the type of the for loop variable (line 1700)
            for_loop_var_104214 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1700, 12), iter_circle_intersect_on_line_call_result_104213)
            # Assigning a type to the variable 'x' (line 1700)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1700, 12), 'x', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1700, 12), for_loop_var_104214))
            # Assigning a type to the variable 'y' (line 1700)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1700, 12), 'y', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1700, 12), for_loop_var_104214))
            # SSA begins for a for statement (line 1700)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'x' (line 1701)
            x_104215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 19), 'x')
            # Getting the type of 'x0e' (line 1701)
            x0e_104216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 24), 'x0e')
            # Applying the binary operator '>=' (line 1701)
            result_ge_104217 = python_operator(stypy.reporting.localization.Localization(__file__, 1701, 19), '>=', x_104215, x0e_104216)
            
            
            # Getting the type of 'x' (line 1701)
            x_104218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 32), 'x')
            # Getting the type of 'x1e' (line 1701)
            x1e_104219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 37), 'x1e')
            # Applying the binary operator '<=' (line 1701)
            result_le_104220 = python_operator(stypy.reporting.localization.Localization(__file__, 1701, 32), '<=', x_104218, x1e_104219)
            
            # Applying the binary operator 'and' (line 1701)
            result_and_keyword_104221 = python_operator(stypy.reporting.localization.Localization(__file__, 1701, 19), 'and', result_ge_104217, result_le_104220)
            
            # Getting the type of 'y' (line 1701)
            y_104222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 45), 'y')
            # Getting the type of 'y0e' (line 1701)
            y0e_104223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 50), 'y0e')
            # Applying the binary operator '>=' (line 1701)
            result_ge_104224 = python_operator(stypy.reporting.localization.Localization(__file__, 1701, 45), '>=', y_104222, y0e_104223)
            
            # Applying the binary operator 'and' (line 1701)
            result_and_keyword_104225 = python_operator(stypy.reporting.localization.Localization(__file__, 1701, 19), 'and', result_and_keyword_104221, result_ge_104224)
            
            # Getting the type of 'y' (line 1701)
            y_104226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 58), 'y')
            # Getting the type of 'y1e' (line 1701)
            y1e_104227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 63), 'y1e')
            # Applying the binary operator '<=' (line 1701)
            result_le_104228 = python_operator(stypy.reporting.localization.Localization(__file__, 1701, 58), '<=', y_104226, y1e_104227)
            
            # Applying the binary operator 'and' (line 1701)
            result_and_keyword_104229 = python_operator(stypy.reporting.localization.Localization(__file__, 1701, 19), 'and', result_and_keyword_104225, result_le_104228)
            
            # Testing the type of an if condition (line 1701)
            if_condition_104230 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1701, 16), result_and_keyword_104229)
            # Assigning a type to the variable 'if_condition_104230' (line 1701)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1701, 16), 'if_condition_104230', if_condition_104230)
            # SSA begins for if statement (line 1701)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            # Creating a generator
            
            # Obtaining an instance of the builtin type 'tuple' (line 1702)
            tuple_104231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1702, 26), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1702)
            # Adding element type (line 1702)
            # Getting the type of 'x' (line 1702)
            x_104232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1702, 26), 'x')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1702, 26), tuple_104231, x_104232)
            # Adding element type (line 1702)
            # Getting the type of 'y' (line 1702)
            y_104233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1702, 29), 'y')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1702, 26), tuple_104231, y_104233)
            
            GeneratorType_104234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1702, 20), 'GeneratorType')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1702, 20), GeneratorType_104234, tuple_104231)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1702, 20), 'stypy_return_type', GeneratorType_104234)
            # SSA join for if statement (line 1701)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            
            
            # ################# End of 'iter_circle_intersect_on_line_seg(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'iter_circle_intersect_on_line_seg' in the type store
            # Getting the type of 'stypy_return_type' (line 1686)
            stypy_return_type_104235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_104235)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'iter_circle_intersect_on_line_seg'
            return stypy_return_type_104235

        # Assigning a type to the variable 'iter_circle_intersect_on_line_seg' (line 1686)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1686, 8), 'iter_circle_intersect_on_line_seg', iter_circle_intersect_on_line_seg)
        
        # Assigning a Call to a Name (line 1707):
        
        # Assigning a Call to a Name (line 1707):
        
        # Assigning a Call to a Name (line 1707):
        
        # Call to unit_rectangle(...): (line 1707)
        # Processing the call keyword arguments (line 1707)
        kwargs_104238 = {}
        # Getting the type of 'Path' (line 1707)
        Path_104236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1707, 19), 'Path', False)
        # Obtaining the member 'unit_rectangle' of a type (line 1707)
        unit_rectangle_104237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1707, 19), Path_104236, 'unit_rectangle')
        # Calling unit_rectangle(args, kwargs) (line 1707)
        unit_rectangle_call_result_104239 = invoke(stypy.reporting.localization.Localization(__file__, 1707, 19), unit_rectangle_104237, *[], **kwargs_104238)
        
        # Assigning a type to the variable 'box_path' (line 1707)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1707, 8), 'box_path', unit_rectangle_call_result_104239)
        
        # Assigning a BinOp to a Name (line 1708):
        
        # Assigning a BinOp to a Name (line 1708):
        
        # Assigning a BinOp to a Name (line 1708):
        
        # Call to BboxTransformTo(...): (line 1708)
        # Processing the call arguments (line 1708)
        # Getting the type of 'self' (line 1708)
        self_104242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1708, 56), 'self', False)
        # Obtaining the member 'axes' of a type (line 1708)
        axes_104243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1708, 56), self_104242, 'axes')
        # Obtaining the member 'bbox' of a type (line 1708)
        bbox_104244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1708, 56), axes_104243, 'bbox')
        # Processing the call keyword arguments (line 1708)
        kwargs_104245 = {}
        # Getting the type of 'transforms' (line 1708)
        transforms_104240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1708, 29), 'transforms', False)
        # Obtaining the member 'BboxTransformTo' of a type (line 1708)
        BboxTransformTo_104241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1708, 29), transforms_104240, 'BboxTransformTo')
        # Calling BboxTransformTo(args, kwargs) (line 1708)
        BboxTransformTo_call_result_104246 = invoke(stypy.reporting.localization.Localization(__file__, 1708, 29), BboxTransformTo_104241, *[bbox_104244], **kwargs_104245)
        
        
        # Call to inverted(...): (line 1709)
        # Processing the call keyword arguments (line 1709)
        kwargs_104252 = {}
        
        # Call to get_transform(...): (line 1709)
        # Processing the call keyword arguments (line 1709)
        kwargs_104249 = {}
        # Getting the type of 'self' (line 1709)
        self_104247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1709, 12), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 1709)
        get_transform_104248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1709, 12), self_104247, 'get_transform')
        # Calling get_transform(args, kwargs) (line 1709)
        get_transform_call_result_104250 = invoke(stypy.reporting.localization.Localization(__file__, 1709, 12), get_transform_104248, *[], **kwargs_104249)
        
        # Obtaining the member 'inverted' of a type (line 1709)
        inverted_104251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1709, 12), get_transform_call_result_104250, 'inverted')
        # Calling inverted(args, kwargs) (line 1709)
        inverted_call_result_104253 = invoke(stypy.reporting.localization.Localization(__file__, 1709, 12), inverted_104251, *[], **kwargs_104252)
        
        # Applying the binary operator '+' (line 1708)
        result_add_104254 = python_operator(stypy.reporting.localization.Localization(__file__, 1708, 29), '+', BboxTransformTo_call_result_104246, inverted_call_result_104253)
        
        # Assigning a type to the variable 'box_path_transform' (line 1708)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1708, 8), 'box_path_transform', result_add_104254)
        
        # Assigning a Call to a Name (line 1710):
        
        # Assigning a Call to a Name (line 1710):
        
        # Assigning a Call to a Name (line 1710):
        
        # Call to transformed(...): (line 1710)
        # Processing the call arguments (line 1710)
        # Getting the type of 'box_path_transform' (line 1710)
        box_path_transform_104257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1710, 40), 'box_path_transform', False)
        # Processing the call keyword arguments (line 1710)
        kwargs_104258 = {}
        # Getting the type of 'box_path' (line 1710)
        box_path_104255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1710, 19), 'box_path', False)
        # Obtaining the member 'transformed' of a type (line 1710)
        transformed_104256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1710, 19), box_path_104255, 'transformed')
        # Calling transformed(args, kwargs) (line 1710)
        transformed_call_result_104259 = invoke(stypy.reporting.localization.Localization(__file__, 1710, 19), transformed_104256, *[box_path_transform_104257], **kwargs_104258)
        
        # Assigning a type to the variable 'box_path' (line 1710)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1710, 8), 'box_path', transformed_call_result_104259)
        
        # Assigning a Call to a Name (line 1712):
        
        # Assigning a Call to a Name (line 1712):
        
        # Assigning a Call to a Name (line 1712):
        
        # Call to set(...): (line 1712)
        # Processing the call keyword arguments (line 1712)
        kwargs_104261 = {}
        # Getting the type of 'set' (line 1712)
        set_104260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 17), 'set', False)
        # Calling set(args, kwargs) (line 1712)
        set_call_result_104262 = invoke(stypy.reporting.localization.Localization(__file__, 1712, 17), set_104260, *[], **kwargs_104261)
        
        # Assigning a type to the variable 'thetas' (line 1712)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1712, 8), 'thetas', set_call_result_104262)
        
        
        # Call to zip(...): (line 1714)
        # Processing the call arguments (line 1714)
        
        # Obtaining the type of the subscript
        int_104264 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1714, 45), 'int')
        slice_104265 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1714, 26), None, int_104264, None)
        # Getting the type of 'box_path' (line 1714)
        box_path_104266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1714, 26), 'box_path', False)
        # Obtaining the member 'vertices' of a type (line 1714)
        vertices_104267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1714, 26), box_path_104266, 'vertices')
        # Obtaining the member '__getitem__' of a type (line 1714)
        getitem___104268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1714, 26), vertices_104267, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1714)
        subscript_call_result_104269 = invoke(stypy.reporting.localization.Localization(__file__, 1714, 26), getitem___104268, slice_104265)
        
        
        # Obtaining the type of the subscript
        int_104270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1714, 68), 'int')
        slice_104271 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1714, 50), int_104270, None, None)
        # Getting the type of 'box_path' (line 1714)
        box_path_104272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1714, 50), 'box_path', False)
        # Obtaining the member 'vertices' of a type (line 1714)
        vertices_104273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1714, 50), box_path_104272, 'vertices')
        # Obtaining the member '__getitem__' of a type (line 1714)
        getitem___104274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1714, 50), vertices_104273, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1714)
        subscript_call_result_104275 = invoke(stypy.reporting.localization.Localization(__file__, 1714, 50), getitem___104274, slice_104271)
        
        # Processing the call keyword arguments (line 1714)
        kwargs_104276 = {}
        # Getting the type of 'zip' (line 1714)
        zip_104263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1714, 22), 'zip', False)
        # Calling zip(args, kwargs) (line 1714)
        zip_call_result_104277 = invoke(stypy.reporting.localization.Localization(__file__, 1714, 22), zip_104263, *[subscript_call_result_104269, subscript_call_result_104275], **kwargs_104276)
        
        # Testing the type of a for loop iterable (line 1714)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1714, 8), zip_call_result_104277)
        # Getting the type of the for loop variable (line 1714)
        for_loop_var_104278 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1714, 8), zip_call_result_104277)
        # Assigning a type to the variable 'p0' (line 1714)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1714, 8), 'p0', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1714, 8), for_loop_var_104278))
        # Assigning a type to the variable 'p1' (line 1714)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1714, 8), 'p1', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1714, 8), for_loop_var_104278))
        # SSA begins for a for statement (line 1714)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Name to a Tuple (line 1715):
        
        # Assigning a Subscript to a Name (line 1715):
        
        # Assigning a Subscript to a Name (line 1715):
        
        # Obtaining the type of the subscript
        int_104279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1715, 12), 'int')
        # Getting the type of 'p0' (line 1715)
        p0_104280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1715, 21), 'p0')
        # Obtaining the member '__getitem__' of a type (line 1715)
        getitem___104281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1715, 12), p0_104280, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1715)
        subscript_call_result_104282 = invoke(stypy.reporting.localization.Localization(__file__, 1715, 12), getitem___104281, int_104279)
        
        # Assigning a type to the variable 'tuple_var_assignment_100421' (line 1715)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1715, 12), 'tuple_var_assignment_100421', subscript_call_result_104282)
        
        # Assigning a Subscript to a Name (line 1715):
        
        # Assigning a Subscript to a Name (line 1715):
        
        # Obtaining the type of the subscript
        int_104283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1715, 12), 'int')
        # Getting the type of 'p0' (line 1715)
        p0_104284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1715, 21), 'p0')
        # Obtaining the member '__getitem__' of a type (line 1715)
        getitem___104285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1715, 12), p0_104284, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1715)
        subscript_call_result_104286 = invoke(stypy.reporting.localization.Localization(__file__, 1715, 12), getitem___104285, int_104283)
        
        # Assigning a type to the variable 'tuple_var_assignment_100422' (line 1715)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1715, 12), 'tuple_var_assignment_100422', subscript_call_result_104286)
        
        # Assigning a Name to a Name (line 1715):
        
        # Assigning a Name to a Name (line 1715):
        # Getting the type of 'tuple_var_assignment_100421' (line 1715)
        tuple_var_assignment_100421_104287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1715, 12), 'tuple_var_assignment_100421')
        # Assigning a type to the variable 'x0' (line 1715)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1715, 12), 'x0', tuple_var_assignment_100421_104287)
        
        # Assigning a Name to a Name (line 1715):
        
        # Assigning a Name to a Name (line 1715):
        # Getting the type of 'tuple_var_assignment_100422' (line 1715)
        tuple_var_assignment_100422_104288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1715, 12), 'tuple_var_assignment_100422')
        # Assigning a type to the variable 'y0' (line 1715)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1715, 16), 'y0', tuple_var_assignment_100422_104288)
        
        # Assigning a Name to a Tuple (line 1716):
        
        # Assigning a Subscript to a Name (line 1716):
        
        # Assigning a Subscript to a Name (line 1716):
        
        # Obtaining the type of the subscript
        int_104289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1716, 12), 'int')
        # Getting the type of 'p1' (line 1716)
        p1_104290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 21), 'p1')
        # Obtaining the member '__getitem__' of a type (line 1716)
        getitem___104291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1716, 12), p1_104290, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1716)
        subscript_call_result_104292 = invoke(stypy.reporting.localization.Localization(__file__, 1716, 12), getitem___104291, int_104289)
        
        # Assigning a type to the variable 'tuple_var_assignment_100423' (line 1716)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1716, 12), 'tuple_var_assignment_100423', subscript_call_result_104292)
        
        # Assigning a Subscript to a Name (line 1716):
        
        # Assigning a Subscript to a Name (line 1716):
        
        # Obtaining the type of the subscript
        int_104293 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1716, 12), 'int')
        # Getting the type of 'p1' (line 1716)
        p1_104294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 21), 'p1')
        # Obtaining the member '__getitem__' of a type (line 1716)
        getitem___104295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1716, 12), p1_104294, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1716)
        subscript_call_result_104296 = invoke(stypy.reporting.localization.Localization(__file__, 1716, 12), getitem___104295, int_104293)
        
        # Assigning a type to the variable 'tuple_var_assignment_100424' (line 1716)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1716, 12), 'tuple_var_assignment_100424', subscript_call_result_104296)
        
        # Assigning a Name to a Name (line 1716):
        
        # Assigning a Name to a Name (line 1716):
        # Getting the type of 'tuple_var_assignment_100423' (line 1716)
        tuple_var_assignment_100423_104297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 12), 'tuple_var_assignment_100423')
        # Assigning a type to the variable 'x1' (line 1716)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1716, 12), 'x1', tuple_var_assignment_100423_104297)
        
        # Assigning a Name to a Name (line 1716):
        
        # Assigning a Name to a Name (line 1716):
        # Getting the type of 'tuple_var_assignment_100424' (line 1716)
        tuple_var_assignment_100424_104298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 12), 'tuple_var_assignment_100424')
        # Assigning a type to the variable 'y1' (line 1716)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1716, 16), 'y1', tuple_var_assignment_100424_104298)
        
        
        # Call to iter_circle_intersect_on_line_seg(...): (line 1717)
        # Processing the call arguments (line 1717)
        # Getting the type of 'x0' (line 1717)
        x0_104300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 58), 'x0', False)
        # Getting the type of 'y0' (line 1717)
        y0_104301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 62), 'y0', False)
        # Getting the type of 'x1' (line 1717)
        x1_104302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 66), 'x1', False)
        # Getting the type of 'y1' (line 1717)
        y1_104303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 70), 'y1', False)
        # Processing the call keyword arguments (line 1717)
        kwargs_104304 = {}
        # Getting the type of 'iter_circle_intersect_on_line_seg' (line 1717)
        iter_circle_intersect_on_line_seg_104299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 24), 'iter_circle_intersect_on_line_seg', False)
        # Calling iter_circle_intersect_on_line_seg(args, kwargs) (line 1717)
        iter_circle_intersect_on_line_seg_call_result_104305 = invoke(stypy.reporting.localization.Localization(__file__, 1717, 24), iter_circle_intersect_on_line_seg_104299, *[x0_104300, y0_104301, x1_104302, y1_104303], **kwargs_104304)
        
        # Testing the type of a for loop iterable (line 1717)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1717, 12), iter_circle_intersect_on_line_seg_call_result_104305)
        # Getting the type of the for loop variable (line 1717)
        for_loop_var_104306 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1717, 12), iter_circle_intersect_on_line_seg_call_result_104305)
        # Assigning a type to the variable 'x' (line 1717)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1717, 12), 'x', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1717, 12), for_loop_var_104306))
        # Assigning a type to the variable 'y' (line 1717)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1717, 12), 'y', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1717, 12), for_loop_var_104306))
        # SSA begins for a for statement (line 1717)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 1718):
        
        # Assigning a Call to a Name (line 1718):
        
        # Assigning a Call to a Name (line 1718):
        
        # Call to arccos(...): (line 1718)
        # Processing the call arguments (line 1718)
        # Getting the type of 'x' (line 1718)
        x_104309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 34), 'x', False)
        # Processing the call keyword arguments (line 1718)
        kwargs_104310 = {}
        # Getting the type of 'np' (line 1718)
        np_104307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 24), 'np', False)
        # Obtaining the member 'arccos' of a type (line 1718)
        arccos_104308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1718, 24), np_104307, 'arccos')
        # Calling arccos(args, kwargs) (line 1718)
        arccos_call_result_104311 = invoke(stypy.reporting.localization.Localization(__file__, 1718, 24), arccos_104308, *[x_104309], **kwargs_104310)
        
        # Assigning a type to the variable 'theta' (line 1718)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1718, 16), 'theta', arccos_call_result_104311)
        
        
        # Getting the type of 'y' (line 1719)
        y_104312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 19), 'y')
        int_104313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1719, 23), 'int')
        # Applying the binary operator '<' (line 1719)
        result_lt_104314 = python_operator(stypy.reporting.localization.Localization(__file__, 1719, 19), '<', y_104312, int_104313)
        
        # Testing the type of an if condition (line 1719)
        if_condition_104315 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1719, 16), result_lt_104314)
        # Assigning a type to the variable 'if_condition_104315' (line 1719)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1719, 16), 'if_condition_104315', if_condition_104315)
        # SSA begins for if statement (line 1719)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1720):
        
        # Assigning a BinOp to a Name (line 1720):
        
        # Assigning a BinOp to a Name (line 1720):
        int_104316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1720, 28), 'int')
        # Getting the type of 'np' (line 1720)
        np_104317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 32), 'np')
        # Obtaining the member 'pi' of a type (line 1720)
        pi_104318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1720, 32), np_104317, 'pi')
        # Applying the binary operator '*' (line 1720)
        result_mul_104319 = python_operator(stypy.reporting.localization.Localization(__file__, 1720, 28), '*', int_104316, pi_104318)
        
        # Getting the type of 'theta' (line 1720)
        theta_104320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 40), 'theta')
        # Applying the binary operator '-' (line 1720)
        result_sub_104321 = python_operator(stypy.reporting.localization.Localization(__file__, 1720, 28), '-', result_mul_104319, theta_104320)
        
        # Assigning a type to the variable 'theta' (line 1720)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1720, 20), 'theta', result_sub_104321)
        # SSA join for if statement (line 1719)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1722):
        
        # Assigning a Call to a Name (line 1722):
        
        # Assigning a Call to a Name (line 1722):
        
        # Call to rad2deg(...): (line 1722)
        # Processing the call arguments (line 1722)
        # Getting the type of 'theta' (line 1722)
        theta_104324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1722, 35), 'theta', False)
        # Processing the call keyword arguments (line 1722)
        kwargs_104325 = {}
        # Getting the type of 'np' (line 1722)
        np_104322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1722, 24), 'np', False)
        # Obtaining the member 'rad2deg' of a type (line 1722)
        rad2deg_104323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1722, 24), np_104322, 'rad2deg')
        # Calling rad2deg(args, kwargs) (line 1722)
        rad2deg_call_result_104326 = invoke(stypy.reporting.localization.Localization(__file__, 1722, 24), rad2deg_104323, *[theta_104324], **kwargs_104325)
        
        # Assigning a type to the variable 'theta' (line 1722)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1722, 16), 'theta', rad2deg_call_result_104326)
        
        
        # Getting the type of 'theta1' (line 1723)
        theta1_104327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1723, 19), 'theta1')
        # Getting the type of 'theta' (line 1723)
        theta_104328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1723, 28), 'theta')
        # Applying the binary operator '<' (line 1723)
        result_lt_104329 = python_operator(stypy.reporting.localization.Localization(__file__, 1723, 19), '<', theta1_104327, theta_104328)
        # Getting the type of 'theta2' (line 1723)
        theta2_104330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1723, 36), 'theta2')
        # Applying the binary operator '<' (line 1723)
        result_lt_104331 = python_operator(stypy.reporting.localization.Localization(__file__, 1723, 19), '<', theta_104328, theta2_104330)
        # Applying the binary operator '&' (line 1723)
        result_and__104332 = python_operator(stypy.reporting.localization.Localization(__file__, 1723, 19), '&', result_lt_104329, result_lt_104331)
        
        # Testing the type of an if condition (line 1723)
        if_condition_104333 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1723, 16), result_and__104332)
        # Assigning a type to the variable 'if_condition_104333' (line 1723)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1723, 16), 'if_condition_104333', if_condition_104333)
        # SSA begins for if statement (line 1723)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to add(...): (line 1724)
        # Processing the call arguments (line 1724)
        # Getting the type of 'theta' (line 1724)
        theta_104336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 31), 'theta', False)
        # Processing the call keyword arguments (line 1724)
        kwargs_104337 = {}
        # Getting the type of 'thetas' (line 1724)
        thetas_104334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 20), 'thetas', False)
        # Obtaining the member 'add' of a type (line 1724)
        add_104335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1724, 20), thetas_104334, 'add')
        # Calling add(args, kwargs) (line 1724)
        add_call_result_104338 = invoke(stypy.reporting.localization.Localization(__file__, 1724, 20), add_104335, *[theta_104336], **kwargs_104337)
        
        # SSA join for if statement (line 1723)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 1725):
        
        # Assigning a BinOp to a Name (line 1725):
        
        # Assigning a BinOp to a Name (line 1725):
        
        # Call to sorted(...): (line 1725)
        # Processing the call arguments (line 1725)
        # Getting the type of 'thetas' (line 1725)
        thetas_104340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1725, 24), 'thetas', False)
        # Processing the call keyword arguments (line 1725)
        kwargs_104341 = {}
        # Getting the type of 'sorted' (line 1725)
        sorted_104339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1725, 17), 'sorted', False)
        # Calling sorted(args, kwargs) (line 1725)
        sorted_call_result_104342 = invoke(stypy.reporting.localization.Localization(__file__, 1725, 17), sorted_104339, *[thetas_104340], **kwargs_104341)
        
        
        # Obtaining an instance of the builtin type 'list' (line 1725)
        list_104343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1725, 34), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1725)
        # Adding element type (line 1725)
        # Getting the type of 'theta2' (line 1725)
        theta2_104344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1725, 35), 'theta2')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1725, 34), list_104343, theta2_104344)
        
        # Applying the binary operator '+' (line 1725)
        result_add_104345 = python_operator(stypy.reporting.localization.Localization(__file__, 1725, 17), '+', sorted_call_result_104342, list_104343)
        
        # Assigning a type to the variable 'thetas' (line 1725)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1725, 8), 'thetas', result_add_104345)
        
        # Assigning a Name to a Name (line 1727):
        
        # Assigning a Name to a Name (line 1727):
        
        # Assigning a Name to a Name (line 1727):
        # Getting the type of 'theta1' (line 1727)
        theta1_104346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 21), 'theta1')
        # Assigning a type to the variable 'last_theta' (line 1727)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1727, 8), 'last_theta', theta1_104346)
        
        # Assigning a Call to a Name (line 1728):
        
        # Assigning a Call to a Name (line 1728):
        
        # Assigning a Call to a Name (line 1728):
        
        # Call to deg2rad(...): (line 1728)
        # Processing the call arguments (line 1728)
        # Getting the type of 'theta1' (line 1728)
        theta1_104349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 32), 'theta1', False)
        # Processing the call keyword arguments (line 1728)
        kwargs_104350 = {}
        # Getting the type of 'np' (line 1728)
        np_104347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 21), 'np', False)
        # Obtaining the member 'deg2rad' of a type (line 1728)
        deg2rad_104348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1728, 21), np_104347, 'deg2rad')
        # Calling deg2rad(args, kwargs) (line 1728)
        deg2rad_call_result_104351 = invoke(stypy.reporting.localization.Localization(__file__, 1728, 21), deg2rad_104348, *[theta1_104349], **kwargs_104350)
        
        # Assigning a type to the variable 'theta1_rad' (line 1728)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1728, 8), 'theta1_rad', deg2rad_call_result_104351)
        
        # Assigning a Call to a Name (line 1729):
        
        # Assigning a Call to a Name (line 1729):
        
        # Assigning a Call to a Name (line 1729):
        
        # Call to contains_point(...): (line 1729)
        # Processing the call arguments (line 1729)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1729)
        tuple_104354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1729, 42), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1729)
        # Adding element type (line 1729)
        
        # Call to cos(...): (line 1729)
        # Processing the call arguments (line 1729)
        # Getting the type of 'theta1_rad' (line 1729)
        theta1_rad_104357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1729, 49), 'theta1_rad', False)
        # Processing the call keyword arguments (line 1729)
        kwargs_104358 = {}
        # Getting the type of 'np' (line 1729)
        np_104355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1729, 42), 'np', False)
        # Obtaining the member 'cos' of a type (line 1729)
        cos_104356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1729, 42), np_104355, 'cos')
        # Calling cos(args, kwargs) (line 1729)
        cos_call_result_104359 = invoke(stypy.reporting.localization.Localization(__file__, 1729, 42), cos_104356, *[theta1_rad_104357], **kwargs_104358)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1729, 42), tuple_104354, cos_call_result_104359)
        # Adding element type (line 1729)
        
        # Call to sin(...): (line 1730)
        # Processing the call arguments (line 1730)
        # Getting the type of 'theta1_rad' (line 1730)
        theta1_rad_104362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 49), 'theta1_rad', False)
        # Processing the call keyword arguments (line 1730)
        kwargs_104363 = {}
        # Getting the type of 'np' (line 1730)
        np_104360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 42), 'np', False)
        # Obtaining the member 'sin' of a type (line 1730)
        sin_104361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1730, 42), np_104360, 'sin')
        # Calling sin(args, kwargs) (line 1730)
        sin_call_result_104364 = invoke(stypy.reporting.localization.Localization(__file__, 1730, 42), sin_104361, *[theta1_rad_104362], **kwargs_104363)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1729, 42), tuple_104354, sin_call_result_104364)
        
        # Processing the call keyword arguments (line 1729)
        kwargs_104365 = {}
        # Getting the type of 'box_path' (line 1729)
        box_path_104352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1729, 17), 'box_path', False)
        # Obtaining the member 'contains_point' of a type (line 1729)
        contains_point_104353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1729, 17), box_path_104352, 'contains_point')
        # Calling contains_point(args, kwargs) (line 1729)
        contains_point_call_result_104366 = invoke(stypy.reporting.localization.Localization(__file__, 1729, 17), contains_point_104353, *[tuple_104354], **kwargs_104365)
        
        # Assigning a type to the variable 'inside' (line 1729)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1729, 8), 'inside', contains_point_call_result_104366)
        
        # Assigning a Attribute to a Name (line 1733):
        
        # Assigning a Attribute to a Name (line 1733):
        
        # Assigning a Attribute to a Name (line 1733):
        # Getting the type of 'self' (line 1733)
        self_104367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1733, 24), 'self')
        # Obtaining the member '_path' of a type (line 1733)
        _path_104368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1733, 24), self_104367, '_path')
        # Assigning a type to the variable 'path_original' (line 1733)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1733, 8), 'path_original', _path_104368)
        
        # Getting the type of 'thetas' (line 1734)
        thetas_104369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 21), 'thetas')
        # Testing the type of a for loop iterable (line 1734)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1734, 8), thetas_104369)
        # Getting the type of the for loop variable (line 1734)
        for_loop_var_104370 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1734, 8), thetas_104369)
        # Assigning a type to the variable 'theta' (line 1734)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1734, 8), 'theta', for_loop_var_104370)
        # SSA begins for a for statement (line 1734)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Getting the type of 'inside' (line 1735)
        inside_104371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 15), 'inside')
        # Testing the type of an if condition (line 1735)
        if_condition_104372 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1735, 12), inside_104371)
        # Assigning a type to the variable 'if_condition_104372' (line 1735)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1735, 12), 'if_condition_104372', if_condition_104372)
        # SSA begins for if statement (line 1735)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to arc(...): (line 1736)
        # Processing the call arguments (line 1736)
        # Getting the type of 'last_theta' (line 1736)
        last_theta_104375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 25), 'last_theta', False)
        # Getting the type of 'theta' (line 1736)
        theta_104376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 37), 'theta', False)
        int_104377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1736, 44), 'int')
        # Processing the call keyword arguments (line 1736)
        kwargs_104378 = {}
        # Getting the type of 'Path' (line 1736)
        Path_104373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 16), 'Path', False)
        # Obtaining the member 'arc' of a type (line 1736)
        arc_104374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1736, 16), Path_104373, 'arc')
        # Calling arc(args, kwargs) (line 1736)
        arc_call_result_104379 = invoke(stypy.reporting.localization.Localization(__file__, 1736, 16), arc_104374, *[last_theta_104375, theta_104376, int_104377], **kwargs_104378)
        
        
        # Call to draw(...): (line 1737)
        # Processing the call arguments (line 1737)
        # Getting the type of 'self' (line 1737)
        self_104382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 27), 'self', False)
        # Getting the type of 'renderer' (line 1737)
        renderer_104383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 33), 'renderer', False)
        # Processing the call keyword arguments (line 1737)
        kwargs_104384 = {}
        # Getting the type of 'Patch' (line 1737)
        Patch_104380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 16), 'Patch', False)
        # Obtaining the member 'draw' of a type (line 1737)
        draw_104381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1737, 16), Patch_104380, 'draw')
        # Calling draw(args, kwargs) (line 1737)
        draw_call_result_104385 = invoke(stypy.reporting.localization.Localization(__file__, 1737, 16), draw_104381, *[self_104382, renderer_104383], **kwargs_104384)
        
        
        # Assigning a Name to a Name (line 1738):
        
        # Assigning a Name to a Name (line 1738):
        
        # Assigning a Name to a Name (line 1738):
        # Getting the type of 'False' (line 1738)
        False_104386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 25), 'False')
        # Assigning a type to the variable 'inside' (line 1738)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1738, 16), 'inside', False_104386)
        # SSA branch for the else part of an if statement (line 1735)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 1740):
        
        # Assigning a Name to a Name (line 1740):
        
        # Assigning a Name to a Name (line 1740):
        # Getting the type of 'True' (line 1740)
        True_104387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 25), 'True')
        # Assigning a type to the variable 'inside' (line 1740)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1740, 16), 'inside', True_104387)
        # SSA join for if statement (line 1735)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 1741):
        
        # Assigning a Name to a Name (line 1741):
        
        # Assigning a Name to a Name (line 1741):
        # Getting the type of 'theta' (line 1741)
        theta_104388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1741, 25), 'theta')
        # Assigning a type to the variable 'last_theta' (line 1741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1741, 12), 'last_theta', theta_104388)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1744):
        
        # Assigning a Name to a Attribute (line 1744):
        
        # Assigning a Name to a Attribute (line 1744):
        # Getting the type of 'path_original' (line 1744)
        path_original_104389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 21), 'path_original')
        # Getting the type of 'self' (line 1744)
        self_104390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 8), 'self')
        # Setting the type of the member '_path' of a type (line 1744)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1744, 8), self_104390, '_path', path_original_104389)
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 1589)
        stypy_return_type_104391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1589, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_104391)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_104391


# Assigning a type to the variable 'Arc' (line 1531)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1531, 0), 'Arc', Arc)

@norecursion
def bbox_artist(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1747)
    None_104392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 40), 'None')
    # Getting the type of 'True' (line 1747)
    True_104393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 51), 'True')
    defaults = [None_104392, True_104393]
    # Create a new context for function 'bbox_artist'
    module_type_store = module_type_store.open_function_context('bbox_artist', 1747, 0, False)
    
    # Passed parameters checking function
    bbox_artist.stypy_localization = localization
    bbox_artist.stypy_type_of_self = None
    bbox_artist.stypy_type_store = module_type_store
    bbox_artist.stypy_function_name = 'bbox_artist'
    bbox_artist.stypy_param_names_list = ['artist', 'renderer', 'props', 'fill']
    bbox_artist.stypy_varargs_param_name = None
    bbox_artist.stypy_kwargs_param_name = None
    bbox_artist.stypy_call_defaults = defaults
    bbox_artist.stypy_call_varargs = varargs
    bbox_artist.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'bbox_artist', ['artist', 'renderer', 'props', 'fill'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'bbox_artist', localization, ['artist', 'renderer', 'props', 'fill'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'bbox_artist(...)' code ##################

    unicode_104394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1756, (-1)), 'unicode', u"\n    This is a debug function to draw a rectangle around the bounding\n    box returned by\n    :meth:`~matplotlib.artist.Artist.get_window_extent` of an artist,\n    to test whether the artist is returning the correct bbox.\n\n    *props* is a dict of rectangle props with the additional property\n    'pad' that sets the padding around the bbox in points.\n    ")
    
    # Type idiom detected: calculating its left and rigth part (line 1757)
    # Getting the type of 'props' (line 1757)
    props_104395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1757, 7), 'props')
    # Getting the type of 'None' (line 1757)
    None_104396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1757, 16), 'None')
    
    (may_be_104397, more_types_in_union_104398) = may_be_none(props_104395, None_104396)

    if may_be_104397:

        if more_types_in_union_104398:
            # Runtime conditional SSA (line 1757)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Dict to a Name (line 1758):
        
        # Assigning a Dict to a Name (line 1758):
        
        # Assigning a Dict to a Name (line 1758):
        
        # Obtaining an instance of the builtin type 'dict' (line 1758)
        dict_104399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1758, 16), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1758)
        
        # Assigning a type to the variable 'props' (line 1758)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1758, 8), 'props', dict_104399)

        if more_types_in_union_104398:
            # SSA join for if statement (line 1757)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 1759):
    
    # Assigning a Call to a Name (line 1759):
    
    # Assigning a Call to a Name (line 1759):
    
    # Call to copy(...): (line 1759)
    # Processing the call keyword arguments (line 1759)
    kwargs_104402 = {}
    # Getting the type of 'props' (line 1759)
    props_104400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1759, 12), 'props', False)
    # Obtaining the member 'copy' of a type (line 1759)
    copy_104401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1759, 12), props_104400, 'copy')
    # Calling copy(args, kwargs) (line 1759)
    copy_call_result_104403 = invoke(stypy.reporting.localization.Localization(__file__, 1759, 12), copy_104401, *[], **kwargs_104402)
    
    # Assigning a type to the variable 'props' (line 1759)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1759, 4), 'props', copy_call_result_104403)
    
    # Assigning a Call to a Name (line 1760):
    
    # Assigning a Call to a Name (line 1760):
    
    # Assigning a Call to a Name (line 1760):
    
    # Call to pop(...): (line 1760)
    # Processing the call arguments (line 1760)
    unicode_104406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1760, 20), 'unicode', u'pad')
    int_104407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1760, 27), 'int')
    # Processing the call keyword arguments (line 1760)
    kwargs_104408 = {}
    # Getting the type of 'props' (line 1760)
    props_104404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1760, 10), 'props', False)
    # Obtaining the member 'pop' of a type (line 1760)
    pop_104405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1760, 10), props_104404, 'pop')
    # Calling pop(args, kwargs) (line 1760)
    pop_call_result_104409 = invoke(stypy.reporting.localization.Localization(__file__, 1760, 10), pop_104405, *[unicode_104406, int_104407], **kwargs_104408)
    
    # Assigning a type to the variable 'pad' (line 1760)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1760, 4), 'pad', pop_call_result_104409)
    
    # Assigning a Call to a Name (line 1761):
    
    # Assigning a Call to a Name (line 1761):
    
    # Assigning a Call to a Name (line 1761):
    
    # Call to points_to_pixels(...): (line 1761)
    # Processing the call arguments (line 1761)
    # Getting the type of 'pad' (line 1761)
    pad_104412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 36), 'pad', False)
    # Processing the call keyword arguments (line 1761)
    kwargs_104413 = {}
    # Getting the type of 'renderer' (line 1761)
    renderer_104410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 10), 'renderer', False)
    # Obtaining the member 'points_to_pixels' of a type (line 1761)
    points_to_pixels_104411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1761, 10), renderer_104410, 'points_to_pixels')
    # Calling points_to_pixels(args, kwargs) (line 1761)
    points_to_pixels_call_result_104414 = invoke(stypy.reporting.localization.Localization(__file__, 1761, 10), points_to_pixels_104411, *[pad_104412], **kwargs_104413)
    
    # Assigning a type to the variable 'pad' (line 1761)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1761, 4), 'pad', points_to_pixels_call_result_104414)
    
    # Assigning a Call to a Name (line 1762):
    
    # Assigning a Call to a Name (line 1762):
    
    # Assigning a Call to a Name (line 1762):
    
    # Call to get_window_extent(...): (line 1762)
    # Processing the call arguments (line 1762)
    # Getting the type of 'renderer' (line 1762)
    renderer_104417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 36), 'renderer', False)
    # Processing the call keyword arguments (line 1762)
    kwargs_104418 = {}
    # Getting the type of 'artist' (line 1762)
    artist_104415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 11), 'artist', False)
    # Obtaining the member 'get_window_extent' of a type (line 1762)
    get_window_extent_104416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1762, 11), artist_104415, 'get_window_extent')
    # Calling get_window_extent(args, kwargs) (line 1762)
    get_window_extent_call_result_104419 = invoke(stypy.reporting.localization.Localization(__file__, 1762, 11), get_window_extent_104416, *[renderer_104417], **kwargs_104418)
    
    # Assigning a type to the variable 'bbox' (line 1762)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1762, 4), 'bbox', get_window_extent_call_result_104419)
    
    # Assigning a Attribute to a Tuple (line 1763):
    
    # Assigning a Subscript to a Name (line 1763):
    
    # Assigning a Subscript to a Name (line 1763):
    
    # Obtaining the type of the subscript
    int_104420 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1763, 4), 'int')
    # Getting the type of 'bbox' (line 1763)
    bbox_104421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 17), 'bbox')
    # Obtaining the member 'bounds' of a type (line 1763)
    bounds_104422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1763, 17), bbox_104421, 'bounds')
    # Obtaining the member '__getitem__' of a type (line 1763)
    getitem___104423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1763, 4), bounds_104422, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1763)
    subscript_call_result_104424 = invoke(stypy.reporting.localization.Localization(__file__, 1763, 4), getitem___104423, int_104420)
    
    # Assigning a type to the variable 'tuple_var_assignment_100425' (line 1763)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1763, 4), 'tuple_var_assignment_100425', subscript_call_result_104424)
    
    # Assigning a Subscript to a Name (line 1763):
    
    # Assigning a Subscript to a Name (line 1763):
    
    # Obtaining the type of the subscript
    int_104425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1763, 4), 'int')
    # Getting the type of 'bbox' (line 1763)
    bbox_104426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 17), 'bbox')
    # Obtaining the member 'bounds' of a type (line 1763)
    bounds_104427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1763, 17), bbox_104426, 'bounds')
    # Obtaining the member '__getitem__' of a type (line 1763)
    getitem___104428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1763, 4), bounds_104427, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1763)
    subscript_call_result_104429 = invoke(stypy.reporting.localization.Localization(__file__, 1763, 4), getitem___104428, int_104425)
    
    # Assigning a type to the variable 'tuple_var_assignment_100426' (line 1763)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1763, 4), 'tuple_var_assignment_100426', subscript_call_result_104429)
    
    # Assigning a Subscript to a Name (line 1763):
    
    # Assigning a Subscript to a Name (line 1763):
    
    # Obtaining the type of the subscript
    int_104430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1763, 4), 'int')
    # Getting the type of 'bbox' (line 1763)
    bbox_104431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 17), 'bbox')
    # Obtaining the member 'bounds' of a type (line 1763)
    bounds_104432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1763, 17), bbox_104431, 'bounds')
    # Obtaining the member '__getitem__' of a type (line 1763)
    getitem___104433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1763, 4), bounds_104432, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1763)
    subscript_call_result_104434 = invoke(stypy.reporting.localization.Localization(__file__, 1763, 4), getitem___104433, int_104430)
    
    # Assigning a type to the variable 'tuple_var_assignment_100427' (line 1763)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1763, 4), 'tuple_var_assignment_100427', subscript_call_result_104434)
    
    # Assigning a Subscript to a Name (line 1763):
    
    # Assigning a Subscript to a Name (line 1763):
    
    # Obtaining the type of the subscript
    int_104435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1763, 4), 'int')
    # Getting the type of 'bbox' (line 1763)
    bbox_104436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 17), 'bbox')
    # Obtaining the member 'bounds' of a type (line 1763)
    bounds_104437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1763, 17), bbox_104436, 'bounds')
    # Obtaining the member '__getitem__' of a type (line 1763)
    getitem___104438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1763, 4), bounds_104437, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1763)
    subscript_call_result_104439 = invoke(stypy.reporting.localization.Localization(__file__, 1763, 4), getitem___104438, int_104435)
    
    # Assigning a type to the variable 'tuple_var_assignment_100428' (line 1763)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1763, 4), 'tuple_var_assignment_100428', subscript_call_result_104439)
    
    # Assigning a Name to a Name (line 1763):
    
    # Assigning a Name to a Name (line 1763):
    # Getting the type of 'tuple_var_assignment_100425' (line 1763)
    tuple_var_assignment_100425_104440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 4), 'tuple_var_assignment_100425')
    # Assigning a type to the variable 'l' (line 1763)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1763, 4), 'l', tuple_var_assignment_100425_104440)
    
    # Assigning a Name to a Name (line 1763):
    
    # Assigning a Name to a Name (line 1763):
    # Getting the type of 'tuple_var_assignment_100426' (line 1763)
    tuple_var_assignment_100426_104441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 4), 'tuple_var_assignment_100426')
    # Assigning a type to the variable 'b' (line 1763)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1763, 7), 'b', tuple_var_assignment_100426_104441)
    
    # Assigning a Name to a Name (line 1763):
    
    # Assigning a Name to a Name (line 1763):
    # Getting the type of 'tuple_var_assignment_100427' (line 1763)
    tuple_var_assignment_100427_104442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 4), 'tuple_var_assignment_100427')
    # Assigning a type to the variable 'w' (line 1763)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1763, 10), 'w', tuple_var_assignment_100427_104442)
    
    # Assigning a Name to a Name (line 1763):
    
    # Assigning a Name to a Name (line 1763):
    # Getting the type of 'tuple_var_assignment_100428' (line 1763)
    tuple_var_assignment_100428_104443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 4), 'tuple_var_assignment_100428')
    # Assigning a type to the variable 'h' (line 1763)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1763, 13), 'h', tuple_var_assignment_100428_104443)
    
    # Getting the type of 'l' (line 1764)
    l_104444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 4), 'l')
    # Getting the type of 'pad' (line 1764)
    pad_104445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 9), 'pad')
    float_104446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1764, 15), 'float')
    # Applying the binary operator 'div' (line 1764)
    result_div_104447 = python_operator(stypy.reporting.localization.Localization(__file__, 1764, 9), 'div', pad_104445, float_104446)
    
    # Applying the binary operator '-=' (line 1764)
    result_isub_104448 = python_operator(stypy.reporting.localization.Localization(__file__, 1764, 4), '-=', l_104444, result_div_104447)
    # Assigning a type to the variable 'l' (line 1764)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1764, 4), 'l', result_isub_104448)
    
    
    # Getting the type of 'b' (line 1765)
    b_104449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1765, 4), 'b')
    # Getting the type of 'pad' (line 1765)
    pad_104450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1765, 9), 'pad')
    float_104451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1765, 15), 'float')
    # Applying the binary operator 'div' (line 1765)
    result_div_104452 = python_operator(stypy.reporting.localization.Localization(__file__, 1765, 9), 'div', pad_104450, float_104451)
    
    # Applying the binary operator '-=' (line 1765)
    result_isub_104453 = python_operator(stypy.reporting.localization.Localization(__file__, 1765, 4), '-=', b_104449, result_div_104452)
    # Assigning a type to the variable 'b' (line 1765)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1765, 4), 'b', result_isub_104453)
    
    
    # Getting the type of 'w' (line 1766)
    w_104454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1766, 4), 'w')
    # Getting the type of 'pad' (line 1766)
    pad_104455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1766, 9), 'pad')
    # Applying the binary operator '+=' (line 1766)
    result_iadd_104456 = python_operator(stypy.reporting.localization.Localization(__file__, 1766, 4), '+=', w_104454, pad_104455)
    # Assigning a type to the variable 'w' (line 1766)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1766, 4), 'w', result_iadd_104456)
    
    
    # Getting the type of 'h' (line 1767)
    h_104457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 4), 'h')
    # Getting the type of 'pad' (line 1767)
    pad_104458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 9), 'pad')
    # Applying the binary operator '+=' (line 1767)
    result_iadd_104459 = python_operator(stypy.reporting.localization.Localization(__file__, 1767, 4), '+=', h_104457, pad_104458)
    # Assigning a type to the variable 'h' (line 1767)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1767, 4), 'h', result_iadd_104459)
    
    
    # Assigning a Call to a Name (line 1768):
    
    # Assigning a Call to a Name (line 1768):
    
    # Assigning a Call to a Name (line 1768):
    
    # Call to Rectangle(...): (line 1768)
    # Processing the call keyword arguments (line 1768)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1768)
    tuple_104461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1768, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1768)
    # Adding element type (line 1768)
    # Getting the type of 'l' (line 1768)
    l_104462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1768, 22), 'l', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1768, 22), tuple_104461, l_104462)
    # Adding element type (line 1768)
    # Getting the type of 'b' (line 1768)
    b_104463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1768, 25), 'b', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1768, 22), tuple_104461, b_104463)
    
    keyword_104464 = tuple_104461
    # Getting the type of 'w' (line 1769)
    w_104465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1769, 24), 'w', False)
    keyword_104466 = w_104465
    # Getting the type of 'h' (line 1770)
    h_104467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1770, 25), 'h', False)
    keyword_104468 = h_104467
    # Getting the type of 'fill' (line 1771)
    fill_104469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 23), 'fill', False)
    keyword_104470 = fill_104469
    kwargs_104471 = {'width': keyword_104466, 'xy': keyword_104464, 'fill': keyword_104470, 'height': keyword_104468}
    # Getting the type of 'Rectangle' (line 1768)
    Rectangle_104460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1768, 8), 'Rectangle', False)
    # Calling Rectangle(args, kwargs) (line 1768)
    Rectangle_call_result_104472 = invoke(stypy.reporting.localization.Localization(__file__, 1768, 8), Rectangle_104460, *[], **kwargs_104471)
    
    # Assigning a type to the variable 'r' (line 1768)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1768, 4), 'r', Rectangle_call_result_104472)
    
    # Call to set_transform(...): (line 1773)
    # Processing the call arguments (line 1773)
    
    # Call to IdentityTransform(...): (line 1773)
    # Processing the call keyword arguments (line 1773)
    kwargs_104477 = {}
    # Getting the type of 'transforms' (line 1773)
    transforms_104475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 20), 'transforms', False)
    # Obtaining the member 'IdentityTransform' of a type (line 1773)
    IdentityTransform_104476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1773, 20), transforms_104475, 'IdentityTransform')
    # Calling IdentityTransform(args, kwargs) (line 1773)
    IdentityTransform_call_result_104478 = invoke(stypy.reporting.localization.Localization(__file__, 1773, 20), IdentityTransform_104476, *[], **kwargs_104477)
    
    # Processing the call keyword arguments (line 1773)
    kwargs_104479 = {}
    # Getting the type of 'r' (line 1773)
    r_104473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 4), 'r', False)
    # Obtaining the member 'set_transform' of a type (line 1773)
    set_transform_104474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1773, 4), r_104473, 'set_transform')
    # Calling set_transform(args, kwargs) (line 1773)
    set_transform_call_result_104480 = invoke(stypy.reporting.localization.Localization(__file__, 1773, 4), set_transform_104474, *[IdentityTransform_call_result_104478], **kwargs_104479)
    
    
    # Call to set_clip_on(...): (line 1774)
    # Processing the call arguments (line 1774)
    # Getting the type of 'False' (line 1774)
    False_104483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 18), 'False', False)
    # Processing the call keyword arguments (line 1774)
    kwargs_104484 = {}
    # Getting the type of 'r' (line 1774)
    r_104481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 4), 'r', False)
    # Obtaining the member 'set_clip_on' of a type (line 1774)
    set_clip_on_104482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1774, 4), r_104481, 'set_clip_on')
    # Calling set_clip_on(args, kwargs) (line 1774)
    set_clip_on_call_result_104485 = invoke(stypy.reporting.localization.Localization(__file__, 1774, 4), set_clip_on_104482, *[False_104483], **kwargs_104484)
    
    
    # Call to update(...): (line 1775)
    # Processing the call arguments (line 1775)
    # Getting the type of 'props' (line 1775)
    props_104488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1775, 13), 'props', False)
    # Processing the call keyword arguments (line 1775)
    kwargs_104489 = {}
    # Getting the type of 'r' (line 1775)
    r_104486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1775, 4), 'r', False)
    # Obtaining the member 'update' of a type (line 1775)
    update_104487 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1775, 4), r_104486, 'update')
    # Calling update(args, kwargs) (line 1775)
    update_call_result_104490 = invoke(stypy.reporting.localization.Localization(__file__, 1775, 4), update_104487, *[props_104488], **kwargs_104489)
    
    
    # Call to draw(...): (line 1776)
    # Processing the call arguments (line 1776)
    # Getting the type of 'renderer' (line 1776)
    renderer_104493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 11), 'renderer', False)
    # Processing the call keyword arguments (line 1776)
    kwargs_104494 = {}
    # Getting the type of 'r' (line 1776)
    r_104491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 4), 'r', False)
    # Obtaining the member 'draw' of a type (line 1776)
    draw_104492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1776, 4), r_104491, 'draw')
    # Calling draw(args, kwargs) (line 1776)
    draw_call_result_104495 = invoke(stypy.reporting.localization.Localization(__file__, 1776, 4), draw_104492, *[renderer_104493], **kwargs_104494)
    
    
    # ################# End of 'bbox_artist(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'bbox_artist' in the type store
    # Getting the type of 'stypy_return_type' (line 1747)
    stypy_return_type_104496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_104496)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'bbox_artist'
    return stypy_return_type_104496

# Assigning a type to the variable 'bbox_artist' (line 1747)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1747, 0), 'bbox_artist', bbox_artist)

@norecursion
def draw_bbox(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    unicode_104497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1779, 36), 'unicode', u'k')
    # Getting the type of 'None' (line 1779)
    None_104498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1779, 47), 'None')
    defaults = [unicode_104497, None_104498]
    # Create a new context for function 'draw_bbox'
    module_type_store = module_type_store.open_function_context('draw_bbox', 1779, 0, False)
    
    # Passed parameters checking function
    draw_bbox.stypy_localization = localization
    draw_bbox.stypy_type_of_self = None
    draw_bbox.stypy_type_store = module_type_store
    draw_bbox.stypy_function_name = 'draw_bbox'
    draw_bbox.stypy_param_names_list = ['bbox', 'renderer', 'color', 'trans']
    draw_bbox.stypy_varargs_param_name = None
    draw_bbox.stypy_kwargs_param_name = None
    draw_bbox.stypy_call_defaults = defaults
    draw_bbox.stypy_call_varargs = varargs
    draw_bbox.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'draw_bbox', ['bbox', 'renderer', 'color', 'trans'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'draw_bbox', localization, ['bbox', 'renderer', 'color', 'trans'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'draw_bbox(...)' code ##################

    unicode_104499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1785, (-1)), 'unicode', u'\n    This is a debug function to draw a rectangle around the bounding\n    box returned by\n    :meth:`~matplotlib.artist.Artist.get_window_extent` of an artist,\n    to test whether the artist is returning the correct bbox.\n    ')
    
    # Assigning a Attribute to a Tuple (line 1787):
    
    # Assigning a Subscript to a Name (line 1787):
    
    # Assigning a Subscript to a Name (line 1787):
    
    # Obtaining the type of the subscript
    int_104500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1787, 4), 'int')
    # Getting the type of 'bbox' (line 1787)
    bbox_104501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 17), 'bbox')
    # Obtaining the member 'bounds' of a type (line 1787)
    bounds_104502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1787, 17), bbox_104501, 'bounds')
    # Obtaining the member '__getitem__' of a type (line 1787)
    getitem___104503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1787, 4), bounds_104502, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1787)
    subscript_call_result_104504 = invoke(stypy.reporting.localization.Localization(__file__, 1787, 4), getitem___104503, int_104500)
    
    # Assigning a type to the variable 'tuple_var_assignment_100429' (line 1787)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1787, 4), 'tuple_var_assignment_100429', subscript_call_result_104504)
    
    # Assigning a Subscript to a Name (line 1787):
    
    # Assigning a Subscript to a Name (line 1787):
    
    # Obtaining the type of the subscript
    int_104505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1787, 4), 'int')
    # Getting the type of 'bbox' (line 1787)
    bbox_104506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 17), 'bbox')
    # Obtaining the member 'bounds' of a type (line 1787)
    bounds_104507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1787, 17), bbox_104506, 'bounds')
    # Obtaining the member '__getitem__' of a type (line 1787)
    getitem___104508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1787, 4), bounds_104507, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1787)
    subscript_call_result_104509 = invoke(stypy.reporting.localization.Localization(__file__, 1787, 4), getitem___104508, int_104505)
    
    # Assigning a type to the variable 'tuple_var_assignment_100430' (line 1787)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1787, 4), 'tuple_var_assignment_100430', subscript_call_result_104509)
    
    # Assigning a Subscript to a Name (line 1787):
    
    # Assigning a Subscript to a Name (line 1787):
    
    # Obtaining the type of the subscript
    int_104510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1787, 4), 'int')
    # Getting the type of 'bbox' (line 1787)
    bbox_104511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 17), 'bbox')
    # Obtaining the member 'bounds' of a type (line 1787)
    bounds_104512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1787, 17), bbox_104511, 'bounds')
    # Obtaining the member '__getitem__' of a type (line 1787)
    getitem___104513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1787, 4), bounds_104512, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1787)
    subscript_call_result_104514 = invoke(stypy.reporting.localization.Localization(__file__, 1787, 4), getitem___104513, int_104510)
    
    # Assigning a type to the variable 'tuple_var_assignment_100431' (line 1787)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1787, 4), 'tuple_var_assignment_100431', subscript_call_result_104514)
    
    # Assigning a Subscript to a Name (line 1787):
    
    # Assigning a Subscript to a Name (line 1787):
    
    # Obtaining the type of the subscript
    int_104515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1787, 4), 'int')
    # Getting the type of 'bbox' (line 1787)
    bbox_104516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 17), 'bbox')
    # Obtaining the member 'bounds' of a type (line 1787)
    bounds_104517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1787, 17), bbox_104516, 'bounds')
    # Obtaining the member '__getitem__' of a type (line 1787)
    getitem___104518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1787, 4), bounds_104517, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1787)
    subscript_call_result_104519 = invoke(stypy.reporting.localization.Localization(__file__, 1787, 4), getitem___104518, int_104515)
    
    # Assigning a type to the variable 'tuple_var_assignment_100432' (line 1787)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1787, 4), 'tuple_var_assignment_100432', subscript_call_result_104519)
    
    # Assigning a Name to a Name (line 1787):
    
    # Assigning a Name to a Name (line 1787):
    # Getting the type of 'tuple_var_assignment_100429' (line 1787)
    tuple_var_assignment_100429_104520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 4), 'tuple_var_assignment_100429')
    # Assigning a type to the variable 'l' (line 1787)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1787, 4), 'l', tuple_var_assignment_100429_104520)
    
    # Assigning a Name to a Name (line 1787):
    
    # Assigning a Name to a Name (line 1787):
    # Getting the type of 'tuple_var_assignment_100430' (line 1787)
    tuple_var_assignment_100430_104521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 4), 'tuple_var_assignment_100430')
    # Assigning a type to the variable 'b' (line 1787)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1787, 7), 'b', tuple_var_assignment_100430_104521)
    
    # Assigning a Name to a Name (line 1787):
    
    # Assigning a Name to a Name (line 1787):
    # Getting the type of 'tuple_var_assignment_100431' (line 1787)
    tuple_var_assignment_100431_104522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 4), 'tuple_var_assignment_100431')
    # Assigning a type to the variable 'w' (line 1787)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1787, 10), 'w', tuple_var_assignment_100431_104522)
    
    # Assigning a Name to a Name (line 1787):
    
    # Assigning a Name to a Name (line 1787):
    # Getting the type of 'tuple_var_assignment_100432' (line 1787)
    tuple_var_assignment_100432_104523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 4), 'tuple_var_assignment_100432')
    # Assigning a type to the variable 'h' (line 1787)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1787, 13), 'h', tuple_var_assignment_100432_104523)
    
    # Assigning a Call to a Name (line 1788):
    
    # Assigning a Call to a Name (line 1788):
    
    # Assigning a Call to a Name (line 1788):
    
    # Call to Rectangle(...): (line 1788)
    # Processing the call keyword arguments (line 1788)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1788)
    tuple_104525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1788, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1788)
    # Adding element type (line 1788)
    # Getting the type of 'l' (line 1788)
    l_104526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 22), 'l', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1788, 22), tuple_104525, l_104526)
    # Adding element type (line 1788)
    # Getting the type of 'b' (line 1788)
    b_104527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 25), 'b', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1788, 22), tuple_104525, b_104527)
    
    keyword_104528 = tuple_104525
    # Getting the type of 'w' (line 1789)
    w_104529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 24), 'w', False)
    keyword_104530 = w_104529
    # Getting the type of 'h' (line 1790)
    h_104531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 25), 'h', False)
    keyword_104532 = h_104531
    # Getting the type of 'color' (line 1791)
    color_104533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 28), 'color', False)
    keyword_104534 = color_104533
    # Getting the type of 'False' (line 1792)
    False_104535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 23), 'False', False)
    keyword_104536 = False_104535
    kwargs_104537 = {'edgecolor': keyword_104534, 'width': keyword_104530, 'xy': keyword_104528, 'fill': keyword_104536, 'height': keyword_104532}
    # Getting the type of 'Rectangle' (line 1788)
    Rectangle_104524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 8), 'Rectangle', False)
    # Calling Rectangle(args, kwargs) (line 1788)
    Rectangle_call_result_104538 = invoke(stypy.reporting.localization.Localization(__file__, 1788, 8), Rectangle_104524, *[], **kwargs_104537)
    
    # Assigning a type to the variable 'r' (line 1788)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1788, 4), 'r', Rectangle_call_result_104538)
    
    # Type idiom detected: calculating its left and rigth part (line 1794)
    # Getting the type of 'trans' (line 1794)
    trans_104539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 4), 'trans')
    # Getting the type of 'None' (line 1794)
    None_104540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 20), 'None')
    
    (may_be_104541, more_types_in_union_104542) = may_not_be_none(trans_104539, None_104540)

    if may_be_104541:

        if more_types_in_union_104542:
            # Runtime conditional SSA (line 1794)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to set_transform(...): (line 1795)
        # Processing the call arguments (line 1795)
        # Getting the type of 'trans' (line 1795)
        trans_104545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 24), 'trans', False)
        # Processing the call keyword arguments (line 1795)
        kwargs_104546 = {}
        # Getting the type of 'r' (line 1795)
        r_104543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 8), 'r', False)
        # Obtaining the member 'set_transform' of a type (line 1795)
        set_transform_104544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1795, 8), r_104543, 'set_transform')
        # Calling set_transform(args, kwargs) (line 1795)
        set_transform_call_result_104547 = invoke(stypy.reporting.localization.Localization(__file__, 1795, 8), set_transform_104544, *[trans_104545], **kwargs_104546)
        

        if more_types_in_union_104542:
            # SSA join for if statement (line 1794)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Call to set_clip_on(...): (line 1796)
    # Processing the call arguments (line 1796)
    # Getting the type of 'False' (line 1796)
    False_104550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 18), 'False', False)
    # Processing the call keyword arguments (line 1796)
    kwargs_104551 = {}
    # Getting the type of 'r' (line 1796)
    r_104548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 4), 'r', False)
    # Obtaining the member 'set_clip_on' of a type (line 1796)
    set_clip_on_104549 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1796, 4), r_104548, 'set_clip_on')
    # Calling set_clip_on(args, kwargs) (line 1796)
    set_clip_on_call_result_104552 = invoke(stypy.reporting.localization.Localization(__file__, 1796, 4), set_clip_on_104549, *[False_104550], **kwargs_104551)
    
    
    # Call to draw(...): (line 1797)
    # Processing the call arguments (line 1797)
    # Getting the type of 'renderer' (line 1797)
    renderer_104555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1797, 11), 'renderer', False)
    # Processing the call keyword arguments (line 1797)
    kwargs_104556 = {}
    # Getting the type of 'r' (line 1797)
    r_104553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1797, 4), 'r', False)
    # Obtaining the member 'draw' of a type (line 1797)
    draw_104554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1797, 4), r_104553, 'draw')
    # Calling draw(args, kwargs) (line 1797)
    draw_call_result_104557 = invoke(stypy.reporting.localization.Localization(__file__, 1797, 4), draw_104554, *[renderer_104555], **kwargs_104556)
    
    
    # ################# End of 'draw_bbox(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'draw_bbox' in the type store
    # Getting the type of 'stypy_return_type' (line 1779)
    stypy_return_type_104558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1779, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_104558)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'draw_bbox'
    return stypy_return_type_104558

# Assigning a type to the variable 'draw_bbox' (line 1779)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1779, 0), 'draw_bbox', draw_bbox)

@norecursion
def _pprint_table(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_104559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1800, 39), 'int')
    defaults = [int_104559]
    # Create a new context for function '_pprint_table'
    module_type_store = module_type_store.open_function_context('_pprint_table', 1800, 0, False)
    
    # Passed parameters checking function
    _pprint_table.stypy_localization = localization
    _pprint_table.stypy_type_of_self = None
    _pprint_table.stypy_type_store = module_type_store
    _pprint_table.stypy_function_name = '_pprint_table'
    _pprint_table.stypy_param_names_list = ['_table', 'leadingspace']
    _pprint_table.stypy_varargs_param_name = None
    _pprint_table.stypy_kwargs_param_name = None
    _pprint_table.stypy_call_defaults = defaults
    _pprint_table.stypy_call_varargs = varargs
    _pprint_table.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_pprint_table', ['_table', 'leadingspace'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_pprint_table', localization, ['_table', 'leadingspace'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_pprint_table(...)' code ##################

    unicode_104560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1803, (-1)), 'unicode', u'\n    Given the list of list of strings, return a string of REST table format.\n    ')
    
    # Getting the type of 'leadingspace' (line 1804)
    leadingspace_104561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 7), 'leadingspace')
    # Testing the type of an if condition (line 1804)
    if_condition_104562 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1804, 4), leadingspace_104561)
    # Assigning a type to the variable 'if_condition_104562' (line 1804)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1804, 4), 'if_condition_104562', if_condition_104562)
    # SSA begins for if statement (line 1804)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1805):
    
    # Assigning a BinOp to a Name (line 1805):
    
    # Assigning a BinOp to a Name (line 1805):
    unicode_104563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1805, 14), 'unicode', u' ')
    # Getting the type of 'leadingspace' (line 1805)
    leadingspace_104564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 20), 'leadingspace')
    # Applying the binary operator '*' (line 1805)
    result_mul_104565 = python_operator(stypy.reporting.localization.Localization(__file__, 1805, 14), '*', unicode_104563, leadingspace_104564)
    
    # Assigning a type to the variable 'pad' (line 1805)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1805, 8), 'pad', result_mul_104565)
    # SSA branch for the else part of an if statement (line 1804)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Str to a Name (line 1807):
    
    # Assigning a Str to a Name (line 1807):
    
    # Assigning a Str to a Name (line 1807):
    unicode_104566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1807, 14), 'unicode', u'')
    # Assigning a type to the variable 'pad' (line 1807)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1807, 8), 'pad', unicode_104566)
    # SSA join for if statement (line 1804)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a ListComp to a Name (line 1809):
    
    # Assigning a ListComp to a Name (line 1809):
    
    # Assigning a ListComp to a Name (line 1809):
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Obtaining the type of the subscript
    int_104568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1809, 37), 'int')
    # Getting the type of '_table' (line 1809)
    _table_104569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 30), '_table')
    # Obtaining the member '__getitem__' of a type (line 1809)
    getitem___104570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1809, 30), _table_104569, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1809)
    subscript_call_result_104571 = invoke(stypy.reporting.localization.Localization(__file__, 1809, 30), getitem___104570, int_104568)
    
    comprehension_104572 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1809, 15), subscript_call_result_104571)
    # Assigning a type to the variable 'cell' (line 1809)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1809, 15), 'cell', comprehension_104572)
    
    # Obtaining an instance of the builtin type 'list' (line 1809)
    list_104567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1809, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1809)
    
    list_104573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1809, 15), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1809, 15), list_104573, list_104567)
    # Assigning a type to the variable 'columns' (line 1809)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1809, 4), 'columns', list_104573)
    
    # Getting the type of '_table' (line 1811)
    _table_104574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 15), '_table')
    # Testing the type of a for loop iterable (line 1811)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1811, 4), _table_104574)
    # Getting the type of the for loop variable (line 1811)
    for_loop_var_104575 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1811, 4), _table_104574)
    # Assigning a type to the variable 'row' (line 1811)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1811, 4), 'row', for_loop_var_104575)
    # SSA begins for a for statement (line 1811)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to zip(...): (line 1812)
    # Processing the call arguments (line 1812)
    # Getting the type of 'columns' (line 1812)
    columns_104577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1812, 32), 'columns', False)
    # Getting the type of 'row' (line 1812)
    row_104578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1812, 41), 'row', False)
    # Processing the call keyword arguments (line 1812)
    kwargs_104579 = {}
    # Getting the type of 'zip' (line 1812)
    zip_104576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1812, 28), 'zip', False)
    # Calling zip(args, kwargs) (line 1812)
    zip_call_result_104580 = invoke(stypy.reporting.localization.Localization(__file__, 1812, 28), zip_104576, *[columns_104577, row_104578], **kwargs_104579)
    
    # Testing the type of a for loop iterable (line 1812)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1812, 8), zip_call_result_104580)
    # Getting the type of the for loop variable (line 1812)
    for_loop_var_104581 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1812, 8), zip_call_result_104580)
    # Assigning a type to the variable 'column' (line 1812)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1812, 8), 'column', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1812, 8), for_loop_var_104581))
    # Assigning a type to the variable 'cell' (line 1812)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1812, 8), 'cell', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1812, 8), for_loop_var_104581))
    # SSA begins for a for statement (line 1812)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to append(...): (line 1813)
    # Processing the call arguments (line 1813)
    # Getting the type of 'cell' (line 1813)
    cell_104584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 26), 'cell', False)
    # Processing the call keyword arguments (line 1813)
    kwargs_104585 = {}
    # Getting the type of 'column' (line 1813)
    column_104582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 12), 'column', False)
    # Obtaining the member 'append' of a type (line 1813)
    append_104583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1813, 12), column_104582, 'append')
    # Calling append(args, kwargs) (line 1813)
    append_call_result_104586 = invoke(stypy.reporting.localization.Localization(__file__, 1813, 12), append_104583, *[cell_104584], **kwargs_104585)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a ListComp to a Name (line 1815):
    
    # Assigning a ListComp to a Name (line 1815):
    
    # Assigning a ListComp to a Name (line 1815):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'columns' (line 1815)
    columns_104597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 63), 'columns')
    comprehension_104598 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1815, 15), columns_104597)
    # Assigning a type to the variable 'column' (line 1815)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1815, 15), 'column', comprehension_104598)
    
    # Call to max(...): (line 1815)
    # Processing the call arguments (line 1815)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 1815, 19, True)
    # Calculating comprehension expression
    # Getting the type of 'column' (line 1815)
    column_104592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 41), 'column', False)
    comprehension_104593 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1815, 19), column_104592)
    # Assigning a type to the variable 'cell' (line 1815)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1815, 19), 'cell', comprehension_104593)
    
    # Call to len(...): (line 1815)
    # Processing the call arguments (line 1815)
    # Getting the type of 'cell' (line 1815)
    cell_104589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 23), 'cell', False)
    # Processing the call keyword arguments (line 1815)
    kwargs_104590 = {}
    # Getting the type of 'len' (line 1815)
    len_104588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 19), 'len', False)
    # Calling len(args, kwargs) (line 1815)
    len_call_result_104591 = invoke(stypy.reporting.localization.Localization(__file__, 1815, 19), len_104588, *[cell_104589], **kwargs_104590)
    
    list_104594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1815, 19), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1815, 19), list_104594, len_call_result_104591)
    # Processing the call keyword arguments (line 1815)
    kwargs_104595 = {}
    # Getting the type of 'max' (line 1815)
    max_104587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 15), 'max', False)
    # Calling max(args, kwargs) (line 1815)
    max_call_result_104596 = invoke(stypy.reporting.localization.Localization(__file__, 1815, 15), max_104587, *[list_104594], **kwargs_104595)
    
    list_104599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1815, 15), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1815, 15), list_104599, max_call_result_104596)
    # Assigning a type to the variable 'col_len' (line 1815)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1815, 4), 'col_len', list_104599)
    
    # Assigning a List to a Name (line 1817):
    
    # Assigning a List to a Name (line 1817):
    
    # Assigning a List to a Name (line 1817):
    
    # Obtaining an instance of the builtin type 'list' (line 1817)
    list_104600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1817, 12), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1817)
    
    # Assigning a type to the variable 'lines' (line 1817)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1817, 4), 'lines', list_104600)
    
    # Assigning a BinOp to a Name (line 1818):
    
    # Assigning a BinOp to a Name (line 1818):
    
    # Assigning a BinOp to a Name (line 1818):
    # Getting the type of 'pad' (line 1818)
    pad_104601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1818, 22), 'pad')
    
    # Call to join(...): (line 1818)
    # Processing the call arguments (line 1818)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'col_len' (line 1818)
    col_len_104607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1818, 61), 'col_len', False)
    comprehension_104608 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1818, 40), col_len_104607)
    # Assigning a type to the variable 'cl' (line 1818)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1818, 40), 'cl', comprehension_104608)
    unicode_104604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1818, 41), 'unicode', u'=')
    # Getting the type of 'cl' (line 1818)
    cl_104605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1818, 47), 'cl', False)
    # Applying the binary operator '*' (line 1818)
    result_mul_104606 = python_operator(stypy.reporting.localization.Localization(__file__, 1818, 41), '*', unicode_104604, cl_104605)
    
    list_104609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1818, 40), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1818, 40), list_104609, result_mul_104606)
    # Processing the call keyword arguments (line 1818)
    kwargs_104610 = {}
    unicode_104602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1818, 28), 'unicode', u'   ')
    # Obtaining the member 'join' of a type (line 1818)
    join_104603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1818, 28), unicode_104602, 'join')
    # Calling join(args, kwargs) (line 1818)
    join_call_result_104611 = invoke(stypy.reporting.localization.Localization(__file__, 1818, 28), join_104603, *[list_104609], **kwargs_104610)
    
    # Applying the binary operator '+' (line 1818)
    result_add_104612 = python_operator(stypy.reporting.localization.Localization(__file__, 1818, 22), '+', pad_104601, join_call_result_104611)
    
    # Assigning a type to the variable 'table_formatstr' (line 1818)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1818, 4), 'table_formatstr', result_add_104612)
    
    # Call to append(...): (line 1820)
    # Processing the call arguments (line 1820)
    unicode_104615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1820, 17), 'unicode', u'')
    # Processing the call keyword arguments (line 1820)
    kwargs_104616 = {}
    # Getting the type of 'lines' (line 1820)
    lines_104613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 4), 'lines', False)
    # Obtaining the member 'append' of a type (line 1820)
    append_104614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1820, 4), lines_104613, 'append')
    # Calling append(args, kwargs) (line 1820)
    append_call_result_104617 = invoke(stypy.reporting.localization.Localization(__file__, 1820, 4), append_104614, *[unicode_104615], **kwargs_104616)
    
    
    # Call to append(...): (line 1821)
    # Processing the call arguments (line 1821)
    # Getting the type of 'table_formatstr' (line 1821)
    table_formatstr_104620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1821, 17), 'table_formatstr', False)
    # Processing the call keyword arguments (line 1821)
    kwargs_104621 = {}
    # Getting the type of 'lines' (line 1821)
    lines_104618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1821, 4), 'lines', False)
    # Obtaining the member 'append' of a type (line 1821)
    append_104619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1821, 4), lines_104618, 'append')
    # Calling append(args, kwargs) (line 1821)
    append_call_result_104622 = invoke(stypy.reporting.localization.Localization(__file__, 1821, 4), append_104619, *[table_formatstr_104620], **kwargs_104621)
    
    
    # Call to append(...): (line 1822)
    # Processing the call arguments (line 1822)
    # Getting the type of 'pad' (line 1822)
    pad_104625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 17), 'pad', False)
    
    # Call to join(...): (line 1822)
    # Processing the call arguments (line 1822)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to zip(...): (line 1824)
    # Processing the call arguments (line 1824)
    
    # Obtaining the type of the subscript
    int_104634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1824, 49), 'int')
    # Getting the type of '_table' (line 1824)
    _table_104635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1824, 42), '_table', False)
    # Obtaining the member '__getitem__' of a type (line 1824)
    getitem___104636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1824, 42), _table_104635, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1824)
    subscript_call_result_104637 = invoke(stypy.reporting.localization.Localization(__file__, 1824, 42), getitem___104636, int_104634)
    
    # Getting the type of 'col_len' (line 1824)
    col_len_104638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1824, 53), 'col_len', False)
    # Processing the call keyword arguments (line 1824)
    kwargs_104639 = {}
    # Getting the type of 'zip' (line 1824)
    zip_104633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1824, 38), 'zip', False)
    # Calling zip(args, kwargs) (line 1824)
    zip_call_result_104640 = invoke(stypy.reporting.localization.Localization(__file__, 1824, 38), zip_104633, *[subscript_call_result_104637, col_len_104638], **kwargs_104639)
    
    comprehension_104641 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1822, 35), zip_call_result_104640)
    # Assigning a type to the variable 'cell' (line 1822)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1822, 35), 'cell', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1822, 35), comprehension_104641))
    # Assigning a type to the variable 'cl' (line 1822)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1822, 35), 'cl', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1822, 35), comprehension_104641))
    
    # Call to ljust(...): (line 1822)
    # Processing the call arguments (line 1822)
    # Getting the type of 'cl' (line 1822)
    cl_104630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 46), 'cl', False)
    # Processing the call keyword arguments (line 1822)
    kwargs_104631 = {}
    # Getting the type of 'cell' (line 1822)
    cell_104628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 35), 'cell', False)
    # Obtaining the member 'ljust' of a type (line 1822)
    ljust_104629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1822, 35), cell_104628, 'ljust')
    # Calling ljust(args, kwargs) (line 1822)
    ljust_call_result_104632 = invoke(stypy.reporting.localization.Localization(__file__, 1822, 35), ljust_104629, *[cl_104630], **kwargs_104631)
    
    list_104642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1822, 35), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1822, 35), list_104642, ljust_call_result_104632)
    # Processing the call keyword arguments (line 1822)
    kwargs_104643 = {}
    unicode_104626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1822, 23), 'unicode', u'   ')
    # Obtaining the member 'join' of a type (line 1822)
    join_104627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1822, 23), unicode_104626, 'join')
    # Calling join(args, kwargs) (line 1822)
    join_call_result_104644 = invoke(stypy.reporting.localization.Localization(__file__, 1822, 23), join_104627, *[list_104642], **kwargs_104643)
    
    # Applying the binary operator '+' (line 1822)
    result_add_104645 = python_operator(stypy.reporting.localization.Localization(__file__, 1822, 17), '+', pad_104625, join_call_result_104644)
    
    # Processing the call keyword arguments (line 1822)
    kwargs_104646 = {}
    # Getting the type of 'lines' (line 1822)
    lines_104623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 4), 'lines', False)
    # Obtaining the member 'append' of a type (line 1822)
    append_104624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1822, 4), lines_104623, 'append')
    # Calling append(args, kwargs) (line 1822)
    append_call_result_104647 = invoke(stypy.reporting.localization.Localization(__file__, 1822, 4), append_104624, *[result_add_104645], **kwargs_104646)
    
    
    # Call to append(...): (line 1825)
    # Processing the call arguments (line 1825)
    # Getting the type of 'table_formatstr' (line 1825)
    table_formatstr_104650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 17), 'table_formatstr', False)
    # Processing the call keyword arguments (line 1825)
    kwargs_104651 = {}
    # Getting the type of 'lines' (line 1825)
    lines_104648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 4), 'lines', False)
    # Obtaining the member 'append' of a type (line 1825)
    append_104649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1825, 4), lines_104648, 'append')
    # Calling append(args, kwargs) (line 1825)
    append_call_result_104652 = invoke(stypy.reporting.localization.Localization(__file__, 1825, 4), append_104649, *[table_formatstr_104650], **kwargs_104651)
    
    
    # Call to extend(...): (line 1827)
    # Processing the call arguments (line 1827)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Obtaining the type of the subscript
    int_104673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1830, 36), 'int')
    slice_104674 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1830, 29), int_104673, None, None)
    # Getting the type of '_table' (line 1830)
    _table_104675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1830, 29), '_table', False)
    # Obtaining the member '__getitem__' of a type (line 1830)
    getitem___104676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1830, 29), _table_104675, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1830)
    subscript_call_result_104677 = invoke(stypy.reporting.localization.Localization(__file__, 1830, 29), getitem___104676, slice_104674)
    
    comprehension_104678 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1827, 18), subscript_call_result_104677)
    # Assigning a type to the variable 'row' (line 1827)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1827, 18), 'row', comprehension_104678)
    # Getting the type of 'pad' (line 1827)
    pad_104655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1827, 19), 'pad', False)
    
    # Call to join(...): (line 1827)
    # Processing the call arguments (line 1827)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to zip(...): (line 1829)
    # Processing the call arguments (line 1829)
    # Getting the type of 'row' (line 1829)
    row_104664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1829, 44), 'row', False)
    # Getting the type of 'col_len' (line 1829)
    col_len_104665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1829, 49), 'col_len', False)
    # Processing the call keyword arguments (line 1829)
    kwargs_104666 = {}
    # Getting the type of 'zip' (line 1829)
    zip_104663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1829, 40), 'zip', False)
    # Calling zip(args, kwargs) (line 1829)
    zip_call_result_104667 = invoke(stypy.reporting.localization.Localization(__file__, 1829, 40), zip_104663, *[row_104664, col_len_104665], **kwargs_104666)
    
    comprehension_104668 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1827, 37), zip_call_result_104667)
    # Assigning a type to the variable 'cell' (line 1827)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1827, 37), 'cell', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1827, 37), comprehension_104668))
    # Assigning a type to the variable 'cl' (line 1827)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1827, 37), 'cl', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1827, 37), comprehension_104668))
    
    # Call to ljust(...): (line 1827)
    # Processing the call arguments (line 1827)
    # Getting the type of 'cl' (line 1827)
    cl_104660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1827, 48), 'cl', False)
    # Processing the call keyword arguments (line 1827)
    kwargs_104661 = {}
    # Getting the type of 'cell' (line 1827)
    cell_104658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1827, 37), 'cell', False)
    # Obtaining the member 'ljust' of a type (line 1827)
    ljust_104659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1827, 37), cell_104658, 'ljust')
    # Calling ljust(args, kwargs) (line 1827)
    ljust_call_result_104662 = invoke(stypy.reporting.localization.Localization(__file__, 1827, 37), ljust_104659, *[cl_104660], **kwargs_104661)
    
    list_104669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1827, 37), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1827, 37), list_104669, ljust_call_result_104662)
    # Processing the call keyword arguments (line 1827)
    kwargs_104670 = {}
    unicode_104656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1827, 25), 'unicode', u'   ')
    # Obtaining the member 'join' of a type (line 1827)
    join_104657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1827, 25), unicode_104656, 'join')
    # Calling join(args, kwargs) (line 1827)
    join_call_result_104671 = invoke(stypy.reporting.localization.Localization(__file__, 1827, 25), join_104657, *[list_104669], **kwargs_104670)
    
    # Applying the binary operator '+' (line 1827)
    result_add_104672 = python_operator(stypy.reporting.localization.Localization(__file__, 1827, 19), '+', pad_104655, join_call_result_104671)
    
    list_104679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1827, 18), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1827, 18), list_104679, result_add_104672)
    # Processing the call keyword arguments (line 1827)
    kwargs_104680 = {}
    # Getting the type of 'lines' (line 1827)
    lines_104653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1827, 4), 'lines', False)
    # Obtaining the member 'extend' of a type (line 1827)
    extend_104654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1827, 4), lines_104653, 'extend')
    # Calling extend(args, kwargs) (line 1827)
    extend_call_result_104681 = invoke(stypy.reporting.localization.Localization(__file__, 1827, 4), extend_104654, *[list_104679], **kwargs_104680)
    
    
    # Call to append(...): (line 1832)
    # Processing the call arguments (line 1832)
    # Getting the type of 'table_formatstr' (line 1832)
    table_formatstr_104684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 17), 'table_formatstr', False)
    # Processing the call keyword arguments (line 1832)
    kwargs_104685 = {}
    # Getting the type of 'lines' (line 1832)
    lines_104682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 4), 'lines', False)
    # Obtaining the member 'append' of a type (line 1832)
    append_104683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1832, 4), lines_104682, 'append')
    # Calling append(args, kwargs) (line 1832)
    append_call_result_104686 = invoke(stypy.reporting.localization.Localization(__file__, 1832, 4), append_104683, *[table_formatstr_104684], **kwargs_104685)
    
    
    # Call to append(...): (line 1833)
    # Processing the call arguments (line 1833)
    unicode_104689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1833, 17), 'unicode', u'')
    # Processing the call keyword arguments (line 1833)
    kwargs_104690 = {}
    # Getting the type of 'lines' (line 1833)
    lines_104687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1833, 4), 'lines', False)
    # Obtaining the member 'append' of a type (line 1833)
    append_104688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1833, 4), lines_104687, 'append')
    # Calling append(args, kwargs) (line 1833)
    append_call_result_104691 = invoke(stypy.reporting.localization.Localization(__file__, 1833, 4), append_104688, *[unicode_104689], **kwargs_104690)
    
    
    # Call to join(...): (line 1834)
    # Processing the call arguments (line 1834)
    # Getting the type of 'lines' (line 1834)
    lines_104694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 21), 'lines', False)
    # Processing the call keyword arguments (line 1834)
    kwargs_104695 = {}
    unicode_104692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1834, 11), 'unicode', u'\n')
    # Obtaining the member 'join' of a type (line 1834)
    join_104693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1834, 11), unicode_104692, 'join')
    # Calling join(args, kwargs) (line 1834)
    join_call_result_104696 = invoke(stypy.reporting.localization.Localization(__file__, 1834, 11), join_104693, *[lines_104694], **kwargs_104695)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1834)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1834, 4), 'stypy_return_type', join_call_result_104696)
    
    # ################# End of '_pprint_table(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_pprint_table' in the type store
    # Getting the type of 'stypy_return_type' (line 1800)
    stypy_return_type_104697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_104697)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_pprint_table'
    return stypy_return_type_104697

# Assigning a type to the variable '_pprint_table' (line 1800)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1800, 0), '_pprint_table', _pprint_table)

@norecursion
def _pprint_styles(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_pprint_styles'
    module_type_store = module_type_store.open_function_context('_pprint_styles', 1837, 0, False)
    
    # Passed parameters checking function
    _pprint_styles.stypy_localization = localization
    _pprint_styles.stypy_type_of_self = None
    _pprint_styles.stypy_type_store = module_type_store
    _pprint_styles.stypy_function_name = '_pprint_styles'
    _pprint_styles.stypy_param_names_list = ['_styles']
    _pprint_styles.stypy_varargs_param_name = None
    _pprint_styles.stypy_kwargs_param_name = None
    _pprint_styles.stypy_call_defaults = defaults
    _pprint_styles.stypy_call_varargs = varargs
    _pprint_styles.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_pprint_styles', ['_styles'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_pprint_styles', localization, ['_styles'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_pprint_styles(...)' code ##################

    unicode_104698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1842, (-1)), 'unicode', u'\n    A helper function for the _Style class.  Given the dictionary of\n    (stylename : styleclass), return a formatted string listing all the\n    styles. Used to update the documentation.\n    ')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1843, 4))
    
    # 'import inspect' statement (line 1843)
    import inspect

    import_module(stypy.reporting.localization.Localization(__file__, 1843, 4), 'inspect', inspect, module_type_store)
    
    
    # Assigning a List to a Name (line 1845):
    
    # Assigning a List to a Name (line 1845):
    
    # Assigning a List to a Name (line 1845):
    
    # Obtaining an instance of the builtin type 'list' (line 1845)
    list_104699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1845, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1845)
    # Adding element type (line 1845)
    
    # Obtaining an instance of the builtin type 'list' (line 1845)
    list_104700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1845, 14), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1845)
    # Adding element type (line 1845)
    unicode_104701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1845, 15), 'unicode', u'Class')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1845, 14), list_104700, unicode_104701)
    # Adding element type (line 1845)
    unicode_104702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1845, 24), 'unicode', u'Name')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1845, 14), list_104700, unicode_104702)
    # Adding element type (line 1845)
    unicode_104703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1845, 32), 'unicode', u'Attrs')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1845, 14), list_104700, unicode_104703)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1845, 13), list_104699, list_104700)
    
    # Assigning a type to the variable '_table' (line 1845)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1845, 4), '_table', list_104699)
    
    
    # Call to sorted(...): (line 1847)
    # Processing the call arguments (line 1847)
    
    # Call to items(...): (line 1847)
    # Processing the call keyword arguments (line 1847)
    kwargs_104707 = {}
    # Getting the type of '_styles' (line 1847)
    _styles_104705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1847, 28), '_styles', False)
    # Obtaining the member 'items' of a type (line 1847)
    items_104706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1847, 28), _styles_104705, 'items')
    # Calling items(args, kwargs) (line 1847)
    items_call_result_104708 = invoke(stypy.reporting.localization.Localization(__file__, 1847, 28), items_104706, *[], **kwargs_104707)
    
    # Processing the call keyword arguments (line 1847)
    kwargs_104709 = {}
    # Getting the type of 'sorted' (line 1847)
    sorted_104704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1847, 21), 'sorted', False)
    # Calling sorted(args, kwargs) (line 1847)
    sorted_call_result_104710 = invoke(stypy.reporting.localization.Localization(__file__, 1847, 21), sorted_104704, *[items_call_result_104708], **kwargs_104709)
    
    # Testing the type of a for loop iterable (line 1847)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1847, 4), sorted_call_result_104710)
    # Getting the type of the for loop variable (line 1847)
    for_loop_var_104711 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1847, 4), sorted_call_result_104710)
    # Assigning a type to the variable 'name' (line 1847)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1847, 4), 'name', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1847, 4), for_loop_var_104711))
    # Assigning a type to the variable 'cls' (line 1847)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1847, 4), 'cls', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1847, 4), for_loop_var_104711))
    # SSA begins for a for statement (line 1847)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Getting the type of 'six' (line 1848)
    six_104712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1848, 11), 'six')
    # Obtaining the member 'PY2' of a type (line 1848)
    PY2_104713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1848, 11), six_104712, 'PY2')
    # Testing the type of an if condition (line 1848)
    if_condition_104714 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1848, 8), PY2_104713)
    # Assigning a type to the variable 'if_condition_104714' (line 1848)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1848, 8), 'if_condition_104714', if_condition_104714)
    # SSA begins for if statement (line 1848)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 1849):
    
    # Assigning a Call to a Name:
    
    # Assigning a Call to a Name:
    
    # Call to getargspec(...): (line 1849)
    # Processing the call arguments (line 1849)
    # Getting the type of 'cls' (line 1849)
    cls_104717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 64), 'cls', False)
    # Obtaining the member '__init__' of a type (line 1849)
    init___104718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1849, 64), cls_104717, '__init__')
    # Processing the call keyword arguments (line 1849)
    kwargs_104719 = {}
    # Getting the type of 'inspect' (line 1849)
    inspect_104715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 45), 'inspect', False)
    # Obtaining the member 'getargspec' of a type (line 1849)
    getargspec_104716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1849, 45), inspect_104715, 'getargspec')
    # Calling getargspec(args, kwargs) (line 1849)
    getargspec_call_result_104720 = invoke(stypy.reporting.localization.Localization(__file__, 1849, 45), getargspec_104716, *[init___104718], **kwargs_104719)
    
    # Assigning a type to the variable 'call_assignment_100433' (line 1849)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1849, 12), 'call_assignment_100433', getargspec_call_result_104720)
    
    # Assigning a Call to a Name (line 1849):
    
    # Assigning a Call to a Name (line 1849):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_104723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1849, 12), 'int')
    # Processing the call keyword arguments
    kwargs_104724 = {}
    # Getting the type of 'call_assignment_100433' (line 1849)
    call_assignment_100433_104721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 12), 'call_assignment_100433', False)
    # Obtaining the member '__getitem__' of a type (line 1849)
    getitem___104722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1849, 12), call_assignment_100433_104721, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_104725 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___104722, *[int_104723], **kwargs_104724)
    
    # Assigning a type to the variable 'call_assignment_100434' (line 1849)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1849, 12), 'call_assignment_100434', getitem___call_result_104725)
    
    # Assigning a Name to a Name (line 1849):
    
    # Assigning a Name to a Name (line 1849):
    # Getting the type of 'call_assignment_100434' (line 1849)
    call_assignment_100434_104726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 12), 'call_assignment_100434')
    # Assigning a type to the variable 'args' (line 1849)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1849, 12), 'args', call_assignment_100434_104726)
    
    # Assigning a Call to a Name (line 1849):
    
    # Assigning a Call to a Name (line 1849):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_104729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1849, 12), 'int')
    # Processing the call keyword arguments
    kwargs_104730 = {}
    # Getting the type of 'call_assignment_100433' (line 1849)
    call_assignment_100433_104727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 12), 'call_assignment_100433', False)
    # Obtaining the member '__getitem__' of a type (line 1849)
    getitem___104728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1849, 12), call_assignment_100433_104727, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_104731 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___104728, *[int_104729], **kwargs_104730)
    
    # Assigning a type to the variable 'call_assignment_100435' (line 1849)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1849, 12), 'call_assignment_100435', getitem___call_result_104731)
    
    # Assigning a Name to a Name (line 1849):
    
    # Assigning a Name to a Name (line 1849):
    # Getting the type of 'call_assignment_100435' (line 1849)
    call_assignment_100435_104732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 12), 'call_assignment_100435')
    # Assigning a type to the variable 'varargs' (line 1849)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1849, 18), 'varargs', call_assignment_100435_104732)
    
    # Assigning a Call to a Name (line 1849):
    
    # Assigning a Call to a Name (line 1849):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_104735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1849, 12), 'int')
    # Processing the call keyword arguments
    kwargs_104736 = {}
    # Getting the type of 'call_assignment_100433' (line 1849)
    call_assignment_100433_104733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 12), 'call_assignment_100433', False)
    # Obtaining the member '__getitem__' of a type (line 1849)
    getitem___104734 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1849, 12), call_assignment_100433_104733, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_104737 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___104734, *[int_104735], **kwargs_104736)
    
    # Assigning a type to the variable 'call_assignment_100436' (line 1849)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1849, 12), 'call_assignment_100436', getitem___call_result_104737)
    
    # Assigning a Name to a Name (line 1849):
    
    # Assigning a Name to a Name (line 1849):
    # Getting the type of 'call_assignment_100436' (line 1849)
    call_assignment_100436_104738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 12), 'call_assignment_100436')
    # Assigning a type to the variable 'varkw' (line 1849)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1849, 27), 'varkw', call_assignment_100436_104738)
    
    # Assigning a Call to a Name (line 1849):
    
    # Assigning a Call to a Name (line 1849):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_104741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1849, 12), 'int')
    # Processing the call keyword arguments
    kwargs_104742 = {}
    # Getting the type of 'call_assignment_100433' (line 1849)
    call_assignment_100433_104739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 12), 'call_assignment_100433', False)
    # Obtaining the member '__getitem__' of a type (line 1849)
    getitem___104740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1849, 12), call_assignment_100433_104739, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_104743 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___104740, *[int_104741], **kwargs_104742)
    
    # Assigning a type to the variable 'call_assignment_100437' (line 1849)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1849, 12), 'call_assignment_100437', getitem___call_result_104743)
    
    # Assigning a Name to a Name (line 1849):
    
    # Assigning a Name to a Name (line 1849):
    # Getting the type of 'call_assignment_100437' (line 1849)
    call_assignment_100437_104744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 12), 'call_assignment_100437')
    # Assigning a type to the variable 'defaults' (line 1849)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1849, 34), 'defaults', call_assignment_100437_104744)
    # SSA branch for the else part of an if statement (line 1848)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Tuple (line 1851):
    
    # Assigning a Call to a Name:
    
    # Assigning a Call to a Name:
    
    # Call to getfullargspec(...): (line 1852)
    # Processing the call arguments (line 1852)
    # Getting the type of 'cls' (line 1852)
    cls_104747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 54), 'cls', False)
    # Obtaining the member '__init__' of a type (line 1852)
    init___104748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1852, 54), cls_104747, '__init__')
    # Processing the call keyword arguments (line 1852)
    kwargs_104749 = {}
    # Getting the type of 'inspect' (line 1852)
    inspect_104745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 31), 'inspect', False)
    # Obtaining the member 'getfullargspec' of a type (line 1852)
    getfullargspec_104746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1852, 31), inspect_104745, 'getfullargspec')
    # Calling getfullargspec(args, kwargs) (line 1852)
    getfullargspec_call_result_104750 = invoke(stypy.reporting.localization.Localization(__file__, 1852, 31), getfullargspec_104746, *[init___104748], **kwargs_104749)
    
    # Assigning a type to the variable 'call_assignment_100438' (line 1851)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1851, 12), 'call_assignment_100438', getfullargspec_call_result_104750)
    
    # Assigning a Call to a Name (line 1851):
    
    # Assigning a Call to a Name (line 1851):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_104753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1851, 12), 'int')
    # Processing the call keyword arguments
    kwargs_104754 = {}
    # Getting the type of 'call_assignment_100438' (line 1851)
    call_assignment_100438_104751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 12), 'call_assignment_100438', False)
    # Obtaining the member '__getitem__' of a type (line 1851)
    getitem___104752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1851, 12), call_assignment_100438_104751, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_104755 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___104752, *[int_104753], **kwargs_104754)
    
    # Assigning a type to the variable 'call_assignment_100439' (line 1851)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1851, 12), 'call_assignment_100439', getitem___call_result_104755)
    
    # Assigning a Name to a Name (line 1851):
    
    # Assigning a Name to a Name (line 1851):
    # Getting the type of 'call_assignment_100439' (line 1851)
    call_assignment_100439_104756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 12), 'call_assignment_100439')
    # Assigning a type to the variable 'args' (line 1851)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1851, 13), 'args', call_assignment_100439_104756)
    
    # Assigning a Call to a Name (line 1851):
    
    # Assigning a Call to a Name (line 1851):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_104759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1851, 12), 'int')
    # Processing the call keyword arguments
    kwargs_104760 = {}
    # Getting the type of 'call_assignment_100438' (line 1851)
    call_assignment_100438_104757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 12), 'call_assignment_100438', False)
    # Obtaining the member '__getitem__' of a type (line 1851)
    getitem___104758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1851, 12), call_assignment_100438_104757, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_104761 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___104758, *[int_104759], **kwargs_104760)
    
    # Assigning a type to the variable 'call_assignment_100440' (line 1851)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1851, 12), 'call_assignment_100440', getitem___call_result_104761)
    
    # Assigning a Name to a Name (line 1851):
    
    # Assigning a Name to a Name (line 1851):
    # Getting the type of 'call_assignment_100440' (line 1851)
    call_assignment_100440_104762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 12), 'call_assignment_100440')
    # Assigning a type to the variable 'varargs' (line 1851)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1851, 19), 'varargs', call_assignment_100440_104762)
    
    # Assigning a Call to a Name (line 1851):
    
    # Assigning a Call to a Name (line 1851):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_104765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1851, 12), 'int')
    # Processing the call keyword arguments
    kwargs_104766 = {}
    # Getting the type of 'call_assignment_100438' (line 1851)
    call_assignment_100438_104763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 12), 'call_assignment_100438', False)
    # Obtaining the member '__getitem__' of a type (line 1851)
    getitem___104764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1851, 12), call_assignment_100438_104763, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_104767 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___104764, *[int_104765], **kwargs_104766)
    
    # Assigning a type to the variable 'call_assignment_100441' (line 1851)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1851, 12), 'call_assignment_100441', getitem___call_result_104767)
    
    # Assigning a Name to a Name (line 1851):
    
    # Assigning a Name to a Name (line 1851):
    # Getting the type of 'call_assignment_100441' (line 1851)
    call_assignment_100441_104768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 12), 'call_assignment_100441')
    # Assigning a type to the variable 'varkw' (line 1851)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1851, 28), 'varkw', call_assignment_100441_104768)
    
    # Assigning a Call to a Name (line 1851):
    
    # Assigning a Call to a Name (line 1851):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_104771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1851, 12), 'int')
    # Processing the call keyword arguments
    kwargs_104772 = {}
    # Getting the type of 'call_assignment_100438' (line 1851)
    call_assignment_100438_104769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 12), 'call_assignment_100438', False)
    # Obtaining the member '__getitem__' of a type (line 1851)
    getitem___104770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1851, 12), call_assignment_100438_104769, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_104773 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___104770, *[int_104771], **kwargs_104772)
    
    # Assigning a type to the variable 'call_assignment_100442' (line 1851)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1851, 12), 'call_assignment_100442', getitem___call_result_104773)
    
    # Assigning a Name to a Name (line 1851):
    
    # Assigning a Name to a Name (line 1851):
    # Getting the type of 'call_assignment_100442' (line 1851)
    call_assignment_100442_104774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 12), 'call_assignment_100442')
    # Assigning a type to the variable 'defaults' (line 1851)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1851, 35), 'defaults', call_assignment_100442_104774)
    
    # Assigning a Call to a Name (line 1851):
    
    # Assigning a Call to a Name (line 1851):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_104777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1851, 12), 'int')
    # Processing the call keyword arguments
    kwargs_104778 = {}
    # Getting the type of 'call_assignment_100438' (line 1851)
    call_assignment_100438_104775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 12), 'call_assignment_100438', False)
    # Obtaining the member '__getitem__' of a type (line 1851)
    getitem___104776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1851, 12), call_assignment_100438_104775, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_104779 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___104776, *[int_104777], **kwargs_104778)
    
    # Assigning a type to the variable 'call_assignment_100443' (line 1851)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1851, 12), 'call_assignment_100443', getitem___call_result_104779)
    
    # Assigning a Name to a Name (line 1851):
    
    # Assigning a Name to a Name (line 1851):
    # Getting the type of 'call_assignment_100443' (line 1851)
    call_assignment_100443_104780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 12), 'call_assignment_100443')
    # Assigning a type to the variable 'kwonlyargs' (line 1851)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1851, 45), 'kwonlyargs', call_assignment_100443_104780)
    
    # Assigning a Call to a Name (line 1851):
    
    # Assigning a Call to a Name (line 1851):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_104783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1851, 12), 'int')
    # Processing the call keyword arguments
    kwargs_104784 = {}
    # Getting the type of 'call_assignment_100438' (line 1851)
    call_assignment_100438_104781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 12), 'call_assignment_100438', False)
    # Obtaining the member '__getitem__' of a type (line 1851)
    getitem___104782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1851, 12), call_assignment_100438_104781, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_104785 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___104782, *[int_104783], **kwargs_104784)
    
    # Assigning a type to the variable 'call_assignment_100444' (line 1851)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1851, 12), 'call_assignment_100444', getitem___call_result_104785)
    
    # Assigning a Name to a Name (line 1851):
    
    # Assigning a Name to a Name (line 1851):
    # Getting the type of 'call_assignment_100444' (line 1851)
    call_assignment_100444_104786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 12), 'call_assignment_100444')
    # Assigning a type to the variable 'kwonlydefs' (line 1851)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1851, 57), 'kwonlydefs', call_assignment_100444_104786)
    
    # Assigning a Call to a Name (line 1851):
    
    # Assigning a Call to a Name (line 1851):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_104789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1851, 12), 'int')
    # Processing the call keyword arguments
    kwargs_104790 = {}
    # Getting the type of 'call_assignment_100438' (line 1851)
    call_assignment_100438_104787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 12), 'call_assignment_100438', False)
    # Obtaining the member '__getitem__' of a type (line 1851)
    getitem___104788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1851, 12), call_assignment_100438_104787, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_104791 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___104788, *[int_104789], **kwargs_104790)
    
    # Assigning a type to the variable 'call_assignment_100445' (line 1851)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1851, 12), 'call_assignment_100445', getitem___call_result_104791)
    
    # Assigning a Name to a Name (line 1851):
    
    # Assigning a Name to a Name (line 1851):
    # Getting the type of 'call_assignment_100445' (line 1851)
    call_assignment_100445_104792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 12), 'call_assignment_100445')
    # Assigning a type to the variable 'annotations' (line 1852)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1852, 16), 'annotations', call_assignment_100445_104792)
    # SSA join for if statement (line 1848)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'defaults' (line 1853)
    defaults_104793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1853, 11), 'defaults')
    # Testing the type of an if condition (line 1853)
    if_condition_104794 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1853, 8), defaults_104793)
    # Assigning a type to the variable 'if_condition_104794' (line 1853)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1853, 8), 'if_condition_104794', if_condition_104794)
    # SSA begins for if statement (line 1853)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a ListComp to a Name (line 1854):
    
    # Assigning a ListComp to a Name (line 1854):
    
    # Assigning a ListComp to a Name (line 1854):
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to zip(...): (line 1855)
    # Processing the call arguments (line 1855)
    
    # Obtaining the type of the subscript
    int_104799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1855, 56), 'int')
    slice_104800 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1855, 51), int_104799, None, None)
    # Getting the type of 'args' (line 1855)
    args_104801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 51), 'args', False)
    # Obtaining the member '__getitem__' of a type (line 1855)
    getitem___104802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1855, 51), args_104801, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1855)
    subscript_call_result_104803 = invoke(stypy.reporting.localization.Localization(__file__, 1855, 51), getitem___104802, slice_104800)
    
    # Getting the type of 'defaults' (line 1855)
    defaults_104804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 61), 'defaults', False)
    # Processing the call keyword arguments (line 1855)
    kwargs_104805 = {}
    # Getting the type of 'zip' (line 1855)
    zip_104798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 47), 'zip', False)
    # Calling zip(args, kwargs) (line 1855)
    zip_call_result_104806 = invoke(stypy.reporting.localization.Localization(__file__, 1855, 47), zip_104798, *[subscript_call_result_104803, defaults_104804], **kwargs_104805)
    
    comprehension_104807 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1854, 20), zip_call_result_104806)
    # Assigning a type to the variable 'argname' (line 1854)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1854, 20), 'argname', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1854, 20), comprehension_104807))
    # Assigning a type to the variable 'argdefault' (line 1854)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1854, 20), 'argdefault', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1854, 20), comprehension_104807))
    
    # Obtaining an instance of the builtin type 'tuple' (line 1854)
    tuple_104795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1854, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1854)
    # Adding element type (line 1854)
    # Getting the type of 'argname' (line 1854)
    argname_104796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 21), 'argname')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1854, 21), tuple_104795, argname_104796)
    # Adding element type (line 1854)
    # Getting the type of 'argdefault' (line 1854)
    argdefault_104797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 30), 'argdefault')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1854, 21), tuple_104795, argdefault_104797)
    
    list_104808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1854, 20), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1854, 20), list_104808, tuple_104795)
    # Assigning a type to the variable 'args' (line 1854)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1854, 12), 'args', list_104808)
    # SSA branch for the else part of an if statement (line 1853)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 1857):
    
    # Assigning a Name to a Name (line 1857):
    
    # Assigning a Name to a Name (line 1857):
    # Getting the type of 'None' (line 1857)
    None_104809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1857, 19), 'None')
    # Assigning a type to the variable 'args' (line 1857)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1857, 12), 'args', None_104809)
    # SSA join for if statement (line 1853)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 1859)
    # Getting the type of 'args' (line 1859)
    args_104810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 11), 'args')
    # Getting the type of 'None' (line 1859)
    None_104811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 19), 'None')
    
    (may_be_104812, more_types_in_union_104813) = may_be_none(args_104810, None_104811)

    if may_be_104812:

        if more_types_in_union_104813:
            # Runtime conditional SSA (line 1859)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Str to a Name (line 1860):
        
        # Assigning a Str to a Name (line 1860):
        
        # Assigning a Str to a Name (line 1860):
        unicode_104814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1860, 21), 'unicode', u'None')
        # Assigning a type to the variable 'argstr' (line 1860)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1860, 12), 'argstr', unicode_104814)

        if more_types_in_union_104813:
            # Runtime conditional SSA for else branch (line 1859)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_104812) or more_types_in_union_104813):
        
        # Assigning a Call to a Name (line 1862):
        
        # Assigning a Call to a Name (line 1862):
        
        # Assigning a Call to a Name (line 1862):
        
        # Call to join(...): (line 1862)
        # Processing the call arguments (line 1862)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'args' (line 1864)
        args_104822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 34), 'args', False)
        comprehension_104823 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1862, 31), args_104822)
        # Assigning a type to the variable 'an' (line 1862)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1862, 31), 'an', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1862, 31), comprehension_104823))
        # Assigning a type to the variable 'av' (line 1862)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1862, 31), 'av', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1862, 31), comprehension_104823))
        unicode_104817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1862, 32), 'unicode', u'%s=%s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1862)
        tuple_104818 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1862, 43), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1862)
        # Adding element type (line 1862)
        # Getting the type of 'an' (line 1862)
        an_104819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1862, 43), 'an', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1862, 43), tuple_104818, an_104819)
        # Adding element type (line 1862)
        # Getting the type of 'av' (line 1862)
        av_104820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1862, 47), 'av', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1862, 43), tuple_104818, av_104820)
        
        # Applying the binary operator '%' (line 1862)
        result_mod_104821 = python_operator(stypy.reporting.localization.Localization(__file__, 1862, 32), '%', unicode_104817, tuple_104818)
        
        list_104824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1862, 31), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1862, 31), list_104824, result_mod_104821)
        # Processing the call keyword arguments (line 1862)
        kwargs_104825 = {}
        unicode_104815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1862, 21), 'unicode', u',')
        # Obtaining the member 'join' of a type (line 1862)
        join_104816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1862, 21), unicode_104815, 'join')
        # Calling join(args, kwargs) (line 1862)
        join_call_result_104826 = invoke(stypy.reporting.localization.Localization(__file__, 1862, 21), join_104816, *[list_104824], **kwargs_104825)
        
        # Assigning a type to the variable 'argstr' (line 1862)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1862, 12), 'argstr', join_call_result_104826)

        if (may_be_104812 and more_types_in_union_104813):
            # SSA join for if statement (line 1859)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Call to append(...): (line 1867)
    # Processing the call arguments (line 1867)
    
    # Obtaining an instance of the builtin type 'list' (line 1867)
    list_104829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1867, 22), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1867)
    # Adding element type (line 1867)
    # Getting the type of 'cls' (line 1867)
    cls_104830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 23), 'cls', False)
    # Obtaining the member '__name__' of a type (line 1867)
    name___104831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1867, 23), cls_104830, '__name__')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1867, 22), list_104829, name___104831)
    # Adding element type (line 1867)
    unicode_104832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1867, 37), 'unicode', u'``%s``')
    # Getting the type of 'name' (line 1867)
    name_104833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 48), 'name', False)
    # Applying the binary operator '%' (line 1867)
    result_mod_104834 = python_operator(stypy.reporting.localization.Localization(__file__, 1867, 37), '%', unicode_104832, name_104833)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1867, 22), list_104829, result_mod_104834)
    # Adding element type (line 1867)
    # Getting the type of 'argstr' (line 1867)
    argstr_104835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 54), 'argstr', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1867, 22), list_104829, argstr_104835)
    
    # Processing the call keyword arguments (line 1867)
    kwargs_104836 = {}
    # Getting the type of '_table' (line 1867)
    _table_104827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 8), '_table', False)
    # Obtaining the member 'append' of a type (line 1867)
    append_104828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1867, 8), _table_104827, 'append')
    # Calling append(args, kwargs) (line 1867)
    append_call_result_104837 = invoke(stypy.reporting.localization.Localization(__file__, 1867, 8), append_104828, *[list_104829], **kwargs_104836)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to _pprint_table(...): (line 1869)
    # Processing the call arguments (line 1869)
    # Getting the type of '_table' (line 1869)
    _table_104839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 25), '_table', False)
    # Processing the call keyword arguments (line 1869)
    kwargs_104840 = {}
    # Getting the type of '_pprint_table' (line 1869)
    _pprint_table_104838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 11), '_pprint_table', False)
    # Calling _pprint_table(args, kwargs) (line 1869)
    _pprint_table_call_result_104841 = invoke(stypy.reporting.localization.Localization(__file__, 1869, 11), _pprint_table_104838, *[_table_104839], **kwargs_104840)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1869)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1869, 4), 'stypy_return_type', _pprint_table_call_result_104841)
    
    # ################# End of '_pprint_styles(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_pprint_styles' in the type store
    # Getting the type of 'stypy_return_type' (line 1837)
    stypy_return_type_104842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_104842)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_pprint_styles'
    return stypy_return_type_104842

# Assigning a type to the variable '_pprint_styles' (line 1837)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1837, 0), '_pprint_styles', _pprint_styles)

@norecursion
def _simpleprint_styles(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_simpleprint_styles'
    module_type_store = module_type_store.open_function_context('_simpleprint_styles', 1872, 0, False)
    
    # Passed parameters checking function
    _simpleprint_styles.stypy_localization = localization
    _simpleprint_styles.stypy_type_of_self = None
    _simpleprint_styles.stypy_type_store = module_type_store
    _simpleprint_styles.stypy_function_name = '_simpleprint_styles'
    _simpleprint_styles.stypy_param_names_list = ['_styles']
    _simpleprint_styles.stypy_varargs_param_name = None
    _simpleprint_styles.stypy_kwargs_param_name = None
    _simpleprint_styles.stypy_call_defaults = defaults
    _simpleprint_styles.stypy_call_varargs = varargs
    _simpleprint_styles.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_simpleprint_styles', ['_styles'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_simpleprint_styles', localization, ['_styles'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_simpleprint_styles(...)' code ##################

    unicode_104843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1877, (-1)), 'unicode', u'\n    A helper function for the _Style class.  Given the dictionary of\n    (stylename : styleclass), return a string rep of the list of keys.\n    Used to update the documentation.\n    ')
    
    # Call to format(...): (line 1878)
    # Processing the call arguments (line 1878)
    
    # Call to join(...): (line 1878)
    # Processing the call arguments (line 1878)
    
    # Call to map(...): (line 1878)
    # Processing the call arguments (line 1878)
    unicode_104849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1878, 38), 'unicode', u" '{}' ")
    # Obtaining the member 'format' of a type (line 1878)
    format_104850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1878, 38), unicode_104849, 'format')
    
    # Call to sorted(...): (line 1878)
    # Processing the call arguments (line 1878)
    # Getting the type of '_styles' (line 1878)
    _styles_104852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 62), '_styles', False)
    # Processing the call keyword arguments (line 1878)
    kwargs_104853 = {}
    # Getting the type of 'sorted' (line 1878)
    sorted_104851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 55), 'sorted', False)
    # Calling sorted(args, kwargs) (line 1878)
    sorted_call_result_104854 = invoke(stypy.reporting.localization.Localization(__file__, 1878, 55), sorted_104851, *[_styles_104852], **kwargs_104853)
    
    # Processing the call keyword arguments (line 1878)
    kwargs_104855 = {}
    # Getting the type of 'map' (line 1878)
    map_104848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 34), 'map', False)
    # Calling map(args, kwargs) (line 1878)
    map_call_result_104856 = invoke(stypy.reporting.localization.Localization(__file__, 1878, 34), map_104848, *[format_104850, sorted_call_result_104854], **kwargs_104855)
    
    # Processing the call keyword arguments (line 1878)
    kwargs_104857 = {}
    unicode_104846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1878, 25), 'unicode', u'|')
    # Obtaining the member 'join' of a type (line 1878)
    join_104847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1878, 25), unicode_104846, 'join')
    # Calling join(args, kwargs) (line 1878)
    join_call_result_104858 = invoke(stypy.reporting.localization.Localization(__file__, 1878, 25), join_104847, *[map_call_result_104856], **kwargs_104857)
    
    # Processing the call keyword arguments (line 1878)
    kwargs_104859 = {}
    unicode_104844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1878, 11), 'unicode', u'[{}]')
    # Obtaining the member 'format' of a type (line 1878)
    format_104845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1878, 11), unicode_104844, 'format')
    # Calling format(args, kwargs) (line 1878)
    format_call_result_104860 = invoke(stypy.reporting.localization.Localization(__file__, 1878, 11), format_104845, *[join_call_result_104858], **kwargs_104859)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1878)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1878, 4), 'stypy_return_type', format_call_result_104860)
    
    # ################# End of '_simpleprint_styles(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_simpleprint_styles' in the type store
    # Getting the type of 'stypy_return_type' (line 1872)
    stypy_return_type_104861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_104861)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_simpleprint_styles'
    return stypy_return_type_104861

# Assigning a type to the variable '_simpleprint_styles' (line 1872)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1872, 0), '_simpleprint_styles', _simpleprint_styles)
# Declaration of the '_Style' class

class _Style(object, ):
    unicode_104862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1886, (-1)), 'unicode', u'\n    A base class for the Styles. It is meant to be a container class,\n    where actual styles are declared as subclass of it, and it\n    provides some helper functions.\n    ')

    @norecursion
    def __new__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__new__'
        module_type_store = module_type_store.open_function_context('__new__', 1887, 4, False)
        # Assigning a type to the variable 'self' (line 1888)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1888, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _Style.__new__.__dict__.__setitem__('stypy_localization', localization)
        _Style.__new__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _Style.__new__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _Style.__new__.__dict__.__setitem__('stypy_function_name', '_Style.__new__')
        _Style.__new__.__dict__.__setitem__('stypy_param_names_list', ['stylename'])
        _Style.__new__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _Style.__new__.__dict__.__setitem__('stypy_kwargs_param_name', 'kw')
        _Style.__new__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _Style.__new__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _Style.__new__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _Style.__new__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_Style.__new__', ['stylename'], None, 'kw', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__new__', localization, ['stylename'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__new__(...)' code ##################

        unicode_104863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1890, (-1)), 'unicode', u'\n        return the instance of the subclass with the given style name.\n        ')
        
        # Assigning a Call to a Name (line 1895):
        
        # Assigning a Call to a Name (line 1895):
        
        # Assigning a Call to a Name (line 1895):
        
        # Call to split(...): (line 1895)
        # Processing the call arguments (line 1895)
        unicode_104871 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1895, 49), 'unicode', u',')
        # Processing the call keyword arguments (line 1895)
        kwargs_104872 = {}
        
        # Call to replace(...): (line 1895)
        # Processing the call arguments (line 1895)
        unicode_104866 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1895, 34), 'unicode', u' ')
        unicode_104867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1895, 39), 'unicode', u'')
        # Processing the call keyword arguments (line 1895)
        kwargs_104868 = {}
        # Getting the type of 'stylename' (line 1895)
        stylename_104864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1895, 16), 'stylename', False)
        # Obtaining the member 'replace' of a type (line 1895)
        replace_104865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1895, 16), stylename_104864, 'replace')
        # Calling replace(args, kwargs) (line 1895)
        replace_call_result_104869 = invoke(stypy.reporting.localization.Localization(__file__, 1895, 16), replace_104865, *[unicode_104866, unicode_104867], **kwargs_104868)
        
        # Obtaining the member 'split' of a type (line 1895)
        split_104870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1895, 16), replace_call_result_104869, 'split')
        # Calling split(args, kwargs) (line 1895)
        split_call_result_104873 = invoke(stypy.reporting.localization.Localization(__file__, 1895, 16), split_104870, *[unicode_104871], **kwargs_104872)
        
        # Assigning a type to the variable '_list' (line 1895)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1895, 8), '_list', split_call_result_104873)
        
        # Assigning a Call to a Name (line 1896):
        
        # Assigning a Call to a Name (line 1896):
        
        # Assigning a Call to a Name (line 1896):
        
        # Call to lower(...): (line 1896)
        # Processing the call keyword arguments (line 1896)
        kwargs_104879 = {}
        
        # Obtaining the type of the subscript
        int_104874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1896, 22), 'int')
        # Getting the type of '_list' (line 1896)
        _list_104875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1896, 16), '_list', False)
        # Obtaining the member '__getitem__' of a type (line 1896)
        getitem___104876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1896, 16), _list_104875, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1896)
        subscript_call_result_104877 = invoke(stypy.reporting.localization.Localization(__file__, 1896, 16), getitem___104876, int_104874)
        
        # Obtaining the member 'lower' of a type (line 1896)
        lower_104878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1896, 16), subscript_call_result_104877, 'lower')
        # Calling lower(args, kwargs) (line 1896)
        lower_call_result_104880 = invoke(stypy.reporting.localization.Localization(__file__, 1896, 16), lower_104878, *[], **kwargs_104879)
        
        # Assigning a type to the variable '_name' (line 1896)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1896, 8), '_name', lower_call_result_104880)
        
        
        # SSA begins for try-except statement (line 1897)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Subscript to a Name (line 1898):
        
        # Assigning a Subscript to a Name (line 1898):
        
        # Assigning a Subscript to a Name (line 1898):
        
        # Obtaining the type of the subscript
        # Getting the type of '_name' (line 1898)
        _name_104881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 36), '_name')
        # Getting the type of 'self' (line 1898)
        self_104882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 19), 'self')
        # Obtaining the member '_style_list' of a type (line 1898)
        _style_list_104883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1898, 19), self_104882, '_style_list')
        # Obtaining the member '__getitem__' of a type (line 1898)
        getitem___104884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1898, 19), _style_list_104883, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1898)
        subscript_call_result_104885 = invoke(stypy.reporting.localization.Localization(__file__, 1898, 19), getitem___104884, _name_104881)
        
        # Assigning a type to the variable '_cls' (line 1898)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1898, 12), '_cls', subscript_call_result_104885)
        # SSA branch for the except part of a try statement (line 1897)
        # SSA branch for the except 'KeyError' branch of a try statement (line 1897)
        module_type_store.open_ssa_branch('except')
        
        # Call to ValueError(...): (line 1900)
        # Processing the call arguments (line 1900)
        unicode_104887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1900, 29), 'unicode', u'Unknown style : %s')
        # Getting the type of 'stylename' (line 1900)
        stylename_104888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1900, 52), 'stylename', False)
        # Applying the binary operator '%' (line 1900)
        result_mod_104889 = python_operator(stypy.reporting.localization.Localization(__file__, 1900, 29), '%', unicode_104887, stylename_104888)
        
        # Processing the call keyword arguments (line 1900)
        kwargs_104890 = {}
        # Getting the type of 'ValueError' (line 1900)
        ValueError_104886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1900, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1900)
        ValueError_call_result_104891 = invoke(stypy.reporting.localization.Localization(__file__, 1900, 18), ValueError_104886, *[result_mod_104889], **kwargs_104890)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1900, 12), ValueError_call_result_104891, 'raise parameter', BaseException)
        # SSA join for try-except statement (line 1897)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 1902)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a ListComp to a Name (line 1903):
        
        # Assigning a ListComp to a Name (line 1903):
        
        # Assigning a ListComp to a Name (line 1903):
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Obtaining the type of the subscript
        int_104897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1903, 56), 'int')
        slice_104898 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1903, 50), int_104897, None, None)
        # Getting the type of '_list' (line 1903)
        _list_104899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1903, 50), '_list')
        # Obtaining the member '__getitem__' of a type (line 1903)
        getitem___104900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1903, 50), _list_104899, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1903)
        subscript_call_result_104901 = invoke(stypy.reporting.localization.Localization(__file__, 1903, 50), getitem___104900, slice_104898)
        
        comprehension_104902 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1903, 26), subscript_call_result_104901)
        # Assigning a type to the variable 'cs' (line 1903)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1903, 26), 'cs', comprehension_104902)
        
        # Call to split(...): (line 1903)
        # Processing the call arguments (line 1903)
        unicode_104894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1903, 35), 'unicode', u'=')
        # Processing the call keyword arguments (line 1903)
        kwargs_104895 = {}
        # Getting the type of 'cs' (line 1903)
        cs_104892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1903, 26), 'cs', False)
        # Obtaining the member 'split' of a type (line 1903)
        split_104893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1903, 26), cs_104892, 'split')
        # Calling split(args, kwargs) (line 1903)
        split_call_result_104896 = invoke(stypy.reporting.localization.Localization(__file__, 1903, 26), split_104893, *[unicode_104894], **kwargs_104895)
        
        list_104903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1903, 26), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1903, 26), list_104903, split_call_result_104896)
        # Assigning a type to the variable '_args_pair' (line 1903)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1903, 12), '_args_pair', list_104903)
        
        # Assigning a DictComp to a Name (line 1904):
        
        # Assigning a DictComp to a Name (line 1904):
        
        # Assigning a DictComp to a Name (line 1904):
        # Calculating dict comprehension
        module_type_store = module_type_store.open_function_context('dict comprehension expression', 1904, 21, True)
        # Calculating comprehension expression
        # Getting the type of '_args_pair' (line 1904)
        _args_pair_104909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1904, 45), '_args_pair')
        comprehension_104910 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1904, 21), _args_pair_104909)
        # Assigning a type to the variable 'k' (line 1904)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1904, 21), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1904, 21), comprehension_104910))
        # Assigning a type to the variable 'v' (line 1904)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1904, 21), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1904, 21), comprehension_104910))
        # Getting the type of 'k' (line 1904)
        k_104904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1904, 21), 'k')
        
        # Call to float(...): (line 1904)
        # Processing the call arguments (line 1904)
        # Getting the type of 'v' (line 1904)
        v_104906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1904, 30), 'v', False)
        # Processing the call keyword arguments (line 1904)
        kwargs_104907 = {}
        # Getting the type of 'float' (line 1904)
        float_104905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1904, 24), 'float', False)
        # Calling float(args, kwargs) (line 1904)
        float_call_result_104908 = invoke(stypy.reporting.localization.Localization(__file__, 1904, 24), float_104905, *[v_104906], **kwargs_104907)
        
        dict_104911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1904, 21), 'dict')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1904, 21), dict_104911, (k_104904, float_call_result_104908))
        # Assigning a type to the variable '_args' (line 1904)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1904, 12), '_args', dict_104911)
        # SSA branch for the except part of a try statement (line 1902)
        # SSA branch for the except 'ValueError' branch of a try statement (line 1902)
        module_type_store.open_ssa_branch('except')
        
        # Call to ValueError(...): (line 1906)
        # Processing the call arguments (line 1906)
        unicode_104913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1906, 29), 'unicode', u'Incorrect style argument : %s')
        # Getting the type of 'stylename' (line 1906)
        stylename_104914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1906, 63), 'stylename', False)
        # Applying the binary operator '%' (line 1906)
        result_mod_104915 = python_operator(stypy.reporting.localization.Localization(__file__, 1906, 29), '%', unicode_104913, stylename_104914)
        
        # Processing the call keyword arguments (line 1906)
        kwargs_104916 = {}
        # Getting the type of 'ValueError' (line 1906)
        ValueError_104912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1906, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1906)
        ValueError_call_result_104917 = invoke(stypy.reporting.localization.Localization(__file__, 1906, 18), ValueError_104912, *[result_mod_104915], **kwargs_104916)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1906, 12), ValueError_call_result_104917, 'raise parameter', BaseException)
        # SSA join for try-except statement (line 1902)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to update(...): (line 1907)
        # Processing the call arguments (line 1907)
        # Getting the type of 'kw' (line 1907)
        kw_104920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1907, 21), 'kw', False)
        # Processing the call keyword arguments (line 1907)
        kwargs_104921 = {}
        # Getting the type of '_args' (line 1907)
        _args_104918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1907, 8), '_args', False)
        # Obtaining the member 'update' of a type (line 1907)
        update_104919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1907, 8), _args_104918, 'update')
        # Calling update(args, kwargs) (line 1907)
        update_call_result_104922 = invoke(stypy.reporting.localization.Localization(__file__, 1907, 8), update_104919, *[kw_104920], **kwargs_104921)
        
        
        # Call to _cls(...): (line 1909)
        # Processing the call keyword arguments (line 1909)
        # Getting the type of '_args' (line 1909)
        _args_104924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1909, 22), '_args', False)
        kwargs_104925 = {'_args_104924': _args_104924}
        # Getting the type of '_cls' (line 1909)
        _cls_104923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1909, 15), '_cls', False)
        # Calling _cls(args, kwargs) (line 1909)
        _cls_call_result_104926 = invoke(stypy.reporting.localization.Localization(__file__, 1909, 15), _cls_104923, *[], **kwargs_104925)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1909)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1909, 8), 'stypy_return_type', _cls_call_result_104926)
        
        # ################# End of '__new__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__new__' in the type store
        # Getting the type of 'stypy_return_type' (line 1887)
        stypy_return_type_104927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_104927)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__new__'
        return stypy_return_type_104927


    @norecursion
    def get_styles(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_styles'
        module_type_store = module_type_store.open_function_context('get_styles', 1911, 4, False)
        # Assigning a type to the variable 'self' (line 1912)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1912, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _Style.get_styles.__dict__.__setitem__('stypy_localization', localization)
        _Style.get_styles.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _Style.get_styles.__dict__.__setitem__('stypy_type_store', module_type_store)
        _Style.get_styles.__dict__.__setitem__('stypy_function_name', '_Style.get_styles')
        _Style.get_styles.__dict__.__setitem__('stypy_param_names_list', [])
        _Style.get_styles.__dict__.__setitem__('stypy_varargs_param_name', None)
        _Style.get_styles.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _Style.get_styles.__dict__.__setitem__('stypy_call_defaults', defaults)
        _Style.get_styles.__dict__.__setitem__('stypy_call_varargs', varargs)
        _Style.get_styles.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _Style.get_styles.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_Style.get_styles', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_styles', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_styles(...)' code ##################

        unicode_104928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1915, (-1)), 'unicode', u'\n        A class method which returns a dictionary of available styles.\n        ')
        # Getting the type of 'klass' (line 1916)
        klass_104929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 15), 'klass')
        # Obtaining the member '_style_list' of a type (line 1916)
        _style_list_104930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1916, 15), klass_104929, '_style_list')
        # Assigning a type to the variable 'stypy_return_type' (line 1916)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1916, 8), 'stypy_return_type', _style_list_104930)
        
        # ################# End of 'get_styles(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_styles' in the type store
        # Getting the type of 'stypy_return_type' (line 1911)
        stypy_return_type_104931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1911, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_104931)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_styles'
        return stypy_return_type_104931


    @norecursion
    def pprint_styles(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'pprint_styles'
        module_type_store = module_type_store.open_function_context('pprint_styles', 1918, 4, False)
        # Assigning a type to the variable 'self' (line 1919)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1919, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _Style.pprint_styles.__dict__.__setitem__('stypy_localization', localization)
        _Style.pprint_styles.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _Style.pprint_styles.__dict__.__setitem__('stypy_type_store', module_type_store)
        _Style.pprint_styles.__dict__.__setitem__('stypy_function_name', '_Style.pprint_styles')
        _Style.pprint_styles.__dict__.__setitem__('stypy_param_names_list', [])
        _Style.pprint_styles.__dict__.__setitem__('stypy_varargs_param_name', None)
        _Style.pprint_styles.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _Style.pprint_styles.__dict__.__setitem__('stypy_call_defaults', defaults)
        _Style.pprint_styles.__dict__.__setitem__('stypy_call_varargs', varargs)
        _Style.pprint_styles.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _Style.pprint_styles.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_Style.pprint_styles', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'pprint_styles', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'pprint_styles(...)' code ##################

        unicode_104932 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1922, (-1)), 'unicode', u'\n        A class method which returns a string of the available styles.\n        ')
        
        # Call to _pprint_styles(...): (line 1923)
        # Processing the call arguments (line 1923)
        # Getting the type of 'klass' (line 1923)
        klass_104934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 30), 'klass', False)
        # Obtaining the member '_style_list' of a type (line 1923)
        _style_list_104935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1923, 30), klass_104934, '_style_list')
        # Processing the call keyword arguments (line 1923)
        kwargs_104936 = {}
        # Getting the type of '_pprint_styles' (line 1923)
        _pprint_styles_104933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 15), '_pprint_styles', False)
        # Calling _pprint_styles(args, kwargs) (line 1923)
        _pprint_styles_call_result_104937 = invoke(stypy.reporting.localization.Localization(__file__, 1923, 15), _pprint_styles_104933, *[_style_list_104935], **kwargs_104936)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1923)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1923, 8), 'stypy_return_type', _pprint_styles_call_result_104937)
        
        # ################# End of 'pprint_styles(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'pprint_styles' in the type store
        # Getting the type of 'stypy_return_type' (line 1918)
        stypy_return_type_104938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1918, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_104938)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'pprint_styles'
        return stypy_return_type_104938


    @norecursion
    def register(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'register'
        module_type_store = module_type_store.open_function_context('register', 1925, 4, False)
        # Assigning a type to the variable 'self' (line 1926)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1926, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _Style.register.__dict__.__setitem__('stypy_localization', localization)
        _Style.register.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _Style.register.__dict__.__setitem__('stypy_type_store', module_type_store)
        _Style.register.__dict__.__setitem__('stypy_function_name', '_Style.register')
        _Style.register.__dict__.__setitem__('stypy_param_names_list', ['name', 'style'])
        _Style.register.__dict__.__setitem__('stypy_varargs_param_name', None)
        _Style.register.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _Style.register.__dict__.__setitem__('stypy_call_defaults', defaults)
        _Style.register.__dict__.__setitem__('stypy_call_varargs', varargs)
        _Style.register.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _Style.register.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_Style.register', ['name', 'style'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'register', localization, ['name', 'style'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'register(...)' code ##################

        unicode_104939 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1929, (-1)), 'unicode', u'\n        Register a new style.\n        ')
        
        
        
        # Call to issubclass(...): (line 1931)
        # Processing the call arguments (line 1931)
        # Getting the type of 'style' (line 1931)
        style_104941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 26), 'style', False)
        # Getting the type of 'klass' (line 1931)
        klass_104942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 33), 'klass', False)
        # Obtaining the member '_Base' of a type (line 1931)
        _Base_104943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1931, 33), klass_104942, '_Base')
        # Processing the call keyword arguments (line 1931)
        kwargs_104944 = {}
        # Getting the type of 'issubclass' (line 1931)
        issubclass_104940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 15), 'issubclass', False)
        # Calling issubclass(args, kwargs) (line 1931)
        issubclass_call_result_104945 = invoke(stypy.reporting.localization.Localization(__file__, 1931, 15), issubclass_104940, *[style_104941, _Base_104943], **kwargs_104944)
        
        # Applying the 'not' unary operator (line 1931)
        result_not__104946 = python_operator(stypy.reporting.localization.Localization(__file__, 1931, 11), 'not', issubclass_call_result_104945)
        
        # Testing the type of an if condition (line 1931)
        if_condition_104947 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1931, 8), result_not__104946)
        # Assigning a type to the variable 'if_condition_104947' (line 1931)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1931, 8), 'if_condition_104947', if_condition_104947)
        # SSA begins for if statement (line 1931)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1932)
        # Processing the call arguments (line 1932)
        unicode_104949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1932, 29), 'unicode', u'%s must be a subclass of %s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1932)
        tuple_104950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1932, 62), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1932)
        # Adding element type (line 1932)
        # Getting the type of 'style' (line 1932)
        style_104951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1932, 62), 'style', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1932, 62), tuple_104950, style_104951)
        # Adding element type (line 1932)
        # Getting the type of 'klass' (line 1933)
        klass_104952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 62), 'klass', False)
        # Obtaining the member '_Base' of a type (line 1933)
        _Base_104953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1933, 62), klass_104952, '_Base')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1932, 62), tuple_104950, _Base_104953)
        
        # Applying the binary operator '%' (line 1932)
        result_mod_104954 = python_operator(stypy.reporting.localization.Localization(__file__, 1932, 29), '%', unicode_104949, tuple_104950)
        
        # Processing the call keyword arguments (line 1932)
        kwargs_104955 = {}
        # Getting the type of 'ValueError' (line 1932)
        ValueError_104948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1932, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1932)
        ValueError_call_result_104956 = invoke(stypy.reporting.localization.Localization(__file__, 1932, 18), ValueError_104948, *[result_mod_104954], **kwargs_104955)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1932, 12), ValueError_call_result_104956, 'raise parameter', BaseException)
        # SSA join for if statement (line 1931)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Subscript (line 1934):
        
        # Assigning a Name to a Subscript (line 1934):
        
        # Assigning a Name to a Subscript (line 1934):
        # Getting the type of 'style' (line 1934)
        style_104957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 34), 'style')
        # Getting the type of 'klass' (line 1934)
        klass_104958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 8), 'klass')
        # Obtaining the member '_style_list' of a type (line 1934)
        _style_list_104959 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1934, 8), klass_104958, '_style_list')
        # Getting the type of 'name' (line 1934)
        name_104960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 26), 'name')
        # Storing an element on a container (line 1934)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1934, 8), _style_list_104959, (name_104960, style_104957))
        
        # ################# End of 'register(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'register' in the type store
        # Getting the type of 'stypy_return_type' (line 1925)
        stypy_return_type_104961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_104961)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'register'
        return stypy_return_type_104961


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1881, 0, False)
        # Assigning a type to the variable 'self' (line 1882)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1882, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_Style.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable '_Style' (line 1881)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1881, 0), '_Style', _Style)
# Declaration of the 'BoxStyle' class
# Getting the type of '_Style' (line 1937)
_Style_104962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 15), '_Style')

class BoxStyle(_Style_104962, ):
    unicode_104963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1969, (-1)), 'unicode', u'\n    :class:`BoxStyle` is a container class which defines several\n    boxstyle classes, which are used for :class:`FancyBboxPatch`.\n\n    A style object can be created as::\n\n           BoxStyle.Round(pad=0.2)\n\n    or::\n\n           BoxStyle("Round", pad=0.2)\n\n    or::\n\n           BoxStyle("Round, pad=0.2")\n\n    Following boxstyle classes are defined.\n\n    %(AvailableBoxstyles)s\n\n    An instance of any boxstyle class is an callable object,\n    whose call signature is::\n\n       __call__(self, x0, y0, width, height, mutation_size, aspect_ratio=1.)\n\n    and returns a :class:`Path` instance. *x0*, *y0*, *width* and\n    *height* specify the location and size of the box to be\n    drawn. *mutation_scale* determines the overall size of the\n    mutation (by which I mean the transformation of the rectangle to\n    the fancy box).  *mutation_aspect* determines the aspect-ratio of\n    the mutation.\n    ')
    
    # Assigning a Dict to a Name (line 1971):
    
    # Assigning a Dict to a Name (line 1971):
    # Declaration of the '_Base' class

    class _Base(object, ):
        unicode_104964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1980, (-1)), 'unicode', u'\n        :class:`BBoxTransmuterBase` and its derivatives are used to make a\n        fancy box around a given rectangle. The :meth:`__call__` method\n        returns the :class:`~matplotlib.path.Path` of the fancy box. This\n        class is not an artist and actual drawing of the fancy box is done\n        by the :class:`FancyBboxPatch` class.\n        ')

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 1986, 8, False)
            # Assigning a type to the variable 'self' (line 1987)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1987, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, '_Base.__init__', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            unicode_104965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1989, (-1)), 'unicode', u'\n            initializtion.\n            ')
            
            # Call to __init__(...): (line 1990)
            # Processing the call keyword arguments (line 1990)
            kwargs_104973 = {}
            
            # Call to super(...): (line 1990)
            # Processing the call arguments (line 1990)
            # Getting the type of 'BoxStyle' (line 1990)
            BoxStyle_104967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1990, 18), 'BoxStyle', False)
            # Obtaining the member '_Base' of a type (line 1990)
            _Base_104968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1990, 18), BoxStyle_104967, '_Base')
            # Getting the type of 'self' (line 1990)
            self_104969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1990, 34), 'self', False)
            # Processing the call keyword arguments (line 1990)
            kwargs_104970 = {}
            # Getting the type of 'super' (line 1990)
            super_104966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1990, 12), 'super', False)
            # Calling super(args, kwargs) (line 1990)
            super_call_result_104971 = invoke(stypy.reporting.localization.Localization(__file__, 1990, 12), super_104966, *[_Base_104968, self_104969], **kwargs_104970)
            
            # Obtaining the member '__init__' of a type (line 1990)
            init___104972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1990, 12), super_call_result_104971, '__init__')
            # Calling __init__(args, kwargs) (line 1990)
            init___call_result_104974 = invoke(stypy.reporting.localization.Localization(__file__, 1990, 12), init___104972, *[], **kwargs_104973)
            
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()


        @norecursion
        def transmute(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'transmute'
            module_type_store = module_type_store.open_function_context('transmute', 1992, 8, False)
            # Assigning a type to the variable 'self' (line 1993)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1993, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            _Base.transmute.__dict__.__setitem__('stypy_localization', localization)
            _Base.transmute.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            _Base.transmute.__dict__.__setitem__('stypy_type_store', module_type_store)
            _Base.transmute.__dict__.__setitem__('stypy_function_name', '_Base.transmute')
            _Base.transmute.__dict__.__setitem__('stypy_param_names_list', ['x0', 'y0', 'width', 'height', 'mutation_size'])
            _Base.transmute.__dict__.__setitem__('stypy_varargs_param_name', None)
            _Base.transmute.__dict__.__setitem__('stypy_kwargs_param_name', None)
            _Base.transmute.__dict__.__setitem__('stypy_call_defaults', defaults)
            _Base.transmute.__dict__.__setitem__('stypy_call_varargs', varargs)
            _Base.transmute.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            _Base.transmute.__dict__.__setitem__('stypy_declared_arg_number', 6)
            arguments = process_argument_values(localization, type_of_self, module_type_store, '_Base.transmute', ['x0', 'y0', 'width', 'height', 'mutation_size'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'transmute', localization, ['x0', 'y0', 'width', 'height', 'mutation_size'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'transmute(...)' code ##################

            unicode_104975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2000, (-1)), 'unicode', u'\n            The transmute method is a very core of the\n            :class:`BboxTransmuter` class and must be overridden in the\n            subclasses. It receives the location and size of the\n            rectangle, and the mutation_size, with which the amount of\n            padding and etc. will be scaled. It returns a\n            :class:`~matplotlib.path.Path` instance.\n            ')
            
            # Call to NotImplementedError(...): (line 2001)
            # Processing the call arguments (line 2001)
            unicode_104977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2001, 38), 'unicode', u'Derived must override')
            # Processing the call keyword arguments (line 2001)
            kwargs_104978 = {}
            # Getting the type of 'NotImplementedError' (line 2001)
            NotImplementedError_104976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2001, 18), 'NotImplementedError', False)
            # Calling NotImplementedError(args, kwargs) (line 2001)
            NotImplementedError_call_result_104979 = invoke(stypy.reporting.localization.Localization(__file__, 2001, 18), NotImplementedError_104976, *[unicode_104977], **kwargs_104978)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2001, 12), NotImplementedError_call_result_104979, 'raise parameter', BaseException)
            
            # ################# End of 'transmute(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'transmute' in the type store
            # Getting the type of 'stypy_return_type' (line 1992)
            stypy_return_type_104980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1992, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_104980)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'transmute'
            return stypy_return_type_104980


        @norecursion
        def __call__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            float_104981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2004, 34), 'float')
            defaults = [float_104981]
            # Create a new context for function '__call__'
            module_type_store = module_type_store.open_function_context('__call__', 2003, 8, False)
            # Assigning a type to the variable 'self' (line 2004)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2004, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            _Base.__call__.__dict__.__setitem__('stypy_localization', localization)
            _Base.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            _Base.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
            _Base.__call__.__dict__.__setitem__('stypy_function_name', '_Base.__call__')
            _Base.__call__.__dict__.__setitem__('stypy_param_names_list', ['x0', 'y0', 'width', 'height', 'mutation_size', 'aspect_ratio'])
            _Base.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
            _Base.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
            _Base.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
            _Base.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
            _Base.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            _Base.__call__.__dict__.__setitem__('stypy_declared_arg_number', 7)
            arguments = process_argument_values(localization, type_of_self, module_type_store, '_Base.__call__', ['x0', 'y0', 'width', 'height', 'mutation_size', 'aspect_ratio'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, '__call__', localization, ['x0', 'y0', 'width', 'height', 'mutation_size', 'aspect_ratio'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__call__(...)' code ##################

            unicode_104982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2012, (-1)), 'unicode', u'\n            Given the location and size of the box, return the path of\n            the box around it.\n\n              - *x0*, *y0*, *width*, *height* : location and size of the box\n              - *mutation_size* : a reference scale for the mutation.\n              - *aspect_ratio* : aspect-ration for the mutation.\n            ')
            
            # Type idiom detected: calculating its left and rigth part (line 2016)
            # Getting the type of 'aspect_ratio' (line 2016)
            aspect_ratio_104983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2016, 12), 'aspect_ratio')
            # Getting the type of 'None' (line 2016)
            None_104984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2016, 35), 'None')
            
            (may_be_104985, more_types_in_union_104986) = may_not_be_none(aspect_ratio_104983, None_104984)

            if may_be_104985:

                if more_types_in_union_104986:
                    # Runtime conditional SSA (line 2016)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Assigning a Tuple to a Tuple (line 2018):
                
                # Assigning a BinOp to a Name (line 2018):
                
                # Assigning a BinOp to a Name (line 2018):
                # Getting the type of 'y0' (line 2018)
                y0_104987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2018, 29), 'y0')
                # Getting the type of 'aspect_ratio' (line 2018)
                aspect_ratio_104988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2018, 34), 'aspect_ratio')
                # Applying the binary operator 'div' (line 2018)
                result_div_104989 = python_operator(stypy.reporting.localization.Localization(__file__, 2018, 29), 'div', y0_104987, aspect_ratio_104988)
                
                # Assigning a type to the variable 'tuple_assignment_100446' (line 2018)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2018, 16), 'tuple_assignment_100446', result_div_104989)
                
                # Assigning a BinOp to a Name (line 2018):
                
                # Assigning a BinOp to a Name (line 2018):
                # Getting the type of 'height' (line 2018)
                height_104990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2018, 48), 'height')
                # Getting the type of 'aspect_ratio' (line 2018)
                aspect_ratio_104991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2018, 57), 'aspect_ratio')
                # Applying the binary operator 'div' (line 2018)
                result_div_104992 = python_operator(stypy.reporting.localization.Localization(__file__, 2018, 48), 'div', height_104990, aspect_ratio_104991)
                
                # Assigning a type to the variable 'tuple_assignment_100447' (line 2018)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2018, 16), 'tuple_assignment_100447', result_div_104992)
                
                # Assigning a Name to a Name (line 2018):
                
                # Assigning a Name to a Name (line 2018):
                # Getting the type of 'tuple_assignment_100446' (line 2018)
                tuple_assignment_100446_104993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2018, 16), 'tuple_assignment_100446')
                # Assigning a type to the variable 'y0' (line 2018)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2018, 16), 'y0', tuple_assignment_100446_104993)
                
                # Assigning a Name to a Name (line 2018):
                
                # Assigning a Name to a Name (line 2018):
                # Getting the type of 'tuple_assignment_100447' (line 2018)
                tuple_assignment_100447_104994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2018, 16), 'tuple_assignment_100447')
                # Assigning a type to the variable 'height' (line 2018)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2018, 20), 'height', tuple_assignment_100447_104994)
                
                # Assigning a Call to a Name (line 2020):
                
                # Assigning a Call to a Name (line 2020):
                
                # Assigning a Call to a Name (line 2020):
                
                # Call to transmute(...): (line 2020)
                # Processing the call arguments (line 2020)
                # Getting the type of 'x0' (line 2020)
                x0_104997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2020, 38), 'x0', False)
                # Getting the type of 'y0' (line 2020)
                y0_104998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2020, 42), 'y0', False)
                # Getting the type of 'width' (line 2020)
                width_104999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2020, 46), 'width', False)
                # Getting the type of 'height' (line 2020)
                height_105000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2020, 53), 'height', False)
                # Getting the type of 'mutation_size' (line 2020)
                mutation_size_105001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2020, 61), 'mutation_size', False)
                # Processing the call keyword arguments (line 2020)
                kwargs_105002 = {}
                # Getting the type of 'self' (line 2020)
                self_104995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2020, 23), 'self', False)
                # Obtaining the member 'transmute' of a type (line 2020)
                transmute_104996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2020, 23), self_104995, 'transmute')
                # Calling transmute(args, kwargs) (line 2020)
                transmute_call_result_105003 = invoke(stypy.reporting.localization.Localization(__file__, 2020, 23), transmute_104996, *[x0_104997, y0_104998, width_104999, height_105000, mutation_size_105001], **kwargs_105002)
                
                # Assigning a type to the variable 'path' (line 2020)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2020, 16), 'path', transmute_call_result_105003)
                
                # Assigning a Tuple to a Tuple (line 2021):
                
                # Assigning a Attribute to a Name (line 2021):
                
                # Assigning a Attribute to a Name (line 2021):
                # Getting the type of 'path' (line 2021)
                path_105004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2021, 34), 'path')
                # Obtaining the member 'vertices' of a type (line 2021)
                vertices_105005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2021, 34), path_105004, 'vertices')
                # Assigning a type to the variable 'tuple_assignment_100448' (line 2021)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2021, 16), 'tuple_assignment_100448', vertices_105005)
                
                # Assigning a Attribute to a Name (line 2021):
                
                # Assigning a Attribute to a Name (line 2021):
                # Getting the type of 'path' (line 2021)
                path_105006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2021, 49), 'path')
                # Obtaining the member 'codes' of a type (line 2021)
                codes_105007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2021, 49), path_105006, 'codes')
                # Assigning a type to the variable 'tuple_assignment_100449' (line 2021)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2021, 16), 'tuple_assignment_100449', codes_105007)
                
                # Assigning a Name to a Name (line 2021):
                
                # Assigning a Name to a Name (line 2021):
                # Getting the type of 'tuple_assignment_100448' (line 2021)
                tuple_assignment_100448_105008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2021, 16), 'tuple_assignment_100448')
                # Assigning a type to the variable 'vertices' (line 2021)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2021, 16), 'vertices', tuple_assignment_100448_105008)
                
                # Assigning a Name to a Name (line 2021):
                
                # Assigning a Name to a Name (line 2021):
                # Getting the type of 'tuple_assignment_100449' (line 2021)
                tuple_assignment_100449_105009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2021, 16), 'tuple_assignment_100449')
                # Assigning a type to the variable 'codes' (line 2021)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2021, 26), 'codes', tuple_assignment_100449_105009)
                
                # Assigning a BinOp to a Subscript (line 2023):
                
                # Assigning a BinOp to a Subscript (line 2023):
                
                # Assigning a BinOp to a Subscript (line 2023):
                
                # Obtaining the type of the subscript
                slice_105010 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2023, 33), None, None, None)
                int_105011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2023, 45), 'int')
                # Getting the type of 'vertices' (line 2023)
                vertices_105012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2023, 33), 'vertices')
                # Obtaining the member '__getitem__' of a type (line 2023)
                getitem___105013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2023, 33), vertices_105012, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 2023)
                subscript_call_result_105014 = invoke(stypy.reporting.localization.Localization(__file__, 2023, 33), getitem___105013, (slice_105010, int_105011))
                
                # Getting the type of 'aspect_ratio' (line 2023)
                aspect_ratio_105015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2023, 50), 'aspect_ratio')
                # Applying the binary operator '*' (line 2023)
                result_mul_105016 = python_operator(stypy.reporting.localization.Localization(__file__, 2023, 33), '*', subscript_call_result_105014, aspect_ratio_105015)
                
                # Getting the type of 'vertices' (line 2023)
                vertices_105017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2023, 16), 'vertices')
                slice_105018 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2023, 16), None, None, None)
                int_105019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2023, 28), 'int')
                # Storing an element on a container (line 2023)
                set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2023, 16), vertices_105017, ((slice_105018, int_105019), result_mul_105016))
                
                # Call to Path(...): (line 2024)
                # Processing the call arguments (line 2024)
                # Getting the type of 'vertices' (line 2024)
                vertices_105021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2024, 28), 'vertices', False)
                # Getting the type of 'codes' (line 2024)
                codes_105022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2024, 38), 'codes', False)
                # Processing the call keyword arguments (line 2024)
                kwargs_105023 = {}
                # Getting the type of 'Path' (line 2024)
                Path_105020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2024, 23), 'Path', False)
                # Calling Path(args, kwargs) (line 2024)
                Path_call_result_105024 = invoke(stypy.reporting.localization.Localization(__file__, 2024, 23), Path_105020, *[vertices_105021, codes_105022], **kwargs_105023)
                
                # Assigning a type to the variable 'stypy_return_type' (line 2024)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2024, 16), 'stypy_return_type', Path_call_result_105024)

                if more_types_in_union_104986:
                    # Runtime conditional SSA for else branch (line 2016)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_104985) or more_types_in_union_104986):
                
                # Call to transmute(...): (line 2026)
                # Processing the call arguments (line 2026)
                # Getting the type of 'x0' (line 2026)
                x0_105027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2026, 38), 'x0', False)
                # Getting the type of 'y0' (line 2026)
                y0_105028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2026, 42), 'y0', False)
                # Getting the type of 'width' (line 2026)
                width_105029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2026, 46), 'width', False)
                # Getting the type of 'height' (line 2026)
                height_105030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2026, 53), 'height', False)
                # Getting the type of 'mutation_size' (line 2026)
                mutation_size_105031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2026, 61), 'mutation_size', False)
                # Processing the call keyword arguments (line 2026)
                kwargs_105032 = {}
                # Getting the type of 'self' (line 2026)
                self_105025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2026, 23), 'self', False)
                # Obtaining the member 'transmute' of a type (line 2026)
                transmute_105026 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2026, 23), self_105025, 'transmute')
                # Calling transmute(args, kwargs) (line 2026)
                transmute_call_result_105033 = invoke(stypy.reporting.localization.Localization(__file__, 2026, 23), transmute_105026, *[x0_105027, y0_105028, width_105029, height_105030, mutation_size_105031], **kwargs_105032)
                
                # Assigning a type to the variable 'stypy_return_type' (line 2026)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2026, 16), 'stypy_return_type', transmute_call_result_105033)

                if (may_be_104985 and more_types_in_union_104986):
                    # SSA join for if statement (line 2016)
                    module_type_store = module_type_store.join_ssa_context()


            
            
            # ################# End of '__call__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function '__call__' in the type store
            # Getting the type of 'stypy_return_type' (line 2003)
            stypy_return_type_105034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2003, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_105034)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '__call__'
            return stypy_return_type_105034


        @norecursion
        def __reduce__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '__reduce__'
            module_type_store = module_type_store.open_function_context('__reduce__', 2028, 8, False)
            # Assigning a type to the variable 'self' (line 2029)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2029, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            _Base.__reduce__.__dict__.__setitem__('stypy_localization', localization)
            _Base.__reduce__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            _Base.__reduce__.__dict__.__setitem__('stypy_type_store', module_type_store)
            _Base.__reduce__.__dict__.__setitem__('stypy_function_name', '_Base.__reduce__')
            _Base.__reduce__.__dict__.__setitem__('stypy_param_names_list', [])
            _Base.__reduce__.__dict__.__setitem__('stypy_varargs_param_name', None)
            _Base.__reduce__.__dict__.__setitem__('stypy_kwargs_param_name', None)
            _Base.__reduce__.__dict__.__setitem__('stypy_call_defaults', defaults)
            _Base.__reduce__.__dict__.__setitem__('stypy_call_varargs', varargs)
            _Base.__reduce__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            _Base.__reduce__.__dict__.__setitem__('stypy_declared_arg_number', 1)
            arguments = process_argument_values(localization, type_of_self, module_type_store, '_Base.__reduce__', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, '__reduce__', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__reduce__(...)' code ##################

            stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2031, 12))
            
            # 'import matplotlib.cbook' statement (line 2031)
            update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
            import_105035 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2031, 12), 'matplotlib.cbook')

            if (type(import_105035) is not StypyTypeError):

                if (import_105035 != 'pyd_module'):
                    __import__(import_105035)
                    sys_modules_105036 = sys.modules[import_105035]
                    import_module(stypy.reporting.localization.Localization(__file__, 2031, 12), 'cbook', sys_modules_105036.module_type_store, module_type_store)
                else:
                    import matplotlib.cbook as cbook

                    import_module(stypy.reporting.localization.Localization(__file__, 2031, 12), 'cbook', matplotlib.cbook, module_type_store)

            else:
                # Assigning a type to the variable 'matplotlib.cbook' (line 2031)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2031, 12), 'matplotlib.cbook', import_105035)

            remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
            
            
            # Obtaining an instance of the builtin type 'tuple' (line 2032)
            tuple_105037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2032, 20), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2032)
            # Adding element type (line 2032)
            
            # Call to _NestedClassGetter(...): (line 2032)
            # Processing the call keyword arguments (line 2032)
            kwargs_105040 = {}
            # Getting the type of 'cbook' (line 2032)
            cbook_105038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2032, 20), 'cbook', False)
            # Obtaining the member '_NestedClassGetter' of a type (line 2032)
            _NestedClassGetter_105039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2032, 20), cbook_105038, '_NestedClassGetter')
            # Calling _NestedClassGetter(args, kwargs) (line 2032)
            _NestedClassGetter_call_result_105041 = invoke(stypy.reporting.localization.Localization(__file__, 2032, 20), _NestedClassGetter_105039, *[], **kwargs_105040)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2032, 20), tuple_105037, _NestedClassGetter_call_result_105041)
            # Adding element type (line 2032)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2033)
            tuple_105042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2033, 21), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2033)
            # Adding element type (line 2033)
            # Getting the type of 'BoxStyle' (line 2033)
            BoxStyle_105043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2033, 21), 'BoxStyle')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2033, 21), tuple_105042, BoxStyle_105043)
            # Adding element type (line 2033)
            # Getting the type of 'self' (line 2033)
            self_105044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2033, 31), 'self')
            # Obtaining the member '__class__' of a type (line 2033)
            class___105045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2033, 31), self_105044, '__class__')
            # Obtaining the member '__name__' of a type (line 2033)
            name___105046 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2033, 31), class___105045, '__name__')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2033, 21), tuple_105042, name___105046)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2032, 20), tuple_105037, tuple_105042)
            # Adding element type (line 2032)
            # Getting the type of 'self' (line 2034)
            self_105047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2034, 20), 'self')
            # Obtaining the member '__dict__' of a type (line 2034)
            dict___105048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2034, 20), self_105047, '__dict__')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2032, 20), tuple_105037, dict___105048)
            
            # Assigning a type to the variable 'stypy_return_type' (line 2032)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2032, 12), 'stypy_return_type', tuple_105037)
            
            # ################# End of '__reduce__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function '__reduce__' in the type store
            # Getting the type of 'stypy_return_type' (line 2028)
            stypy_return_type_105049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2028, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_105049)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '__reduce__'
            return stypy_return_type_105049

    
    # Assigning a type to the variable '_Base' (line 1973)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1973, 4), '_Base', _Base)
    # Declaration of the 'Square' class
    # Getting the type of '_Base' (line 2037)
    _Base_105050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2037, 17), '_Base')

    class Square(_Base_105050, ):
        unicode_105051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2040, (-1)), 'unicode', u'\n        A simple square box.\n        ')

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            float_105052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2042, 31), 'float')
            defaults = [float_105052]
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 2042, 8, False)
            # Assigning a type to the variable 'self' (line 2043)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2043, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Square.__init__', ['pad'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, ['pad'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            unicode_105053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2046, (-1)), 'unicode', u'\n             *pad*\n                amount of padding\n            ')
            
            # Assigning a Name to a Attribute (line 2048):
            
            # Assigning a Name to a Attribute (line 2048):
            
            # Assigning a Name to a Attribute (line 2048):
            # Getting the type of 'pad' (line 2048)
            pad_105054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2048, 23), 'pad')
            # Getting the type of 'self' (line 2048)
            self_105055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2048, 12), 'self')
            # Setting the type of the member 'pad' of a type (line 2048)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2048, 12), self_105055, 'pad', pad_105054)
            
            # Call to __init__(...): (line 2049)
            # Processing the call keyword arguments (line 2049)
            kwargs_105063 = {}
            
            # Call to super(...): (line 2049)
            # Processing the call arguments (line 2049)
            # Getting the type of 'BoxStyle' (line 2049)
            BoxStyle_105057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2049, 18), 'BoxStyle', False)
            # Obtaining the member 'Square' of a type (line 2049)
            Square_105058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2049, 18), BoxStyle_105057, 'Square')
            # Getting the type of 'self' (line 2049)
            self_105059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2049, 35), 'self', False)
            # Processing the call keyword arguments (line 2049)
            kwargs_105060 = {}
            # Getting the type of 'super' (line 2049)
            super_105056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2049, 12), 'super', False)
            # Calling super(args, kwargs) (line 2049)
            super_call_result_105061 = invoke(stypy.reporting.localization.Localization(__file__, 2049, 12), super_105056, *[Square_105058, self_105059], **kwargs_105060)
            
            # Obtaining the member '__init__' of a type (line 2049)
            init___105062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2049, 12), super_call_result_105061, '__init__')
            # Calling __init__(args, kwargs) (line 2049)
            init___call_result_105064 = invoke(stypy.reporting.localization.Localization(__file__, 2049, 12), init___105062, *[], **kwargs_105063)
            
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()


        @norecursion
        def transmute(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'transmute'
            module_type_store = module_type_store.open_function_context('transmute', 2051, 8, False)
            # Assigning a type to the variable 'self' (line 2052)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2052, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            Square.transmute.__dict__.__setitem__('stypy_localization', localization)
            Square.transmute.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            Square.transmute.__dict__.__setitem__('stypy_type_store', module_type_store)
            Square.transmute.__dict__.__setitem__('stypy_function_name', 'Square.transmute')
            Square.transmute.__dict__.__setitem__('stypy_param_names_list', ['x0', 'y0', 'width', 'height', 'mutation_size'])
            Square.transmute.__dict__.__setitem__('stypy_varargs_param_name', None)
            Square.transmute.__dict__.__setitem__('stypy_kwargs_param_name', None)
            Square.transmute.__dict__.__setitem__('stypy_call_defaults', defaults)
            Square.transmute.__dict__.__setitem__('stypy_call_varargs', varargs)
            Square.transmute.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            Square.transmute.__dict__.__setitem__('stypy_declared_arg_number', 6)
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Square.transmute', ['x0', 'y0', 'width', 'height', 'mutation_size'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'transmute', localization, ['x0', 'y0', 'width', 'height', 'mutation_size'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'transmute(...)' code ##################

            
            # Assigning a BinOp to a Name (line 2052):
            
            # Assigning a BinOp to a Name (line 2052):
            
            # Assigning a BinOp to a Name (line 2052):
            # Getting the type of 'mutation_size' (line 2052)
            mutation_size_105065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2052, 18), 'mutation_size')
            # Getting the type of 'self' (line 2052)
            self_105066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2052, 34), 'self')
            # Obtaining the member 'pad' of a type (line 2052)
            pad_105067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2052, 34), self_105066, 'pad')
            # Applying the binary operator '*' (line 2052)
            result_mul_105068 = python_operator(stypy.reporting.localization.Localization(__file__, 2052, 18), '*', mutation_size_105065, pad_105067)
            
            # Assigning a type to the variable 'pad' (line 2052)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2052, 12), 'pad', result_mul_105068)
            
            # Assigning a Tuple to a Tuple (line 2055):
            
            # Assigning a BinOp to a Name (line 2055):
            
            # Assigning a BinOp to a Name (line 2055):
            # Getting the type of 'width' (line 2055)
            width_105069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 28), 'width')
            int_105070 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2055, 36), 'int')
            # Getting the type of 'pad' (line 2055)
            pad_105071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 38), 'pad')
            # Applying the binary operator '*' (line 2055)
            result_mul_105072 = python_operator(stypy.reporting.localization.Localization(__file__, 2055, 36), '*', int_105070, pad_105071)
            
            # Applying the binary operator '+' (line 2055)
            result_add_105073 = python_operator(stypy.reporting.localization.Localization(__file__, 2055, 28), '+', width_105069, result_mul_105072)
            
            # Assigning a type to the variable 'tuple_assignment_100450' (line 2055)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2055, 12), 'tuple_assignment_100450', result_add_105073)
            
            # Assigning a BinOp to a Name (line 2055):
            
            # Assigning a BinOp to a Name (line 2055):
            # Getting the type of 'height' (line 2055)
            height_105074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 43), 'height')
            int_105075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2055, 52), 'int')
            # Getting the type of 'pad' (line 2055)
            pad_105076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 54), 'pad')
            # Applying the binary operator '*' (line 2055)
            result_mul_105077 = python_operator(stypy.reporting.localization.Localization(__file__, 2055, 52), '*', int_105075, pad_105076)
            
            # Applying the binary operator '+' (line 2055)
            result_add_105078 = python_operator(stypy.reporting.localization.Localization(__file__, 2055, 43), '+', height_105074, result_mul_105077)
            
            # Assigning a type to the variable 'tuple_assignment_100451' (line 2055)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2055, 12), 'tuple_assignment_100451', result_add_105078)
            
            # Assigning a Name to a Name (line 2055):
            
            # Assigning a Name to a Name (line 2055):
            # Getting the type of 'tuple_assignment_100450' (line 2055)
            tuple_assignment_100450_105079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 12), 'tuple_assignment_100450')
            # Assigning a type to the variable 'width' (line 2055)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2055, 12), 'width', tuple_assignment_100450_105079)
            
            # Assigning a Name to a Name (line 2055):
            
            # Assigning a Name to a Name (line 2055):
            # Getting the type of 'tuple_assignment_100451' (line 2055)
            tuple_assignment_100451_105080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 12), 'tuple_assignment_100451')
            # Assigning a type to the variable 'height' (line 2055)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2055, 19), 'height', tuple_assignment_100451_105080)
            
            # Assigning a Tuple to a Tuple (line 2058):
            
            # Assigning a BinOp to a Name (line 2058):
            
            # Assigning a BinOp to a Name (line 2058):
            # Getting the type of 'x0' (line 2058)
            x0_105081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2058, 21), 'x0')
            # Getting the type of 'pad' (line 2058)
            pad_105082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2058, 26), 'pad')
            # Applying the binary operator '-' (line 2058)
            result_sub_105083 = python_operator(stypy.reporting.localization.Localization(__file__, 2058, 21), '-', x0_105081, pad_105082)
            
            # Assigning a type to the variable 'tuple_assignment_100452' (line 2058)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2058, 12), 'tuple_assignment_100452', result_sub_105083)
            
            # Assigning a BinOp to a Name (line 2058):
            
            # Assigning a BinOp to a Name (line 2058):
            # Getting the type of 'y0' (line 2058)
            y0_105084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2058, 31), 'y0')
            # Getting the type of 'pad' (line 2058)
            pad_105085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2058, 36), 'pad')
            # Applying the binary operator '-' (line 2058)
            result_sub_105086 = python_operator(stypy.reporting.localization.Localization(__file__, 2058, 31), '-', y0_105084, pad_105085)
            
            # Assigning a type to the variable 'tuple_assignment_100453' (line 2058)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2058, 12), 'tuple_assignment_100453', result_sub_105086)
            
            # Assigning a Name to a Name (line 2058):
            
            # Assigning a Name to a Name (line 2058):
            # Getting the type of 'tuple_assignment_100452' (line 2058)
            tuple_assignment_100452_105087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2058, 12), 'tuple_assignment_100452')
            # Assigning a type to the variable 'x0' (line 2058)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2058, 12), 'x0', tuple_assignment_100452_105087)
            
            # Assigning a Name to a Name (line 2058):
            
            # Assigning a Name to a Name (line 2058):
            # Getting the type of 'tuple_assignment_100453' (line 2058)
            tuple_assignment_100453_105088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2058, 12), 'tuple_assignment_100453')
            # Assigning a type to the variable 'y0' (line 2058)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2058, 16), 'y0', tuple_assignment_100453_105088)
            
            # Assigning a Tuple to a Tuple (line 2059):
            
            # Assigning a BinOp to a Name (line 2059):
            
            # Assigning a BinOp to a Name (line 2059):
            # Getting the type of 'x0' (line 2059)
            x0_105089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2059, 21), 'x0')
            # Getting the type of 'width' (line 2059)
            width_105090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2059, 26), 'width')
            # Applying the binary operator '+' (line 2059)
            result_add_105091 = python_operator(stypy.reporting.localization.Localization(__file__, 2059, 21), '+', x0_105089, width_105090)
            
            # Assigning a type to the variable 'tuple_assignment_100454' (line 2059)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2059, 12), 'tuple_assignment_100454', result_add_105091)
            
            # Assigning a BinOp to a Name (line 2059):
            
            # Assigning a BinOp to a Name (line 2059):
            # Getting the type of 'y0' (line 2059)
            y0_105092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2059, 33), 'y0')
            # Getting the type of 'height' (line 2059)
            height_105093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2059, 38), 'height')
            # Applying the binary operator '+' (line 2059)
            result_add_105094 = python_operator(stypy.reporting.localization.Localization(__file__, 2059, 33), '+', y0_105092, height_105093)
            
            # Assigning a type to the variable 'tuple_assignment_100455' (line 2059)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2059, 12), 'tuple_assignment_100455', result_add_105094)
            
            # Assigning a Name to a Name (line 2059):
            
            # Assigning a Name to a Name (line 2059):
            # Getting the type of 'tuple_assignment_100454' (line 2059)
            tuple_assignment_100454_105095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2059, 12), 'tuple_assignment_100454')
            # Assigning a type to the variable 'x1' (line 2059)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2059, 12), 'x1', tuple_assignment_100454_105095)
            
            # Assigning a Name to a Name (line 2059):
            
            # Assigning a Name to a Name (line 2059):
            # Getting the type of 'tuple_assignment_100455' (line 2059)
            tuple_assignment_100455_105096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2059, 12), 'tuple_assignment_100455')
            # Assigning a type to the variable 'y1' (line 2059)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2059, 16), 'y1', tuple_assignment_100455_105096)
            
            # Assigning a List to a Name (line 2061):
            
            # Assigning a List to a Name (line 2061):
            
            # Assigning a List to a Name (line 2061):
            
            # Obtaining an instance of the builtin type 'list' (line 2061)
            list_105097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2061, 23), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2061)
            # Adding element type (line 2061)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2061)
            tuple_105098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2061, 25), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2061)
            # Adding element type (line 2061)
            # Getting the type of 'x0' (line 2061)
            x0_105099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 25), 'x0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2061, 25), tuple_105098, x0_105099)
            # Adding element type (line 2061)
            # Getting the type of 'y0' (line 2061)
            y0_105100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 29), 'y0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2061, 25), tuple_105098, y0_105100)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2061, 23), list_105097, tuple_105098)
            # Adding element type (line 2061)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2061)
            tuple_105101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2061, 35), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2061)
            # Adding element type (line 2061)
            # Getting the type of 'x1' (line 2061)
            x1_105102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 35), 'x1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2061, 35), tuple_105101, x1_105102)
            # Adding element type (line 2061)
            # Getting the type of 'y0' (line 2061)
            y0_105103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 39), 'y0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2061, 35), tuple_105101, y0_105103)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2061, 23), list_105097, tuple_105101)
            # Adding element type (line 2061)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2061)
            tuple_105104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2061, 45), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2061)
            # Adding element type (line 2061)
            # Getting the type of 'x1' (line 2061)
            x1_105105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 45), 'x1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2061, 45), tuple_105104, x1_105105)
            # Adding element type (line 2061)
            # Getting the type of 'y1' (line 2061)
            y1_105106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 49), 'y1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2061, 45), tuple_105104, y1_105106)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2061, 23), list_105097, tuple_105104)
            # Adding element type (line 2061)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2061)
            tuple_105107 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2061, 55), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2061)
            # Adding element type (line 2061)
            # Getting the type of 'x0' (line 2061)
            x0_105108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 55), 'x0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2061, 55), tuple_105107, x0_105108)
            # Adding element type (line 2061)
            # Getting the type of 'y1' (line 2061)
            y1_105109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 59), 'y1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2061, 55), tuple_105107, y1_105109)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2061, 23), list_105097, tuple_105107)
            # Adding element type (line 2061)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2061)
            tuple_105110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2061, 65), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2061)
            # Adding element type (line 2061)
            # Getting the type of 'x0' (line 2061)
            x0_105111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 65), 'x0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2061, 65), tuple_105110, x0_105111)
            # Adding element type (line 2061)
            # Getting the type of 'y0' (line 2061)
            y0_105112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 69), 'y0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2061, 65), tuple_105110, y0_105112)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2061, 23), list_105097, tuple_105110)
            
            # Assigning a type to the variable 'vertices' (line 2061)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2061, 12), 'vertices', list_105097)
            
            # Assigning a BinOp to a Name (line 2062):
            
            # Assigning a BinOp to a Name (line 2062):
            
            # Assigning a BinOp to a Name (line 2062):
            
            # Obtaining an instance of the builtin type 'list' (line 2062)
            list_105113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2062, 20), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2062)
            # Adding element type (line 2062)
            # Getting the type of 'Path' (line 2062)
            Path_105114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2062, 21), 'Path')
            # Obtaining the member 'MOVETO' of a type (line 2062)
            MOVETO_105115 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2062, 21), Path_105114, 'MOVETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2062, 20), list_105113, MOVETO_105115)
            
            
            # Obtaining an instance of the builtin type 'list' (line 2062)
            list_105116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2062, 36), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2062)
            # Adding element type (line 2062)
            # Getting the type of 'Path' (line 2062)
            Path_105117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2062, 37), 'Path')
            # Obtaining the member 'LINETO' of a type (line 2062)
            LINETO_105118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2062, 37), Path_105117, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2062, 36), list_105116, LINETO_105118)
            
            int_105119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2062, 52), 'int')
            # Applying the binary operator '*' (line 2062)
            result_mul_105120 = python_operator(stypy.reporting.localization.Localization(__file__, 2062, 36), '*', list_105116, int_105119)
            
            # Applying the binary operator '+' (line 2062)
            result_add_105121 = python_operator(stypy.reporting.localization.Localization(__file__, 2062, 20), '+', list_105113, result_mul_105120)
            
            
            # Obtaining an instance of the builtin type 'list' (line 2062)
            list_105122 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2062, 56), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2062)
            # Adding element type (line 2062)
            # Getting the type of 'Path' (line 2062)
            Path_105123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2062, 57), 'Path')
            # Obtaining the member 'CLOSEPOLY' of a type (line 2062)
            CLOSEPOLY_105124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2062, 57), Path_105123, 'CLOSEPOLY')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2062, 56), list_105122, CLOSEPOLY_105124)
            
            # Applying the binary operator '+' (line 2062)
            result_add_105125 = python_operator(stypy.reporting.localization.Localization(__file__, 2062, 54), '+', result_add_105121, list_105122)
            
            # Assigning a type to the variable 'codes' (line 2062)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2062, 12), 'codes', result_add_105125)
            
            # Call to Path(...): (line 2063)
            # Processing the call arguments (line 2063)
            # Getting the type of 'vertices' (line 2063)
            vertices_105127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2063, 24), 'vertices', False)
            # Getting the type of 'codes' (line 2063)
            codes_105128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2063, 34), 'codes', False)
            # Processing the call keyword arguments (line 2063)
            kwargs_105129 = {}
            # Getting the type of 'Path' (line 2063)
            Path_105126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2063, 19), 'Path', False)
            # Calling Path(args, kwargs) (line 2063)
            Path_call_result_105130 = invoke(stypy.reporting.localization.Localization(__file__, 2063, 19), Path_105126, *[vertices_105127, codes_105128], **kwargs_105129)
            
            # Assigning a type to the variable 'stypy_return_type' (line 2063)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2063, 12), 'stypy_return_type', Path_call_result_105130)
            
            # ################# End of 'transmute(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'transmute' in the type store
            # Getting the type of 'stypy_return_type' (line 2051)
            stypy_return_type_105131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2051, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_105131)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'transmute'
            return stypy_return_type_105131

    
    # Assigning a type to the variable 'Square' (line 2037)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2037, 4), 'Square', Square)
    
    # Assigning a Name to a Subscript (line 2065):
    
    # Assigning a Name to a Subscript (line 2065):
    # Declaration of the 'Circle' class
    # Getting the type of '_Base' (line 2067)
    _Base_105132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2067, 17), '_Base')

    class Circle(_Base_105132, ):
        unicode_105133 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2068, 8), 'unicode', u'A simple circle box.')

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            float_105134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2069, 31), 'float')
            defaults = [float_105134]
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 2069, 8, False)
            # Assigning a type to the variable 'self' (line 2070)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2070, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Circle.__init__', ['pad'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, ['pad'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            unicode_105135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2075, (-1)), 'unicode', u'\n            Parameters\n            ----------\n            pad : float\n                The amount of padding around the original box.\n            ')
            
            # Assigning a Name to a Attribute (line 2076):
            
            # Assigning a Name to a Attribute (line 2076):
            
            # Assigning a Name to a Attribute (line 2076):
            # Getting the type of 'pad' (line 2076)
            pad_105136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2076, 23), 'pad')
            # Getting the type of 'self' (line 2076)
            self_105137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2076, 12), 'self')
            # Setting the type of the member 'pad' of a type (line 2076)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2076, 12), self_105137, 'pad', pad_105136)
            
            # Call to __init__(...): (line 2077)
            # Processing the call keyword arguments (line 2077)
            kwargs_105145 = {}
            
            # Call to super(...): (line 2077)
            # Processing the call arguments (line 2077)
            # Getting the type of 'BoxStyle' (line 2077)
            BoxStyle_105139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2077, 18), 'BoxStyle', False)
            # Obtaining the member 'Circle' of a type (line 2077)
            Circle_105140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2077, 18), BoxStyle_105139, 'Circle')
            # Getting the type of 'self' (line 2077)
            self_105141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2077, 35), 'self', False)
            # Processing the call keyword arguments (line 2077)
            kwargs_105142 = {}
            # Getting the type of 'super' (line 2077)
            super_105138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2077, 12), 'super', False)
            # Calling super(args, kwargs) (line 2077)
            super_call_result_105143 = invoke(stypy.reporting.localization.Localization(__file__, 2077, 12), super_105138, *[Circle_105140, self_105141], **kwargs_105142)
            
            # Obtaining the member '__init__' of a type (line 2077)
            init___105144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2077, 12), super_call_result_105143, '__init__')
            # Calling __init__(args, kwargs) (line 2077)
            init___call_result_105146 = invoke(stypy.reporting.localization.Localization(__file__, 2077, 12), init___105144, *[], **kwargs_105145)
            
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()


        @norecursion
        def transmute(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'transmute'
            module_type_store = module_type_store.open_function_context('transmute', 2079, 8, False)
            # Assigning a type to the variable 'self' (line 2080)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2080, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            Circle.transmute.__dict__.__setitem__('stypy_localization', localization)
            Circle.transmute.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            Circle.transmute.__dict__.__setitem__('stypy_type_store', module_type_store)
            Circle.transmute.__dict__.__setitem__('stypy_function_name', 'Circle.transmute')
            Circle.transmute.__dict__.__setitem__('stypy_param_names_list', ['x0', 'y0', 'width', 'height', 'mutation_size'])
            Circle.transmute.__dict__.__setitem__('stypy_varargs_param_name', None)
            Circle.transmute.__dict__.__setitem__('stypy_kwargs_param_name', None)
            Circle.transmute.__dict__.__setitem__('stypy_call_defaults', defaults)
            Circle.transmute.__dict__.__setitem__('stypy_call_varargs', varargs)
            Circle.transmute.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            Circle.transmute.__dict__.__setitem__('stypy_declared_arg_number', 6)
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Circle.transmute', ['x0', 'y0', 'width', 'height', 'mutation_size'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'transmute', localization, ['x0', 'y0', 'width', 'height', 'mutation_size'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'transmute(...)' code ##################

            
            # Assigning a BinOp to a Name (line 2080):
            
            # Assigning a BinOp to a Name (line 2080):
            
            # Assigning a BinOp to a Name (line 2080):
            # Getting the type of 'mutation_size' (line 2080)
            mutation_size_105147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2080, 18), 'mutation_size')
            # Getting the type of 'self' (line 2080)
            self_105148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2080, 34), 'self')
            # Obtaining the member 'pad' of a type (line 2080)
            pad_105149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2080, 34), self_105148, 'pad')
            # Applying the binary operator '*' (line 2080)
            result_mul_105150 = python_operator(stypy.reporting.localization.Localization(__file__, 2080, 18), '*', mutation_size_105147, pad_105149)
            
            # Assigning a type to the variable 'pad' (line 2080)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2080, 12), 'pad', result_mul_105150)
            
            # Assigning a Tuple to a Tuple (line 2081):
            
            # Assigning a BinOp to a Name (line 2081):
            
            # Assigning a BinOp to a Name (line 2081):
            # Getting the type of 'width' (line 2081)
            width_105151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2081, 28), 'width')
            int_105152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2081, 36), 'int')
            # Getting the type of 'pad' (line 2081)
            pad_105153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2081, 40), 'pad')
            # Applying the binary operator '*' (line 2081)
            result_mul_105154 = python_operator(stypy.reporting.localization.Localization(__file__, 2081, 36), '*', int_105152, pad_105153)
            
            # Applying the binary operator '+' (line 2081)
            result_add_105155 = python_operator(stypy.reporting.localization.Localization(__file__, 2081, 28), '+', width_105151, result_mul_105154)
            
            # Assigning a type to the variable 'tuple_assignment_100456' (line 2081)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2081, 12), 'tuple_assignment_100456', result_add_105155)
            
            # Assigning a BinOp to a Name (line 2081):
            
            # Assigning a BinOp to a Name (line 2081):
            # Getting the type of 'height' (line 2081)
            height_105156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2081, 45), 'height')
            int_105157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2081, 54), 'int')
            # Getting the type of 'pad' (line 2081)
            pad_105158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2081, 58), 'pad')
            # Applying the binary operator '*' (line 2081)
            result_mul_105159 = python_operator(stypy.reporting.localization.Localization(__file__, 2081, 54), '*', int_105157, pad_105158)
            
            # Applying the binary operator '+' (line 2081)
            result_add_105160 = python_operator(stypy.reporting.localization.Localization(__file__, 2081, 45), '+', height_105156, result_mul_105159)
            
            # Assigning a type to the variable 'tuple_assignment_100457' (line 2081)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2081, 12), 'tuple_assignment_100457', result_add_105160)
            
            # Assigning a Name to a Name (line 2081):
            
            # Assigning a Name to a Name (line 2081):
            # Getting the type of 'tuple_assignment_100456' (line 2081)
            tuple_assignment_100456_105161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2081, 12), 'tuple_assignment_100456')
            # Assigning a type to the variable 'width' (line 2081)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2081, 12), 'width', tuple_assignment_100456_105161)
            
            # Assigning a Name to a Name (line 2081):
            
            # Assigning a Name to a Name (line 2081):
            # Getting the type of 'tuple_assignment_100457' (line 2081)
            tuple_assignment_100457_105162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2081, 12), 'tuple_assignment_100457')
            # Assigning a type to the variable 'height' (line 2081)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2081, 19), 'height', tuple_assignment_100457_105162)
            
            # Assigning a Tuple to a Tuple (line 2084):
            
            # Assigning a BinOp to a Name (line 2084):
            
            # Assigning a BinOp to a Name (line 2084):
            # Getting the type of 'x0' (line 2084)
            x0_105163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 21), 'x0')
            # Getting the type of 'pad' (line 2084)
            pad_105164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 26), 'pad')
            # Applying the binary operator '-' (line 2084)
            result_sub_105165 = python_operator(stypy.reporting.localization.Localization(__file__, 2084, 21), '-', x0_105163, pad_105164)
            
            # Assigning a type to the variable 'tuple_assignment_100458' (line 2084)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2084, 12), 'tuple_assignment_100458', result_sub_105165)
            
            # Assigning a BinOp to a Name (line 2084):
            
            # Assigning a BinOp to a Name (line 2084):
            # Getting the type of 'y0' (line 2084)
            y0_105166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 31), 'y0')
            # Getting the type of 'pad' (line 2084)
            pad_105167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 36), 'pad')
            # Applying the binary operator '-' (line 2084)
            result_sub_105168 = python_operator(stypy.reporting.localization.Localization(__file__, 2084, 31), '-', y0_105166, pad_105167)
            
            # Assigning a type to the variable 'tuple_assignment_100459' (line 2084)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2084, 12), 'tuple_assignment_100459', result_sub_105168)
            
            # Assigning a Name to a Name (line 2084):
            
            # Assigning a Name to a Name (line 2084):
            # Getting the type of 'tuple_assignment_100458' (line 2084)
            tuple_assignment_100458_105169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 12), 'tuple_assignment_100458')
            # Assigning a type to the variable 'x0' (line 2084)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2084, 12), 'x0', tuple_assignment_100458_105169)
            
            # Assigning a Name to a Name (line 2084):
            
            # Assigning a Name to a Name (line 2084):
            # Getting the type of 'tuple_assignment_100459' (line 2084)
            tuple_assignment_100459_105170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 12), 'tuple_assignment_100459')
            # Assigning a type to the variable 'y0' (line 2084)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2084, 16), 'y0', tuple_assignment_100459_105170)
            
            # Call to circle(...): (line 2085)
            # Processing the call arguments (line 2085)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2085)
            tuple_105173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2085, 32), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2085)
            # Adding element type (line 2085)
            # Getting the type of 'x0' (line 2085)
            x0_105174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2085, 32), 'x0', False)
            # Getting the type of 'width' (line 2085)
            width_105175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2085, 37), 'width', False)
            int_105176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2085, 45), 'int')
            # Applying the binary operator 'div' (line 2085)
            result_div_105177 = python_operator(stypy.reporting.localization.Localization(__file__, 2085, 37), 'div', width_105175, int_105176)
            
            # Applying the binary operator '+' (line 2085)
            result_add_105178 = python_operator(stypy.reporting.localization.Localization(__file__, 2085, 32), '+', x0_105174, result_div_105177)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2085, 32), tuple_105173, result_add_105178)
            # Adding element type (line 2085)
            # Getting the type of 'y0' (line 2085)
            y0_105179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2085, 48), 'y0', False)
            # Getting the type of 'height' (line 2085)
            height_105180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2085, 53), 'height', False)
            int_105181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2085, 62), 'int')
            # Applying the binary operator 'div' (line 2085)
            result_div_105182 = python_operator(stypy.reporting.localization.Localization(__file__, 2085, 53), 'div', height_105180, int_105181)
            
            # Applying the binary operator '+' (line 2085)
            result_add_105183 = python_operator(stypy.reporting.localization.Localization(__file__, 2085, 48), '+', y0_105179, result_div_105182)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2085, 32), tuple_105173, result_add_105183)
            
            
            # Call to max(...): (line 2086)
            # Processing the call arguments (line 2086)
            # Getting the type of 'width' (line 2086)
            width_105185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2086, 35), 'width', False)
            # Getting the type of 'height' (line 2086)
            height_105186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2086, 42), 'height', False)
            # Processing the call keyword arguments (line 2086)
            kwargs_105187 = {}
            # Getting the type of 'max' (line 2086)
            max_105184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2086, 31), 'max', False)
            # Calling max(args, kwargs) (line 2086)
            max_call_result_105188 = invoke(stypy.reporting.localization.Localization(__file__, 2086, 31), max_105184, *[width_105185, height_105186], **kwargs_105187)
            
            int_105189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2086, 52), 'int')
            # Applying the binary operator 'div' (line 2086)
            result_div_105190 = python_operator(stypy.reporting.localization.Localization(__file__, 2086, 31), 'div', max_call_result_105188, int_105189)
            
            # Processing the call keyword arguments (line 2085)
            kwargs_105191 = {}
            # Getting the type of 'Path' (line 2085)
            Path_105171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2085, 19), 'Path', False)
            # Obtaining the member 'circle' of a type (line 2085)
            circle_105172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2085, 19), Path_105171, 'circle')
            # Calling circle(args, kwargs) (line 2085)
            circle_call_result_105192 = invoke(stypy.reporting.localization.Localization(__file__, 2085, 19), circle_105172, *[tuple_105173, result_div_105190], **kwargs_105191)
            
            # Assigning a type to the variable 'stypy_return_type' (line 2085)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2085, 12), 'stypy_return_type', circle_call_result_105192)
            
            # ################# End of 'transmute(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'transmute' in the type store
            # Getting the type of 'stypy_return_type' (line 2079)
            stypy_return_type_105193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2079, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_105193)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'transmute'
            return stypy_return_type_105193

    
    # Assigning a type to the variable 'Circle' (line 2067)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2067, 4), 'Circle', Circle)
    
    # Assigning a Name to a Subscript (line 2088):
    
    # Assigning a Name to a Subscript (line 2088):
    # Declaration of the 'LArrow' class
    # Getting the type of '_Base' (line 2090)
    _Base_105194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2090, 17), '_Base')

    class LArrow(_Base_105194, ):
        unicode_105195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2093, (-1)), 'unicode', u'\n        (left) Arrow Box\n        ')

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            float_105196 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2094, 31), 'float')
            defaults = [float_105196]
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 2094, 8, False)
            # Assigning a type to the variable 'self' (line 2095)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2095, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'LArrow.__init__', ['pad'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, ['pad'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            
            # Assigning a Name to a Attribute (line 2095):
            
            # Assigning a Name to a Attribute (line 2095):
            
            # Assigning a Name to a Attribute (line 2095):
            # Getting the type of 'pad' (line 2095)
            pad_105197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 23), 'pad')
            # Getting the type of 'self' (line 2095)
            self_105198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 12), 'self')
            # Setting the type of the member 'pad' of a type (line 2095)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2095, 12), self_105198, 'pad', pad_105197)
            
            # Call to __init__(...): (line 2096)
            # Processing the call keyword arguments (line 2096)
            kwargs_105206 = {}
            
            # Call to super(...): (line 2096)
            # Processing the call arguments (line 2096)
            # Getting the type of 'BoxStyle' (line 2096)
            BoxStyle_105200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2096, 18), 'BoxStyle', False)
            # Obtaining the member 'LArrow' of a type (line 2096)
            LArrow_105201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2096, 18), BoxStyle_105200, 'LArrow')
            # Getting the type of 'self' (line 2096)
            self_105202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2096, 35), 'self', False)
            # Processing the call keyword arguments (line 2096)
            kwargs_105203 = {}
            # Getting the type of 'super' (line 2096)
            super_105199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2096, 12), 'super', False)
            # Calling super(args, kwargs) (line 2096)
            super_call_result_105204 = invoke(stypy.reporting.localization.Localization(__file__, 2096, 12), super_105199, *[LArrow_105201, self_105202], **kwargs_105203)
            
            # Obtaining the member '__init__' of a type (line 2096)
            init___105205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2096, 12), super_call_result_105204, '__init__')
            # Calling __init__(args, kwargs) (line 2096)
            init___call_result_105207 = invoke(stypy.reporting.localization.Localization(__file__, 2096, 12), init___105205, *[], **kwargs_105206)
            
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()


        @norecursion
        def transmute(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'transmute'
            module_type_store = module_type_store.open_function_context('transmute', 2098, 8, False)
            # Assigning a type to the variable 'self' (line 2099)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2099, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            LArrow.transmute.__dict__.__setitem__('stypy_localization', localization)
            LArrow.transmute.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            LArrow.transmute.__dict__.__setitem__('stypy_type_store', module_type_store)
            LArrow.transmute.__dict__.__setitem__('stypy_function_name', 'LArrow.transmute')
            LArrow.transmute.__dict__.__setitem__('stypy_param_names_list', ['x0', 'y0', 'width', 'height', 'mutation_size'])
            LArrow.transmute.__dict__.__setitem__('stypy_varargs_param_name', None)
            LArrow.transmute.__dict__.__setitem__('stypy_kwargs_param_name', None)
            LArrow.transmute.__dict__.__setitem__('stypy_call_defaults', defaults)
            LArrow.transmute.__dict__.__setitem__('stypy_call_varargs', varargs)
            LArrow.transmute.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            LArrow.transmute.__dict__.__setitem__('stypy_declared_arg_number', 6)
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'LArrow.transmute', ['x0', 'y0', 'width', 'height', 'mutation_size'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'transmute', localization, ['x0', 'y0', 'width', 'height', 'mutation_size'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'transmute(...)' code ##################

            
            # Assigning a BinOp to a Name (line 2100):
            
            # Assigning a BinOp to a Name (line 2100):
            
            # Assigning a BinOp to a Name (line 2100):
            # Getting the type of 'mutation_size' (line 2100)
            mutation_size_105208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 18), 'mutation_size')
            # Getting the type of 'self' (line 2100)
            self_105209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 34), 'self')
            # Obtaining the member 'pad' of a type (line 2100)
            pad_105210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2100, 34), self_105209, 'pad')
            # Applying the binary operator '*' (line 2100)
            result_mul_105211 = python_operator(stypy.reporting.localization.Localization(__file__, 2100, 18), '*', mutation_size_105208, pad_105210)
            
            # Assigning a type to the variable 'pad' (line 2100)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2100, 12), 'pad', result_mul_105211)
            
            # Assigning a Tuple to a Tuple (line 2103):
            
            # Assigning a BinOp to a Name (line 2103):
            
            # Assigning a BinOp to a Name (line 2103):
            # Getting the type of 'width' (line 2103)
            width_105212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 28), 'width')
            float_105213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2103, 36), 'float')
            # Getting the type of 'pad' (line 2103)
            pad_105214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 41), 'pad')
            # Applying the binary operator '*' (line 2103)
            result_mul_105215 = python_operator(stypy.reporting.localization.Localization(__file__, 2103, 36), '*', float_105213, pad_105214)
            
            # Applying the binary operator '+' (line 2103)
            result_add_105216 = python_operator(stypy.reporting.localization.Localization(__file__, 2103, 28), '+', width_105212, result_mul_105215)
            
            # Assigning a type to the variable 'tuple_assignment_100460' (line 2103)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2103, 12), 'tuple_assignment_100460', result_add_105216)
            
            # Assigning a BinOp to a Name (line 2103):
            
            # Assigning a BinOp to a Name (line 2103):
            # Getting the type of 'height' (line 2103)
            height_105217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 46), 'height')
            float_105218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2103, 55), 'float')
            # Getting the type of 'pad' (line 2103)
            pad_105219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 60), 'pad')
            # Applying the binary operator '*' (line 2103)
            result_mul_105220 = python_operator(stypy.reporting.localization.Localization(__file__, 2103, 55), '*', float_105218, pad_105219)
            
            # Applying the binary operator '+' (line 2103)
            result_add_105221 = python_operator(stypy.reporting.localization.Localization(__file__, 2103, 46), '+', height_105217, result_mul_105220)
            
            # Assigning a type to the variable 'tuple_assignment_100461' (line 2103)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2103, 12), 'tuple_assignment_100461', result_add_105221)
            
            # Assigning a Name to a Name (line 2103):
            
            # Assigning a Name to a Name (line 2103):
            # Getting the type of 'tuple_assignment_100460' (line 2103)
            tuple_assignment_100460_105222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 12), 'tuple_assignment_100460')
            # Assigning a type to the variable 'width' (line 2103)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2103, 12), 'width', tuple_assignment_100460_105222)
            
            # Assigning a Name to a Name (line 2103):
            
            # Assigning a Name to a Name (line 2103):
            # Getting the type of 'tuple_assignment_100461' (line 2103)
            tuple_assignment_100461_105223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 12), 'tuple_assignment_100461')
            # Assigning a type to the variable 'height' (line 2103)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2103, 19), 'height', tuple_assignment_100461_105223)
            
            # Assigning a Tuple to a Tuple (line 2106):
            
            # Assigning a BinOp to a Name (line 2106):
            
            # Assigning a BinOp to a Name (line 2106):
            # Getting the type of 'x0' (line 2106)
            x0_105224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2106, 21), 'x0')
            # Getting the type of 'pad' (line 2106)
            pad_105225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2106, 26), 'pad')
            # Applying the binary operator '-' (line 2106)
            result_sub_105226 = python_operator(stypy.reporting.localization.Localization(__file__, 2106, 21), '-', x0_105224, pad_105225)
            
            # Assigning a type to the variable 'tuple_assignment_100462' (line 2106)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2106, 12), 'tuple_assignment_100462', result_sub_105226)
            
            # Assigning a BinOp to a Name (line 2106):
            
            # Assigning a BinOp to a Name (line 2106):
            # Getting the type of 'y0' (line 2106)
            y0_105227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2106, 31), 'y0')
            # Getting the type of 'pad' (line 2106)
            pad_105228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2106, 36), 'pad')
            # Applying the binary operator '-' (line 2106)
            result_sub_105229 = python_operator(stypy.reporting.localization.Localization(__file__, 2106, 31), '-', y0_105227, pad_105228)
            
            # Assigning a type to the variable 'tuple_assignment_100463' (line 2106)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2106, 12), 'tuple_assignment_100463', result_sub_105229)
            
            # Assigning a Name to a Name (line 2106):
            
            # Assigning a Name to a Name (line 2106):
            # Getting the type of 'tuple_assignment_100462' (line 2106)
            tuple_assignment_100462_105230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2106, 12), 'tuple_assignment_100462')
            # Assigning a type to the variable 'x0' (line 2106)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2106, 12), 'x0', tuple_assignment_100462_105230)
            
            # Assigning a Name to a Name (line 2106):
            
            # Assigning a Name to a Name (line 2106):
            # Getting the type of 'tuple_assignment_100463' (line 2106)
            tuple_assignment_100463_105231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2106, 12), 'tuple_assignment_100463')
            # Assigning a type to the variable 'y0' (line 2106)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2106, 16), 'y0', tuple_assignment_100463_105231)
            
            # Assigning a Tuple to a Tuple (line 2107):
            
            # Assigning a BinOp to a Name (line 2107):
            
            # Assigning a BinOp to a Name (line 2107):
            # Getting the type of 'x0' (line 2107)
            x0_105232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2107, 21), 'x0')
            # Getting the type of 'width' (line 2107)
            width_105233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2107, 26), 'width')
            # Applying the binary operator '+' (line 2107)
            result_add_105234 = python_operator(stypy.reporting.localization.Localization(__file__, 2107, 21), '+', x0_105232, width_105233)
            
            # Assigning a type to the variable 'tuple_assignment_100464' (line 2107)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2107, 12), 'tuple_assignment_100464', result_add_105234)
            
            # Assigning a BinOp to a Name (line 2107):
            
            # Assigning a BinOp to a Name (line 2107):
            # Getting the type of 'y0' (line 2107)
            y0_105235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2107, 33), 'y0')
            # Getting the type of 'height' (line 2107)
            height_105236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2107, 38), 'height')
            # Applying the binary operator '+' (line 2107)
            result_add_105237 = python_operator(stypy.reporting.localization.Localization(__file__, 2107, 33), '+', y0_105235, height_105236)
            
            # Assigning a type to the variable 'tuple_assignment_100465' (line 2107)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2107, 12), 'tuple_assignment_100465', result_add_105237)
            
            # Assigning a Name to a Name (line 2107):
            
            # Assigning a Name to a Name (line 2107):
            # Getting the type of 'tuple_assignment_100464' (line 2107)
            tuple_assignment_100464_105238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2107, 12), 'tuple_assignment_100464')
            # Assigning a type to the variable 'x1' (line 2107)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2107, 12), 'x1', tuple_assignment_100464_105238)
            
            # Assigning a Name to a Name (line 2107):
            
            # Assigning a Name to a Name (line 2107):
            # Getting the type of 'tuple_assignment_100465' (line 2107)
            tuple_assignment_100465_105239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2107, 12), 'tuple_assignment_100465')
            # Assigning a type to the variable 'y1' (line 2107)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2107, 16), 'y1', tuple_assignment_100465_105239)
            
            # Assigning a BinOp to a Name (line 2109):
            
            # Assigning a BinOp to a Name (line 2109):
            
            # Assigning a BinOp to a Name (line 2109):
            # Getting the type of 'y1' (line 2109)
            y1_105240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 18), 'y1')
            # Getting the type of 'y0' (line 2109)
            y0_105241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 23), 'y0')
            # Applying the binary operator '-' (line 2109)
            result_sub_105242 = python_operator(stypy.reporting.localization.Localization(__file__, 2109, 18), '-', y1_105240, y0_105241)
            
            float_105243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2109, 29), 'float')
            # Applying the binary operator 'div' (line 2109)
            result_div_105244 = python_operator(stypy.reporting.localization.Localization(__file__, 2109, 17), 'div', result_sub_105242, float_105243)
            
            # Assigning a type to the variable 'dx' (line 2109)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2109, 12), 'dx', result_div_105244)
            
            # Assigning a BinOp to a Name (line 2110):
            
            # Assigning a BinOp to a Name (line 2110):
            
            # Assigning a BinOp to a Name (line 2110):
            # Getting the type of 'dx' (line 2110)
            dx_105245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 18), 'dx')
            float_105246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2110, 23), 'float')
            # Applying the binary operator '*' (line 2110)
            result_mul_105247 = python_operator(stypy.reporting.localization.Localization(__file__, 2110, 18), '*', dx_105245, float_105246)
            
            # Assigning a type to the variable 'dxx' (line 2110)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2110, 12), 'dxx', result_mul_105247)
            
            # Assigning a BinOp to a Name (line 2112):
            
            # Assigning a BinOp to a Name (line 2112):
            
            # Assigning a BinOp to a Name (line 2112):
            # Getting the type of 'x0' (line 2112)
            x0_105248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2112, 17), 'x0')
            # Getting the type of 'pad' (line 2112)
            pad_105249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2112, 22), 'pad')
            float_105250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2112, 28), 'float')
            # Applying the binary operator 'div' (line 2112)
            result_div_105251 = python_operator(stypy.reporting.localization.Localization(__file__, 2112, 22), 'div', pad_105249, float_105250)
            
            # Applying the binary operator '+' (line 2112)
            result_add_105252 = python_operator(stypy.reporting.localization.Localization(__file__, 2112, 17), '+', x0_105248, result_div_105251)
            
            # Assigning a type to the variable 'x0' (line 2112)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2112, 12), 'x0', result_add_105252)
            
            # Assigning a List to a Name (line 2114):
            
            # Assigning a List to a Name (line 2114):
            
            # Assigning a List to a Name (line 2114):
            
            # Obtaining an instance of the builtin type 'list' (line 2114)
            list_105253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2114, 17), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2114)
            # Adding element type (line 2114)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2114)
            tuple_105254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2114, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2114)
            # Adding element type (line 2114)
            # Getting the type of 'x0' (line 2114)
            x0_105255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2114, 19), 'x0')
            # Getting the type of 'dxx' (line 2114)
            dxx_105256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2114, 24), 'dxx')
            # Applying the binary operator '+' (line 2114)
            result_add_105257 = python_operator(stypy.reporting.localization.Localization(__file__, 2114, 19), '+', x0_105255, dxx_105256)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2114, 19), tuple_105254, result_add_105257)
            # Adding element type (line 2114)
            # Getting the type of 'y0' (line 2114)
            y0_105258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2114, 29), 'y0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2114, 19), tuple_105254, y0_105258)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2114, 17), list_105253, tuple_105254)
            # Adding element type (line 2114)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2114)
            tuple_105259 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2114, 35), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2114)
            # Adding element type (line 2114)
            # Getting the type of 'x1' (line 2114)
            x1_105260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2114, 35), 'x1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2114, 35), tuple_105259, x1_105260)
            # Adding element type (line 2114)
            # Getting the type of 'y0' (line 2114)
            y0_105261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2114, 39), 'y0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2114, 35), tuple_105259, y0_105261)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2114, 17), list_105253, tuple_105259)
            # Adding element type (line 2114)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2114)
            tuple_105262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2114, 45), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2114)
            # Adding element type (line 2114)
            # Getting the type of 'x1' (line 2114)
            x1_105263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2114, 45), 'x1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2114, 45), tuple_105262, x1_105263)
            # Adding element type (line 2114)
            # Getting the type of 'y1' (line 2114)
            y1_105264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2114, 49), 'y1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2114, 45), tuple_105262, y1_105264)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2114, 17), list_105253, tuple_105262)
            # Adding element type (line 2114)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2114)
            tuple_105265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2114, 55), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2114)
            # Adding element type (line 2114)
            # Getting the type of 'x0' (line 2114)
            x0_105266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2114, 55), 'x0')
            # Getting the type of 'dxx' (line 2114)
            dxx_105267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2114, 60), 'dxx')
            # Applying the binary operator '+' (line 2114)
            result_add_105268 = python_operator(stypy.reporting.localization.Localization(__file__, 2114, 55), '+', x0_105266, dxx_105267)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2114, 55), tuple_105265, result_add_105268)
            # Adding element type (line 2114)
            # Getting the type of 'y1' (line 2114)
            y1_105269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2114, 65), 'y1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2114, 55), tuple_105265, y1_105269)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2114, 17), list_105253, tuple_105265)
            # Adding element type (line 2114)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2115)
            tuple_105270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2115, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2115)
            # Adding element type (line 2115)
            # Getting the type of 'x0' (line 2115)
            x0_105271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2115, 19), 'x0')
            # Getting the type of 'dxx' (line 2115)
            dxx_105272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2115, 24), 'dxx')
            # Applying the binary operator '+' (line 2115)
            result_add_105273 = python_operator(stypy.reporting.localization.Localization(__file__, 2115, 19), '+', x0_105271, dxx_105272)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2115, 19), tuple_105270, result_add_105273)
            # Adding element type (line 2115)
            # Getting the type of 'y1' (line 2115)
            y1_105274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2115, 29), 'y1')
            # Getting the type of 'dxx' (line 2115)
            dxx_105275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2115, 34), 'dxx')
            # Applying the binary operator '+' (line 2115)
            result_add_105276 = python_operator(stypy.reporting.localization.Localization(__file__, 2115, 29), '+', y1_105274, dxx_105275)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2115, 19), tuple_105270, result_add_105276)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2114, 17), list_105253, tuple_105270)
            # Adding element type (line 2114)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2115)
            tuple_105277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2115, 41), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2115)
            # Adding element type (line 2115)
            # Getting the type of 'x0' (line 2115)
            x0_105278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2115, 41), 'x0')
            # Getting the type of 'dx' (line 2115)
            dx_105279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2115, 46), 'dx')
            # Applying the binary operator '-' (line 2115)
            result_sub_105280 = python_operator(stypy.reporting.localization.Localization(__file__, 2115, 41), '-', x0_105278, dx_105279)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2115, 41), tuple_105277, result_sub_105280)
            # Adding element type (line 2115)
            # Getting the type of 'y0' (line 2115)
            y0_105281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2115, 50), 'y0')
            # Getting the type of 'dx' (line 2115)
            dx_105282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2115, 55), 'dx')
            # Applying the binary operator '+' (line 2115)
            result_add_105283 = python_operator(stypy.reporting.localization.Localization(__file__, 2115, 50), '+', y0_105281, dx_105282)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2115, 41), tuple_105277, result_add_105283)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2114, 17), list_105253, tuple_105277)
            # Adding element type (line 2114)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2116)
            tuple_105284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2116, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2116)
            # Adding element type (line 2116)
            # Getting the type of 'x0' (line 2116)
            x0_105285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2116, 19), 'x0')
            # Getting the type of 'dxx' (line 2116)
            dxx_105286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2116, 24), 'dxx')
            # Applying the binary operator '+' (line 2116)
            result_add_105287 = python_operator(stypy.reporting.localization.Localization(__file__, 2116, 19), '+', x0_105285, dxx_105286)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2116, 19), tuple_105284, result_add_105287)
            # Adding element type (line 2116)
            # Getting the type of 'y0' (line 2116)
            y0_105288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2116, 29), 'y0')
            # Getting the type of 'dxx' (line 2116)
            dxx_105289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2116, 34), 'dxx')
            # Applying the binary operator '-' (line 2116)
            result_sub_105290 = python_operator(stypy.reporting.localization.Localization(__file__, 2116, 29), '-', y0_105288, dxx_105289)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2116, 19), tuple_105284, result_sub_105290)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2114, 17), list_105253, tuple_105284)
            # Adding element type (line 2114)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2117)
            tuple_105291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2117, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2117)
            # Adding element type (line 2117)
            # Getting the type of 'x0' (line 2117)
            x0_105292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2117, 19), 'x0')
            # Getting the type of 'dxx' (line 2117)
            dxx_105293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2117, 24), 'dxx')
            # Applying the binary operator '+' (line 2117)
            result_add_105294 = python_operator(stypy.reporting.localization.Localization(__file__, 2117, 19), '+', x0_105292, dxx_105293)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2117, 19), tuple_105291, result_add_105294)
            # Adding element type (line 2117)
            # Getting the type of 'y0' (line 2117)
            y0_105295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2117, 29), 'y0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2117, 19), tuple_105291, y0_105295)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2114, 17), list_105253, tuple_105291)
            # Adding element type (line 2114)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2117)
            tuple_105296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2117, 35), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2117)
            # Adding element type (line 2117)
            # Getting the type of 'x0' (line 2117)
            x0_105297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2117, 35), 'x0')
            # Getting the type of 'dxx' (line 2117)
            dxx_105298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2117, 40), 'dxx')
            # Applying the binary operator '+' (line 2117)
            result_add_105299 = python_operator(stypy.reporting.localization.Localization(__file__, 2117, 35), '+', x0_105297, dxx_105298)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2117, 35), tuple_105296, result_add_105299)
            # Adding element type (line 2117)
            # Getting the type of 'y0' (line 2117)
            y0_105300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2117, 45), 'y0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2117, 35), tuple_105296, y0_105300)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2114, 17), list_105253, tuple_105296)
            
            # Assigning a type to the variable 'cp' (line 2114)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2114, 12), 'cp', list_105253)
            
            # Assigning a List to a Name (line 2119):
            
            # Assigning a List to a Name (line 2119):
            
            # Assigning a List to a Name (line 2119):
            
            # Obtaining an instance of the builtin type 'list' (line 2119)
            list_105301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2119, 18), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2119)
            # Adding element type (line 2119)
            # Getting the type of 'Path' (line 2119)
            Path_105302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2119, 19), 'Path')
            # Obtaining the member 'MOVETO' of a type (line 2119)
            MOVETO_105303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2119, 19), Path_105302, 'MOVETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2119, 18), list_105301, MOVETO_105303)
            # Adding element type (line 2119)
            # Getting the type of 'Path' (line 2119)
            Path_105304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2119, 32), 'Path')
            # Obtaining the member 'LINETO' of a type (line 2119)
            LINETO_105305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2119, 32), Path_105304, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2119, 18), list_105301, LINETO_105305)
            # Adding element type (line 2119)
            # Getting the type of 'Path' (line 2119)
            Path_105306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2119, 45), 'Path')
            # Obtaining the member 'LINETO' of a type (line 2119)
            LINETO_105307 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2119, 45), Path_105306, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2119, 18), list_105301, LINETO_105307)
            # Adding element type (line 2119)
            # Getting the type of 'Path' (line 2119)
            Path_105308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2119, 58), 'Path')
            # Obtaining the member 'LINETO' of a type (line 2119)
            LINETO_105309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2119, 58), Path_105308, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2119, 18), list_105301, LINETO_105309)
            # Adding element type (line 2119)
            # Getting the type of 'Path' (line 2120)
            Path_105310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2120, 19), 'Path')
            # Obtaining the member 'LINETO' of a type (line 2120)
            LINETO_105311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2120, 19), Path_105310, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2119, 18), list_105301, LINETO_105311)
            # Adding element type (line 2119)
            # Getting the type of 'Path' (line 2120)
            Path_105312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2120, 32), 'Path')
            # Obtaining the member 'LINETO' of a type (line 2120)
            LINETO_105313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2120, 32), Path_105312, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2119, 18), list_105301, LINETO_105313)
            # Adding element type (line 2119)
            # Getting the type of 'Path' (line 2120)
            Path_105314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2120, 45), 'Path')
            # Obtaining the member 'LINETO' of a type (line 2120)
            LINETO_105315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2120, 45), Path_105314, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2119, 18), list_105301, LINETO_105315)
            # Adding element type (line 2119)
            # Getting the type of 'Path' (line 2121)
            Path_105316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2121, 19), 'Path')
            # Obtaining the member 'LINETO' of a type (line 2121)
            LINETO_105317 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2121, 19), Path_105316, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2119, 18), list_105301, LINETO_105317)
            # Adding element type (line 2119)
            # Getting the type of 'Path' (line 2121)
            Path_105318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2121, 32), 'Path')
            # Obtaining the member 'CLOSEPOLY' of a type (line 2121)
            CLOSEPOLY_105319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2121, 32), Path_105318, 'CLOSEPOLY')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2119, 18), list_105301, CLOSEPOLY_105319)
            
            # Assigning a type to the variable 'com' (line 2119)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2119, 12), 'com', list_105301)
            
            # Assigning a Call to a Name (line 2123):
            
            # Assigning a Call to a Name (line 2123):
            
            # Assigning a Call to a Name (line 2123):
            
            # Call to Path(...): (line 2123)
            # Processing the call arguments (line 2123)
            # Getting the type of 'cp' (line 2123)
            cp_105321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2123, 24), 'cp', False)
            # Getting the type of 'com' (line 2123)
            com_105322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2123, 28), 'com', False)
            # Processing the call keyword arguments (line 2123)
            kwargs_105323 = {}
            # Getting the type of 'Path' (line 2123)
            Path_105320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2123, 19), 'Path', False)
            # Calling Path(args, kwargs) (line 2123)
            Path_call_result_105324 = invoke(stypy.reporting.localization.Localization(__file__, 2123, 19), Path_105320, *[cp_105321, com_105322], **kwargs_105323)
            
            # Assigning a type to the variable 'path' (line 2123)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2123, 12), 'path', Path_call_result_105324)
            # Getting the type of 'path' (line 2125)
            path_105325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2125, 19), 'path')
            # Assigning a type to the variable 'stypy_return_type' (line 2125)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2125, 12), 'stypy_return_type', path_105325)
            
            # ################# End of 'transmute(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'transmute' in the type store
            # Getting the type of 'stypy_return_type' (line 2098)
            stypy_return_type_105326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2098, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_105326)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'transmute'
            return stypy_return_type_105326

    
    # Assigning a type to the variable 'LArrow' (line 2090)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2090, 4), 'LArrow', LArrow)
    
    # Assigning a Name to a Subscript (line 2126):
    
    # Assigning a Name to a Subscript (line 2126):
    # Declaration of the 'RArrow' class
    # Getting the type of 'LArrow' (line 2128)
    LArrow_105327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2128, 17), 'LArrow')

    class RArrow(LArrow_105327, ):
        unicode_105328 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2131, (-1)), 'unicode', u'\n        (right) Arrow Box\n        ')

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            float_105329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2133, 31), 'float')
            defaults = [float_105329]
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 2133, 8, False)
            # Assigning a type to the variable 'self' (line 2134)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2134, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'RArrow.__init__', ['pad'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, ['pad'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            
            # Call to __init__(...): (line 2134)
            # Processing the call arguments (line 2134)
            # Getting the type of 'pad' (line 2134)
            pad_105337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 50), 'pad', False)
            # Processing the call keyword arguments (line 2134)
            kwargs_105338 = {}
            
            # Call to super(...): (line 2134)
            # Processing the call arguments (line 2134)
            # Getting the type of 'BoxStyle' (line 2134)
            BoxStyle_105331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 18), 'BoxStyle', False)
            # Obtaining the member 'RArrow' of a type (line 2134)
            RArrow_105332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2134, 18), BoxStyle_105331, 'RArrow')
            # Getting the type of 'self' (line 2134)
            self_105333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 35), 'self', False)
            # Processing the call keyword arguments (line 2134)
            kwargs_105334 = {}
            # Getting the type of 'super' (line 2134)
            super_105330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 12), 'super', False)
            # Calling super(args, kwargs) (line 2134)
            super_call_result_105335 = invoke(stypy.reporting.localization.Localization(__file__, 2134, 12), super_105330, *[RArrow_105332, self_105333], **kwargs_105334)
            
            # Obtaining the member '__init__' of a type (line 2134)
            init___105336 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2134, 12), super_call_result_105335, '__init__')
            # Calling __init__(args, kwargs) (line 2134)
            init___call_result_105339 = invoke(stypy.reporting.localization.Localization(__file__, 2134, 12), init___105336, *[pad_105337], **kwargs_105338)
            
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()


        @norecursion
        def transmute(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'transmute'
            module_type_store = module_type_store.open_function_context('transmute', 2136, 8, False)
            # Assigning a type to the variable 'self' (line 2137)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2137, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            RArrow.transmute.__dict__.__setitem__('stypy_localization', localization)
            RArrow.transmute.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            RArrow.transmute.__dict__.__setitem__('stypy_type_store', module_type_store)
            RArrow.transmute.__dict__.__setitem__('stypy_function_name', 'RArrow.transmute')
            RArrow.transmute.__dict__.__setitem__('stypy_param_names_list', ['x0', 'y0', 'width', 'height', 'mutation_size'])
            RArrow.transmute.__dict__.__setitem__('stypy_varargs_param_name', None)
            RArrow.transmute.__dict__.__setitem__('stypy_kwargs_param_name', None)
            RArrow.transmute.__dict__.__setitem__('stypy_call_defaults', defaults)
            RArrow.transmute.__dict__.__setitem__('stypy_call_varargs', varargs)
            RArrow.transmute.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            RArrow.transmute.__dict__.__setitem__('stypy_declared_arg_number', 6)
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'RArrow.transmute', ['x0', 'y0', 'width', 'height', 'mutation_size'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'transmute', localization, ['x0', 'y0', 'width', 'height', 'mutation_size'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'transmute(...)' code ##################

            
            # Assigning a Call to a Name (line 2138):
            
            # Assigning a Call to a Name (line 2138):
            
            # Assigning a Call to a Name (line 2138):
            
            # Call to transmute(...): (line 2138)
            # Processing the call arguments (line 2138)
            # Getting the type of 'self' (line 2138)
            self_105343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2138, 42), 'self', False)
            # Getting the type of 'x0' (line 2138)
            x0_105344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2138, 48), 'x0', False)
            # Getting the type of 'y0' (line 2138)
            y0_105345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2138, 52), 'y0', False)
            # Getting the type of 'width' (line 2139)
            width_105346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2139, 42), 'width', False)
            # Getting the type of 'height' (line 2139)
            height_105347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2139, 49), 'height', False)
            # Getting the type of 'mutation_size' (line 2139)
            mutation_size_105348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2139, 57), 'mutation_size', False)
            # Processing the call keyword arguments (line 2138)
            kwargs_105349 = {}
            # Getting the type of 'BoxStyle' (line 2138)
            BoxStyle_105340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2138, 16), 'BoxStyle', False)
            # Obtaining the member 'LArrow' of a type (line 2138)
            LArrow_105341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2138, 16), BoxStyle_105340, 'LArrow')
            # Obtaining the member 'transmute' of a type (line 2138)
            transmute_105342 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2138, 16), LArrow_105341, 'transmute')
            # Calling transmute(args, kwargs) (line 2138)
            transmute_call_result_105350 = invoke(stypy.reporting.localization.Localization(__file__, 2138, 16), transmute_105342, *[self_105343, x0_105344, y0_105345, width_105346, height_105347, mutation_size_105348], **kwargs_105349)
            
            # Assigning a type to the variable 'p' (line 2138)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2138, 12), 'p', transmute_call_result_105350)
            
            # Assigning a BinOp to a Subscript (line 2141):
            
            # Assigning a BinOp to a Subscript (line 2141):
            
            # Assigning a BinOp to a Subscript (line 2141):
            int_105351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2141, 31), 'int')
            # Getting the type of 'x0' (line 2141)
            x0_105352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2141, 35), 'x0')
            # Applying the binary operator '*' (line 2141)
            result_mul_105353 = python_operator(stypy.reporting.localization.Localization(__file__, 2141, 31), '*', int_105351, x0_105352)
            
            # Getting the type of 'width' (line 2141)
            width_105354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2141, 40), 'width')
            # Applying the binary operator '+' (line 2141)
            result_add_105355 = python_operator(stypy.reporting.localization.Localization(__file__, 2141, 31), '+', result_mul_105353, width_105354)
            
            
            # Obtaining the type of the subscript
            slice_105356 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2141, 48), None, None, None)
            int_105357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2141, 62), 'int')
            # Getting the type of 'p' (line 2141)
            p_105358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2141, 48), 'p')
            # Obtaining the member 'vertices' of a type (line 2141)
            vertices_105359 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2141, 48), p_105358, 'vertices')
            # Obtaining the member '__getitem__' of a type (line 2141)
            getitem___105360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2141, 48), vertices_105359, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2141)
            subscript_call_result_105361 = invoke(stypy.reporting.localization.Localization(__file__, 2141, 48), getitem___105360, (slice_105356, int_105357))
            
            # Applying the binary operator '-' (line 2141)
            result_sub_105362 = python_operator(stypy.reporting.localization.Localization(__file__, 2141, 46), '-', result_add_105355, subscript_call_result_105361)
            
            # Getting the type of 'p' (line 2141)
            p_105363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2141, 12), 'p')
            # Obtaining the member 'vertices' of a type (line 2141)
            vertices_105364 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2141, 12), p_105363, 'vertices')
            slice_105365 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2141, 12), None, None, None)
            int_105366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2141, 26), 'int')
            # Storing an element on a container (line 2141)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2141, 12), vertices_105364, ((slice_105365, int_105366), result_sub_105362))
            # Getting the type of 'p' (line 2143)
            p_105367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2143, 19), 'p')
            # Assigning a type to the variable 'stypy_return_type' (line 2143)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2143, 12), 'stypy_return_type', p_105367)
            
            # ################# End of 'transmute(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'transmute' in the type store
            # Getting the type of 'stypy_return_type' (line 2136)
            stypy_return_type_105368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2136, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_105368)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'transmute'
            return stypy_return_type_105368

    
    # Assigning a type to the variable 'RArrow' (line 2128)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2128, 4), 'RArrow', RArrow)
    
    # Assigning a Name to a Subscript (line 2145):
    
    # Assigning a Name to a Subscript (line 2145):
    # Declaration of the 'DArrow' class
    # Getting the type of '_Base' (line 2147)
    _Base_105369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2147, 17), '_Base')

    class DArrow(_Base_105369, ):
        unicode_105370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2150, (-1)), 'unicode', u'\n        (Double) Arrow Box\n        ')

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            float_105371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2154, 31), 'float')
            defaults = [float_105371]
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 2154, 8, False)
            # Assigning a type to the variable 'self' (line 2155)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2155, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'DArrow.__init__', ['pad'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, ['pad'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            
            # Assigning a Name to a Attribute (line 2155):
            
            # Assigning a Name to a Attribute (line 2155):
            
            # Assigning a Name to a Attribute (line 2155):
            # Getting the type of 'pad' (line 2155)
            pad_105372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2155, 23), 'pad')
            # Getting the type of 'self' (line 2155)
            self_105373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2155, 12), 'self')
            # Setting the type of the member 'pad' of a type (line 2155)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2155, 12), self_105373, 'pad', pad_105372)
            
            # Call to __init__(...): (line 2156)
            # Processing the call keyword arguments (line 2156)
            kwargs_105381 = {}
            
            # Call to super(...): (line 2156)
            # Processing the call arguments (line 2156)
            # Getting the type of 'BoxStyle' (line 2156)
            BoxStyle_105375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2156, 18), 'BoxStyle', False)
            # Obtaining the member 'DArrow' of a type (line 2156)
            DArrow_105376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2156, 18), BoxStyle_105375, 'DArrow')
            # Getting the type of 'self' (line 2156)
            self_105377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2156, 35), 'self', False)
            # Processing the call keyword arguments (line 2156)
            kwargs_105378 = {}
            # Getting the type of 'super' (line 2156)
            super_105374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2156, 12), 'super', False)
            # Calling super(args, kwargs) (line 2156)
            super_call_result_105379 = invoke(stypy.reporting.localization.Localization(__file__, 2156, 12), super_105374, *[DArrow_105376, self_105377], **kwargs_105378)
            
            # Obtaining the member '__init__' of a type (line 2156)
            init___105380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2156, 12), super_call_result_105379, '__init__')
            # Calling __init__(args, kwargs) (line 2156)
            init___call_result_105382 = invoke(stypy.reporting.localization.Localization(__file__, 2156, 12), init___105380, *[], **kwargs_105381)
            
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()


        @norecursion
        def transmute(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'transmute'
            module_type_store = module_type_store.open_function_context('transmute', 2158, 8, False)
            # Assigning a type to the variable 'self' (line 2159)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2159, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            DArrow.transmute.__dict__.__setitem__('stypy_localization', localization)
            DArrow.transmute.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            DArrow.transmute.__dict__.__setitem__('stypy_type_store', module_type_store)
            DArrow.transmute.__dict__.__setitem__('stypy_function_name', 'DArrow.transmute')
            DArrow.transmute.__dict__.__setitem__('stypy_param_names_list', ['x0', 'y0', 'width', 'height', 'mutation_size'])
            DArrow.transmute.__dict__.__setitem__('stypy_varargs_param_name', None)
            DArrow.transmute.__dict__.__setitem__('stypy_kwargs_param_name', None)
            DArrow.transmute.__dict__.__setitem__('stypy_call_defaults', defaults)
            DArrow.transmute.__dict__.__setitem__('stypy_call_varargs', varargs)
            DArrow.transmute.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            DArrow.transmute.__dict__.__setitem__('stypy_declared_arg_number', 6)
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'DArrow.transmute', ['x0', 'y0', 'width', 'height', 'mutation_size'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'transmute', localization, ['x0', 'y0', 'width', 'height', 'mutation_size'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'transmute(...)' code ##################

            
            # Assigning a BinOp to a Name (line 2161):
            
            # Assigning a BinOp to a Name (line 2161):
            
            # Assigning a BinOp to a Name (line 2161):
            # Getting the type of 'mutation_size' (line 2161)
            mutation_size_105383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2161, 18), 'mutation_size')
            # Getting the type of 'self' (line 2161)
            self_105384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2161, 34), 'self')
            # Obtaining the member 'pad' of a type (line 2161)
            pad_105385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2161, 34), self_105384, 'pad')
            # Applying the binary operator '*' (line 2161)
            result_mul_105386 = python_operator(stypy.reporting.localization.Localization(__file__, 2161, 18), '*', mutation_size_105383, pad_105385)
            
            # Assigning a type to the variable 'pad' (line 2161)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2161, 12), 'pad', result_mul_105386)
            
            # Assigning a BinOp to a Name (line 2165):
            
            # Assigning a BinOp to a Name (line 2165):
            
            # Assigning a BinOp to a Name (line 2165):
            # Getting the type of 'height' (line 2165)
            height_105387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2165, 21), 'height')
            float_105388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2165, 30), 'float')
            # Getting the type of 'pad' (line 2165)
            pad_105389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2165, 35), 'pad')
            # Applying the binary operator '*' (line 2165)
            result_mul_105390 = python_operator(stypy.reporting.localization.Localization(__file__, 2165, 30), '*', float_105388, pad_105389)
            
            # Applying the binary operator '+' (line 2165)
            result_add_105391 = python_operator(stypy.reporting.localization.Localization(__file__, 2165, 21), '+', height_105387, result_mul_105390)
            
            # Assigning a type to the variable 'height' (line 2165)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2165, 12), 'height', result_add_105391)
            
            # Assigning a Tuple to a Tuple (line 2168):
            
            # Assigning a BinOp to a Name (line 2168):
            
            # Assigning a BinOp to a Name (line 2168):
            # Getting the type of 'x0' (line 2168)
            x0_105392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2168, 21), 'x0')
            # Getting the type of 'pad' (line 2168)
            pad_105393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2168, 26), 'pad')
            # Applying the binary operator '-' (line 2168)
            result_sub_105394 = python_operator(stypy.reporting.localization.Localization(__file__, 2168, 21), '-', x0_105392, pad_105393)
            
            # Assigning a type to the variable 'tuple_assignment_100466' (line 2168)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2168, 12), 'tuple_assignment_100466', result_sub_105394)
            
            # Assigning a BinOp to a Name (line 2168):
            
            # Assigning a BinOp to a Name (line 2168):
            # Getting the type of 'y0' (line 2168)
            y0_105395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2168, 31), 'y0')
            # Getting the type of 'pad' (line 2168)
            pad_105396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2168, 36), 'pad')
            # Applying the binary operator '-' (line 2168)
            result_sub_105397 = python_operator(stypy.reporting.localization.Localization(__file__, 2168, 31), '-', y0_105395, pad_105396)
            
            # Assigning a type to the variable 'tuple_assignment_100467' (line 2168)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2168, 12), 'tuple_assignment_100467', result_sub_105397)
            
            # Assigning a Name to a Name (line 2168):
            
            # Assigning a Name to a Name (line 2168):
            # Getting the type of 'tuple_assignment_100466' (line 2168)
            tuple_assignment_100466_105398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2168, 12), 'tuple_assignment_100466')
            # Assigning a type to the variable 'x0' (line 2168)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2168, 12), 'x0', tuple_assignment_100466_105398)
            
            # Assigning a Name to a Name (line 2168):
            
            # Assigning a Name to a Name (line 2168):
            # Getting the type of 'tuple_assignment_100467' (line 2168)
            tuple_assignment_100467_105399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2168, 12), 'tuple_assignment_100467')
            # Assigning a type to the variable 'y0' (line 2168)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2168, 16), 'y0', tuple_assignment_100467_105399)
            
            # Assigning a Tuple to a Tuple (line 2169):
            
            # Assigning a BinOp to a Name (line 2169):
            
            # Assigning a BinOp to a Name (line 2169):
            # Getting the type of 'x0' (line 2169)
            x0_105400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 21), 'x0')
            # Getting the type of 'width' (line 2169)
            width_105401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 26), 'width')
            # Applying the binary operator '+' (line 2169)
            result_add_105402 = python_operator(stypy.reporting.localization.Localization(__file__, 2169, 21), '+', x0_105400, width_105401)
            
            # Assigning a type to the variable 'tuple_assignment_100468' (line 2169)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2169, 12), 'tuple_assignment_100468', result_add_105402)
            
            # Assigning a BinOp to a Name (line 2169):
            
            # Assigning a BinOp to a Name (line 2169):
            # Getting the type of 'y0' (line 2169)
            y0_105403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 33), 'y0')
            # Getting the type of 'height' (line 2169)
            height_105404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 38), 'height')
            # Applying the binary operator '+' (line 2169)
            result_add_105405 = python_operator(stypy.reporting.localization.Localization(__file__, 2169, 33), '+', y0_105403, height_105404)
            
            # Assigning a type to the variable 'tuple_assignment_100469' (line 2169)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2169, 12), 'tuple_assignment_100469', result_add_105405)
            
            # Assigning a Name to a Name (line 2169):
            
            # Assigning a Name to a Name (line 2169):
            # Getting the type of 'tuple_assignment_100468' (line 2169)
            tuple_assignment_100468_105406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 12), 'tuple_assignment_100468')
            # Assigning a type to the variable 'x1' (line 2169)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2169, 12), 'x1', tuple_assignment_100468_105406)
            
            # Assigning a Name to a Name (line 2169):
            
            # Assigning a Name to a Name (line 2169):
            # Getting the type of 'tuple_assignment_100469' (line 2169)
            tuple_assignment_100469_105407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 12), 'tuple_assignment_100469')
            # Assigning a type to the variable 'y1' (line 2169)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2169, 16), 'y1', tuple_assignment_100469_105407)
            
            # Assigning a BinOp to a Name (line 2171):
            
            # Assigning a BinOp to a Name (line 2171):
            
            # Assigning a BinOp to a Name (line 2171):
            # Getting the type of 'y1' (line 2171)
            y1_105408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2171, 18), 'y1')
            # Getting the type of 'y0' (line 2171)
            y0_105409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2171, 23), 'y0')
            # Applying the binary operator '-' (line 2171)
            result_sub_105410 = python_operator(stypy.reporting.localization.Localization(__file__, 2171, 18), '-', y1_105408, y0_105409)
            
            float_105411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2171, 27), 'float')
            # Applying the binary operator 'div' (line 2171)
            result_div_105412 = python_operator(stypy.reporting.localization.Localization(__file__, 2171, 17), 'div', result_sub_105410, float_105411)
            
            # Assigning a type to the variable 'dx' (line 2171)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2171, 12), 'dx', result_div_105412)
            
            # Assigning a BinOp to a Name (line 2172):
            
            # Assigning a BinOp to a Name (line 2172):
            
            # Assigning a BinOp to a Name (line 2172):
            # Getting the type of 'dx' (line 2172)
            dx_105413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2172, 18), 'dx')
            float_105414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2172, 23), 'float')
            # Applying the binary operator '*' (line 2172)
            result_mul_105415 = python_operator(stypy.reporting.localization.Localization(__file__, 2172, 18), '*', dx_105413, float_105414)
            
            # Assigning a type to the variable 'dxx' (line 2172)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2172, 12), 'dxx', result_mul_105415)
            
            # Assigning a BinOp to a Name (line 2174):
            
            # Assigning a BinOp to a Name (line 2174):
            
            # Assigning a BinOp to a Name (line 2174):
            # Getting the type of 'x0' (line 2174)
            x0_105416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2174, 17), 'x0')
            # Getting the type of 'pad' (line 2174)
            pad_105417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2174, 22), 'pad')
            float_105418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2174, 28), 'float')
            # Applying the binary operator 'div' (line 2174)
            result_div_105419 = python_operator(stypy.reporting.localization.Localization(__file__, 2174, 22), 'div', pad_105417, float_105418)
            
            # Applying the binary operator '+' (line 2174)
            result_add_105420 = python_operator(stypy.reporting.localization.Localization(__file__, 2174, 17), '+', x0_105416, result_div_105419)
            
            # Assigning a type to the variable 'x0' (line 2174)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2174, 12), 'x0', result_add_105420)
            
            # Assigning a List to a Name (line 2176):
            
            # Assigning a List to a Name (line 2176):
            
            # Assigning a List to a Name (line 2176):
            
            # Obtaining an instance of the builtin type 'list' (line 2176)
            list_105421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2176, 17), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2176)
            # Adding element type (line 2176)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2176)
            tuple_105422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2176, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2176)
            # Adding element type (line 2176)
            # Getting the type of 'x0' (line 2176)
            x0_105423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 19), 'x0')
            # Getting the type of 'dxx' (line 2176)
            dxx_105424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 24), 'dxx')
            # Applying the binary operator '+' (line 2176)
            result_add_105425 = python_operator(stypy.reporting.localization.Localization(__file__, 2176, 19), '+', x0_105423, dxx_105424)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2176, 19), tuple_105422, result_add_105425)
            # Adding element type (line 2176)
            # Getting the type of 'y0' (line 2176)
            y0_105426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 29), 'y0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2176, 19), tuple_105422, y0_105426)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2176, 17), list_105421, tuple_105422)
            # Adding element type (line 2176)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2176)
            tuple_105427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2176, 35), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2176)
            # Adding element type (line 2176)
            # Getting the type of 'x1' (line 2176)
            x1_105428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 35), 'x1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2176, 35), tuple_105427, x1_105428)
            # Adding element type (line 2176)
            # Getting the type of 'y0' (line 2176)
            y0_105429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 39), 'y0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2176, 35), tuple_105427, y0_105429)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2176, 17), list_105421, tuple_105427)
            # Adding element type (line 2176)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2177)
            tuple_105430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2177, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2177)
            # Adding element type (line 2177)
            # Getting the type of 'x1' (line 2177)
            x1_105431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 19), 'x1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2177, 19), tuple_105430, x1_105431)
            # Adding element type (line 2177)
            # Getting the type of 'y0' (line 2177)
            y0_105432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 23), 'y0')
            # Getting the type of 'dxx' (line 2177)
            dxx_105433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 28), 'dxx')
            # Applying the binary operator '-' (line 2177)
            result_sub_105434 = python_operator(stypy.reporting.localization.Localization(__file__, 2177, 23), '-', y0_105432, dxx_105433)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2177, 19), tuple_105430, result_sub_105434)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2176, 17), list_105421, tuple_105430)
            # Adding element type (line 2176)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2177)
            tuple_105435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2177, 35), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2177)
            # Adding element type (line 2177)
            # Getting the type of 'x1' (line 2177)
            x1_105436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 35), 'x1')
            # Getting the type of 'dx' (line 2177)
            dx_105437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 40), 'dx')
            # Applying the binary operator '+' (line 2177)
            result_add_105438 = python_operator(stypy.reporting.localization.Localization(__file__, 2177, 35), '+', x1_105436, dx_105437)
            
            # Getting the type of 'dxx' (line 2177)
            dxx_105439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 45), 'dxx')
            # Applying the binary operator '+' (line 2177)
            result_add_105440 = python_operator(stypy.reporting.localization.Localization(__file__, 2177, 43), '+', result_add_105438, dxx_105439)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2177, 35), tuple_105435, result_add_105440)
            # Adding element type (line 2177)
            # Getting the type of 'y0' (line 2177)
            y0_105441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 50), 'y0')
            # Getting the type of 'dx' (line 2177)
            dx_105442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 55), 'dx')
            # Applying the binary operator '+' (line 2177)
            result_add_105443 = python_operator(stypy.reporting.localization.Localization(__file__, 2177, 50), '+', y0_105441, dx_105442)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2177, 35), tuple_105435, result_add_105443)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2176, 17), list_105421, tuple_105435)
            # Adding element type (line 2176)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2178)
            tuple_105444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2178, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2178)
            # Adding element type (line 2178)
            # Getting the type of 'x1' (line 2178)
            x1_105445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2178, 19), 'x1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2178, 19), tuple_105444, x1_105445)
            # Adding element type (line 2178)
            # Getting the type of 'y1' (line 2178)
            y1_105446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2178, 23), 'y1')
            # Getting the type of 'dxx' (line 2178)
            dxx_105447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2178, 28), 'dxx')
            # Applying the binary operator '+' (line 2178)
            result_add_105448 = python_operator(stypy.reporting.localization.Localization(__file__, 2178, 23), '+', y1_105446, dxx_105447)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2178, 19), tuple_105444, result_add_105448)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2176, 17), list_105421, tuple_105444)
            # Adding element type (line 2176)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2179)
            tuple_105449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2179, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2179)
            # Adding element type (line 2179)
            # Getting the type of 'x1' (line 2179)
            x1_105450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2179, 19), 'x1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2179, 19), tuple_105449, x1_105450)
            # Adding element type (line 2179)
            # Getting the type of 'y1' (line 2179)
            y1_105451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2179, 23), 'y1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2179, 19), tuple_105449, y1_105451)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2176, 17), list_105421, tuple_105449)
            # Adding element type (line 2176)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2179)
            tuple_105452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2179, 29), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2179)
            # Adding element type (line 2179)
            # Getting the type of 'x0' (line 2179)
            x0_105453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2179, 29), 'x0')
            # Getting the type of 'dxx' (line 2179)
            dxx_105454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2179, 34), 'dxx')
            # Applying the binary operator '+' (line 2179)
            result_add_105455 = python_operator(stypy.reporting.localization.Localization(__file__, 2179, 29), '+', x0_105453, dxx_105454)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2179, 29), tuple_105452, result_add_105455)
            # Adding element type (line 2179)
            # Getting the type of 'y1' (line 2179)
            y1_105456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2179, 39), 'y1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2179, 29), tuple_105452, y1_105456)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2176, 17), list_105421, tuple_105452)
            # Adding element type (line 2176)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2180)
            tuple_105457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2180, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2180)
            # Adding element type (line 2180)
            # Getting the type of 'x0' (line 2180)
            x0_105458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2180, 19), 'x0')
            # Getting the type of 'dxx' (line 2180)
            dxx_105459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2180, 24), 'dxx')
            # Applying the binary operator '+' (line 2180)
            result_add_105460 = python_operator(stypy.reporting.localization.Localization(__file__, 2180, 19), '+', x0_105458, dxx_105459)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2180, 19), tuple_105457, result_add_105460)
            # Adding element type (line 2180)
            # Getting the type of 'y1' (line 2180)
            y1_105461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2180, 29), 'y1')
            # Getting the type of 'dxx' (line 2180)
            dxx_105462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2180, 34), 'dxx')
            # Applying the binary operator '+' (line 2180)
            result_add_105463 = python_operator(stypy.reporting.localization.Localization(__file__, 2180, 29), '+', y1_105461, dxx_105462)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2180, 19), tuple_105457, result_add_105463)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2176, 17), list_105421, tuple_105457)
            # Adding element type (line 2176)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2180)
            tuple_105464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2180, 41), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2180)
            # Adding element type (line 2180)
            # Getting the type of 'x0' (line 2180)
            x0_105465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2180, 41), 'x0')
            # Getting the type of 'dx' (line 2180)
            dx_105466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2180, 46), 'dx')
            # Applying the binary operator '-' (line 2180)
            result_sub_105467 = python_operator(stypy.reporting.localization.Localization(__file__, 2180, 41), '-', x0_105465, dx_105466)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2180, 41), tuple_105464, result_sub_105467)
            # Adding element type (line 2180)
            # Getting the type of 'y0' (line 2180)
            y0_105468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2180, 50), 'y0')
            # Getting the type of 'dx' (line 2180)
            dx_105469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2180, 55), 'dx')
            # Applying the binary operator '+' (line 2180)
            result_add_105470 = python_operator(stypy.reporting.localization.Localization(__file__, 2180, 50), '+', y0_105468, dx_105469)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2180, 41), tuple_105464, result_add_105470)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2176, 17), list_105421, tuple_105464)
            # Adding element type (line 2176)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2181)
            tuple_105471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2181, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2181)
            # Adding element type (line 2181)
            # Getting the type of 'x0' (line 2181)
            x0_105472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2181, 19), 'x0')
            # Getting the type of 'dxx' (line 2181)
            dxx_105473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2181, 24), 'dxx')
            # Applying the binary operator '+' (line 2181)
            result_add_105474 = python_operator(stypy.reporting.localization.Localization(__file__, 2181, 19), '+', x0_105472, dxx_105473)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2181, 19), tuple_105471, result_add_105474)
            # Adding element type (line 2181)
            # Getting the type of 'y0' (line 2181)
            y0_105475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2181, 29), 'y0')
            # Getting the type of 'dxx' (line 2181)
            dxx_105476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2181, 34), 'dxx')
            # Applying the binary operator '-' (line 2181)
            result_sub_105477 = python_operator(stypy.reporting.localization.Localization(__file__, 2181, 29), '-', y0_105475, dxx_105476)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2181, 19), tuple_105471, result_sub_105477)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2176, 17), list_105421, tuple_105471)
            # Adding element type (line 2176)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2182)
            tuple_105478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2182, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2182)
            # Adding element type (line 2182)
            # Getting the type of 'x0' (line 2182)
            x0_105479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 19), 'x0')
            # Getting the type of 'dxx' (line 2182)
            dxx_105480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 24), 'dxx')
            # Applying the binary operator '+' (line 2182)
            result_add_105481 = python_operator(stypy.reporting.localization.Localization(__file__, 2182, 19), '+', x0_105479, dxx_105480)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2182, 19), tuple_105478, result_add_105481)
            # Adding element type (line 2182)
            # Getting the type of 'y0' (line 2182)
            y0_105482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 29), 'y0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2182, 19), tuple_105478, y0_105482)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2176, 17), list_105421, tuple_105478)
            # Adding element type (line 2176)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2182)
            tuple_105483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2182, 35), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2182)
            # Adding element type (line 2182)
            # Getting the type of 'x0' (line 2182)
            x0_105484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 35), 'x0')
            # Getting the type of 'dxx' (line 2182)
            dxx_105485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 40), 'dxx')
            # Applying the binary operator '+' (line 2182)
            result_add_105486 = python_operator(stypy.reporting.localization.Localization(__file__, 2182, 35), '+', x0_105484, dxx_105485)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2182, 35), tuple_105483, result_add_105486)
            # Adding element type (line 2182)
            # Getting the type of 'y0' (line 2182)
            y0_105487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 45), 'y0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2182, 35), tuple_105483, y0_105487)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2176, 17), list_105421, tuple_105483)
            
            # Assigning a type to the variable 'cp' (line 2176)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2176, 12), 'cp', list_105421)
            
            # Assigning a List to a Name (line 2184):
            
            # Assigning a List to a Name (line 2184):
            
            # Assigning a List to a Name (line 2184):
            
            # Obtaining an instance of the builtin type 'list' (line 2184)
            list_105488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2184, 18), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2184)
            # Adding element type (line 2184)
            # Getting the type of 'Path' (line 2184)
            Path_105489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 19), 'Path')
            # Obtaining the member 'MOVETO' of a type (line 2184)
            MOVETO_105490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2184, 19), Path_105489, 'MOVETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2184, 18), list_105488, MOVETO_105490)
            # Adding element type (line 2184)
            # Getting the type of 'Path' (line 2184)
            Path_105491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 32), 'Path')
            # Obtaining the member 'LINETO' of a type (line 2184)
            LINETO_105492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2184, 32), Path_105491, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2184, 18), list_105488, LINETO_105492)
            # Adding element type (line 2184)
            # Getting the type of 'Path' (line 2185)
            Path_105493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 19), 'Path')
            # Obtaining the member 'LINETO' of a type (line 2185)
            LINETO_105494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2185, 19), Path_105493, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2184, 18), list_105488, LINETO_105494)
            # Adding element type (line 2184)
            # Getting the type of 'Path' (line 2185)
            Path_105495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 32), 'Path')
            # Obtaining the member 'LINETO' of a type (line 2185)
            LINETO_105496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2185, 32), Path_105495, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2184, 18), list_105488, LINETO_105496)
            # Adding element type (line 2184)
            # Getting the type of 'Path' (line 2186)
            Path_105497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2186, 19), 'Path')
            # Obtaining the member 'LINETO' of a type (line 2186)
            LINETO_105498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2186, 19), Path_105497, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2184, 18), list_105488, LINETO_105498)
            # Adding element type (line 2184)
            # Getting the type of 'Path' (line 2187)
            Path_105499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2187, 19), 'Path')
            # Obtaining the member 'LINETO' of a type (line 2187)
            LINETO_105500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2187, 19), Path_105499, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2184, 18), list_105488, LINETO_105500)
            # Adding element type (line 2184)
            # Getting the type of 'Path' (line 2187)
            Path_105501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2187, 32), 'Path')
            # Obtaining the member 'LINETO' of a type (line 2187)
            LINETO_105502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2187, 32), Path_105501, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2184, 18), list_105488, LINETO_105502)
            # Adding element type (line 2184)
            # Getting the type of 'Path' (line 2188)
            Path_105503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 19), 'Path')
            # Obtaining the member 'LINETO' of a type (line 2188)
            LINETO_105504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2188, 19), Path_105503, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2184, 18), list_105488, LINETO_105504)
            # Adding element type (line 2184)
            # Getting the type of 'Path' (line 2188)
            Path_105505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 32), 'Path')
            # Obtaining the member 'LINETO' of a type (line 2188)
            LINETO_105506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2188, 32), Path_105505, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2184, 18), list_105488, LINETO_105506)
            # Adding element type (line 2184)
            # Getting the type of 'Path' (line 2189)
            Path_105507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2189, 19), 'Path')
            # Obtaining the member 'LINETO' of a type (line 2189)
            LINETO_105508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2189, 19), Path_105507, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2184, 18), list_105488, LINETO_105508)
            # Adding element type (line 2184)
            # Getting the type of 'Path' (line 2190)
            Path_105509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2190, 19), 'Path')
            # Obtaining the member 'LINETO' of a type (line 2190)
            LINETO_105510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2190, 19), Path_105509, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2184, 18), list_105488, LINETO_105510)
            # Adding element type (line 2184)
            # Getting the type of 'Path' (line 2190)
            Path_105511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2190, 32), 'Path')
            # Obtaining the member 'CLOSEPOLY' of a type (line 2190)
            CLOSEPOLY_105512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2190, 32), Path_105511, 'CLOSEPOLY')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2184, 18), list_105488, CLOSEPOLY_105512)
            
            # Assigning a type to the variable 'com' (line 2184)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2184, 12), 'com', list_105488)
            
            # Assigning a Call to a Name (line 2192):
            
            # Assigning a Call to a Name (line 2192):
            
            # Assigning a Call to a Name (line 2192):
            
            # Call to Path(...): (line 2192)
            # Processing the call arguments (line 2192)
            # Getting the type of 'cp' (line 2192)
            cp_105514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2192, 24), 'cp', False)
            # Getting the type of 'com' (line 2192)
            com_105515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2192, 28), 'com', False)
            # Processing the call keyword arguments (line 2192)
            kwargs_105516 = {}
            # Getting the type of 'Path' (line 2192)
            Path_105513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2192, 19), 'Path', False)
            # Calling Path(args, kwargs) (line 2192)
            Path_call_result_105517 = invoke(stypy.reporting.localization.Localization(__file__, 2192, 19), Path_105513, *[cp_105514, com_105515], **kwargs_105516)
            
            # Assigning a type to the variable 'path' (line 2192)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2192, 12), 'path', Path_call_result_105517)
            # Getting the type of 'path' (line 2194)
            path_105518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2194, 19), 'path')
            # Assigning a type to the variable 'stypy_return_type' (line 2194)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2194, 12), 'stypy_return_type', path_105518)
            
            # ################# End of 'transmute(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'transmute' in the type store
            # Getting the type of 'stypy_return_type' (line 2158)
            stypy_return_type_105519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2158, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_105519)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'transmute'
            return stypy_return_type_105519

    
    # Assigning a type to the variable 'DArrow' (line 2147)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2147, 4), 'DArrow', DArrow)
    
    # Assigning a Name to a Subscript (line 2196):
    
    # Assigning a Name to a Subscript (line 2196):
    # Declaration of the 'Round' class
    # Getting the type of '_Base' (line 2198)
    _Base_105520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 16), '_Base')

    class Round(_Base_105520, ):
        unicode_105521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2201, (-1)), 'unicode', u'\n        A box with round corners.\n        ')

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            float_105522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2203, 31), 'float')
            # Getting the type of 'None' (line 2203)
            None_105523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2203, 50), 'None')
            defaults = [float_105522, None_105523]
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 2203, 8, False)
            # Assigning a type to the variable 'self' (line 2204)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2204, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Round.__init__', ['pad', 'rounding_size'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, ['pad', 'rounding_size'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            unicode_105524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2210, (-1)), 'unicode', u'\n            *pad*\n              amount of padding\n\n            *rounding_size*\n              rounding radius of corners. *pad* if None\n            ')
            
            # Assigning a Name to a Attribute (line 2211):
            
            # Assigning a Name to a Attribute (line 2211):
            
            # Assigning a Name to a Attribute (line 2211):
            # Getting the type of 'pad' (line 2211)
            pad_105525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2211, 23), 'pad')
            # Getting the type of 'self' (line 2211)
            self_105526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2211, 12), 'self')
            # Setting the type of the member 'pad' of a type (line 2211)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2211, 12), self_105526, 'pad', pad_105525)
            
            # Assigning a Name to a Attribute (line 2212):
            
            # Assigning a Name to a Attribute (line 2212):
            
            # Assigning a Name to a Attribute (line 2212):
            # Getting the type of 'rounding_size' (line 2212)
            rounding_size_105527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2212, 33), 'rounding_size')
            # Getting the type of 'self' (line 2212)
            self_105528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2212, 12), 'self')
            # Setting the type of the member 'rounding_size' of a type (line 2212)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2212, 12), self_105528, 'rounding_size', rounding_size_105527)
            
            # Call to __init__(...): (line 2213)
            # Processing the call keyword arguments (line 2213)
            kwargs_105536 = {}
            
            # Call to super(...): (line 2213)
            # Processing the call arguments (line 2213)
            # Getting the type of 'BoxStyle' (line 2213)
            BoxStyle_105530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2213, 18), 'BoxStyle', False)
            # Obtaining the member 'Round' of a type (line 2213)
            Round_105531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2213, 18), BoxStyle_105530, 'Round')
            # Getting the type of 'self' (line 2213)
            self_105532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2213, 34), 'self', False)
            # Processing the call keyword arguments (line 2213)
            kwargs_105533 = {}
            # Getting the type of 'super' (line 2213)
            super_105529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2213, 12), 'super', False)
            # Calling super(args, kwargs) (line 2213)
            super_call_result_105534 = invoke(stypy.reporting.localization.Localization(__file__, 2213, 12), super_105529, *[Round_105531, self_105532], **kwargs_105533)
            
            # Obtaining the member '__init__' of a type (line 2213)
            init___105535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2213, 12), super_call_result_105534, '__init__')
            # Calling __init__(args, kwargs) (line 2213)
            init___call_result_105537 = invoke(stypy.reporting.localization.Localization(__file__, 2213, 12), init___105535, *[], **kwargs_105536)
            
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()


        @norecursion
        def transmute(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'transmute'
            module_type_store = module_type_store.open_function_context('transmute', 2215, 8, False)
            # Assigning a type to the variable 'self' (line 2216)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2216, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            Round.transmute.__dict__.__setitem__('stypy_localization', localization)
            Round.transmute.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            Round.transmute.__dict__.__setitem__('stypy_type_store', module_type_store)
            Round.transmute.__dict__.__setitem__('stypy_function_name', 'Round.transmute')
            Round.transmute.__dict__.__setitem__('stypy_param_names_list', ['x0', 'y0', 'width', 'height', 'mutation_size'])
            Round.transmute.__dict__.__setitem__('stypy_varargs_param_name', None)
            Round.transmute.__dict__.__setitem__('stypy_kwargs_param_name', None)
            Round.transmute.__dict__.__setitem__('stypy_call_defaults', defaults)
            Round.transmute.__dict__.__setitem__('stypy_call_varargs', varargs)
            Round.transmute.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            Round.transmute.__dict__.__setitem__('stypy_declared_arg_number', 6)
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Round.transmute', ['x0', 'y0', 'width', 'height', 'mutation_size'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'transmute', localization, ['x0', 'y0', 'width', 'height', 'mutation_size'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'transmute(...)' code ##################

            
            # Assigning a BinOp to a Name (line 2218):
            
            # Assigning a BinOp to a Name (line 2218):
            
            # Assigning a BinOp to a Name (line 2218):
            # Getting the type of 'mutation_size' (line 2218)
            mutation_size_105538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2218, 18), 'mutation_size')
            # Getting the type of 'self' (line 2218)
            self_105539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2218, 34), 'self')
            # Obtaining the member 'pad' of a type (line 2218)
            pad_105540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2218, 34), self_105539, 'pad')
            # Applying the binary operator '*' (line 2218)
            result_mul_105541 = python_operator(stypy.reporting.localization.Localization(__file__, 2218, 18), '*', mutation_size_105538, pad_105540)
            
            # Assigning a type to the variable 'pad' (line 2218)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2218, 12), 'pad', result_mul_105541)
            
            # Getting the type of 'self' (line 2221)
            self_105542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2221, 15), 'self')
            # Obtaining the member 'rounding_size' of a type (line 2221)
            rounding_size_105543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2221, 15), self_105542, 'rounding_size')
            # Testing the type of an if condition (line 2221)
            if_condition_105544 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2221, 12), rounding_size_105543)
            # Assigning a type to the variable 'if_condition_105544' (line 2221)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2221, 12), 'if_condition_105544', if_condition_105544)
            # SSA begins for if statement (line 2221)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a BinOp to a Name (line 2222):
            
            # Assigning a BinOp to a Name (line 2222):
            
            # Assigning a BinOp to a Name (line 2222):
            # Getting the type of 'mutation_size' (line 2222)
            mutation_size_105545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 21), 'mutation_size')
            # Getting the type of 'self' (line 2222)
            self_105546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 37), 'self')
            # Obtaining the member 'rounding_size' of a type (line 2222)
            rounding_size_105547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2222, 37), self_105546, 'rounding_size')
            # Applying the binary operator '*' (line 2222)
            result_mul_105548 = python_operator(stypy.reporting.localization.Localization(__file__, 2222, 21), '*', mutation_size_105545, rounding_size_105547)
            
            # Assigning a type to the variable 'dr' (line 2222)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2222, 16), 'dr', result_mul_105548)
            # SSA branch for the else part of an if statement (line 2221)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Name to a Name (line 2224):
            
            # Assigning a Name to a Name (line 2224):
            
            # Assigning a Name to a Name (line 2224):
            # Getting the type of 'pad' (line 2224)
            pad_105549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 21), 'pad')
            # Assigning a type to the variable 'dr' (line 2224)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2224, 16), 'dr', pad_105549)
            # SSA join for if statement (line 2221)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Tuple to a Tuple (line 2226):
            
            # Assigning a BinOp to a Name (line 2226):
            
            # Assigning a BinOp to a Name (line 2226):
            # Getting the type of 'width' (line 2226)
            width_105550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2226, 28), 'width')
            float_105551 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2226, 36), 'float')
            # Getting the type of 'pad' (line 2226)
            pad_105552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2226, 41), 'pad')
            # Applying the binary operator '*' (line 2226)
            result_mul_105553 = python_operator(stypy.reporting.localization.Localization(__file__, 2226, 36), '*', float_105551, pad_105552)
            
            # Applying the binary operator '+' (line 2226)
            result_add_105554 = python_operator(stypy.reporting.localization.Localization(__file__, 2226, 28), '+', width_105550, result_mul_105553)
            
            # Assigning a type to the variable 'tuple_assignment_100470' (line 2226)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2226, 12), 'tuple_assignment_100470', result_add_105554)
            
            # Assigning a BinOp to a Name (line 2226):
            
            # Assigning a BinOp to a Name (line 2226):
            # Getting the type of 'height' (line 2226)
            height_105555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2226, 46), 'height')
            float_105556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2226, 55), 'float')
            # Getting the type of 'pad' (line 2226)
            pad_105557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2226, 60), 'pad')
            # Applying the binary operator '*' (line 2226)
            result_mul_105558 = python_operator(stypy.reporting.localization.Localization(__file__, 2226, 55), '*', float_105556, pad_105557)
            
            # Applying the binary operator '+' (line 2226)
            result_add_105559 = python_operator(stypy.reporting.localization.Localization(__file__, 2226, 46), '+', height_105555, result_mul_105558)
            
            # Assigning a type to the variable 'tuple_assignment_100471' (line 2226)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2226, 12), 'tuple_assignment_100471', result_add_105559)
            
            # Assigning a Name to a Name (line 2226):
            
            # Assigning a Name to a Name (line 2226):
            # Getting the type of 'tuple_assignment_100470' (line 2226)
            tuple_assignment_100470_105560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2226, 12), 'tuple_assignment_100470')
            # Assigning a type to the variable 'width' (line 2226)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2226, 12), 'width', tuple_assignment_100470_105560)
            
            # Assigning a Name to a Name (line 2226):
            
            # Assigning a Name to a Name (line 2226):
            # Getting the type of 'tuple_assignment_100471' (line 2226)
            tuple_assignment_100471_105561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2226, 12), 'tuple_assignment_100471')
            # Assigning a type to the variable 'height' (line 2226)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2226, 19), 'height', tuple_assignment_100471_105561)
            
            # Assigning a Tuple to a Tuple (line 2228):
            
            # Assigning a BinOp to a Name (line 2228):
            
            # Assigning a BinOp to a Name (line 2228):
            # Getting the type of 'x0' (line 2228)
            x0_105562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 21), 'x0')
            # Getting the type of 'pad' (line 2228)
            pad_105563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 26), 'pad')
            # Applying the binary operator '-' (line 2228)
            result_sub_105564 = python_operator(stypy.reporting.localization.Localization(__file__, 2228, 21), '-', x0_105562, pad_105563)
            
            # Assigning a type to the variable 'tuple_assignment_100472' (line 2228)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2228, 12), 'tuple_assignment_100472', result_sub_105564)
            
            # Assigning a BinOp to a Name (line 2228):
            
            # Assigning a BinOp to a Name (line 2228):
            # Getting the type of 'y0' (line 2228)
            y0_105565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 31), 'y0')
            # Getting the type of 'pad' (line 2228)
            pad_105566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 36), 'pad')
            # Applying the binary operator '-' (line 2228)
            result_sub_105567 = python_operator(stypy.reporting.localization.Localization(__file__, 2228, 31), '-', y0_105565, pad_105566)
            
            # Assigning a type to the variable 'tuple_assignment_100473' (line 2228)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2228, 12), 'tuple_assignment_100473', result_sub_105567)
            
            # Assigning a Name to a Name (line 2228):
            
            # Assigning a Name to a Name (line 2228):
            # Getting the type of 'tuple_assignment_100472' (line 2228)
            tuple_assignment_100472_105568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 12), 'tuple_assignment_100472')
            # Assigning a type to the variable 'x0' (line 2228)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2228, 12), 'x0', tuple_assignment_100472_105568)
            
            # Assigning a Name to a Name (line 2228):
            
            # Assigning a Name to a Name (line 2228):
            # Getting the type of 'tuple_assignment_100473' (line 2228)
            tuple_assignment_100473_105569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 12), 'tuple_assignment_100473')
            # Assigning a type to the variable 'y0' (line 2228)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2228, 16), 'y0', tuple_assignment_100473_105569)
            
            # Assigning a Tuple to a Tuple (line 2229):
            
            # Assigning a BinOp to a Name (line 2229):
            
            # Assigning a BinOp to a Name (line 2229):
            # Getting the type of 'x0' (line 2229)
            x0_105570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2229, 21), 'x0')
            # Getting the type of 'width' (line 2229)
            width_105571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2229, 26), 'width')
            # Applying the binary operator '+' (line 2229)
            result_add_105572 = python_operator(stypy.reporting.localization.Localization(__file__, 2229, 21), '+', x0_105570, width_105571)
            
            # Assigning a type to the variable 'tuple_assignment_100474' (line 2229)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2229, 12), 'tuple_assignment_100474', result_add_105572)
            
            # Assigning a BinOp to a Name (line 2229):
            
            # Assigning a BinOp to a Name (line 2229):
            # Getting the type of 'y0' (line 2229)
            y0_105573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2229, 33), 'y0')
            # Getting the type of 'height' (line 2229)
            height_105574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2229, 38), 'height')
            # Applying the binary operator '+' (line 2229)
            result_add_105575 = python_operator(stypy.reporting.localization.Localization(__file__, 2229, 33), '+', y0_105573, height_105574)
            
            # Assigning a type to the variable 'tuple_assignment_100475' (line 2229)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2229, 12), 'tuple_assignment_100475', result_add_105575)
            
            # Assigning a Name to a Name (line 2229):
            
            # Assigning a Name to a Name (line 2229):
            # Getting the type of 'tuple_assignment_100474' (line 2229)
            tuple_assignment_100474_105576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2229, 12), 'tuple_assignment_100474')
            # Assigning a type to the variable 'x1' (line 2229)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2229, 12), 'x1', tuple_assignment_100474_105576)
            
            # Assigning a Name to a Name (line 2229):
            
            # Assigning a Name to a Name (line 2229):
            # Getting the type of 'tuple_assignment_100475' (line 2229)
            tuple_assignment_100475_105577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2229, 12), 'tuple_assignment_100475')
            # Assigning a type to the variable 'y1' (line 2229)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2229, 16), 'y1', tuple_assignment_100475_105577)
            
            # Assigning a List to a Name (line 2233):
            
            # Assigning a List to a Name (line 2233):
            
            # Assigning a List to a Name (line 2233):
            
            # Obtaining an instance of the builtin type 'list' (line 2233)
            list_105578 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2233, 17), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2233)
            # Adding element type (line 2233)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2233)
            tuple_105579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2233, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2233)
            # Adding element type (line 2233)
            # Getting the type of 'x0' (line 2233)
            x0_105580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2233, 19), 'x0')
            # Getting the type of 'dr' (line 2233)
            dr_105581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2233, 24), 'dr')
            # Applying the binary operator '+' (line 2233)
            result_add_105582 = python_operator(stypy.reporting.localization.Localization(__file__, 2233, 19), '+', x0_105580, dr_105581)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2233, 19), tuple_105579, result_add_105582)
            # Adding element type (line 2233)
            # Getting the type of 'y0' (line 2233)
            y0_105583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2233, 28), 'y0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2233, 19), tuple_105579, y0_105583)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2233, 17), list_105578, tuple_105579)
            # Adding element type (line 2233)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2234)
            tuple_105584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2234, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2234)
            # Adding element type (line 2234)
            # Getting the type of 'x1' (line 2234)
            x1_105585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2234, 19), 'x1')
            # Getting the type of 'dr' (line 2234)
            dr_105586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2234, 24), 'dr')
            # Applying the binary operator '-' (line 2234)
            result_sub_105587 = python_operator(stypy.reporting.localization.Localization(__file__, 2234, 19), '-', x1_105585, dr_105586)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2234, 19), tuple_105584, result_sub_105587)
            # Adding element type (line 2234)
            # Getting the type of 'y0' (line 2234)
            y0_105588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2234, 28), 'y0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2234, 19), tuple_105584, y0_105588)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2233, 17), list_105578, tuple_105584)
            # Adding element type (line 2233)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2235)
            tuple_105589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2235, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2235)
            # Adding element type (line 2235)
            # Getting the type of 'x1' (line 2235)
            x1_105590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2235, 19), 'x1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2235, 19), tuple_105589, x1_105590)
            # Adding element type (line 2235)
            # Getting the type of 'y0' (line 2235)
            y0_105591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2235, 23), 'y0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2235, 19), tuple_105589, y0_105591)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2233, 17), list_105578, tuple_105589)
            # Adding element type (line 2233)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2235)
            tuple_105592 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2235, 29), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2235)
            # Adding element type (line 2235)
            # Getting the type of 'x1' (line 2235)
            x1_105593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2235, 29), 'x1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2235, 29), tuple_105592, x1_105593)
            # Adding element type (line 2235)
            # Getting the type of 'y0' (line 2235)
            y0_105594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2235, 33), 'y0')
            # Getting the type of 'dr' (line 2235)
            dr_105595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2235, 38), 'dr')
            # Applying the binary operator '+' (line 2235)
            result_add_105596 = python_operator(stypy.reporting.localization.Localization(__file__, 2235, 33), '+', y0_105594, dr_105595)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2235, 29), tuple_105592, result_add_105596)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2233, 17), list_105578, tuple_105592)
            # Adding element type (line 2233)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2236)
            tuple_105597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2236, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2236)
            # Adding element type (line 2236)
            # Getting the type of 'x1' (line 2236)
            x1_105598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 19), 'x1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2236, 19), tuple_105597, x1_105598)
            # Adding element type (line 2236)
            # Getting the type of 'y1' (line 2236)
            y1_105599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 23), 'y1')
            # Getting the type of 'dr' (line 2236)
            dr_105600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 28), 'dr')
            # Applying the binary operator '-' (line 2236)
            result_sub_105601 = python_operator(stypy.reporting.localization.Localization(__file__, 2236, 23), '-', y1_105599, dr_105600)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2236, 19), tuple_105597, result_sub_105601)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2233, 17), list_105578, tuple_105597)
            # Adding element type (line 2233)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2237)
            tuple_105602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2237, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2237)
            # Adding element type (line 2237)
            # Getting the type of 'x1' (line 2237)
            x1_105603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 19), 'x1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2237, 19), tuple_105602, x1_105603)
            # Adding element type (line 2237)
            # Getting the type of 'y1' (line 2237)
            y1_105604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 23), 'y1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2237, 19), tuple_105602, y1_105604)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2233, 17), list_105578, tuple_105602)
            # Adding element type (line 2233)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2237)
            tuple_105605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2237, 29), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2237)
            # Adding element type (line 2237)
            # Getting the type of 'x1' (line 2237)
            x1_105606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 29), 'x1')
            # Getting the type of 'dr' (line 2237)
            dr_105607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 34), 'dr')
            # Applying the binary operator '-' (line 2237)
            result_sub_105608 = python_operator(stypy.reporting.localization.Localization(__file__, 2237, 29), '-', x1_105606, dr_105607)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2237, 29), tuple_105605, result_sub_105608)
            # Adding element type (line 2237)
            # Getting the type of 'y1' (line 2237)
            y1_105609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 38), 'y1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2237, 29), tuple_105605, y1_105609)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2233, 17), list_105578, tuple_105605)
            # Adding element type (line 2233)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2238)
            tuple_105610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2238, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2238)
            # Adding element type (line 2238)
            # Getting the type of 'x0' (line 2238)
            x0_105611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2238, 19), 'x0')
            # Getting the type of 'dr' (line 2238)
            dr_105612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2238, 24), 'dr')
            # Applying the binary operator '+' (line 2238)
            result_add_105613 = python_operator(stypy.reporting.localization.Localization(__file__, 2238, 19), '+', x0_105611, dr_105612)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2238, 19), tuple_105610, result_add_105613)
            # Adding element type (line 2238)
            # Getting the type of 'y1' (line 2238)
            y1_105614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2238, 28), 'y1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2238, 19), tuple_105610, y1_105614)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2233, 17), list_105578, tuple_105610)
            # Adding element type (line 2233)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2239)
            tuple_105615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2239, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2239)
            # Adding element type (line 2239)
            # Getting the type of 'x0' (line 2239)
            x0_105616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2239, 19), 'x0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2239, 19), tuple_105615, x0_105616)
            # Adding element type (line 2239)
            # Getting the type of 'y1' (line 2239)
            y1_105617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2239, 23), 'y1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2239, 19), tuple_105615, y1_105617)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2233, 17), list_105578, tuple_105615)
            # Adding element type (line 2233)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2239)
            tuple_105618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2239, 29), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2239)
            # Adding element type (line 2239)
            # Getting the type of 'x0' (line 2239)
            x0_105619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2239, 29), 'x0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2239, 29), tuple_105618, x0_105619)
            # Adding element type (line 2239)
            # Getting the type of 'y1' (line 2239)
            y1_105620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2239, 33), 'y1')
            # Getting the type of 'dr' (line 2239)
            dr_105621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2239, 38), 'dr')
            # Applying the binary operator '-' (line 2239)
            result_sub_105622 = python_operator(stypy.reporting.localization.Localization(__file__, 2239, 33), '-', y1_105620, dr_105621)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2239, 29), tuple_105618, result_sub_105622)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2233, 17), list_105578, tuple_105618)
            # Adding element type (line 2233)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2240)
            tuple_105623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2240, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2240)
            # Adding element type (line 2240)
            # Getting the type of 'x0' (line 2240)
            x0_105624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2240, 19), 'x0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2240, 19), tuple_105623, x0_105624)
            # Adding element type (line 2240)
            # Getting the type of 'y0' (line 2240)
            y0_105625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2240, 23), 'y0')
            # Getting the type of 'dr' (line 2240)
            dr_105626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2240, 28), 'dr')
            # Applying the binary operator '+' (line 2240)
            result_add_105627 = python_operator(stypy.reporting.localization.Localization(__file__, 2240, 23), '+', y0_105625, dr_105626)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2240, 19), tuple_105623, result_add_105627)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2233, 17), list_105578, tuple_105623)
            # Adding element type (line 2233)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2241)
            tuple_105628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2241, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2241)
            # Adding element type (line 2241)
            # Getting the type of 'x0' (line 2241)
            x0_105629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2241, 19), 'x0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2241, 19), tuple_105628, x0_105629)
            # Adding element type (line 2241)
            # Getting the type of 'y0' (line 2241)
            y0_105630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2241, 23), 'y0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2241, 19), tuple_105628, y0_105630)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2233, 17), list_105578, tuple_105628)
            # Adding element type (line 2233)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2241)
            tuple_105631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2241, 29), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2241)
            # Adding element type (line 2241)
            # Getting the type of 'x0' (line 2241)
            x0_105632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2241, 29), 'x0')
            # Getting the type of 'dr' (line 2241)
            dr_105633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2241, 34), 'dr')
            # Applying the binary operator '+' (line 2241)
            result_add_105634 = python_operator(stypy.reporting.localization.Localization(__file__, 2241, 29), '+', x0_105632, dr_105633)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2241, 29), tuple_105631, result_add_105634)
            # Adding element type (line 2241)
            # Getting the type of 'y0' (line 2241)
            y0_105635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2241, 38), 'y0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2241, 29), tuple_105631, y0_105635)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2233, 17), list_105578, tuple_105631)
            # Adding element type (line 2233)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2242)
            tuple_105636 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2242, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2242)
            # Adding element type (line 2242)
            # Getting the type of 'x0' (line 2242)
            x0_105637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2242, 19), 'x0')
            # Getting the type of 'dr' (line 2242)
            dr_105638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2242, 24), 'dr')
            # Applying the binary operator '+' (line 2242)
            result_add_105639 = python_operator(stypy.reporting.localization.Localization(__file__, 2242, 19), '+', x0_105637, dr_105638)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2242, 19), tuple_105636, result_add_105639)
            # Adding element type (line 2242)
            # Getting the type of 'y0' (line 2242)
            y0_105640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2242, 28), 'y0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2242, 19), tuple_105636, y0_105640)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2233, 17), list_105578, tuple_105636)
            
            # Assigning a type to the variable 'cp' (line 2233)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2233, 12), 'cp', list_105578)
            
            # Assigning a List to a Name (line 2244):
            
            # Assigning a List to a Name (line 2244):
            
            # Assigning a List to a Name (line 2244):
            
            # Obtaining an instance of the builtin type 'list' (line 2244)
            list_105641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2244, 18), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2244)
            # Adding element type (line 2244)
            # Getting the type of 'Path' (line 2244)
            Path_105642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 19), 'Path')
            # Obtaining the member 'MOVETO' of a type (line 2244)
            MOVETO_105643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2244, 19), Path_105642, 'MOVETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2244, 18), list_105641, MOVETO_105643)
            # Adding element type (line 2244)
            # Getting the type of 'Path' (line 2245)
            Path_105644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 19), 'Path')
            # Obtaining the member 'LINETO' of a type (line 2245)
            LINETO_105645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2245, 19), Path_105644, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2244, 18), list_105641, LINETO_105645)
            # Adding element type (line 2244)
            # Getting the type of 'Path' (line 2246)
            Path_105646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2246, 19), 'Path')
            # Obtaining the member 'CURVE3' of a type (line 2246)
            CURVE3_105647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2246, 19), Path_105646, 'CURVE3')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2244, 18), list_105641, CURVE3_105647)
            # Adding element type (line 2244)
            # Getting the type of 'Path' (line 2246)
            Path_105648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2246, 32), 'Path')
            # Obtaining the member 'CURVE3' of a type (line 2246)
            CURVE3_105649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2246, 32), Path_105648, 'CURVE3')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2244, 18), list_105641, CURVE3_105649)
            # Adding element type (line 2244)
            # Getting the type of 'Path' (line 2247)
            Path_105650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2247, 19), 'Path')
            # Obtaining the member 'LINETO' of a type (line 2247)
            LINETO_105651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2247, 19), Path_105650, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2244, 18), list_105641, LINETO_105651)
            # Adding element type (line 2244)
            # Getting the type of 'Path' (line 2248)
            Path_105652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2248, 19), 'Path')
            # Obtaining the member 'CURVE3' of a type (line 2248)
            CURVE3_105653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2248, 19), Path_105652, 'CURVE3')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2244, 18), list_105641, CURVE3_105653)
            # Adding element type (line 2244)
            # Getting the type of 'Path' (line 2248)
            Path_105654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2248, 32), 'Path')
            # Obtaining the member 'CURVE3' of a type (line 2248)
            CURVE3_105655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2248, 32), Path_105654, 'CURVE3')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2244, 18), list_105641, CURVE3_105655)
            # Adding element type (line 2244)
            # Getting the type of 'Path' (line 2249)
            Path_105656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2249, 19), 'Path')
            # Obtaining the member 'LINETO' of a type (line 2249)
            LINETO_105657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2249, 19), Path_105656, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2244, 18), list_105641, LINETO_105657)
            # Adding element type (line 2244)
            # Getting the type of 'Path' (line 2250)
            Path_105658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2250, 19), 'Path')
            # Obtaining the member 'CURVE3' of a type (line 2250)
            CURVE3_105659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2250, 19), Path_105658, 'CURVE3')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2244, 18), list_105641, CURVE3_105659)
            # Adding element type (line 2244)
            # Getting the type of 'Path' (line 2250)
            Path_105660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2250, 32), 'Path')
            # Obtaining the member 'CURVE3' of a type (line 2250)
            CURVE3_105661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2250, 32), Path_105660, 'CURVE3')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2244, 18), list_105641, CURVE3_105661)
            # Adding element type (line 2244)
            # Getting the type of 'Path' (line 2251)
            Path_105662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2251, 19), 'Path')
            # Obtaining the member 'LINETO' of a type (line 2251)
            LINETO_105663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2251, 19), Path_105662, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2244, 18), list_105641, LINETO_105663)
            # Adding element type (line 2244)
            # Getting the type of 'Path' (line 2252)
            Path_105664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2252, 19), 'Path')
            # Obtaining the member 'CURVE3' of a type (line 2252)
            CURVE3_105665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2252, 19), Path_105664, 'CURVE3')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2244, 18), list_105641, CURVE3_105665)
            # Adding element type (line 2244)
            # Getting the type of 'Path' (line 2252)
            Path_105666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2252, 32), 'Path')
            # Obtaining the member 'CURVE3' of a type (line 2252)
            CURVE3_105667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2252, 32), Path_105666, 'CURVE3')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2244, 18), list_105641, CURVE3_105667)
            # Adding element type (line 2244)
            # Getting the type of 'Path' (line 2253)
            Path_105668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2253, 19), 'Path')
            # Obtaining the member 'CLOSEPOLY' of a type (line 2253)
            CLOSEPOLY_105669 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2253, 19), Path_105668, 'CLOSEPOLY')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2244, 18), list_105641, CLOSEPOLY_105669)
            
            # Assigning a type to the variable 'com' (line 2244)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2244, 12), 'com', list_105641)
            
            # Assigning a Call to a Name (line 2255):
            
            # Assigning a Call to a Name (line 2255):
            
            # Assigning a Call to a Name (line 2255):
            
            # Call to Path(...): (line 2255)
            # Processing the call arguments (line 2255)
            # Getting the type of 'cp' (line 2255)
            cp_105671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 24), 'cp', False)
            # Getting the type of 'com' (line 2255)
            com_105672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 28), 'com', False)
            # Processing the call keyword arguments (line 2255)
            kwargs_105673 = {}
            # Getting the type of 'Path' (line 2255)
            Path_105670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 19), 'Path', False)
            # Calling Path(args, kwargs) (line 2255)
            Path_call_result_105674 = invoke(stypy.reporting.localization.Localization(__file__, 2255, 19), Path_105670, *[cp_105671, com_105672], **kwargs_105673)
            
            # Assigning a type to the variable 'path' (line 2255)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2255, 12), 'path', Path_call_result_105674)
            # Getting the type of 'path' (line 2257)
            path_105675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2257, 19), 'path')
            # Assigning a type to the variable 'stypy_return_type' (line 2257)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2257, 12), 'stypy_return_type', path_105675)
            
            # ################# End of 'transmute(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'transmute' in the type store
            # Getting the type of 'stypy_return_type' (line 2215)
            stypy_return_type_105676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2215, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_105676)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'transmute'
            return stypy_return_type_105676

    
    # Assigning a type to the variable 'Round' (line 2198)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2198, 4), 'Round', Round)
    
    # Assigning a Name to a Subscript (line 2259):
    
    # Assigning a Name to a Subscript (line 2259):
    # Declaration of the 'Round4' class
    # Getting the type of '_Base' (line 2261)
    _Base_105677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 17), '_Base')

    class Round4(_Base_105677, ):
        unicode_105678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2264, (-1)), 'unicode', u'\n        Another box with round edges.\n        ')

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            float_105679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2266, 31), 'float')
            # Getting the type of 'None' (line 2266)
            None_105680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2266, 50), 'None')
            defaults = [float_105679, None_105680]
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 2266, 8, False)
            # Assigning a type to the variable 'self' (line 2267)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2267, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Round4.__init__', ['pad', 'rounding_size'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, ['pad', 'rounding_size'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            unicode_105681 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2273, (-1)), 'unicode', u'\n            *pad*\n              amount of padding\n\n            *rounding_size*\n              rounding size of edges. *pad* if None\n            ')
            
            # Assigning a Name to a Attribute (line 2275):
            
            # Assigning a Name to a Attribute (line 2275):
            
            # Assigning a Name to a Attribute (line 2275):
            # Getting the type of 'pad' (line 2275)
            pad_105682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2275, 23), 'pad')
            # Getting the type of 'self' (line 2275)
            self_105683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2275, 12), 'self')
            # Setting the type of the member 'pad' of a type (line 2275)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2275, 12), self_105683, 'pad', pad_105682)
            
            # Assigning a Name to a Attribute (line 2276):
            
            # Assigning a Name to a Attribute (line 2276):
            
            # Assigning a Name to a Attribute (line 2276):
            # Getting the type of 'rounding_size' (line 2276)
            rounding_size_105684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 33), 'rounding_size')
            # Getting the type of 'self' (line 2276)
            self_105685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 12), 'self')
            # Setting the type of the member 'rounding_size' of a type (line 2276)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2276, 12), self_105685, 'rounding_size', rounding_size_105684)
            
            # Call to __init__(...): (line 2277)
            # Processing the call keyword arguments (line 2277)
            kwargs_105693 = {}
            
            # Call to super(...): (line 2277)
            # Processing the call arguments (line 2277)
            # Getting the type of 'BoxStyle' (line 2277)
            BoxStyle_105687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2277, 18), 'BoxStyle', False)
            # Obtaining the member 'Round4' of a type (line 2277)
            Round4_105688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2277, 18), BoxStyle_105687, 'Round4')
            # Getting the type of 'self' (line 2277)
            self_105689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2277, 35), 'self', False)
            # Processing the call keyword arguments (line 2277)
            kwargs_105690 = {}
            # Getting the type of 'super' (line 2277)
            super_105686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2277, 12), 'super', False)
            # Calling super(args, kwargs) (line 2277)
            super_call_result_105691 = invoke(stypy.reporting.localization.Localization(__file__, 2277, 12), super_105686, *[Round4_105688, self_105689], **kwargs_105690)
            
            # Obtaining the member '__init__' of a type (line 2277)
            init___105692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2277, 12), super_call_result_105691, '__init__')
            # Calling __init__(args, kwargs) (line 2277)
            init___call_result_105694 = invoke(stypy.reporting.localization.Localization(__file__, 2277, 12), init___105692, *[], **kwargs_105693)
            
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()


        @norecursion
        def transmute(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'transmute'
            module_type_store = module_type_store.open_function_context('transmute', 2279, 8, False)
            # Assigning a type to the variable 'self' (line 2280)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2280, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            Round4.transmute.__dict__.__setitem__('stypy_localization', localization)
            Round4.transmute.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            Round4.transmute.__dict__.__setitem__('stypy_type_store', module_type_store)
            Round4.transmute.__dict__.__setitem__('stypy_function_name', 'Round4.transmute')
            Round4.transmute.__dict__.__setitem__('stypy_param_names_list', ['x0', 'y0', 'width', 'height', 'mutation_size'])
            Round4.transmute.__dict__.__setitem__('stypy_varargs_param_name', None)
            Round4.transmute.__dict__.__setitem__('stypy_kwargs_param_name', None)
            Round4.transmute.__dict__.__setitem__('stypy_call_defaults', defaults)
            Round4.transmute.__dict__.__setitem__('stypy_call_varargs', varargs)
            Round4.transmute.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            Round4.transmute.__dict__.__setitem__('stypy_declared_arg_number', 6)
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Round4.transmute', ['x0', 'y0', 'width', 'height', 'mutation_size'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'transmute', localization, ['x0', 'y0', 'width', 'height', 'mutation_size'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'transmute(...)' code ##################

            
            # Assigning a BinOp to a Name (line 2282):
            
            # Assigning a BinOp to a Name (line 2282):
            
            # Assigning a BinOp to a Name (line 2282):
            # Getting the type of 'mutation_size' (line 2282)
            mutation_size_105695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2282, 18), 'mutation_size')
            # Getting the type of 'self' (line 2282)
            self_105696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2282, 34), 'self')
            # Obtaining the member 'pad' of a type (line 2282)
            pad_105697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2282, 34), self_105696, 'pad')
            # Applying the binary operator '*' (line 2282)
            result_mul_105698 = python_operator(stypy.reporting.localization.Localization(__file__, 2282, 18), '*', mutation_size_105695, pad_105697)
            
            # Assigning a type to the variable 'pad' (line 2282)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2282, 12), 'pad', result_mul_105698)
            
            # Getting the type of 'self' (line 2285)
            self_105699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2285, 15), 'self')
            # Obtaining the member 'rounding_size' of a type (line 2285)
            rounding_size_105700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2285, 15), self_105699, 'rounding_size')
            # Testing the type of an if condition (line 2285)
            if_condition_105701 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2285, 12), rounding_size_105700)
            # Assigning a type to the variable 'if_condition_105701' (line 2285)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2285, 12), 'if_condition_105701', if_condition_105701)
            # SSA begins for if statement (line 2285)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a BinOp to a Name (line 2286):
            
            # Assigning a BinOp to a Name (line 2286):
            
            # Assigning a BinOp to a Name (line 2286):
            # Getting the type of 'mutation_size' (line 2286)
            mutation_size_105702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2286, 21), 'mutation_size')
            # Getting the type of 'self' (line 2286)
            self_105703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2286, 37), 'self')
            # Obtaining the member 'rounding_size' of a type (line 2286)
            rounding_size_105704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2286, 37), self_105703, 'rounding_size')
            # Applying the binary operator '*' (line 2286)
            result_mul_105705 = python_operator(stypy.reporting.localization.Localization(__file__, 2286, 21), '*', mutation_size_105702, rounding_size_105704)
            
            # Assigning a type to the variable 'dr' (line 2286)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2286, 16), 'dr', result_mul_105705)
            # SSA branch for the else part of an if statement (line 2285)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a BinOp to a Name (line 2288):
            
            # Assigning a BinOp to a Name (line 2288):
            
            # Assigning a BinOp to a Name (line 2288):
            # Getting the type of 'pad' (line 2288)
            pad_105706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2288, 21), 'pad')
            float_105707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2288, 27), 'float')
            # Applying the binary operator 'div' (line 2288)
            result_div_105708 = python_operator(stypy.reporting.localization.Localization(__file__, 2288, 21), 'div', pad_105706, float_105707)
            
            # Assigning a type to the variable 'dr' (line 2288)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2288, 16), 'dr', result_div_105708)
            # SSA join for if statement (line 2285)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Tuple to a Tuple (line 2290):
            
            # Assigning a BinOp to a Name (line 2290):
            
            # Assigning a BinOp to a Name (line 2290):
            # Getting the type of 'width' (line 2290)
            width_105709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2290, 29), 'width')
            float_105710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2290, 37), 'float')
            # Getting the type of 'pad' (line 2290)
            pad_105711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2290, 42), 'pad')
            # Applying the binary operator '*' (line 2290)
            result_mul_105712 = python_operator(stypy.reporting.localization.Localization(__file__, 2290, 37), '*', float_105710, pad_105711)
            
            # Applying the binary operator '+' (line 2290)
            result_add_105713 = python_operator(stypy.reporting.localization.Localization(__file__, 2290, 29), '+', width_105709, result_mul_105712)
            
            int_105714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2290, 48), 'int')
            # Getting the type of 'dr' (line 2290)
            dr_105715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2290, 52), 'dr')
            # Applying the binary operator '*' (line 2290)
            result_mul_105716 = python_operator(stypy.reporting.localization.Localization(__file__, 2290, 48), '*', int_105714, dr_105715)
            
            # Applying the binary operator '-' (line 2290)
            result_sub_105717 = python_operator(stypy.reporting.localization.Localization(__file__, 2290, 46), '-', result_add_105713, result_mul_105716)
            
            # Assigning a type to the variable 'tuple_assignment_100476' (line 2290)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2290, 12), 'tuple_assignment_100476', result_sub_105717)
            
            # Assigning a BinOp to a Name (line 2290):
            
            # Assigning a BinOp to a Name (line 2290):
            # Getting the type of 'height' (line 2291)
            height_105718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2291, 29), 'height')
            float_105719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2291, 38), 'float')
            # Getting the type of 'pad' (line 2291)
            pad_105720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2291, 43), 'pad')
            # Applying the binary operator '*' (line 2291)
            result_mul_105721 = python_operator(stypy.reporting.localization.Localization(__file__, 2291, 38), '*', float_105719, pad_105720)
            
            # Applying the binary operator '+' (line 2291)
            result_add_105722 = python_operator(stypy.reporting.localization.Localization(__file__, 2291, 29), '+', height_105718, result_mul_105721)
            
            int_105723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2291, 49), 'int')
            # Getting the type of 'dr' (line 2291)
            dr_105724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2291, 53), 'dr')
            # Applying the binary operator '*' (line 2291)
            result_mul_105725 = python_operator(stypy.reporting.localization.Localization(__file__, 2291, 49), '*', int_105723, dr_105724)
            
            # Applying the binary operator '-' (line 2291)
            result_sub_105726 = python_operator(stypy.reporting.localization.Localization(__file__, 2291, 47), '-', result_add_105722, result_mul_105725)
            
            # Assigning a type to the variable 'tuple_assignment_100477' (line 2290)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2290, 12), 'tuple_assignment_100477', result_sub_105726)
            
            # Assigning a Name to a Name (line 2290):
            
            # Assigning a Name to a Name (line 2290):
            # Getting the type of 'tuple_assignment_100476' (line 2290)
            tuple_assignment_100476_105727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2290, 12), 'tuple_assignment_100476')
            # Assigning a type to the variable 'width' (line 2290)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2290, 12), 'width', tuple_assignment_100476_105727)
            
            # Assigning a Name to a Name (line 2290):
            
            # Assigning a Name to a Name (line 2290):
            # Getting the type of 'tuple_assignment_100477' (line 2290)
            tuple_assignment_100477_105728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2290, 12), 'tuple_assignment_100477')
            # Assigning a type to the variable 'height' (line 2290)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2290, 19), 'height', tuple_assignment_100477_105728)
            
            # Assigning a Tuple to a Tuple (line 2293):
            
            # Assigning a BinOp to a Name (line 2293):
            
            # Assigning a BinOp to a Name (line 2293):
            # Getting the type of 'x0' (line 2293)
            x0_105729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 21), 'x0')
            # Getting the type of 'pad' (line 2293)
            pad_105730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 26), 'pad')
            # Applying the binary operator '-' (line 2293)
            result_sub_105731 = python_operator(stypy.reporting.localization.Localization(__file__, 2293, 21), '-', x0_105729, pad_105730)
            
            # Getting the type of 'dr' (line 2293)
            dr_105732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 32), 'dr')
            # Applying the binary operator '+' (line 2293)
            result_add_105733 = python_operator(stypy.reporting.localization.Localization(__file__, 2293, 30), '+', result_sub_105731, dr_105732)
            
            # Assigning a type to the variable 'tuple_assignment_100478' (line 2293)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2293, 12), 'tuple_assignment_100478', result_add_105733)
            
            # Assigning a BinOp to a Name (line 2293):
            
            # Assigning a BinOp to a Name (line 2293):
            # Getting the type of 'y0' (line 2293)
            y0_105734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 36), 'y0')
            # Getting the type of 'pad' (line 2293)
            pad_105735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 41), 'pad')
            # Applying the binary operator '-' (line 2293)
            result_sub_105736 = python_operator(stypy.reporting.localization.Localization(__file__, 2293, 36), '-', y0_105734, pad_105735)
            
            # Getting the type of 'dr' (line 2293)
            dr_105737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 47), 'dr')
            # Applying the binary operator '+' (line 2293)
            result_add_105738 = python_operator(stypy.reporting.localization.Localization(__file__, 2293, 45), '+', result_sub_105736, dr_105737)
            
            # Assigning a type to the variable 'tuple_assignment_100479' (line 2293)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2293, 12), 'tuple_assignment_100479', result_add_105738)
            
            # Assigning a Name to a Name (line 2293):
            
            # Assigning a Name to a Name (line 2293):
            # Getting the type of 'tuple_assignment_100478' (line 2293)
            tuple_assignment_100478_105739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 12), 'tuple_assignment_100478')
            # Assigning a type to the variable 'x0' (line 2293)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2293, 12), 'x0', tuple_assignment_100478_105739)
            
            # Assigning a Name to a Name (line 2293):
            
            # Assigning a Name to a Name (line 2293):
            # Getting the type of 'tuple_assignment_100479' (line 2293)
            tuple_assignment_100479_105740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 12), 'tuple_assignment_100479')
            # Assigning a type to the variable 'y0' (line 2293)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2293, 16), 'y0', tuple_assignment_100479_105740)
            
            # Assigning a Tuple to a Tuple (line 2294):
            
            # Assigning a BinOp to a Name (line 2294):
            
            # Assigning a BinOp to a Name (line 2294):
            # Getting the type of 'x0' (line 2294)
            x0_105741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 21), 'x0')
            # Getting the type of 'width' (line 2294)
            width_105742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 26), 'width')
            # Applying the binary operator '+' (line 2294)
            result_add_105743 = python_operator(stypy.reporting.localization.Localization(__file__, 2294, 21), '+', x0_105741, width_105742)
            
            # Assigning a type to the variable 'tuple_assignment_100480' (line 2294)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2294, 12), 'tuple_assignment_100480', result_add_105743)
            
            # Assigning a BinOp to a Name (line 2294):
            
            # Assigning a BinOp to a Name (line 2294):
            # Getting the type of 'y0' (line 2294)
            y0_105744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 33), 'y0')
            # Getting the type of 'height' (line 2294)
            height_105745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 38), 'height')
            # Applying the binary operator '+' (line 2294)
            result_add_105746 = python_operator(stypy.reporting.localization.Localization(__file__, 2294, 33), '+', y0_105744, height_105745)
            
            # Assigning a type to the variable 'tuple_assignment_100481' (line 2294)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2294, 12), 'tuple_assignment_100481', result_add_105746)
            
            # Assigning a Name to a Name (line 2294):
            
            # Assigning a Name to a Name (line 2294):
            # Getting the type of 'tuple_assignment_100480' (line 2294)
            tuple_assignment_100480_105747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 12), 'tuple_assignment_100480')
            # Assigning a type to the variable 'x1' (line 2294)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2294, 12), 'x1', tuple_assignment_100480_105747)
            
            # Assigning a Name to a Name (line 2294):
            
            # Assigning a Name to a Name (line 2294):
            # Getting the type of 'tuple_assignment_100481' (line 2294)
            tuple_assignment_100481_105748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 12), 'tuple_assignment_100481')
            # Assigning a type to the variable 'y1' (line 2294)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2294, 16), 'y1', tuple_assignment_100481_105748)
            
            # Assigning a List to a Name (line 2296):
            
            # Assigning a List to a Name (line 2296):
            
            # Assigning a List to a Name (line 2296):
            
            # Obtaining an instance of the builtin type 'list' (line 2296)
            list_105749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2296, 17), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2296)
            # Adding element type (line 2296)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2296)
            tuple_105750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2296, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2296)
            # Adding element type (line 2296)
            # Getting the type of 'x0' (line 2296)
            x0_105751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2296, 19), 'x0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2296, 19), tuple_105750, x0_105751)
            # Adding element type (line 2296)
            # Getting the type of 'y0' (line 2296)
            y0_105752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2296, 23), 'y0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2296, 19), tuple_105750, y0_105752)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2296, 17), list_105749, tuple_105750)
            # Adding element type (line 2296)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2297)
            tuple_105753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2297, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2297)
            # Adding element type (line 2297)
            # Getting the type of 'x0' (line 2297)
            x0_105754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 19), 'x0')
            # Getting the type of 'dr' (line 2297)
            dr_105755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 24), 'dr')
            # Applying the binary operator '+' (line 2297)
            result_add_105756 = python_operator(stypy.reporting.localization.Localization(__file__, 2297, 19), '+', x0_105754, dr_105755)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2297, 19), tuple_105753, result_add_105756)
            # Adding element type (line 2297)
            # Getting the type of 'y0' (line 2297)
            y0_105757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 28), 'y0')
            # Getting the type of 'dr' (line 2297)
            dr_105758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 33), 'dr')
            # Applying the binary operator '-' (line 2297)
            result_sub_105759 = python_operator(stypy.reporting.localization.Localization(__file__, 2297, 28), '-', y0_105757, dr_105758)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2297, 19), tuple_105753, result_sub_105759)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2296, 17), list_105749, tuple_105753)
            # Adding element type (line 2296)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2297)
            tuple_105760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2297, 39), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2297)
            # Adding element type (line 2297)
            # Getting the type of 'x1' (line 2297)
            x1_105761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 39), 'x1')
            # Getting the type of 'dr' (line 2297)
            dr_105762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 44), 'dr')
            # Applying the binary operator '-' (line 2297)
            result_sub_105763 = python_operator(stypy.reporting.localization.Localization(__file__, 2297, 39), '-', x1_105761, dr_105762)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2297, 39), tuple_105760, result_sub_105763)
            # Adding element type (line 2297)
            # Getting the type of 'y0' (line 2297)
            y0_105764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 48), 'y0')
            # Getting the type of 'dr' (line 2297)
            dr_105765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 53), 'dr')
            # Applying the binary operator '-' (line 2297)
            result_sub_105766 = python_operator(stypy.reporting.localization.Localization(__file__, 2297, 48), '-', y0_105764, dr_105765)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2297, 39), tuple_105760, result_sub_105766)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2296, 17), list_105749, tuple_105760)
            # Adding element type (line 2296)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2297)
            tuple_105767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2297, 59), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2297)
            # Adding element type (line 2297)
            # Getting the type of 'x1' (line 2297)
            x1_105768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 59), 'x1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2297, 59), tuple_105767, x1_105768)
            # Adding element type (line 2297)
            # Getting the type of 'y0' (line 2297)
            y0_105769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 63), 'y0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2297, 59), tuple_105767, y0_105769)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2296, 17), list_105749, tuple_105767)
            # Adding element type (line 2296)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2298)
            tuple_105770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2298, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2298)
            # Adding element type (line 2298)
            # Getting the type of 'x1' (line 2298)
            x1_105771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 19), 'x1')
            # Getting the type of 'dr' (line 2298)
            dr_105772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 24), 'dr')
            # Applying the binary operator '+' (line 2298)
            result_add_105773 = python_operator(stypy.reporting.localization.Localization(__file__, 2298, 19), '+', x1_105771, dr_105772)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2298, 19), tuple_105770, result_add_105773)
            # Adding element type (line 2298)
            # Getting the type of 'y0' (line 2298)
            y0_105774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 28), 'y0')
            # Getting the type of 'dr' (line 2298)
            dr_105775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 33), 'dr')
            # Applying the binary operator '+' (line 2298)
            result_add_105776 = python_operator(stypy.reporting.localization.Localization(__file__, 2298, 28), '+', y0_105774, dr_105775)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2298, 19), tuple_105770, result_add_105776)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2296, 17), list_105749, tuple_105770)
            # Adding element type (line 2296)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2298)
            tuple_105777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2298, 39), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2298)
            # Adding element type (line 2298)
            # Getting the type of 'x1' (line 2298)
            x1_105778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 39), 'x1')
            # Getting the type of 'dr' (line 2298)
            dr_105779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 44), 'dr')
            # Applying the binary operator '+' (line 2298)
            result_add_105780 = python_operator(stypy.reporting.localization.Localization(__file__, 2298, 39), '+', x1_105778, dr_105779)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2298, 39), tuple_105777, result_add_105780)
            # Adding element type (line 2298)
            # Getting the type of 'y1' (line 2298)
            y1_105781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 48), 'y1')
            # Getting the type of 'dr' (line 2298)
            dr_105782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 53), 'dr')
            # Applying the binary operator '-' (line 2298)
            result_sub_105783 = python_operator(stypy.reporting.localization.Localization(__file__, 2298, 48), '-', y1_105781, dr_105782)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2298, 39), tuple_105777, result_sub_105783)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2296, 17), list_105749, tuple_105777)
            # Adding element type (line 2296)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2298)
            tuple_105784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2298, 59), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2298)
            # Adding element type (line 2298)
            # Getting the type of 'x1' (line 2298)
            x1_105785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 59), 'x1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2298, 59), tuple_105784, x1_105785)
            # Adding element type (line 2298)
            # Getting the type of 'y1' (line 2298)
            y1_105786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 63), 'y1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2298, 59), tuple_105784, y1_105786)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2296, 17), list_105749, tuple_105784)
            # Adding element type (line 2296)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2299)
            tuple_105787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2299, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2299)
            # Adding element type (line 2299)
            # Getting the type of 'x1' (line 2299)
            x1_105788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 19), 'x1')
            # Getting the type of 'dr' (line 2299)
            dr_105789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 24), 'dr')
            # Applying the binary operator '-' (line 2299)
            result_sub_105790 = python_operator(stypy.reporting.localization.Localization(__file__, 2299, 19), '-', x1_105788, dr_105789)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2299, 19), tuple_105787, result_sub_105790)
            # Adding element type (line 2299)
            # Getting the type of 'y1' (line 2299)
            y1_105791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 28), 'y1')
            # Getting the type of 'dr' (line 2299)
            dr_105792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 33), 'dr')
            # Applying the binary operator '+' (line 2299)
            result_add_105793 = python_operator(stypy.reporting.localization.Localization(__file__, 2299, 28), '+', y1_105791, dr_105792)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2299, 19), tuple_105787, result_add_105793)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2296, 17), list_105749, tuple_105787)
            # Adding element type (line 2296)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2299)
            tuple_105794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2299, 39), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2299)
            # Adding element type (line 2299)
            # Getting the type of 'x0' (line 2299)
            x0_105795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 39), 'x0')
            # Getting the type of 'dr' (line 2299)
            dr_105796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 44), 'dr')
            # Applying the binary operator '+' (line 2299)
            result_add_105797 = python_operator(stypy.reporting.localization.Localization(__file__, 2299, 39), '+', x0_105795, dr_105796)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2299, 39), tuple_105794, result_add_105797)
            # Adding element type (line 2299)
            # Getting the type of 'y1' (line 2299)
            y1_105798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 48), 'y1')
            # Getting the type of 'dr' (line 2299)
            dr_105799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 53), 'dr')
            # Applying the binary operator '+' (line 2299)
            result_add_105800 = python_operator(stypy.reporting.localization.Localization(__file__, 2299, 48), '+', y1_105798, dr_105799)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2299, 39), tuple_105794, result_add_105800)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2296, 17), list_105749, tuple_105794)
            # Adding element type (line 2296)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2299)
            tuple_105801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2299, 59), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2299)
            # Adding element type (line 2299)
            # Getting the type of 'x0' (line 2299)
            x0_105802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 59), 'x0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2299, 59), tuple_105801, x0_105802)
            # Adding element type (line 2299)
            # Getting the type of 'y1' (line 2299)
            y1_105803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 63), 'y1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2299, 59), tuple_105801, y1_105803)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2296, 17), list_105749, tuple_105801)
            # Adding element type (line 2296)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2300)
            tuple_105804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2300, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2300)
            # Adding element type (line 2300)
            # Getting the type of 'x0' (line 2300)
            x0_105805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 19), 'x0')
            # Getting the type of 'dr' (line 2300)
            dr_105806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 24), 'dr')
            # Applying the binary operator '-' (line 2300)
            result_sub_105807 = python_operator(stypy.reporting.localization.Localization(__file__, 2300, 19), '-', x0_105805, dr_105806)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2300, 19), tuple_105804, result_sub_105807)
            # Adding element type (line 2300)
            # Getting the type of 'y1' (line 2300)
            y1_105808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 28), 'y1')
            # Getting the type of 'dr' (line 2300)
            dr_105809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 33), 'dr')
            # Applying the binary operator '-' (line 2300)
            result_sub_105810 = python_operator(stypy.reporting.localization.Localization(__file__, 2300, 28), '-', y1_105808, dr_105809)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2300, 19), tuple_105804, result_sub_105810)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2296, 17), list_105749, tuple_105804)
            # Adding element type (line 2296)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2300)
            tuple_105811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2300, 39), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2300)
            # Adding element type (line 2300)
            # Getting the type of 'x0' (line 2300)
            x0_105812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 39), 'x0')
            # Getting the type of 'dr' (line 2300)
            dr_105813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 44), 'dr')
            # Applying the binary operator '-' (line 2300)
            result_sub_105814 = python_operator(stypy.reporting.localization.Localization(__file__, 2300, 39), '-', x0_105812, dr_105813)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2300, 39), tuple_105811, result_sub_105814)
            # Adding element type (line 2300)
            # Getting the type of 'y0' (line 2300)
            y0_105815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 48), 'y0')
            # Getting the type of 'dr' (line 2300)
            dr_105816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 53), 'dr')
            # Applying the binary operator '+' (line 2300)
            result_add_105817 = python_operator(stypy.reporting.localization.Localization(__file__, 2300, 48), '+', y0_105815, dr_105816)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2300, 39), tuple_105811, result_add_105817)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2296, 17), list_105749, tuple_105811)
            # Adding element type (line 2296)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2300)
            tuple_105818 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2300, 59), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2300)
            # Adding element type (line 2300)
            # Getting the type of 'x0' (line 2300)
            x0_105819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 59), 'x0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2300, 59), tuple_105818, x0_105819)
            # Adding element type (line 2300)
            # Getting the type of 'y0' (line 2300)
            y0_105820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 63), 'y0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2300, 59), tuple_105818, y0_105820)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2296, 17), list_105749, tuple_105818)
            # Adding element type (line 2296)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2301)
            tuple_105821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2301, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2301)
            # Adding element type (line 2301)
            # Getting the type of 'x0' (line 2301)
            x0_105822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2301, 19), 'x0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2301, 19), tuple_105821, x0_105822)
            # Adding element type (line 2301)
            # Getting the type of 'y0' (line 2301)
            y0_105823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2301, 23), 'y0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2301, 19), tuple_105821, y0_105823)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2296, 17), list_105749, tuple_105821)
            
            # Assigning a type to the variable 'cp' (line 2296)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2296, 12), 'cp', list_105749)
            
            # Assigning a List to a Name (line 2303):
            
            # Assigning a List to a Name (line 2303):
            
            # Assigning a List to a Name (line 2303):
            
            # Obtaining an instance of the builtin type 'list' (line 2303)
            list_105824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2303, 18), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2303)
            # Adding element type (line 2303)
            # Getting the type of 'Path' (line 2303)
            Path_105825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2303, 19), 'Path')
            # Obtaining the member 'MOVETO' of a type (line 2303)
            MOVETO_105826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2303, 19), Path_105825, 'MOVETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2303, 18), list_105824, MOVETO_105826)
            # Adding element type (line 2303)
            # Getting the type of 'Path' (line 2304)
            Path_105827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 19), 'Path')
            # Obtaining the member 'CURVE4' of a type (line 2304)
            CURVE4_105828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2304, 19), Path_105827, 'CURVE4')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2303, 18), list_105824, CURVE4_105828)
            # Adding element type (line 2303)
            # Getting the type of 'Path' (line 2304)
            Path_105829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 32), 'Path')
            # Obtaining the member 'CURVE4' of a type (line 2304)
            CURVE4_105830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2304, 32), Path_105829, 'CURVE4')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2303, 18), list_105824, CURVE4_105830)
            # Adding element type (line 2303)
            # Getting the type of 'Path' (line 2304)
            Path_105831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 45), 'Path')
            # Obtaining the member 'CURVE4' of a type (line 2304)
            CURVE4_105832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2304, 45), Path_105831, 'CURVE4')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2303, 18), list_105824, CURVE4_105832)
            # Adding element type (line 2303)
            # Getting the type of 'Path' (line 2305)
            Path_105833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2305, 19), 'Path')
            # Obtaining the member 'CURVE4' of a type (line 2305)
            CURVE4_105834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2305, 19), Path_105833, 'CURVE4')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2303, 18), list_105824, CURVE4_105834)
            # Adding element type (line 2303)
            # Getting the type of 'Path' (line 2305)
            Path_105835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2305, 32), 'Path')
            # Obtaining the member 'CURVE4' of a type (line 2305)
            CURVE4_105836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2305, 32), Path_105835, 'CURVE4')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2303, 18), list_105824, CURVE4_105836)
            # Adding element type (line 2303)
            # Getting the type of 'Path' (line 2305)
            Path_105837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2305, 45), 'Path')
            # Obtaining the member 'CURVE4' of a type (line 2305)
            CURVE4_105838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2305, 45), Path_105837, 'CURVE4')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2303, 18), list_105824, CURVE4_105838)
            # Adding element type (line 2303)
            # Getting the type of 'Path' (line 2306)
            Path_105839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2306, 19), 'Path')
            # Obtaining the member 'CURVE4' of a type (line 2306)
            CURVE4_105840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2306, 19), Path_105839, 'CURVE4')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2303, 18), list_105824, CURVE4_105840)
            # Adding element type (line 2303)
            # Getting the type of 'Path' (line 2306)
            Path_105841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2306, 32), 'Path')
            # Obtaining the member 'CURVE4' of a type (line 2306)
            CURVE4_105842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2306, 32), Path_105841, 'CURVE4')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2303, 18), list_105824, CURVE4_105842)
            # Adding element type (line 2303)
            # Getting the type of 'Path' (line 2306)
            Path_105843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2306, 45), 'Path')
            # Obtaining the member 'CURVE4' of a type (line 2306)
            CURVE4_105844 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2306, 45), Path_105843, 'CURVE4')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2303, 18), list_105824, CURVE4_105844)
            # Adding element type (line 2303)
            # Getting the type of 'Path' (line 2307)
            Path_105845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2307, 19), 'Path')
            # Obtaining the member 'CURVE4' of a type (line 2307)
            CURVE4_105846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2307, 19), Path_105845, 'CURVE4')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2303, 18), list_105824, CURVE4_105846)
            # Adding element type (line 2303)
            # Getting the type of 'Path' (line 2307)
            Path_105847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2307, 32), 'Path')
            # Obtaining the member 'CURVE4' of a type (line 2307)
            CURVE4_105848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2307, 32), Path_105847, 'CURVE4')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2303, 18), list_105824, CURVE4_105848)
            # Adding element type (line 2303)
            # Getting the type of 'Path' (line 2307)
            Path_105849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2307, 45), 'Path')
            # Obtaining the member 'CURVE4' of a type (line 2307)
            CURVE4_105850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2307, 45), Path_105849, 'CURVE4')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2303, 18), list_105824, CURVE4_105850)
            # Adding element type (line 2303)
            # Getting the type of 'Path' (line 2308)
            Path_105851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 19), 'Path')
            # Obtaining the member 'CLOSEPOLY' of a type (line 2308)
            CLOSEPOLY_105852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2308, 19), Path_105851, 'CLOSEPOLY')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2303, 18), list_105824, CLOSEPOLY_105852)
            
            # Assigning a type to the variable 'com' (line 2303)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2303, 12), 'com', list_105824)
            
            # Assigning a Call to a Name (line 2310):
            
            # Assigning a Call to a Name (line 2310):
            
            # Assigning a Call to a Name (line 2310):
            
            # Call to Path(...): (line 2310)
            # Processing the call arguments (line 2310)
            # Getting the type of 'cp' (line 2310)
            cp_105854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2310, 24), 'cp', False)
            # Getting the type of 'com' (line 2310)
            com_105855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2310, 28), 'com', False)
            # Processing the call keyword arguments (line 2310)
            kwargs_105856 = {}
            # Getting the type of 'Path' (line 2310)
            Path_105853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2310, 19), 'Path', False)
            # Calling Path(args, kwargs) (line 2310)
            Path_call_result_105857 = invoke(stypy.reporting.localization.Localization(__file__, 2310, 19), Path_105853, *[cp_105854, com_105855], **kwargs_105856)
            
            # Assigning a type to the variable 'path' (line 2310)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2310, 12), 'path', Path_call_result_105857)
            # Getting the type of 'path' (line 2312)
            path_105858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2312, 19), 'path')
            # Assigning a type to the variable 'stypy_return_type' (line 2312)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2312, 12), 'stypy_return_type', path_105858)
            
            # ################# End of 'transmute(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'transmute' in the type store
            # Getting the type of 'stypy_return_type' (line 2279)
            stypy_return_type_105859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2279, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_105859)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'transmute'
            return stypy_return_type_105859

    
    # Assigning a type to the variable 'Round4' (line 2261)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2261, 4), 'Round4', Round4)
    
    # Assigning a Name to a Subscript (line 2314):
    
    # Assigning a Name to a Subscript (line 2314):
    # Declaration of the 'Sawtooth' class
    # Getting the type of '_Base' (line 2316)
    _Base_105860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2316, 19), '_Base')

    class Sawtooth(_Base_105860, ):
        unicode_105861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2319, (-1)), 'unicode', u'\n        A sawtooth box.\n        ')

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            float_105862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2321, 31), 'float')
            # Getting the type of 'None' (line 2321)
            None_105863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2321, 47), 'None')
            defaults = [float_105862, None_105863]
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 2321, 8, False)
            # Assigning a type to the variable 'self' (line 2322)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2322, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Sawtooth.__init__', ['pad', 'tooth_size'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, ['pad', 'tooth_size'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            unicode_105864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2328, (-1)), 'unicode', u'\n            *pad*\n              amount of padding\n\n            *tooth_size*\n              size of the sawtooth. pad* if None\n            ')
            
            # Assigning a Name to a Attribute (line 2329):
            
            # Assigning a Name to a Attribute (line 2329):
            
            # Assigning a Name to a Attribute (line 2329):
            # Getting the type of 'pad' (line 2329)
            pad_105865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2329, 23), 'pad')
            # Getting the type of 'self' (line 2329)
            self_105866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2329, 12), 'self')
            # Setting the type of the member 'pad' of a type (line 2329)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2329, 12), self_105866, 'pad', pad_105865)
            
            # Assigning a Name to a Attribute (line 2330):
            
            # Assigning a Name to a Attribute (line 2330):
            
            # Assigning a Name to a Attribute (line 2330):
            # Getting the type of 'tooth_size' (line 2330)
            tooth_size_105867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2330, 30), 'tooth_size')
            # Getting the type of 'self' (line 2330)
            self_105868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2330, 12), 'self')
            # Setting the type of the member 'tooth_size' of a type (line 2330)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2330, 12), self_105868, 'tooth_size', tooth_size_105867)
            
            # Call to __init__(...): (line 2331)
            # Processing the call keyword arguments (line 2331)
            kwargs_105876 = {}
            
            # Call to super(...): (line 2331)
            # Processing the call arguments (line 2331)
            # Getting the type of 'BoxStyle' (line 2331)
            BoxStyle_105870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2331, 18), 'BoxStyle', False)
            # Obtaining the member 'Sawtooth' of a type (line 2331)
            Sawtooth_105871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2331, 18), BoxStyle_105870, 'Sawtooth')
            # Getting the type of 'self' (line 2331)
            self_105872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2331, 37), 'self', False)
            # Processing the call keyword arguments (line 2331)
            kwargs_105873 = {}
            # Getting the type of 'super' (line 2331)
            super_105869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2331, 12), 'super', False)
            # Calling super(args, kwargs) (line 2331)
            super_call_result_105874 = invoke(stypy.reporting.localization.Localization(__file__, 2331, 12), super_105869, *[Sawtooth_105871, self_105872], **kwargs_105873)
            
            # Obtaining the member '__init__' of a type (line 2331)
            init___105875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2331, 12), super_call_result_105874, '__init__')
            # Calling __init__(args, kwargs) (line 2331)
            init___call_result_105877 = invoke(stypy.reporting.localization.Localization(__file__, 2331, 12), init___105875, *[], **kwargs_105876)
            
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()


        @norecursion
        def _get_sawtooth_vertices(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_get_sawtooth_vertices'
            module_type_store = module_type_store.open_function_context('_get_sawtooth_vertices', 2333, 8, False)
            # Assigning a type to the variable 'self' (line 2334)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2334, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            Sawtooth._get_sawtooth_vertices.__dict__.__setitem__('stypy_localization', localization)
            Sawtooth._get_sawtooth_vertices.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            Sawtooth._get_sawtooth_vertices.__dict__.__setitem__('stypy_type_store', module_type_store)
            Sawtooth._get_sawtooth_vertices.__dict__.__setitem__('stypy_function_name', 'Sawtooth._get_sawtooth_vertices')
            Sawtooth._get_sawtooth_vertices.__dict__.__setitem__('stypy_param_names_list', ['x0', 'y0', 'width', 'height', 'mutation_size'])
            Sawtooth._get_sawtooth_vertices.__dict__.__setitem__('stypy_varargs_param_name', None)
            Sawtooth._get_sawtooth_vertices.__dict__.__setitem__('stypy_kwargs_param_name', None)
            Sawtooth._get_sawtooth_vertices.__dict__.__setitem__('stypy_call_defaults', defaults)
            Sawtooth._get_sawtooth_vertices.__dict__.__setitem__('stypy_call_varargs', varargs)
            Sawtooth._get_sawtooth_vertices.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            Sawtooth._get_sawtooth_vertices.__dict__.__setitem__('stypy_declared_arg_number', 6)
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Sawtooth._get_sawtooth_vertices', ['x0', 'y0', 'width', 'height', 'mutation_size'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, '_get_sawtooth_vertices', localization, ['x0', 'y0', 'width', 'height', 'mutation_size'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '_get_sawtooth_vertices(...)' code ##################

            
            # Assigning a BinOp to a Name (line 2336):
            
            # Assigning a BinOp to a Name (line 2336):
            
            # Assigning a BinOp to a Name (line 2336):
            # Getting the type of 'mutation_size' (line 2336)
            mutation_size_105878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2336, 18), 'mutation_size')
            # Getting the type of 'self' (line 2336)
            self_105879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2336, 34), 'self')
            # Obtaining the member 'pad' of a type (line 2336)
            pad_105880 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2336, 34), self_105879, 'pad')
            # Applying the binary operator '*' (line 2336)
            result_mul_105881 = python_operator(stypy.reporting.localization.Localization(__file__, 2336, 18), '*', mutation_size_105878, pad_105880)
            
            # Assigning a type to the variable 'pad' (line 2336)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2336, 12), 'pad', result_mul_105881)
            
            # Type idiom detected: calculating its left and rigth part (line 2339)
            # Getting the type of 'self' (line 2339)
            self_105882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2339, 15), 'self')
            # Obtaining the member 'tooth_size' of a type (line 2339)
            tooth_size_105883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2339, 15), self_105882, 'tooth_size')
            # Getting the type of 'None' (line 2339)
            None_105884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2339, 34), 'None')
            
            (may_be_105885, more_types_in_union_105886) = may_be_none(tooth_size_105883, None_105884)

            if may_be_105885:

                if more_types_in_union_105886:
                    # Runtime conditional SSA (line 2339)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Assigning a BinOp to a Name (line 2340):
                
                # Assigning a BinOp to a Name (line 2340):
                
                # Assigning a BinOp to a Name (line 2340):
                # Getting the type of 'self' (line 2340)
                self_105887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2340, 29), 'self')
                # Obtaining the member 'pad' of a type (line 2340)
                pad_105888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2340, 29), self_105887, 'pad')
                float_105889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2340, 40), 'float')
                # Applying the binary operator '*' (line 2340)
                result_mul_105890 = python_operator(stypy.reporting.localization.Localization(__file__, 2340, 29), '*', pad_105888, float_105889)
                
                # Getting the type of 'mutation_size' (line 2340)
                mutation_size_105891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2340, 45), 'mutation_size')
                # Applying the binary operator '*' (line 2340)
                result_mul_105892 = python_operator(stypy.reporting.localization.Localization(__file__, 2340, 43), '*', result_mul_105890, mutation_size_105891)
                
                # Assigning a type to the variable 'tooth_size' (line 2340)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2340, 16), 'tooth_size', result_mul_105892)

                if more_types_in_union_105886:
                    # Runtime conditional SSA for else branch (line 2339)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_105885) or more_types_in_union_105886):
                
                # Assigning a BinOp to a Name (line 2342):
                
                # Assigning a BinOp to a Name (line 2342):
                
                # Assigning a BinOp to a Name (line 2342):
                # Getting the type of 'self' (line 2342)
                self_105893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2342, 29), 'self')
                # Obtaining the member 'tooth_size' of a type (line 2342)
                tooth_size_105894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2342, 29), self_105893, 'tooth_size')
                # Getting the type of 'mutation_size' (line 2342)
                mutation_size_105895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2342, 47), 'mutation_size')
                # Applying the binary operator '*' (line 2342)
                result_mul_105896 = python_operator(stypy.reporting.localization.Localization(__file__, 2342, 29), '*', tooth_size_105894, mutation_size_105895)
                
                # Assigning a type to the variable 'tooth_size' (line 2342)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2342, 16), 'tooth_size', result_mul_105896)

                if (may_be_105885 and more_types_in_union_105886):
                    # SSA join for if statement (line 2339)
                    module_type_store = module_type_store.join_ssa_context()


            
            
            # Assigning a BinOp to a Name (line 2344):
            
            # Assigning a BinOp to a Name (line 2344):
            
            # Assigning a BinOp to a Name (line 2344):
            # Getting the type of 'tooth_size' (line 2344)
            tooth_size_105897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2344, 26), 'tooth_size')
            float_105898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2344, 39), 'float')
            # Applying the binary operator 'div' (line 2344)
            result_div_105899 = python_operator(stypy.reporting.localization.Localization(__file__, 2344, 26), 'div', tooth_size_105897, float_105898)
            
            # Assigning a type to the variable 'tooth_size2' (line 2344)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2344, 12), 'tooth_size2', result_div_105899)
            
            # Assigning a Tuple to a Tuple (line 2345):
            
            # Assigning a BinOp to a Name (line 2345):
            
            # Assigning a BinOp to a Name (line 2345):
            # Getting the type of 'width' (line 2345)
            width_105900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2345, 29), 'width')
            float_105901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2345, 37), 'float')
            # Getting the type of 'pad' (line 2345)
            pad_105902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2345, 42), 'pad')
            # Applying the binary operator '*' (line 2345)
            result_mul_105903 = python_operator(stypy.reporting.localization.Localization(__file__, 2345, 37), '*', float_105901, pad_105902)
            
            # Applying the binary operator '+' (line 2345)
            result_add_105904 = python_operator(stypy.reporting.localization.Localization(__file__, 2345, 29), '+', width_105900, result_mul_105903)
            
            # Getting the type of 'tooth_size' (line 2345)
            tooth_size_105905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2345, 48), 'tooth_size')
            # Applying the binary operator '-' (line 2345)
            result_sub_105906 = python_operator(stypy.reporting.localization.Localization(__file__, 2345, 46), '-', result_add_105904, tooth_size_105905)
            
            # Assigning a type to the variable 'tuple_assignment_100482' (line 2345)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2345, 12), 'tuple_assignment_100482', result_sub_105906)
            
            # Assigning a BinOp to a Name (line 2345):
            
            # Assigning a BinOp to a Name (line 2345):
            # Getting the type of 'height' (line 2346)
            height_105907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2346, 28), 'height')
            float_105908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2346, 37), 'float')
            # Getting the type of 'pad' (line 2346)
            pad_105909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2346, 42), 'pad')
            # Applying the binary operator '*' (line 2346)
            result_mul_105910 = python_operator(stypy.reporting.localization.Localization(__file__, 2346, 37), '*', float_105908, pad_105909)
            
            # Applying the binary operator '+' (line 2346)
            result_add_105911 = python_operator(stypy.reporting.localization.Localization(__file__, 2346, 28), '+', height_105907, result_mul_105910)
            
            # Getting the type of 'tooth_size' (line 2346)
            tooth_size_105912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2346, 48), 'tooth_size')
            # Applying the binary operator '-' (line 2346)
            result_sub_105913 = python_operator(stypy.reporting.localization.Localization(__file__, 2346, 46), '-', result_add_105911, tooth_size_105912)
            
            # Assigning a type to the variable 'tuple_assignment_100483' (line 2345)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2345, 12), 'tuple_assignment_100483', result_sub_105913)
            
            # Assigning a Name to a Name (line 2345):
            
            # Assigning a Name to a Name (line 2345):
            # Getting the type of 'tuple_assignment_100482' (line 2345)
            tuple_assignment_100482_105914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2345, 12), 'tuple_assignment_100482')
            # Assigning a type to the variable 'width' (line 2345)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2345, 12), 'width', tuple_assignment_100482_105914)
            
            # Assigning a Name to a Name (line 2345):
            
            # Assigning a Name to a Name (line 2345):
            # Getting the type of 'tuple_assignment_100483' (line 2345)
            tuple_assignment_100483_105915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2345, 12), 'tuple_assignment_100483')
            # Assigning a type to the variable 'height' (line 2345)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2345, 19), 'height', tuple_assignment_100483_105915)
            
            # Assigning a BinOp to a Name (line 2350):
            
            # Assigning a BinOp to a Name (line 2350):
            
            # Assigning a BinOp to a Name (line 2350):
            
            # Call to int(...): (line 2350)
            # Processing the call arguments (line 2350)
            
            # Call to round(...): (line 2350)
            # Processing the call arguments (line 2350)
            # Getting the type of 'width' (line 2350)
            width_105919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2350, 34), 'width', False)
            # Getting the type of 'tooth_size' (line 2350)
            tooth_size_105920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2350, 42), 'tooth_size', False)
            # Applying the binary operator '-' (line 2350)
            result_sub_105921 = python_operator(stypy.reporting.localization.Localization(__file__, 2350, 34), '-', width_105919, tooth_size_105920)
            
            # Getting the type of 'tooth_size' (line 2350)
            tooth_size_105922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2350, 57), 'tooth_size', False)
            int_105923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2350, 70), 'int')
            # Applying the binary operator '*' (line 2350)
            result_mul_105924 = python_operator(stypy.reporting.localization.Localization(__file__, 2350, 57), '*', tooth_size_105922, int_105923)
            
            # Applying the binary operator 'div' (line 2350)
            result_div_105925 = python_operator(stypy.reporting.localization.Localization(__file__, 2350, 33), 'div', result_sub_105921, result_mul_105924)
            
            # Processing the call keyword arguments (line 2350)
            kwargs_105926 = {}
            # Getting the type of 'np' (line 2350)
            np_105917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2350, 24), 'np', False)
            # Obtaining the member 'round' of a type (line 2350)
            round_105918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2350, 24), np_105917, 'round')
            # Calling round(args, kwargs) (line 2350)
            round_call_result_105927 = invoke(stypy.reporting.localization.Localization(__file__, 2350, 24), round_105918, *[result_div_105925], **kwargs_105926)
            
            # Processing the call keyword arguments (line 2350)
            kwargs_105928 = {}
            # Getting the type of 'int' (line 2350)
            int_105916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2350, 20), 'int', False)
            # Calling int(args, kwargs) (line 2350)
            int_call_result_105929 = invoke(stypy.reporting.localization.Localization(__file__, 2350, 20), int_105916, *[round_call_result_105927], **kwargs_105928)
            
            int_105930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2350, 77), 'int')
            # Applying the binary operator '*' (line 2350)
            result_mul_105931 = python_operator(stypy.reporting.localization.Localization(__file__, 2350, 20), '*', int_call_result_105929, int_105930)
            
            # Assigning a type to the variable 'dsx_n' (line 2350)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2350, 12), 'dsx_n', result_mul_105931)
            
            # Assigning a BinOp to a Name (line 2351):
            
            # Assigning a BinOp to a Name (line 2351):
            
            # Assigning a BinOp to a Name (line 2351):
            # Getting the type of 'width' (line 2351)
            width_105932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 19), 'width')
            # Getting the type of 'tooth_size' (line 2351)
            tooth_size_105933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 27), 'tooth_size')
            # Applying the binary operator '-' (line 2351)
            result_sub_105934 = python_operator(stypy.reporting.localization.Localization(__file__, 2351, 19), '-', width_105932, tooth_size_105933)
            
            # Getting the type of 'dsx_n' (line 2351)
            dsx_n_105935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 41), 'dsx_n')
            # Applying the binary operator 'div' (line 2351)
            result_div_105936 = python_operator(stypy.reporting.localization.Localization(__file__, 2351, 18), 'div', result_sub_105934, dsx_n_105935)
            
            # Assigning a type to the variable 'dsx' (line 2351)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2351, 12), 'dsx', result_div_105936)
            
            # Assigning a BinOp to a Name (line 2352):
            
            # Assigning a BinOp to a Name (line 2352):
            
            # Assigning a BinOp to a Name (line 2352):
            
            # Call to int(...): (line 2352)
            # Processing the call arguments (line 2352)
            
            # Call to round(...): (line 2352)
            # Processing the call arguments (line 2352)
            # Getting the type of 'height' (line 2352)
            height_105940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2352, 34), 'height', False)
            # Getting the type of 'tooth_size' (line 2352)
            tooth_size_105941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2352, 43), 'tooth_size', False)
            # Applying the binary operator '-' (line 2352)
            result_sub_105942 = python_operator(stypy.reporting.localization.Localization(__file__, 2352, 34), '-', height_105940, tooth_size_105941)
            
            # Getting the type of 'tooth_size' (line 2352)
            tooth_size_105943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2352, 58), 'tooth_size', False)
            int_105944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2352, 71), 'int')
            # Applying the binary operator '*' (line 2352)
            result_mul_105945 = python_operator(stypy.reporting.localization.Localization(__file__, 2352, 58), '*', tooth_size_105943, int_105944)
            
            # Applying the binary operator 'div' (line 2352)
            result_div_105946 = python_operator(stypy.reporting.localization.Localization(__file__, 2352, 33), 'div', result_sub_105942, result_mul_105945)
            
            # Processing the call keyword arguments (line 2352)
            kwargs_105947 = {}
            # Getting the type of 'np' (line 2352)
            np_105938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2352, 24), 'np', False)
            # Obtaining the member 'round' of a type (line 2352)
            round_105939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2352, 24), np_105938, 'round')
            # Calling round(args, kwargs) (line 2352)
            round_call_result_105948 = invoke(stypy.reporting.localization.Localization(__file__, 2352, 24), round_105939, *[result_div_105946], **kwargs_105947)
            
            # Processing the call keyword arguments (line 2352)
            kwargs_105949 = {}
            # Getting the type of 'int' (line 2352)
            int_105937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2352, 20), 'int', False)
            # Calling int(args, kwargs) (line 2352)
            int_call_result_105950 = invoke(stypy.reporting.localization.Localization(__file__, 2352, 20), int_105937, *[round_call_result_105948], **kwargs_105949)
            
            int_105951 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2352, 78), 'int')
            # Applying the binary operator '*' (line 2352)
            result_mul_105952 = python_operator(stypy.reporting.localization.Localization(__file__, 2352, 20), '*', int_call_result_105950, int_105951)
            
            # Assigning a type to the variable 'dsy_n' (line 2352)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2352, 12), 'dsy_n', result_mul_105952)
            
            # Assigning a BinOp to a Name (line 2353):
            
            # Assigning a BinOp to a Name (line 2353):
            
            # Assigning a BinOp to a Name (line 2353):
            # Getting the type of 'height' (line 2353)
            height_105953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2353, 19), 'height')
            # Getting the type of 'tooth_size' (line 2353)
            tooth_size_105954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2353, 28), 'tooth_size')
            # Applying the binary operator '-' (line 2353)
            result_sub_105955 = python_operator(stypy.reporting.localization.Localization(__file__, 2353, 19), '-', height_105953, tooth_size_105954)
            
            # Getting the type of 'dsy_n' (line 2353)
            dsy_n_105956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2353, 42), 'dsy_n')
            # Applying the binary operator 'div' (line 2353)
            result_div_105957 = python_operator(stypy.reporting.localization.Localization(__file__, 2353, 18), 'div', result_sub_105955, dsy_n_105956)
            
            # Assigning a type to the variable 'dsy' (line 2353)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2353, 12), 'dsy', result_div_105957)
            
            # Assigning a Tuple to a Tuple (line 2355):
            
            # Assigning a BinOp to a Name (line 2355):
            
            # Assigning a BinOp to a Name (line 2355):
            # Getting the type of 'x0' (line 2355)
            x0_105958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 21), 'x0')
            # Getting the type of 'pad' (line 2355)
            pad_105959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 26), 'pad')
            # Applying the binary operator '-' (line 2355)
            result_sub_105960 = python_operator(stypy.reporting.localization.Localization(__file__, 2355, 21), '-', x0_105958, pad_105959)
            
            # Getting the type of 'tooth_size2' (line 2355)
            tooth_size2_105961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 32), 'tooth_size2')
            # Applying the binary operator '+' (line 2355)
            result_add_105962 = python_operator(stypy.reporting.localization.Localization(__file__, 2355, 30), '+', result_sub_105960, tooth_size2_105961)
            
            # Assigning a type to the variable 'tuple_assignment_100484' (line 2355)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2355, 12), 'tuple_assignment_100484', result_add_105962)
            
            # Assigning a BinOp to a Name (line 2355):
            
            # Assigning a BinOp to a Name (line 2355):
            # Getting the type of 'y0' (line 2355)
            y0_105963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 45), 'y0')
            # Getting the type of 'pad' (line 2355)
            pad_105964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 50), 'pad')
            # Applying the binary operator '-' (line 2355)
            result_sub_105965 = python_operator(stypy.reporting.localization.Localization(__file__, 2355, 45), '-', y0_105963, pad_105964)
            
            # Getting the type of 'tooth_size2' (line 2355)
            tooth_size2_105966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 56), 'tooth_size2')
            # Applying the binary operator '+' (line 2355)
            result_add_105967 = python_operator(stypy.reporting.localization.Localization(__file__, 2355, 54), '+', result_sub_105965, tooth_size2_105966)
            
            # Assigning a type to the variable 'tuple_assignment_100485' (line 2355)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2355, 12), 'tuple_assignment_100485', result_add_105967)
            
            # Assigning a Name to a Name (line 2355):
            
            # Assigning a Name to a Name (line 2355):
            # Getting the type of 'tuple_assignment_100484' (line 2355)
            tuple_assignment_100484_105968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 12), 'tuple_assignment_100484')
            # Assigning a type to the variable 'x0' (line 2355)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2355, 12), 'x0', tuple_assignment_100484_105968)
            
            # Assigning a Name to a Name (line 2355):
            
            # Assigning a Name to a Name (line 2355):
            # Getting the type of 'tuple_assignment_100485' (line 2355)
            tuple_assignment_100485_105969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 12), 'tuple_assignment_100485')
            # Assigning a type to the variable 'y0' (line 2355)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2355, 16), 'y0', tuple_assignment_100485_105969)
            
            # Assigning a Tuple to a Tuple (line 2356):
            
            # Assigning a BinOp to a Name (line 2356):
            
            # Assigning a BinOp to a Name (line 2356):
            # Getting the type of 'x0' (line 2356)
            x0_105970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2356, 21), 'x0')
            # Getting the type of 'width' (line 2356)
            width_105971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2356, 26), 'width')
            # Applying the binary operator '+' (line 2356)
            result_add_105972 = python_operator(stypy.reporting.localization.Localization(__file__, 2356, 21), '+', x0_105970, width_105971)
            
            # Assigning a type to the variable 'tuple_assignment_100486' (line 2356)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2356, 12), 'tuple_assignment_100486', result_add_105972)
            
            # Assigning a BinOp to a Name (line 2356):
            
            # Assigning a BinOp to a Name (line 2356):
            # Getting the type of 'y0' (line 2356)
            y0_105973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2356, 33), 'y0')
            # Getting the type of 'height' (line 2356)
            height_105974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2356, 38), 'height')
            # Applying the binary operator '+' (line 2356)
            result_add_105975 = python_operator(stypy.reporting.localization.Localization(__file__, 2356, 33), '+', y0_105973, height_105974)
            
            # Assigning a type to the variable 'tuple_assignment_100487' (line 2356)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2356, 12), 'tuple_assignment_100487', result_add_105975)
            
            # Assigning a Name to a Name (line 2356):
            
            # Assigning a Name to a Name (line 2356):
            # Getting the type of 'tuple_assignment_100486' (line 2356)
            tuple_assignment_100486_105976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2356, 12), 'tuple_assignment_100486')
            # Assigning a type to the variable 'x1' (line 2356)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2356, 12), 'x1', tuple_assignment_100486_105976)
            
            # Assigning a Name to a Name (line 2356):
            
            # Assigning a Name to a Name (line 2356):
            # Getting the type of 'tuple_assignment_100487' (line 2356)
            tuple_assignment_100487_105977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2356, 12), 'tuple_assignment_100487')
            # Assigning a type to the variable 'y1' (line 2356)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2356, 16), 'y1', tuple_assignment_100487_105977)
            
            # Assigning a BinOp to a Name (line 2358):
            
            # Assigning a BinOp to a Name (line 2358):
            
            # Assigning a BinOp to a Name (line 2358):
            
            # Obtaining an instance of the builtin type 'list' (line 2358)
            list_105978 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2358, 27), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2358)
            # Adding element type (line 2358)
            # Getting the type of 'x0' (line 2358)
            x0_105979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2358, 28), 'x0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2358, 27), list_105978, x0_105979)
            
            # Calculating list comprehension
            # Calculating comprehension expression
            
            # Call to range(...): (line 2361)
            # Processing the call arguments (line 2361)
            # Getting the type of 'dsx_n' (line 2361)
            dsx_n_105990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2361, 37), 'dsx_n', False)
            int_105991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2361, 45), 'int')
            # Applying the binary operator '*' (line 2361)
            result_mul_105992 = python_operator(stypy.reporting.localization.Localization(__file__, 2361, 37), '*', dsx_n_105990, int_105991)
            
            # Processing the call keyword arguments (line 2361)
            kwargs_105993 = {}
            # Getting the type of 'range' (line 2361)
            range_105989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2361, 31), 'range', False)
            # Calling range(args, kwargs) (line 2361)
            range_call_result_105994 = invoke(stypy.reporting.localization.Localization(__file__, 2361, 31), range_105989, *[result_mul_105992], **kwargs_105993)
            
            comprehension_105995 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2359, 28), range_call_result_105994)
            # Assigning a type to the variable 'i' (line 2359)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2359, 28), 'i', comprehension_105995)
            # Getting the type of 'x0' (line 2359)
            x0_105980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2359, 28), 'x0')
            # Getting the type of 'tooth_size2' (line 2359)
            tooth_size2_105981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2359, 33), 'tooth_size2')
            # Applying the binary operator '+' (line 2359)
            result_add_105982 = python_operator(stypy.reporting.localization.Localization(__file__, 2359, 28), '+', x0_105980, tooth_size2_105981)
            
            # Getting the type of 'dsx' (line 2359)
            dsx_105983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2359, 47), 'dsx')
            float_105984 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2359, 53), 'float')
            # Applying the binary operator '*' (line 2359)
            result_mul_105985 = python_operator(stypy.reporting.localization.Localization(__file__, 2359, 47), '*', dsx_105983, float_105984)
            
            # Getting the type of 'i' (line 2359)
            i_105986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2359, 58), 'i')
            # Applying the binary operator '*' (line 2359)
            result_mul_105987 = python_operator(stypy.reporting.localization.Localization(__file__, 2359, 56), '*', result_mul_105985, i_105986)
            
            # Applying the binary operator '+' (line 2359)
            result_add_105988 = python_operator(stypy.reporting.localization.Localization(__file__, 2359, 45), '+', result_add_105982, result_mul_105987)
            
            list_105996 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2359, 28), 'list')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2359, 28), list_105996, result_add_105988)
            # Applying the binary operator '+' (line 2358)
            result_add_105997 = python_operator(stypy.reporting.localization.Localization(__file__, 2358, 27), '+', list_105978, list_105996)
            
            
            # Obtaining an instance of the builtin type 'list' (line 2362)
            list_105998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2362, 27), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2362)
            # Adding element type (line 2362)
            # Getting the type of 'x1' (line 2362)
            x1_105999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2362, 28), 'x1')
            # Getting the type of 'tooth_size2' (line 2362)
            tooth_size2_106000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2362, 33), 'tooth_size2')
            # Applying the binary operator '-' (line 2362)
            result_sub_106001 = python_operator(stypy.reporting.localization.Localization(__file__, 2362, 28), '-', x1_105999, tooth_size2_106000)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2362, 27), list_105998, result_sub_106001)
            
            # Applying the binary operator '+' (line 2361)
            result_add_106002 = python_operator(stypy.reporting.localization.Localization(__file__, 2361, 49), '+', result_add_105997, list_105998)
            
            # Assigning a type to the variable 'bottom_saw_x' (line 2358)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2358, 12), 'bottom_saw_x', result_add_106002)
            
            # Assigning a BinOp to a Name (line 2364):
            
            # Assigning a BinOp to a Name (line 2364):
            
            # Assigning a BinOp to a Name (line 2364):
            
            # Obtaining an instance of the builtin type 'list' (line 2364)
            list_106003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2364, 27), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2364)
            # Adding element type (line 2364)
            # Getting the type of 'y0' (line 2364)
            y0_106004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2364, 28), 'y0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2364, 27), list_106003, y0_106004)
            
            
            # Obtaining an instance of the builtin type 'list' (line 2365)
            list_106005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2365, 27), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2365)
            # Adding element type (line 2365)
            # Getting the type of 'y0' (line 2365)
            y0_106006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2365, 28), 'y0')
            # Getting the type of 'tooth_size2' (line 2365)
            tooth_size2_106007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2365, 33), 'tooth_size2')
            # Applying the binary operator '-' (line 2365)
            result_sub_106008 = python_operator(stypy.reporting.localization.Localization(__file__, 2365, 28), '-', y0_106006, tooth_size2_106007)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2365, 27), list_106005, result_sub_106008)
            # Adding element type (line 2365)
            # Getting the type of 'y0' (line 2365)
            y0_106009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2365, 46), 'y0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2365, 27), list_106005, y0_106009)
            # Adding element type (line 2365)
            # Getting the type of 'y0' (line 2366)
            y0_106010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2366, 28), 'y0')
            # Getting the type of 'tooth_size2' (line 2366)
            tooth_size2_106011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2366, 33), 'tooth_size2')
            # Applying the binary operator '+' (line 2366)
            result_add_106012 = python_operator(stypy.reporting.localization.Localization(__file__, 2366, 28), '+', y0_106010, tooth_size2_106011)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2365, 27), list_106005, result_add_106012)
            # Adding element type (line 2365)
            # Getting the type of 'y0' (line 2366)
            y0_106013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2366, 46), 'y0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2365, 27), list_106005, y0_106013)
            
            # Getting the type of 'dsx_n' (line 2366)
            dsx_n_106014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2366, 52), 'dsx_n')
            # Applying the binary operator '*' (line 2365)
            result_mul_106015 = python_operator(stypy.reporting.localization.Localization(__file__, 2365, 27), '*', list_106005, dsx_n_106014)
            
            # Applying the binary operator '+' (line 2364)
            result_add_106016 = python_operator(stypy.reporting.localization.Localization(__file__, 2364, 27), '+', list_106003, result_mul_106015)
            
            
            # Obtaining an instance of the builtin type 'list' (line 2367)
            list_106017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2367, 27), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2367)
            # Adding element type (line 2367)
            # Getting the type of 'y0' (line 2367)
            y0_106018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2367, 28), 'y0')
            # Getting the type of 'tooth_size2' (line 2367)
            tooth_size2_106019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2367, 33), 'tooth_size2')
            # Applying the binary operator '-' (line 2367)
            result_sub_106020 = python_operator(stypy.reporting.localization.Localization(__file__, 2367, 28), '-', y0_106018, tooth_size2_106019)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2367, 27), list_106017, result_sub_106020)
            
            # Applying the binary operator '+' (line 2366)
            result_add_106021 = python_operator(stypy.reporting.localization.Localization(__file__, 2366, 58), '+', result_add_106016, list_106017)
            
            # Assigning a type to the variable 'bottom_saw_y' (line 2364)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2364, 12), 'bottom_saw_y', result_add_106021)
            
            # Assigning a BinOp to a Name (line 2369):
            
            # Assigning a BinOp to a Name (line 2369):
            
            # Assigning a BinOp to a Name (line 2369):
            
            # Obtaining an instance of the builtin type 'list' (line 2369)
            list_106022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2369, 26), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2369)
            # Adding element type (line 2369)
            # Getting the type of 'x1' (line 2369)
            x1_106023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2369, 27), 'x1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2369, 26), list_106022, x1_106023)
            
            
            # Obtaining an instance of the builtin type 'list' (line 2370)
            list_106024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2370, 26), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2370)
            # Adding element type (line 2370)
            # Getting the type of 'x1' (line 2370)
            x1_106025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2370, 27), 'x1')
            # Getting the type of 'tooth_size2' (line 2370)
            tooth_size2_106026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2370, 32), 'tooth_size2')
            # Applying the binary operator '+' (line 2370)
            result_add_106027 = python_operator(stypy.reporting.localization.Localization(__file__, 2370, 27), '+', x1_106025, tooth_size2_106026)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2370, 26), list_106024, result_add_106027)
            # Adding element type (line 2370)
            # Getting the type of 'x1' (line 2371)
            x1_106028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2371, 27), 'x1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2370, 26), list_106024, x1_106028)
            # Adding element type (line 2370)
            # Getting the type of 'x1' (line 2372)
            x1_106029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2372, 27), 'x1')
            # Getting the type of 'tooth_size2' (line 2372)
            tooth_size2_106030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2372, 32), 'tooth_size2')
            # Applying the binary operator '-' (line 2372)
            result_sub_106031 = python_operator(stypy.reporting.localization.Localization(__file__, 2372, 27), '-', x1_106029, tooth_size2_106030)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2370, 26), list_106024, result_sub_106031)
            # Adding element type (line 2370)
            # Getting the type of 'x1' (line 2373)
            x1_106032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2373, 27), 'x1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2370, 26), list_106024, x1_106032)
            
            # Getting the type of 'dsx_n' (line 2373)
            dsx_n_106033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2373, 33), 'dsx_n')
            # Applying the binary operator '*' (line 2370)
            result_mul_106034 = python_operator(stypy.reporting.localization.Localization(__file__, 2370, 26), '*', list_106024, dsx_n_106033)
            
            # Applying the binary operator '+' (line 2369)
            result_add_106035 = python_operator(stypy.reporting.localization.Localization(__file__, 2369, 26), '+', list_106022, result_mul_106034)
            
            
            # Obtaining an instance of the builtin type 'list' (line 2374)
            list_106036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2374, 26), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2374)
            # Adding element type (line 2374)
            # Getting the type of 'x1' (line 2374)
            x1_106037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2374, 27), 'x1')
            # Getting the type of 'tooth_size2' (line 2374)
            tooth_size2_106038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2374, 32), 'tooth_size2')
            # Applying the binary operator '+' (line 2374)
            result_add_106039 = python_operator(stypy.reporting.localization.Localization(__file__, 2374, 27), '+', x1_106037, tooth_size2_106038)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2374, 26), list_106036, result_add_106039)
            
            # Applying the binary operator '+' (line 2373)
            result_add_106040 = python_operator(stypy.reporting.localization.Localization(__file__, 2373, 39), '+', result_add_106035, list_106036)
            
            # Assigning a type to the variable 'right_saw_x' (line 2369)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2369, 12), 'right_saw_x', result_add_106040)
            
            # Assigning a BinOp to a Name (line 2376):
            
            # Assigning a BinOp to a Name (line 2376):
            
            # Assigning a BinOp to a Name (line 2376):
            
            # Obtaining an instance of the builtin type 'list' (line 2376)
            list_106041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2376, 26), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2376)
            # Adding element type (line 2376)
            # Getting the type of 'y0' (line 2376)
            y0_106042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2376, 27), 'y0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2376, 26), list_106041, y0_106042)
            
            # Calculating list comprehension
            # Calculating comprehension expression
            
            # Call to range(...): (line 2379)
            # Processing the call arguments (line 2379)
            # Getting the type of 'dsy_n' (line 2379)
            dsy_n_106053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2379, 36), 'dsy_n', False)
            int_106054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2379, 44), 'int')
            # Applying the binary operator '*' (line 2379)
            result_mul_106055 = python_operator(stypy.reporting.localization.Localization(__file__, 2379, 36), '*', dsy_n_106053, int_106054)
            
            # Processing the call keyword arguments (line 2379)
            kwargs_106056 = {}
            # Getting the type of 'range' (line 2379)
            range_106052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2379, 30), 'range', False)
            # Calling range(args, kwargs) (line 2379)
            range_call_result_106057 = invoke(stypy.reporting.localization.Localization(__file__, 2379, 30), range_106052, *[result_mul_106055], **kwargs_106056)
            
            comprehension_106058 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2377, 27), range_call_result_106057)
            # Assigning a type to the variable 'i' (line 2377)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2377, 27), 'i', comprehension_106058)
            # Getting the type of 'y0' (line 2377)
            y0_106043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2377, 27), 'y0')
            # Getting the type of 'tooth_size2' (line 2377)
            tooth_size2_106044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2377, 32), 'tooth_size2')
            # Applying the binary operator '+' (line 2377)
            result_add_106045 = python_operator(stypy.reporting.localization.Localization(__file__, 2377, 27), '+', y0_106043, tooth_size2_106044)
            
            # Getting the type of 'dsy' (line 2377)
            dsy_106046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2377, 46), 'dsy')
            float_106047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2377, 52), 'float')
            # Applying the binary operator '*' (line 2377)
            result_mul_106048 = python_operator(stypy.reporting.localization.Localization(__file__, 2377, 46), '*', dsy_106046, float_106047)
            
            # Getting the type of 'i' (line 2377)
            i_106049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2377, 57), 'i')
            # Applying the binary operator '*' (line 2377)
            result_mul_106050 = python_operator(stypy.reporting.localization.Localization(__file__, 2377, 55), '*', result_mul_106048, i_106049)
            
            # Applying the binary operator '+' (line 2377)
            result_add_106051 = python_operator(stypy.reporting.localization.Localization(__file__, 2377, 44), '+', result_add_106045, result_mul_106050)
            
            list_106059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2377, 27), 'list')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2377, 27), list_106059, result_add_106051)
            # Applying the binary operator '+' (line 2376)
            result_add_106060 = python_operator(stypy.reporting.localization.Localization(__file__, 2376, 26), '+', list_106041, list_106059)
            
            
            # Obtaining an instance of the builtin type 'list' (line 2380)
            list_106061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2380, 26), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2380)
            # Adding element type (line 2380)
            # Getting the type of 'y1' (line 2380)
            y1_106062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2380, 27), 'y1')
            # Getting the type of 'tooth_size2' (line 2380)
            tooth_size2_106063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2380, 32), 'tooth_size2')
            # Applying the binary operator '-' (line 2380)
            result_sub_106064 = python_operator(stypy.reporting.localization.Localization(__file__, 2380, 27), '-', y1_106062, tooth_size2_106063)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2380, 26), list_106061, result_sub_106064)
            
            # Applying the binary operator '+' (line 2379)
            result_add_106065 = python_operator(stypy.reporting.localization.Localization(__file__, 2379, 48), '+', result_add_106060, list_106061)
            
            # Assigning a type to the variable 'right_saw_y' (line 2376)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2376, 12), 'right_saw_y', result_add_106065)
            
            # Assigning a BinOp to a Name (line 2382):
            
            # Assigning a BinOp to a Name (line 2382):
            
            # Assigning a BinOp to a Name (line 2382):
            
            # Obtaining an instance of the builtin type 'list' (line 2382)
            list_106066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2382, 24), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2382)
            # Adding element type (line 2382)
            # Getting the type of 'x1' (line 2382)
            x1_106067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2382, 25), 'x1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2382, 24), list_106066, x1_106067)
            
            # Calculating list comprehension
            # Calculating comprehension expression
            
            # Call to range(...): (line 2385)
            # Processing the call arguments (line 2385)
            # Getting the type of 'dsx_n' (line 2385)
            dsx_n_106078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2385, 34), 'dsx_n', False)
            int_106079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2385, 42), 'int')
            # Applying the binary operator '*' (line 2385)
            result_mul_106080 = python_operator(stypy.reporting.localization.Localization(__file__, 2385, 34), '*', dsx_n_106078, int_106079)
            
            # Processing the call keyword arguments (line 2385)
            kwargs_106081 = {}
            # Getting the type of 'range' (line 2385)
            range_106077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2385, 28), 'range', False)
            # Calling range(args, kwargs) (line 2385)
            range_call_result_106082 = invoke(stypy.reporting.localization.Localization(__file__, 2385, 28), range_106077, *[result_mul_106080], **kwargs_106081)
            
            comprehension_106083 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2383, 25), range_call_result_106082)
            # Assigning a type to the variable 'i' (line 2383)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2383, 25), 'i', comprehension_106083)
            # Getting the type of 'x1' (line 2383)
            x1_106068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2383, 25), 'x1')
            # Getting the type of 'tooth_size2' (line 2383)
            tooth_size2_106069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2383, 30), 'tooth_size2')
            # Applying the binary operator '-' (line 2383)
            result_sub_106070 = python_operator(stypy.reporting.localization.Localization(__file__, 2383, 25), '-', x1_106068, tooth_size2_106069)
            
            # Getting the type of 'dsx' (line 2383)
            dsx_106071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2383, 44), 'dsx')
            float_106072 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2383, 50), 'float')
            # Applying the binary operator '*' (line 2383)
            result_mul_106073 = python_operator(stypy.reporting.localization.Localization(__file__, 2383, 44), '*', dsx_106071, float_106072)
            
            # Getting the type of 'i' (line 2383)
            i_106074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2383, 55), 'i')
            # Applying the binary operator '*' (line 2383)
            result_mul_106075 = python_operator(stypy.reporting.localization.Localization(__file__, 2383, 53), '*', result_mul_106073, i_106074)
            
            # Applying the binary operator '-' (line 2383)
            result_sub_106076 = python_operator(stypy.reporting.localization.Localization(__file__, 2383, 42), '-', result_sub_106070, result_mul_106075)
            
            list_106084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2383, 25), 'list')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2383, 25), list_106084, result_sub_106076)
            # Applying the binary operator '+' (line 2382)
            result_add_106085 = python_operator(stypy.reporting.localization.Localization(__file__, 2382, 24), '+', list_106066, list_106084)
            
            
            # Obtaining an instance of the builtin type 'list' (line 2386)
            list_106086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2386, 24), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2386)
            # Adding element type (line 2386)
            # Getting the type of 'x0' (line 2386)
            x0_106087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2386, 25), 'x0')
            # Getting the type of 'tooth_size2' (line 2386)
            tooth_size2_106088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2386, 30), 'tooth_size2')
            # Applying the binary operator '+' (line 2386)
            result_add_106089 = python_operator(stypy.reporting.localization.Localization(__file__, 2386, 25), '+', x0_106087, tooth_size2_106088)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2386, 24), list_106086, result_add_106089)
            
            # Applying the binary operator '+' (line 2385)
            result_add_106090 = python_operator(stypy.reporting.localization.Localization(__file__, 2385, 46), '+', result_add_106085, list_106086)
            
            # Assigning a type to the variable 'top_saw_x' (line 2382)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2382, 12), 'top_saw_x', result_add_106090)
            
            # Assigning a BinOp to a Name (line 2388):
            
            # Assigning a BinOp to a Name (line 2388):
            
            # Assigning a BinOp to a Name (line 2388):
            
            # Obtaining an instance of the builtin type 'list' (line 2388)
            list_106091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2388, 24), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2388)
            # Adding element type (line 2388)
            # Getting the type of 'y1' (line 2388)
            y1_106092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2388, 25), 'y1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2388, 24), list_106091, y1_106092)
            
            
            # Obtaining an instance of the builtin type 'list' (line 2389)
            list_106093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2389, 24), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2389)
            # Adding element type (line 2389)
            # Getting the type of 'y1' (line 2389)
            y1_106094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2389, 25), 'y1')
            # Getting the type of 'tooth_size2' (line 2389)
            tooth_size2_106095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2389, 30), 'tooth_size2')
            # Applying the binary operator '+' (line 2389)
            result_add_106096 = python_operator(stypy.reporting.localization.Localization(__file__, 2389, 25), '+', y1_106094, tooth_size2_106095)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2389, 24), list_106093, result_add_106096)
            # Adding element type (line 2389)
            # Getting the type of 'y1' (line 2390)
            y1_106097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2390, 25), 'y1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2389, 24), list_106093, y1_106097)
            # Adding element type (line 2389)
            # Getting the type of 'y1' (line 2391)
            y1_106098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2391, 25), 'y1')
            # Getting the type of 'tooth_size2' (line 2391)
            tooth_size2_106099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2391, 30), 'tooth_size2')
            # Applying the binary operator '-' (line 2391)
            result_sub_106100 = python_operator(stypy.reporting.localization.Localization(__file__, 2391, 25), '-', y1_106098, tooth_size2_106099)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2389, 24), list_106093, result_sub_106100)
            # Adding element type (line 2389)
            # Getting the type of 'y1' (line 2392)
            y1_106101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2392, 25), 'y1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2389, 24), list_106093, y1_106101)
            
            # Getting the type of 'dsx_n' (line 2392)
            dsx_n_106102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2392, 31), 'dsx_n')
            # Applying the binary operator '*' (line 2389)
            result_mul_106103 = python_operator(stypy.reporting.localization.Localization(__file__, 2389, 24), '*', list_106093, dsx_n_106102)
            
            # Applying the binary operator '+' (line 2388)
            result_add_106104 = python_operator(stypy.reporting.localization.Localization(__file__, 2388, 24), '+', list_106091, result_mul_106103)
            
            
            # Obtaining an instance of the builtin type 'list' (line 2393)
            list_106105 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2393, 24), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2393)
            # Adding element type (line 2393)
            # Getting the type of 'y1' (line 2393)
            y1_106106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2393, 25), 'y1')
            # Getting the type of 'tooth_size2' (line 2393)
            tooth_size2_106107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2393, 30), 'tooth_size2')
            # Applying the binary operator '+' (line 2393)
            result_add_106108 = python_operator(stypy.reporting.localization.Localization(__file__, 2393, 25), '+', y1_106106, tooth_size2_106107)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2393, 24), list_106105, result_add_106108)
            
            # Applying the binary operator '+' (line 2392)
            result_add_106109 = python_operator(stypy.reporting.localization.Localization(__file__, 2392, 37), '+', result_add_106104, list_106105)
            
            # Assigning a type to the variable 'top_saw_y' (line 2388)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2388, 12), 'top_saw_y', result_add_106109)
            
            # Assigning a BinOp to a Name (line 2395):
            
            # Assigning a BinOp to a Name (line 2395):
            
            # Assigning a BinOp to a Name (line 2395):
            
            # Obtaining an instance of the builtin type 'list' (line 2395)
            list_106110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2395, 25), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2395)
            # Adding element type (line 2395)
            # Getting the type of 'x0' (line 2395)
            x0_106111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2395, 26), 'x0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2395, 25), list_106110, x0_106111)
            
            
            # Obtaining an instance of the builtin type 'list' (line 2396)
            list_106112 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2396, 25), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2396)
            # Adding element type (line 2396)
            # Getting the type of 'x0' (line 2396)
            x0_106113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2396, 26), 'x0')
            # Getting the type of 'tooth_size2' (line 2396)
            tooth_size2_106114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2396, 31), 'tooth_size2')
            # Applying the binary operator '-' (line 2396)
            result_sub_106115 = python_operator(stypy.reporting.localization.Localization(__file__, 2396, 26), '-', x0_106113, tooth_size2_106114)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2396, 25), list_106112, result_sub_106115)
            # Adding element type (line 2396)
            # Getting the type of 'x0' (line 2397)
            x0_106116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2397, 26), 'x0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2396, 25), list_106112, x0_106116)
            # Adding element type (line 2396)
            # Getting the type of 'x0' (line 2398)
            x0_106117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2398, 26), 'x0')
            # Getting the type of 'tooth_size2' (line 2398)
            tooth_size2_106118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2398, 31), 'tooth_size2')
            # Applying the binary operator '+' (line 2398)
            result_add_106119 = python_operator(stypy.reporting.localization.Localization(__file__, 2398, 26), '+', x0_106117, tooth_size2_106118)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2396, 25), list_106112, result_add_106119)
            # Adding element type (line 2396)
            # Getting the type of 'x0' (line 2399)
            x0_106120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2399, 26), 'x0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2396, 25), list_106112, x0_106120)
            
            # Getting the type of 'dsy_n' (line 2399)
            dsy_n_106121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2399, 32), 'dsy_n')
            # Applying the binary operator '*' (line 2396)
            result_mul_106122 = python_operator(stypy.reporting.localization.Localization(__file__, 2396, 25), '*', list_106112, dsy_n_106121)
            
            # Applying the binary operator '+' (line 2395)
            result_add_106123 = python_operator(stypy.reporting.localization.Localization(__file__, 2395, 25), '+', list_106110, result_mul_106122)
            
            
            # Obtaining an instance of the builtin type 'list' (line 2400)
            list_106124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2400, 25), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2400)
            # Adding element type (line 2400)
            # Getting the type of 'x0' (line 2400)
            x0_106125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2400, 26), 'x0')
            # Getting the type of 'tooth_size2' (line 2400)
            tooth_size2_106126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2400, 31), 'tooth_size2')
            # Applying the binary operator '-' (line 2400)
            result_sub_106127 = python_operator(stypy.reporting.localization.Localization(__file__, 2400, 26), '-', x0_106125, tooth_size2_106126)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2400, 25), list_106124, result_sub_106127)
            
            # Applying the binary operator '+' (line 2399)
            result_add_106128 = python_operator(stypy.reporting.localization.Localization(__file__, 2399, 38), '+', result_add_106123, list_106124)
            
            # Assigning a type to the variable 'left_saw_x' (line 2395)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2395, 12), 'left_saw_x', result_add_106128)
            
            # Assigning a BinOp to a Name (line 2402):
            
            # Assigning a BinOp to a Name (line 2402):
            
            # Assigning a BinOp to a Name (line 2402):
            
            # Obtaining an instance of the builtin type 'list' (line 2402)
            list_106129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2402, 25), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2402)
            # Adding element type (line 2402)
            # Getting the type of 'y1' (line 2402)
            y1_106130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2402, 26), 'y1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2402, 25), list_106129, y1_106130)
            
            # Calculating list comprehension
            # Calculating comprehension expression
            
            # Call to range(...): (line 2405)
            # Processing the call arguments (line 2405)
            # Getting the type of 'dsy_n' (line 2405)
            dsy_n_106141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2405, 35), 'dsy_n', False)
            int_106142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2405, 43), 'int')
            # Applying the binary operator '*' (line 2405)
            result_mul_106143 = python_operator(stypy.reporting.localization.Localization(__file__, 2405, 35), '*', dsy_n_106141, int_106142)
            
            # Processing the call keyword arguments (line 2405)
            kwargs_106144 = {}
            # Getting the type of 'range' (line 2405)
            range_106140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2405, 29), 'range', False)
            # Calling range(args, kwargs) (line 2405)
            range_call_result_106145 = invoke(stypy.reporting.localization.Localization(__file__, 2405, 29), range_106140, *[result_mul_106143], **kwargs_106144)
            
            comprehension_106146 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2403, 26), range_call_result_106145)
            # Assigning a type to the variable 'i' (line 2403)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2403, 26), 'i', comprehension_106146)
            # Getting the type of 'y1' (line 2403)
            y1_106131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2403, 26), 'y1')
            # Getting the type of 'tooth_size2' (line 2403)
            tooth_size2_106132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2403, 31), 'tooth_size2')
            # Applying the binary operator '-' (line 2403)
            result_sub_106133 = python_operator(stypy.reporting.localization.Localization(__file__, 2403, 26), '-', y1_106131, tooth_size2_106132)
            
            # Getting the type of 'dsy' (line 2403)
            dsy_106134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2403, 45), 'dsy')
            float_106135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2403, 51), 'float')
            # Applying the binary operator '*' (line 2403)
            result_mul_106136 = python_operator(stypy.reporting.localization.Localization(__file__, 2403, 45), '*', dsy_106134, float_106135)
            
            # Getting the type of 'i' (line 2403)
            i_106137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2403, 56), 'i')
            # Applying the binary operator '*' (line 2403)
            result_mul_106138 = python_operator(stypy.reporting.localization.Localization(__file__, 2403, 54), '*', result_mul_106136, i_106137)
            
            # Applying the binary operator '-' (line 2403)
            result_sub_106139 = python_operator(stypy.reporting.localization.Localization(__file__, 2403, 43), '-', result_sub_106133, result_mul_106138)
            
            list_106147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2403, 26), 'list')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2403, 26), list_106147, result_sub_106139)
            # Applying the binary operator '+' (line 2402)
            result_add_106148 = python_operator(stypy.reporting.localization.Localization(__file__, 2402, 25), '+', list_106129, list_106147)
            
            
            # Obtaining an instance of the builtin type 'list' (line 2406)
            list_106149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2406, 25), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2406)
            # Adding element type (line 2406)
            # Getting the type of 'y0' (line 2406)
            y0_106150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2406, 26), 'y0')
            # Getting the type of 'tooth_size2' (line 2406)
            tooth_size2_106151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2406, 31), 'tooth_size2')
            # Applying the binary operator '+' (line 2406)
            result_add_106152 = python_operator(stypy.reporting.localization.Localization(__file__, 2406, 26), '+', y0_106150, tooth_size2_106151)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2406, 25), list_106149, result_add_106152)
            
            # Applying the binary operator '+' (line 2405)
            result_add_106153 = python_operator(stypy.reporting.localization.Localization(__file__, 2405, 47), '+', result_add_106148, list_106149)
            
            # Assigning a type to the variable 'left_saw_y' (line 2402)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2402, 12), 'left_saw_y', result_add_106153)
            
            # Assigning a BinOp to a Name (line 2408):
            
            # Assigning a BinOp to a Name (line 2408):
            
            # Assigning a BinOp to a Name (line 2408):
            
            # Call to list(...): (line 2408)
            # Processing the call arguments (line 2408)
            
            # Call to zip(...): (line 2408)
            # Processing the call arguments (line 2408)
            # Getting the type of 'bottom_saw_x' (line 2408)
            bottom_saw_x_106156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2408, 37), 'bottom_saw_x', False)
            # Getting the type of 'bottom_saw_y' (line 2408)
            bottom_saw_y_106157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2408, 51), 'bottom_saw_y', False)
            # Processing the call keyword arguments (line 2408)
            kwargs_106158 = {}
            # Getting the type of 'zip' (line 2408)
            zip_106155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2408, 33), 'zip', False)
            # Calling zip(args, kwargs) (line 2408)
            zip_call_result_106159 = invoke(stypy.reporting.localization.Localization(__file__, 2408, 33), zip_106155, *[bottom_saw_x_106156, bottom_saw_y_106157], **kwargs_106158)
            
            # Processing the call keyword arguments (line 2408)
            kwargs_106160 = {}
            # Getting the type of 'list' (line 2408)
            list_106154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2408, 28), 'list', False)
            # Calling list(args, kwargs) (line 2408)
            list_call_result_106161 = invoke(stypy.reporting.localization.Localization(__file__, 2408, 28), list_106154, *[zip_call_result_106159], **kwargs_106160)
            
            
            # Call to list(...): (line 2409)
            # Processing the call arguments (line 2409)
            
            # Call to zip(...): (line 2409)
            # Processing the call arguments (line 2409)
            # Getting the type of 'right_saw_x' (line 2409)
            right_saw_x_106164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2409, 37), 'right_saw_x', False)
            # Getting the type of 'right_saw_y' (line 2409)
            right_saw_y_106165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2409, 50), 'right_saw_y', False)
            # Processing the call keyword arguments (line 2409)
            kwargs_106166 = {}
            # Getting the type of 'zip' (line 2409)
            zip_106163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2409, 33), 'zip', False)
            # Calling zip(args, kwargs) (line 2409)
            zip_call_result_106167 = invoke(stypy.reporting.localization.Localization(__file__, 2409, 33), zip_106163, *[right_saw_x_106164, right_saw_y_106165], **kwargs_106166)
            
            # Processing the call keyword arguments (line 2409)
            kwargs_106168 = {}
            # Getting the type of 'list' (line 2409)
            list_106162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2409, 28), 'list', False)
            # Calling list(args, kwargs) (line 2409)
            list_call_result_106169 = invoke(stypy.reporting.localization.Localization(__file__, 2409, 28), list_106162, *[zip_call_result_106167], **kwargs_106168)
            
            # Applying the binary operator '+' (line 2408)
            result_add_106170 = python_operator(stypy.reporting.localization.Localization(__file__, 2408, 28), '+', list_call_result_106161, list_call_result_106169)
            
            
            # Call to list(...): (line 2410)
            # Processing the call arguments (line 2410)
            
            # Call to zip(...): (line 2410)
            # Processing the call arguments (line 2410)
            # Getting the type of 'top_saw_x' (line 2410)
            top_saw_x_106173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2410, 37), 'top_saw_x', False)
            # Getting the type of 'top_saw_y' (line 2410)
            top_saw_y_106174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2410, 48), 'top_saw_y', False)
            # Processing the call keyword arguments (line 2410)
            kwargs_106175 = {}
            # Getting the type of 'zip' (line 2410)
            zip_106172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2410, 33), 'zip', False)
            # Calling zip(args, kwargs) (line 2410)
            zip_call_result_106176 = invoke(stypy.reporting.localization.Localization(__file__, 2410, 33), zip_106172, *[top_saw_x_106173, top_saw_y_106174], **kwargs_106175)
            
            # Processing the call keyword arguments (line 2410)
            kwargs_106177 = {}
            # Getting the type of 'list' (line 2410)
            list_106171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2410, 28), 'list', False)
            # Calling list(args, kwargs) (line 2410)
            list_call_result_106178 = invoke(stypy.reporting.localization.Localization(__file__, 2410, 28), list_106171, *[zip_call_result_106176], **kwargs_106177)
            
            # Applying the binary operator '+' (line 2409)
            result_add_106179 = python_operator(stypy.reporting.localization.Localization(__file__, 2409, 64), '+', result_add_106170, list_call_result_106178)
            
            
            # Call to list(...): (line 2411)
            # Processing the call arguments (line 2411)
            
            # Call to zip(...): (line 2411)
            # Processing the call arguments (line 2411)
            # Getting the type of 'left_saw_x' (line 2411)
            left_saw_x_106182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2411, 37), 'left_saw_x', False)
            # Getting the type of 'left_saw_y' (line 2411)
            left_saw_y_106183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2411, 49), 'left_saw_y', False)
            # Processing the call keyword arguments (line 2411)
            kwargs_106184 = {}
            # Getting the type of 'zip' (line 2411)
            zip_106181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2411, 33), 'zip', False)
            # Calling zip(args, kwargs) (line 2411)
            zip_call_result_106185 = invoke(stypy.reporting.localization.Localization(__file__, 2411, 33), zip_106181, *[left_saw_x_106182, left_saw_y_106183], **kwargs_106184)
            
            # Processing the call keyword arguments (line 2411)
            kwargs_106186 = {}
            # Getting the type of 'list' (line 2411)
            list_106180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2411, 28), 'list', False)
            # Calling list(args, kwargs) (line 2411)
            list_call_result_106187 = invoke(stypy.reporting.localization.Localization(__file__, 2411, 28), list_106180, *[zip_call_result_106185], **kwargs_106186)
            
            # Applying the binary operator '+' (line 2410)
            result_add_106188 = python_operator(stypy.reporting.localization.Localization(__file__, 2410, 60), '+', result_add_106179, list_call_result_106187)
            
            
            # Obtaining an instance of the builtin type 'list' (line 2412)
            list_106189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2412, 28), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2412)
            # Adding element type (line 2412)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2412)
            tuple_106190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2412, 30), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2412)
            # Adding element type (line 2412)
            
            # Obtaining the type of the subscript
            int_106191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2412, 43), 'int')
            # Getting the type of 'bottom_saw_x' (line 2412)
            bottom_saw_x_106192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2412, 30), 'bottom_saw_x')
            # Obtaining the member '__getitem__' of a type (line 2412)
            getitem___106193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2412, 30), bottom_saw_x_106192, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2412)
            subscript_call_result_106194 = invoke(stypy.reporting.localization.Localization(__file__, 2412, 30), getitem___106193, int_106191)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2412, 30), tuple_106190, subscript_call_result_106194)
            # Adding element type (line 2412)
            
            # Obtaining the type of the subscript
            int_106195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2412, 60), 'int')
            # Getting the type of 'bottom_saw_y' (line 2412)
            bottom_saw_y_106196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2412, 47), 'bottom_saw_y')
            # Obtaining the member '__getitem__' of a type (line 2412)
            getitem___106197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2412, 47), bottom_saw_y_106196, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2412)
            subscript_call_result_106198 = invoke(stypy.reporting.localization.Localization(__file__, 2412, 47), getitem___106197, int_106195)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2412, 30), tuple_106190, subscript_call_result_106198)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2412, 28), list_106189, tuple_106190)
            
            # Applying the binary operator '+' (line 2411)
            result_add_106199 = python_operator(stypy.reporting.localization.Localization(__file__, 2411, 62), '+', result_add_106188, list_106189)
            
            # Assigning a type to the variable 'saw_vertices' (line 2408)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2408, 12), 'saw_vertices', result_add_106199)
            # Getting the type of 'saw_vertices' (line 2414)
            saw_vertices_106200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2414, 19), 'saw_vertices')
            # Assigning a type to the variable 'stypy_return_type' (line 2414)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2414, 12), 'stypy_return_type', saw_vertices_106200)
            
            # ################# End of '_get_sawtooth_vertices(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function '_get_sawtooth_vertices' in the type store
            # Getting the type of 'stypy_return_type' (line 2333)
            stypy_return_type_106201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2333, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_106201)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_get_sawtooth_vertices'
            return stypy_return_type_106201


        @norecursion
        def transmute(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'transmute'
            module_type_store = module_type_store.open_function_context('transmute', 2416, 8, False)
            # Assigning a type to the variable 'self' (line 2417)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2417, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            Sawtooth.transmute.__dict__.__setitem__('stypy_localization', localization)
            Sawtooth.transmute.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            Sawtooth.transmute.__dict__.__setitem__('stypy_type_store', module_type_store)
            Sawtooth.transmute.__dict__.__setitem__('stypy_function_name', 'Sawtooth.transmute')
            Sawtooth.transmute.__dict__.__setitem__('stypy_param_names_list', ['x0', 'y0', 'width', 'height', 'mutation_size'])
            Sawtooth.transmute.__dict__.__setitem__('stypy_varargs_param_name', None)
            Sawtooth.transmute.__dict__.__setitem__('stypy_kwargs_param_name', None)
            Sawtooth.transmute.__dict__.__setitem__('stypy_call_defaults', defaults)
            Sawtooth.transmute.__dict__.__setitem__('stypy_call_varargs', varargs)
            Sawtooth.transmute.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            Sawtooth.transmute.__dict__.__setitem__('stypy_declared_arg_number', 6)
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Sawtooth.transmute', ['x0', 'y0', 'width', 'height', 'mutation_size'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'transmute', localization, ['x0', 'y0', 'width', 'height', 'mutation_size'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'transmute(...)' code ##################

            
            # Assigning a Call to a Name (line 2418):
            
            # Assigning a Call to a Name (line 2418):
            
            # Assigning a Call to a Name (line 2418):
            
            # Call to _get_sawtooth_vertices(...): (line 2418)
            # Processing the call arguments (line 2418)
            # Getting the type of 'x0' (line 2418)
            x0_106204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2418, 55), 'x0', False)
            # Getting the type of 'y0' (line 2418)
            y0_106205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2418, 59), 'y0', False)
            # Getting the type of 'width' (line 2418)
            width_106206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2418, 63), 'width', False)
            # Getting the type of 'height' (line 2419)
            height_106207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2419, 55), 'height', False)
            # Getting the type of 'mutation_size' (line 2419)
            mutation_size_106208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2419, 63), 'mutation_size', False)
            # Processing the call keyword arguments (line 2418)
            kwargs_106209 = {}
            # Getting the type of 'self' (line 2418)
            self_106202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2418, 27), 'self', False)
            # Obtaining the member '_get_sawtooth_vertices' of a type (line 2418)
            _get_sawtooth_vertices_106203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2418, 27), self_106202, '_get_sawtooth_vertices')
            # Calling _get_sawtooth_vertices(args, kwargs) (line 2418)
            _get_sawtooth_vertices_call_result_106210 = invoke(stypy.reporting.localization.Localization(__file__, 2418, 27), _get_sawtooth_vertices_106203, *[x0_106204, y0_106205, width_106206, height_106207, mutation_size_106208], **kwargs_106209)
            
            # Assigning a type to the variable 'saw_vertices' (line 2418)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2418, 12), 'saw_vertices', _get_sawtooth_vertices_call_result_106210)
            
            # Assigning a Call to a Name (line 2420):
            
            # Assigning a Call to a Name (line 2420):
            
            # Assigning a Call to a Name (line 2420):
            
            # Call to Path(...): (line 2420)
            # Processing the call arguments (line 2420)
            # Getting the type of 'saw_vertices' (line 2420)
            saw_vertices_106212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2420, 24), 'saw_vertices', False)
            # Processing the call keyword arguments (line 2420)
            # Getting the type of 'True' (line 2420)
            True_106213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2420, 45), 'True', False)
            keyword_106214 = True_106213
            kwargs_106215 = {'closed': keyword_106214}
            # Getting the type of 'Path' (line 2420)
            Path_106211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2420, 19), 'Path', False)
            # Calling Path(args, kwargs) (line 2420)
            Path_call_result_106216 = invoke(stypy.reporting.localization.Localization(__file__, 2420, 19), Path_106211, *[saw_vertices_106212], **kwargs_106215)
            
            # Assigning a type to the variable 'path' (line 2420)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2420, 12), 'path', Path_call_result_106216)
            # Getting the type of 'path' (line 2421)
            path_106217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2421, 19), 'path')
            # Assigning a type to the variable 'stypy_return_type' (line 2421)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2421, 12), 'stypy_return_type', path_106217)
            
            # ################# End of 'transmute(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'transmute' in the type store
            # Getting the type of 'stypy_return_type' (line 2416)
            stypy_return_type_106218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2416, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_106218)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'transmute'
            return stypy_return_type_106218

    
    # Assigning a type to the variable 'Sawtooth' (line 2316)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2316, 4), 'Sawtooth', Sawtooth)
    
    # Assigning a Name to a Subscript (line 2423):
    
    # Assigning a Name to a Subscript (line 2423):
    # Declaration of the 'Roundtooth' class
    # Getting the type of 'Sawtooth' (line 2425)
    Sawtooth_106219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2425, 21), 'Sawtooth')

    class Roundtooth(Sawtooth_106219, ):
        unicode_106220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2426, 8), 'unicode', u'A rounded tooth box.')

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            float_106221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2427, 31), 'float')
            # Getting the type of 'None' (line 2427)
            None_106222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2427, 47), 'None')
            defaults = [float_106221, None_106222]
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 2427, 8, False)
            # Assigning a type to the variable 'self' (line 2428)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2428, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Roundtooth.__init__', ['pad', 'tooth_size'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, ['pad', 'tooth_size'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            unicode_106223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2434, (-1)), 'unicode', u'\n            *pad*\n              amount of padding\n\n            *tooth_size*\n              size of the sawtooth. pad* if None\n            ')
            
            # Call to __init__(...): (line 2435)
            # Processing the call arguments (line 2435)
            # Getting the type of 'pad' (line 2435)
            pad_106231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2435, 54), 'pad', False)
            # Getting the type of 'tooth_size' (line 2435)
            tooth_size_106232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2435, 59), 'tooth_size', False)
            # Processing the call keyword arguments (line 2435)
            kwargs_106233 = {}
            
            # Call to super(...): (line 2435)
            # Processing the call arguments (line 2435)
            # Getting the type of 'BoxStyle' (line 2435)
            BoxStyle_106225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2435, 18), 'BoxStyle', False)
            # Obtaining the member 'Roundtooth' of a type (line 2435)
            Roundtooth_106226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2435, 18), BoxStyle_106225, 'Roundtooth')
            # Getting the type of 'self' (line 2435)
            self_106227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2435, 39), 'self', False)
            # Processing the call keyword arguments (line 2435)
            kwargs_106228 = {}
            # Getting the type of 'super' (line 2435)
            super_106224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2435, 12), 'super', False)
            # Calling super(args, kwargs) (line 2435)
            super_call_result_106229 = invoke(stypy.reporting.localization.Localization(__file__, 2435, 12), super_106224, *[Roundtooth_106226, self_106227], **kwargs_106228)
            
            # Obtaining the member '__init__' of a type (line 2435)
            init___106230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2435, 12), super_call_result_106229, '__init__')
            # Calling __init__(args, kwargs) (line 2435)
            init___call_result_106234 = invoke(stypy.reporting.localization.Localization(__file__, 2435, 12), init___106230, *[pad_106231, tooth_size_106232], **kwargs_106233)
            
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()


        @norecursion
        def transmute(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'transmute'
            module_type_store = module_type_store.open_function_context('transmute', 2437, 8, False)
            # Assigning a type to the variable 'self' (line 2438)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2438, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            Roundtooth.transmute.__dict__.__setitem__('stypy_localization', localization)
            Roundtooth.transmute.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            Roundtooth.transmute.__dict__.__setitem__('stypy_type_store', module_type_store)
            Roundtooth.transmute.__dict__.__setitem__('stypy_function_name', 'Roundtooth.transmute')
            Roundtooth.transmute.__dict__.__setitem__('stypy_param_names_list', ['x0', 'y0', 'width', 'height', 'mutation_size'])
            Roundtooth.transmute.__dict__.__setitem__('stypy_varargs_param_name', None)
            Roundtooth.transmute.__dict__.__setitem__('stypy_kwargs_param_name', None)
            Roundtooth.transmute.__dict__.__setitem__('stypy_call_defaults', defaults)
            Roundtooth.transmute.__dict__.__setitem__('stypy_call_varargs', varargs)
            Roundtooth.transmute.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            Roundtooth.transmute.__dict__.__setitem__('stypy_declared_arg_number', 6)
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Roundtooth.transmute', ['x0', 'y0', 'width', 'height', 'mutation_size'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'transmute', localization, ['x0', 'y0', 'width', 'height', 'mutation_size'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'transmute(...)' code ##################

            
            # Assigning a Call to a Name (line 2438):
            
            # Assigning a Call to a Name (line 2438):
            
            # Assigning a Call to a Name (line 2438):
            
            # Call to _get_sawtooth_vertices(...): (line 2438)
            # Processing the call arguments (line 2438)
            # Getting the type of 'x0' (line 2438)
            x0_106237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2438, 55), 'x0', False)
            # Getting the type of 'y0' (line 2438)
            y0_106238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2438, 59), 'y0', False)
            # Getting the type of 'width' (line 2439)
            width_106239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2439, 55), 'width', False)
            # Getting the type of 'height' (line 2439)
            height_106240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2439, 62), 'height', False)
            # Getting the type of 'mutation_size' (line 2440)
            mutation_size_106241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2440, 55), 'mutation_size', False)
            # Processing the call keyword arguments (line 2438)
            kwargs_106242 = {}
            # Getting the type of 'self' (line 2438)
            self_106235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2438, 27), 'self', False)
            # Obtaining the member '_get_sawtooth_vertices' of a type (line 2438)
            _get_sawtooth_vertices_106236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2438, 27), self_106235, '_get_sawtooth_vertices')
            # Calling _get_sawtooth_vertices(args, kwargs) (line 2438)
            _get_sawtooth_vertices_call_result_106243 = invoke(stypy.reporting.localization.Localization(__file__, 2438, 27), _get_sawtooth_vertices_106236, *[x0_106237, y0_106238, width_106239, height_106240, mutation_size_106241], **kwargs_106242)
            
            # Assigning a type to the variable 'saw_vertices' (line 2438)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2438, 12), 'saw_vertices', _get_sawtooth_vertices_call_result_106243)
            
            # Assigning a Call to a Name (line 2442):
            
            # Assigning a Call to a Name (line 2442):
            
            # Assigning a Call to a Name (line 2442):
            
            # Call to concatenate(...): (line 2442)
            # Processing the call arguments (line 2442)
            
            # Obtaining an instance of the builtin type 'list' (line 2442)
            list_106246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2442, 42), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2442)
            # Adding element type (line 2442)
            
            # Call to array(...): (line 2442)
            # Processing the call arguments (line 2442)
            # Getting the type of 'saw_vertices' (line 2442)
            saw_vertices_106249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2442, 52), 'saw_vertices', False)
            # Processing the call keyword arguments (line 2442)
            kwargs_106250 = {}
            # Getting the type of 'np' (line 2442)
            np_106247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2442, 43), 'np', False)
            # Obtaining the member 'array' of a type (line 2442)
            array_106248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2442, 43), np_106247, 'array')
            # Calling array(args, kwargs) (line 2442)
            array_call_result_106251 = invoke(stypy.reporting.localization.Localization(__file__, 2442, 43), array_106248, *[saw_vertices_106249], **kwargs_106250)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2442, 42), list_106246, array_call_result_106251)
            # Adding element type (line 2442)
            
            # Obtaining an instance of the builtin type 'list' (line 2443)
            list_106252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2443, 43), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2443)
            # Adding element type (line 2443)
            
            # Obtaining the type of the subscript
            int_106253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2443, 57), 'int')
            # Getting the type of 'saw_vertices' (line 2443)
            saw_vertices_106254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2443, 44), 'saw_vertices', False)
            # Obtaining the member '__getitem__' of a type (line 2443)
            getitem___106255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2443, 44), saw_vertices_106254, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2443)
            subscript_call_result_106256 = invoke(stypy.reporting.localization.Localization(__file__, 2443, 44), getitem___106255, int_106253)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2443, 43), list_106252, subscript_call_result_106256)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2442, 42), list_106246, list_106252)
            
            # Processing the call keyword arguments (line 2442)
            int_106257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2443, 68), 'int')
            keyword_106258 = int_106257
            kwargs_106259 = {'axis': keyword_106258}
            # Getting the type of 'np' (line 2442)
            np_106244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2442, 27), 'np', False)
            # Obtaining the member 'concatenate' of a type (line 2442)
            concatenate_106245 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2442, 27), np_106244, 'concatenate')
            # Calling concatenate(args, kwargs) (line 2442)
            concatenate_call_result_106260 = invoke(stypy.reporting.localization.Localization(__file__, 2442, 27), concatenate_106245, *[list_106246], **kwargs_106259)
            
            # Assigning a type to the variable 'saw_vertices' (line 2442)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2442, 12), 'saw_vertices', concatenate_call_result_106260)
            
            # Assigning a BinOp to a Name (line 2444):
            
            # Assigning a BinOp to a Name (line 2444):
            
            # Assigning a BinOp to a Name (line 2444):
            
            # Obtaining an instance of the builtin type 'list' (line 2444)
            list_106261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2444, 21), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2444)
            # Adding element type (line 2444)
            # Getting the type of 'Path' (line 2444)
            Path_106262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2444, 22), 'Path')
            # Obtaining the member 'MOVETO' of a type (line 2444)
            MOVETO_106263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2444, 22), Path_106262, 'MOVETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2444, 21), list_106261, MOVETO_106263)
            
            
            # Obtaining an instance of the builtin type 'list' (line 2445)
            list_106264 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2445, 21), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2445)
            # Adding element type (line 2445)
            # Getting the type of 'Path' (line 2445)
            Path_106265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2445, 22), 'Path')
            # Obtaining the member 'CURVE3' of a type (line 2445)
            CURVE3_106266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2445, 22), Path_106265, 'CURVE3')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2445, 21), list_106264, CURVE3_106266)
            # Adding element type (line 2445)
            # Getting the type of 'Path' (line 2445)
            Path_106267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2445, 35), 'Path')
            # Obtaining the member 'CURVE3' of a type (line 2445)
            CURVE3_106268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2445, 35), Path_106267, 'CURVE3')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2445, 21), list_106264, CURVE3_106268)
            
            
            # Call to len(...): (line 2445)
            # Processing the call arguments (line 2445)
            # Getting the type of 'saw_vertices' (line 2445)
            saw_vertices_106270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2445, 56), 'saw_vertices', False)
            # Processing the call keyword arguments (line 2445)
            kwargs_106271 = {}
            # Getting the type of 'len' (line 2445)
            len_106269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2445, 52), 'len', False)
            # Calling len(args, kwargs) (line 2445)
            len_call_result_106272 = invoke(stypy.reporting.localization.Localization(__file__, 2445, 52), len_106269, *[saw_vertices_106270], **kwargs_106271)
            
            int_106273 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2445, 70), 'int')
            # Applying the binary operator '-' (line 2445)
            result_sub_106274 = python_operator(stypy.reporting.localization.Localization(__file__, 2445, 52), '-', len_call_result_106272, int_106273)
            
            int_106275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2445, 74), 'int')
            # Applying the binary operator '//' (line 2445)
            result_floordiv_106276 = python_operator(stypy.reporting.localization.Localization(__file__, 2445, 51), '//', result_sub_106274, int_106275)
            
            # Applying the binary operator '*' (line 2445)
            result_mul_106277 = python_operator(stypy.reporting.localization.Localization(__file__, 2445, 21), '*', list_106264, result_floordiv_106276)
            
            # Applying the binary operator '+' (line 2444)
            result_add_106278 = python_operator(stypy.reporting.localization.Localization(__file__, 2444, 21), '+', list_106261, result_mul_106277)
            
            
            # Obtaining an instance of the builtin type 'list' (line 2446)
            list_106279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2446, 21), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2446)
            # Adding element type (line 2446)
            # Getting the type of 'Path' (line 2446)
            Path_106280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2446, 22), 'Path')
            # Obtaining the member 'CLOSEPOLY' of a type (line 2446)
            CLOSEPOLY_106281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2446, 22), Path_106280, 'CLOSEPOLY')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2446, 21), list_106279, CLOSEPOLY_106281)
            
            # Applying the binary operator '+' (line 2445)
            result_add_106282 = python_operator(stypy.reporting.localization.Localization(__file__, 2445, 77), '+', result_add_106278, list_106279)
            
            # Assigning a type to the variable 'codes' (line 2444)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2444, 12), 'codes', result_add_106282)
            
            # Call to Path(...): (line 2447)
            # Processing the call arguments (line 2447)
            # Getting the type of 'saw_vertices' (line 2447)
            saw_vertices_106284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2447, 24), 'saw_vertices', False)
            # Getting the type of 'codes' (line 2447)
            codes_106285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2447, 38), 'codes', False)
            # Processing the call keyword arguments (line 2447)
            kwargs_106286 = {}
            # Getting the type of 'Path' (line 2447)
            Path_106283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2447, 19), 'Path', False)
            # Calling Path(args, kwargs) (line 2447)
            Path_call_result_106287 = invoke(stypy.reporting.localization.Localization(__file__, 2447, 19), Path_106283, *[saw_vertices_106284, codes_106285], **kwargs_106286)
            
            # Assigning a type to the variable 'stypy_return_type' (line 2447)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2447, 12), 'stypy_return_type', Path_call_result_106287)
            
            # ################# End of 'transmute(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'transmute' in the type store
            # Getting the type of 'stypy_return_type' (line 2437)
            stypy_return_type_106288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2437, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_106288)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'transmute'
            return stypy_return_type_106288

    
    # Assigning a type to the variable 'Roundtooth' (line 2425)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2425, 4), 'Roundtooth', Roundtooth)
    
    # Assigning a Name to a Subscript (line 2449):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1937, 0, False)
        # Assigning a type to the variable 'self' (line 1938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1938, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BoxStyle.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'BoxStyle' (line 1937)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1937, 0), 'BoxStyle', BoxStyle)

# Assigning a Dict to a Name (line 1971):

# Obtaining an instance of the builtin type 'dict' (line 1971)
dict_106289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1971, 18), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 1971)

# Getting the type of 'BoxStyle'
BoxStyle_106290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BoxStyle')
# Setting the type of the member '_style_list' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BoxStyle_106290, '_style_list', dict_106289)

# Assigning a Name to a Subscript (line 2065):
# Getting the type of 'Square' (line 2065)
Square_106291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2065, 28), 'Square')
# Getting the type of 'BoxStyle'
BoxStyle_106292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BoxStyle')
# Setting the type of the member '_style_list' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BoxStyle_106292, '_style_list', Square_106291)

# Assigning a Name to a Subscript (line 2088):
# Getting the type of 'Circle' (line 2088)
Circle_106293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2088, 28), 'Circle')
# Getting the type of 'BoxStyle'
BoxStyle_106294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BoxStyle')
# Setting the type of the member '_style_list' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BoxStyle_106294, '_style_list', Circle_106293)

# Assigning a Name to a Subscript (line 2126):
# Getting the type of 'LArrow' (line 2126)
LArrow_106295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2126, 28), 'LArrow')
# Getting the type of 'BoxStyle'
BoxStyle_106296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BoxStyle')
# Setting the type of the member '_style_list' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BoxStyle_106296, '_style_list', LArrow_106295)

# Assigning a Name to a Subscript (line 2145):
# Getting the type of 'RArrow' (line 2145)
RArrow_106297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2145, 28), 'RArrow')
# Getting the type of 'BoxStyle'
BoxStyle_106298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BoxStyle')
# Setting the type of the member '_style_list' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BoxStyle_106298, '_style_list', RArrow_106297)

# Assigning a Name to a Subscript (line 2196):
# Getting the type of 'DArrow' (line 2196)
DArrow_106299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2196, 28), 'DArrow')
# Getting the type of 'BoxStyle'
BoxStyle_106300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BoxStyle')
# Setting the type of the member '_style_list' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BoxStyle_106300, '_style_list', DArrow_106299)

# Assigning a Name to a Subscript (line 2259):
# Getting the type of 'Round' (line 2259)
Round_106301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2259, 27), 'Round')
# Getting the type of 'BoxStyle'
BoxStyle_106302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BoxStyle')
# Setting the type of the member '_style_list' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BoxStyle_106302, '_style_list', Round_106301)

# Assigning a Name to a Subscript (line 2314):
# Getting the type of 'Round4' (line 2314)
Round4_106303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2314, 28), 'Round4')
# Getting the type of 'BoxStyle'
BoxStyle_106304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BoxStyle')
# Setting the type of the member '_style_list' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BoxStyle_106304, '_style_list', Round4_106303)

# Assigning a Name to a Subscript (line 2423):
# Getting the type of 'Sawtooth' (line 2423)
Sawtooth_106305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2423, 30), 'Sawtooth')
# Getting the type of 'BoxStyle'
BoxStyle_106306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BoxStyle')
# Setting the type of the member '_style_list' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BoxStyle_106306, '_style_list', Sawtooth_106305)

# Assigning a Name to a Subscript (line 2449):
# Getting the type of 'Roundtooth' (line 2449)
Roundtooth_106307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2449, 32), 'Roundtooth')
# Getting the type of 'BoxStyle'
BoxStyle_106308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BoxStyle')
# Setting the type of the member '_style_list' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BoxStyle_106308, '_style_list', Roundtooth_106307)

# Assigning a Name to a Subscript (line 2449):

# Getting the type of '__doc__' (line 2451)
doc___106309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2451, 7), '__doc__')
# Testing the type of an if condition (line 2451)
if_condition_106310 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2451, 4), doc___106309)
# Assigning a type to the variable 'if_condition_106310' (line 2451)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2451, 4), 'if_condition_106310', if_condition_106310)
# SSA begins for if statement (line 2451)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Assigning a BinOp to a Name (line 2452):

# Assigning a BinOp to a Name (line 2452):

# Assigning a BinOp to a Name (line 2452):

# Call to dedent(...): (line 2452)
# Processing the call arguments (line 2452)
# Getting the type of '__doc__' (line 2452)
doc___106313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2452, 31), '__doc__', False)
# Processing the call keyword arguments (line 2452)
kwargs_106314 = {}
# Getting the type of 'cbook' (line 2452)
cbook_106311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2452, 18), 'cbook', False)
# Obtaining the member 'dedent' of a type (line 2452)
dedent_106312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2452, 18), cbook_106311, 'dedent')
# Calling dedent(args, kwargs) (line 2452)
dedent_call_result_106315 = invoke(stypy.reporting.localization.Localization(__file__, 2452, 18), dedent_106312, *[doc___106313], **kwargs_106314)


# Obtaining an instance of the builtin type 'dict' (line 2453)
dict_106316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2453, 15), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 2453)
# Adding element type (key, value) (line 2453)
unicode_106317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2453, 16), 'unicode', u'AvailableBoxstyles')

# Call to _pprint_styles(...): (line 2453)
# Processing the call arguments (line 2453)
# Getting the type of 'BoxStyle'
BoxStyle_106319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BoxStyle', False)
# Obtaining the member '_style_list' of a type
_style_list_106320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BoxStyle_106319, '_style_list')
# Processing the call keyword arguments (line 2453)
kwargs_106321 = {}
# Getting the type of '_pprint_styles' (line 2453)
_pprint_styles_106318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2453, 38), '_pprint_styles', False)
# Calling _pprint_styles(args, kwargs) (line 2453)
_pprint_styles_call_result_106322 = invoke(stypy.reporting.localization.Localization(__file__, 2453, 38), _pprint_styles_106318, *[_style_list_106320], **kwargs_106321)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2453, 15), dict_106316, (unicode_106317, _pprint_styles_call_result_106322))

# Applying the binary operator '%' (line 2452)
result_mod_106323 = python_operator(stypy.reporting.localization.Localization(__file__, 2452, 18), '%', dedent_call_result_106315, dict_106316)

# Assigning a type to the variable '__doc__' (line 2452)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2452, 8), '__doc__', result_mod_106323)
# SSA join for if statement (line 2451)
module_type_store = module_type_store.join_ssa_context()


# Call to update(...): (line 2455)
# Processing the call keyword arguments (line 2455)

# Call to _pprint_styles(...): (line 2456)
# Processing the call arguments (line 2456)
# Getting the type of 'BoxStyle' (line 2456)
BoxStyle_106328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2456, 38), 'BoxStyle', False)
# Obtaining the member '_style_list' of a type (line 2456)
_style_list_106329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2456, 38), BoxStyle_106328, '_style_list')
# Processing the call keyword arguments (line 2456)
kwargs_106330 = {}
# Getting the type of '_pprint_styles' (line 2456)
_pprint_styles_106327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2456, 23), '_pprint_styles', False)
# Calling _pprint_styles(args, kwargs) (line 2456)
_pprint_styles_call_result_106331 = invoke(stypy.reporting.localization.Localization(__file__, 2456, 23), _pprint_styles_106327, *[_style_list_106329], **kwargs_106330)

keyword_106332 = _pprint_styles_call_result_106331

# Call to _simpleprint_styles(...): (line 2457)
# Processing the call arguments (line 2457)
# Getting the type of 'BoxStyle' (line 2457)
BoxStyle_106334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2457, 38), 'BoxStyle', False)
# Obtaining the member '_style_list' of a type (line 2457)
_style_list_106335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2457, 38), BoxStyle_106334, '_style_list')
# Processing the call keyword arguments (line 2457)
kwargs_106336 = {}
# Getting the type of '_simpleprint_styles' (line 2457)
_simpleprint_styles_106333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2457, 18), '_simpleprint_styles', False)
# Calling _simpleprint_styles(args, kwargs) (line 2457)
_simpleprint_styles_call_result_106337 = invoke(stypy.reporting.localization.Localization(__file__, 2457, 18), _simpleprint_styles_106333, *[_style_list_106335], **kwargs_106336)

keyword_106338 = _simpleprint_styles_call_result_106337
kwargs_106339 = {'AvailableBoxstyles': keyword_106332, 'ListBoxstyles': keyword_106338}
# Getting the type of 'docstring' (line 2455)
docstring_106324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2455, 0), 'docstring', False)
# Obtaining the member 'interpd' of a type (line 2455)
interpd_106325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2455, 0), docstring_106324, 'interpd')
# Obtaining the member 'update' of a type (line 2455)
update_106326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2455, 0), interpd_106325, 'update')
# Calling update(args, kwargs) (line 2455)
update_call_result_106340 = invoke(stypy.reporting.localization.Localization(__file__, 2455, 0), update_106326, *[], **kwargs_106339)

# Declaration of the 'FancyBboxPatch' class
# Getting the type of 'Patch' (line 2460)
Patch_106341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2460, 21), 'Patch')

class FancyBboxPatch(Patch_106341, ):
    unicode_106342 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2470, (-1)), 'unicode', u'\n    Draw a fancy box around a rectangle with lower left at *xy*=(*x*,\n    *y*) with specified width and height.\n\n    :class:`FancyBboxPatch` class is similar to :class:`Rectangle`\n    class, but it draws a fancy box around the rectangle. The\n    transformation of the rectangle box to the fancy box is delegated\n    to the :class:`BoxTransmuterBase` and its derived classes.\n\n    ')
    
    # Assigning a Name to a Name (line 2472):
    
    # Assigning a Name to a Name (line 2472):

    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 2474, 4, False)
        # Assigning a type to the variable 'self' (line 2475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2475, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyBboxPatch.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        FancyBboxPatch.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyBboxPatch.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyBboxPatch.stypy__str__.__dict__.__setitem__('stypy_function_name', 'FancyBboxPatch.stypy__str__')
        FancyBboxPatch.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        FancyBboxPatch.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyBboxPatch.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyBboxPatch.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyBboxPatch.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyBboxPatch.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyBboxPatch.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyBboxPatch.stypy__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        # Getting the type of 'self' (line 2475)
        self_106343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2475, 15), 'self')
        # Obtaining the member '__class__' of a type (line 2475)
        class___106344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2475, 15), self_106343, '__class__')
        # Obtaining the member '__name__' of a type (line 2475)
        name___106345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2475, 15), class___106344, '__name__')
        unicode_106346 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2476, 29), 'unicode', u'(%g,%g;%gx%g)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2476)
        tuple_106347 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2476, 48), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2476)
        # Adding element type (line 2476)
        # Getting the type of 'self' (line 2476)
        self_106348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2476, 48), 'self')
        # Obtaining the member '_x' of a type (line 2476)
        _x_106349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2476, 48), self_106348, '_x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2476, 48), tuple_106347, _x_106349)
        # Adding element type (line 2476)
        # Getting the type of 'self' (line 2476)
        self_106350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2476, 57), 'self')
        # Obtaining the member '_y' of a type (line 2476)
        _y_106351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2476, 57), self_106350, '_y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2476, 48), tuple_106347, _y_106351)
        # Adding element type (line 2476)
        # Getting the type of 'self' (line 2477)
        self_106352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 48), 'self')
        # Obtaining the member '_width' of a type (line 2477)
        _width_106353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2477, 48), self_106352, '_width')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2476, 48), tuple_106347, _width_106353)
        # Adding element type (line 2476)
        # Getting the type of 'self' (line 2477)
        self_106354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 61), 'self')
        # Obtaining the member '_height' of a type (line 2477)
        _height_106355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2477, 61), self_106354, '_height')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2476, 48), tuple_106347, _height_106355)
        
        # Applying the binary operator '%' (line 2476)
        result_mod_106356 = python_operator(stypy.reporting.localization.Localization(__file__, 2476, 29), '%', unicode_106346, tuple_106347)
        
        # Applying the binary operator '+' (line 2475)
        result_add_106357 = python_operator(stypy.reporting.localization.Localization(__file__, 2475, 15), '+', name___106345, result_mod_106356)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2475, 8), 'stypy_return_type', result_add_106357)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 2474)
        stypy_return_type_106358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2474, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_106358)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_106358


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_106359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2481, 26), 'unicode', u'round')
        # Getting the type of 'None' (line 2482)
        None_106360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2482, 33), 'None')
        float_106361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2483, 32), 'float')
        # Getting the type of 'None' (line 2484)
        None_106362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2484, 33), 'None')
        defaults = [unicode_106359, None_106360, float_106361, None_106362]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2479, 4, False)
        # Assigning a type to the variable 'self' (line 2480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2480, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyBboxPatch.__init__', ['xy', 'width', 'height', 'boxstyle', 'bbox_transmuter', 'mutation_scale', 'mutation_aspect'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['xy', 'width', 'height', 'boxstyle', 'bbox_transmuter', 'mutation_scale', 'mutation_aspect'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_106363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2507, (-1)), 'unicode', u'\n        *xy* = lower left corner\n\n        *width*, *height*\n\n        *boxstyle* determines what kind of fancy box will be drawn. It\n        can be a string of the style name with a comma separated\n        attribute, or an instance of :class:`BoxStyle`. Following box\n        styles are available.\n\n        %(AvailableBoxstyles)s\n\n        *mutation_scale* : a value with which attributes of boxstyle\n        (e.g., pad) will be scaled. default=1.\n\n        *mutation_aspect* : The height of the rectangle will be\n        squeezed by this value before the mutation and the mutated\n        box will be stretched by the inverse of it. default=None.\n\n        Valid kwargs are:\n        %(Patch)s\n        ')
        
        # Call to __init__(...): (line 2509)
        # Processing the call arguments (line 2509)
        # Getting the type of 'self' (line 2509)
        self_106366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2509, 23), 'self', False)
        # Processing the call keyword arguments (line 2509)
        # Getting the type of 'kwargs' (line 2509)
        kwargs_106367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2509, 31), 'kwargs', False)
        kwargs_106368 = {'kwargs_106367': kwargs_106367}
        # Getting the type of 'Patch' (line 2509)
        Patch_106364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2509, 8), 'Patch', False)
        # Obtaining the member '__init__' of a type (line 2509)
        init___106365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2509, 8), Patch_106364, '__init__')
        # Calling __init__(args, kwargs) (line 2509)
        init___call_result_106369 = invoke(stypy.reporting.localization.Localization(__file__, 2509, 8), init___106365, *[self_106366], **kwargs_106368)
        
        
        # Assigning a Subscript to a Attribute (line 2511):
        
        # Assigning a Subscript to a Attribute (line 2511):
        
        # Assigning a Subscript to a Attribute (line 2511):
        
        # Obtaining the type of the subscript
        int_106370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2511, 21), 'int')
        # Getting the type of 'xy' (line 2511)
        xy_106371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2511, 18), 'xy')
        # Obtaining the member '__getitem__' of a type (line 2511)
        getitem___106372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2511, 18), xy_106371, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2511)
        subscript_call_result_106373 = invoke(stypy.reporting.localization.Localization(__file__, 2511, 18), getitem___106372, int_106370)
        
        # Getting the type of 'self' (line 2511)
        self_106374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2511, 8), 'self')
        # Setting the type of the member '_x' of a type (line 2511)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2511, 8), self_106374, '_x', subscript_call_result_106373)
        
        # Assigning a Subscript to a Attribute (line 2512):
        
        # Assigning a Subscript to a Attribute (line 2512):
        
        # Assigning a Subscript to a Attribute (line 2512):
        
        # Obtaining the type of the subscript
        int_106375 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2512, 21), 'int')
        # Getting the type of 'xy' (line 2512)
        xy_106376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2512, 18), 'xy')
        # Obtaining the member '__getitem__' of a type (line 2512)
        getitem___106377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2512, 18), xy_106376, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2512)
        subscript_call_result_106378 = invoke(stypy.reporting.localization.Localization(__file__, 2512, 18), getitem___106377, int_106375)
        
        # Getting the type of 'self' (line 2512)
        self_106379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2512, 8), 'self')
        # Setting the type of the member '_y' of a type (line 2512)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2512, 8), self_106379, '_y', subscript_call_result_106378)
        
        # Assigning a Name to a Attribute (line 2513):
        
        # Assigning a Name to a Attribute (line 2513):
        
        # Assigning a Name to a Attribute (line 2513):
        # Getting the type of 'width' (line 2513)
        width_106380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2513, 22), 'width')
        # Getting the type of 'self' (line 2513)
        self_106381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2513, 8), 'self')
        # Setting the type of the member '_width' of a type (line 2513)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2513, 8), self_106381, '_width', width_106380)
        
        # Assigning a Name to a Attribute (line 2514):
        
        # Assigning a Name to a Attribute (line 2514):
        
        # Assigning a Name to a Attribute (line 2514):
        # Getting the type of 'height' (line 2514)
        height_106382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2514, 23), 'height')
        # Getting the type of 'self' (line 2514)
        self_106383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2514, 8), 'self')
        # Setting the type of the member '_height' of a type (line 2514)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2514, 8), self_106383, '_height', height_106382)
        
        
        # Getting the type of 'boxstyle' (line 2516)
        boxstyle_106384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2516, 11), 'boxstyle')
        unicode_106385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2516, 23), 'unicode', u'custom')
        # Applying the binary operator '==' (line 2516)
        result_eq_106386 = python_operator(stypy.reporting.localization.Localization(__file__, 2516, 11), '==', boxstyle_106384, unicode_106385)
        
        # Testing the type of an if condition (line 2516)
        if_condition_106387 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2516, 8), result_eq_106386)
        # Assigning a type to the variable 'if_condition_106387' (line 2516)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2516, 8), 'if_condition_106387', if_condition_106387)
        # SSA begins for if statement (line 2516)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Type idiom detected: calculating its left and rigth part (line 2517)
        # Getting the type of 'bbox_transmuter' (line 2517)
        bbox_transmuter_106388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2517, 15), 'bbox_transmuter')
        # Getting the type of 'None' (line 2517)
        None_106389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2517, 34), 'None')
        
        (may_be_106390, more_types_in_union_106391) = may_be_none(bbox_transmuter_106388, None_106389)

        if may_be_106390:

            if more_types_in_union_106391:
                # Runtime conditional SSA (line 2517)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to ValueError(...): (line 2518)
            # Processing the call arguments (line 2518)
            unicode_106393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2518, 33), 'unicode', u'bbox_transmuter argument is needed with custom boxstyle')
            # Processing the call keyword arguments (line 2518)
            kwargs_106394 = {}
            # Getting the type of 'ValueError' (line 2518)
            ValueError_106392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2518, 22), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 2518)
            ValueError_call_result_106395 = invoke(stypy.reporting.localization.Localization(__file__, 2518, 22), ValueError_106392, *[unicode_106393], **kwargs_106394)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2518, 16), ValueError_call_result_106395, 'raise parameter', BaseException)

            if more_types_in_union_106391:
                # SSA join for if statement (line 2517)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 2520):
        
        # Assigning a Name to a Attribute (line 2520):
        
        # Assigning a Name to a Attribute (line 2520):
        # Getting the type of 'bbox_transmuter' (line 2520)
        bbox_transmuter_106396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2520, 36), 'bbox_transmuter')
        # Getting the type of 'self' (line 2520)
        self_106397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2520, 12), 'self')
        # Setting the type of the member '_bbox_transmuter' of a type (line 2520)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2520, 12), self_106397, '_bbox_transmuter', bbox_transmuter_106396)
        # SSA branch for the else part of an if statement (line 2516)
        module_type_store.open_ssa_branch('else')
        
        # Call to set_boxstyle(...): (line 2522)
        # Processing the call arguments (line 2522)
        # Getting the type of 'boxstyle' (line 2522)
        boxstyle_106400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2522, 30), 'boxstyle', False)
        # Processing the call keyword arguments (line 2522)
        kwargs_106401 = {}
        # Getting the type of 'self' (line 2522)
        self_106398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2522, 12), 'self', False)
        # Obtaining the member 'set_boxstyle' of a type (line 2522)
        set_boxstyle_106399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2522, 12), self_106398, 'set_boxstyle')
        # Calling set_boxstyle(args, kwargs) (line 2522)
        set_boxstyle_call_result_106402 = invoke(stypy.reporting.localization.Localization(__file__, 2522, 12), set_boxstyle_106399, *[boxstyle_106400], **kwargs_106401)
        
        # SSA join for if statement (line 2516)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 2524):
        
        # Assigning a Name to a Attribute (line 2524):
        
        # Assigning a Name to a Attribute (line 2524):
        # Getting the type of 'mutation_scale' (line 2524)
        mutation_scale_106403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2524, 31), 'mutation_scale')
        # Getting the type of 'self' (line 2524)
        self_106404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2524, 8), 'self')
        # Setting the type of the member '_mutation_scale' of a type (line 2524)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2524, 8), self_106404, '_mutation_scale', mutation_scale_106403)
        
        # Assigning a Name to a Attribute (line 2525):
        
        # Assigning a Name to a Attribute (line 2525):
        
        # Assigning a Name to a Attribute (line 2525):
        # Getting the type of 'mutation_aspect' (line 2525)
        mutation_aspect_106405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2525, 32), 'mutation_aspect')
        # Getting the type of 'self' (line 2525)
        self_106406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2525, 8), 'self')
        # Setting the type of the member '_mutation_aspect' of a type (line 2525)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2525, 8), self_106406, '_mutation_aspect', mutation_aspect_106405)
        
        # Assigning a Name to a Attribute (line 2527):
        
        # Assigning a Name to a Attribute (line 2527):
        
        # Assigning a Name to a Attribute (line 2527):
        # Getting the type of 'True' (line 2527)
        True_106407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2527, 21), 'True')
        # Getting the type of 'self' (line 2527)
        self_106408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2527, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 2527)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2527, 8), self_106408, 'stale', True_106407)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def set_boxstyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 2530)
        None_106409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2530, 36), 'None')
        defaults = [None_106409]
        # Create a new context for function 'set_boxstyle'
        module_type_store = module_type_store.open_function_context('set_boxstyle', 2529, 4, False)
        # Assigning a type to the variable 'self' (line 2530)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2530, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyBboxPatch.set_boxstyle.__dict__.__setitem__('stypy_localization', localization)
        FancyBboxPatch.set_boxstyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyBboxPatch.set_boxstyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyBboxPatch.set_boxstyle.__dict__.__setitem__('stypy_function_name', 'FancyBboxPatch.set_boxstyle')
        FancyBboxPatch.set_boxstyle.__dict__.__setitem__('stypy_param_names_list', ['boxstyle'])
        FancyBboxPatch.set_boxstyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyBboxPatch.set_boxstyle.__dict__.__setitem__('stypy_kwargs_param_name', 'kw')
        FancyBboxPatch.set_boxstyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyBboxPatch.set_boxstyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyBboxPatch.set_boxstyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyBboxPatch.set_boxstyle.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyBboxPatch.set_boxstyle', ['boxstyle'], None, 'kw', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_boxstyle', localization, ['boxstyle'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_boxstyle(...)' code ##################

        unicode_106410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2551, (-1)), 'unicode', u'\n        Set the box style.\n\n        *boxstyle* can be a string with boxstyle name with optional\n        comma-separated attributes. Alternatively, the attrs can\n        be provided as keywords::\n\n            set_boxstyle("round,pad=0.2")\n            set_boxstyle("round", pad=0.2)\n\n        Old attrs simply are forgotten.\n\n        Without argument (or with *boxstyle* = None), it returns\n        available box styles.\n\n        The following boxstyles are available:\n        %(AvailableBoxstyles)s\n\n        ACCEPTS: %(ListBoxstyles)s\n\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 2552)
        # Getting the type of 'boxstyle' (line 2552)
        boxstyle_106411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2552, 11), 'boxstyle')
        # Getting the type of 'None' (line 2552)
        None_106412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2552, 23), 'None')
        
        (may_be_106413, more_types_in_union_106414) = may_be_none(boxstyle_106411, None_106412)

        if may_be_106413:

            if more_types_in_union_106414:
                # Runtime conditional SSA (line 2552)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to pprint_styles(...): (line 2553)
            # Processing the call keyword arguments (line 2553)
            kwargs_106417 = {}
            # Getting the type of 'BoxStyle' (line 2553)
            BoxStyle_106415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2553, 19), 'BoxStyle', False)
            # Obtaining the member 'pprint_styles' of a type (line 2553)
            pprint_styles_106416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2553, 19), BoxStyle_106415, 'pprint_styles')
            # Calling pprint_styles(args, kwargs) (line 2553)
            pprint_styles_call_result_106418 = invoke(stypy.reporting.localization.Localization(__file__, 2553, 19), pprint_styles_106416, *[], **kwargs_106417)
            
            # Assigning a type to the variable 'stypy_return_type' (line 2553)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2553, 12), 'stypy_return_type', pprint_styles_call_result_106418)

            if more_types_in_union_106414:
                # SSA join for if statement (line 2552)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Evaluating a boolean operation
        
        # Call to isinstance(...): (line 2555)
        # Processing the call arguments (line 2555)
        # Getting the type of 'boxstyle' (line 2555)
        boxstyle_106420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2555, 22), 'boxstyle', False)
        # Getting the type of 'BoxStyle' (line 2555)
        BoxStyle_106421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2555, 32), 'BoxStyle', False)
        # Obtaining the member '_Base' of a type (line 2555)
        _Base_106422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2555, 32), BoxStyle_106421, '_Base')
        # Processing the call keyword arguments (line 2555)
        kwargs_106423 = {}
        # Getting the type of 'isinstance' (line 2555)
        isinstance_106419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2555, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 2555)
        isinstance_call_result_106424 = invoke(stypy.reporting.localization.Localization(__file__, 2555, 11), isinstance_106419, *[boxstyle_106420, _Base_106422], **kwargs_106423)
        
        
        # Call to callable(...): (line 2555)
        # Processing the call arguments (line 2555)
        # Getting the type of 'boxstyle' (line 2555)
        boxstyle_106426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2555, 60), 'boxstyle', False)
        # Processing the call keyword arguments (line 2555)
        kwargs_106427 = {}
        # Getting the type of 'callable' (line 2555)
        callable_106425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2555, 51), 'callable', False)
        # Calling callable(args, kwargs) (line 2555)
        callable_call_result_106428 = invoke(stypy.reporting.localization.Localization(__file__, 2555, 51), callable_106425, *[boxstyle_106426], **kwargs_106427)
        
        # Applying the binary operator 'or' (line 2555)
        result_or_keyword_106429 = python_operator(stypy.reporting.localization.Localization(__file__, 2555, 11), 'or', isinstance_call_result_106424, callable_call_result_106428)
        
        # Testing the type of an if condition (line 2555)
        if_condition_106430 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2555, 8), result_or_keyword_106429)
        # Assigning a type to the variable 'if_condition_106430' (line 2555)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2555, 8), 'if_condition_106430', if_condition_106430)
        # SSA begins for if statement (line 2555)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 2556):
        
        # Assigning a Name to a Attribute (line 2556):
        
        # Assigning a Name to a Attribute (line 2556):
        # Getting the type of 'boxstyle' (line 2556)
        boxstyle_106431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2556, 36), 'boxstyle')
        # Getting the type of 'self' (line 2556)
        self_106432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2556, 12), 'self')
        # Setting the type of the member '_bbox_transmuter' of a type (line 2556)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2556, 12), self_106432, '_bbox_transmuter', boxstyle_106431)
        # SSA branch for the else part of an if statement (line 2555)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Attribute (line 2558):
        
        # Assigning a Call to a Attribute (line 2558):
        
        # Assigning a Call to a Attribute (line 2558):
        
        # Call to BoxStyle(...): (line 2558)
        # Processing the call arguments (line 2558)
        # Getting the type of 'boxstyle' (line 2558)
        boxstyle_106434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2558, 45), 'boxstyle', False)
        # Processing the call keyword arguments (line 2558)
        # Getting the type of 'kw' (line 2558)
        kw_106435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2558, 57), 'kw', False)
        kwargs_106436 = {'kw_106435': kw_106435}
        # Getting the type of 'BoxStyle' (line 2558)
        BoxStyle_106433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2558, 36), 'BoxStyle', False)
        # Calling BoxStyle(args, kwargs) (line 2558)
        BoxStyle_call_result_106437 = invoke(stypy.reporting.localization.Localization(__file__, 2558, 36), BoxStyle_106433, *[boxstyle_106434], **kwargs_106436)
        
        # Getting the type of 'self' (line 2558)
        self_106438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2558, 12), 'self')
        # Setting the type of the member '_bbox_transmuter' of a type (line 2558)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2558, 12), self_106438, '_bbox_transmuter', BoxStyle_call_result_106437)
        # SSA join for if statement (line 2555)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 2559):
        
        # Assigning a Name to a Attribute (line 2559):
        
        # Assigning a Name to a Attribute (line 2559):
        # Getting the type of 'True' (line 2559)
        True_106439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2559, 21), 'True')
        # Getting the type of 'self' (line 2559)
        self_106440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2559, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 2559)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2559, 8), self_106440, 'stale', True_106439)
        
        # ################# End of 'set_boxstyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_boxstyle' in the type store
        # Getting the type of 'stypy_return_type' (line 2529)
        stypy_return_type_106441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2529, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_106441)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_boxstyle'
        return stypy_return_type_106441


    @norecursion
    def set_mutation_scale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_mutation_scale'
        module_type_store = module_type_store.open_function_context('set_mutation_scale', 2561, 4, False)
        # Assigning a type to the variable 'self' (line 2562)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2562, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyBboxPatch.set_mutation_scale.__dict__.__setitem__('stypy_localization', localization)
        FancyBboxPatch.set_mutation_scale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyBboxPatch.set_mutation_scale.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyBboxPatch.set_mutation_scale.__dict__.__setitem__('stypy_function_name', 'FancyBboxPatch.set_mutation_scale')
        FancyBboxPatch.set_mutation_scale.__dict__.__setitem__('stypy_param_names_list', ['scale'])
        FancyBboxPatch.set_mutation_scale.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyBboxPatch.set_mutation_scale.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyBboxPatch.set_mutation_scale.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyBboxPatch.set_mutation_scale.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyBboxPatch.set_mutation_scale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyBboxPatch.set_mutation_scale.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyBboxPatch.set_mutation_scale', ['scale'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_mutation_scale', localization, ['scale'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_mutation_scale(...)' code ##################

        unicode_106442 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2566, (-1)), 'unicode', u'\n        Set the mutation scale.\n\n        ACCEPTS: float\n        ')
        
        # Assigning a Name to a Attribute (line 2567):
        
        # Assigning a Name to a Attribute (line 2567):
        
        # Assigning a Name to a Attribute (line 2567):
        # Getting the type of 'scale' (line 2567)
        scale_106443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2567, 31), 'scale')
        # Getting the type of 'self' (line 2567)
        self_106444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2567, 8), 'self')
        # Setting the type of the member '_mutation_scale' of a type (line 2567)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2567, 8), self_106444, '_mutation_scale', scale_106443)
        
        # Assigning a Name to a Attribute (line 2568):
        
        # Assigning a Name to a Attribute (line 2568):
        
        # Assigning a Name to a Attribute (line 2568):
        # Getting the type of 'True' (line 2568)
        True_106445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2568, 21), 'True')
        # Getting the type of 'self' (line 2568)
        self_106446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2568, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 2568)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2568, 8), self_106446, 'stale', True_106445)
        
        # ################# End of 'set_mutation_scale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_mutation_scale' in the type store
        # Getting the type of 'stypy_return_type' (line 2561)
        stypy_return_type_106447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2561, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_106447)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_mutation_scale'
        return stypy_return_type_106447


    @norecursion
    def get_mutation_scale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_mutation_scale'
        module_type_store = module_type_store.open_function_context('get_mutation_scale', 2570, 4, False)
        # Assigning a type to the variable 'self' (line 2571)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2571, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyBboxPatch.get_mutation_scale.__dict__.__setitem__('stypy_localization', localization)
        FancyBboxPatch.get_mutation_scale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyBboxPatch.get_mutation_scale.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyBboxPatch.get_mutation_scale.__dict__.__setitem__('stypy_function_name', 'FancyBboxPatch.get_mutation_scale')
        FancyBboxPatch.get_mutation_scale.__dict__.__setitem__('stypy_param_names_list', [])
        FancyBboxPatch.get_mutation_scale.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyBboxPatch.get_mutation_scale.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyBboxPatch.get_mutation_scale.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyBboxPatch.get_mutation_scale.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyBboxPatch.get_mutation_scale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyBboxPatch.get_mutation_scale.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyBboxPatch.get_mutation_scale', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_mutation_scale', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_mutation_scale(...)' code ##################

        unicode_106448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2573, (-1)), 'unicode', u'\n        Return the mutation scale.\n        ')
        # Getting the type of 'self' (line 2574)
        self_106449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2574, 15), 'self')
        # Obtaining the member '_mutation_scale' of a type (line 2574)
        _mutation_scale_106450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2574, 15), self_106449, '_mutation_scale')
        # Assigning a type to the variable 'stypy_return_type' (line 2574)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2574, 8), 'stypy_return_type', _mutation_scale_106450)
        
        # ################# End of 'get_mutation_scale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_mutation_scale' in the type store
        # Getting the type of 'stypy_return_type' (line 2570)
        stypy_return_type_106451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2570, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_106451)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_mutation_scale'
        return stypy_return_type_106451


    @norecursion
    def set_mutation_aspect(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_mutation_aspect'
        module_type_store = module_type_store.open_function_context('set_mutation_aspect', 2576, 4, False)
        # Assigning a type to the variable 'self' (line 2577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2577, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyBboxPatch.set_mutation_aspect.__dict__.__setitem__('stypy_localization', localization)
        FancyBboxPatch.set_mutation_aspect.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyBboxPatch.set_mutation_aspect.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyBboxPatch.set_mutation_aspect.__dict__.__setitem__('stypy_function_name', 'FancyBboxPatch.set_mutation_aspect')
        FancyBboxPatch.set_mutation_aspect.__dict__.__setitem__('stypy_param_names_list', ['aspect'])
        FancyBboxPatch.set_mutation_aspect.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyBboxPatch.set_mutation_aspect.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyBboxPatch.set_mutation_aspect.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyBboxPatch.set_mutation_aspect.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyBboxPatch.set_mutation_aspect.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyBboxPatch.set_mutation_aspect.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyBboxPatch.set_mutation_aspect', ['aspect'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_mutation_aspect', localization, ['aspect'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_mutation_aspect(...)' code ##################

        unicode_106452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2581, (-1)), 'unicode', u'\n        Set the aspect ratio of the bbox mutation.\n\n        ACCEPTS: float\n        ')
        
        # Assigning a Name to a Attribute (line 2582):
        
        # Assigning a Name to a Attribute (line 2582):
        
        # Assigning a Name to a Attribute (line 2582):
        # Getting the type of 'aspect' (line 2582)
        aspect_106453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2582, 32), 'aspect')
        # Getting the type of 'self' (line 2582)
        self_106454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2582, 8), 'self')
        # Setting the type of the member '_mutation_aspect' of a type (line 2582)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2582, 8), self_106454, '_mutation_aspect', aspect_106453)
        
        # Assigning a Name to a Attribute (line 2583):
        
        # Assigning a Name to a Attribute (line 2583):
        
        # Assigning a Name to a Attribute (line 2583):
        # Getting the type of 'True' (line 2583)
        True_106455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2583, 21), 'True')
        # Getting the type of 'self' (line 2583)
        self_106456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2583, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 2583)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2583, 8), self_106456, 'stale', True_106455)
        
        # ################# End of 'set_mutation_aspect(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_mutation_aspect' in the type store
        # Getting the type of 'stypy_return_type' (line 2576)
        stypy_return_type_106457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2576, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_106457)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_mutation_aspect'
        return stypy_return_type_106457


    @norecursion
    def get_mutation_aspect(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_mutation_aspect'
        module_type_store = module_type_store.open_function_context('get_mutation_aspect', 2585, 4, False)
        # Assigning a type to the variable 'self' (line 2586)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2586, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyBboxPatch.get_mutation_aspect.__dict__.__setitem__('stypy_localization', localization)
        FancyBboxPatch.get_mutation_aspect.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyBboxPatch.get_mutation_aspect.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyBboxPatch.get_mutation_aspect.__dict__.__setitem__('stypy_function_name', 'FancyBboxPatch.get_mutation_aspect')
        FancyBboxPatch.get_mutation_aspect.__dict__.__setitem__('stypy_param_names_list', [])
        FancyBboxPatch.get_mutation_aspect.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyBboxPatch.get_mutation_aspect.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyBboxPatch.get_mutation_aspect.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyBboxPatch.get_mutation_aspect.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyBboxPatch.get_mutation_aspect.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyBboxPatch.get_mutation_aspect.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyBboxPatch.get_mutation_aspect', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_mutation_aspect', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_mutation_aspect(...)' code ##################

        unicode_106458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2588, (-1)), 'unicode', u'\n        Return the aspect ratio of the bbox mutation.\n        ')
        # Getting the type of 'self' (line 2589)
        self_106459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2589, 15), 'self')
        # Obtaining the member '_mutation_aspect' of a type (line 2589)
        _mutation_aspect_106460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2589, 15), self_106459, '_mutation_aspect')
        # Assigning a type to the variable 'stypy_return_type' (line 2589)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2589, 8), 'stypy_return_type', _mutation_aspect_106460)
        
        # ################# End of 'get_mutation_aspect(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_mutation_aspect' in the type store
        # Getting the type of 'stypy_return_type' (line 2585)
        stypy_return_type_106461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2585, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_106461)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_mutation_aspect'
        return stypy_return_type_106461


    @norecursion
    def get_boxstyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_boxstyle'
        module_type_store = module_type_store.open_function_context('get_boxstyle', 2591, 4, False)
        # Assigning a type to the variable 'self' (line 2592)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2592, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyBboxPatch.get_boxstyle.__dict__.__setitem__('stypy_localization', localization)
        FancyBboxPatch.get_boxstyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyBboxPatch.get_boxstyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyBboxPatch.get_boxstyle.__dict__.__setitem__('stypy_function_name', 'FancyBboxPatch.get_boxstyle')
        FancyBboxPatch.get_boxstyle.__dict__.__setitem__('stypy_param_names_list', [])
        FancyBboxPatch.get_boxstyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyBboxPatch.get_boxstyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyBboxPatch.get_boxstyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyBboxPatch.get_boxstyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyBboxPatch.get_boxstyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyBboxPatch.get_boxstyle.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyBboxPatch.get_boxstyle', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_boxstyle', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_boxstyle(...)' code ##################

        unicode_106462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2592, 8), 'unicode', u'Return the boxstyle object')
        # Getting the type of 'self' (line 2593)
        self_106463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2593, 15), 'self')
        # Obtaining the member '_bbox_transmuter' of a type (line 2593)
        _bbox_transmuter_106464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2593, 15), self_106463, '_bbox_transmuter')
        # Assigning a type to the variable 'stypy_return_type' (line 2593)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2593, 8), 'stypy_return_type', _bbox_transmuter_106464)
        
        # ################# End of 'get_boxstyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_boxstyle' in the type store
        # Getting the type of 'stypy_return_type' (line 2591)
        stypy_return_type_106465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2591, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_106465)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_boxstyle'
        return stypy_return_type_106465


    @norecursion
    def get_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_path'
        module_type_store = module_type_store.open_function_context('get_path', 2595, 4, False)
        # Assigning a type to the variable 'self' (line 2596)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2596, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyBboxPatch.get_path.__dict__.__setitem__('stypy_localization', localization)
        FancyBboxPatch.get_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyBboxPatch.get_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyBboxPatch.get_path.__dict__.__setitem__('stypy_function_name', 'FancyBboxPatch.get_path')
        FancyBboxPatch.get_path.__dict__.__setitem__('stypy_param_names_list', [])
        FancyBboxPatch.get_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyBboxPatch.get_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyBboxPatch.get_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyBboxPatch.get_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyBboxPatch.get_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyBboxPatch.get_path.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyBboxPatch.get_path', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_path', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_path(...)' code ##################

        unicode_106466 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2598, (-1)), 'unicode', u'\n        Return the mutated path of the rectangle\n        ')
        
        # Assigning a Call to a Name (line 2600):
        
        # Assigning a Call to a Name (line 2600):
        
        # Assigning a Call to a Name (line 2600):
        
        # Call to (...): (line 2600)
        # Processing the call arguments (line 2600)
        # Getting the type of 'self' (line 2600)
        self_106471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2600, 36), 'self', False)
        # Obtaining the member '_x' of a type (line 2600)
        _x_106472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2600, 36), self_106471, '_x')
        # Getting the type of 'self' (line 2600)
        self_106473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2600, 45), 'self', False)
        # Obtaining the member '_y' of a type (line 2600)
        _y_106474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2600, 45), self_106473, '_y')
        # Getting the type of 'self' (line 2601)
        self_106475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2601, 36), 'self', False)
        # Obtaining the member '_width' of a type (line 2601)
        _width_106476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2601, 36), self_106475, '_width')
        # Getting the type of 'self' (line 2601)
        self_106477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2601, 49), 'self', False)
        # Obtaining the member '_height' of a type (line 2601)
        _height_106478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2601, 49), self_106477, '_height')
        
        # Call to get_mutation_scale(...): (line 2602)
        # Processing the call keyword arguments (line 2602)
        kwargs_106481 = {}
        # Getting the type of 'self' (line 2602)
        self_106479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 36), 'self', False)
        # Obtaining the member 'get_mutation_scale' of a type (line 2602)
        get_mutation_scale_106480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2602, 36), self_106479, 'get_mutation_scale')
        # Calling get_mutation_scale(args, kwargs) (line 2602)
        get_mutation_scale_call_result_106482 = invoke(stypy.reporting.localization.Localization(__file__, 2602, 36), get_mutation_scale_106480, *[], **kwargs_106481)
        
        
        # Call to get_mutation_aspect(...): (line 2603)
        # Processing the call keyword arguments (line 2603)
        kwargs_106485 = {}
        # Getting the type of 'self' (line 2603)
        self_106483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2603, 36), 'self', False)
        # Obtaining the member 'get_mutation_aspect' of a type (line 2603)
        get_mutation_aspect_106484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2603, 36), self_106483, 'get_mutation_aspect')
        # Calling get_mutation_aspect(args, kwargs) (line 2603)
        get_mutation_aspect_call_result_106486 = invoke(stypy.reporting.localization.Localization(__file__, 2603, 36), get_mutation_aspect_106484, *[], **kwargs_106485)
        
        # Processing the call keyword arguments (line 2600)
        kwargs_106487 = {}
        
        # Call to get_boxstyle(...): (line 2600)
        # Processing the call keyword arguments (line 2600)
        kwargs_106469 = {}
        # Getting the type of 'self' (line 2600)
        self_106467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2600, 16), 'self', False)
        # Obtaining the member 'get_boxstyle' of a type (line 2600)
        get_boxstyle_106468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2600, 16), self_106467, 'get_boxstyle')
        # Calling get_boxstyle(args, kwargs) (line 2600)
        get_boxstyle_call_result_106470 = invoke(stypy.reporting.localization.Localization(__file__, 2600, 16), get_boxstyle_106468, *[], **kwargs_106469)
        
        # Calling (args, kwargs) (line 2600)
        _call_result_106488 = invoke(stypy.reporting.localization.Localization(__file__, 2600, 16), get_boxstyle_call_result_106470, *[_x_106472, _y_106474, _width_106476, _height_106478, get_mutation_scale_call_result_106482, get_mutation_aspect_call_result_106486], **kwargs_106487)
        
        # Assigning a type to the variable '_path' (line 2600)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2600, 8), '_path', _call_result_106488)
        # Getting the type of '_path' (line 2604)
        _path_106489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2604, 15), '_path')
        # Assigning a type to the variable 'stypy_return_type' (line 2604)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2604, 8), 'stypy_return_type', _path_106489)
        
        # ################# End of 'get_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_path' in the type store
        # Getting the type of 'stypy_return_type' (line 2595)
        stypy_return_type_106490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_106490)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_path'
        return stypy_return_type_106490


    @norecursion
    def get_x(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_x'
        module_type_store = module_type_store.open_function_context('get_x', 2608, 4, False)
        # Assigning a type to the variable 'self' (line 2609)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2609, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyBboxPatch.get_x.__dict__.__setitem__('stypy_localization', localization)
        FancyBboxPatch.get_x.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyBboxPatch.get_x.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyBboxPatch.get_x.__dict__.__setitem__('stypy_function_name', 'FancyBboxPatch.get_x')
        FancyBboxPatch.get_x.__dict__.__setitem__('stypy_param_names_list', [])
        FancyBboxPatch.get_x.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyBboxPatch.get_x.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyBboxPatch.get_x.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyBboxPatch.get_x.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyBboxPatch.get_x.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyBboxPatch.get_x.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyBboxPatch.get_x', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_x', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_x(...)' code ##################

        unicode_106491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2609, 8), 'unicode', u'Return the left coord of the rectangle')
        # Getting the type of 'self' (line 2610)
        self_106492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2610, 15), 'self')
        # Obtaining the member '_x' of a type (line 2610)
        _x_106493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2610, 15), self_106492, '_x')
        # Assigning a type to the variable 'stypy_return_type' (line 2610)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2610, 8), 'stypy_return_type', _x_106493)
        
        # ################# End of 'get_x(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_x' in the type store
        # Getting the type of 'stypy_return_type' (line 2608)
        stypy_return_type_106494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_106494)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_x'
        return stypy_return_type_106494


    @norecursion
    def get_y(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_y'
        module_type_store = module_type_store.open_function_context('get_y', 2612, 4, False)
        # Assigning a type to the variable 'self' (line 2613)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2613, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyBboxPatch.get_y.__dict__.__setitem__('stypy_localization', localization)
        FancyBboxPatch.get_y.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyBboxPatch.get_y.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyBboxPatch.get_y.__dict__.__setitem__('stypy_function_name', 'FancyBboxPatch.get_y')
        FancyBboxPatch.get_y.__dict__.__setitem__('stypy_param_names_list', [])
        FancyBboxPatch.get_y.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyBboxPatch.get_y.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyBboxPatch.get_y.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyBboxPatch.get_y.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyBboxPatch.get_y.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyBboxPatch.get_y.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyBboxPatch.get_y', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_y', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_y(...)' code ##################

        unicode_106495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2613, 8), 'unicode', u'Return the bottom coord of the rectangle')
        # Getting the type of 'self' (line 2614)
        self_106496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2614, 15), 'self')
        # Obtaining the member '_y' of a type (line 2614)
        _y_106497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2614, 15), self_106496, '_y')
        # Assigning a type to the variable 'stypy_return_type' (line 2614)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2614, 8), 'stypy_return_type', _y_106497)
        
        # ################# End of 'get_y(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_y' in the type store
        # Getting the type of 'stypy_return_type' (line 2612)
        stypy_return_type_106498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2612, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_106498)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_y'
        return stypy_return_type_106498


    @norecursion
    def get_width(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_width'
        module_type_store = module_type_store.open_function_context('get_width', 2616, 4, False)
        # Assigning a type to the variable 'self' (line 2617)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2617, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyBboxPatch.get_width.__dict__.__setitem__('stypy_localization', localization)
        FancyBboxPatch.get_width.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyBboxPatch.get_width.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyBboxPatch.get_width.__dict__.__setitem__('stypy_function_name', 'FancyBboxPatch.get_width')
        FancyBboxPatch.get_width.__dict__.__setitem__('stypy_param_names_list', [])
        FancyBboxPatch.get_width.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyBboxPatch.get_width.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyBboxPatch.get_width.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyBboxPatch.get_width.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyBboxPatch.get_width.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyBboxPatch.get_width.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyBboxPatch.get_width', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_width', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_width(...)' code ##################

        unicode_106499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2617, 8), 'unicode', u'Return the width of the  rectangle')
        # Getting the type of 'self' (line 2618)
        self_106500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2618, 15), 'self')
        # Obtaining the member '_width' of a type (line 2618)
        _width_106501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2618, 15), self_106500, '_width')
        # Assigning a type to the variable 'stypy_return_type' (line 2618)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2618, 8), 'stypy_return_type', _width_106501)
        
        # ################# End of 'get_width(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_width' in the type store
        # Getting the type of 'stypy_return_type' (line 2616)
        stypy_return_type_106502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2616, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_106502)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_width'
        return stypy_return_type_106502


    @norecursion
    def get_height(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_height'
        module_type_store = module_type_store.open_function_context('get_height', 2620, 4, False)
        # Assigning a type to the variable 'self' (line 2621)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2621, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyBboxPatch.get_height.__dict__.__setitem__('stypy_localization', localization)
        FancyBboxPatch.get_height.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyBboxPatch.get_height.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyBboxPatch.get_height.__dict__.__setitem__('stypy_function_name', 'FancyBboxPatch.get_height')
        FancyBboxPatch.get_height.__dict__.__setitem__('stypy_param_names_list', [])
        FancyBboxPatch.get_height.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyBboxPatch.get_height.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyBboxPatch.get_height.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyBboxPatch.get_height.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyBboxPatch.get_height.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyBboxPatch.get_height.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyBboxPatch.get_height', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_height', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_height(...)' code ##################

        unicode_106503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2621, 8), 'unicode', u'Return the height of the rectangle')
        # Getting the type of 'self' (line 2622)
        self_106504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2622, 15), 'self')
        # Obtaining the member '_height' of a type (line 2622)
        _height_106505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2622, 15), self_106504, '_height')
        # Assigning a type to the variable 'stypy_return_type' (line 2622)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2622, 8), 'stypy_return_type', _height_106505)
        
        # ################# End of 'get_height(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_height' in the type store
        # Getting the type of 'stypy_return_type' (line 2620)
        stypy_return_type_106506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2620, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_106506)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_height'
        return stypy_return_type_106506


    @norecursion
    def set_x(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_x'
        module_type_store = module_type_store.open_function_context('set_x', 2624, 4, False)
        # Assigning a type to the variable 'self' (line 2625)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2625, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyBboxPatch.set_x.__dict__.__setitem__('stypy_localization', localization)
        FancyBboxPatch.set_x.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyBboxPatch.set_x.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyBboxPatch.set_x.__dict__.__setitem__('stypy_function_name', 'FancyBboxPatch.set_x')
        FancyBboxPatch.set_x.__dict__.__setitem__('stypy_param_names_list', ['x'])
        FancyBboxPatch.set_x.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyBboxPatch.set_x.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyBboxPatch.set_x.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyBboxPatch.set_x.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyBboxPatch.set_x.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyBboxPatch.set_x.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyBboxPatch.set_x', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_x', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_x(...)' code ##################

        unicode_106507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2629, (-1)), 'unicode', u'\n        Set the left coord of the rectangle\n\n        ACCEPTS: float\n        ')
        
        # Assigning a Name to a Attribute (line 2630):
        
        # Assigning a Name to a Attribute (line 2630):
        
        # Assigning a Name to a Attribute (line 2630):
        # Getting the type of 'x' (line 2630)
        x_106508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2630, 18), 'x')
        # Getting the type of 'self' (line 2630)
        self_106509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2630, 8), 'self')
        # Setting the type of the member '_x' of a type (line 2630)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2630, 8), self_106509, '_x', x_106508)
        
        # Assigning a Name to a Attribute (line 2631):
        
        # Assigning a Name to a Attribute (line 2631):
        
        # Assigning a Name to a Attribute (line 2631):
        # Getting the type of 'True' (line 2631)
        True_106510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2631, 21), 'True')
        # Getting the type of 'self' (line 2631)
        self_106511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2631, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 2631)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2631, 8), self_106511, 'stale', True_106510)
        
        # ################# End of 'set_x(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_x' in the type store
        # Getting the type of 'stypy_return_type' (line 2624)
        stypy_return_type_106512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2624, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_106512)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_x'
        return stypy_return_type_106512


    @norecursion
    def set_y(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_y'
        module_type_store = module_type_store.open_function_context('set_y', 2633, 4, False)
        # Assigning a type to the variable 'self' (line 2634)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2634, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyBboxPatch.set_y.__dict__.__setitem__('stypy_localization', localization)
        FancyBboxPatch.set_y.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyBboxPatch.set_y.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyBboxPatch.set_y.__dict__.__setitem__('stypy_function_name', 'FancyBboxPatch.set_y')
        FancyBboxPatch.set_y.__dict__.__setitem__('stypy_param_names_list', ['y'])
        FancyBboxPatch.set_y.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyBboxPatch.set_y.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyBboxPatch.set_y.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyBboxPatch.set_y.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyBboxPatch.set_y.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyBboxPatch.set_y.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyBboxPatch.set_y', ['y'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_y', localization, ['y'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_y(...)' code ##################

        unicode_106513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2638, (-1)), 'unicode', u'\n        Set the bottom coord of the rectangle\n\n        ACCEPTS: float\n        ')
        
        # Assigning a Name to a Attribute (line 2639):
        
        # Assigning a Name to a Attribute (line 2639):
        
        # Assigning a Name to a Attribute (line 2639):
        # Getting the type of 'y' (line 2639)
        y_106514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2639, 18), 'y')
        # Getting the type of 'self' (line 2639)
        self_106515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2639, 8), 'self')
        # Setting the type of the member '_y' of a type (line 2639)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2639, 8), self_106515, '_y', y_106514)
        
        # Assigning a Name to a Attribute (line 2640):
        
        # Assigning a Name to a Attribute (line 2640):
        
        # Assigning a Name to a Attribute (line 2640):
        # Getting the type of 'True' (line 2640)
        True_106516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 21), 'True')
        # Getting the type of 'self' (line 2640)
        self_106517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 2640)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2640, 8), self_106517, 'stale', True_106516)
        
        # ################# End of 'set_y(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_y' in the type store
        # Getting the type of 'stypy_return_type' (line 2633)
        stypy_return_type_106518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2633, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_106518)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_y'
        return stypy_return_type_106518


    @norecursion
    def set_width(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_width'
        module_type_store = module_type_store.open_function_context('set_width', 2642, 4, False)
        # Assigning a type to the variable 'self' (line 2643)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2643, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyBboxPatch.set_width.__dict__.__setitem__('stypy_localization', localization)
        FancyBboxPatch.set_width.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyBboxPatch.set_width.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyBboxPatch.set_width.__dict__.__setitem__('stypy_function_name', 'FancyBboxPatch.set_width')
        FancyBboxPatch.set_width.__dict__.__setitem__('stypy_param_names_list', ['w'])
        FancyBboxPatch.set_width.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyBboxPatch.set_width.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyBboxPatch.set_width.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyBboxPatch.set_width.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyBboxPatch.set_width.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyBboxPatch.set_width.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyBboxPatch.set_width', ['w'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_width', localization, ['w'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_width(...)' code ##################

        unicode_106519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2647, (-1)), 'unicode', u'\n        Set the width rectangle\n\n        ACCEPTS: float\n        ')
        
        # Assigning a Name to a Attribute (line 2648):
        
        # Assigning a Name to a Attribute (line 2648):
        
        # Assigning a Name to a Attribute (line 2648):
        # Getting the type of 'w' (line 2648)
        w_106520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2648, 22), 'w')
        # Getting the type of 'self' (line 2648)
        self_106521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2648, 8), 'self')
        # Setting the type of the member '_width' of a type (line 2648)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2648, 8), self_106521, '_width', w_106520)
        
        # Assigning a Name to a Attribute (line 2649):
        
        # Assigning a Name to a Attribute (line 2649):
        
        # Assigning a Name to a Attribute (line 2649):
        # Getting the type of 'True' (line 2649)
        True_106522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2649, 21), 'True')
        # Getting the type of 'self' (line 2649)
        self_106523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2649, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 2649)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2649, 8), self_106523, 'stale', True_106522)
        
        # ################# End of 'set_width(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_width' in the type store
        # Getting the type of 'stypy_return_type' (line 2642)
        stypy_return_type_106524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2642, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_106524)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_width'
        return stypy_return_type_106524


    @norecursion
    def set_height(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_height'
        module_type_store = module_type_store.open_function_context('set_height', 2651, 4, False)
        # Assigning a type to the variable 'self' (line 2652)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2652, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyBboxPatch.set_height.__dict__.__setitem__('stypy_localization', localization)
        FancyBboxPatch.set_height.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyBboxPatch.set_height.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyBboxPatch.set_height.__dict__.__setitem__('stypy_function_name', 'FancyBboxPatch.set_height')
        FancyBboxPatch.set_height.__dict__.__setitem__('stypy_param_names_list', ['h'])
        FancyBboxPatch.set_height.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyBboxPatch.set_height.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyBboxPatch.set_height.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyBboxPatch.set_height.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyBboxPatch.set_height.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyBboxPatch.set_height.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyBboxPatch.set_height', ['h'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_height', localization, ['h'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_height(...)' code ##################

        unicode_106525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2656, (-1)), 'unicode', u'\n        Set the width rectangle\n\n        ACCEPTS: float\n        ')
        
        # Assigning a Name to a Attribute (line 2657):
        
        # Assigning a Name to a Attribute (line 2657):
        
        # Assigning a Name to a Attribute (line 2657):
        # Getting the type of 'h' (line 2657)
        h_106526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2657, 23), 'h')
        # Getting the type of 'self' (line 2657)
        self_106527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2657, 8), 'self')
        # Setting the type of the member '_height' of a type (line 2657)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2657, 8), self_106527, '_height', h_106526)
        
        # Assigning a Name to a Attribute (line 2658):
        
        # Assigning a Name to a Attribute (line 2658):
        
        # Assigning a Name to a Attribute (line 2658):
        # Getting the type of 'True' (line 2658)
        True_106528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2658, 21), 'True')
        # Getting the type of 'self' (line 2658)
        self_106529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2658, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 2658)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2658, 8), self_106529, 'stale', True_106528)
        
        # ################# End of 'set_height(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_height' in the type store
        # Getting the type of 'stypy_return_type' (line 2651)
        stypy_return_type_106530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2651, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_106530)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_height'
        return stypy_return_type_106530


    @norecursion
    def set_bounds(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_bounds'
        module_type_store = module_type_store.open_function_context('set_bounds', 2660, 4, False)
        # Assigning a type to the variable 'self' (line 2661)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2661, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyBboxPatch.set_bounds.__dict__.__setitem__('stypy_localization', localization)
        FancyBboxPatch.set_bounds.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyBboxPatch.set_bounds.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyBboxPatch.set_bounds.__dict__.__setitem__('stypy_function_name', 'FancyBboxPatch.set_bounds')
        FancyBboxPatch.set_bounds.__dict__.__setitem__('stypy_param_names_list', [])
        FancyBboxPatch.set_bounds.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        FancyBboxPatch.set_bounds.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyBboxPatch.set_bounds.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyBboxPatch.set_bounds.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyBboxPatch.set_bounds.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyBboxPatch.set_bounds.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyBboxPatch.set_bounds', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_bounds', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_bounds(...)' code ##################

        unicode_106531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2665, (-1)), 'unicode', u'\n        Set the bounds of the rectangle: l,b,w,h\n\n        ACCEPTS: (left, bottom, width, height)\n        ')
        
        
        
        # Call to len(...): (line 2666)
        # Processing the call arguments (line 2666)
        # Getting the type of 'args' (line 2666)
        args_106533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2666, 15), 'args', False)
        # Processing the call keyword arguments (line 2666)
        kwargs_106534 = {}
        # Getting the type of 'len' (line 2666)
        len_106532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2666, 11), 'len', False)
        # Calling len(args, kwargs) (line 2666)
        len_call_result_106535 = invoke(stypy.reporting.localization.Localization(__file__, 2666, 11), len_106532, *[args_106533], **kwargs_106534)
        
        int_106536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2666, 24), 'int')
        # Applying the binary operator '==' (line 2666)
        result_eq_106537 = python_operator(stypy.reporting.localization.Localization(__file__, 2666, 11), '==', len_call_result_106535, int_106536)
        
        # Testing the type of an if condition (line 2666)
        if_condition_106538 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2666, 8), result_eq_106537)
        # Assigning a type to the variable 'if_condition_106538' (line 2666)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2666, 8), 'if_condition_106538', if_condition_106538)
        # SSA begins for if statement (line 2666)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Tuple (line 2667):
        
        # Assigning a Subscript to a Name (line 2667):
        
        # Assigning a Subscript to a Name (line 2667):
        
        # Obtaining the type of the subscript
        int_106539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2667, 12), 'int')
        
        # Obtaining the type of the subscript
        int_106540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2667, 30), 'int')
        # Getting the type of 'args' (line 2667)
        args_106541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2667, 25), 'args')
        # Obtaining the member '__getitem__' of a type (line 2667)
        getitem___106542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2667, 25), args_106541, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2667)
        subscript_call_result_106543 = invoke(stypy.reporting.localization.Localization(__file__, 2667, 25), getitem___106542, int_106540)
        
        # Obtaining the member '__getitem__' of a type (line 2667)
        getitem___106544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2667, 12), subscript_call_result_106543, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2667)
        subscript_call_result_106545 = invoke(stypy.reporting.localization.Localization(__file__, 2667, 12), getitem___106544, int_106539)
        
        # Assigning a type to the variable 'tuple_var_assignment_100488' (line 2667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2667, 12), 'tuple_var_assignment_100488', subscript_call_result_106545)
        
        # Assigning a Subscript to a Name (line 2667):
        
        # Assigning a Subscript to a Name (line 2667):
        
        # Obtaining the type of the subscript
        int_106546 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2667, 12), 'int')
        
        # Obtaining the type of the subscript
        int_106547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2667, 30), 'int')
        # Getting the type of 'args' (line 2667)
        args_106548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2667, 25), 'args')
        # Obtaining the member '__getitem__' of a type (line 2667)
        getitem___106549 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2667, 25), args_106548, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2667)
        subscript_call_result_106550 = invoke(stypy.reporting.localization.Localization(__file__, 2667, 25), getitem___106549, int_106547)
        
        # Obtaining the member '__getitem__' of a type (line 2667)
        getitem___106551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2667, 12), subscript_call_result_106550, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2667)
        subscript_call_result_106552 = invoke(stypy.reporting.localization.Localization(__file__, 2667, 12), getitem___106551, int_106546)
        
        # Assigning a type to the variable 'tuple_var_assignment_100489' (line 2667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2667, 12), 'tuple_var_assignment_100489', subscript_call_result_106552)
        
        # Assigning a Subscript to a Name (line 2667):
        
        # Assigning a Subscript to a Name (line 2667):
        
        # Obtaining the type of the subscript
        int_106553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2667, 12), 'int')
        
        # Obtaining the type of the subscript
        int_106554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2667, 30), 'int')
        # Getting the type of 'args' (line 2667)
        args_106555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2667, 25), 'args')
        # Obtaining the member '__getitem__' of a type (line 2667)
        getitem___106556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2667, 25), args_106555, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2667)
        subscript_call_result_106557 = invoke(stypy.reporting.localization.Localization(__file__, 2667, 25), getitem___106556, int_106554)
        
        # Obtaining the member '__getitem__' of a type (line 2667)
        getitem___106558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2667, 12), subscript_call_result_106557, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2667)
        subscript_call_result_106559 = invoke(stypy.reporting.localization.Localization(__file__, 2667, 12), getitem___106558, int_106553)
        
        # Assigning a type to the variable 'tuple_var_assignment_100490' (line 2667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2667, 12), 'tuple_var_assignment_100490', subscript_call_result_106559)
        
        # Assigning a Subscript to a Name (line 2667):
        
        # Assigning a Subscript to a Name (line 2667):
        
        # Obtaining the type of the subscript
        int_106560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2667, 12), 'int')
        
        # Obtaining the type of the subscript
        int_106561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2667, 30), 'int')
        # Getting the type of 'args' (line 2667)
        args_106562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2667, 25), 'args')
        # Obtaining the member '__getitem__' of a type (line 2667)
        getitem___106563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2667, 25), args_106562, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2667)
        subscript_call_result_106564 = invoke(stypy.reporting.localization.Localization(__file__, 2667, 25), getitem___106563, int_106561)
        
        # Obtaining the member '__getitem__' of a type (line 2667)
        getitem___106565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2667, 12), subscript_call_result_106564, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2667)
        subscript_call_result_106566 = invoke(stypy.reporting.localization.Localization(__file__, 2667, 12), getitem___106565, int_106560)
        
        # Assigning a type to the variable 'tuple_var_assignment_100491' (line 2667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2667, 12), 'tuple_var_assignment_100491', subscript_call_result_106566)
        
        # Assigning a Name to a Name (line 2667):
        
        # Assigning a Name to a Name (line 2667):
        # Getting the type of 'tuple_var_assignment_100488' (line 2667)
        tuple_var_assignment_100488_106567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2667, 12), 'tuple_var_assignment_100488')
        # Assigning a type to the variable 'l' (line 2667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2667, 12), 'l', tuple_var_assignment_100488_106567)
        
        # Assigning a Name to a Name (line 2667):
        
        # Assigning a Name to a Name (line 2667):
        # Getting the type of 'tuple_var_assignment_100489' (line 2667)
        tuple_var_assignment_100489_106568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2667, 12), 'tuple_var_assignment_100489')
        # Assigning a type to the variable 'b' (line 2667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2667, 15), 'b', tuple_var_assignment_100489_106568)
        
        # Assigning a Name to a Name (line 2667):
        
        # Assigning a Name to a Name (line 2667):
        # Getting the type of 'tuple_var_assignment_100490' (line 2667)
        tuple_var_assignment_100490_106569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2667, 12), 'tuple_var_assignment_100490')
        # Assigning a type to the variable 'w' (line 2667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2667, 18), 'w', tuple_var_assignment_100490_106569)
        
        # Assigning a Name to a Name (line 2667):
        
        # Assigning a Name to a Name (line 2667):
        # Getting the type of 'tuple_var_assignment_100491' (line 2667)
        tuple_var_assignment_100491_106570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2667, 12), 'tuple_var_assignment_100491')
        # Assigning a type to the variable 'h' (line 2667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2667, 21), 'h', tuple_var_assignment_100491_106570)
        # SSA branch for the else part of an if statement (line 2666)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Tuple (line 2669):
        
        # Assigning a Subscript to a Name (line 2669):
        
        # Assigning a Subscript to a Name (line 2669):
        
        # Obtaining the type of the subscript
        int_106571 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2669, 12), 'int')
        # Getting the type of 'args' (line 2669)
        args_106572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2669, 25), 'args')
        # Obtaining the member '__getitem__' of a type (line 2669)
        getitem___106573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2669, 12), args_106572, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2669)
        subscript_call_result_106574 = invoke(stypy.reporting.localization.Localization(__file__, 2669, 12), getitem___106573, int_106571)
        
        # Assigning a type to the variable 'tuple_var_assignment_100492' (line 2669)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2669, 12), 'tuple_var_assignment_100492', subscript_call_result_106574)
        
        # Assigning a Subscript to a Name (line 2669):
        
        # Assigning a Subscript to a Name (line 2669):
        
        # Obtaining the type of the subscript
        int_106575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2669, 12), 'int')
        # Getting the type of 'args' (line 2669)
        args_106576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2669, 25), 'args')
        # Obtaining the member '__getitem__' of a type (line 2669)
        getitem___106577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2669, 12), args_106576, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2669)
        subscript_call_result_106578 = invoke(stypy.reporting.localization.Localization(__file__, 2669, 12), getitem___106577, int_106575)
        
        # Assigning a type to the variable 'tuple_var_assignment_100493' (line 2669)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2669, 12), 'tuple_var_assignment_100493', subscript_call_result_106578)
        
        # Assigning a Subscript to a Name (line 2669):
        
        # Assigning a Subscript to a Name (line 2669):
        
        # Obtaining the type of the subscript
        int_106579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2669, 12), 'int')
        # Getting the type of 'args' (line 2669)
        args_106580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2669, 25), 'args')
        # Obtaining the member '__getitem__' of a type (line 2669)
        getitem___106581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2669, 12), args_106580, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2669)
        subscript_call_result_106582 = invoke(stypy.reporting.localization.Localization(__file__, 2669, 12), getitem___106581, int_106579)
        
        # Assigning a type to the variable 'tuple_var_assignment_100494' (line 2669)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2669, 12), 'tuple_var_assignment_100494', subscript_call_result_106582)
        
        # Assigning a Subscript to a Name (line 2669):
        
        # Assigning a Subscript to a Name (line 2669):
        
        # Obtaining the type of the subscript
        int_106583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2669, 12), 'int')
        # Getting the type of 'args' (line 2669)
        args_106584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2669, 25), 'args')
        # Obtaining the member '__getitem__' of a type (line 2669)
        getitem___106585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2669, 12), args_106584, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2669)
        subscript_call_result_106586 = invoke(stypy.reporting.localization.Localization(__file__, 2669, 12), getitem___106585, int_106583)
        
        # Assigning a type to the variable 'tuple_var_assignment_100495' (line 2669)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2669, 12), 'tuple_var_assignment_100495', subscript_call_result_106586)
        
        # Assigning a Name to a Name (line 2669):
        
        # Assigning a Name to a Name (line 2669):
        # Getting the type of 'tuple_var_assignment_100492' (line 2669)
        tuple_var_assignment_100492_106587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2669, 12), 'tuple_var_assignment_100492')
        # Assigning a type to the variable 'l' (line 2669)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2669, 12), 'l', tuple_var_assignment_100492_106587)
        
        # Assigning a Name to a Name (line 2669):
        
        # Assigning a Name to a Name (line 2669):
        # Getting the type of 'tuple_var_assignment_100493' (line 2669)
        tuple_var_assignment_100493_106588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2669, 12), 'tuple_var_assignment_100493')
        # Assigning a type to the variable 'b' (line 2669)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2669, 15), 'b', tuple_var_assignment_100493_106588)
        
        # Assigning a Name to a Name (line 2669):
        
        # Assigning a Name to a Name (line 2669):
        # Getting the type of 'tuple_var_assignment_100494' (line 2669)
        tuple_var_assignment_100494_106589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2669, 12), 'tuple_var_assignment_100494')
        # Assigning a type to the variable 'w' (line 2669)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2669, 18), 'w', tuple_var_assignment_100494_106589)
        
        # Assigning a Name to a Name (line 2669):
        
        # Assigning a Name to a Name (line 2669):
        # Getting the type of 'tuple_var_assignment_100495' (line 2669)
        tuple_var_assignment_100495_106590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2669, 12), 'tuple_var_assignment_100495')
        # Assigning a type to the variable 'h' (line 2669)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2669, 21), 'h', tuple_var_assignment_100495_106590)
        # SSA join for if statement (line 2666)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 2670):
        
        # Assigning a Name to a Attribute (line 2670):
        
        # Assigning a Name to a Attribute (line 2670):
        # Getting the type of 'l' (line 2670)
        l_106591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2670, 18), 'l')
        # Getting the type of 'self' (line 2670)
        self_106592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2670, 8), 'self')
        # Setting the type of the member '_x' of a type (line 2670)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2670, 8), self_106592, '_x', l_106591)
        
        # Assigning a Name to a Attribute (line 2671):
        
        # Assigning a Name to a Attribute (line 2671):
        
        # Assigning a Name to a Attribute (line 2671):
        # Getting the type of 'b' (line 2671)
        b_106593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2671, 18), 'b')
        # Getting the type of 'self' (line 2671)
        self_106594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2671, 8), 'self')
        # Setting the type of the member '_y' of a type (line 2671)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2671, 8), self_106594, '_y', b_106593)
        
        # Assigning a Name to a Attribute (line 2672):
        
        # Assigning a Name to a Attribute (line 2672):
        
        # Assigning a Name to a Attribute (line 2672):
        # Getting the type of 'w' (line 2672)
        w_106595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2672, 22), 'w')
        # Getting the type of 'self' (line 2672)
        self_106596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2672, 8), 'self')
        # Setting the type of the member '_width' of a type (line 2672)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2672, 8), self_106596, '_width', w_106595)
        
        # Assigning a Name to a Attribute (line 2673):
        
        # Assigning a Name to a Attribute (line 2673):
        
        # Assigning a Name to a Attribute (line 2673):
        # Getting the type of 'h' (line 2673)
        h_106597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2673, 23), 'h')
        # Getting the type of 'self' (line 2673)
        self_106598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2673, 8), 'self')
        # Setting the type of the member '_height' of a type (line 2673)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2673, 8), self_106598, '_height', h_106597)
        
        # Assigning a Name to a Attribute (line 2674):
        
        # Assigning a Name to a Attribute (line 2674):
        
        # Assigning a Name to a Attribute (line 2674):
        # Getting the type of 'True' (line 2674)
        True_106599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2674, 21), 'True')
        # Getting the type of 'self' (line 2674)
        self_106600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2674, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 2674)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2674, 8), self_106600, 'stale', True_106599)
        
        # ################# End of 'set_bounds(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_bounds' in the type store
        # Getting the type of 'stypy_return_type' (line 2660)
        stypy_return_type_106601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2660, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_106601)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_bounds'
        return stypy_return_type_106601


    @norecursion
    def get_bbox(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_bbox'
        module_type_store = module_type_store.open_function_context('get_bbox', 2676, 4, False)
        # Assigning a type to the variable 'self' (line 2677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2677, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyBboxPatch.get_bbox.__dict__.__setitem__('stypy_localization', localization)
        FancyBboxPatch.get_bbox.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyBboxPatch.get_bbox.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyBboxPatch.get_bbox.__dict__.__setitem__('stypy_function_name', 'FancyBboxPatch.get_bbox')
        FancyBboxPatch.get_bbox.__dict__.__setitem__('stypy_param_names_list', [])
        FancyBboxPatch.get_bbox.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyBboxPatch.get_bbox.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyBboxPatch.get_bbox.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyBboxPatch.get_bbox.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyBboxPatch.get_bbox.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyBboxPatch.get_bbox.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyBboxPatch.get_bbox', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_bbox', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_bbox(...)' code ##################

        
        # Call to from_bounds(...): (line 2677)
        # Processing the call arguments (line 2677)
        # Getting the type of 'self' (line 2677)
        self_106605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2677, 43), 'self', False)
        # Obtaining the member '_x' of a type (line 2677)
        _x_106606 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2677, 43), self_106605, '_x')
        # Getting the type of 'self' (line 2677)
        self_106607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2677, 52), 'self', False)
        # Obtaining the member '_y' of a type (line 2677)
        _y_106608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2677, 52), self_106607, '_y')
        # Getting the type of 'self' (line 2678)
        self_106609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2678, 43), 'self', False)
        # Obtaining the member '_width' of a type (line 2678)
        _width_106610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2678, 43), self_106609, '_width')
        # Getting the type of 'self' (line 2678)
        self_106611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2678, 56), 'self', False)
        # Obtaining the member '_height' of a type (line 2678)
        _height_106612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2678, 56), self_106611, '_height')
        # Processing the call keyword arguments (line 2677)
        kwargs_106613 = {}
        # Getting the type of 'transforms' (line 2677)
        transforms_106602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2677, 15), 'transforms', False)
        # Obtaining the member 'Bbox' of a type (line 2677)
        Bbox_106603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2677, 15), transforms_106602, 'Bbox')
        # Obtaining the member 'from_bounds' of a type (line 2677)
        from_bounds_106604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2677, 15), Bbox_106603, 'from_bounds')
        # Calling from_bounds(args, kwargs) (line 2677)
        from_bounds_call_result_106614 = invoke(stypy.reporting.localization.Localization(__file__, 2677, 15), from_bounds_106604, *[_x_106606, _y_106608, _width_106610, _height_106612], **kwargs_106613)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2677, 8), 'stypy_return_type', from_bounds_call_result_106614)
        
        # ################# End of 'get_bbox(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_bbox' in the type store
        # Getting the type of 'stypy_return_type' (line 2676)
        stypy_return_type_106615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2676, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_106615)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_bbox'
        return stypy_return_type_106615


# Assigning a type to the variable 'FancyBboxPatch' (line 2460)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2460, 0), 'FancyBboxPatch', FancyBboxPatch)

# Assigning a Name to a Name (line 2472):
# Getting the type of 'True' (line 2472)
True_106616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2472, 20), 'True')
# Getting the type of 'FancyBboxPatch'
FancyBboxPatch_106617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'FancyBboxPatch')
# Setting the type of the member '_edge_default' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), FancyBboxPatch_106617, '_edge_default', True_106616)
# Declaration of the 'ConnectionStyle' class
# Getting the type of '_Style' (line 2681)
_Style_106618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2681, 22), '_Style')

class ConnectionStyle(_Style_106618, ):
    unicode_106619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2719, (-1)), 'unicode', u'\n    :class:`ConnectionStyle` is a container class which defines\n    several connectionstyle classes, which is used to create a path\n    between two points. These are mainly used with\n    :class:`FancyArrowPatch`.\n\n    A connectionstyle object can be either created as::\n\n           ConnectionStyle.Arc3(rad=0.2)\n\n    or::\n\n           ConnectionStyle("Arc3", rad=0.2)\n\n    or::\n\n           ConnectionStyle("Arc3, rad=0.2")\n\n    The following classes are defined\n\n    %(AvailableConnectorstyles)s\n\n\n    An instance of any connection style class is an callable object,\n    whose call signature is::\n\n        __call__(self, posA, posB,\n                 patchA=None, patchB=None,\n                 shrinkA=2., shrinkB=2.)\n\n    and it returns a :class:`Path` instance. *posA* and *posB* are\n    tuples of x,y coordinates of the two points to be\n    connected. *patchA* (or *patchB*) is given, the returned path is\n    clipped so that it start (or end) from the boundary of the\n    patch. The path is further shrunk by *shrinkA* (or *shrinkB*)\n    which is given in points.\n\n    ')
    
    # Assigning a Dict to a Name (line 2721):
    
    # Assigning a Dict to a Name (line 2721):
    # Declaration of the '_Base' class

    class _Base(object, ):
        unicode_106620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2734, (-1)), 'unicode', u'\n        A base class for connectionstyle classes. The subclass needs\n        to implement a *connect* method whose call signature is::\n\n          connect(posA, posB)\n\n        where posA and posB are tuples of x, y coordinates to be\n        connected.  The method needs to return a path connecting two\n        points. This base class defines a __call__ method, and a few\n        helper methods.\n        ')
        # Declaration of the 'SimpleEvent' class

        class SimpleEvent:

            @norecursion
            def __init__(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function '__init__'
                module_type_store = module_type_store.open_function_context('__init__', 2737, 12, False)
                # Assigning a type to the variable 'self' (line 2738)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2738, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'SimpleEvent.__init__', ['xy'], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return

                # Initialize method data
                init_call_information(module_type_store, '__init__', localization, ['xy'], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of '__init__(...)' code ##################

                
                # Assigning a Name to a Tuple (line 2738):
                
                # Assigning a Subscript to a Name (line 2738):
                
                # Assigning a Subscript to a Name (line 2738):
                
                # Obtaining the type of the subscript
                int_106621 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2738, 16), 'int')
                # Getting the type of 'xy' (line 2738)
                xy_106622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2738, 33), 'xy')
                # Obtaining the member '__getitem__' of a type (line 2738)
                getitem___106623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2738, 16), xy_106622, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 2738)
                subscript_call_result_106624 = invoke(stypy.reporting.localization.Localization(__file__, 2738, 16), getitem___106623, int_106621)
                
                # Assigning a type to the variable 'tuple_var_assignment_100496' (line 2738)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2738, 16), 'tuple_var_assignment_100496', subscript_call_result_106624)
                
                # Assigning a Subscript to a Name (line 2738):
                
                # Assigning a Subscript to a Name (line 2738):
                
                # Obtaining the type of the subscript
                int_106625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2738, 16), 'int')
                # Getting the type of 'xy' (line 2738)
                xy_106626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2738, 33), 'xy')
                # Obtaining the member '__getitem__' of a type (line 2738)
                getitem___106627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2738, 16), xy_106626, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 2738)
                subscript_call_result_106628 = invoke(stypy.reporting.localization.Localization(__file__, 2738, 16), getitem___106627, int_106625)
                
                # Assigning a type to the variable 'tuple_var_assignment_100497' (line 2738)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2738, 16), 'tuple_var_assignment_100497', subscript_call_result_106628)
                
                # Assigning a Name to a Attribute (line 2738):
                
                # Assigning a Name to a Attribute (line 2738):
                # Getting the type of 'tuple_var_assignment_100496' (line 2738)
                tuple_var_assignment_100496_106629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2738, 16), 'tuple_var_assignment_100496')
                # Getting the type of 'self' (line 2738)
                self_106630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2738, 16), 'self')
                # Setting the type of the member 'x' of a type (line 2738)
                module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2738, 16), self_106630, 'x', tuple_var_assignment_100496_106629)
                
                # Assigning a Name to a Attribute (line 2738):
                
                # Assigning a Name to a Attribute (line 2738):
                # Getting the type of 'tuple_var_assignment_100497' (line 2738)
                tuple_var_assignment_100497_106631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2738, 16), 'tuple_var_assignment_100497')
                # Getting the type of 'self' (line 2738)
                self_106632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2738, 24), 'self')
                # Setting the type of the member 'y' of a type (line 2738)
                module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2738, 24), self_106632, 'y', tuple_var_assignment_100497_106631)
                
                # ################# End of '__init__(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()

        
        # Assigning a type to the variable 'SimpleEvent' (line 2736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2736, 8), 'SimpleEvent', SimpleEvent)

        @norecursion
        def _clip(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_clip'
            module_type_store = module_type_store.open_function_context('_clip', 2740, 8, False)
            # Assigning a type to the variable 'self' (line 2741)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2741, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            _Base._clip.__dict__.__setitem__('stypy_localization', localization)
            _Base._clip.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            _Base._clip.__dict__.__setitem__('stypy_type_store', module_type_store)
            _Base._clip.__dict__.__setitem__('stypy_function_name', '_Base._clip')
            _Base._clip.__dict__.__setitem__('stypy_param_names_list', ['path', 'patchA', 'patchB'])
            _Base._clip.__dict__.__setitem__('stypy_varargs_param_name', None)
            _Base._clip.__dict__.__setitem__('stypy_kwargs_param_name', None)
            _Base._clip.__dict__.__setitem__('stypy_call_defaults', defaults)
            _Base._clip.__dict__.__setitem__('stypy_call_varargs', varargs)
            _Base._clip.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            _Base._clip.__dict__.__setitem__('stypy_declared_arg_number', 4)
            arguments = process_argument_values(localization, type_of_self, module_type_store, '_Base._clip', ['path', 'patchA', 'patchB'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, '_clip', localization, ['path', 'patchA', 'patchB'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '_clip(...)' code ##################

            unicode_106633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2747, (-1)), 'unicode', u'\n            Clip the path to the boundary of the patchA and patchB.\n            The starting point of the path needed to be inside of the\n            patchA and the end point inside the patch B. The *contains*\n            methods of each patch object is utilized to test if the point\n            is inside the path.\n            ')
            
            # Getting the type of 'patchA' (line 2749)
            patchA_106634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2749, 15), 'patchA')
            # Testing the type of an if condition (line 2749)
            if_condition_106635 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2749, 12), patchA_106634)
            # Assigning a type to the variable 'if_condition_106635' (line 2749)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2749, 12), 'if_condition_106635', if_condition_106635)
            # SSA begins for if statement (line 2749)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

            @norecursion
            def insideA(localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'insideA'
                module_type_store = module_type_store.open_function_context('insideA', 2750, 16, False)
                
                # Passed parameters checking function
                insideA.stypy_localization = localization
                insideA.stypy_type_of_self = None
                insideA.stypy_type_store = module_type_store
                insideA.stypy_function_name = 'insideA'
                insideA.stypy_param_names_list = ['xy_display']
                insideA.stypy_varargs_param_name = None
                insideA.stypy_kwargs_param_name = None
                insideA.stypy_call_defaults = defaults
                insideA.stypy_call_varargs = varargs
                insideA.stypy_call_kwargs = kwargs
                arguments = process_argument_values(localization, None, module_type_store, 'insideA', ['xy_display'], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'insideA', localization, ['xy_display'], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'insideA(...)' code ##################

                
                # Assigning a Call to a Name (line 2751):
                
                # Assigning a Call to a Name (line 2751):
                
                # Assigning a Call to a Name (line 2751):
                
                # Call to SimpleEvent(...): (line 2751)
                # Processing the call arguments (line 2751)
                # Getting the type of 'xy_display' (line 2751)
                xy_display_106639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2751, 65), 'xy_display', False)
                # Processing the call keyword arguments (line 2751)
                kwargs_106640 = {}
                # Getting the type of 'ConnectionStyle' (line 2751)
                ConnectionStyle_106636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2751, 31), 'ConnectionStyle', False)
                # Obtaining the member '_Base' of a type (line 2751)
                _Base_106637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2751, 31), ConnectionStyle_106636, '_Base')
                # Obtaining the member 'SimpleEvent' of a type (line 2751)
                SimpleEvent_106638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2751, 31), _Base_106637, 'SimpleEvent')
                # Calling SimpleEvent(args, kwargs) (line 2751)
                SimpleEvent_call_result_106641 = invoke(stypy.reporting.localization.Localization(__file__, 2751, 31), SimpleEvent_106638, *[xy_display_106639], **kwargs_106640)
                
                # Assigning a type to the variable 'xy_event' (line 2751)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2751, 20), 'xy_event', SimpleEvent_call_result_106641)
                
                # Obtaining the type of the subscript
                int_106642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2752, 53), 'int')
                
                # Call to contains(...): (line 2752)
                # Processing the call arguments (line 2752)
                # Getting the type of 'xy_event' (line 2752)
                xy_event_106645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2752, 43), 'xy_event', False)
                # Processing the call keyword arguments (line 2752)
                kwargs_106646 = {}
                # Getting the type of 'patchA' (line 2752)
                patchA_106643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2752, 27), 'patchA', False)
                # Obtaining the member 'contains' of a type (line 2752)
                contains_106644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2752, 27), patchA_106643, 'contains')
                # Calling contains(args, kwargs) (line 2752)
                contains_call_result_106647 = invoke(stypy.reporting.localization.Localization(__file__, 2752, 27), contains_106644, *[xy_event_106645], **kwargs_106646)
                
                # Obtaining the member '__getitem__' of a type (line 2752)
                getitem___106648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2752, 27), contains_call_result_106647, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 2752)
                subscript_call_result_106649 = invoke(stypy.reporting.localization.Localization(__file__, 2752, 27), getitem___106648, int_106642)
                
                # Assigning a type to the variable 'stypy_return_type' (line 2752)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2752, 20), 'stypy_return_type', subscript_call_result_106649)
                
                # ################# End of 'insideA(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'insideA' in the type store
                # Getting the type of 'stypy_return_type' (line 2750)
                stypy_return_type_106650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2750, 16), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_106650)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'insideA'
                return stypy_return_type_106650

            # Assigning a type to the variable 'insideA' (line 2750)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2750, 16), 'insideA', insideA)
            
            
            # SSA begins for try-except statement (line 2754)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            # Assigning a Call to a Tuple (line 2755):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to split_path_inout(...): (line 2755)
            # Processing the call arguments (line 2755)
            # Getting the type of 'path' (line 2755)
            path_106652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2755, 51), 'path', False)
            # Getting the type of 'insideA' (line 2755)
            insideA_106653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2755, 57), 'insideA', False)
            # Processing the call keyword arguments (line 2755)
            kwargs_106654 = {}
            # Getting the type of 'split_path_inout' (line 2755)
            split_path_inout_106651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2755, 34), 'split_path_inout', False)
            # Calling split_path_inout(args, kwargs) (line 2755)
            split_path_inout_call_result_106655 = invoke(stypy.reporting.localization.Localization(__file__, 2755, 34), split_path_inout_106651, *[path_106652, insideA_106653], **kwargs_106654)
            
            # Assigning a type to the variable 'call_assignment_100498' (line 2755)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2755, 20), 'call_assignment_100498', split_path_inout_call_result_106655)
            
            # Assigning a Call to a Name (line 2755):
            
            # Assigning a Call to a Name (line 2755):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_106658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2755, 20), 'int')
            # Processing the call keyword arguments
            kwargs_106659 = {}
            # Getting the type of 'call_assignment_100498' (line 2755)
            call_assignment_100498_106656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2755, 20), 'call_assignment_100498', False)
            # Obtaining the member '__getitem__' of a type (line 2755)
            getitem___106657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2755, 20), call_assignment_100498_106656, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_106660 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___106657, *[int_106658], **kwargs_106659)
            
            # Assigning a type to the variable 'call_assignment_100499' (line 2755)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2755, 20), 'call_assignment_100499', getitem___call_result_106660)
            
            # Assigning a Name to a Name (line 2755):
            
            # Assigning a Name to a Name (line 2755):
            # Getting the type of 'call_assignment_100499' (line 2755)
            call_assignment_100499_106661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2755, 20), 'call_assignment_100499')
            # Assigning a type to the variable 'left' (line 2755)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2755, 20), 'left', call_assignment_100499_106661)
            
            # Assigning a Call to a Name (line 2755):
            
            # Assigning a Call to a Name (line 2755):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_106664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2755, 20), 'int')
            # Processing the call keyword arguments
            kwargs_106665 = {}
            # Getting the type of 'call_assignment_100498' (line 2755)
            call_assignment_100498_106662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2755, 20), 'call_assignment_100498', False)
            # Obtaining the member '__getitem__' of a type (line 2755)
            getitem___106663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2755, 20), call_assignment_100498_106662, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_106666 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___106663, *[int_106664], **kwargs_106665)
            
            # Assigning a type to the variable 'call_assignment_100500' (line 2755)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2755, 20), 'call_assignment_100500', getitem___call_result_106666)
            
            # Assigning a Name to a Name (line 2755):
            
            # Assigning a Name to a Name (line 2755):
            # Getting the type of 'call_assignment_100500' (line 2755)
            call_assignment_100500_106667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2755, 20), 'call_assignment_100500')
            # Assigning a type to the variable 'right' (line 2755)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2755, 26), 'right', call_assignment_100500_106667)
            # SSA branch for the except part of a try statement (line 2754)
            # SSA branch for the except 'ValueError' branch of a try statement (line 2754)
            module_type_store.open_ssa_branch('except')
            
            # Assigning a Name to a Name (line 2757):
            
            # Assigning a Name to a Name (line 2757):
            
            # Assigning a Name to a Name (line 2757):
            # Getting the type of 'path' (line 2757)
            path_106668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2757, 28), 'path')
            # Assigning a type to the variable 'right' (line 2757)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2757, 20), 'right', path_106668)
            # SSA join for try-except statement (line 2754)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Name to a Name (line 2759):
            
            # Assigning a Name to a Name (line 2759):
            
            # Assigning a Name to a Name (line 2759):
            # Getting the type of 'right' (line 2759)
            right_106669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2759, 23), 'right')
            # Assigning a type to the variable 'path' (line 2759)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2759, 16), 'path', right_106669)
            # SSA join for if statement (line 2749)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Getting the type of 'patchB' (line 2761)
            patchB_106670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2761, 15), 'patchB')
            # Testing the type of an if condition (line 2761)
            if_condition_106671 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2761, 12), patchB_106670)
            # Assigning a type to the variable 'if_condition_106671' (line 2761)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2761, 12), 'if_condition_106671', if_condition_106671)
            # SSA begins for if statement (line 2761)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

            @norecursion
            def insideB(localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'insideB'
                module_type_store = module_type_store.open_function_context('insideB', 2762, 16, False)
                
                # Passed parameters checking function
                insideB.stypy_localization = localization
                insideB.stypy_type_of_self = None
                insideB.stypy_type_store = module_type_store
                insideB.stypy_function_name = 'insideB'
                insideB.stypy_param_names_list = ['xy_display']
                insideB.stypy_varargs_param_name = None
                insideB.stypy_kwargs_param_name = None
                insideB.stypy_call_defaults = defaults
                insideB.stypy_call_varargs = varargs
                insideB.stypy_call_kwargs = kwargs
                arguments = process_argument_values(localization, None, module_type_store, 'insideB', ['xy_display'], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'insideB', localization, ['xy_display'], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'insideB(...)' code ##################

                
                # Assigning a Call to a Name (line 2763):
                
                # Assigning a Call to a Name (line 2763):
                
                # Assigning a Call to a Name (line 2763):
                
                # Call to SimpleEvent(...): (line 2763)
                # Processing the call arguments (line 2763)
                # Getting the type of 'xy_display' (line 2763)
                xy_display_106675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2763, 65), 'xy_display', False)
                # Processing the call keyword arguments (line 2763)
                kwargs_106676 = {}
                # Getting the type of 'ConnectionStyle' (line 2763)
                ConnectionStyle_106672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2763, 31), 'ConnectionStyle', False)
                # Obtaining the member '_Base' of a type (line 2763)
                _Base_106673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2763, 31), ConnectionStyle_106672, '_Base')
                # Obtaining the member 'SimpleEvent' of a type (line 2763)
                SimpleEvent_106674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2763, 31), _Base_106673, 'SimpleEvent')
                # Calling SimpleEvent(args, kwargs) (line 2763)
                SimpleEvent_call_result_106677 = invoke(stypy.reporting.localization.Localization(__file__, 2763, 31), SimpleEvent_106674, *[xy_display_106675], **kwargs_106676)
                
                # Assigning a type to the variable 'xy_event' (line 2763)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2763, 20), 'xy_event', SimpleEvent_call_result_106677)
                
                # Obtaining the type of the subscript
                int_106678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2764, 53), 'int')
                
                # Call to contains(...): (line 2764)
                # Processing the call arguments (line 2764)
                # Getting the type of 'xy_event' (line 2764)
                xy_event_106681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2764, 43), 'xy_event', False)
                # Processing the call keyword arguments (line 2764)
                kwargs_106682 = {}
                # Getting the type of 'patchB' (line 2764)
                patchB_106679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2764, 27), 'patchB', False)
                # Obtaining the member 'contains' of a type (line 2764)
                contains_106680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2764, 27), patchB_106679, 'contains')
                # Calling contains(args, kwargs) (line 2764)
                contains_call_result_106683 = invoke(stypy.reporting.localization.Localization(__file__, 2764, 27), contains_106680, *[xy_event_106681], **kwargs_106682)
                
                # Obtaining the member '__getitem__' of a type (line 2764)
                getitem___106684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2764, 27), contains_call_result_106683, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 2764)
                subscript_call_result_106685 = invoke(stypy.reporting.localization.Localization(__file__, 2764, 27), getitem___106684, int_106678)
                
                # Assigning a type to the variable 'stypy_return_type' (line 2764)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2764, 20), 'stypy_return_type', subscript_call_result_106685)
                
                # ################# End of 'insideB(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'insideB' in the type store
                # Getting the type of 'stypy_return_type' (line 2762)
                stypy_return_type_106686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2762, 16), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_106686)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'insideB'
                return stypy_return_type_106686

            # Assigning a type to the variable 'insideB' (line 2762)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2762, 16), 'insideB', insideB)
            
            
            # SSA begins for try-except statement (line 2766)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            # Assigning a Call to a Tuple (line 2767):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to split_path_inout(...): (line 2767)
            # Processing the call arguments (line 2767)
            # Getting the type of 'path' (line 2767)
            path_106688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2767, 51), 'path', False)
            # Getting the type of 'insideB' (line 2767)
            insideB_106689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2767, 57), 'insideB', False)
            # Processing the call keyword arguments (line 2767)
            kwargs_106690 = {}
            # Getting the type of 'split_path_inout' (line 2767)
            split_path_inout_106687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2767, 34), 'split_path_inout', False)
            # Calling split_path_inout(args, kwargs) (line 2767)
            split_path_inout_call_result_106691 = invoke(stypy.reporting.localization.Localization(__file__, 2767, 34), split_path_inout_106687, *[path_106688, insideB_106689], **kwargs_106690)
            
            # Assigning a type to the variable 'call_assignment_100501' (line 2767)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2767, 20), 'call_assignment_100501', split_path_inout_call_result_106691)
            
            # Assigning a Call to a Name (line 2767):
            
            # Assigning a Call to a Name (line 2767):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_106694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2767, 20), 'int')
            # Processing the call keyword arguments
            kwargs_106695 = {}
            # Getting the type of 'call_assignment_100501' (line 2767)
            call_assignment_100501_106692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2767, 20), 'call_assignment_100501', False)
            # Obtaining the member '__getitem__' of a type (line 2767)
            getitem___106693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2767, 20), call_assignment_100501_106692, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_106696 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___106693, *[int_106694], **kwargs_106695)
            
            # Assigning a type to the variable 'call_assignment_100502' (line 2767)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2767, 20), 'call_assignment_100502', getitem___call_result_106696)
            
            # Assigning a Name to a Name (line 2767):
            
            # Assigning a Name to a Name (line 2767):
            # Getting the type of 'call_assignment_100502' (line 2767)
            call_assignment_100502_106697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2767, 20), 'call_assignment_100502')
            # Assigning a type to the variable 'left' (line 2767)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2767, 20), 'left', call_assignment_100502_106697)
            
            # Assigning a Call to a Name (line 2767):
            
            # Assigning a Call to a Name (line 2767):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_106700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2767, 20), 'int')
            # Processing the call keyword arguments
            kwargs_106701 = {}
            # Getting the type of 'call_assignment_100501' (line 2767)
            call_assignment_100501_106698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2767, 20), 'call_assignment_100501', False)
            # Obtaining the member '__getitem__' of a type (line 2767)
            getitem___106699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2767, 20), call_assignment_100501_106698, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_106702 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___106699, *[int_106700], **kwargs_106701)
            
            # Assigning a type to the variable 'call_assignment_100503' (line 2767)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2767, 20), 'call_assignment_100503', getitem___call_result_106702)
            
            # Assigning a Name to a Name (line 2767):
            
            # Assigning a Name to a Name (line 2767):
            # Getting the type of 'call_assignment_100503' (line 2767)
            call_assignment_100503_106703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2767, 20), 'call_assignment_100503')
            # Assigning a type to the variable 'right' (line 2767)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2767, 26), 'right', call_assignment_100503_106703)
            # SSA branch for the except part of a try statement (line 2766)
            # SSA branch for the except 'ValueError' branch of a try statement (line 2766)
            module_type_store.open_ssa_branch('except')
            
            # Assigning a Name to a Name (line 2769):
            
            # Assigning a Name to a Name (line 2769):
            
            # Assigning a Name to a Name (line 2769):
            # Getting the type of 'path' (line 2769)
            path_106704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2769, 27), 'path')
            # Assigning a type to the variable 'left' (line 2769)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2769, 20), 'left', path_106704)
            # SSA join for try-except statement (line 2766)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Name to a Name (line 2771):
            
            # Assigning a Name to a Name (line 2771):
            
            # Assigning a Name to a Name (line 2771):
            # Getting the type of 'left' (line 2771)
            left_106705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2771, 23), 'left')
            # Assigning a type to the variable 'path' (line 2771)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2771, 16), 'path', left_106705)
            # SSA join for if statement (line 2761)
            module_type_store = module_type_store.join_ssa_context()
            
            # Getting the type of 'path' (line 2773)
            path_106706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 19), 'path')
            # Assigning a type to the variable 'stypy_return_type' (line 2773)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2773, 12), 'stypy_return_type', path_106706)
            
            # ################# End of '_clip(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function '_clip' in the type store
            # Getting the type of 'stypy_return_type' (line 2740)
            stypy_return_type_106707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2740, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_106707)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_clip'
            return stypy_return_type_106707


        @norecursion
        def _shrink(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_shrink'
            module_type_store = module_type_store.open_function_context('_shrink', 2775, 8, False)
            # Assigning a type to the variable 'self' (line 2776)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2776, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            _Base._shrink.__dict__.__setitem__('stypy_localization', localization)
            _Base._shrink.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            _Base._shrink.__dict__.__setitem__('stypy_type_store', module_type_store)
            _Base._shrink.__dict__.__setitem__('stypy_function_name', '_Base._shrink')
            _Base._shrink.__dict__.__setitem__('stypy_param_names_list', ['path', 'shrinkA', 'shrinkB'])
            _Base._shrink.__dict__.__setitem__('stypy_varargs_param_name', None)
            _Base._shrink.__dict__.__setitem__('stypy_kwargs_param_name', None)
            _Base._shrink.__dict__.__setitem__('stypy_call_defaults', defaults)
            _Base._shrink.__dict__.__setitem__('stypy_call_varargs', varargs)
            _Base._shrink.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            _Base._shrink.__dict__.__setitem__('stypy_declared_arg_number', 4)
            arguments = process_argument_values(localization, type_of_self, module_type_store, '_Base._shrink', ['path', 'shrinkA', 'shrinkB'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, '_shrink', localization, ['path', 'shrinkA', 'shrinkB'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '_shrink(...)' code ##################

            unicode_106708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2778, (-1)), 'unicode', u'\n            Shrink the path by fixed size (in points) with shrinkA and shrinkB\n            ')
            
            # Getting the type of 'shrinkA' (line 2779)
            shrinkA_106709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2779, 15), 'shrinkA')
            # Testing the type of an if condition (line 2779)
            if_condition_106710 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2779, 12), shrinkA_106709)
            # Assigning a type to the variable 'if_condition_106710' (line 2779)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2779, 12), 'if_condition_106710', if_condition_106710)
            # SSA begins for if statement (line 2779)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Subscript to a Tuple (line 2780):
            
            # Assigning a Subscript to a Name (line 2780):
            
            # Assigning a Subscript to a Name (line 2780):
            
            # Obtaining the type of the subscript
            int_106711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2780, 16), 'int')
            
            # Obtaining the type of the subscript
            int_106712 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2780, 37), 'int')
            # Getting the type of 'path' (line 2780)
            path_106713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2780, 23), 'path')
            # Obtaining the member 'vertices' of a type (line 2780)
            vertices_106714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2780, 23), path_106713, 'vertices')
            # Obtaining the member '__getitem__' of a type (line 2780)
            getitem___106715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2780, 23), vertices_106714, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2780)
            subscript_call_result_106716 = invoke(stypy.reporting.localization.Localization(__file__, 2780, 23), getitem___106715, int_106712)
            
            # Obtaining the member '__getitem__' of a type (line 2780)
            getitem___106717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2780, 16), subscript_call_result_106716, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2780)
            subscript_call_result_106718 = invoke(stypy.reporting.localization.Localization(__file__, 2780, 16), getitem___106717, int_106711)
            
            # Assigning a type to the variable 'tuple_var_assignment_100504' (line 2780)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2780, 16), 'tuple_var_assignment_100504', subscript_call_result_106718)
            
            # Assigning a Subscript to a Name (line 2780):
            
            # Assigning a Subscript to a Name (line 2780):
            
            # Obtaining the type of the subscript
            int_106719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2780, 16), 'int')
            
            # Obtaining the type of the subscript
            int_106720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2780, 37), 'int')
            # Getting the type of 'path' (line 2780)
            path_106721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2780, 23), 'path')
            # Obtaining the member 'vertices' of a type (line 2780)
            vertices_106722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2780, 23), path_106721, 'vertices')
            # Obtaining the member '__getitem__' of a type (line 2780)
            getitem___106723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2780, 23), vertices_106722, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2780)
            subscript_call_result_106724 = invoke(stypy.reporting.localization.Localization(__file__, 2780, 23), getitem___106723, int_106720)
            
            # Obtaining the member '__getitem__' of a type (line 2780)
            getitem___106725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2780, 16), subscript_call_result_106724, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2780)
            subscript_call_result_106726 = invoke(stypy.reporting.localization.Localization(__file__, 2780, 16), getitem___106725, int_106719)
            
            # Assigning a type to the variable 'tuple_var_assignment_100505' (line 2780)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2780, 16), 'tuple_var_assignment_100505', subscript_call_result_106726)
            
            # Assigning a Name to a Name (line 2780):
            
            # Assigning a Name to a Name (line 2780):
            # Getting the type of 'tuple_var_assignment_100504' (line 2780)
            tuple_var_assignment_100504_106727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2780, 16), 'tuple_var_assignment_100504')
            # Assigning a type to the variable 'x' (line 2780)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2780, 16), 'x', tuple_var_assignment_100504_106727)
            
            # Assigning a Name to a Name (line 2780):
            
            # Assigning a Name to a Name (line 2780):
            # Getting the type of 'tuple_var_assignment_100505' (line 2780)
            tuple_var_assignment_100505_106728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2780, 16), 'tuple_var_assignment_100505')
            # Assigning a type to the variable 'y' (line 2780)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2780, 19), 'y', tuple_var_assignment_100505_106728)
            
            # Assigning a Call to a Name (line 2781):
            
            # Assigning a Call to a Name (line 2781):
            
            # Assigning a Call to a Name (line 2781):
            
            # Call to inside_circle(...): (line 2781)
            # Processing the call arguments (line 2781)
            # Getting the type of 'x' (line 2781)
            x_106730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2781, 40), 'x', False)
            # Getting the type of 'y' (line 2781)
            y_106731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2781, 43), 'y', False)
            # Getting the type of 'shrinkA' (line 2781)
            shrinkA_106732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2781, 46), 'shrinkA', False)
            # Processing the call keyword arguments (line 2781)
            kwargs_106733 = {}
            # Getting the type of 'inside_circle' (line 2781)
            inside_circle_106729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2781, 26), 'inside_circle', False)
            # Calling inside_circle(args, kwargs) (line 2781)
            inside_circle_call_result_106734 = invoke(stypy.reporting.localization.Localization(__file__, 2781, 26), inside_circle_106729, *[x_106730, y_106731, shrinkA_106732], **kwargs_106733)
            
            # Assigning a type to the variable 'insideA' (line 2781)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2781, 16), 'insideA', inside_circle_call_result_106734)
            
            
            # SSA begins for try-except statement (line 2783)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            # Assigning a Call to a Tuple (line 2784):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to split_path_inout(...): (line 2784)
            # Processing the call arguments (line 2784)
            # Getting the type of 'path' (line 2784)
            path_106736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2784, 51), 'path', False)
            # Getting the type of 'insideA' (line 2784)
            insideA_106737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2784, 57), 'insideA', False)
            # Processing the call keyword arguments (line 2784)
            kwargs_106738 = {}
            # Getting the type of 'split_path_inout' (line 2784)
            split_path_inout_106735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2784, 34), 'split_path_inout', False)
            # Calling split_path_inout(args, kwargs) (line 2784)
            split_path_inout_call_result_106739 = invoke(stypy.reporting.localization.Localization(__file__, 2784, 34), split_path_inout_106735, *[path_106736, insideA_106737], **kwargs_106738)
            
            # Assigning a type to the variable 'call_assignment_100506' (line 2784)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2784, 20), 'call_assignment_100506', split_path_inout_call_result_106739)
            
            # Assigning a Call to a Name (line 2784):
            
            # Assigning a Call to a Name (line 2784):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_106742 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2784, 20), 'int')
            # Processing the call keyword arguments
            kwargs_106743 = {}
            # Getting the type of 'call_assignment_100506' (line 2784)
            call_assignment_100506_106740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2784, 20), 'call_assignment_100506', False)
            # Obtaining the member '__getitem__' of a type (line 2784)
            getitem___106741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2784, 20), call_assignment_100506_106740, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_106744 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___106741, *[int_106742], **kwargs_106743)
            
            # Assigning a type to the variable 'call_assignment_100507' (line 2784)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2784, 20), 'call_assignment_100507', getitem___call_result_106744)
            
            # Assigning a Name to a Name (line 2784):
            
            # Assigning a Name to a Name (line 2784):
            # Getting the type of 'call_assignment_100507' (line 2784)
            call_assignment_100507_106745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2784, 20), 'call_assignment_100507')
            # Assigning a type to the variable 'left' (line 2784)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2784, 20), 'left', call_assignment_100507_106745)
            
            # Assigning a Call to a Name (line 2784):
            
            # Assigning a Call to a Name (line 2784):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_106748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2784, 20), 'int')
            # Processing the call keyword arguments
            kwargs_106749 = {}
            # Getting the type of 'call_assignment_100506' (line 2784)
            call_assignment_100506_106746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2784, 20), 'call_assignment_100506', False)
            # Obtaining the member '__getitem__' of a type (line 2784)
            getitem___106747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2784, 20), call_assignment_100506_106746, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_106750 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___106747, *[int_106748], **kwargs_106749)
            
            # Assigning a type to the variable 'call_assignment_100508' (line 2784)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2784, 20), 'call_assignment_100508', getitem___call_result_106750)
            
            # Assigning a Name to a Name (line 2784):
            
            # Assigning a Name to a Name (line 2784):
            # Getting the type of 'call_assignment_100508' (line 2784)
            call_assignment_100508_106751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2784, 20), 'call_assignment_100508')
            # Assigning a type to the variable 'right' (line 2784)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2784, 26), 'right', call_assignment_100508_106751)
            
            # Assigning a Name to a Name (line 2785):
            
            # Assigning a Name to a Name (line 2785):
            
            # Assigning a Name to a Name (line 2785):
            # Getting the type of 'right' (line 2785)
            right_106752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2785, 27), 'right')
            # Assigning a type to the variable 'path' (line 2785)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2785, 20), 'path', right_106752)
            # SSA branch for the except part of a try statement (line 2783)
            # SSA branch for the except 'ValueError' branch of a try statement (line 2783)
            module_type_store.open_ssa_branch('except')
            pass
            # SSA join for try-except statement (line 2783)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 2779)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Getting the type of 'shrinkB' (line 2789)
            shrinkB_106753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2789, 15), 'shrinkB')
            # Testing the type of an if condition (line 2789)
            if_condition_106754 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2789, 12), shrinkB_106753)
            # Assigning a type to the variable 'if_condition_106754' (line 2789)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2789, 12), 'if_condition_106754', if_condition_106754)
            # SSA begins for if statement (line 2789)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Subscript to a Tuple (line 2790):
            
            # Assigning a Subscript to a Name (line 2790):
            
            # Assigning a Subscript to a Name (line 2790):
            
            # Obtaining the type of the subscript
            int_106755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2790, 16), 'int')
            
            # Obtaining the type of the subscript
            int_106756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2790, 37), 'int')
            # Getting the type of 'path' (line 2790)
            path_106757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2790, 23), 'path')
            # Obtaining the member 'vertices' of a type (line 2790)
            vertices_106758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2790, 23), path_106757, 'vertices')
            # Obtaining the member '__getitem__' of a type (line 2790)
            getitem___106759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2790, 23), vertices_106758, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2790)
            subscript_call_result_106760 = invoke(stypy.reporting.localization.Localization(__file__, 2790, 23), getitem___106759, int_106756)
            
            # Obtaining the member '__getitem__' of a type (line 2790)
            getitem___106761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2790, 16), subscript_call_result_106760, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2790)
            subscript_call_result_106762 = invoke(stypy.reporting.localization.Localization(__file__, 2790, 16), getitem___106761, int_106755)
            
            # Assigning a type to the variable 'tuple_var_assignment_100509' (line 2790)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2790, 16), 'tuple_var_assignment_100509', subscript_call_result_106762)
            
            # Assigning a Subscript to a Name (line 2790):
            
            # Assigning a Subscript to a Name (line 2790):
            
            # Obtaining the type of the subscript
            int_106763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2790, 16), 'int')
            
            # Obtaining the type of the subscript
            int_106764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2790, 37), 'int')
            # Getting the type of 'path' (line 2790)
            path_106765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2790, 23), 'path')
            # Obtaining the member 'vertices' of a type (line 2790)
            vertices_106766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2790, 23), path_106765, 'vertices')
            # Obtaining the member '__getitem__' of a type (line 2790)
            getitem___106767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2790, 23), vertices_106766, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2790)
            subscript_call_result_106768 = invoke(stypy.reporting.localization.Localization(__file__, 2790, 23), getitem___106767, int_106764)
            
            # Obtaining the member '__getitem__' of a type (line 2790)
            getitem___106769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2790, 16), subscript_call_result_106768, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2790)
            subscript_call_result_106770 = invoke(stypy.reporting.localization.Localization(__file__, 2790, 16), getitem___106769, int_106763)
            
            # Assigning a type to the variable 'tuple_var_assignment_100510' (line 2790)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2790, 16), 'tuple_var_assignment_100510', subscript_call_result_106770)
            
            # Assigning a Name to a Name (line 2790):
            
            # Assigning a Name to a Name (line 2790):
            # Getting the type of 'tuple_var_assignment_100509' (line 2790)
            tuple_var_assignment_100509_106771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2790, 16), 'tuple_var_assignment_100509')
            # Assigning a type to the variable 'x' (line 2790)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2790, 16), 'x', tuple_var_assignment_100509_106771)
            
            # Assigning a Name to a Name (line 2790):
            
            # Assigning a Name to a Name (line 2790):
            # Getting the type of 'tuple_var_assignment_100510' (line 2790)
            tuple_var_assignment_100510_106772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2790, 16), 'tuple_var_assignment_100510')
            # Assigning a type to the variable 'y' (line 2790)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2790, 19), 'y', tuple_var_assignment_100510_106772)
            
            # Assigning a Call to a Name (line 2791):
            
            # Assigning a Call to a Name (line 2791):
            
            # Assigning a Call to a Name (line 2791):
            
            # Call to inside_circle(...): (line 2791)
            # Processing the call arguments (line 2791)
            # Getting the type of 'x' (line 2791)
            x_106774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2791, 40), 'x', False)
            # Getting the type of 'y' (line 2791)
            y_106775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2791, 43), 'y', False)
            # Getting the type of 'shrinkB' (line 2791)
            shrinkB_106776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2791, 46), 'shrinkB', False)
            # Processing the call keyword arguments (line 2791)
            kwargs_106777 = {}
            # Getting the type of 'inside_circle' (line 2791)
            inside_circle_106773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2791, 26), 'inside_circle', False)
            # Calling inside_circle(args, kwargs) (line 2791)
            inside_circle_call_result_106778 = invoke(stypy.reporting.localization.Localization(__file__, 2791, 26), inside_circle_106773, *[x_106774, y_106775, shrinkB_106776], **kwargs_106777)
            
            # Assigning a type to the variable 'insideB' (line 2791)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2791, 16), 'insideB', inside_circle_call_result_106778)
            
            
            # SSA begins for try-except statement (line 2793)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            # Assigning a Call to a Tuple (line 2794):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to split_path_inout(...): (line 2794)
            # Processing the call arguments (line 2794)
            # Getting the type of 'path' (line 2794)
            path_106780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2794, 51), 'path', False)
            # Getting the type of 'insideB' (line 2794)
            insideB_106781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2794, 57), 'insideB', False)
            # Processing the call keyword arguments (line 2794)
            kwargs_106782 = {}
            # Getting the type of 'split_path_inout' (line 2794)
            split_path_inout_106779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2794, 34), 'split_path_inout', False)
            # Calling split_path_inout(args, kwargs) (line 2794)
            split_path_inout_call_result_106783 = invoke(stypy.reporting.localization.Localization(__file__, 2794, 34), split_path_inout_106779, *[path_106780, insideB_106781], **kwargs_106782)
            
            # Assigning a type to the variable 'call_assignment_100511' (line 2794)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2794, 20), 'call_assignment_100511', split_path_inout_call_result_106783)
            
            # Assigning a Call to a Name (line 2794):
            
            # Assigning a Call to a Name (line 2794):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_106786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2794, 20), 'int')
            # Processing the call keyword arguments
            kwargs_106787 = {}
            # Getting the type of 'call_assignment_100511' (line 2794)
            call_assignment_100511_106784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2794, 20), 'call_assignment_100511', False)
            # Obtaining the member '__getitem__' of a type (line 2794)
            getitem___106785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2794, 20), call_assignment_100511_106784, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_106788 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___106785, *[int_106786], **kwargs_106787)
            
            # Assigning a type to the variable 'call_assignment_100512' (line 2794)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2794, 20), 'call_assignment_100512', getitem___call_result_106788)
            
            # Assigning a Name to a Name (line 2794):
            
            # Assigning a Name to a Name (line 2794):
            # Getting the type of 'call_assignment_100512' (line 2794)
            call_assignment_100512_106789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2794, 20), 'call_assignment_100512')
            # Assigning a type to the variable 'left' (line 2794)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2794, 20), 'left', call_assignment_100512_106789)
            
            # Assigning a Call to a Name (line 2794):
            
            # Assigning a Call to a Name (line 2794):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_106792 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2794, 20), 'int')
            # Processing the call keyword arguments
            kwargs_106793 = {}
            # Getting the type of 'call_assignment_100511' (line 2794)
            call_assignment_100511_106790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2794, 20), 'call_assignment_100511', False)
            # Obtaining the member '__getitem__' of a type (line 2794)
            getitem___106791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2794, 20), call_assignment_100511_106790, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_106794 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___106791, *[int_106792], **kwargs_106793)
            
            # Assigning a type to the variable 'call_assignment_100513' (line 2794)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2794, 20), 'call_assignment_100513', getitem___call_result_106794)
            
            # Assigning a Name to a Name (line 2794):
            
            # Assigning a Name to a Name (line 2794):
            # Getting the type of 'call_assignment_100513' (line 2794)
            call_assignment_100513_106795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2794, 20), 'call_assignment_100513')
            # Assigning a type to the variable 'right' (line 2794)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2794, 26), 'right', call_assignment_100513_106795)
            
            # Assigning a Name to a Name (line 2795):
            
            # Assigning a Name to a Name (line 2795):
            
            # Assigning a Name to a Name (line 2795):
            # Getting the type of 'left' (line 2795)
            left_106796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2795, 27), 'left')
            # Assigning a type to the variable 'path' (line 2795)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2795, 20), 'path', left_106796)
            # SSA branch for the except part of a try statement (line 2793)
            # SSA branch for the except 'ValueError' branch of a try statement (line 2793)
            module_type_store.open_ssa_branch('except')
            pass
            # SSA join for try-except statement (line 2793)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 2789)
            module_type_store = module_type_store.join_ssa_context()
            
            # Getting the type of 'path' (line 2799)
            path_106797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2799, 19), 'path')
            # Assigning a type to the variable 'stypy_return_type' (line 2799)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2799, 12), 'stypy_return_type', path_106797)
            
            # ################# End of '_shrink(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function '_shrink' in the type store
            # Getting the type of 'stypy_return_type' (line 2775)
            stypy_return_type_106798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2775, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_106798)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_shrink'
            return stypy_return_type_106798


        @norecursion
        def __call__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            float_106799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2802, 29), 'float')
            float_106800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2802, 41), 'float')
            # Getting the type of 'None' (line 2802)
            None_106801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2802, 52), 'None')
            # Getting the type of 'None' (line 2802)
            None_106802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2802, 65), 'None')
            defaults = [float_106799, float_106800, None_106801, None_106802]
            # Create a new context for function '__call__'
            module_type_store = module_type_store.open_function_context('__call__', 2801, 8, False)
            # Assigning a type to the variable 'self' (line 2802)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2802, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            _Base.__call__.__dict__.__setitem__('stypy_localization', localization)
            _Base.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            _Base.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
            _Base.__call__.__dict__.__setitem__('stypy_function_name', '_Base.__call__')
            _Base.__call__.__dict__.__setitem__('stypy_param_names_list', ['posA', 'posB', 'shrinkA', 'shrinkB', 'patchA', 'patchB'])
            _Base.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
            _Base.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
            _Base.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
            _Base.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
            _Base.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            _Base.__call__.__dict__.__setitem__('stypy_declared_arg_number', 7)
            arguments = process_argument_values(localization, type_of_self, module_type_store, '_Base.__call__', ['posA', 'posB', 'shrinkA', 'shrinkB', 'patchA', 'patchB'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, '__call__', localization, ['posA', 'posB', 'shrinkA', 'shrinkB', 'patchA', 'patchB'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__call__(...)' code ##################

            unicode_106803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2806, (-1)), 'unicode', u'\n            Calls the *connect* method to create a path between *posA*\n             and *posB*. The path is clipped and shrunken.\n            ')
            
            # Assigning a Call to a Name (line 2808):
            
            # Assigning a Call to a Name (line 2808):
            
            # Assigning a Call to a Name (line 2808):
            
            # Call to connect(...): (line 2808)
            # Processing the call arguments (line 2808)
            # Getting the type of 'posA' (line 2808)
            posA_106806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2808, 32), 'posA', False)
            # Getting the type of 'posB' (line 2808)
            posB_106807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2808, 38), 'posB', False)
            # Processing the call keyword arguments (line 2808)
            kwargs_106808 = {}
            # Getting the type of 'self' (line 2808)
            self_106804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2808, 19), 'self', False)
            # Obtaining the member 'connect' of a type (line 2808)
            connect_106805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2808, 19), self_106804, 'connect')
            # Calling connect(args, kwargs) (line 2808)
            connect_call_result_106809 = invoke(stypy.reporting.localization.Localization(__file__, 2808, 19), connect_106805, *[posA_106806, posB_106807], **kwargs_106808)
            
            # Assigning a type to the variable 'path' (line 2808)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2808, 12), 'path', connect_call_result_106809)
            
            # Assigning a Call to a Name (line 2810):
            
            # Assigning a Call to a Name (line 2810):
            
            # Assigning a Call to a Name (line 2810):
            
            # Call to _clip(...): (line 2810)
            # Processing the call arguments (line 2810)
            # Getting the type of 'path' (line 2810)
            path_106812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2810, 38), 'path', False)
            # Getting the type of 'patchA' (line 2810)
            patchA_106813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2810, 44), 'patchA', False)
            # Getting the type of 'patchB' (line 2810)
            patchB_106814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2810, 52), 'patchB', False)
            # Processing the call keyword arguments (line 2810)
            kwargs_106815 = {}
            # Getting the type of 'self' (line 2810)
            self_106810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2810, 27), 'self', False)
            # Obtaining the member '_clip' of a type (line 2810)
            _clip_106811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2810, 27), self_106810, '_clip')
            # Calling _clip(args, kwargs) (line 2810)
            _clip_call_result_106816 = invoke(stypy.reporting.localization.Localization(__file__, 2810, 27), _clip_106811, *[path_106812, patchA_106813, patchB_106814], **kwargs_106815)
            
            # Assigning a type to the variable 'clipped_path' (line 2810)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2810, 12), 'clipped_path', _clip_call_result_106816)
            
            # Assigning a Call to a Name (line 2811):
            
            # Assigning a Call to a Name (line 2811):
            
            # Assigning a Call to a Name (line 2811):
            
            # Call to _shrink(...): (line 2811)
            # Processing the call arguments (line 2811)
            # Getting the type of 'clipped_path' (line 2811)
            clipped_path_106819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2811, 39), 'clipped_path', False)
            # Getting the type of 'shrinkA' (line 2811)
            shrinkA_106820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2811, 53), 'shrinkA', False)
            # Getting the type of 'shrinkB' (line 2811)
            shrinkB_106821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2811, 62), 'shrinkB', False)
            # Processing the call keyword arguments (line 2811)
            kwargs_106822 = {}
            # Getting the type of 'self' (line 2811)
            self_106817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2811, 26), 'self', False)
            # Obtaining the member '_shrink' of a type (line 2811)
            _shrink_106818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2811, 26), self_106817, '_shrink')
            # Calling _shrink(args, kwargs) (line 2811)
            _shrink_call_result_106823 = invoke(stypy.reporting.localization.Localization(__file__, 2811, 26), _shrink_106818, *[clipped_path_106819, shrinkA_106820, shrinkB_106821], **kwargs_106822)
            
            # Assigning a type to the variable 'shrunk_path' (line 2811)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2811, 12), 'shrunk_path', _shrink_call_result_106823)
            # Getting the type of 'shrunk_path' (line 2813)
            shrunk_path_106824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2813, 19), 'shrunk_path')
            # Assigning a type to the variable 'stypy_return_type' (line 2813)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2813, 12), 'stypy_return_type', shrunk_path_106824)
            
            # ################# End of '__call__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function '__call__' in the type store
            # Getting the type of 'stypy_return_type' (line 2801)
            stypy_return_type_106825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2801, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_106825)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '__call__'
            return stypy_return_type_106825


        @norecursion
        def __reduce__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '__reduce__'
            module_type_store = module_type_store.open_function_context('__reduce__', 2815, 8, False)
            # Assigning a type to the variable 'self' (line 2816)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2816, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            _Base.__reduce__.__dict__.__setitem__('stypy_localization', localization)
            _Base.__reduce__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            _Base.__reduce__.__dict__.__setitem__('stypy_type_store', module_type_store)
            _Base.__reduce__.__dict__.__setitem__('stypy_function_name', '_Base.__reduce__')
            _Base.__reduce__.__dict__.__setitem__('stypy_param_names_list', [])
            _Base.__reduce__.__dict__.__setitem__('stypy_varargs_param_name', None)
            _Base.__reduce__.__dict__.__setitem__('stypy_kwargs_param_name', None)
            _Base.__reduce__.__dict__.__setitem__('stypy_call_defaults', defaults)
            _Base.__reduce__.__dict__.__setitem__('stypy_call_varargs', varargs)
            _Base.__reduce__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            _Base.__reduce__.__dict__.__setitem__('stypy_declared_arg_number', 1)
            arguments = process_argument_values(localization, type_of_self, module_type_store, '_Base.__reduce__', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, '__reduce__', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__reduce__(...)' code ##################

            stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2818, 12))
            
            # 'import matplotlib.cbook' statement (line 2818)
            update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
            import_106826 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2818, 12), 'matplotlib.cbook')

            if (type(import_106826) is not StypyTypeError):

                if (import_106826 != 'pyd_module'):
                    __import__(import_106826)
                    sys_modules_106827 = sys.modules[import_106826]
                    import_module(stypy.reporting.localization.Localization(__file__, 2818, 12), 'cbook', sys_modules_106827.module_type_store, module_type_store)
                else:
                    import matplotlib.cbook as cbook

                    import_module(stypy.reporting.localization.Localization(__file__, 2818, 12), 'cbook', matplotlib.cbook, module_type_store)

            else:
                # Assigning a type to the variable 'matplotlib.cbook' (line 2818)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2818, 12), 'matplotlib.cbook', import_106826)

            remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
            
            
            # Obtaining an instance of the builtin type 'tuple' (line 2819)
            tuple_106828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2819, 20), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2819)
            # Adding element type (line 2819)
            
            # Call to _NestedClassGetter(...): (line 2819)
            # Processing the call keyword arguments (line 2819)
            kwargs_106831 = {}
            # Getting the type of 'cbook' (line 2819)
            cbook_106829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2819, 20), 'cbook', False)
            # Obtaining the member '_NestedClassGetter' of a type (line 2819)
            _NestedClassGetter_106830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2819, 20), cbook_106829, '_NestedClassGetter')
            # Calling _NestedClassGetter(args, kwargs) (line 2819)
            _NestedClassGetter_call_result_106832 = invoke(stypy.reporting.localization.Localization(__file__, 2819, 20), _NestedClassGetter_106830, *[], **kwargs_106831)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2819, 20), tuple_106828, _NestedClassGetter_call_result_106832)
            # Adding element type (line 2819)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2820)
            tuple_106833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2820, 21), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2820)
            # Adding element type (line 2820)
            # Getting the type of 'ConnectionStyle' (line 2820)
            ConnectionStyle_106834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2820, 21), 'ConnectionStyle')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2820, 21), tuple_106833, ConnectionStyle_106834)
            # Adding element type (line 2820)
            # Getting the type of 'self' (line 2820)
            self_106835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2820, 38), 'self')
            # Obtaining the member '__class__' of a type (line 2820)
            class___106836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2820, 38), self_106835, '__class__')
            # Obtaining the member '__name__' of a type (line 2820)
            name___106837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2820, 38), class___106836, '__name__')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2820, 21), tuple_106833, name___106837)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2819, 20), tuple_106828, tuple_106833)
            # Adding element type (line 2819)
            # Getting the type of 'self' (line 2821)
            self_106838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2821, 20), 'self')
            # Obtaining the member '__dict__' of a type (line 2821)
            dict___106839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2821, 20), self_106838, '__dict__')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2819, 20), tuple_106828, dict___106839)
            
            # Assigning a type to the variable 'stypy_return_type' (line 2819)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2819, 12), 'stypy_return_type', tuple_106828)
            
            # ################# End of '__reduce__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function '__reduce__' in the type store
            # Getting the type of 'stypy_return_type' (line 2815)
            stypy_return_type_106840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2815, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_106840)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '__reduce__'
            return stypy_return_type_106840

    
    # Assigning a type to the variable '_Base' (line 2723)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2723, 4), '_Base', _Base)
    # Declaration of the 'Arc3' class
    # Getting the type of '_Base' (line 2824)
    _Base_106841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2824, 15), '_Base')

    class Arc3(_Base_106841, ):
        unicode_106842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2831, (-1)), 'unicode', u'\n        Creates a simple quadratic bezier curve between two\n        points. The curve is created so that the middle contol points\n        (C1) is located at the same distance from the start (C0) and\n        end points(C2) and the distance of the C1 to the line\n        connecting C0-C2 is *rad* times the distance of C0-C2.\n        ')

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            float_106843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2833, 31), 'float')
            defaults = [float_106843]
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 2833, 8, False)
            # Assigning a type to the variable 'self' (line 2834)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2834, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Arc3.__init__', ['rad'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, ['rad'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            unicode_106844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2837, (-1)), 'unicode', u'\n            *rad*\n              curvature of the curve.\n            ')
            
            # Assigning a Name to a Attribute (line 2838):
            
            # Assigning a Name to a Attribute (line 2838):
            
            # Assigning a Name to a Attribute (line 2838):
            # Getting the type of 'rad' (line 2838)
            rad_106845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2838, 23), 'rad')
            # Getting the type of 'self' (line 2838)
            self_106846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2838, 12), 'self')
            # Setting the type of the member 'rad' of a type (line 2838)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2838, 12), self_106846, 'rad', rad_106845)
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()


        @norecursion
        def connect(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'connect'
            module_type_store = module_type_store.open_function_context('connect', 2840, 8, False)
            # Assigning a type to the variable 'self' (line 2841)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2841, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            Arc3.connect.__dict__.__setitem__('stypy_localization', localization)
            Arc3.connect.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            Arc3.connect.__dict__.__setitem__('stypy_type_store', module_type_store)
            Arc3.connect.__dict__.__setitem__('stypy_function_name', 'Arc3.connect')
            Arc3.connect.__dict__.__setitem__('stypy_param_names_list', ['posA', 'posB'])
            Arc3.connect.__dict__.__setitem__('stypy_varargs_param_name', None)
            Arc3.connect.__dict__.__setitem__('stypy_kwargs_param_name', None)
            Arc3.connect.__dict__.__setitem__('stypy_call_defaults', defaults)
            Arc3.connect.__dict__.__setitem__('stypy_call_varargs', varargs)
            Arc3.connect.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            Arc3.connect.__dict__.__setitem__('stypy_declared_arg_number', 3)
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Arc3.connect', ['posA', 'posB'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'connect', localization, ['posA', 'posB'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'connect(...)' code ##################

            
            # Assigning a Name to a Tuple (line 2841):
            
            # Assigning a Subscript to a Name (line 2841):
            
            # Assigning a Subscript to a Name (line 2841):
            
            # Obtaining the type of the subscript
            int_106847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2841, 12), 'int')
            # Getting the type of 'posA' (line 2841)
            posA_106848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2841, 21), 'posA')
            # Obtaining the member '__getitem__' of a type (line 2841)
            getitem___106849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2841, 12), posA_106848, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2841)
            subscript_call_result_106850 = invoke(stypy.reporting.localization.Localization(__file__, 2841, 12), getitem___106849, int_106847)
            
            # Assigning a type to the variable 'tuple_var_assignment_100514' (line 2841)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2841, 12), 'tuple_var_assignment_100514', subscript_call_result_106850)
            
            # Assigning a Subscript to a Name (line 2841):
            
            # Assigning a Subscript to a Name (line 2841):
            
            # Obtaining the type of the subscript
            int_106851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2841, 12), 'int')
            # Getting the type of 'posA' (line 2841)
            posA_106852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2841, 21), 'posA')
            # Obtaining the member '__getitem__' of a type (line 2841)
            getitem___106853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2841, 12), posA_106852, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2841)
            subscript_call_result_106854 = invoke(stypy.reporting.localization.Localization(__file__, 2841, 12), getitem___106853, int_106851)
            
            # Assigning a type to the variable 'tuple_var_assignment_100515' (line 2841)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2841, 12), 'tuple_var_assignment_100515', subscript_call_result_106854)
            
            # Assigning a Name to a Name (line 2841):
            
            # Assigning a Name to a Name (line 2841):
            # Getting the type of 'tuple_var_assignment_100514' (line 2841)
            tuple_var_assignment_100514_106855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2841, 12), 'tuple_var_assignment_100514')
            # Assigning a type to the variable 'x1' (line 2841)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2841, 12), 'x1', tuple_var_assignment_100514_106855)
            
            # Assigning a Name to a Name (line 2841):
            
            # Assigning a Name to a Name (line 2841):
            # Getting the type of 'tuple_var_assignment_100515' (line 2841)
            tuple_var_assignment_100515_106856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2841, 12), 'tuple_var_assignment_100515')
            # Assigning a type to the variable 'y1' (line 2841)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2841, 16), 'y1', tuple_var_assignment_100515_106856)
            
            # Assigning a Name to a Tuple (line 2842):
            
            # Assigning a Subscript to a Name (line 2842):
            
            # Assigning a Subscript to a Name (line 2842):
            
            # Obtaining the type of the subscript
            int_106857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2842, 12), 'int')
            # Getting the type of 'posB' (line 2842)
            posB_106858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2842, 21), 'posB')
            # Obtaining the member '__getitem__' of a type (line 2842)
            getitem___106859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2842, 12), posB_106858, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2842)
            subscript_call_result_106860 = invoke(stypy.reporting.localization.Localization(__file__, 2842, 12), getitem___106859, int_106857)
            
            # Assigning a type to the variable 'tuple_var_assignment_100516' (line 2842)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2842, 12), 'tuple_var_assignment_100516', subscript_call_result_106860)
            
            # Assigning a Subscript to a Name (line 2842):
            
            # Assigning a Subscript to a Name (line 2842):
            
            # Obtaining the type of the subscript
            int_106861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2842, 12), 'int')
            # Getting the type of 'posB' (line 2842)
            posB_106862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2842, 21), 'posB')
            # Obtaining the member '__getitem__' of a type (line 2842)
            getitem___106863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2842, 12), posB_106862, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2842)
            subscript_call_result_106864 = invoke(stypy.reporting.localization.Localization(__file__, 2842, 12), getitem___106863, int_106861)
            
            # Assigning a type to the variable 'tuple_var_assignment_100517' (line 2842)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2842, 12), 'tuple_var_assignment_100517', subscript_call_result_106864)
            
            # Assigning a Name to a Name (line 2842):
            
            # Assigning a Name to a Name (line 2842):
            # Getting the type of 'tuple_var_assignment_100516' (line 2842)
            tuple_var_assignment_100516_106865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2842, 12), 'tuple_var_assignment_100516')
            # Assigning a type to the variable 'x2' (line 2842)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2842, 12), 'x2', tuple_var_assignment_100516_106865)
            
            # Assigning a Name to a Name (line 2842):
            
            # Assigning a Name to a Name (line 2842):
            # Getting the type of 'tuple_var_assignment_100517' (line 2842)
            tuple_var_assignment_100517_106866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2842, 12), 'tuple_var_assignment_100517')
            # Assigning a type to the variable 'y2' (line 2842)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2842, 16), 'y2', tuple_var_assignment_100517_106866)
            
            # Assigning a Tuple to a Tuple (line 2843):
            
            # Assigning a BinOp to a Name (line 2843):
            
            # Assigning a BinOp to a Name (line 2843):
            # Getting the type of 'x1' (line 2843)
            x1_106867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2843, 24), 'x1')
            # Getting the type of 'x2' (line 2843)
            x2_106868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2843, 29), 'x2')
            # Applying the binary operator '+' (line 2843)
            result_add_106869 = python_operator(stypy.reporting.localization.Localization(__file__, 2843, 24), '+', x1_106867, x2_106868)
            
            float_106870 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2843, 35), 'float')
            # Applying the binary operator 'div' (line 2843)
            result_div_106871 = python_operator(stypy.reporting.localization.Localization(__file__, 2843, 23), 'div', result_add_106869, float_106870)
            
            # Assigning a type to the variable 'tuple_assignment_100518' (line 2843)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2843, 12), 'tuple_assignment_100518', result_div_106871)
            
            # Assigning a BinOp to a Name (line 2843):
            
            # Assigning a BinOp to a Name (line 2843):
            # Getting the type of 'y1' (line 2843)
            y1_106872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2843, 40), 'y1')
            # Getting the type of 'y2' (line 2843)
            y2_106873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2843, 45), 'y2')
            # Applying the binary operator '+' (line 2843)
            result_add_106874 = python_operator(stypy.reporting.localization.Localization(__file__, 2843, 40), '+', y1_106872, y2_106873)
            
            float_106875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2843, 51), 'float')
            # Applying the binary operator 'div' (line 2843)
            result_div_106876 = python_operator(stypy.reporting.localization.Localization(__file__, 2843, 39), 'div', result_add_106874, float_106875)
            
            # Assigning a type to the variable 'tuple_assignment_100519' (line 2843)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2843, 12), 'tuple_assignment_100519', result_div_106876)
            
            # Assigning a Name to a Name (line 2843):
            
            # Assigning a Name to a Name (line 2843):
            # Getting the type of 'tuple_assignment_100518' (line 2843)
            tuple_assignment_100518_106877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2843, 12), 'tuple_assignment_100518')
            # Assigning a type to the variable 'x12' (line 2843)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2843, 12), 'x12', tuple_assignment_100518_106877)
            
            # Assigning a Name to a Name (line 2843):
            
            # Assigning a Name to a Name (line 2843):
            # Getting the type of 'tuple_assignment_100519' (line 2843)
            tuple_assignment_100519_106878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2843, 12), 'tuple_assignment_100519')
            # Assigning a type to the variable 'y12' (line 2843)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2843, 17), 'y12', tuple_assignment_100519_106878)
            
            # Assigning a Tuple to a Tuple (line 2844):
            
            # Assigning a BinOp to a Name (line 2844):
            
            # Assigning a BinOp to a Name (line 2844):
            # Getting the type of 'x2' (line 2844)
            x2_106879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2844, 21), 'x2')
            # Getting the type of 'x1' (line 2844)
            x1_106880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2844, 26), 'x1')
            # Applying the binary operator '-' (line 2844)
            result_sub_106881 = python_operator(stypy.reporting.localization.Localization(__file__, 2844, 21), '-', x2_106879, x1_106880)
            
            # Assigning a type to the variable 'tuple_assignment_100520' (line 2844)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2844, 12), 'tuple_assignment_100520', result_sub_106881)
            
            # Assigning a BinOp to a Name (line 2844):
            
            # Assigning a BinOp to a Name (line 2844):
            # Getting the type of 'y2' (line 2844)
            y2_106882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2844, 30), 'y2')
            # Getting the type of 'y1' (line 2844)
            y1_106883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2844, 35), 'y1')
            # Applying the binary operator '-' (line 2844)
            result_sub_106884 = python_operator(stypy.reporting.localization.Localization(__file__, 2844, 30), '-', y2_106882, y1_106883)
            
            # Assigning a type to the variable 'tuple_assignment_100521' (line 2844)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2844, 12), 'tuple_assignment_100521', result_sub_106884)
            
            # Assigning a Name to a Name (line 2844):
            
            # Assigning a Name to a Name (line 2844):
            # Getting the type of 'tuple_assignment_100520' (line 2844)
            tuple_assignment_100520_106885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2844, 12), 'tuple_assignment_100520')
            # Assigning a type to the variable 'dx' (line 2844)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2844, 12), 'dx', tuple_assignment_100520_106885)
            
            # Assigning a Name to a Name (line 2844):
            
            # Assigning a Name to a Name (line 2844):
            # Getting the type of 'tuple_assignment_100521' (line 2844)
            tuple_assignment_100521_106886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2844, 12), 'tuple_assignment_100521')
            # Assigning a type to the variable 'dy' (line 2844)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2844, 16), 'dy', tuple_assignment_100521_106886)
            
            # Assigning a Attribute to a Name (line 2846):
            
            # Assigning a Attribute to a Name (line 2846):
            
            # Assigning a Attribute to a Name (line 2846):
            # Getting the type of 'self' (line 2846)
            self_106887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2846, 16), 'self')
            # Obtaining the member 'rad' of a type (line 2846)
            rad_106888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2846, 16), self_106887, 'rad')
            # Assigning a type to the variable 'f' (line 2846)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2846, 12), 'f', rad_106888)
            
            # Assigning a Tuple to a Tuple (line 2848):
            
            # Assigning a BinOp to a Name (line 2848):
            
            # Assigning a BinOp to a Name (line 2848):
            # Getting the type of 'x12' (line 2848)
            x12_106889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2848, 21), 'x12')
            # Getting the type of 'f' (line 2848)
            f_106890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2848, 27), 'f')
            # Getting the type of 'dy' (line 2848)
            dy_106891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2848, 31), 'dy')
            # Applying the binary operator '*' (line 2848)
            result_mul_106892 = python_operator(stypy.reporting.localization.Localization(__file__, 2848, 27), '*', f_106890, dy_106891)
            
            # Applying the binary operator '+' (line 2848)
            result_add_106893 = python_operator(stypy.reporting.localization.Localization(__file__, 2848, 21), '+', x12_106889, result_mul_106892)
            
            # Assigning a type to the variable 'tuple_assignment_100522' (line 2848)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2848, 12), 'tuple_assignment_100522', result_add_106893)
            
            # Assigning a BinOp to a Name (line 2848):
            
            # Assigning a BinOp to a Name (line 2848):
            # Getting the type of 'y12' (line 2848)
            y12_106894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2848, 35), 'y12')
            # Getting the type of 'f' (line 2848)
            f_106895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2848, 41), 'f')
            # Getting the type of 'dx' (line 2848)
            dx_106896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2848, 45), 'dx')
            # Applying the binary operator '*' (line 2848)
            result_mul_106897 = python_operator(stypy.reporting.localization.Localization(__file__, 2848, 41), '*', f_106895, dx_106896)
            
            # Applying the binary operator '-' (line 2848)
            result_sub_106898 = python_operator(stypy.reporting.localization.Localization(__file__, 2848, 35), '-', y12_106894, result_mul_106897)
            
            # Assigning a type to the variable 'tuple_assignment_100523' (line 2848)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2848, 12), 'tuple_assignment_100523', result_sub_106898)
            
            # Assigning a Name to a Name (line 2848):
            
            # Assigning a Name to a Name (line 2848):
            # Getting the type of 'tuple_assignment_100522' (line 2848)
            tuple_assignment_100522_106899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2848, 12), 'tuple_assignment_100522')
            # Assigning a type to the variable 'cx' (line 2848)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2848, 12), 'cx', tuple_assignment_100522_106899)
            
            # Assigning a Name to a Name (line 2848):
            
            # Assigning a Name to a Name (line 2848):
            # Getting the type of 'tuple_assignment_100523' (line 2848)
            tuple_assignment_100523_106900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2848, 12), 'tuple_assignment_100523')
            # Assigning a type to the variable 'cy' (line 2848)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2848, 16), 'cy', tuple_assignment_100523_106900)
            
            # Assigning a List to a Name (line 2850):
            
            # Assigning a List to a Name (line 2850):
            
            # Assigning a List to a Name (line 2850):
            
            # Obtaining an instance of the builtin type 'list' (line 2850)
            list_106901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2850, 23), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2850)
            # Adding element type (line 2850)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2850)
            tuple_106902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2850, 25), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2850)
            # Adding element type (line 2850)
            # Getting the type of 'x1' (line 2850)
            x1_106903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2850, 25), 'x1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2850, 25), tuple_106902, x1_106903)
            # Adding element type (line 2850)
            # Getting the type of 'y1' (line 2850)
            y1_106904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2850, 29), 'y1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2850, 25), tuple_106902, y1_106904)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2850, 23), list_106901, tuple_106902)
            # Adding element type (line 2850)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2851)
            tuple_106905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2851, 25), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2851)
            # Adding element type (line 2851)
            # Getting the type of 'cx' (line 2851)
            cx_106906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2851, 25), 'cx')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2851, 25), tuple_106905, cx_106906)
            # Adding element type (line 2851)
            # Getting the type of 'cy' (line 2851)
            cy_106907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2851, 29), 'cy')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2851, 25), tuple_106905, cy_106907)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2850, 23), list_106901, tuple_106905)
            # Adding element type (line 2850)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2852)
            tuple_106908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2852, 25), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2852)
            # Adding element type (line 2852)
            # Getting the type of 'x2' (line 2852)
            x2_106909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2852, 25), 'x2')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2852, 25), tuple_106908, x2_106909)
            # Adding element type (line 2852)
            # Getting the type of 'y2' (line 2852)
            y2_106910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2852, 29), 'y2')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2852, 25), tuple_106908, y2_106910)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2850, 23), list_106901, tuple_106908)
            
            # Assigning a type to the variable 'vertices' (line 2850)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2850, 12), 'vertices', list_106901)
            
            # Assigning a List to a Name (line 2853):
            
            # Assigning a List to a Name (line 2853):
            
            # Assigning a List to a Name (line 2853):
            
            # Obtaining an instance of the builtin type 'list' (line 2853)
            list_106911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2853, 20), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2853)
            # Adding element type (line 2853)
            # Getting the type of 'Path' (line 2853)
            Path_106912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2853, 21), 'Path')
            # Obtaining the member 'MOVETO' of a type (line 2853)
            MOVETO_106913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2853, 21), Path_106912, 'MOVETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2853, 20), list_106911, MOVETO_106913)
            # Adding element type (line 2853)
            # Getting the type of 'Path' (line 2854)
            Path_106914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2854, 21), 'Path')
            # Obtaining the member 'CURVE3' of a type (line 2854)
            CURVE3_106915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2854, 21), Path_106914, 'CURVE3')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2853, 20), list_106911, CURVE3_106915)
            # Adding element type (line 2853)
            # Getting the type of 'Path' (line 2855)
            Path_106916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2855, 21), 'Path')
            # Obtaining the member 'CURVE3' of a type (line 2855)
            CURVE3_106917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2855, 21), Path_106916, 'CURVE3')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2853, 20), list_106911, CURVE3_106917)
            
            # Assigning a type to the variable 'codes' (line 2853)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2853, 12), 'codes', list_106911)
            
            # Call to Path(...): (line 2857)
            # Processing the call arguments (line 2857)
            # Getting the type of 'vertices' (line 2857)
            vertices_106919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2857, 24), 'vertices', False)
            # Getting the type of 'codes' (line 2857)
            codes_106920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2857, 34), 'codes', False)
            # Processing the call keyword arguments (line 2857)
            kwargs_106921 = {}
            # Getting the type of 'Path' (line 2857)
            Path_106918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2857, 19), 'Path', False)
            # Calling Path(args, kwargs) (line 2857)
            Path_call_result_106922 = invoke(stypy.reporting.localization.Localization(__file__, 2857, 19), Path_106918, *[vertices_106919, codes_106920], **kwargs_106921)
            
            # Assigning a type to the variable 'stypy_return_type' (line 2857)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2857, 12), 'stypy_return_type', Path_call_result_106922)
            
            # ################# End of 'connect(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'connect' in the type store
            # Getting the type of 'stypy_return_type' (line 2840)
            stypy_return_type_106923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2840, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_106923)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'connect'
            return stypy_return_type_106923

    
    # Assigning a type to the variable 'Arc3' (line 2824)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2824, 4), 'Arc3', Arc3)
    
    # Assigning a Name to a Subscript (line 2859):
    
    # Assigning a Name to a Subscript (line 2859):
    # Declaration of the 'Angle3' class
    # Getting the type of '_Base' (line 2861)
    _Base_106924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2861, 17), '_Base')

    class Angle3(_Base_106924, ):
        unicode_106925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2867, (-1)), 'unicode', u'\n        Creates a simple quadratic bezier curve between two\n        points. The middle control points is placed at the\n        intersecting point of two lines which crosses the start (or\n        end) point and has a angle of angleA (or angleB).\n        ')

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            int_106926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2869, 34), 'int')
            int_106927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2869, 45), 'int')
            defaults = [int_106926, int_106927]
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 2869, 8, False)
            # Assigning a type to the variable 'self' (line 2870)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2870, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Angle3.__init__', ['angleA', 'angleB'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, ['angleA', 'angleB'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            unicode_106928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2876, (-1)), 'unicode', u'\n            *angleA*\n              starting angle of the path\n\n            *angleB*\n              ending angle of the path\n            ')
            
            # Assigning a Name to a Attribute (line 2878):
            
            # Assigning a Name to a Attribute (line 2878):
            
            # Assigning a Name to a Attribute (line 2878):
            # Getting the type of 'angleA' (line 2878)
            angleA_106929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2878, 26), 'angleA')
            # Getting the type of 'self' (line 2878)
            self_106930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2878, 12), 'self')
            # Setting the type of the member 'angleA' of a type (line 2878)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2878, 12), self_106930, 'angleA', angleA_106929)
            
            # Assigning a Name to a Attribute (line 2879):
            
            # Assigning a Name to a Attribute (line 2879):
            
            # Assigning a Name to a Attribute (line 2879):
            # Getting the type of 'angleB' (line 2879)
            angleB_106931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2879, 26), 'angleB')
            # Getting the type of 'self' (line 2879)
            self_106932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2879, 12), 'self')
            # Setting the type of the member 'angleB' of a type (line 2879)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2879, 12), self_106932, 'angleB', angleB_106931)
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()


        @norecursion
        def connect(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'connect'
            module_type_store = module_type_store.open_function_context('connect', 2881, 8, False)
            # Assigning a type to the variable 'self' (line 2882)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2882, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            Angle3.connect.__dict__.__setitem__('stypy_localization', localization)
            Angle3.connect.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            Angle3.connect.__dict__.__setitem__('stypy_type_store', module_type_store)
            Angle3.connect.__dict__.__setitem__('stypy_function_name', 'Angle3.connect')
            Angle3.connect.__dict__.__setitem__('stypy_param_names_list', ['posA', 'posB'])
            Angle3.connect.__dict__.__setitem__('stypy_varargs_param_name', None)
            Angle3.connect.__dict__.__setitem__('stypy_kwargs_param_name', None)
            Angle3.connect.__dict__.__setitem__('stypy_call_defaults', defaults)
            Angle3.connect.__dict__.__setitem__('stypy_call_varargs', varargs)
            Angle3.connect.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            Angle3.connect.__dict__.__setitem__('stypy_declared_arg_number', 3)
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Angle3.connect', ['posA', 'posB'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'connect', localization, ['posA', 'posB'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'connect(...)' code ##################

            
            # Assigning a Name to a Tuple (line 2882):
            
            # Assigning a Subscript to a Name (line 2882):
            
            # Assigning a Subscript to a Name (line 2882):
            
            # Obtaining the type of the subscript
            int_106933 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2882, 12), 'int')
            # Getting the type of 'posA' (line 2882)
            posA_106934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2882, 21), 'posA')
            # Obtaining the member '__getitem__' of a type (line 2882)
            getitem___106935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2882, 12), posA_106934, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2882)
            subscript_call_result_106936 = invoke(stypy.reporting.localization.Localization(__file__, 2882, 12), getitem___106935, int_106933)
            
            # Assigning a type to the variable 'tuple_var_assignment_100524' (line 2882)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2882, 12), 'tuple_var_assignment_100524', subscript_call_result_106936)
            
            # Assigning a Subscript to a Name (line 2882):
            
            # Assigning a Subscript to a Name (line 2882):
            
            # Obtaining the type of the subscript
            int_106937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2882, 12), 'int')
            # Getting the type of 'posA' (line 2882)
            posA_106938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2882, 21), 'posA')
            # Obtaining the member '__getitem__' of a type (line 2882)
            getitem___106939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2882, 12), posA_106938, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2882)
            subscript_call_result_106940 = invoke(stypy.reporting.localization.Localization(__file__, 2882, 12), getitem___106939, int_106937)
            
            # Assigning a type to the variable 'tuple_var_assignment_100525' (line 2882)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2882, 12), 'tuple_var_assignment_100525', subscript_call_result_106940)
            
            # Assigning a Name to a Name (line 2882):
            
            # Assigning a Name to a Name (line 2882):
            # Getting the type of 'tuple_var_assignment_100524' (line 2882)
            tuple_var_assignment_100524_106941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2882, 12), 'tuple_var_assignment_100524')
            # Assigning a type to the variable 'x1' (line 2882)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2882, 12), 'x1', tuple_var_assignment_100524_106941)
            
            # Assigning a Name to a Name (line 2882):
            
            # Assigning a Name to a Name (line 2882):
            # Getting the type of 'tuple_var_assignment_100525' (line 2882)
            tuple_var_assignment_100525_106942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2882, 12), 'tuple_var_assignment_100525')
            # Assigning a type to the variable 'y1' (line 2882)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2882, 16), 'y1', tuple_var_assignment_100525_106942)
            
            # Assigning a Name to a Tuple (line 2883):
            
            # Assigning a Subscript to a Name (line 2883):
            
            # Assigning a Subscript to a Name (line 2883):
            
            # Obtaining the type of the subscript
            int_106943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2883, 12), 'int')
            # Getting the type of 'posB' (line 2883)
            posB_106944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2883, 21), 'posB')
            # Obtaining the member '__getitem__' of a type (line 2883)
            getitem___106945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2883, 12), posB_106944, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2883)
            subscript_call_result_106946 = invoke(stypy.reporting.localization.Localization(__file__, 2883, 12), getitem___106945, int_106943)
            
            # Assigning a type to the variable 'tuple_var_assignment_100526' (line 2883)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2883, 12), 'tuple_var_assignment_100526', subscript_call_result_106946)
            
            # Assigning a Subscript to a Name (line 2883):
            
            # Assigning a Subscript to a Name (line 2883):
            
            # Obtaining the type of the subscript
            int_106947 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2883, 12), 'int')
            # Getting the type of 'posB' (line 2883)
            posB_106948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2883, 21), 'posB')
            # Obtaining the member '__getitem__' of a type (line 2883)
            getitem___106949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2883, 12), posB_106948, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2883)
            subscript_call_result_106950 = invoke(stypy.reporting.localization.Localization(__file__, 2883, 12), getitem___106949, int_106947)
            
            # Assigning a type to the variable 'tuple_var_assignment_100527' (line 2883)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2883, 12), 'tuple_var_assignment_100527', subscript_call_result_106950)
            
            # Assigning a Name to a Name (line 2883):
            
            # Assigning a Name to a Name (line 2883):
            # Getting the type of 'tuple_var_assignment_100526' (line 2883)
            tuple_var_assignment_100526_106951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2883, 12), 'tuple_var_assignment_100526')
            # Assigning a type to the variable 'x2' (line 2883)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2883, 12), 'x2', tuple_var_assignment_100526_106951)
            
            # Assigning a Name to a Name (line 2883):
            
            # Assigning a Name to a Name (line 2883):
            # Getting the type of 'tuple_var_assignment_100527' (line 2883)
            tuple_var_assignment_100527_106952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2883, 12), 'tuple_var_assignment_100527')
            # Assigning a type to the variable 'y2' (line 2883)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2883, 16), 'y2', tuple_var_assignment_100527_106952)
            
            # Assigning a Call to a Name (line 2885):
            
            # Assigning a Call to a Name (line 2885):
            
            # Assigning a Call to a Name (line 2885):
            
            # Call to cos(...): (line 2885)
            # Processing the call arguments (line 2885)
            
            # Call to radians(...): (line 2885)
            # Processing the call arguments (line 2885)
            # Getting the type of 'self' (line 2885)
            self_106957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2885, 41), 'self', False)
            # Obtaining the member 'angleA' of a type (line 2885)
            angleA_106958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2885, 41), self_106957, 'angleA')
            # Processing the call keyword arguments (line 2885)
            kwargs_106959 = {}
            # Getting the type of 'math' (line 2885)
            math_106955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2885, 28), 'math', False)
            # Obtaining the member 'radians' of a type (line 2885)
            radians_106956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2885, 28), math_106955, 'radians')
            # Calling radians(args, kwargs) (line 2885)
            radians_call_result_106960 = invoke(stypy.reporting.localization.Localization(__file__, 2885, 28), radians_106956, *[angleA_106958], **kwargs_106959)
            
            # Processing the call keyword arguments (line 2885)
            kwargs_106961 = {}
            # Getting the type of 'math' (line 2885)
            math_106953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2885, 19), 'math', False)
            # Obtaining the member 'cos' of a type (line 2885)
            cos_106954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2885, 19), math_106953, 'cos')
            # Calling cos(args, kwargs) (line 2885)
            cos_call_result_106962 = invoke(stypy.reporting.localization.Localization(__file__, 2885, 19), cos_106954, *[radians_call_result_106960], **kwargs_106961)
            
            # Assigning a type to the variable 'cosA' (line 2885)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2885, 12), 'cosA', cos_call_result_106962)
            
            # Assigning a Call to a Name (line 2886):
            
            # Assigning a Call to a Name (line 2886):
            
            # Assigning a Call to a Name (line 2886):
            
            # Call to sin(...): (line 2886)
            # Processing the call arguments (line 2886)
            
            # Call to radians(...): (line 2886)
            # Processing the call arguments (line 2886)
            # Getting the type of 'self' (line 2886)
            self_106967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2886, 41), 'self', False)
            # Obtaining the member 'angleA' of a type (line 2886)
            angleA_106968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2886, 41), self_106967, 'angleA')
            # Processing the call keyword arguments (line 2886)
            kwargs_106969 = {}
            # Getting the type of 'math' (line 2886)
            math_106965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2886, 28), 'math', False)
            # Obtaining the member 'radians' of a type (line 2886)
            radians_106966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2886, 28), math_106965, 'radians')
            # Calling radians(args, kwargs) (line 2886)
            radians_call_result_106970 = invoke(stypy.reporting.localization.Localization(__file__, 2886, 28), radians_106966, *[angleA_106968], **kwargs_106969)
            
            # Processing the call keyword arguments (line 2886)
            kwargs_106971 = {}
            # Getting the type of 'math' (line 2886)
            math_106963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2886, 19), 'math', False)
            # Obtaining the member 'sin' of a type (line 2886)
            sin_106964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2886, 19), math_106963, 'sin')
            # Calling sin(args, kwargs) (line 2886)
            sin_call_result_106972 = invoke(stypy.reporting.localization.Localization(__file__, 2886, 19), sin_106964, *[radians_call_result_106970], **kwargs_106971)
            
            # Assigning a type to the variable 'sinA' (line 2886)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2886, 12), 'sinA', sin_call_result_106972)
            
            # Assigning a Call to a Name (line 2887):
            
            # Assigning a Call to a Name (line 2887):
            
            # Assigning a Call to a Name (line 2887):
            
            # Call to cos(...): (line 2887)
            # Processing the call arguments (line 2887)
            
            # Call to radians(...): (line 2887)
            # Processing the call arguments (line 2887)
            # Getting the type of 'self' (line 2887)
            self_106977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2887, 41), 'self', False)
            # Obtaining the member 'angleB' of a type (line 2887)
            angleB_106978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2887, 41), self_106977, 'angleB')
            # Processing the call keyword arguments (line 2887)
            kwargs_106979 = {}
            # Getting the type of 'math' (line 2887)
            math_106975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2887, 28), 'math', False)
            # Obtaining the member 'radians' of a type (line 2887)
            radians_106976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2887, 28), math_106975, 'radians')
            # Calling radians(args, kwargs) (line 2887)
            radians_call_result_106980 = invoke(stypy.reporting.localization.Localization(__file__, 2887, 28), radians_106976, *[angleB_106978], **kwargs_106979)
            
            # Processing the call keyword arguments (line 2887)
            kwargs_106981 = {}
            # Getting the type of 'math' (line 2887)
            math_106973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2887, 19), 'math', False)
            # Obtaining the member 'cos' of a type (line 2887)
            cos_106974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2887, 19), math_106973, 'cos')
            # Calling cos(args, kwargs) (line 2887)
            cos_call_result_106982 = invoke(stypy.reporting.localization.Localization(__file__, 2887, 19), cos_106974, *[radians_call_result_106980], **kwargs_106981)
            
            # Assigning a type to the variable 'cosB' (line 2887)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2887, 12), 'cosB', cos_call_result_106982)
            
            # Assigning a Call to a Name (line 2888):
            
            # Assigning a Call to a Name (line 2888):
            
            # Assigning a Call to a Name (line 2888):
            
            # Call to sin(...): (line 2888)
            # Processing the call arguments (line 2888)
            
            # Call to radians(...): (line 2888)
            # Processing the call arguments (line 2888)
            # Getting the type of 'self' (line 2888)
            self_106987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2888, 41), 'self', False)
            # Obtaining the member 'angleB' of a type (line 2888)
            angleB_106988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2888, 41), self_106987, 'angleB')
            # Processing the call keyword arguments (line 2888)
            kwargs_106989 = {}
            # Getting the type of 'math' (line 2888)
            math_106985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2888, 28), 'math', False)
            # Obtaining the member 'radians' of a type (line 2888)
            radians_106986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2888, 28), math_106985, 'radians')
            # Calling radians(args, kwargs) (line 2888)
            radians_call_result_106990 = invoke(stypy.reporting.localization.Localization(__file__, 2888, 28), radians_106986, *[angleB_106988], **kwargs_106989)
            
            # Processing the call keyword arguments (line 2888)
            kwargs_106991 = {}
            # Getting the type of 'math' (line 2888)
            math_106983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2888, 19), 'math', False)
            # Obtaining the member 'sin' of a type (line 2888)
            sin_106984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2888, 19), math_106983, 'sin')
            # Calling sin(args, kwargs) (line 2888)
            sin_call_result_106992 = invoke(stypy.reporting.localization.Localization(__file__, 2888, 19), sin_106984, *[radians_call_result_106990], **kwargs_106991)
            
            # Assigning a type to the variable 'sinB' (line 2888)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2888, 12), 'sinB', sin_call_result_106992)
            
            # Assigning a Call to a Tuple (line 2890):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to get_intersection(...): (line 2890)
            # Processing the call arguments (line 2890)
            # Getting the type of 'x1' (line 2890)
            x1_106994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2890, 38), 'x1', False)
            # Getting the type of 'y1' (line 2890)
            y1_106995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2890, 42), 'y1', False)
            # Getting the type of 'cosA' (line 2890)
            cosA_106996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2890, 46), 'cosA', False)
            # Getting the type of 'sinA' (line 2890)
            sinA_106997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2890, 52), 'sinA', False)
            # Getting the type of 'x2' (line 2891)
            x2_106998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2891, 38), 'x2', False)
            # Getting the type of 'y2' (line 2891)
            y2_106999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2891, 42), 'y2', False)
            # Getting the type of 'cosB' (line 2891)
            cosB_107000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2891, 46), 'cosB', False)
            # Getting the type of 'sinB' (line 2891)
            sinB_107001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2891, 52), 'sinB', False)
            # Processing the call keyword arguments (line 2890)
            kwargs_107002 = {}
            # Getting the type of 'get_intersection' (line 2890)
            get_intersection_106993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2890, 21), 'get_intersection', False)
            # Calling get_intersection(args, kwargs) (line 2890)
            get_intersection_call_result_107003 = invoke(stypy.reporting.localization.Localization(__file__, 2890, 21), get_intersection_106993, *[x1_106994, y1_106995, cosA_106996, sinA_106997, x2_106998, y2_106999, cosB_107000, sinB_107001], **kwargs_107002)
            
            # Assigning a type to the variable 'call_assignment_100528' (line 2890)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2890, 12), 'call_assignment_100528', get_intersection_call_result_107003)
            
            # Assigning a Call to a Name (line 2890):
            
            # Assigning a Call to a Name (line 2890):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_107006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2890, 12), 'int')
            # Processing the call keyword arguments
            kwargs_107007 = {}
            # Getting the type of 'call_assignment_100528' (line 2890)
            call_assignment_100528_107004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2890, 12), 'call_assignment_100528', False)
            # Obtaining the member '__getitem__' of a type (line 2890)
            getitem___107005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2890, 12), call_assignment_100528_107004, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_107008 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___107005, *[int_107006], **kwargs_107007)
            
            # Assigning a type to the variable 'call_assignment_100529' (line 2890)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2890, 12), 'call_assignment_100529', getitem___call_result_107008)
            
            # Assigning a Name to a Name (line 2890):
            
            # Assigning a Name to a Name (line 2890):
            # Getting the type of 'call_assignment_100529' (line 2890)
            call_assignment_100529_107009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2890, 12), 'call_assignment_100529')
            # Assigning a type to the variable 'cx' (line 2890)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2890, 12), 'cx', call_assignment_100529_107009)
            
            # Assigning a Call to a Name (line 2890):
            
            # Assigning a Call to a Name (line 2890):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_107012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2890, 12), 'int')
            # Processing the call keyword arguments
            kwargs_107013 = {}
            # Getting the type of 'call_assignment_100528' (line 2890)
            call_assignment_100528_107010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2890, 12), 'call_assignment_100528', False)
            # Obtaining the member '__getitem__' of a type (line 2890)
            getitem___107011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2890, 12), call_assignment_100528_107010, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_107014 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___107011, *[int_107012], **kwargs_107013)
            
            # Assigning a type to the variable 'call_assignment_100530' (line 2890)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2890, 12), 'call_assignment_100530', getitem___call_result_107014)
            
            # Assigning a Name to a Name (line 2890):
            
            # Assigning a Name to a Name (line 2890):
            # Getting the type of 'call_assignment_100530' (line 2890)
            call_assignment_100530_107015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2890, 12), 'call_assignment_100530')
            # Assigning a type to the variable 'cy' (line 2890)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2890, 16), 'cy', call_assignment_100530_107015)
            
            # Assigning a List to a Name (line 2893):
            
            # Assigning a List to a Name (line 2893):
            
            # Assigning a List to a Name (line 2893):
            
            # Obtaining an instance of the builtin type 'list' (line 2893)
            list_107016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2893, 23), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2893)
            # Adding element type (line 2893)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2893)
            tuple_107017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2893, 25), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2893)
            # Adding element type (line 2893)
            # Getting the type of 'x1' (line 2893)
            x1_107018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2893, 25), 'x1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2893, 25), tuple_107017, x1_107018)
            # Adding element type (line 2893)
            # Getting the type of 'y1' (line 2893)
            y1_107019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2893, 29), 'y1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2893, 25), tuple_107017, y1_107019)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2893, 23), list_107016, tuple_107017)
            # Adding element type (line 2893)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2893)
            tuple_107020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2893, 35), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2893)
            # Adding element type (line 2893)
            # Getting the type of 'cx' (line 2893)
            cx_107021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2893, 35), 'cx')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2893, 35), tuple_107020, cx_107021)
            # Adding element type (line 2893)
            # Getting the type of 'cy' (line 2893)
            cy_107022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2893, 39), 'cy')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2893, 35), tuple_107020, cy_107022)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2893, 23), list_107016, tuple_107020)
            # Adding element type (line 2893)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2893)
            tuple_107023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2893, 45), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2893)
            # Adding element type (line 2893)
            # Getting the type of 'x2' (line 2893)
            x2_107024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2893, 45), 'x2')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2893, 45), tuple_107023, x2_107024)
            # Adding element type (line 2893)
            # Getting the type of 'y2' (line 2893)
            y2_107025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2893, 49), 'y2')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2893, 45), tuple_107023, y2_107025)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2893, 23), list_107016, tuple_107023)
            
            # Assigning a type to the variable 'vertices' (line 2893)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2893, 12), 'vertices', list_107016)
            
            # Assigning a List to a Name (line 2894):
            
            # Assigning a List to a Name (line 2894):
            
            # Assigning a List to a Name (line 2894):
            
            # Obtaining an instance of the builtin type 'list' (line 2894)
            list_107026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2894, 20), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2894)
            # Adding element type (line 2894)
            # Getting the type of 'Path' (line 2894)
            Path_107027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2894, 21), 'Path')
            # Obtaining the member 'MOVETO' of a type (line 2894)
            MOVETO_107028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2894, 21), Path_107027, 'MOVETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2894, 20), list_107026, MOVETO_107028)
            # Adding element type (line 2894)
            # Getting the type of 'Path' (line 2894)
            Path_107029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2894, 34), 'Path')
            # Obtaining the member 'CURVE3' of a type (line 2894)
            CURVE3_107030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2894, 34), Path_107029, 'CURVE3')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2894, 20), list_107026, CURVE3_107030)
            # Adding element type (line 2894)
            # Getting the type of 'Path' (line 2894)
            Path_107031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2894, 47), 'Path')
            # Obtaining the member 'CURVE3' of a type (line 2894)
            CURVE3_107032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2894, 47), Path_107031, 'CURVE3')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2894, 20), list_107026, CURVE3_107032)
            
            # Assigning a type to the variable 'codes' (line 2894)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2894, 12), 'codes', list_107026)
            
            # Call to Path(...): (line 2896)
            # Processing the call arguments (line 2896)
            # Getting the type of 'vertices' (line 2896)
            vertices_107034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2896, 24), 'vertices', False)
            # Getting the type of 'codes' (line 2896)
            codes_107035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2896, 34), 'codes', False)
            # Processing the call keyword arguments (line 2896)
            kwargs_107036 = {}
            # Getting the type of 'Path' (line 2896)
            Path_107033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2896, 19), 'Path', False)
            # Calling Path(args, kwargs) (line 2896)
            Path_call_result_107037 = invoke(stypy.reporting.localization.Localization(__file__, 2896, 19), Path_107033, *[vertices_107034, codes_107035], **kwargs_107036)
            
            # Assigning a type to the variable 'stypy_return_type' (line 2896)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2896, 12), 'stypy_return_type', Path_call_result_107037)
            
            # ################# End of 'connect(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'connect' in the type store
            # Getting the type of 'stypy_return_type' (line 2881)
            stypy_return_type_107038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2881, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_107038)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'connect'
            return stypy_return_type_107038

    
    # Assigning a type to the variable 'Angle3' (line 2861)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2861, 4), 'Angle3', Angle3)
    
    # Assigning a Name to a Subscript (line 2898):
    
    # Assigning a Name to a Subscript (line 2898):
    # Declaration of the 'Angle' class
    # Getting the type of '_Base' (line 2900)
    _Base_107039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2900, 16), '_Base')

    class Angle(_Base_107039, ):
        unicode_107040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2907, (-1)), 'unicode', u'\n        Creates a picewise continuous quadratic bezier path between\n        two points. The path has a one passing-through point placed at\n        the intersecting point of two lines which crosses the start\n        (or end) point and has a angle of angleA (or angleB).  The\n        connecting edges are rounded with *rad*.\n        ')

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            int_107041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2909, 34), 'int')
            int_107042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2909, 45), 'int')
            float_107043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2909, 52), 'float')
            defaults = [int_107041, int_107042, float_107043]
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 2909, 8, False)
            # Assigning a type to the variable 'self' (line 2910)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2910, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Angle.__init__', ['angleA', 'angleB', 'rad'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, ['angleA', 'angleB', 'rad'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            unicode_107044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2919, (-1)), 'unicode', u'\n            *angleA*\n              starting angle of the path\n\n            *angleB*\n              ending angle of the path\n\n            *rad*\n              rounding radius of the edge\n            ')
            
            # Assigning a Name to a Attribute (line 2921):
            
            # Assigning a Name to a Attribute (line 2921):
            
            # Assigning a Name to a Attribute (line 2921):
            # Getting the type of 'angleA' (line 2921)
            angleA_107045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2921, 26), 'angleA')
            # Getting the type of 'self' (line 2921)
            self_107046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2921, 12), 'self')
            # Setting the type of the member 'angleA' of a type (line 2921)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2921, 12), self_107046, 'angleA', angleA_107045)
            
            # Assigning a Name to a Attribute (line 2922):
            
            # Assigning a Name to a Attribute (line 2922):
            
            # Assigning a Name to a Attribute (line 2922):
            # Getting the type of 'angleB' (line 2922)
            angleB_107047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2922, 26), 'angleB')
            # Getting the type of 'self' (line 2922)
            self_107048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2922, 12), 'self')
            # Setting the type of the member 'angleB' of a type (line 2922)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2922, 12), self_107048, 'angleB', angleB_107047)
            
            # Assigning a Name to a Attribute (line 2924):
            
            # Assigning a Name to a Attribute (line 2924):
            
            # Assigning a Name to a Attribute (line 2924):
            # Getting the type of 'rad' (line 2924)
            rad_107049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2924, 23), 'rad')
            # Getting the type of 'self' (line 2924)
            self_107050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2924, 12), 'self')
            # Setting the type of the member 'rad' of a type (line 2924)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2924, 12), self_107050, 'rad', rad_107049)
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()


        @norecursion
        def connect(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'connect'
            module_type_store = module_type_store.open_function_context('connect', 2926, 8, False)
            # Assigning a type to the variable 'self' (line 2927)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2927, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            Angle.connect.__dict__.__setitem__('stypy_localization', localization)
            Angle.connect.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            Angle.connect.__dict__.__setitem__('stypy_type_store', module_type_store)
            Angle.connect.__dict__.__setitem__('stypy_function_name', 'Angle.connect')
            Angle.connect.__dict__.__setitem__('stypy_param_names_list', ['posA', 'posB'])
            Angle.connect.__dict__.__setitem__('stypy_varargs_param_name', None)
            Angle.connect.__dict__.__setitem__('stypy_kwargs_param_name', None)
            Angle.connect.__dict__.__setitem__('stypy_call_defaults', defaults)
            Angle.connect.__dict__.__setitem__('stypy_call_varargs', varargs)
            Angle.connect.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            Angle.connect.__dict__.__setitem__('stypy_declared_arg_number', 3)
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Angle.connect', ['posA', 'posB'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'connect', localization, ['posA', 'posB'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'connect(...)' code ##################

            
            # Assigning a Name to a Tuple (line 2927):
            
            # Assigning a Subscript to a Name (line 2927):
            
            # Assigning a Subscript to a Name (line 2927):
            
            # Obtaining the type of the subscript
            int_107051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2927, 12), 'int')
            # Getting the type of 'posA' (line 2927)
            posA_107052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2927, 21), 'posA')
            # Obtaining the member '__getitem__' of a type (line 2927)
            getitem___107053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2927, 12), posA_107052, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2927)
            subscript_call_result_107054 = invoke(stypy.reporting.localization.Localization(__file__, 2927, 12), getitem___107053, int_107051)
            
            # Assigning a type to the variable 'tuple_var_assignment_100531' (line 2927)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2927, 12), 'tuple_var_assignment_100531', subscript_call_result_107054)
            
            # Assigning a Subscript to a Name (line 2927):
            
            # Assigning a Subscript to a Name (line 2927):
            
            # Obtaining the type of the subscript
            int_107055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2927, 12), 'int')
            # Getting the type of 'posA' (line 2927)
            posA_107056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2927, 21), 'posA')
            # Obtaining the member '__getitem__' of a type (line 2927)
            getitem___107057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2927, 12), posA_107056, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2927)
            subscript_call_result_107058 = invoke(stypy.reporting.localization.Localization(__file__, 2927, 12), getitem___107057, int_107055)
            
            # Assigning a type to the variable 'tuple_var_assignment_100532' (line 2927)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2927, 12), 'tuple_var_assignment_100532', subscript_call_result_107058)
            
            # Assigning a Name to a Name (line 2927):
            
            # Assigning a Name to a Name (line 2927):
            # Getting the type of 'tuple_var_assignment_100531' (line 2927)
            tuple_var_assignment_100531_107059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2927, 12), 'tuple_var_assignment_100531')
            # Assigning a type to the variable 'x1' (line 2927)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2927, 12), 'x1', tuple_var_assignment_100531_107059)
            
            # Assigning a Name to a Name (line 2927):
            
            # Assigning a Name to a Name (line 2927):
            # Getting the type of 'tuple_var_assignment_100532' (line 2927)
            tuple_var_assignment_100532_107060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2927, 12), 'tuple_var_assignment_100532')
            # Assigning a type to the variable 'y1' (line 2927)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2927, 16), 'y1', tuple_var_assignment_100532_107060)
            
            # Assigning a Name to a Tuple (line 2928):
            
            # Assigning a Subscript to a Name (line 2928):
            
            # Assigning a Subscript to a Name (line 2928):
            
            # Obtaining the type of the subscript
            int_107061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2928, 12), 'int')
            # Getting the type of 'posB' (line 2928)
            posB_107062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2928, 21), 'posB')
            # Obtaining the member '__getitem__' of a type (line 2928)
            getitem___107063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2928, 12), posB_107062, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2928)
            subscript_call_result_107064 = invoke(stypy.reporting.localization.Localization(__file__, 2928, 12), getitem___107063, int_107061)
            
            # Assigning a type to the variable 'tuple_var_assignment_100533' (line 2928)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2928, 12), 'tuple_var_assignment_100533', subscript_call_result_107064)
            
            # Assigning a Subscript to a Name (line 2928):
            
            # Assigning a Subscript to a Name (line 2928):
            
            # Obtaining the type of the subscript
            int_107065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2928, 12), 'int')
            # Getting the type of 'posB' (line 2928)
            posB_107066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2928, 21), 'posB')
            # Obtaining the member '__getitem__' of a type (line 2928)
            getitem___107067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2928, 12), posB_107066, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2928)
            subscript_call_result_107068 = invoke(stypy.reporting.localization.Localization(__file__, 2928, 12), getitem___107067, int_107065)
            
            # Assigning a type to the variable 'tuple_var_assignment_100534' (line 2928)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2928, 12), 'tuple_var_assignment_100534', subscript_call_result_107068)
            
            # Assigning a Name to a Name (line 2928):
            
            # Assigning a Name to a Name (line 2928):
            # Getting the type of 'tuple_var_assignment_100533' (line 2928)
            tuple_var_assignment_100533_107069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2928, 12), 'tuple_var_assignment_100533')
            # Assigning a type to the variable 'x2' (line 2928)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2928, 12), 'x2', tuple_var_assignment_100533_107069)
            
            # Assigning a Name to a Name (line 2928):
            
            # Assigning a Name to a Name (line 2928):
            # Getting the type of 'tuple_var_assignment_100534' (line 2928)
            tuple_var_assignment_100534_107070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2928, 12), 'tuple_var_assignment_100534')
            # Assigning a type to the variable 'y2' (line 2928)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2928, 16), 'y2', tuple_var_assignment_100534_107070)
            
            # Assigning a Call to a Name (line 2930):
            
            # Assigning a Call to a Name (line 2930):
            
            # Assigning a Call to a Name (line 2930):
            
            # Call to cos(...): (line 2930)
            # Processing the call arguments (line 2930)
            
            # Call to radians(...): (line 2930)
            # Processing the call arguments (line 2930)
            # Getting the type of 'self' (line 2930)
            self_107075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2930, 41), 'self', False)
            # Obtaining the member 'angleA' of a type (line 2930)
            angleA_107076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2930, 41), self_107075, 'angleA')
            # Processing the call keyword arguments (line 2930)
            kwargs_107077 = {}
            # Getting the type of 'math' (line 2930)
            math_107073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2930, 28), 'math', False)
            # Obtaining the member 'radians' of a type (line 2930)
            radians_107074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2930, 28), math_107073, 'radians')
            # Calling radians(args, kwargs) (line 2930)
            radians_call_result_107078 = invoke(stypy.reporting.localization.Localization(__file__, 2930, 28), radians_107074, *[angleA_107076], **kwargs_107077)
            
            # Processing the call keyword arguments (line 2930)
            kwargs_107079 = {}
            # Getting the type of 'math' (line 2930)
            math_107071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2930, 19), 'math', False)
            # Obtaining the member 'cos' of a type (line 2930)
            cos_107072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2930, 19), math_107071, 'cos')
            # Calling cos(args, kwargs) (line 2930)
            cos_call_result_107080 = invoke(stypy.reporting.localization.Localization(__file__, 2930, 19), cos_107072, *[radians_call_result_107078], **kwargs_107079)
            
            # Assigning a type to the variable 'cosA' (line 2930)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2930, 12), 'cosA', cos_call_result_107080)
            
            # Assigning a Call to a Name (line 2931):
            
            # Assigning a Call to a Name (line 2931):
            
            # Assigning a Call to a Name (line 2931):
            
            # Call to sin(...): (line 2931)
            # Processing the call arguments (line 2931)
            
            # Call to radians(...): (line 2931)
            # Processing the call arguments (line 2931)
            # Getting the type of 'self' (line 2931)
            self_107085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2931, 41), 'self', False)
            # Obtaining the member 'angleA' of a type (line 2931)
            angleA_107086 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2931, 41), self_107085, 'angleA')
            # Processing the call keyword arguments (line 2931)
            kwargs_107087 = {}
            # Getting the type of 'math' (line 2931)
            math_107083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2931, 28), 'math', False)
            # Obtaining the member 'radians' of a type (line 2931)
            radians_107084 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2931, 28), math_107083, 'radians')
            # Calling radians(args, kwargs) (line 2931)
            radians_call_result_107088 = invoke(stypy.reporting.localization.Localization(__file__, 2931, 28), radians_107084, *[angleA_107086], **kwargs_107087)
            
            # Processing the call keyword arguments (line 2931)
            kwargs_107089 = {}
            # Getting the type of 'math' (line 2931)
            math_107081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2931, 19), 'math', False)
            # Obtaining the member 'sin' of a type (line 2931)
            sin_107082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2931, 19), math_107081, 'sin')
            # Calling sin(args, kwargs) (line 2931)
            sin_call_result_107090 = invoke(stypy.reporting.localization.Localization(__file__, 2931, 19), sin_107082, *[radians_call_result_107088], **kwargs_107089)
            
            # Assigning a type to the variable 'sinA' (line 2931)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2931, 12), 'sinA', sin_call_result_107090)
            
            # Assigning a Call to a Name (line 2932):
            
            # Assigning a Call to a Name (line 2932):
            
            # Assigning a Call to a Name (line 2932):
            
            # Call to cos(...): (line 2932)
            # Processing the call arguments (line 2932)
            
            # Call to radians(...): (line 2932)
            # Processing the call arguments (line 2932)
            # Getting the type of 'self' (line 2932)
            self_107095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2932, 41), 'self', False)
            # Obtaining the member 'angleB' of a type (line 2932)
            angleB_107096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2932, 41), self_107095, 'angleB')
            # Processing the call keyword arguments (line 2932)
            kwargs_107097 = {}
            # Getting the type of 'math' (line 2932)
            math_107093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2932, 28), 'math', False)
            # Obtaining the member 'radians' of a type (line 2932)
            radians_107094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2932, 28), math_107093, 'radians')
            # Calling radians(args, kwargs) (line 2932)
            radians_call_result_107098 = invoke(stypy.reporting.localization.Localization(__file__, 2932, 28), radians_107094, *[angleB_107096], **kwargs_107097)
            
            # Processing the call keyword arguments (line 2932)
            kwargs_107099 = {}
            # Getting the type of 'math' (line 2932)
            math_107091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2932, 19), 'math', False)
            # Obtaining the member 'cos' of a type (line 2932)
            cos_107092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2932, 19), math_107091, 'cos')
            # Calling cos(args, kwargs) (line 2932)
            cos_call_result_107100 = invoke(stypy.reporting.localization.Localization(__file__, 2932, 19), cos_107092, *[radians_call_result_107098], **kwargs_107099)
            
            # Assigning a type to the variable 'cosB' (line 2932)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2932, 12), 'cosB', cos_call_result_107100)
            
            # Assigning a Call to a Name (line 2933):
            
            # Assigning a Call to a Name (line 2933):
            
            # Assigning a Call to a Name (line 2933):
            
            # Call to sin(...): (line 2933)
            # Processing the call arguments (line 2933)
            
            # Call to radians(...): (line 2933)
            # Processing the call arguments (line 2933)
            # Getting the type of 'self' (line 2933)
            self_107105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2933, 41), 'self', False)
            # Obtaining the member 'angleB' of a type (line 2933)
            angleB_107106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2933, 41), self_107105, 'angleB')
            # Processing the call keyword arguments (line 2933)
            kwargs_107107 = {}
            # Getting the type of 'math' (line 2933)
            math_107103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2933, 28), 'math', False)
            # Obtaining the member 'radians' of a type (line 2933)
            radians_107104 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2933, 28), math_107103, 'radians')
            # Calling radians(args, kwargs) (line 2933)
            radians_call_result_107108 = invoke(stypy.reporting.localization.Localization(__file__, 2933, 28), radians_107104, *[angleB_107106], **kwargs_107107)
            
            # Processing the call keyword arguments (line 2933)
            kwargs_107109 = {}
            # Getting the type of 'math' (line 2933)
            math_107101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2933, 19), 'math', False)
            # Obtaining the member 'sin' of a type (line 2933)
            sin_107102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2933, 19), math_107101, 'sin')
            # Calling sin(args, kwargs) (line 2933)
            sin_call_result_107110 = invoke(stypy.reporting.localization.Localization(__file__, 2933, 19), sin_107102, *[radians_call_result_107108], **kwargs_107109)
            
            # Assigning a type to the variable 'sinB' (line 2933)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2933, 12), 'sinB', sin_call_result_107110)
            
            # Assigning a Call to a Tuple (line 2935):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to get_intersection(...): (line 2935)
            # Processing the call arguments (line 2935)
            # Getting the type of 'x1' (line 2935)
            x1_107112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2935, 38), 'x1', False)
            # Getting the type of 'y1' (line 2935)
            y1_107113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2935, 42), 'y1', False)
            # Getting the type of 'cosA' (line 2935)
            cosA_107114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2935, 46), 'cosA', False)
            # Getting the type of 'sinA' (line 2935)
            sinA_107115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2935, 52), 'sinA', False)
            # Getting the type of 'x2' (line 2936)
            x2_107116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2936, 38), 'x2', False)
            # Getting the type of 'y2' (line 2936)
            y2_107117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2936, 42), 'y2', False)
            # Getting the type of 'cosB' (line 2936)
            cosB_107118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2936, 46), 'cosB', False)
            # Getting the type of 'sinB' (line 2936)
            sinB_107119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2936, 52), 'sinB', False)
            # Processing the call keyword arguments (line 2935)
            kwargs_107120 = {}
            # Getting the type of 'get_intersection' (line 2935)
            get_intersection_107111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2935, 21), 'get_intersection', False)
            # Calling get_intersection(args, kwargs) (line 2935)
            get_intersection_call_result_107121 = invoke(stypy.reporting.localization.Localization(__file__, 2935, 21), get_intersection_107111, *[x1_107112, y1_107113, cosA_107114, sinA_107115, x2_107116, y2_107117, cosB_107118, sinB_107119], **kwargs_107120)
            
            # Assigning a type to the variable 'call_assignment_100535' (line 2935)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2935, 12), 'call_assignment_100535', get_intersection_call_result_107121)
            
            # Assigning a Call to a Name (line 2935):
            
            # Assigning a Call to a Name (line 2935):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_107124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2935, 12), 'int')
            # Processing the call keyword arguments
            kwargs_107125 = {}
            # Getting the type of 'call_assignment_100535' (line 2935)
            call_assignment_100535_107122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2935, 12), 'call_assignment_100535', False)
            # Obtaining the member '__getitem__' of a type (line 2935)
            getitem___107123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2935, 12), call_assignment_100535_107122, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_107126 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___107123, *[int_107124], **kwargs_107125)
            
            # Assigning a type to the variable 'call_assignment_100536' (line 2935)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2935, 12), 'call_assignment_100536', getitem___call_result_107126)
            
            # Assigning a Name to a Name (line 2935):
            
            # Assigning a Name to a Name (line 2935):
            # Getting the type of 'call_assignment_100536' (line 2935)
            call_assignment_100536_107127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2935, 12), 'call_assignment_100536')
            # Assigning a type to the variable 'cx' (line 2935)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2935, 12), 'cx', call_assignment_100536_107127)
            
            # Assigning a Call to a Name (line 2935):
            
            # Assigning a Call to a Name (line 2935):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_107130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2935, 12), 'int')
            # Processing the call keyword arguments
            kwargs_107131 = {}
            # Getting the type of 'call_assignment_100535' (line 2935)
            call_assignment_100535_107128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2935, 12), 'call_assignment_100535', False)
            # Obtaining the member '__getitem__' of a type (line 2935)
            getitem___107129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2935, 12), call_assignment_100535_107128, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_107132 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___107129, *[int_107130], **kwargs_107131)
            
            # Assigning a type to the variable 'call_assignment_100537' (line 2935)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2935, 12), 'call_assignment_100537', getitem___call_result_107132)
            
            # Assigning a Name to a Name (line 2935):
            
            # Assigning a Name to a Name (line 2935):
            # Getting the type of 'call_assignment_100537' (line 2935)
            call_assignment_100537_107133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2935, 12), 'call_assignment_100537')
            # Assigning a type to the variable 'cy' (line 2935)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2935, 16), 'cy', call_assignment_100537_107133)
            
            # Assigning a List to a Name (line 2938):
            
            # Assigning a List to a Name (line 2938):
            
            # Assigning a List to a Name (line 2938):
            
            # Obtaining an instance of the builtin type 'list' (line 2938)
            list_107134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2938, 23), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2938)
            # Adding element type (line 2938)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2938)
            tuple_107135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2938, 25), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2938)
            # Adding element type (line 2938)
            # Getting the type of 'x1' (line 2938)
            x1_107136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2938, 25), 'x1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2938, 25), tuple_107135, x1_107136)
            # Adding element type (line 2938)
            # Getting the type of 'y1' (line 2938)
            y1_107137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2938, 29), 'y1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2938, 25), tuple_107135, y1_107137)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2938, 23), list_107134, tuple_107135)
            
            # Assigning a type to the variable 'vertices' (line 2938)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2938, 12), 'vertices', list_107134)
            
            # Assigning a List to a Name (line 2939):
            
            # Assigning a List to a Name (line 2939):
            
            # Assigning a List to a Name (line 2939):
            
            # Obtaining an instance of the builtin type 'list' (line 2939)
            list_107138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2939, 20), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2939)
            # Adding element type (line 2939)
            # Getting the type of 'Path' (line 2939)
            Path_107139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2939, 21), 'Path')
            # Obtaining the member 'MOVETO' of a type (line 2939)
            MOVETO_107140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2939, 21), Path_107139, 'MOVETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2939, 20), list_107138, MOVETO_107140)
            
            # Assigning a type to the variable 'codes' (line 2939)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2939, 12), 'codes', list_107138)
            
            
            # Getting the type of 'self' (line 2941)
            self_107141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2941, 15), 'self')
            # Obtaining the member 'rad' of a type (line 2941)
            rad_107142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2941, 15), self_107141, 'rad')
            float_107143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2941, 27), 'float')
            # Applying the binary operator '==' (line 2941)
            result_eq_107144 = python_operator(stypy.reporting.localization.Localization(__file__, 2941, 15), '==', rad_107142, float_107143)
            
            # Testing the type of an if condition (line 2941)
            if_condition_107145 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2941, 12), result_eq_107144)
            # Assigning a type to the variable 'if_condition_107145' (line 2941)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2941, 12), 'if_condition_107145', if_condition_107145)
            # SSA begins for if statement (line 2941)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to append(...): (line 2942)
            # Processing the call arguments (line 2942)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2942)
            tuple_107148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2942, 33), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2942)
            # Adding element type (line 2942)
            # Getting the type of 'cx' (line 2942)
            cx_107149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2942, 33), 'cx', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2942, 33), tuple_107148, cx_107149)
            # Adding element type (line 2942)
            # Getting the type of 'cy' (line 2942)
            cy_107150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2942, 37), 'cy', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2942, 33), tuple_107148, cy_107150)
            
            # Processing the call keyword arguments (line 2942)
            kwargs_107151 = {}
            # Getting the type of 'vertices' (line 2942)
            vertices_107146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2942, 16), 'vertices', False)
            # Obtaining the member 'append' of a type (line 2942)
            append_107147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2942, 16), vertices_107146, 'append')
            # Calling append(args, kwargs) (line 2942)
            append_call_result_107152 = invoke(stypy.reporting.localization.Localization(__file__, 2942, 16), append_107147, *[tuple_107148], **kwargs_107151)
            
            
            # Call to append(...): (line 2943)
            # Processing the call arguments (line 2943)
            # Getting the type of 'Path' (line 2943)
            Path_107155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2943, 29), 'Path', False)
            # Obtaining the member 'LINETO' of a type (line 2943)
            LINETO_107156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2943, 29), Path_107155, 'LINETO')
            # Processing the call keyword arguments (line 2943)
            kwargs_107157 = {}
            # Getting the type of 'codes' (line 2943)
            codes_107153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2943, 16), 'codes', False)
            # Obtaining the member 'append' of a type (line 2943)
            append_107154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2943, 16), codes_107153, 'append')
            # Calling append(args, kwargs) (line 2943)
            append_call_result_107158 = invoke(stypy.reporting.localization.Localization(__file__, 2943, 16), append_107154, *[LINETO_107156], **kwargs_107157)
            
            # SSA branch for the else part of an if statement (line 2941)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Tuple to a Tuple (line 2945):
            
            # Assigning a BinOp to a Name (line 2945):
            
            # Assigning a BinOp to a Name (line 2945):
            # Getting the type of 'x1' (line 2945)
            x1_107159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2945, 27), 'x1')
            # Getting the type of 'cx' (line 2945)
            cx_107160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2945, 32), 'cx')
            # Applying the binary operator '-' (line 2945)
            result_sub_107161 = python_operator(stypy.reporting.localization.Localization(__file__, 2945, 27), '-', x1_107159, cx_107160)
            
            # Assigning a type to the variable 'tuple_assignment_100538' (line 2945)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2945, 16), 'tuple_assignment_100538', result_sub_107161)
            
            # Assigning a BinOp to a Name (line 2945):
            
            # Assigning a BinOp to a Name (line 2945):
            # Getting the type of 'y1' (line 2945)
            y1_107162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2945, 36), 'y1')
            # Getting the type of 'cy' (line 2945)
            cy_107163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2945, 41), 'cy')
            # Applying the binary operator '-' (line 2945)
            result_sub_107164 = python_operator(stypy.reporting.localization.Localization(__file__, 2945, 36), '-', y1_107162, cy_107163)
            
            # Assigning a type to the variable 'tuple_assignment_100539' (line 2945)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2945, 16), 'tuple_assignment_100539', result_sub_107164)
            
            # Assigning a Name to a Name (line 2945):
            
            # Assigning a Name to a Name (line 2945):
            # Getting the type of 'tuple_assignment_100538' (line 2945)
            tuple_assignment_100538_107165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2945, 16), 'tuple_assignment_100538')
            # Assigning a type to the variable 'dx1' (line 2945)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2945, 16), 'dx1', tuple_assignment_100538_107165)
            
            # Assigning a Name to a Name (line 2945):
            
            # Assigning a Name to a Name (line 2945):
            # Getting the type of 'tuple_assignment_100539' (line 2945)
            tuple_assignment_100539_107166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2945, 16), 'tuple_assignment_100539')
            # Assigning a type to the variable 'dy1' (line 2945)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2945, 21), 'dy1', tuple_assignment_100539_107166)
            
            # Assigning a BinOp to a Name (line 2946):
            
            # Assigning a BinOp to a Name (line 2946):
            
            # Assigning a BinOp to a Name (line 2946):
            # Getting the type of 'dx1' (line 2946)
            dx1_107167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2946, 22), 'dx1')
            int_107168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2946, 29), 'int')
            # Applying the binary operator '**' (line 2946)
            result_pow_107169 = python_operator(stypy.reporting.localization.Localization(__file__, 2946, 22), '**', dx1_107167, int_107168)
            
            # Getting the type of 'dy1' (line 2946)
            dy1_107170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2946, 33), 'dy1')
            int_107171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2946, 40), 'int')
            # Applying the binary operator '**' (line 2946)
            result_pow_107172 = python_operator(stypy.reporting.localization.Localization(__file__, 2946, 33), '**', dy1_107170, int_107171)
            
            # Applying the binary operator '+' (line 2946)
            result_add_107173 = python_operator(stypy.reporting.localization.Localization(__file__, 2946, 22), '+', result_pow_107169, result_pow_107172)
            
            float_107174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2946, 46), 'float')
            # Applying the binary operator '**' (line 2946)
            result_pow_107175 = python_operator(stypy.reporting.localization.Localization(__file__, 2946, 21), '**', result_add_107173, float_107174)
            
            # Assigning a type to the variable 'd1' (line 2946)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2946, 16), 'd1', result_pow_107175)
            
            # Assigning a BinOp to a Name (line 2947):
            
            # Assigning a BinOp to a Name (line 2947):
            
            # Assigning a BinOp to a Name (line 2947):
            # Getting the type of 'self' (line 2947)
            self_107176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2947, 21), 'self')
            # Obtaining the member 'rad' of a type (line 2947)
            rad_107177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2947, 21), self_107176, 'rad')
            # Getting the type of 'd1' (line 2947)
            d1_107178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2947, 32), 'd1')
            # Applying the binary operator 'div' (line 2947)
            result_div_107179 = python_operator(stypy.reporting.localization.Localization(__file__, 2947, 21), 'div', rad_107177, d1_107178)
            
            # Assigning a type to the variable 'f1' (line 2947)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2947, 16), 'f1', result_div_107179)
            
            # Assigning a Tuple to a Tuple (line 2948):
            
            # Assigning a BinOp to a Name (line 2948):
            
            # Assigning a BinOp to a Name (line 2948):
            # Getting the type of 'x2' (line 2948)
            x2_107180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2948, 27), 'x2')
            # Getting the type of 'cx' (line 2948)
            cx_107181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2948, 32), 'cx')
            # Applying the binary operator '-' (line 2948)
            result_sub_107182 = python_operator(stypy.reporting.localization.Localization(__file__, 2948, 27), '-', x2_107180, cx_107181)
            
            # Assigning a type to the variable 'tuple_assignment_100540' (line 2948)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2948, 16), 'tuple_assignment_100540', result_sub_107182)
            
            # Assigning a BinOp to a Name (line 2948):
            
            # Assigning a BinOp to a Name (line 2948):
            # Getting the type of 'y2' (line 2948)
            y2_107183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2948, 36), 'y2')
            # Getting the type of 'cy' (line 2948)
            cy_107184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2948, 41), 'cy')
            # Applying the binary operator '-' (line 2948)
            result_sub_107185 = python_operator(stypy.reporting.localization.Localization(__file__, 2948, 36), '-', y2_107183, cy_107184)
            
            # Assigning a type to the variable 'tuple_assignment_100541' (line 2948)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2948, 16), 'tuple_assignment_100541', result_sub_107185)
            
            # Assigning a Name to a Name (line 2948):
            
            # Assigning a Name to a Name (line 2948):
            # Getting the type of 'tuple_assignment_100540' (line 2948)
            tuple_assignment_100540_107186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2948, 16), 'tuple_assignment_100540')
            # Assigning a type to the variable 'dx2' (line 2948)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2948, 16), 'dx2', tuple_assignment_100540_107186)
            
            # Assigning a Name to a Name (line 2948):
            
            # Assigning a Name to a Name (line 2948):
            # Getting the type of 'tuple_assignment_100541' (line 2948)
            tuple_assignment_100541_107187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2948, 16), 'tuple_assignment_100541')
            # Assigning a type to the variable 'dy2' (line 2948)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2948, 21), 'dy2', tuple_assignment_100541_107187)
            
            # Assigning a BinOp to a Name (line 2949):
            
            # Assigning a BinOp to a Name (line 2949):
            
            # Assigning a BinOp to a Name (line 2949):
            # Getting the type of 'dx2' (line 2949)
            dx2_107188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2949, 22), 'dx2')
            int_107189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2949, 29), 'int')
            # Applying the binary operator '**' (line 2949)
            result_pow_107190 = python_operator(stypy.reporting.localization.Localization(__file__, 2949, 22), '**', dx2_107188, int_107189)
            
            # Getting the type of 'dy2' (line 2949)
            dy2_107191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2949, 33), 'dy2')
            int_107192 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2949, 40), 'int')
            # Applying the binary operator '**' (line 2949)
            result_pow_107193 = python_operator(stypy.reporting.localization.Localization(__file__, 2949, 33), '**', dy2_107191, int_107192)
            
            # Applying the binary operator '+' (line 2949)
            result_add_107194 = python_operator(stypy.reporting.localization.Localization(__file__, 2949, 22), '+', result_pow_107190, result_pow_107193)
            
            float_107195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2949, 46), 'float')
            # Applying the binary operator '**' (line 2949)
            result_pow_107196 = python_operator(stypy.reporting.localization.Localization(__file__, 2949, 21), '**', result_add_107194, float_107195)
            
            # Assigning a type to the variable 'd2' (line 2949)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2949, 16), 'd2', result_pow_107196)
            
            # Assigning a BinOp to a Name (line 2950):
            
            # Assigning a BinOp to a Name (line 2950):
            
            # Assigning a BinOp to a Name (line 2950):
            # Getting the type of 'self' (line 2950)
            self_107197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2950, 21), 'self')
            # Obtaining the member 'rad' of a type (line 2950)
            rad_107198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2950, 21), self_107197, 'rad')
            # Getting the type of 'd2' (line 2950)
            d2_107199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2950, 32), 'd2')
            # Applying the binary operator 'div' (line 2950)
            result_div_107200 = python_operator(stypy.reporting.localization.Localization(__file__, 2950, 21), 'div', rad_107198, d2_107199)
            
            # Assigning a type to the variable 'f2' (line 2950)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2950, 16), 'f2', result_div_107200)
            
            # Call to extend(...): (line 2951)
            # Processing the call arguments (line 2951)
            
            # Obtaining an instance of the builtin type 'list' (line 2951)
            list_107203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2951, 32), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2951)
            # Adding element type (line 2951)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2951)
            tuple_107204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2951, 34), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2951)
            # Adding element type (line 2951)
            # Getting the type of 'cx' (line 2951)
            cx_107205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2951, 34), 'cx', False)
            # Getting the type of 'dx1' (line 2951)
            dx1_107206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2951, 39), 'dx1', False)
            # Getting the type of 'f1' (line 2951)
            f1_107207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2951, 45), 'f1', False)
            # Applying the binary operator '*' (line 2951)
            result_mul_107208 = python_operator(stypy.reporting.localization.Localization(__file__, 2951, 39), '*', dx1_107206, f1_107207)
            
            # Applying the binary operator '+' (line 2951)
            result_add_107209 = python_operator(stypy.reporting.localization.Localization(__file__, 2951, 34), '+', cx_107205, result_mul_107208)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2951, 34), tuple_107204, result_add_107209)
            # Adding element type (line 2951)
            # Getting the type of 'cy' (line 2951)
            cy_107210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2951, 49), 'cy', False)
            # Getting the type of 'dy1' (line 2951)
            dy1_107211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2951, 54), 'dy1', False)
            # Getting the type of 'f1' (line 2951)
            f1_107212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2951, 60), 'f1', False)
            # Applying the binary operator '*' (line 2951)
            result_mul_107213 = python_operator(stypy.reporting.localization.Localization(__file__, 2951, 54), '*', dy1_107211, f1_107212)
            
            # Applying the binary operator '+' (line 2951)
            result_add_107214 = python_operator(stypy.reporting.localization.Localization(__file__, 2951, 49), '+', cy_107210, result_mul_107213)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2951, 34), tuple_107204, result_add_107214)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2951, 32), list_107203, tuple_107204)
            # Adding element type (line 2951)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2952)
            tuple_107215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2952, 34), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2952)
            # Adding element type (line 2952)
            # Getting the type of 'cx' (line 2952)
            cx_107216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2952, 34), 'cx', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2952, 34), tuple_107215, cx_107216)
            # Adding element type (line 2952)
            # Getting the type of 'cy' (line 2952)
            cy_107217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2952, 38), 'cy', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2952, 34), tuple_107215, cy_107217)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2951, 32), list_107203, tuple_107215)
            # Adding element type (line 2951)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2953)
            tuple_107218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2953, 34), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2953)
            # Adding element type (line 2953)
            # Getting the type of 'cx' (line 2953)
            cx_107219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2953, 34), 'cx', False)
            # Getting the type of 'dx2' (line 2953)
            dx2_107220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2953, 39), 'dx2', False)
            # Getting the type of 'f2' (line 2953)
            f2_107221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2953, 45), 'f2', False)
            # Applying the binary operator '*' (line 2953)
            result_mul_107222 = python_operator(stypy.reporting.localization.Localization(__file__, 2953, 39), '*', dx2_107220, f2_107221)
            
            # Applying the binary operator '+' (line 2953)
            result_add_107223 = python_operator(stypy.reporting.localization.Localization(__file__, 2953, 34), '+', cx_107219, result_mul_107222)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2953, 34), tuple_107218, result_add_107223)
            # Adding element type (line 2953)
            # Getting the type of 'cy' (line 2953)
            cy_107224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2953, 49), 'cy', False)
            # Getting the type of 'dy2' (line 2953)
            dy2_107225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2953, 54), 'dy2', False)
            # Getting the type of 'f2' (line 2953)
            f2_107226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2953, 60), 'f2', False)
            # Applying the binary operator '*' (line 2953)
            result_mul_107227 = python_operator(stypy.reporting.localization.Localization(__file__, 2953, 54), '*', dy2_107225, f2_107226)
            
            # Applying the binary operator '+' (line 2953)
            result_add_107228 = python_operator(stypy.reporting.localization.Localization(__file__, 2953, 49), '+', cy_107224, result_mul_107227)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2953, 34), tuple_107218, result_add_107228)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2951, 32), list_107203, tuple_107218)
            
            # Processing the call keyword arguments (line 2951)
            kwargs_107229 = {}
            # Getting the type of 'vertices' (line 2951)
            vertices_107201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2951, 16), 'vertices', False)
            # Obtaining the member 'extend' of a type (line 2951)
            extend_107202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2951, 16), vertices_107201, 'extend')
            # Calling extend(args, kwargs) (line 2951)
            extend_call_result_107230 = invoke(stypy.reporting.localization.Localization(__file__, 2951, 16), extend_107202, *[list_107203], **kwargs_107229)
            
            
            # Call to extend(...): (line 2954)
            # Processing the call arguments (line 2954)
            
            # Obtaining an instance of the builtin type 'list' (line 2954)
            list_107233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2954, 29), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2954)
            # Adding element type (line 2954)
            # Getting the type of 'Path' (line 2954)
            Path_107234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2954, 30), 'Path', False)
            # Obtaining the member 'LINETO' of a type (line 2954)
            LINETO_107235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2954, 30), Path_107234, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2954, 29), list_107233, LINETO_107235)
            # Adding element type (line 2954)
            # Getting the type of 'Path' (line 2954)
            Path_107236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2954, 43), 'Path', False)
            # Obtaining the member 'CURVE3' of a type (line 2954)
            CURVE3_107237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2954, 43), Path_107236, 'CURVE3')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2954, 29), list_107233, CURVE3_107237)
            # Adding element type (line 2954)
            # Getting the type of 'Path' (line 2954)
            Path_107238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2954, 56), 'Path', False)
            # Obtaining the member 'CURVE3' of a type (line 2954)
            CURVE3_107239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2954, 56), Path_107238, 'CURVE3')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2954, 29), list_107233, CURVE3_107239)
            
            # Processing the call keyword arguments (line 2954)
            kwargs_107240 = {}
            # Getting the type of 'codes' (line 2954)
            codes_107231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2954, 16), 'codes', False)
            # Obtaining the member 'extend' of a type (line 2954)
            extend_107232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2954, 16), codes_107231, 'extend')
            # Calling extend(args, kwargs) (line 2954)
            extend_call_result_107241 = invoke(stypy.reporting.localization.Localization(__file__, 2954, 16), extend_107232, *[list_107233], **kwargs_107240)
            
            # SSA join for if statement (line 2941)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Call to append(...): (line 2956)
            # Processing the call arguments (line 2956)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2956)
            tuple_107244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2956, 29), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2956)
            # Adding element type (line 2956)
            # Getting the type of 'x2' (line 2956)
            x2_107245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 29), 'x2', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2956, 29), tuple_107244, x2_107245)
            # Adding element type (line 2956)
            # Getting the type of 'y2' (line 2956)
            y2_107246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 33), 'y2', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2956, 29), tuple_107244, y2_107246)
            
            # Processing the call keyword arguments (line 2956)
            kwargs_107247 = {}
            # Getting the type of 'vertices' (line 2956)
            vertices_107242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 12), 'vertices', False)
            # Obtaining the member 'append' of a type (line 2956)
            append_107243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2956, 12), vertices_107242, 'append')
            # Calling append(args, kwargs) (line 2956)
            append_call_result_107248 = invoke(stypy.reporting.localization.Localization(__file__, 2956, 12), append_107243, *[tuple_107244], **kwargs_107247)
            
            
            # Call to append(...): (line 2957)
            # Processing the call arguments (line 2957)
            # Getting the type of 'Path' (line 2957)
            Path_107251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2957, 25), 'Path', False)
            # Obtaining the member 'LINETO' of a type (line 2957)
            LINETO_107252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2957, 25), Path_107251, 'LINETO')
            # Processing the call keyword arguments (line 2957)
            kwargs_107253 = {}
            # Getting the type of 'codes' (line 2957)
            codes_107249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2957, 12), 'codes', False)
            # Obtaining the member 'append' of a type (line 2957)
            append_107250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2957, 12), codes_107249, 'append')
            # Calling append(args, kwargs) (line 2957)
            append_call_result_107254 = invoke(stypy.reporting.localization.Localization(__file__, 2957, 12), append_107250, *[LINETO_107252], **kwargs_107253)
            
            
            # Call to Path(...): (line 2959)
            # Processing the call arguments (line 2959)
            # Getting the type of 'vertices' (line 2959)
            vertices_107256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2959, 24), 'vertices', False)
            # Getting the type of 'codes' (line 2959)
            codes_107257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2959, 34), 'codes', False)
            # Processing the call keyword arguments (line 2959)
            kwargs_107258 = {}
            # Getting the type of 'Path' (line 2959)
            Path_107255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2959, 19), 'Path', False)
            # Calling Path(args, kwargs) (line 2959)
            Path_call_result_107259 = invoke(stypy.reporting.localization.Localization(__file__, 2959, 19), Path_107255, *[vertices_107256, codes_107257], **kwargs_107258)
            
            # Assigning a type to the variable 'stypy_return_type' (line 2959)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2959, 12), 'stypy_return_type', Path_call_result_107259)
            
            # ################# End of 'connect(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'connect' in the type store
            # Getting the type of 'stypy_return_type' (line 2926)
            stypy_return_type_107260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2926, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_107260)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'connect'
            return stypy_return_type_107260

    
    # Assigning a type to the variable 'Angle' (line 2900)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2900, 4), 'Angle', Angle)
    
    # Assigning a Name to a Subscript (line 2961):
    
    # Assigning a Name to a Subscript (line 2961):
    # Declaration of the 'Arc' class
    # Getting the type of '_Base' (line 2963)
    _Base_107261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2963, 14), '_Base')

    class Arc(_Base_107261, ):
        unicode_107262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2970, (-1)), 'unicode', u'\n        Creates a picewise continuous quadratic bezier path between\n        two points. The path can have two passing-through points, a\n        point placed at the distance of armA and angle of angleA from\n        point A, another point with respect to point B. The edges are\n        rounded with *rad*.\n        ')

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            int_107263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2972, 34), 'int')
            int_107264 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2972, 44), 'int')
            # Getting the type of 'None' (line 2972)
            None_107265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2972, 52), 'None')
            # Getting the type of 'None' (line 2972)
            None_107266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2972, 63), 'None')
            float_107267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2972, 73), 'float')
            defaults = [int_107263, int_107264, None_107265, None_107266, float_107267]
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 2972, 8, False)
            # Assigning a type to the variable 'self' (line 2973)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2973, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Arc.__init__', ['angleA', 'angleB', 'armA', 'armB', 'rad'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, ['angleA', 'angleB', 'armA', 'armB', 'rad'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            unicode_107268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2988, (-1)), 'unicode', u'\n            *angleA* :\n              starting angle of the path\n\n            *angleB* :\n              ending angle of the path\n\n            *armA* :\n              length of the starting arm\n\n            *armB* :\n              length of the ending arm\n\n            *rad* :\n              rounding radius of the edges\n            ')
            
            # Assigning a Name to a Attribute (line 2990):
            
            # Assigning a Name to a Attribute (line 2990):
            
            # Assigning a Name to a Attribute (line 2990):
            # Getting the type of 'angleA' (line 2990)
            angleA_107269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2990, 26), 'angleA')
            # Getting the type of 'self' (line 2990)
            self_107270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2990, 12), 'self')
            # Setting the type of the member 'angleA' of a type (line 2990)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2990, 12), self_107270, 'angleA', angleA_107269)
            
            # Assigning a Name to a Attribute (line 2991):
            
            # Assigning a Name to a Attribute (line 2991):
            
            # Assigning a Name to a Attribute (line 2991):
            # Getting the type of 'angleB' (line 2991)
            angleB_107271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2991, 26), 'angleB')
            # Getting the type of 'self' (line 2991)
            self_107272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2991, 12), 'self')
            # Setting the type of the member 'angleB' of a type (line 2991)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2991, 12), self_107272, 'angleB', angleB_107271)
            
            # Assigning a Name to a Attribute (line 2992):
            
            # Assigning a Name to a Attribute (line 2992):
            
            # Assigning a Name to a Attribute (line 2992):
            # Getting the type of 'armA' (line 2992)
            armA_107273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2992, 24), 'armA')
            # Getting the type of 'self' (line 2992)
            self_107274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2992, 12), 'self')
            # Setting the type of the member 'armA' of a type (line 2992)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2992, 12), self_107274, 'armA', armA_107273)
            
            # Assigning a Name to a Attribute (line 2993):
            
            # Assigning a Name to a Attribute (line 2993):
            
            # Assigning a Name to a Attribute (line 2993):
            # Getting the type of 'armB' (line 2993)
            armB_107275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2993, 24), 'armB')
            # Getting the type of 'self' (line 2993)
            self_107276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2993, 12), 'self')
            # Setting the type of the member 'armB' of a type (line 2993)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2993, 12), self_107276, 'armB', armB_107275)
            
            # Assigning a Name to a Attribute (line 2995):
            
            # Assigning a Name to a Attribute (line 2995):
            
            # Assigning a Name to a Attribute (line 2995):
            # Getting the type of 'rad' (line 2995)
            rad_107277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2995, 23), 'rad')
            # Getting the type of 'self' (line 2995)
            self_107278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2995, 12), 'self')
            # Setting the type of the member 'rad' of a type (line 2995)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2995, 12), self_107278, 'rad', rad_107277)
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()


        @norecursion
        def connect(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'connect'
            module_type_store = module_type_store.open_function_context('connect', 2997, 8, False)
            # Assigning a type to the variable 'self' (line 2998)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2998, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            Arc.connect.__dict__.__setitem__('stypy_localization', localization)
            Arc.connect.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            Arc.connect.__dict__.__setitem__('stypy_type_store', module_type_store)
            Arc.connect.__dict__.__setitem__('stypy_function_name', 'Arc.connect')
            Arc.connect.__dict__.__setitem__('stypy_param_names_list', ['posA', 'posB'])
            Arc.connect.__dict__.__setitem__('stypy_varargs_param_name', None)
            Arc.connect.__dict__.__setitem__('stypy_kwargs_param_name', None)
            Arc.connect.__dict__.__setitem__('stypy_call_defaults', defaults)
            Arc.connect.__dict__.__setitem__('stypy_call_varargs', varargs)
            Arc.connect.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            Arc.connect.__dict__.__setitem__('stypy_declared_arg_number', 3)
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Arc.connect', ['posA', 'posB'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'connect', localization, ['posA', 'posB'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'connect(...)' code ##################

            
            # Assigning a Name to a Tuple (line 2998):
            
            # Assigning a Subscript to a Name (line 2998):
            
            # Assigning a Subscript to a Name (line 2998):
            
            # Obtaining the type of the subscript
            int_107279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2998, 12), 'int')
            # Getting the type of 'posA' (line 2998)
            posA_107280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2998, 21), 'posA')
            # Obtaining the member '__getitem__' of a type (line 2998)
            getitem___107281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2998, 12), posA_107280, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2998)
            subscript_call_result_107282 = invoke(stypy.reporting.localization.Localization(__file__, 2998, 12), getitem___107281, int_107279)
            
            # Assigning a type to the variable 'tuple_var_assignment_100542' (line 2998)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2998, 12), 'tuple_var_assignment_100542', subscript_call_result_107282)
            
            # Assigning a Subscript to a Name (line 2998):
            
            # Assigning a Subscript to a Name (line 2998):
            
            # Obtaining the type of the subscript
            int_107283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2998, 12), 'int')
            # Getting the type of 'posA' (line 2998)
            posA_107284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2998, 21), 'posA')
            # Obtaining the member '__getitem__' of a type (line 2998)
            getitem___107285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2998, 12), posA_107284, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2998)
            subscript_call_result_107286 = invoke(stypy.reporting.localization.Localization(__file__, 2998, 12), getitem___107285, int_107283)
            
            # Assigning a type to the variable 'tuple_var_assignment_100543' (line 2998)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2998, 12), 'tuple_var_assignment_100543', subscript_call_result_107286)
            
            # Assigning a Name to a Name (line 2998):
            
            # Assigning a Name to a Name (line 2998):
            # Getting the type of 'tuple_var_assignment_100542' (line 2998)
            tuple_var_assignment_100542_107287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2998, 12), 'tuple_var_assignment_100542')
            # Assigning a type to the variable 'x1' (line 2998)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2998, 12), 'x1', tuple_var_assignment_100542_107287)
            
            # Assigning a Name to a Name (line 2998):
            
            # Assigning a Name to a Name (line 2998):
            # Getting the type of 'tuple_var_assignment_100543' (line 2998)
            tuple_var_assignment_100543_107288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2998, 12), 'tuple_var_assignment_100543')
            # Assigning a type to the variable 'y1' (line 2998)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2998, 16), 'y1', tuple_var_assignment_100543_107288)
            
            # Assigning a Name to a Tuple (line 2999):
            
            # Assigning a Subscript to a Name (line 2999):
            
            # Assigning a Subscript to a Name (line 2999):
            
            # Obtaining the type of the subscript
            int_107289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2999, 12), 'int')
            # Getting the type of 'posB' (line 2999)
            posB_107290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2999, 21), 'posB')
            # Obtaining the member '__getitem__' of a type (line 2999)
            getitem___107291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2999, 12), posB_107290, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2999)
            subscript_call_result_107292 = invoke(stypy.reporting.localization.Localization(__file__, 2999, 12), getitem___107291, int_107289)
            
            # Assigning a type to the variable 'tuple_var_assignment_100544' (line 2999)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2999, 12), 'tuple_var_assignment_100544', subscript_call_result_107292)
            
            # Assigning a Subscript to a Name (line 2999):
            
            # Assigning a Subscript to a Name (line 2999):
            
            # Obtaining the type of the subscript
            int_107293 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2999, 12), 'int')
            # Getting the type of 'posB' (line 2999)
            posB_107294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2999, 21), 'posB')
            # Obtaining the member '__getitem__' of a type (line 2999)
            getitem___107295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2999, 12), posB_107294, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2999)
            subscript_call_result_107296 = invoke(stypy.reporting.localization.Localization(__file__, 2999, 12), getitem___107295, int_107293)
            
            # Assigning a type to the variable 'tuple_var_assignment_100545' (line 2999)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2999, 12), 'tuple_var_assignment_100545', subscript_call_result_107296)
            
            # Assigning a Name to a Name (line 2999):
            
            # Assigning a Name to a Name (line 2999):
            # Getting the type of 'tuple_var_assignment_100544' (line 2999)
            tuple_var_assignment_100544_107297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2999, 12), 'tuple_var_assignment_100544')
            # Assigning a type to the variable 'x2' (line 2999)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2999, 12), 'x2', tuple_var_assignment_100544_107297)
            
            # Assigning a Name to a Name (line 2999):
            
            # Assigning a Name to a Name (line 2999):
            # Getting the type of 'tuple_var_assignment_100545' (line 2999)
            tuple_var_assignment_100545_107298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2999, 12), 'tuple_var_assignment_100545')
            # Assigning a type to the variable 'y2' (line 2999)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2999, 16), 'y2', tuple_var_assignment_100545_107298)
            
            # Assigning a List to a Name (line 3001):
            
            # Assigning a List to a Name (line 3001):
            
            # Assigning a List to a Name (line 3001):
            
            # Obtaining an instance of the builtin type 'list' (line 3001)
            list_107299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3001, 23), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3001)
            # Adding element type (line 3001)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3001)
            tuple_107300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3001, 25), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3001)
            # Adding element type (line 3001)
            # Getting the type of 'x1' (line 3001)
            x1_107301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3001, 25), 'x1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3001, 25), tuple_107300, x1_107301)
            # Adding element type (line 3001)
            # Getting the type of 'y1' (line 3001)
            y1_107302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3001, 29), 'y1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3001, 25), tuple_107300, y1_107302)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3001, 23), list_107299, tuple_107300)
            
            # Assigning a type to the variable 'vertices' (line 3001)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3001, 12), 'vertices', list_107299)
            
            # Assigning a List to a Name (line 3002):
            
            # Assigning a List to a Name (line 3002):
            
            # Assigning a List to a Name (line 3002):
            
            # Obtaining an instance of the builtin type 'list' (line 3002)
            list_107303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3002, 22), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3002)
            
            # Assigning a type to the variable 'rounded' (line 3002)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3002, 12), 'rounded', list_107303)
            
            # Assigning a List to a Name (line 3003):
            
            # Assigning a List to a Name (line 3003):
            
            # Assigning a List to a Name (line 3003):
            
            # Obtaining an instance of the builtin type 'list' (line 3003)
            list_107304 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3003, 20), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3003)
            # Adding element type (line 3003)
            # Getting the type of 'Path' (line 3003)
            Path_107305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3003, 21), 'Path')
            # Obtaining the member 'MOVETO' of a type (line 3003)
            MOVETO_107306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3003, 21), Path_107305, 'MOVETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3003, 20), list_107304, MOVETO_107306)
            
            # Assigning a type to the variable 'codes' (line 3003)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3003, 12), 'codes', list_107304)
            
            # Getting the type of 'self' (line 3005)
            self_107307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3005, 15), 'self')
            # Obtaining the member 'armA' of a type (line 3005)
            armA_107308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3005, 15), self_107307, 'armA')
            # Testing the type of an if condition (line 3005)
            if_condition_107309 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3005, 12), armA_107308)
            # Assigning a type to the variable 'if_condition_107309' (line 3005)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3005, 12), 'if_condition_107309', if_condition_107309)
            # SSA begins for if statement (line 3005)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 3006):
            
            # Assigning a Call to a Name (line 3006):
            
            # Assigning a Call to a Name (line 3006):
            
            # Call to cos(...): (line 3006)
            # Processing the call arguments (line 3006)
            
            # Call to radians(...): (line 3006)
            # Processing the call arguments (line 3006)
            # Getting the type of 'self' (line 3006)
            self_107314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3006, 45), 'self', False)
            # Obtaining the member 'angleA' of a type (line 3006)
            angleA_107315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3006, 45), self_107314, 'angleA')
            # Processing the call keyword arguments (line 3006)
            kwargs_107316 = {}
            # Getting the type of 'math' (line 3006)
            math_107312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3006, 32), 'math', False)
            # Obtaining the member 'radians' of a type (line 3006)
            radians_107313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3006, 32), math_107312, 'radians')
            # Calling radians(args, kwargs) (line 3006)
            radians_call_result_107317 = invoke(stypy.reporting.localization.Localization(__file__, 3006, 32), radians_107313, *[angleA_107315], **kwargs_107316)
            
            # Processing the call keyword arguments (line 3006)
            kwargs_107318 = {}
            # Getting the type of 'math' (line 3006)
            math_107310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3006, 23), 'math', False)
            # Obtaining the member 'cos' of a type (line 3006)
            cos_107311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3006, 23), math_107310, 'cos')
            # Calling cos(args, kwargs) (line 3006)
            cos_call_result_107319 = invoke(stypy.reporting.localization.Localization(__file__, 3006, 23), cos_107311, *[radians_call_result_107317], **kwargs_107318)
            
            # Assigning a type to the variable 'cosA' (line 3006)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3006, 16), 'cosA', cos_call_result_107319)
            
            # Assigning a Call to a Name (line 3007):
            
            # Assigning a Call to a Name (line 3007):
            
            # Assigning a Call to a Name (line 3007):
            
            # Call to sin(...): (line 3007)
            # Processing the call arguments (line 3007)
            
            # Call to radians(...): (line 3007)
            # Processing the call arguments (line 3007)
            # Getting the type of 'self' (line 3007)
            self_107324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3007, 45), 'self', False)
            # Obtaining the member 'angleA' of a type (line 3007)
            angleA_107325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3007, 45), self_107324, 'angleA')
            # Processing the call keyword arguments (line 3007)
            kwargs_107326 = {}
            # Getting the type of 'math' (line 3007)
            math_107322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3007, 32), 'math', False)
            # Obtaining the member 'radians' of a type (line 3007)
            radians_107323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3007, 32), math_107322, 'radians')
            # Calling radians(args, kwargs) (line 3007)
            radians_call_result_107327 = invoke(stypy.reporting.localization.Localization(__file__, 3007, 32), radians_107323, *[angleA_107325], **kwargs_107326)
            
            # Processing the call keyword arguments (line 3007)
            kwargs_107328 = {}
            # Getting the type of 'math' (line 3007)
            math_107320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3007, 23), 'math', False)
            # Obtaining the member 'sin' of a type (line 3007)
            sin_107321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3007, 23), math_107320, 'sin')
            # Calling sin(args, kwargs) (line 3007)
            sin_call_result_107329 = invoke(stypy.reporting.localization.Localization(__file__, 3007, 23), sin_107321, *[radians_call_result_107327], **kwargs_107328)
            
            # Assigning a type to the variable 'sinA' (line 3007)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3007, 16), 'sinA', sin_call_result_107329)
            
            # Assigning a BinOp to a Name (line 3009):
            
            # Assigning a BinOp to a Name (line 3009):
            
            # Assigning a BinOp to a Name (line 3009):
            # Getting the type of 'self' (line 3009)
            self_107330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3009, 20), 'self')
            # Obtaining the member 'armA' of a type (line 3009)
            armA_107331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3009, 20), self_107330, 'armA')
            # Getting the type of 'self' (line 3009)
            self_107332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3009, 32), 'self')
            # Obtaining the member 'rad' of a type (line 3009)
            rad_107333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3009, 32), self_107332, 'rad')
            # Applying the binary operator '-' (line 3009)
            result_sub_107334 = python_operator(stypy.reporting.localization.Localization(__file__, 3009, 20), '-', armA_107331, rad_107333)
            
            # Assigning a type to the variable 'd' (line 3009)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3009, 16), 'd', result_sub_107334)
            
            # Call to append(...): (line 3010)
            # Processing the call arguments (line 3010)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3010)
            tuple_107337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3010, 32), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3010)
            # Adding element type (line 3010)
            # Getting the type of 'x1' (line 3010)
            x1_107338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3010, 32), 'x1', False)
            # Getting the type of 'd' (line 3010)
            d_107339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3010, 37), 'd', False)
            # Getting the type of 'cosA' (line 3010)
            cosA_107340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3010, 41), 'cosA', False)
            # Applying the binary operator '*' (line 3010)
            result_mul_107341 = python_operator(stypy.reporting.localization.Localization(__file__, 3010, 37), '*', d_107339, cosA_107340)
            
            # Applying the binary operator '+' (line 3010)
            result_add_107342 = python_operator(stypy.reporting.localization.Localization(__file__, 3010, 32), '+', x1_107338, result_mul_107341)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3010, 32), tuple_107337, result_add_107342)
            # Adding element type (line 3010)
            # Getting the type of 'y1' (line 3010)
            y1_107343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3010, 47), 'y1', False)
            # Getting the type of 'd' (line 3010)
            d_107344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3010, 52), 'd', False)
            # Getting the type of 'sinA' (line 3010)
            sinA_107345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3010, 56), 'sinA', False)
            # Applying the binary operator '*' (line 3010)
            result_mul_107346 = python_operator(stypy.reporting.localization.Localization(__file__, 3010, 52), '*', d_107344, sinA_107345)
            
            # Applying the binary operator '+' (line 3010)
            result_add_107347 = python_operator(stypy.reporting.localization.Localization(__file__, 3010, 47), '+', y1_107343, result_mul_107346)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3010, 32), tuple_107337, result_add_107347)
            
            # Processing the call keyword arguments (line 3010)
            kwargs_107348 = {}
            # Getting the type of 'rounded' (line 3010)
            rounded_107335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3010, 16), 'rounded', False)
            # Obtaining the member 'append' of a type (line 3010)
            append_107336 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3010, 16), rounded_107335, 'append')
            # Calling append(args, kwargs) (line 3010)
            append_call_result_107349 = invoke(stypy.reporting.localization.Localization(__file__, 3010, 16), append_107336, *[tuple_107337], **kwargs_107348)
            
            
            # Assigning a Attribute to a Name (line 3011):
            
            # Assigning a Attribute to a Name (line 3011):
            
            # Assigning a Attribute to a Name (line 3011):
            # Getting the type of 'self' (line 3011)
            self_107350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3011, 20), 'self')
            # Obtaining the member 'armA' of a type (line 3011)
            armA_107351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3011, 20), self_107350, 'armA')
            # Assigning a type to the variable 'd' (line 3011)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3011, 16), 'd', armA_107351)
            
            # Call to append(...): (line 3012)
            # Processing the call arguments (line 3012)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3012)
            tuple_107354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3012, 32), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3012)
            # Adding element type (line 3012)
            # Getting the type of 'x1' (line 3012)
            x1_107355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3012, 32), 'x1', False)
            # Getting the type of 'd' (line 3012)
            d_107356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3012, 37), 'd', False)
            # Getting the type of 'cosA' (line 3012)
            cosA_107357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3012, 41), 'cosA', False)
            # Applying the binary operator '*' (line 3012)
            result_mul_107358 = python_operator(stypy.reporting.localization.Localization(__file__, 3012, 37), '*', d_107356, cosA_107357)
            
            # Applying the binary operator '+' (line 3012)
            result_add_107359 = python_operator(stypy.reporting.localization.Localization(__file__, 3012, 32), '+', x1_107355, result_mul_107358)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3012, 32), tuple_107354, result_add_107359)
            # Adding element type (line 3012)
            # Getting the type of 'y1' (line 3012)
            y1_107360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3012, 47), 'y1', False)
            # Getting the type of 'd' (line 3012)
            d_107361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3012, 52), 'd', False)
            # Getting the type of 'sinA' (line 3012)
            sinA_107362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3012, 56), 'sinA', False)
            # Applying the binary operator '*' (line 3012)
            result_mul_107363 = python_operator(stypy.reporting.localization.Localization(__file__, 3012, 52), '*', d_107361, sinA_107362)
            
            # Applying the binary operator '+' (line 3012)
            result_add_107364 = python_operator(stypy.reporting.localization.Localization(__file__, 3012, 47), '+', y1_107360, result_mul_107363)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3012, 32), tuple_107354, result_add_107364)
            
            # Processing the call keyword arguments (line 3012)
            kwargs_107365 = {}
            # Getting the type of 'rounded' (line 3012)
            rounded_107352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3012, 16), 'rounded', False)
            # Obtaining the member 'append' of a type (line 3012)
            append_107353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3012, 16), rounded_107352, 'append')
            # Calling append(args, kwargs) (line 3012)
            append_call_result_107366 = invoke(stypy.reporting.localization.Localization(__file__, 3012, 16), append_107353, *[tuple_107354], **kwargs_107365)
            
            # SSA join for if statement (line 3005)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Getting the type of 'self' (line 3014)
            self_107367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3014, 15), 'self')
            # Obtaining the member 'armB' of a type (line 3014)
            armB_107368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3014, 15), self_107367, 'armB')
            # Testing the type of an if condition (line 3014)
            if_condition_107369 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3014, 12), armB_107368)
            # Assigning a type to the variable 'if_condition_107369' (line 3014)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3014, 12), 'if_condition_107369', if_condition_107369)
            # SSA begins for if statement (line 3014)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 3015):
            
            # Assigning a Call to a Name (line 3015):
            
            # Assigning a Call to a Name (line 3015):
            
            # Call to cos(...): (line 3015)
            # Processing the call arguments (line 3015)
            
            # Call to radians(...): (line 3015)
            # Processing the call arguments (line 3015)
            # Getting the type of 'self' (line 3015)
            self_107374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3015, 45), 'self', False)
            # Obtaining the member 'angleB' of a type (line 3015)
            angleB_107375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3015, 45), self_107374, 'angleB')
            # Processing the call keyword arguments (line 3015)
            kwargs_107376 = {}
            # Getting the type of 'math' (line 3015)
            math_107372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3015, 32), 'math', False)
            # Obtaining the member 'radians' of a type (line 3015)
            radians_107373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3015, 32), math_107372, 'radians')
            # Calling radians(args, kwargs) (line 3015)
            radians_call_result_107377 = invoke(stypy.reporting.localization.Localization(__file__, 3015, 32), radians_107373, *[angleB_107375], **kwargs_107376)
            
            # Processing the call keyword arguments (line 3015)
            kwargs_107378 = {}
            # Getting the type of 'math' (line 3015)
            math_107370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3015, 23), 'math', False)
            # Obtaining the member 'cos' of a type (line 3015)
            cos_107371 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3015, 23), math_107370, 'cos')
            # Calling cos(args, kwargs) (line 3015)
            cos_call_result_107379 = invoke(stypy.reporting.localization.Localization(__file__, 3015, 23), cos_107371, *[radians_call_result_107377], **kwargs_107378)
            
            # Assigning a type to the variable 'cosB' (line 3015)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3015, 16), 'cosB', cos_call_result_107379)
            
            # Assigning a Call to a Name (line 3016):
            
            # Assigning a Call to a Name (line 3016):
            
            # Assigning a Call to a Name (line 3016):
            
            # Call to sin(...): (line 3016)
            # Processing the call arguments (line 3016)
            
            # Call to radians(...): (line 3016)
            # Processing the call arguments (line 3016)
            # Getting the type of 'self' (line 3016)
            self_107384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3016, 45), 'self', False)
            # Obtaining the member 'angleB' of a type (line 3016)
            angleB_107385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3016, 45), self_107384, 'angleB')
            # Processing the call keyword arguments (line 3016)
            kwargs_107386 = {}
            # Getting the type of 'math' (line 3016)
            math_107382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3016, 32), 'math', False)
            # Obtaining the member 'radians' of a type (line 3016)
            radians_107383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3016, 32), math_107382, 'radians')
            # Calling radians(args, kwargs) (line 3016)
            radians_call_result_107387 = invoke(stypy.reporting.localization.Localization(__file__, 3016, 32), radians_107383, *[angleB_107385], **kwargs_107386)
            
            # Processing the call keyword arguments (line 3016)
            kwargs_107388 = {}
            # Getting the type of 'math' (line 3016)
            math_107380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3016, 23), 'math', False)
            # Obtaining the member 'sin' of a type (line 3016)
            sin_107381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3016, 23), math_107380, 'sin')
            # Calling sin(args, kwargs) (line 3016)
            sin_call_result_107389 = invoke(stypy.reporting.localization.Localization(__file__, 3016, 23), sin_107381, *[radians_call_result_107387], **kwargs_107388)
            
            # Assigning a type to the variable 'sinB' (line 3016)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3016, 16), 'sinB', sin_call_result_107389)
            
            # Assigning a Tuple to a Tuple (line 3017):
            
            # Assigning a BinOp to a Name (line 3017):
            
            # Assigning a BinOp to a Name (line 3017):
            # Getting the type of 'x2' (line 3017)
            x2_107390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3017, 33), 'x2')
            # Getting the type of 'self' (line 3017)
            self_107391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3017, 38), 'self')
            # Obtaining the member 'armB' of a type (line 3017)
            armB_107392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3017, 38), self_107391, 'armB')
            # Getting the type of 'cosB' (line 3017)
            cosB_107393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3017, 50), 'cosB')
            # Applying the binary operator '*' (line 3017)
            result_mul_107394 = python_operator(stypy.reporting.localization.Localization(__file__, 3017, 38), '*', armB_107392, cosB_107393)
            
            # Applying the binary operator '+' (line 3017)
            result_add_107395 = python_operator(stypy.reporting.localization.Localization(__file__, 3017, 33), '+', x2_107390, result_mul_107394)
            
            # Assigning a type to the variable 'tuple_assignment_100546' (line 3017)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3017, 16), 'tuple_assignment_100546', result_add_107395)
            
            # Assigning a BinOp to a Name (line 3017):
            
            # Assigning a BinOp to a Name (line 3017):
            # Getting the type of 'y2' (line 3017)
            y2_107396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3017, 56), 'y2')
            # Getting the type of 'self' (line 3017)
            self_107397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3017, 61), 'self')
            # Obtaining the member 'armB' of a type (line 3017)
            armB_107398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3017, 61), self_107397, 'armB')
            # Getting the type of 'sinB' (line 3017)
            sinB_107399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3017, 73), 'sinB')
            # Applying the binary operator '*' (line 3017)
            result_mul_107400 = python_operator(stypy.reporting.localization.Localization(__file__, 3017, 61), '*', armB_107398, sinB_107399)
            
            # Applying the binary operator '+' (line 3017)
            result_add_107401 = python_operator(stypy.reporting.localization.Localization(__file__, 3017, 56), '+', y2_107396, result_mul_107400)
            
            # Assigning a type to the variable 'tuple_assignment_100547' (line 3017)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3017, 16), 'tuple_assignment_100547', result_add_107401)
            
            # Assigning a Name to a Name (line 3017):
            
            # Assigning a Name to a Name (line 3017):
            # Getting the type of 'tuple_assignment_100546' (line 3017)
            tuple_assignment_100546_107402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3017, 16), 'tuple_assignment_100546')
            # Assigning a type to the variable 'x_armB' (line 3017)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3017, 16), 'x_armB', tuple_assignment_100546_107402)
            
            # Assigning a Name to a Name (line 3017):
            
            # Assigning a Name to a Name (line 3017):
            # Getting the type of 'tuple_assignment_100547' (line 3017)
            tuple_assignment_100547_107403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3017, 16), 'tuple_assignment_100547')
            # Assigning a type to the variable 'y_armB' (line 3017)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3017, 24), 'y_armB', tuple_assignment_100547_107403)
            
            # Getting the type of 'rounded' (line 3019)
            rounded_107404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3019, 19), 'rounded')
            # Testing the type of an if condition (line 3019)
            if_condition_107405 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3019, 16), rounded_107404)
            # Assigning a type to the variable 'if_condition_107405' (line 3019)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3019, 16), 'if_condition_107405', if_condition_107405)
            # SSA begins for if statement (line 3019)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Subscript to a Tuple (line 3020):
            
            # Assigning a Subscript to a Name (line 3020):
            
            # Assigning a Subscript to a Name (line 3020):
            
            # Obtaining the type of the subscript
            int_107406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3020, 20), 'int')
            
            # Obtaining the type of the subscript
            int_107407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3020, 37), 'int')
            # Getting the type of 'rounded' (line 3020)
            rounded_107408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3020, 29), 'rounded')
            # Obtaining the member '__getitem__' of a type (line 3020)
            getitem___107409 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3020, 29), rounded_107408, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3020)
            subscript_call_result_107410 = invoke(stypy.reporting.localization.Localization(__file__, 3020, 29), getitem___107409, int_107407)
            
            # Obtaining the member '__getitem__' of a type (line 3020)
            getitem___107411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3020, 20), subscript_call_result_107410, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3020)
            subscript_call_result_107412 = invoke(stypy.reporting.localization.Localization(__file__, 3020, 20), getitem___107411, int_107406)
            
            # Assigning a type to the variable 'tuple_var_assignment_100548' (line 3020)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3020, 20), 'tuple_var_assignment_100548', subscript_call_result_107412)
            
            # Assigning a Subscript to a Name (line 3020):
            
            # Assigning a Subscript to a Name (line 3020):
            
            # Obtaining the type of the subscript
            int_107413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3020, 20), 'int')
            
            # Obtaining the type of the subscript
            int_107414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3020, 37), 'int')
            # Getting the type of 'rounded' (line 3020)
            rounded_107415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3020, 29), 'rounded')
            # Obtaining the member '__getitem__' of a type (line 3020)
            getitem___107416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3020, 29), rounded_107415, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3020)
            subscript_call_result_107417 = invoke(stypy.reporting.localization.Localization(__file__, 3020, 29), getitem___107416, int_107414)
            
            # Obtaining the member '__getitem__' of a type (line 3020)
            getitem___107418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3020, 20), subscript_call_result_107417, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3020)
            subscript_call_result_107419 = invoke(stypy.reporting.localization.Localization(__file__, 3020, 20), getitem___107418, int_107413)
            
            # Assigning a type to the variable 'tuple_var_assignment_100549' (line 3020)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3020, 20), 'tuple_var_assignment_100549', subscript_call_result_107419)
            
            # Assigning a Name to a Name (line 3020):
            
            # Assigning a Name to a Name (line 3020):
            # Getting the type of 'tuple_var_assignment_100548' (line 3020)
            tuple_var_assignment_100548_107420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3020, 20), 'tuple_var_assignment_100548')
            # Assigning a type to the variable 'xp' (line 3020)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3020, 20), 'xp', tuple_var_assignment_100548_107420)
            
            # Assigning a Name to a Name (line 3020):
            
            # Assigning a Name to a Name (line 3020):
            # Getting the type of 'tuple_var_assignment_100549' (line 3020)
            tuple_var_assignment_100549_107421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3020, 20), 'tuple_var_assignment_100549')
            # Assigning a type to the variable 'yp' (line 3020)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3020, 24), 'yp', tuple_var_assignment_100549_107421)
            
            # Assigning a Tuple to a Tuple (line 3021):
            
            # Assigning a BinOp to a Name (line 3021):
            
            # Assigning a BinOp to a Name (line 3021):
            # Getting the type of 'x_armB' (line 3021)
            x_armB_107422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3021, 29), 'x_armB')
            # Getting the type of 'xp' (line 3021)
            xp_107423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3021, 38), 'xp')
            # Applying the binary operator '-' (line 3021)
            result_sub_107424 = python_operator(stypy.reporting.localization.Localization(__file__, 3021, 29), '-', x_armB_107422, xp_107423)
            
            # Assigning a type to the variable 'tuple_assignment_100550' (line 3021)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3021, 20), 'tuple_assignment_100550', result_sub_107424)
            
            # Assigning a BinOp to a Name (line 3021):
            
            # Assigning a BinOp to a Name (line 3021):
            # Getting the type of 'y_armB' (line 3021)
            y_armB_107425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3021, 42), 'y_armB')
            # Getting the type of 'yp' (line 3021)
            yp_107426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3021, 51), 'yp')
            # Applying the binary operator '-' (line 3021)
            result_sub_107427 = python_operator(stypy.reporting.localization.Localization(__file__, 3021, 42), '-', y_armB_107425, yp_107426)
            
            # Assigning a type to the variable 'tuple_assignment_100551' (line 3021)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3021, 20), 'tuple_assignment_100551', result_sub_107427)
            
            # Assigning a Name to a Name (line 3021):
            
            # Assigning a Name to a Name (line 3021):
            # Getting the type of 'tuple_assignment_100550' (line 3021)
            tuple_assignment_100550_107428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3021, 20), 'tuple_assignment_100550')
            # Assigning a type to the variable 'dx' (line 3021)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3021, 20), 'dx', tuple_assignment_100550_107428)
            
            # Assigning a Name to a Name (line 3021):
            
            # Assigning a Name to a Name (line 3021):
            # Getting the type of 'tuple_assignment_100551' (line 3021)
            tuple_assignment_100551_107429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3021, 20), 'tuple_assignment_100551')
            # Assigning a type to the variable 'dy' (line 3021)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3021, 24), 'dy', tuple_assignment_100551_107429)
            
            # Assigning a BinOp to a Name (line 3022):
            
            # Assigning a BinOp to a Name (line 3022):
            
            # Assigning a BinOp to a Name (line 3022):
            # Getting the type of 'dx' (line 3022)
            dx_107430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3022, 26), 'dx')
            # Getting the type of 'dx' (line 3022)
            dx_107431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3022, 31), 'dx')
            # Applying the binary operator '*' (line 3022)
            result_mul_107432 = python_operator(stypy.reporting.localization.Localization(__file__, 3022, 26), '*', dx_107430, dx_107431)
            
            # Getting the type of 'dy' (line 3022)
            dy_107433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3022, 36), 'dy')
            # Getting the type of 'dy' (line 3022)
            dy_107434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3022, 41), 'dy')
            # Applying the binary operator '*' (line 3022)
            result_mul_107435 = python_operator(stypy.reporting.localization.Localization(__file__, 3022, 36), '*', dy_107433, dy_107434)
            
            # Applying the binary operator '+' (line 3022)
            result_add_107436 = python_operator(stypy.reporting.localization.Localization(__file__, 3022, 26), '+', result_mul_107432, result_mul_107435)
            
            float_107437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3022, 48), 'float')
            # Applying the binary operator '**' (line 3022)
            result_pow_107438 = python_operator(stypy.reporting.localization.Localization(__file__, 3022, 25), '**', result_add_107436, float_107437)
            
            # Assigning a type to the variable 'dd' (line 3022)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3022, 20), 'dd', result_pow_107438)
            
            # Call to append(...): (line 3024)
            # Processing the call arguments (line 3024)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3024)
            tuple_107441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3024, 36), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3024)
            # Adding element type (line 3024)
            # Getting the type of 'xp' (line 3024)
            xp_107442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3024, 36), 'xp', False)
            # Getting the type of 'self' (line 3024)
            self_107443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3024, 41), 'self', False)
            # Obtaining the member 'rad' of a type (line 3024)
            rad_107444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3024, 41), self_107443, 'rad')
            # Getting the type of 'dx' (line 3024)
            dx_107445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3024, 52), 'dx', False)
            # Applying the binary operator '*' (line 3024)
            result_mul_107446 = python_operator(stypy.reporting.localization.Localization(__file__, 3024, 41), '*', rad_107444, dx_107445)
            
            # Getting the type of 'dd' (line 3024)
            dd_107447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3024, 57), 'dd', False)
            # Applying the binary operator 'div' (line 3024)
            result_div_107448 = python_operator(stypy.reporting.localization.Localization(__file__, 3024, 55), 'div', result_mul_107446, dd_107447)
            
            # Applying the binary operator '+' (line 3024)
            result_add_107449 = python_operator(stypy.reporting.localization.Localization(__file__, 3024, 36), '+', xp_107442, result_div_107448)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3024, 36), tuple_107441, result_add_107449)
            # Adding element type (line 3024)
            # Getting the type of 'yp' (line 3025)
            yp_107450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3025, 36), 'yp', False)
            # Getting the type of 'self' (line 3025)
            self_107451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3025, 41), 'self', False)
            # Obtaining the member 'rad' of a type (line 3025)
            rad_107452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3025, 41), self_107451, 'rad')
            # Getting the type of 'dy' (line 3025)
            dy_107453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3025, 52), 'dy', False)
            # Applying the binary operator '*' (line 3025)
            result_mul_107454 = python_operator(stypy.reporting.localization.Localization(__file__, 3025, 41), '*', rad_107452, dy_107453)
            
            # Getting the type of 'dd' (line 3025)
            dd_107455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3025, 57), 'dd', False)
            # Applying the binary operator 'div' (line 3025)
            result_div_107456 = python_operator(stypy.reporting.localization.Localization(__file__, 3025, 55), 'div', result_mul_107454, dd_107455)
            
            # Applying the binary operator '+' (line 3025)
            result_add_107457 = python_operator(stypy.reporting.localization.Localization(__file__, 3025, 36), '+', yp_107450, result_div_107456)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3024, 36), tuple_107441, result_add_107457)
            
            # Processing the call keyword arguments (line 3024)
            kwargs_107458 = {}
            # Getting the type of 'rounded' (line 3024)
            rounded_107439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3024, 20), 'rounded', False)
            # Obtaining the member 'append' of a type (line 3024)
            append_107440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3024, 20), rounded_107439, 'append')
            # Calling append(args, kwargs) (line 3024)
            append_call_result_107459 = invoke(stypy.reporting.localization.Localization(__file__, 3024, 20), append_107440, *[tuple_107441], **kwargs_107458)
            
            
            # Call to extend(...): (line 3026)
            # Processing the call arguments (line 3026)
            # Getting the type of 'rounded' (line 3026)
            rounded_107462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3026, 36), 'rounded', False)
            # Processing the call keyword arguments (line 3026)
            kwargs_107463 = {}
            # Getting the type of 'vertices' (line 3026)
            vertices_107460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3026, 20), 'vertices', False)
            # Obtaining the member 'extend' of a type (line 3026)
            extend_107461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3026, 20), vertices_107460, 'extend')
            # Calling extend(args, kwargs) (line 3026)
            extend_call_result_107464 = invoke(stypy.reporting.localization.Localization(__file__, 3026, 20), extend_107461, *[rounded_107462], **kwargs_107463)
            
            
            # Call to extend(...): (line 3027)
            # Processing the call arguments (line 3027)
            
            # Obtaining an instance of the builtin type 'list' (line 3027)
            list_107467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3027, 33), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3027)
            # Adding element type (line 3027)
            # Getting the type of 'Path' (line 3027)
            Path_107468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3027, 34), 'Path', False)
            # Obtaining the member 'LINETO' of a type (line 3027)
            LINETO_107469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3027, 34), Path_107468, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3027, 33), list_107467, LINETO_107469)
            # Adding element type (line 3027)
            # Getting the type of 'Path' (line 3028)
            Path_107470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3028, 34), 'Path', False)
            # Obtaining the member 'CURVE3' of a type (line 3028)
            CURVE3_107471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3028, 34), Path_107470, 'CURVE3')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3027, 33), list_107467, CURVE3_107471)
            # Adding element type (line 3027)
            # Getting the type of 'Path' (line 3029)
            Path_107472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3029, 34), 'Path', False)
            # Obtaining the member 'CURVE3' of a type (line 3029)
            CURVE3_107473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3029, 34), Path_107472, 'CURVE3')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3027, 33), list_107467, CURVE3_107473)
            
            # Processing the call keyword arguments (line 3027)
            kwargs_107474 = {}
            # Getting the type of 'codes' (line 3027)
            codes_107465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3027, 20), 'codes', False)
            # Obtaining the member 'extend' of a type (line 3027)
            extend_107466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3027, 20), codes_107465, 'extend')
            # Calling extend(args, kwargs) (line 3027)
            extend_call_result_107475 = invoke(stypy.reporting.localization.Localization(__file__, 3027, 20), extend_107466, *[list_107467], **kwargs_107474)
            
            # SSA branch for the else part of an if statement (line 3019)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Subscript to a Tuple (line 3031):
            
            # Assigning a Subscript to a Name (line 3031):
            
            # Assigning a Subscript to a Name (line 3031):
            
            # Obtaining the type of the subscript
            int_107476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3031, 20), 'int')
            
            # Obtaining the type of the subscript
            int_107477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3031, 38), 'int')
            # Getting the type of 'vertices' (line 3031)
            vertices_107478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3031, 29), 'vertices')
            # Obtaining the member '__getitem__' of a type (line 3031)
            getitem___107479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3031, 29), vertices_107478, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3031)
            subscript_call_result_107480 = invoke(stypy.reporting.localization.Localization(__file__, 3031, 29), getitem___107479, int_107477)
            
            # Obtaining the member '__getitem__' of a type (line 3031)
            getitem___107481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3031, 20), subscript_call_result_107480, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3031)
            subscript_call_result_107482 = invoke(stypy.reporting.localization.Localization(__file__, 3031, 20), getitem___107481, int_107476)
            
            # Assigning a type to the variable 'tuple_var_assignment_100552' (line 3031)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3031, 20), 'tuple_var_assignment_100552', subscript_call_result_107482)
            
            # Assigning a Subscript to a Name (line 3031):
            
            # Assigning a Subscript to a Name (line 3031):
            
            # Obtaining the type of the subscript
            int_107483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3031, 20), 'int')
            
            # Obtaining the type of the subscript
            int_107484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3031, 38), 'int')
            # Getting the type of 'vertices' (line 3031)
            vertices_107485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3031, 29), 'vertices')
            # Obtaining the member '__getitem__' of a type (line 3031)
            getitem___107486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3031, 29), vertices_107485, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3031)
            subscript_call_result_107487 = invoke(stypy.reporting.localization.Localization(__file__, 3031, 29), getitem___107486, int_107484)
            
            # Obtaining the member '__getitem__' of a type (line 3031)
            getitem___107488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3031, 20), subscript_call_result_107487, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3031)
            subscript_call_result_107489 = invoke(stypy.reporting.localization.Localization(__file__, 3031, 20), getitem___107488, int_107483)
            
            # Assigning a type to the variable 'tuple_var_assignment_100553' (line 3031)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3031, 20), 'tuple_var_assignment_100553', subscript_call_result_107489)
            
            # Assigning a Name to a Name (line 3031):
            
            # Assigning a Name to a Name (line 3031):
            # Getting the type of 'tuple_var_assignment_100552' (line 3031)
            tuple_var_assignment_100552_107490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3031, 20), 'tuple_var_assignment_100552')
            # Assigning a type to the variable 'xp' (line 3031)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3031, 20), 'xp', tuple_var_assignment_100552_107490)
            
            # Assigning a Name to a Name (line 3031):
            
            # Assigning a Name to a Name (line 3031):
            # Getting the type of 'tuple_var_assignment_100553' (line 3031)
            tuple_var_assignment_100553_107491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3031, 20), 'tuple_var_assignment_100553')
            # Assigning a type to the variable 'yp' (line 3031)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3031, 24), 'yp', tuple_var_assignment_100553_107491)
            
            # Assigning a Tuple to a Tuple (line 3032):
            
            # Assigning a BinOp to a Name (line 3032):
            
            # Assigning a BinOp to a Name (line 3032):
            # Getting the type of 'x_armB' (line 3032)
            x_armB_107492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3032, 29), 'x_armB')
            # Getting the type of 'xp' (line 3032)
            xp_107493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3032, 38), 'xp')
            # Applying the binary operator '-' (line 3032)
            result_sub_107494 = python_operator(stypy.reporting.localization.Localization(__file__, 3032, 29), '-', x_armB_107492, xp_107493)
            
            # Assigning a type to the variable 'tuple_assignment_100554' (line 3032)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3032, 20), 'tuple_assignment_100554', result_sub_107494)
            
            # Assigning a BinOp to a Name (line 3032):
            
            # Assigning a BinOp to a Name (line 3032):
            # Getting the type of 'y_armB' (line 3032)
            y_armB_107495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3032, 42), 'y_armB')
            # Getting the type of 'yp' (line 3032)
            yp_107496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3032, 51), 'yp')
            # Applying the binary operator '-' (line 3032)
            result_sub_107497 = python_operator(stypy.reporting.localization.Localization(__file__, 3032, 42), '-', y_armB_107495, yp_107496)
            
            # Assigning a type to the variable 'tuple_assignment_100555' (line 3032)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3032, 20), 'tuple_assignment_100555', result_sub_107497)
            
            # Assigning a Name to a Name (line 3032):
            
            # Assigning a Name to a Name (line 3032):
            # Getting the type of 'tuple_assignment_100554' (line 3032)
            tuple_assignment_100554_107498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3032, 20), 'tuple_assignment_100554')
            # Assigning a type to the variable 'dx' (line 3032)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3032, 20), 'dx', tuple_assignment_100554_107498)
            
            # Assigning a Name to a Name (line 3032):
            
            # Assigning a Name to a Name (line 3032):
            # Getting the type of 'tuple_assignment_100555' (line 3032)
            tuple_assignment_100555_107499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3032, 20), 'tuple_assignment_100555')
            # Assigning a type to the variable 'dy' (line 3032)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3032, 24), 'dy', tuple_assignment_100555_107499)
            
            # Assigning a BinOp to a Name (line 3033):
            
            # Assigning a BinOp to a Name (line 3033):
            
            # Assigning a BinOp to a Name (line 3033):
            # Getting the type of 'dx' (line 3033)
            dx_107500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3033, 26), 'dx')
            # Getting the type of 'dx' (line 3033)
            dx_107501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3033, 31), 'dx')
            # Applying the binary operator '*' (line 3033)
            result_mul_107502 = python_operator(stypy.reporting.localization.Localization(__file__, 3033, 26), '*', dx_107500, dx_107501)
            
            # Getting the type of 'dy' (line 3033)
            dy_107503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3033, 36), 'dy')
            # Getting the type of 'dy' (line 3033)
            dy_107504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3033, 41), 'dy')
            # Applying the binary operator '*' (line 3033)
            result_mul_107505 = python_operator(stypy.reporting.localization.Localization(__file__, 3033, 36), '*', dy_107503, dy_107504)
            
            # Applying the binary operator '+' (line 3033)
            result_add_107506 = python_operator(stypy.reporting.localization.Localization(__file__, 3033, 26), '+', result_mul_107502, result_mul_107505)
            
            float_107507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3033, 48), 'float')
            # Applying the binary operator '**' (line 3033)
            result_pow_107508 = python_operator(stypy.reporting.localization.Localization(__file__, 3033, 25), '**', result_add_107506, float_107507)
            
            # Assigning a type to the variable 'dd' (line 3033)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3033, 20), 'dd', result_pow_107508)
            # SSA join for if statement (line 3019)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a BinOp to a Name (line 3035):
            
            # Assigning a BinOp to a Name (line 3035):
            
            # Assigning a BinOp to a Name (line 3035):
            # Getting the type of 'dd' (line 3035)
            dd_107509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3035, 20), 'dd')
            # Getting the type of 'self' (line 3035)
            self_107510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3035, 25), 'self')
            # Obtaining the member 'rad' of a type (line 3035)
            rad_107511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3035, 25), self_107510, 'rad')
            # Applying the binary operator '-' (line 3035)
            result_sub_107512 = python_operator(stypy.reporting.localization.Localization(__file__, 3035, 20), '-', dd_107509, rad_107511)
            
            # Assigning a type to the variable 'd' (line 3035)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3035, 16), 'd', result_sub_107512)
            
            # Assigning a List to a Name (line 3036):
            
            # Assigning a List to a Name (line 3036):
            
            # Assigning a List to a Name (line 3036):
            
            # Obtaining an instance of the builtin type 'list' (line 3036)
            list_107513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3036, 26), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3036)
            # Adding element type (line 3036)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3036)
            tuple_107514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3036, 28), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3036)
            # Adding element type (line 3036)
            # Getting the type of 'xp' (line 3036)
            xp_107515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3036, 28), 'xp')
            # Getting the type of 'd' (line 3036)
            d_107516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3036, 33), 'd')
            # Getting the type of 'dx' (line 3036)
            dx_107517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3036, 37), 'dx')
            # Applying the binary operator '*' (line 3036)
            result_mul_107518 = python_operator(stypy.reporting.localization.Localization(__file__, 3036, 33), '*', d_107516, dx_107517)
            
            # Getting the type of 'dd' (line 3036)
            dd_107519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3036, 42), 'dd')
            # Applying the binary operator 'div' (line 3036)
            result_div_107520 = python_operator(stypy.reporting.localization.Localization(__file__, 3036, 40), 'div', result_mul_107518, dd_107519)
            
            # Applying the binary operator '+' (line 3036)
            result_add_107521 = python_operator(stypy.reporting.localization.Localization(__file__, 3036, 28), '+', xp_107515, result_div_107520)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3036, 28), tuple_107514, result_add_107521)
            # Adding element type (line 3036)
            # Getting the type of 'yp' (line 3036)
            yp_107522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3036, 46), 'yp')
            # Getting the type of 'd' (line 3036)
            d_107523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3036, 51), 'd')
            # Getting the type of 'dy' (line 3036)
            dy_107524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3036, 55), 'dy')
            # Applying the binary operator '*' (line 3036)
            result_mul_107525 = python_operator(stypy.reporting.localization.Localization(__file__, 3036, 51), '*', d_107523, dy_107524)
            
            # Getting the type of 'dd' (line 3036)
            dd_107526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3036, 60), 'dd')
            # Applying the binary operator 'div' (line 3036)
            result_div_107527 = python_operator(stypy.reporting.localization.Localization(__file__, 3036, 58), 'div', result_mul_107525, dd_107526)
            
            # Applying the binary operator '+' (line 3036)
            result_add_107528 = python_operator(stypy.reporting.localization.Localization(__file__, 3036, 46), '+', yp_107522, result_div_107527)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3036, 28), tuple_107514, result_add_107528)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3036, 26), list_107513, tuple_107514)
            # Adding element type (line 3036)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3037)
            tuple_107529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3037, 28), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3037)
            # Adding element type (line 3037)
            # Getting the type of 'x_armB' (line 3037)
            x_armB_107530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3037, 28), 'x_armB')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3037, 28), tuple_107529, x_armB_107530)
            # Adding element type (line 3037)
            # Getting the type of 'y_armB' (line 3037)
            y_armB_107531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3037, 36), 'y_armB')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3037, 28), tuple_107529, y_armB_107531)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3036, 26), list_107513, tuple_107529)
            
            # Assigning a type to the variable 'rounded' (line 3036)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3036, 16), 'rounded', list_107513)
            # SSA join for if statement (line 3014)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Getting the type of 'rounded' (line 3039)
            rounded_107532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3039, 15), 'rounded')
            # Testing the type of an if condition (line 3039)
            if_condition_107533 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3039, 12), rounded_107532)
            # Assigning a type to the variable 'if_condition_107533' (line 3039)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3039, 12), 'if_condition_107533', if_condition_107533)
            # SSA begins for if statement (line 3039)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Subscript to a Tuple (line 3040):
            
            # Assigning a Subscript to a Name (line 3040):
            
            # Assigning a Subscript to a Name (line 3040):
            
            # Obtaining the type of the subscript
            int_107534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3040, 16), 'int')
            
            # Obtaining the type of the subscript
            int_107535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3040, 33), 'int')
            # Getting the type of 'rounded' (line 3040)
            rounded_107536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3040, 25), 'rounded')
            # Obtaining the member '__getitem__' of a type (line 3040)
            getitem___107537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3040, 25), rounded_107536, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3040)
            subscript_call_result_107538 = invoke(stypy.reporting.localization.Localization(__file__, 3040, 25), getitem___107537, int_107535)
            
            # Obtaining the member '__getitem__' of a type (line 3040)
            getitem___107539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3040, 16), subscript_call_result_107538, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3040)
            subscript_call_result_107540 = invoke(stypy.reporting.localization.Localization(__file__, 3040, 16), getitem___107539, int_107534)
            
            # Assigning a type to the variable 'tuple_var_assignment_100556' (line 3040)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3040, 16), 'tuple_var_assignment_100556', subscript_call_result_107540)
            
            # Assigning a Subscript to a Name (line 3040):
            
            # Assigning a Subscript to a Name (line 3040):
            
            # Obtaining the type of the subscript
            int_107541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3040, 16), 'int')
            
            # Obtaining the type of the subscript
            int_107542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3040, 33), 'int')
            # Getting the type of 'rounded' (line 3040)
            rounded_107543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3040, 25), 'rounded')
            # Obtaining the member '__getitem__' of a type (line 3040)
            getitem___107544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3040, 25), rounded_107543, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3040)
            subscript_call_result_107545 = invoke(stypy.reporting.localization.Localization(__file__, 3040, 25), getitem___107544, int_107542)
            
            # Obtaining the member '__getitem__' of a type (line 3040)
            getitem___107546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3040, 16), subscript_call_result_107545, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3040)
            subscript_call_result_107547 = invoke(stypy.reporting.localization.Localization(__file__, 3040, 16), getitem___107546, int_107541)
            
            # Assigning a type to the variable 'tuple_var_assignment_100557' (line 3040)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3040, 16), 'tuple_var_assignment_100557', subscript_call_result_107547)
            
            # Assigning a Name to a Name (line 3040):
            
            # Assigning a Name to a Name (line 3040):
            # Getting the type of 'tuple_var_assignment_100556' (line 3040)
            tuple_var_assignment_100556_107548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3040, 16), 'tuple_var_assignment_100556')
            # Assigning a type to the variable 'xp' (line 3040)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3040, 16), 'xp', tuple_var_assignment_100556_107548)
            
            # Assigning a Name to a Name (line 3040):
            
            # Assigning a Name to a Name (line 3040):
            # Getting the type of 'tuple_var_assignment_100557' (line 3040)
            tuple_var_assignment_100557_107549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3040, 16), 'tuple_var_assignment_100557')
            # Assigning a type to the variable 'yp' (line 3040)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3040, 20), 'yp', tuple_var_assignment_100557_107549)
            
            # Assigning a Tuple to a Tuple (line 3041):
            
            # Assigning a BinOp to a Name (line 3041):
            
            # Assigning a BinOp to a Name (line 3041):
            # Getting the type of 'x2' (line 3041)
            x2_107550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3041, 25), 'x2')
            # Getting the type of 'xp' (line 3041)
            xp_107551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3041, 30), 'xp')
            # Applying the binary operator '-' (line 3041)
            result_sub_107552 = python_operator(stypy.reporting.localization.Localization(__file__, 3041, 25), '-', x2_107550, xp_107551)
            
            # Assigning a type to the variable 'tuple_assignment_100558' (line 3041)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3041, 16), 'tuple_assignment_100558', result_sub_107552)
            
            # Assigning a BinOp to a Name (line 3041):
            
            # Assigning a BinOp to a Name (line 3041):
            # Getting the type of 'y2' (line 3041)
            y2_107553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3041, 34), 'y2')
            # Getting the type of 'yp' (line 3041)
            yp_107554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3041, 39), 'yp')
            # Applying the binary operator '-' (line 3041)
            result_sub_107555 = python_operator(stypy.reporting.localization.Localization(__file__, 3041, 34), '-', y2_107553, yp_107554)
            
            # Assigning a type to the variable 'tuple_assignment_100559' (line 3041)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3041, 16), 'tuple_assignment_100559', result_sub_107555)
            
            # Assigning a Name to a Name (line 3041):
            
            # Assigning a Name to a Name (line 3041):
            # Getting the type of 'tuple_assignment_100558' (line 3041)
            tuple_assignment_100558_107556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3041, 16), 'tuple_assignment_100558')
            # Assigning a type to the variable 'dx' (line 3041)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3041, 16), 'dx', tuple_assignment_100558_107556)
            
            # Assigning a Name to a Name (line 3041):
            
            # Assigning a Name to a Name (line 3041):
            # Getting the type of 'tuple_assignment_100559' (line 3041)
            tuple_assignment_100559_107557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3041, 16), 'tuple_assignment_100559')
            # Assigning a type to the variable 'dy' (line 3041)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3041, 20), 'dy', tuple_assignment_100559_107557)
            
            # Assigning a BinOp to a Name (line 3042):
            
            # Assigning a BinOp to a Name (line 3042):
            
            # Assigning a BinOp to a Name (line 3042):
            # Getting the type of 'dx' (line 3042)
            dx_107558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3042, 22), 'dx')
            # Getting the type of 'dx' (line 3042)
            dx_107559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3042, 27), 'dx')
            # Applying the binary operator '*' (line 3042)
            result_mul_107560 = python_operator(stypy.reporting.localization.Localization(__file__, 3042, 22), '*', dx_107558, dx_107559)
            
            # Getting the type of 'dy' (line 3042)
            dy_107561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3042, 32), 'dy')
            # Getting the type of 'dy' (line 3042)
            dy_107562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3042, 37), 'dy')
            # Applying the binary operator '*' (line 3042)
            result_mul_107563 = python_operator(stypy.reporting.localization.Localization(__file__, 3042, 32), '*', dy_107561, dy_107562)
            
            # Applying the binary operator '+' (line 3042)
            result_add_107564 = python_operator(stypy.reporting.localization.Localization(__file__, 3042, 22), '+', result_mul_107560, result_mul_107563)
            
            float_107565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3042, 44), 'float')
            # Applying the binary operator '**' (line 3042)
            result_pow_107566 = python_operator(stypy.reporting.localization.Localization(__file__, 3042, 21), '**', result_add_107564, float_107565)
            
            # Assigning a type to the variable 'dd' (line 3042)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3042, 16), 'dd', result_pow_107566)
            
            # Call to append(...): (line 3044)
            # Processing the call arguments (line 3044)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3044)
            tuple_107569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3044, 32), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3044)
            # Adding element type (line 3044)
            # Getting the type of 'xp' (line 3044)
            xp_107570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3044, 32), 'xp', False)
            # Getting the type of 'self' (line 3044)
            self_107571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3044, 37), 'self', False)
            # Obtaining the member 'rad' of a type (line 3044)
            rad_107572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3044, 37), self_107571, 'rad')
            # Getting the type of 'dx' (line 3044)
            dx_107573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3044, 48), 'dx', False)
            # Applying the binary operator '*' (line 3044)
            result_mul_107574 = python_operator(stypy.reporting.localization.Localization(__file__, 3044, 37), '*', rad_107572, dx_107573)
            
            # Getting the type of 'dd' (line 3044)
            dd_107575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3044, 53), 'dd', False)
            # Applying the binary operator 'div' (line 3044)
            result_div_107576 = python_operator(stypy.reporting.localization.Localization(__file__, 3044, 51), 'div', result_mul_107574, dd_107575)
            
            # Applying the binary operator '+' (line 3044)
            result_add_107577 = python_operator(stypy.reporting.localization.Localization(__file__, 3044, 32), '+', xp_107570, result_div_107576)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3044, 32), tuple_107569, result_add_107577)
            # Adding element type (line 3044)
            # Getting the type of 'yp' (line 3045)
            yp_107578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3045, 32), 'yp', False)
            # Getting the type of 'self' (line 3045)
            self_107579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3045, 37), 'self', False)
            # Obtaining the member 'rad' of a type (line 3045)
            rad_107580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3045, 37), self_107579, 'rad')
            # Getting the type of 'dy' (line 3045)
            dy_107581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3045, 48), 'dy', False)
            # Applying the binary operator '*' (line 3045)
            result_mul_107582 = python_operator(stypy.reporting.localization.Localization(__file__, 3045, 37), '*', rad_107580, dy_107581)
            
            # Getting the type of 'dd' (line 3045)
            dd_107583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3045, 53), 'dd', False)
            # Applying the binary operator 'div' (line 3045)
            result_div_107584 = python_operator(stypy.reporting.localization.Localization(__file__, 3045, 51), 'div', result_mul_107582, dd_107583)
            
            # Applying the binary operator '+' (line 3045)
            result_add_107585 = python_operator(stypy.reporting.localization.Localization(__file__, 3045, 32), '+', yp_107578, result_div_107584)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3044, 32), tuple_107569, result_add_107585)
            
            # Processing the call keyword arguments (line 3044)
            kwargs_107586 = {}
            # Getting the type of 'rounded' (line 3044)
            rounded_107567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3044, 16), 'rounded', False)
            # Obtaining the member 'append' of a type (line 3044)
            append_107568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3044, 16), rounded_107567, 'append')
            # Calling append(args, kwargs) (line 3044)
            append_call_result_107587 = invoke(stypy.reporting.localization.Localization(__file__, 3044, 16), append_107568, *[tuple_107569], **kwargs_107586)
            
            
            # Call to extend(...): (line 3046)
            # Processing the call arguments (line 3046)
            # Getting the type of 'rounded' (line 3046)
            rounded_107590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3046, 32), 'rounded', False)
            # Processing the call keyword arguments (line 3046)
            kwargs_107591 = {}
            # Getting the type of 'vertices' (line 3046)
            vertices_107588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3046, 16), 'vertices', False)
            # Obtaining the member 'extend' of a type (line 3046)
            extend_107589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3046, 16), vertices_107588, 'extend')
            # Calling extend(args, kwargs) (line 3046)
            extend_call_result_107592 = invoke(stypy.reporting.localization.Localization(__file__, 3046, 16), extend_107589, *[rounded_107590], **kwargs_107591)
            
            
            # Call to extend(...): (line 3047)
            # Processing the call arguments (line 3047)
            
            # Obtaining an instance of the builtin type 'list' (line 3047)
            list_107595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3047, 29), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3047)
            # Adding element type (line 3047)
            # Getting the type of 'Path' (line 3047)
            Path_107596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3047, 30), 'Path', False)
            # Obtaining the member 'LINETO' of a type (line 3047)
            LINETO_107597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3047, 30), Path_107596, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3047, 29), list_107595, LINETO_107597)
            # Adding element type (line 3047)
            # Getting the type of 'Path' (line 3048)
            Path_107598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3048, 30), 'Path', False)
            # Obtaining the member 'CURVE3' of a type (line 3048)
            CURVE3_107599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3048, 30), Path_107598, 'CURVE3')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3047, 29), list_107595, CURVE3_107599)
            # Adding element type (line 3047)
            # Getting the type of 'Path' (line 3049)
            Path_107600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3049, 30), 'Path', False)
            # Obtaining the member 'CURVE3' of a type (line 3049)
            CURVE3_107601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3049, 30), Path_107600, 'CURVE3')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3047, 29), list_107595, CURVE3_107601)
            
            # Processing the call keyword arguments (line 3047)
            kwargs_107602 = {}
            # Getting the type of 'codes' (line 3047)
            codes_107593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3047, 16), 'codes', False)
            # Obtaining the member 'extend' of a type (line 3047)
            extend_107594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3047, 16), codes_107593, 'extend')
            # Calling extend(args, kwargs) (line 3047)
            extend_call_result_107603 = invoke(stypy.reporting.localization.Localization(__file__, 3047, 16), extend_107594, *[list_107595], **kwargs_107602)
            
            # SSA join for if statement (line 3039)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Call to append(...): (line 3051)
            # Processing the call arguments (line 3051)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3051)
            tuple_107606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3051, 29), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3051)
            # Adding element type (line 3051)
            # Getting the type of 'x2' (line 3051)
            x2_107607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3051, 29), 'x2', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3051, 29), tuple_107606, x2_107607)
            # Adding element type (line 3051)
            # Getting the type of 'y2' (line 3051)
            y2_107608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3051, 33), 'y2', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3051, 29), tuple_107606, y2_107608)
            
            # Processing the call keyword arguments (line 3051)
            kwargs_107609 = {}
            # Getting the type of 'vertices' (line 3051)
            vertices_107604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3051, 12), 'vertices', False)
            # Obtaining the member 'append' of a type (line 3051)
            append_107605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3051, 12), vertices_107604, 'append')
            # Calling append(args, kwargs) (line 3051)
            append_call_result_107610 = invoke(stypy.reporting.localization.Localization(__file__, 3051, 12), append_107605, *[tuple_107606], **kwargs_107609)
            
            
            # Call to append(...): (line 3052)
            # Processing the call arguments (line 3052)
            # Getting the type of 'Path' (line 3052)
            Path_107613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3052, 25), 'Path', False)
            # Obtaining the member 'LINETO' of a type (line 3052)
            LINETO_107614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3052, 25), Path_107613, 'LINETO')
            # Processing the call keyword arguments (line 3052)
            kwargs_107615 = {}
            # Getting the type of 'codes' (line 3052)
            codes_107611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3052, 12), 'codes', False)
            # Obtaining the member 'append' of a type (line 3052)
            append_107612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3052, 12), codes_107611, 'append')
            # Calling append(args, kwargs) (line 3052)
            append_call_result_107616 = invoke(stypy.reporting.localization.Localization(__file__, 3052, 12), append_107612, *[LINETO_107614], **kwargs_107615)
            
            
            # Call to Path(...): (line 3054)
            # Processing the call arguments (line 3054)
            # Getting the type of 'vertices' (line 3054)
            vertices_107618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3054, 24), 'vertices', False)
            # Getting the type of 'codes' (line 3054)
            codes_107619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3054, 34), 'codes', False)
            # Processing the call keyword arguments (line 3054)
            kwargs_107620 = {}
            # Getting the type of 'Path' (line 3054)
            Path_107617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3054, 19), 'Path', False)
            # Calling Path(args, kwargs) (line 3054)
            Path_call_result_107621 = invoke(stypy.reporting.localization.Localization(__file__, 3054, 19), Path_107617, *[vertices_107618, codes_107619], **kwargs_107620)
            
            # Assigning a type to the variable 'stypy_return_type' (line 3054)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3054, 12), 'stypy_return_type', Path_call_result_107621)
            
            # ################# End of 'connect(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'connect' in the type store
            # Getting the type of 'stypy_return_type' (line 2997)
            stypy_return_type_107622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2997, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_107622)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'connect'
            return stypy_return_type_107622

    
    # Assigning a type to the variable 'Arc' (line 2963)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2963, 4), 'Arc', Arc)
    
    # Assigning a Name to a Subscript (line 3056):
    
    # Assigning a Name to a Subscript (line 3056):
    # Declaration of the 'Bar' class
    # Getting the type of '_Base' (line 3058)
    _Base_107623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3058, 14), '_Base')

    class Bar(_Base_107623, ):
        unicode_107624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3064, (-1)), 'unicode', u'\n        A line with *angle* between A and B with *armA* and\n        *armB*. One of the arms is extended so that they are connected in\n        a right angle. The length of armA is determined by (*armA*\n        + *fraction* x AB distance). Same for armB.\n        ')

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            float_107625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3066, 32), 'float')
            float_107626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3066, 41), 'float')
            float_107627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3066, 54), 'float')
            # Getting the type of 'None' (line 3066)
            None_107628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3066, 65), 'None')
            defaults = [float_107625, float_107626, float_107627, None_107628]
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 3066, 8, False)
            # Assigning a type to the variable 'self' (line 3067)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3067, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Bar.__init__', ['armA', 'armB', 'fraction', 'angle'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, ['armA', 'armB', 'fraction', 'angle'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            unicode_107629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3083, (-1)), 'unicode', u'\n            Parameters\n            ----------\n            armA : float\n                minimum length of armA\n\n            armB : float\n                minimum length of armB\n\n            fraction : float\n                a fraction of the distance between two points that\n                will be added to armA and armB.\n\n            angle : float or None\n                angle of the connecting line (if None, parallel\n                to A and B)\n            ')
            
            # Assigning a Name to a Attribute (line 3084):
            
            # Assigning a Name to a Attribute (line 3084):
            
            # Assigning a Name to a Attribute (line 3084):
            # Getting the type of 'armA' (line 3084)
            armA_107630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3084, 24), 'armA')
            # Getting the type of 'self' (line 3084)
            self_107631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3084, 12), 'self')
            # Setting the type of the member 'armA' of a type (line 3084)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3084, 12), self_107631, 'armA', armA_107630)
            
            # Assigning a Name to a Attribute (line 3085):
            
            # Assigning a Name to a Attribute (line 3085):
            
            # Assigning a Name to a Attribute (line 3085):
            # Getting the type of 'armB' (line 3085)
            armB_107632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3085, 24), 'armB')
            # Getting the type of 'self' (line 3085)
            self_107633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3085, 12), 'self')
            # Setting the type of the member 'armB' of a type (line 3085)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3085, 12), self_107633, 'armB', armB_107632)
            
            # Assigning a Name to a Attribute (line 3086):
            
            # Assigning a Name to a Attribute (line 3086):
            
            # Assigning a Name to a Attribute (line 3086):
            # Getting the type of 'fraction' (line 3086)
            fraction_107634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3086, 28), 'fraction')
            # Getting the type of 'self' (line 3086)
            self_107635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3086, 12), 'self')
            # Setting the type of the member 'fraction' of a type (line 3086)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3086, 12), self_107635, 'fraction', fraction_107634)
            
            # Assigning a Name to a Attribute (line 3087):
            
            # Assigning a Name to a Attribute (line 3087):
            
            # Assigning a Name to a Attribute (line 3087):
            # Getting the type of 'angle' (line 3087)
            angle_107636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3087, 25), 'angle')
            # Getting the type of 'self' (line 3087)
            self_107637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3087, 12), 'self')
            # Setting the type of the member 'angle' of a type (line 3087)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3087, 12), self_107637, 'angle', angle_107636)
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()


        @norecursion
        def connect(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'connect'
            module_type_store = module_type_store.open_function_context('connect', 3089, 8, False)
            # Assigning a type to the variable 'self' (line 3090)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3090, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            Bar.connect.__dict__.__setitem__('stypy_localization', localization)
            Bar.connect.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            Bar.connect.__dict__.__setitem__('stypy_type_store', module_type_store)
            Bar.connect.__dict__.__setitem__('stypy_function_name', 'Bar.connect')
            Bar.connect.__dict__.__setitem__('stypy_param_names_list', ['posA', 'posB'])
            Bar.connect.__dict__.__setitem__('stypy_varargs_param_name', None)
            Bar.connect.__dict__.__setitem__('stypy_kwargs_param_name', None)
            Bar.connect.__dict__.__setitem__('stypy_call_defaults', defaults)
            Bar.connect.__dict__.__setitem__('stypy_call_varargs', varargs)
            Bar.connect.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            Bar.connect.__dict__.__setitem__('stypy_declared_arg_number', 3)
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Bar.connect', ['posA', 'posB'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'connect', localization, ['posA', 'posB'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'connect(...)' code ##################

            
            # Assigning a Name to a Tuple (line 3090):
            
            # Assigning a Subscript to a Name (line 3090):
            
            # Assigning a Subscript to a Name (line 3090):
            
            # Obtaining the type of the subscript
            int_107638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3090, 12), 'int')
            # Getting the type of 'posA' (line 3090)
            posA_107639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3090, 21), 'posA')
            # Obtaining the member '__getitem__' of a type (line 3090)
            getitem___107640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3090, 12), posA_107639, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3090)
            subscript_call_result_107641 = invoke(stypy.reporting.localization.Localization(__file__, 3090, 12), getitem___107640, int_107638)
            
            # Assigning a type to the variable 'tuple_var_assignment_100560' (line 3090)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3090, 12), 'tuple_var_assignment_100560', subscript_call_result_107641)
            
            # Assigning a Subscript to a Name (line 3090):
            
            # Assigning a Subscript to a Name (line 3090):
            
            # Obtaining the type of the subscript
            int_107642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3090, 12), 'int')
            # Getting the type of 'posA' (line 3090)
            posA_107643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3090, 21), 'posA')
            # Obtaining the member '__getitem__' of a type (line 3090)
            getitem___107644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3090, 12), posA_107643, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3090)
            subscript_call_result_107645 = invoke(stypy.reporting.localization.Localization(__file__, 3090, 12), getitem___107644, int_107642)
            
            # Assigning a type to the variable 'tuple_var_assignment_100561' (line 3090)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3090, 12), 'tuple_var_assignment_100561', subscript_call_result_107645)
            
            # Assigning a Name to a Name (line 3090):
            
            # Assigning a Name to a Name (line 3090):
            # Getting the type of 'tuple_var_assignment_100560' (line 3090)
            tuple_var_assignment_100560_107646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3090, 12), 'tuple_var_assignment_100560')
            # Assigning a type to the variable 'x1' (line 3090)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3090, 12), 'x1', tuple_var_assignment_100560_107646)
            
            # Assigning a Name to a Name (line 3090):
            
            # Assigning a Name to a Name (line 3090):
            # Getting the type of 'tuple_var_assignment_100561' (line 3090)
            tuple_var_assignment_100561_107647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3090, 12), 'tuple_var_assignment_100561')
            # Assigning a type to the variable 'y1' (line 3090)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3090, 16), 'y1', tuple_var_assignment_100561_107647)
            
            # Multiple assignment of 2 elements.
            
            # Assigning a Subscript to a Name (line 3091):
            
            # Assigning a Subscript to a Name (line 3091):
            
            # Obtaining the type of the subscript
            int_107648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3091, 12), 'int')
            # Getting the type of 'posB' (line 3091)
            posB_107649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3091, 32), 'posB')
            # Obtaining the member '__getitem__' of a type (line 3091)
            getitem___107650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3091, 12), posB_107649, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3091)
            subscript_call_result_107651 = invoke(stypy.reporting.localization.Localization(__file__, 3091, 12), getitem___107650, int_107648)
            
            # Assigning a type to the variable 'tuple_var_assignment_100562' (line 3091)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3091, 12), 'tuple_var_assignment_100562', subscript_call_result_107651)
            
            # Assigning a Subscript to a Name (line 3091):
            
            # Assigning a Subscript to a Name (line 3091):
            
            # Obtaining the type of the subscript
            int_107652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3091, 12), 'int')
            # Getting the type of 'posB' (line 3091)
            posB_107653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3091, 32), 'posB')
            # Obtaining the member '__getitem__' of a type (line 3091)
            getitem___107654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3091, 12), posB_107653, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3091)
            subscript_call_result_107655 = invoke(stypy.reporting.localization.Localization(__file__, 3091, 12), getitem___107654, int_107652)
            
            # Assigning a type to the variable 'tuple_var_assignment_100563' (line 3091)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3091, 12), 'tuple_var_assignment_100563', subscript_call_result_107655)
            
            # Assigning a Name to a Name (line 3091):
            
            # Assigning a Name to a Name (line 3091):
            # Getting the type of 'tuple_var_assignment_100562' (line 3091)
            tuple_var_assignment_100562_107656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3091, 12), 'tuple_var_assignment_100562')
            # Assigning a type to the variable 'x2' (line 3091)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3091, 23), 'x2', tuple_var_assignment_100562_107656)
            
            # Assigning a Name to a Name (line 3091):
            
            # Assigning a Name to a Name (line 3091):
            # Getting the type of 'tuple_var_assignment_100563' (line 3091)
            tuple_var_assignment_100563_107657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3091, 12), 'tuple_var_assignment_100563')
            # Assigning a type to the variable 'y2' (line 3091)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3091, 27), 'y2', tuple_var_assignment_100563_107657)
            
            # Assigning a Name to a Name (line 3091):
            
            # Assigning a Name to a Name (line 3091):
            # Getting the type of 'x2' (line 3091)
            x2_107658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3091, 23), 'x2')
            # Assigning a type to the variable 'tuple_assignment_100564' (line 3091)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3091, 12), 'tuple_assignment_100564', x2_107658)
            
            # Assigning a Name to a Name (line 3091):
            
            # Assigning a Name to a Name (line 3091):
            # Getting the type of 'y2' (line 3091)
            y2_107659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3091, 27), 'y2')
            # Assigning a type to the variable 'tuple_assignment_100565' (line 3091)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3091, 12), 'tuple_assignment_100565', y2_107659)
            
            # Assigning a Name to a Name (line 3091):
            
            # Assigning a Name to a Name (line 3091):
            # Getting the type of 'tuple_assignment_100564' (line 3091)
            tuple_assignment_100564_107660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3091, 12), 'tuple_assignment_100564')
            # Assigning a type to the variable 'x20' (line 3091)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3091, 12), 'x20', tuple_assignment_100564_107660)
            
            # Assigning a Name to a Name (line 3091):
            
            # Assigning a Name to a Name (line 3091):
            # Getting the type of 'tuple_assignment_100565' (line 3091)
            tuple_assignment_100565_107661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3091, 12), 'tuple_assignment_100565')
            # Assigning a type to the variable 'y20' (line 3091)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3091, 17), 'y20', tuple_assignment_100565_107661)
            
            # Assigning a Call to a Name (line 3093):
            
            # Assigning a Call to a Name (line 3093):
            
            # Assigning a Call to a Name (line 3093):
            
            # Call to atan2(...): (line 3093)
            # Processing the call arguments (line 3093)
            # Getting the type of 'y2' (line 3093)
            y2_107664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3093, 32), 'y2', False)
            # Getting the type of 'y1' (line 3093)
            y1_107665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3093, 37), 'y1', False)
            # Applying the binary operator '-' (line 3093)
            result_sub_107666 = python_operator(stypy.reporting.localization.Localization(__file__, 3093, 32), '-', y2_107664, y1_107665)
            
            # Getting the type of 'x2' (line 3093)
            x2_107667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3093, 41), 'x2', False)
            # Getting the type of 'x1' (line 3093)
            x1_107668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3093, 46), 'x1', False)
            # Applying the binary operator '-' (line 3093)
            result_sub_107669 = python_operator(stypy.reporting.localization.Localization(__file__, 3093, 41), '-', x2_107667, x1_107668)
            
            # Processing the call keyword arguments (line 3093)
            kwargs_107670 = {}
            # Getting the type of 'math' (line 3093)
            math_107662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3093, 21), 'math', False)
            # Obtaining the member 'atan2' of a type (line 3093)
            atan2_107663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3093, 21), math_107662, 'atan2')
            # Calling atan2(args, kwargs) (line 3093)
            atan2_call_result_107671 = invoke(stypy.reporting.localization.Localization(__file__, 3093, 21), atan2_107663, *[result_sub_107666, result_sub_107669], **kwargs_107670)
            
            # Assigning a type to the variable 'theta1' (line 3093)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3093, 12), 'theta1', atan2_call_result_107671)
            
            # Assigning a Tuple to a Tuple (line 3094):
            
            # Assigning a BinOp to a Name (line 3094):
            
            # Assigning a BinOp to a Name (line 3094):
            # Getting the type of 'x2' (line 3094)
            x2_107672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3094, 21), 'x2')
            # Getting the type of 'x1' (line 3094)
            x1_107673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3094, 26), 'x1')
            # Applying the binary operator '-' (line 3094)
            result_sub_107674 = python_operator(stypy.reporting.localization.Localization(__file__, 3094, 21), '-', x2_107672, x1_107673)
            
            # Assigning a type to the variable 'tuple_assignment_100566' (line 3094)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3094, 12), 'tuple_assignment_100566', result_sub_107674)
            
            # Assigning a BinOp to a Name (line 3094):
            
            # Assigning a BinOp to a Name (line 3094):
            # Getting the type of 'y2' (line 3094)
            y2_107675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3094, 30), 'y2')
            # Getting the type of 'y1' (line 3094)
            y1_107676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3094, 35), 'y1')
            # Applying the binary operator '-' (line 3094)
            result_sub_107677 = python_operator(stypy.reporting.localization.Localization(__file__, 3094, 30), '-', y2_107675, y1_107676)
            
            # Assigning a type to the variable 'tuple_assignment_100567' (line 3094)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3094, 12), 'tuple_assignment_100567', result_sub_107677)
            
            # Assigning a Name to a Name (line 3094):
            
            # Assigning a Name to a Name (line 3094):
            # Getting the type of 'tuple_assignment_100566' (line 3094)
            tuple_assignment_100566_107678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3094, 12), 'tuple_assignment_100566')
            # Assigning a type to the variable 'dx' (line 3094)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3094, 12), 'dx', tuple_assignment_100566_107678)
            
            # Assigning a Name to a Name (line 3094):
            
            # Assigning a Name to a Name (line 3094):
            # Getting the type of 'tuple_assignment_100567' (line 3094)
            tuple_assignment_100567_107679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3094, 12), 'tuple_assignment_100567')
            # Assigning a type to the variable 'dy' (line 3094)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3094, 16), 'dy', tuple_assignment_100567_107679)
            
            # Assigning a BinOp to a Name (line 3095):
            
            # Assigning a BinOp to a Name (line 3095):
            
            # Assigning a BinOp to a Name (line 3095):
            # Getting the type of 'dx' (line 3095)
            dx_107680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3095, 18), 'dx')
            # Getting the type of 'dx' (line 3095)
            dx_107681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3095, 23), 'dx')
            # Applying the binary operator '*' (line 3095)
            result_mul_107682 = python_operator(stypy.reporting.localization.Localization(__file__, 3095, 18), '*', dx_107680, dx_107681)
            
            # Getting the type of 'dy' (line 3095)
            dy_107683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3095, 28), 'dy')
            # Getting the type of 'dy' (line 3095)
            dy_107684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3095, 33), 'dy')
            # Applying the binary operator '*' (line 3095)
            result_mul_107685 = python_operator(stypy.reporting.localization.Localization(__file__, 3095, 28), '*', dy_107683, dy_107684)
            
            # Applying the binary operator '+' (line 3095)
            result_add_107686 = python_operator(stypy.reporting.localization.Localization(__file__, 3095, 18), '+', result_mul_107682, result_mul_107685)
            
            float_107687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3095, 40), 'float')
            # Applying the binary operator '**' (line 3095)
            result_pow_107688 = python_operator(stypy.reporting.localization.Localization(__file__, 3095, 17), '**', result_add_107686, float_107687)
            
            # Assigning a type to the variable 'dd' (line 3095)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3095, 12), 'dd', result_pow_107688)
            
            # Assigning a Tuple to a Tuple (line 3096):
            
            # Assigning a BinOp to a Name (line 3096):
            
            # Assigning a BinOp to a Name (line 3096):
            # Getting the type of 'dx' (line 3096)
            dx_107689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3096, 23), 'dx')
            # Getting the type of 'dd' (line 3096)
            dd_107690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3096, 28), 'dd')
            # Applying the binary operator 'div' (line 3096)
            result_div_107691 = python_operator(stypy.reporting.localization.Localization(__file__, 3096, 23), 'div', dx_107689, dd_107690)
            
            # Assigning a type to the variable 'tuple_assignment_100568' (line 3096)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3096, 12), 'tuple_assignment_100568', result_div_107691)
            
            # Assigning a BinOp to a Name (line 3096):
            
            # Assigning a BinOp to a Name (line 3096):
            # Getting the type of 'dy' (line 3096)
            dy_107692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3096, 32), 'dy')
            # Getting the type of 'dd' (line 3096)
            dd_107693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3096, 37), 'dd')
            # Applying the binary operator 'div' (line 3096)
            result_div_107694 = python_operator(stypy.reporting.localization.Localization(__file__, 3096, 32), 'div', dy_107692, dd_107693)
            
            # Assigning a type to the variable 'tuple_assignment_100569' (line 3096)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3096, 12), 'tuple_assignment_100569', result_div_107694)
            
            # Assigning a Name to a Name (line 3096):
            
            # Assigning a Name to a Name (line 3096):
            # Getting the type of 'tuple_assignment_100568' (line 3096)
            tuple_assignment_100568_107695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3096, 12), 'tuple_assignment_100568')
            # Assigning a type to the variable 'ddx' (line 3096)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3096, 12), 'ddx', tuple_assignment_100568_107695)
            
            # Assigning a Name to a Name (line 3096):
            
            # Assigning a Name to a Name (line 3096):
            # Getting the type of 'tuple_assignment_100569' (line 3096)
            tuple_assignment_100569_107696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3096, 12), 'tuple_assignment_100569')
            # Assigning a type to the variable 'ddy' (line 3096)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3096, 17), 'ddy', tuple_assignment_100569_107696)
            
            # Assigning a Tuple to a Tuple (line 3098):
            
            # Assigning a Attribute to a Name (line 3098):
            
            # Assigning a Attribute to a Name (line 3098):
            # Getting the type of 'self' (line 3098)
            self_107697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3098, 25), 'self')
            # Obtaining the member 'armA' of a type (line 3098)
            armA_107698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3098, 25), self_107697, 'armA')
            # Assigning a type to the variable 'tuple_assignment_100570' (line 3098)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3098, 12), 'tuple_assignment_100570', armA_107698)
            
            # Assigning a Attribute to a Name (line 3098):
            
            # Assigning a Attribute to a Name (line 3098):
            # Getting the type of 'self' (line 3098)
            self_107699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3098, 36), 'self')
            # Obtaining the member 'armB' of a type (line 3098)
            armB_107700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3098, 36), self_107699, 'armB')
            # Assigning a type to the variable 'tuple_assignment_100571' (line 3098)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3098, 12), 'tuple_assignment_100571', armB_107700)
            
            # Assigning a Name to a Name (line 3098):
            
            # Assigning a Name to a Name (line 3098):
            # Getting the type of 'tuple_assignment_100570' (line 3098)
            tuple_assignment_100570_107701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3098, 12), 'tuple_assignment_100570')
            # Assigning a type to the variable 'armA' (line 3098)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3098, 12), 'armA', tuple_assignment_100570_107701)
            
            # Assigning a Name to a Name (line 3098):
            
            # Assigning a Name to a Name (line 3098):
            # Getting the type of 'tuple_assignment_100571' (line 3098)
            tuple_assignment_100571_107702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3098, 12), 'tuple_assignment_100571')
            # Assigning a type to the variable 'armB' (line 3098)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3098, 18), 'armB', tuple_assignment_100571_107702)
            
            
            # Getting the type of 'self' (line 3100)
            self_107703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3100, 15), 'self')
            # Obtaining the member 'angle' of a type (line 3100)
            angle_107704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3100, 15), self_107703, 'angle')
            # Getting the type of 'None' (line 3100)
            None_107705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3100, 33), 'None')
            # Applying the binary operator 'isnot' (line 3100)
            result_is_not_107706 = python_operator(stypy.reporting.localization.Localization(__file__, 3100, 15), 'isnot', angle_107704, None_107705)
            
            # Testing the type of an if condition (line 3100)
            if_condition_107707 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3100, 12), result_is_not_107706)
            # Assigning a type to the variable 'if_condition_107707' (line 3100)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3100, 12), 'if_condition_107707', if_condition_107707)
            # SSA begins for if statement (line 3100)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 3101):
            
            # Assigning a Call to a Name (line 3101):
            
            # Assigning a Call to a Name (line 3101):
            
            # Call to deg2rad(...): (line 3101)
            # Processing the call arguments (line 3101)
            # Getting the type of 'self' (line 3101)
            self_107710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3101, 36), 'self', False)
            # Obtaining the member 'angle' of a type (line 3101)
            angle_107711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3101, 36), self_107710, 'angle')
            # Processing the call keyword arguments (line 3101)
            kwargs_107712 = {}
            # Getting the type of 'np' (line 3101)
            np_107708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3101, 25), 'np', False)
            # Obtaining the member 'deg2rad' of a type (line 3101)
            deg2rad_107709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3101, 25), np_107708, 'deg2rad')
            # Calling deg2rad(args, kwargs) (line 3101)
            deg2rad_call_result_107713 = invoke(stypy.reporting.localization.Localization(__file__, 3101, 25), deg2rad_107709, *[angle_107711], **kwargs_107712)
            
            # Assigning a type to the variable 'theta0' (line 3101)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3101, 16), 'theta0', deg2rad_call_result_107713)
            
            # Assigning a BinOp to a Name (line 3102):
            
            # Assigning a BinOp to a Name (line 3102):
            
            # Assigning a BinOp to a Name (line 3102):
            # Getting the type of 'theta1' (line 3102)
            theta1_107714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3102, 25), 'theta1')
            # Getting the type of 'theta0' (line 3102)
            theta0_107715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3102, 34), 'theta0')
            # Applying the binary operator '-' (line 3102)
            result_sub_107716 = python_operator(stypy.reporting.localization.Localization(__file__, 3102, 25), '-', theta1_107714, theta0_107715)
            
            # Assigning a type to the variable 'dtheta' (line 3102)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3102, 16), 'dtheta', result_sub_107716)
            
            # Assigning a BinOp to a Name (line 3103):
            
            # Assigning a BinOp to a Name (line 3103):
            
            # Assigning a BinOp to a Name (line 3103):
            # Getting the type of 'dd' (line 3103)
            dd_107717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3103, 21), 'dd')
            
            # Call to sin(...): (line 3103)
            # Processing the call arguments (line 3103)
            # Getting the type of 'dtheta' (line 3103)
            dtheta_107720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3103, 35), 'dtheta', False)
            # Processing the call keyword arguments (line 3103)
            kwargs_107721 = {}
            # Getting the type of 'math' (line 3103)
            math_107718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3103, 26), 'math', False)
            # Obtaining the member 'sin' of a type (line 3103)
            sin_107719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3103, 26), math_107718, 'sin')
            # Calling sin(args, kwargs) (line 3103)
            sin_call_result_107722 = invoke(stypy.reporting.localization.Localization(__file__, 3103, 26), sin_107719, *[dtheta_107720], **kwargs_107721)
            
            # Applying the binary operator '*' (line 3103)
            result_mul_107723 = python_operator(stypy.reporting.localization.Localization(__file__, 3103, 21), '*', dd_107717, sin_call_result_107722)
            
            # Assigning a type to the variable 'dl' (line 3103)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3103, 16), 'dl', result_mul_107723)
            
            # Assigning a BinOp to a Name (line 3104):
            
            # Assigning a BinOp to a Name (line 3104):
            
            # Assigning a BinOp to a Name (line 3104):
            # Getting the type of 'dd' (line 3104)
            dd_107724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3104, 21), 'dd')
            
            # Call to cos(...): (line 3104)
            # Processing the call arguments (line 3104)
            # Getting the type of 'dtheta' (line 3104)
            dtheta_107727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3104, 35), 'dtheta', False)
            # Processing the call keyword arguments (line 3104)
            kwargs_107728 = {}
            # Getting the type of 'math' (line 3104)
            math_107725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3104, 26), 'math', False)
            # Obtaining the member 'cos' of a type (line 3104)
            cos_107726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3104, 26), math_107725, 'cos')
            # Calling cos(args, kwargs) (line 3104)
            cos_call_result_107729 = invoke(stypy.reporting.localization.Localization(__file__, 3104, 26), cos_107726, *[dtheta_107727], **kwargs_107728)
            
            # Applying the binary operator '*' (line 3104)
            result_mul_107730 = python_operator(stypy.reporting.localization.Localization(__file__, 3104, 21), '*', dd_107724, cos_call_result_107729)
            
            # Assigning a type to the variable 'dL' (line 3104)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3104, 16), 'dL', result_mul_107730)
            
            # Assigning a Tuple to a Tuple (line 3105):
            
            # Assigning a BinOp to a Name (line 3105):
            
            # Assigning a BinOp to a Name (line 3105):
            # Getting the type of 'x1' (line 3105)
            x1_107731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3105, 25), 'x1')
            # Getting the type of 'dL' (line 3105)
            dL_107732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3105, 30), 'dL')
            
            # Call to cos(...): (line 3105)
            # Processing the call arguments (line 3105)
            # Getting the type of 'theta0' (line 3105)
            theta0_107735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3105, 44), 'theta0', False)
            # Processing the call keyword arguments (line 3105)
            kwargs_107736 = {}
            # Getting the type of 'math' (line 3105)
            math_107733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3105, 35), 'math', False)
            # Obtaining the member 'cos' of a type (line 3105)
            cos_107734 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3105, 35), math_107733, 'cos')
            # Calling cos(args, kwargs) (line 3105)
            cos_call_result_107737 = invoke(stypy.reporting.localization.Localization(__file__, 3105, 35), cos_107734, *[theta0_107735], **kwargs_107736)
            
            # Applying the binary operator '*' (line 3105)
            result_mul_107738 = python_operator(stypy.reporting.localization.Localization(__file__, 3105, 30), '*', dL_107732, cos_call_result_107737)
            
            # Applying the binary operator '+' (line 3105)
            result_add_107739 = python_operator(stypy.reporting.localization.Localization(__file__, 3105, 25), '+', x1_107731, result_mul_107738)
            
            # Assigning a type to the variable 'tuple_assignment_100572' (line 3105)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3105, 16), 'tuple_assignment_100572', result_add_107739)
            
            # Assigning a BinOp to a Name (line 3105):
            
            # Assigning a BinOp to a Name (line 3105):
            # Getting the type of 'y1' (line 3105)
            y1_107740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3105, 53), 'y1')
            # Getting the type of 'dL' (line 3105)
            dL_107741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3105, 58), 'dL')
            
            # Call to sin(...): (line 3105)
            # Processing the call arguments (line 3105)
            # Getting the type of 'theta0' (line 3105)
            theta0_107744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3105, 72), 'theta0', False)
            # Processing the call keyword arguments (line 3105)
            kwargs_107745 = {}
            # Getting the type of 'math' (line 3105)
            math_107742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3105, 63), 'math', False)
            # Obtaining the member 'sin' of a type (line 3105)
            sin_107743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3105, 63), math_107742, 'sin')
            # Calling sin(args, kwargs) (line 3105)
            sin_call_result_107746 = invoke(stypy.reporting.localization.Localization(__file__, 3105, 63), sin_107743, *[theta0_107744], **kwargs_107745)
            
            # Applying the binary operator '*' (line 3105)
            result_mul_107747 = python_operator(stypy.reporting.localization.Localization(__file__, 3105, 58), '*', dL_107741, sin_call_result_107746)
            
            # Applying the binary operator '+' (line 3105)
            result_add_107748 = python_operator(stypy.reporting.localization.Localization(__file__, 3105, 53), '+', y1_107740, result_mul_107747)
            
            # Assigning a type to the variable 'tuple_assignment_100573' (line 3105)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3105, 16), 'tuple_assignment_100573', result_add_107748)
            
            # Assigning a Name to a Name (line 3105):
            
            # Assigning a Name to a Name (line 3105):
            # Getting the type of 'tuple_assignment_100572' (line 3105)
            tuple_assignment_100572_107749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3105, 16), 'tuple_assignment_100572')
            # Assigning a type to the variable 'x2' (line 3105)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3105, 16), 'x2', tuple_assignment_100572_107749)
            
            # Assigning a Name to a Name (line 3105):
            
            # Assigning a Name to a Name (line 3105):
            # Getting the type of 'tuple_assignment_100573' (line 3105)
            tuple_assignment_100573_107750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3105, 16), 'tuple_assignment_100573')
            # Assigning a type to the variable 'y2' (line 3105)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3105, 20), 'y2', tuple_assignment_100573_107750)
            
            # Assigning a BinOp to a Name (line 3106):
            
            # Assigning a BinOp to a Name (line 3106):
            
            # Assigning a BinOp to a Name (line 3106):
            # Getting the type of 'armB' (line 3106)
            armB_107751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3106, 23), 'armB')
            # Getting the type of 'dl' (line 3106)
            dl_107752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3106, 30), 'dl')
            # Applying the binary operator '-' (line 3106)
            result_sub_107753 = python_operator(stypy.reporting.localization.Localization(__file__, 3106, 23), '-', armB_107751, dl_107752)
            
            # Assigning a type to the variable 'armB' (line 3106)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3106, 16), 'armB', result_sub_107753)
            
            # Assigning a Tuple to a Tuple (line 3109):
            
            # Assigning a BinOp to a Name (line 3109):
            
            # Assigning a BinOp to a Name (line 3109):
            # Getting the type of 'x2' (line 3109)
            x2_107754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3109, 25), 'x2')
            # Getting the type of 'x1' (line 3109)
            x1_107755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3109, 30), 'x1')
            # Applying the binary operator '-' (line 3109)
            result_sub_107756 = python_operator(stypy.reporting.localization.Localization(__file__, 3109, 25), '-', x2_107754, x1_107755)
            
            # Assigning a type to the variable 'tuple_assignment_100574' (line 3109)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3109, 16), 'tuple_assignment_100574', result_sub_107756)
            
            # Assigning a BinOp to a Name (line 3109):
            
            # Assigning a BinOp to a Name (line 3109):
            # Getting the type of 'y2' (line 3109)
            y2_107757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3109, 34), 'y2')
            # Getting the type of 'y1' (line 3109)
            y1_107758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3109, 39), 'y1')
            # Applying the binary operator '-' (line 3109)
            result_sub_107759 = python_operator(stypy.reporting.localization.Localization(__file__, 3109, 34), '-', y2_107757, y1_107758)
            
            # Assigning a type to the variable 'tuple_assignment_100575' (line 3109)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3109, 16), 'tuple_assignment_100575', result_sub_107759)
            
            # Assigning a Name to a Name (line 3109):
            
            # Assigning a Name to a Name (line 3109):
            # Getting the type of 'tuple_assignment_100574' (line 3109)
            tuple_assignment_100574_107760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3109, 16), 'tuple_assignment_100574')
            # Assigning a type to the variable 'dx' (line 3109)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3109, 16), 'dx', tuple_assignment_100574_107760)
            
            # Assigning a Name to a Name (line 3109):
            
            # Assigning a Name to a Name (line 3109):
            # Getting the type of 'tuple_assignment_100575' (line 3109)
            tuple_assignment_100575_107761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3109, 16), 'tuple_assignment_100575')
            # Assigning a type to the variable 'dy' (line 3109)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3109, 20), 'dy', tuple_assignment_100575_107761)
            
            # Assigning a BinOp to a Name (line 3110):
            
            # Assigning a BinOp to a Name (line 3110):
            
            # Assigning a BinOp to a Name (line 3110):
            # Getting the type of 'dx' (line 3110)
            dx_107762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3110, 23), 'dx')
            # Getting the type of 'dx' (line 3110)
            dx_107763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3110, 28), 'dx')
            # Applying the binary operator '*' (line 3110)
            result_mul_107764 = python_operator(stypy.reporting.localization.Localization(__file__, 3110, 23), '*', dx_107762, dx_107763)
            
            # Getting the type of 'dy' (line 3110)
            dy_107765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3110, 33), 'dy')
            # Getting the type of 'dy' (line 3110)
            dy_107766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3110, 38), 'dy')
            # Applying the binary operator '*' (line 3110)
            result_mul_107767 = python_operator(stypy.reporting.localization.Localization(__file__, 3110, 33), '*', dy_107765, dy_107766)
            
            # Applying the binary operator '+' (line 3110)
            result_add_107768 = python_operator(stypy.reporting.localization.Localization(__file__, 3110, 23), '+', result_mul_107764, result_mul_107767)
            
            float_107769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3110, 45), 'float')
            # Applying the binary operator '**' (line 3110)
            result_pow_107770 = python_operator(stypy.reporting.localization.Localization(__file__, 3110, 22), '**', result_add_107768, float_107769)
            
            # Assigning a type to the variable 'dd2' (line 3110)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3110, 16), 'dd2', result_pow_107770)
            
            # Assigning a Tuple to a Tuple (line 3111):
            
            # Assigning a BinOp to a Name (line 3111):
            
            # Assigning a BinOp to a Name (line 3111):
            # Getting the type of 'dx' (line 3111)
            dx_107771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3111, 27), 'dx')
            # Getting the type of 'dd2' (line 3111)
            dd2_107772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3111, 32), 'dd2')
            # Applying the binary operator 'div' (line 3111)
            result_div_107773 = python_operator(stypy.reporting.localization.Localization(__file__, 3111, 27), 'div', dx_107771, dd2_107772)
            
            # Assigning a type to the variable 'tuple_assignment_100576' (line 3111)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3111, 16), 'tuple_assignment_100576', result_div_107773)
            
            # Assigning a BinOp to a Name (line 3111):
            
            # Assigning a BinOp to a Name (line 3111):
            # Getting the type of 'dy' (line 3111)
            dy_107774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3111, 37), 'dy')
            # Getting the type of 'dd2' (line 3111)
            dd2_107775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3111, 42), 'dd2')
            # Applying the binary operator 'div' (line 3111)
            result_div_107776 = python_operator(stypy.reporting.localization.Localization(__file__, 3111, 37), 'div', dy_107774, dd2_107775)
            
            # Assigning a type to the variable 'tuple_assignment_100577' (line 3111)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3111, 16), 'tuple_assignment_100577', result_div_107776)
            
            # Assigning a Name to a Name (line 3111):
            
            # Assigning a Name to a Name (line 3111):
            # Getting the type of 'tuple_assignment_100576' (line 3111)
            tuple_assignment_100576_107777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3111, 16), 'tuple_assignment_100576')
            # Assigning a type to the variable 'ddx' (line 3111)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3111, 16), 'ddx', tuple_assignment_100576_107777)
            
            # Assigning a Name to a Name (line 3111):
            
            # Assigning a Name to a Name (line 3111):
            # Getting the type of 'tuple_assignment_100577' (line 3111)
            tuple_assignment_100577_107778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3111, 16), 'tuple_assignment_100577')
            # Assigning a type to the variable 'ddy' (line 3111)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3111, 21), 'ddy', tuple_assignment_100577_107778)
            # SSA branch for the else part of an if statement (line 3100)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Num to a Name (line 3114):
            
            # Assigning a Num to a Name (line 3114):
            
            # Assigning a Num to a Name (line 3114):
            float_107779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3114, 21), 'float')
            # Assigning a type to the variable 'dl' (line 3114)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3114, 16), 'dl', float_107779)
            # SSA join for if statement (line 3100)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Name (line 3116):
            
            # Assigning a Call to a Name (line 3116):
            
            # Assigning a Call to a Name (line 3116):
            
            # Call to max(...): (line 3116)
            # Processing the call arguments (line 3116)
            # Getting the type of 'armA' (line 3116)
            armA_107781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3116, 22), 'armA', False)
            # Getting the type of 'armB' (line 3116)
            armB_107782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3116, 28), 'armB', False)
            # Processing the call keyword arguments (line 3116)
            kwargs_107783 = {}
            # Getting the type of 'max' (line 3116)
            max_107780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3116, 18), 'max', False)
            # Calling max(args, kwargs) (line 3116)
            max_call_result_107784 = invoke(stypy.reporting.localization.Localization(__file__, 3116, 18), max_107780, *[armA_107781, armB_107782], **kwargs_107783)
            
            # Assigning a type to the variable 'arm' (line 3116)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3116, 12), 'arm', max_call_result_107784)
            
            # Assigning a BinOp to a Name (line 3117):
            
            # Assigning a BinOp to a Name (line 3117):
            
            # Assigning a BinOp to a Name (line 3117):
            # Getting the type of 'self' (line 3117)
            self_107785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3117, 16), 'self')
            # Obtaining the member 'fraction' of a type (line 3117)
            fraction_107786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3117, 16), self_107785, 'fraction')
            # Getting the type of 'dd' (line 3117)
            dd_107787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3117, 32), 'dd')
            # Applying the binary operator '*' (line 3117)
            result_mul_107788 = python_operator(stypy.reporting.localization.Localization(__file__, 3117, 16), '*', fraction_107786, dd_107787)
            
            # Getting the type of 'arm' (line 3117)
            arm_107789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3117, 37), 'arm')
            # Applying the binary operator '+' (line 3117)
            result_add_107790 = python_operator(stypy.reporting.localization.Localization(__file__, 3117, 16), '+', result_mul_107788, arm_107789)
            
            # Assigning a type to the variable 'f' (line 3117)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3117, 12), 'f', result_add_107790)
            
            # Assigning a Tuple to a Tuple (line 3119):
            
            # Assigning a BinOp to a Name (line 3119):
            
            # Assigning a BinOp to a Name (line 3119):
            # Getting the type of 'x1' (line 3119)
            x1_107791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3119, 23), 'x1')
            # Getting the type of 'f' (line 3119)
            f_107792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3119, 28), 'f')
            # Getting the type of 'ddy' (line 3119)
            ddy_107793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3119, 32), 'ddy')
            # Applying the binary operator '*' (line 3119)
            result_mul_107794 = python_operator(stypy.reporting.localization.Localization(__file__, 3119, 28), '*', f_107792, ddy_107793)
            
            # Applying the binary operator '+' (line 3119)
            result_add_107795 = python_operator(stypy.reporting.localization.Localization(__file__, 3119, 23), '+', x1_107791, result_mul_107794)
            
            # Assigning a type to the variable 'tuple_assignment_100578' (line 3119)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3119, 12), 'tuple_assignment_100578', result_add_107795)
            
            # Assigning a BinOp to a Name (line 3119):
            
            # Assigning a BinOp to a Name (line 3119):
            # Getting the type of 'y1' (line 3119)
            y1_107796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3119, 37), 'y1')
            # Getting the type of 'f' (line 3119)
            f_107797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3119, 42), 'f')
            # Getting the type of 'ddx' (line 3119)
            ddx_107798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3119, 46), 'ddx')
            # Applying the binary operator '*' (line 3119)
            result_mul_107799 = python_operator(stypy.reporting.localization.Localization(__file__, 3119, 42), '*', f_107797, ddx_107798)
            
            # Applying the binary operator '-' (line 3119)
            result_sub_107800 = python_operator(stypy.reporting.localization.Localization(__file__, 3119, 37), '-', y1_107796, result_mul_107799)
            
            # Assigning a type to the variable 'tuple_assignment_100579' (line 3119)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3119, 12), 'tuple_assignment_100579', result_sub_107800)
            
            # Assigning a Name to a Name (line 3119):
            
            # Assigning a Name to a Name (line 3119):
            # Getting the type of 'tuple_assignment_100578' (line 3119)
            tuple_assignment_100578_107801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3119, 12), 'tuple_assignment_100578')
            # Assigning a type to the variable 'cx1' (line 3119)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3119, 12), 'cx1', tuple_assignment_100578_107801)
            
            # Assigning a Name to a Name (line 3119):
            
            # Assigning a Name to a Name (line 3119):
            # Getting the type of 'tuple_assignment_100579' (line 3119)
            tuple_assignment_100579_107802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3119, 12), 'tuple_assignment_100579')
            # Assigning a type to the variable 'cy1' (line 3119)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3119, 17), 'cy1', tuple_assignment_100579_107802)
            
            # Assigning a Tuple to a Tuple (line 3120):
            
            # Assigning a BinOp to a Name (line 3120):
            
            # Assigning a BinOp to a Name (line 3120):
            # Getting the type of 'x2' (line 3120)
            x2_107803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3120, 23), 'x2')
            # Getting the type of 'f' (line 3120)
            f_107804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3120, 28), 'f')
            # Getting the type of 'ddy' (line 3120)
            ddy_107805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3120, 32), 'ddy')
            # Applying the binary operator '*' (line 3120)
            result_mul_107806 = python_operator(stypy.reporting.localization.Localization(__file__, 3120, 28), '*', f_107804, ddy_107805)
            
            # Applying the binary operator '+' (line 3120)
            result_add_107807 = python_operator(stypy.reporting.localization.Localization(__file__, 3120, 23), '+', x2_107803, result_mul_107806)
            
            # Assigning a type to the variable 'tuple_assignment_100580' (line 3120)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3120, 12), 'tuple_assignment_100580', result_add_107807)
            
            # Assigning a BinOp to a Name (line 3120):
            
            # Assigning a BinOp to a Name (line 3120):
            # Getting the type of 'y2' (line 3120)
            y2_107808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3120, 37), 'y2')
            # Getting the type of 'f' (line 3120)
            f_107809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3120, 42), 'f')
            # Getting the type of 'ddx' (line 3120)
            ddx_107810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3120, 46), 'ddx')
            # Applying the binary operator '*' (line 3120)
            result_mul_107811 = python_operator(stypy.reporting.localization.Localization(__file__, 3120, 42), '*', f_107809, ddx_107810)
            
            # Applying the binary operator '-' (line 3120)
            result_sub_107812 = python_operator(stypy.reporting.localization.Localization(__file__, 3120, 37), '-', y2_107808, result_mul_107811)
            
            # Assigning a type to the variable 'tuple_assignment_100581' (line 3120)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3120, 12), 'tuple_assignment_100581', result_sub_107812)
            
            # Assigning a Name to a Name (line 3120):
            
            # Assigning a Name to a Name (line 3120):
            # Getting the type of 'tuple_assignment_100580' (line 3120)
            tuple_assignment_100580_107813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3120, 12), 'tuple_assignment_100580')
            # Assigning a type to the variable 'cx2' (line 3120)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3120, 12), 'cx2', tuple_assignment_100580_107813)
            
            # Assigning a Name to a Name (line 3120):
            
            # Assigning a Name to a Name (line 3120):
            # Getting the type of 'tuple_assignment_100581' (line 3120)
            tuple_assignment_100581_107814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3120, 12), 'tuple_assignment_100581')
            # Assigning a type to the variable 'cy2' (line 3120)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3120, 17), 'cy2', tuple_assignment_100581_107814)
            
            # Assigning a List to a Name (line 3122):
            
            # Assigning a List to a Name (line 3122):
            
            # Assigning a List to a Name (line 3122):
            
            # Obtaining an instance of the builtin type 'list' (line 3122)
            list_107815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3122, 23), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3122)
            # Adding element type (line 3122)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3122)
            tuple_107816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3122, 25), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3122)
            # Adding element type (line 3122)
            # Getting the type of 'x1' (line 3122)
            x1_107817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3122, 25), 'x1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3122, 25), tuple_107816, x1_107817)
            # Adding element type (line 3122)
            # Getting the type of 'y1' (line 3122)
            y1_107818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3122, 29), 'y1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3122, 25), tuple_107816, y1_107818)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3122, 23), list_107815, tuple_107816)
            # Adding element type (line 3122)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3123)
            tuple_107819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3123, 25), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3123)
            # Adding element type (line 3123)
            # Getting the type of 'cx1' (line 3123)
            cx1_107820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3123, 25), 'cx1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3123, 25), tuple_107819, cx1_107820)
            # Adding element type (line 3123)
            # Getting the type of 'cy1' (line 3123)
            cy1_107821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3123, 30), 'cy1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3123, 25), tuple_107819, cy1_107821)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3122, 23), list_107815, tuple_107819)
            # Adding element type (line 3122)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3124)
            tuple_107822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3124, 25), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3124)
            # Adding element type (line 3124)
            # Getting the type of 'cx2' (line 3124)
            cx2_107823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3124, 25), 'cx2')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3124, 25), tuple_107822, cx2_107823)
            # Adding element type (line 3124)
            # Getting the type of 'cy2' (line 3124)
            cy2_107824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3124, 30), 'cy2')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3124, 25), tuple_107822, cy2_107824)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3122, 23), list_107815, tuple_107822)
            # Adding element type (line 3122)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3125)
            tuple_107825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3125, 25), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3125)
            # Adding element type (line 3125)
            # Getting the type of 'x20' (line 3125)
            x20_107826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3125, 25), 'x20')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3125, 25), tuple_107825, x20_107826)
            # Adding element type (line 3125)
            # Getting the type of 'y20' (line 3125)
            y20_107827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3125, 30), 'y20')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3125, 25), tuple_107825, y20_107827)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3122, 23), list_107815, tuple_107825)
            
            # Assigning a type to the variable 'vertices' (line 3122)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3122, 12), 'vertices', list_107815)
            
            # Assigning a List to a Name (line 3126):
            
            # Assigning a List to a Name (line 3126):
            
            # Assigning a List to a Name (line 3126):
            
            # Obtaining an instance of the builtin type 'list' (line 3126)
            list_107828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3126, 20), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3126)
            # Adding element type (line 3126)
            # Getting the type of 'Path' (line 3126)
            Path_107829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3126, 21), 'Path')
            # Obtaining the member 'MOVETO' of a type (line 3126)
            MOVETO_107830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3126, 21), Path_107829, 'MOVETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3126, 20), list_107828, MOVETO_107830)
            # Adding element type (line 3126)
            # Getting the type of 'Path' (line 3127)
            Path_107831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3127, 21), 'Path')
            # Obtaining the member 'LINETO' of a type (line 3127)
            LINETO_107832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3127, 21), Path_107831, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3126, 20), list_107828, LINETO_107832)
            # Adding element type (line 3126)
            # Getting the type of 'Path' (line 3128)
            Path_107833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3128, 21), 'Path')
            # Obtaining the member 'LINETO' of a type (line 3128)
            LINETO_107834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3128, 21), Path_107833, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3126, 20), list_107828, LINETO_107834)
            # Adding element type (line 3126)
            # Getting the type of 'Path' (line 3129)
            Path_107835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 21), 'Path')
            # Obtaining the member 'LINETO' of a type (line 3129)
            LINETO_107836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3129, 21), Path_107835, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3126, 20), list_107828, LINETO_107836)
            
            # Assigning a type to the variable 'codes' (line 3126)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3126, 12), 'codes', list_107828)
            
            # Call to Path(...): (line 3131)
            # Processing the call arguments (line 3131)
            # Getting the type of 'vertices' (line 3131)
            vertices_107838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3131, 24), 'vertices', False)
            # Getting the type of 'codes' (line 3131)
            codes_107839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3131, 34), 'codes', False)
            # Processing the call keyword arguments (line 3131)
            kwargs_107840 = {}
            # Getting the type of 'Path' (line 3131)
            Path_107837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3131, 19), 'Path', False)
            # Calling Path(args, kwargs) (line 3131)
            Path_call_result_107841 = invoke(stypy.reporting.localization.Localization(__file__, 3131, 19), Path_107837, *[vertices_107838, codes_107839], **kwargs_107840)
            
            # Assigning a type to the variable 'stypy_return_type' (line 3131)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3131, 12), 'stypy_return_type', Path_call_result_107841)
            
            # ################# End of 'connect(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'connect' in the type store
            # Getting the type of 'stypy_return_type' (line 3089)
            stypy_return_type_107842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3089, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_107842)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'connect'
            return stypy_return_type_107842

    
    # Assigning a type to the variable 'Bar' (line 3058)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3058, 4), 'Bar', Bar)
    
    # Assigning a Name to a Subscript (line 3133):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2681, 0, False)
        # Assigning a type to the variable 'self' (line 2682)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2682, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ConnectionStyle.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'ConnectionStyle' (line 2681)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2681, 0), 'ConnectionStyle', ConnectionStyle)

# Assigning a Dict to a Name (line 2721):

# Obtaining an instance of the builtin type 'dict' (line 2721)
dict_107843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2721, 18), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 2721)

# Getting the type of 'ConnectionStyle'
ConnectionStyle_107844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ConnectionStyle')
# Setting the type of the member '_style_list' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ConnectionStyle_107844, '_style_list', dict_107843)

# Assigning a Name to a Subscript (line 2859):
# Getting the type of 'Arc3' (line 2859)
Arc3_107845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2859, 26), 'Arc3')
# Getting the type of 'ConnectionStyle'
ConnectionStyle_107846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ConnectionStyle')
# Setting the type of the member '_style_list' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ConnectionStyle_107846, '_style_list', Arc3_107845)

# Assigning a Name to a Subscript (line 2898):
# Getting the type of 'Angle3' (line 2898)
Angle3_107847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2898, 28), 'Angle3')
# Getting the type of 'ConnectionStyle'
ConnectionStyle_107848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ConnectionStyle')
# Setting the type of the member '_style_list' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ConnectionStyle_107848, '_style_list', Angle3_107847)

# Assigning a Name to a Subscript (line 2961):
# Getting the type of 'Angle' (line 2961)
Angle_107849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2961, 27), 'Angle')
# Getting the type of 'ConnectionStyle'
ConnectionStyle_107850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ConnectionStyle')
# Setting the type of the member '_style_list' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ConnectionStyle_107850, '_style_list', Angle_107849)

# Assigning a Name to a Subscript (line 3056):
# Getting the type of 'Arc' (line 3056)
Arc_107851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3056, 25), 'Arc')
# Getting the type of 'ConnectionStyle'
ConnectionStyle_107852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ConnectionStyle')
# Setting the type of the member '_style_list' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ConnectionStyle_107852, '_style_list', Arc_107851)

# Assigning a Name to a Subscript (line 3133):
# Getting the type of 'Bar' (line 3133)
Bar_107853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3133, 25), 'Bar')
# Getting the type of 'ConnectionStyle'
ConnectionStyle_107854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ConnectionStyle')
# Setting the type of the member '_style_list' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ConnectionStyle_107854, '_style_list', Bar_107853)

# Assigning a Name to a Subscript (line 3133):

# Getting the type of '__doc__' (line 3135)
doc___107855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3135, 7), '__doc__')
# Testing the type of an if condition (line 3135)
if_condition_107856 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3135, 4), doc___107855)
# Assigning a type to the variable 'if_condition_107856' (line 3135)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3135, 4), 'if_condition_107856', if_condition_107856)
# SSA begins for if statement (line 3135)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Assigning a BinOp to a Name (line 3136):

# Assigning a BinOp to a Name (line 3136):

# Assigning a BinOp to a Name (line 3136):

# Call to dedent(...): (line 3136)
# Processing the call arguments (line 3136)
# Getting the type of '__doc__' (line 3136)
doc___107859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3136, 31), '__doc__', False)
# Processing the call keyword arguments (line 3136)
kwargs_107860 = {}
# Getting the type of 'cbook' (line 3136)
cbook_107857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3136, 18), 'cbook', False)
# Obtaining the member 'dedent' of a type (line 3136)
dedent_107858 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3136, 18), cbook_107857, 'dedent')
# Calling dedent(args, kwargs) (line 3136)
dedent_call_result_107861 = invoke(stypy.reporting.localization.Localization(__file__, 3136, 18), dedent_107858, *[doc___107859], **kwargs_107860)


# Obtaining an instance of the builtin type 'dict' (line 3137)
dict_107862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3137, 15), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 3137)
# Adding element type (key, value) (line 3137)
unicode_107863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3137, 16), 'unicode', u'AvailableConnectorstyles')

# Call to _pprint_styles(...): (line 3137)
# Processing the call arguments (line 3137)
# Getting the type of 'ConnectionStyle'
ConnectionStyle_107865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ConnectionStyle', False)
# Obtaining the member '_style_list' of a type
_style_list_107866 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ConnectionStyle_107865, '_style_list')
# Processing the call keyword arguments (line 3137)
kwargs_107867 = {}
# Getting the type of '_pprint_styles' (line 3137)
_pprint_styles_107864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3137, 44), '_pprint_styles', False)
# Calling _pprint_styles(args, kwargs) (line 3137)
_pprint_styles_call_result_107868 = invoke(stypy.reporting.localization.Localization(__file__, 3137, 44), _pprint_styles_107864, *[_style_list_107866], **kwargs_107867)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3137, 15), dict_107862, (unicode_107863, _pprint_styles_call_result_107868))

# Applying the binary operator '%' (line 3136)
result_mod_107869 = python_operator(stypy.reporting.localization.Localization(__file__, 3136, 18), '%', dedent_call_result_107861, dict_107862)

# Assigning a type to the variable '__doc__' (line 3136)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3136, 8), '__doc__', result_mod_107869)
# SSA join for if statement (line 3135)
module_type_store = module_type_store.join_ssa_context()


@norecursion
def _point_along_a_line(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_point_along_a_line'
    module_type_store = module_type_store.open_function_context('_point_along_a_line', 3140, 0, False)
    
    # Passed parameters checking function
    _point_along_a_line.stypy_localization = localization
    _point_along_a_line.stypy_type_of_self = None
    _point_along_a_line.stypy_type_store = module_type_store
    _point_along_a_line.stypy_function_name = '_point_along_a_line'
    _point_along_a_line.stypy_param_names_list = ['x0', 'y0', 'x1', 'y1', 'd']
    _point_along_a_line.stypy_varargs_param_name = None
    _point_along_a_line.stypy_kwargs_param_name = None
    _point_along_a_line.stypy_call_defaults = defaults
    _point_along_a_line.stypy_call_varargs = varargs
    _point_along_a_line.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_point_along_a_line', ['x0', 'y0', 'x1', 'y1', 'd'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_point_along_a_line', localization, ['x0', 'y0', 'x1', 'y1', 'd'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_point_along_a_line(...)' code ##################

    unicode_107870 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3144, (-1)), 'unicode', u'\n    find a point along a line connecting (x0, y0) -- (x1, y1) whose\n    distance from (x0, y0) is d.\n    ')
    
    # Assigning a Tuple to a Tuple (line 3145):
    
    # Assigning a BinOp to a Name (line 3145):
    
    # Assigning a BinOp to a Name (line 3145):
    # Getting the type of 'x0' (line 3145)
    x0_107871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3145, 13), 'x0')
    # Getting the type of 'x1' (line 3145)
    x1_107872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3145, 18), 'x1')
    # Applying the binary operator '-' (line 3145)
    result_sub_107873 = python_operator(stypy.reporting.localization.Localization(__file__, 3145, 13), '-', x0_107871, x1_107872)
    
    # Assigning a type to the variable 'tuple_assignment_100582' (line 3145)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3145, 4), 'tuple_assignment_100582', result_sub_107873)
    
    # Assigning a BinOp to a Name (line 3145):
    
    # Assigning a BinOp to a Name (line 3145):
    # Getting the type of 'y0' (line 3145)
    y0_107874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3145, 22), 'y0')
    # Getting the type of 'y1' (line 3145)
    y1_107875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3145, 27), 'y1')
    # Applying the binary operator '-' (line 3145)
    result_sub_107876 = python_operator(stypy.reporting.localization.Localization(__file__, 3145, 22), '-', y0_107874, y1_107875)
    
    # Assigning a type to the variable 'tuple_assignment_100583' (line 3145)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3145, 4), 'tuple_assignment_100583', result_sub_107876)
    
    # Assigning a Name to a Name (line 3145):
    
    # Assigning a Name to a Name (line 3145):
    # Getting the type of 'tuple_assignment_100582' (line 3145)
    tuple_assignment_100582_107877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3145, 4), 'tuple_assignment_100582')
    # Assigning a type to the variable 'dx' (line 3145)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3145, 4), 'dx', tuple_assignment_100582_107877)
    
    # Assigning a Name to a Name (line 3145):
    
    # Assigning a Name to a Name (line 3145):
    # Getting the type of 'tuple_assignment_100583' (line 3145)
    tuple_assignment_100583_107878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3145, 4), 'tuple_assignment_100583')
    # Assigning a type to the variable 'dy' (line 3145)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3145, 8), 'dy', tuple_assignment_100583_107878)
    
    # Assigning a BinOp to a Name (line 3146):
    
    # Assigning a BinOp to a Name (line 3146):
    
    # Assigning a BinOp to a Name (line 3146):
    # Getting the type of 'd' (line 3146)
    d_107879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3146, 9), 'd')
    # Getting the type of 'dx' (line 3146)
    dx_107880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3146, 14), 'dx')
    # Getting the type of 'dx' (line 3146)
    dx_107881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3146, 19), 'dx')
    # Applying the binary operator '*' (line 3146)
    result_mul_107882 = python_operator(stypy.reporting.localization.Localization(__file__, 3146, 14), '*', dx_107880, dx_107881)
    
    # Getting the type of 'dy' (line 3146)
    dy_107883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3146, 24), 'dy')
    # Getting the type of 'dy' (line 3146)
    dy_107884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3146, 29), 'dy')
    # Applying the binary operator '*' (line 3146)
    result_mul_107885 = python_operator(stypy.reporting.localization.Localization(__file__, 3146, 24), '*', dy_107883, dy_107884)
    
    # Applying the binary operator '+' (line 3146)
    result_add_107886 = python_operator(stypy.reporting.localization.Localization(__file__, 3146, 14), '+', result_mul_107882, result_mul_107885)
    
    float_107887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3146, 36), 'float')
    # Applying the binary operator '**' (line 3146)
    result_pow_107888 = python_operator(stypy.reporting.localization.Localization(__file__, 3146, 13), '**', result_add_107886, float_107887)
    
    # Applying the binary operator 'div' (line 3146)
    result_div_107889 = python_operator(stypy.reporting.localization.Localization(__file__, 3146, 9), 'div', d_107879, result_pow_107888)
    
    # Assigning a type to the variable 'ff' (line 3146)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3146, 4), 'ff', result_div_107889)
    
    # Assigning a Tuple to a Tuple (line 3147):
    
    # Assigning a BinOp to a Name (line 3147):
    
    # Assigning a BinOp to a Name (line 3147):
    # Getting the type of 'x0' (line 3147)
    x0_107890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3147, 13), 'x0')
    # Getting the type of 'ff' (line 3147)
    ff_107891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3147, 18), 'ff')
    # Getting the type of 'dx' (line 3147)
    dx_107892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3147, 23), 'dx')
    # Applying the binary operator '*' (line 3147)
    result_mul_107893 = python_operator(stypy.reporting.localization.Localization(__file__, 3147, 18), '*', ff_107891, dx_107892)
    
    # Applying the binary operator '-' (line 3147)
    result_sub_107894 = python_operator(stypy.reporting.localization.Localization(__file__, 3147, 13), '-', x0_107890, result_mul_107893)
    
    # Assigning a type to the variable 'tuple_assignment_100584' (line 3147)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3147, 4), 'tuple_assignment_100584', result_sub_107894)
    
    # Assigning a BinOp to a Name (line 3147):
    
    # Assigning a BinOp to a Name (line 3147):
    # Getting the type of 'y0' (line 3147)
    y0_107895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3147, 27), 'y0')
    # Getting the type of 'ff' (line 3147)
    ff_107896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3147, 32), 'ff')
    # Getting the type of 'dy' (line 3147)
    dy_107897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3147, 37), 'dy')
    # Applying the binary operator '*' (line 3147)
    result_mul_107898 = python_operator(stypy.reporting.localization.Localization(__file__, 3147, 32), '*', ff_107896, dy_107897)
    
    # Applying the binary operator '-' (line 3147)
    result_sub_107899 = python_operator(stypy.reporting.localization.Localization(__file__, 3147, 27), '-', y0_107895, result_mul_107898)
    
    # Assigning a type to the variable 'tuple_assignment_100585' (line 3147)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3147, 4), 'tuple_assignment_100585', result_sub_107899)
    
    # Assigning a Name to a Name (line 3147):
    
    # Assigning a Name to a Name (line 3147):
    # Getting the type of 'tuple_assignment_100584' (line 3147)
    tuple_assignment_100584_107900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3147, 4), 'tuple_assignment_100584')
    # Assigning a type to the variable 'x2' (line 3147)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3147, 4), 'x2', tuple_assignment_100584_107900)
    
    # Assigning a Name to a Name (line 3147):
    
    # Assigning a Name to a Name (line 3147):
    # Getting the type of 'tuple_assignment_100585' (line 3147)
    tuple_assignment_100585_107901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3147, 4), 'tuple_assignment_100585')
    # Assigning a type to the variable 'y2' (line 3147)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3147, 8), 'y2', tuple_assignment_100585_107901)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3149)
    tuple_107902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3149, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3149)
    # Adding element type (line 3149)
    # Getting the type of 'x2' (line 3149)
    x2_107903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3149, 11), 'x2')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3149, 11), tuple_107902, x2_107903)
    # Adding element type (line 3149)
    # Getting the type of 'y2' (line 3149)
    y2_107904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3149, 15), 'y2')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3149, 11), tuple_107902, y2_107904)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3149)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3149, 4), 'stypy_return_type', tuple_107902)
    
    # ################# End of '_point_along_a_line(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_point_along_a_line' in the type store
    # Getting the type of 'stypy_return_type' (line 3140)
    stypy_return_type_107905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3140, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_107905)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_point_along_a_line'
    return stypy_return_type_107905

# Assigning a type to the variable '_point_along_a_line' (line 3140)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3140, 0), '_point_along_a_line', _point_along_a_line)
# Declaration of the 'ArrowStyle' class
# Getting the type of '_Style' (line 3152)
_Style_107906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3152, 17), '_Style')

class ArrowStyle(_Style_107906, ):
    unicode_107907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3187, (-1)), 'unicode', u'\n    :class:`ArrowStyle` is a container class which defines several\n    arrowstyle classes, which is used to create an arrow path along a\n    given path. These are mainly used with :class:`FancyArrowPatch`.\n\n    A arrowstyle object can be either created as::\n\n           ArrowStyle.Fancy(head_length=.4, head_width=.4, tail_width=.4)\n\n    or::\n\n           ArrowStyle("Fancy", head_length=.4, head_width=.4, tail_width=.4)\n\n    or::\n\n           ArrowStyle("Fancy, head_length=.4, head_width=.4, tail_width=.4")\n\n    The following classes are defined\n\n    %(AvailableArrowstyles)s\n\n\n    An instance of any arrow style class is a callable object,\n    whose call signature is::\n\n        __call__(self, path, mutation_size, linewidth, aspect_ratio=1.)\n\n    and it returns a tuple of a :class:`Path` instance and a boolean\n    value. *path* is a :class:`Path` instance along which the arrow\n    will be drawn. *mutation_size* and *aspect_ratio* have the same\n    meaning as in :class:`BoxStyle`. *linewidth* is a line width to be\n    stroked. This is meant to be used to correct the location of the\n    head so that it does not overshoot the destination point, but not all\n    classes support it.\n    ')
    
    # Assigning a Dict to a Name (line 3189):
    
    # Assigning a Dict to a Name (line 3189):
    # Declaration of the '_Base' class

    class _Base(object, ):
        unicode_107908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3202, (-1)), 'unicode', u'\n        Arrow Transmuter Base class\n\n        ArrowTransmuterBase and its derivatives are used to make a fancy\n        arrow around a given path. The __call__ method returns a path\n        (which will be used to create a PathPatch instance) and a boolean\n        value indicating the path is open therefore is not fillable.  This\n        class is not an artist and actual drawing of the fancy arrow is\n        done by the FancyArrowPatch class.\n\n        ')

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 3208, 8, False)
            # Assigning a type to the variable 'self' (line 3209)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3209, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, '_Base.__init__', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            
            # Call to __init__(...): (line 3209)
            # Processing the call keyword arguments (line 3209)
            kwargs_107916 = {}
            
            # Call to super(...): (line 3209)
            # Processing the call arguments (line 3209)
            # Getting the type of 'ArrowStyle' (line 3209)
            ArrowStyle_107910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3209, 18), 'ArrowStyle', False)
            # Obtaining the member '_Base' of a type (line 3209)
            _Base_107911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3209, 18), ArrowStyle_107910, '_Base')
            # Getting the type of 'self' (line 3209)
            self_107912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3209, 36), 'self', False)
            # Processing the call keyword arguments (line 3209)
            kwargs_107913 = {}
            # Getting the type of 'super' (line 3209)
            super_107909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3209, 12), 'super', False)
            # Calling super(args, kwargs) (line 3209)
            super_call_result_107914 = invoke(stypy.reporting.localization.Localization(__file__, 3209, 12), super_107909, *[_Base_107911, self_107912], **kwargs_107913)
            
            # Obtaining the member '__init__' of a type (line 3209)
            init___107915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3209, 12), super_call_result_107914, '__init__')
            # Calling __init__(args, kwargs) (line 3209)
            init___call_result_107917 = invoke(stypy.reporting.localization.Localization(__file__, 3209, 12), init___107915, *[], **kwargs_107916)
            
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()


        @staticmethod
        @norecursion
        def ensure_quadratic_bezier(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'ensure_quadratic_bezier'
            module_type_store = module_type_store.open_function_context('ensure_quadratic_bezier', 3211, 8, False)
            
            # Passed parameters checking function
            _Base.ensure_quadratic_bezier.__dict__.__setitem__('stypy_localization', localization)
            _Base.ensure_quadratic_bezier.__dict__.__setitem__('stypy_type_of_self', None)
            _Base.ensure_quadratic_bezier.__dict__.__setitem__('stypy_type_store', module_type_store)
            _Base.ensure_quadratic_bezier.__dict__.__setitem__('stypy_function_name', 'ensure_quadratic_bezier')
            _Base.ensure_quadratic_bezier.__dict__.__setitem__('stypy_param_names_list', ['path'])
            _Base.ensure_quadratic_bezier.__dict__.__setitem__('stypy_varargs_param_name', None)
            _Base.ensure_quadratic_bezier.__dict__.__setitem__('stypy_kwargs_param_name', None)
            _Base.ensure_quadratic_bezier.__dict__.__setitem__('stypy_call_defaults', defaults)
            _Base.ensure_quadratic_bezier.__dict__.__setitem__('stypy_call_varargs', varargs)
            _Base.ensure_quadratic_bezier.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            _Base.ensure_quadratic_bezier.__dict__.__setitem__('stypy_declared_arg_number', 1)
            arguments = process_argument_values(localization, None, module_type_store, 'ensure_quadratic_bezier', ['path'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'ensure_quadratic_bezier', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'ensure_quadratic_bezier(...)' code ##################

            unicode_107918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3218, (-1)), 'unicode', u' Some ArrowStyle class only wokrs with a simple\n            quaratic bezier curve (created with Arc3Connetion or\n            Angle3Connector). This static method is to check if the\n            provided path is a simple quadratic bezier curve and returns\n            its control points if true.\n            ')
            
            # Assigning a Call to a Name (line 3219):
            
            # Assigning a Call to a Name (line 3219):
            
            # Assigning a Call to a Name (line 3219):
            
            # Call to list(...): (line 3219)
            # Processing the call arguments (line 3219)
            
            # Call to iter_segments(...): (line 3219)
            # Processing the call keyword arguments (line 3219)
            kwargs_107922 = {}
            # Getting the type of 'path' (line 3219)
            path_107920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3219, 28), 'path', False)
            # Obtaining the member 'iter_segments' of a type (line 3219)
            iter_segments_107921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3219, 28), path_107920, 'iter_segments')
            # Calling iter_segments(args, kwargs) (line 3219)
            iter_segments_call_result_107923 = invoke(stypy.reporting.localization.Localization(__file__, 3219, 28), iter_segments_107921, *[], **kwargs_107922)
            
            # Processing the call keyword arguments (line 3219)
            kwargs_107924 = {}
            # Getting the type of 'list' (line 3219)
            list_107919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3219, 23), 'list', False)
            # Calling list(args, kwargs) (line 3219)
            list_call_result_107925 = invoke(stypy.reporting.localization.Localization(__file__, 3219, 23), list_107919, *[iter_segments_call_result_107923], **kwargs_107924)
            
            # Assigning a type to the variable 'segments' (line 3219)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3219, 12), 'segments', list_call_result_107925)
            
            
            # Evaluating a boolean operation
            
            
            # Call to len(...): (line 3220)
            # Processing the call arguments (line 3220)
            # Getting the type of 'segments' (line 3220)
            segments_107927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3220, 21), 'segments', False)
            # Processing the call keyword arguments (line 3220)
            kwargs_107928 = {}
            # Getting the type of 'len' (line 3220)
            len_107926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3220, 17), 'len', False)
            # Calling len(args, kwargs) (line 3220)
            len_call_result_107929 = invoke(stypy.reporting.localization.Localization(__file__, 3220, 17), len_107926, *[segments_107927], **kwargs_107928)
            
            int_107930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3220, 34), 'int')
            # Applying the binary operator '!=' (line 3220)
            result_ne_107931 = python_operator(stypy.reporting.localization.Localization(__file__, 3220, 17), '!=', len_call_result_107929, int_107930)
            
            
            
            # Obtaining the type of the subscript
            int_107932 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3220, 53), 'int')
            
            # Obtaining the type of the subscript
            int_107933 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3220, 50), 'int')
            # Getting the type of 'segments' (line 3220)
            segments_107934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3220, 41), 'segments')
            # Obtaining the member '__getitem__' of a type (line 3220)
            getitem___107935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3220, 41), segments_107934, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3220)
            subscript_call_result_107936 = invoke(stypy.reporting.localization.Localization(__file__, 3220, 41), getitem___107935, int_107933)
            
            # Obtaining the member '__getitem__' of a type (line 3220)
            getitem___107937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3220, 41), subscript_call_result_107936, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3220)
            subscript_call_result_107938 = invoke(stypy.reporting.localization.Localization(__file__, 3220, 41), getitem___107937, int_107932)
            
            # Getting the type of 'Path' (line 3220)
            Path_107939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3220, 59), 'Path')
            # Obtaining the member 'MOVETO' of a type (line 3220)
            MOVETO_107940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3220, 59), Path_107939, 'MOVETO')
            # Applying the binary operator '!=' (line 3220)
            result_ne_107941 = python_operator(stypy.reporting.localization.Localization(__file__, 3220, 41), '!=', subscript_call_result_107938, MOVETO_107940)
            
            # Applying the binary operator 'or' (line 3220)
            result_or_keyword_107942 = python_operator(stypy.reporting.localization.Localization(__file__, 3220, 16), 'or', result_ne_107931, result_ne_107941)
            
            
            # Obtaining the type of the subscript
            int_107943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3221, 33), 'int')
            
            # Obtaining the type of the subscript
            int_107944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3221, 30), 'int')
            # Getting the type of 'segments' (line 3221)
            segments_107945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3221, 21), 'segments')
            # Obtaining the member '__getitem__' of a type (line 3221)
            getitem___107946 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3221, 21), segments_107945, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3221)
            subscript_call_result_107947 = invoke(stypy.reporting.localization.Localization(__file__, 3221, 21), getitem___107946, int_107944)
            
            # Obtaining the member '__getitem__' of a type (line 3221)
            getitem___107948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3221, 21), subscript_call_result_107947, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3221)
            subscript_call_result_107949 = invoke(stypy.reporting.localization.Localization(__file__, 3221, 21), getitem___107948, int_107943)
            
            # Getting the type of 'Path' (line 3221)
            Path_107950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3221, 39), 'Path')
            # Obtaining the member 'CURVE3' of a type (line 3221)
            CURVE3_107951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3221, 39), Path_107950, 'CURVE3')
            # Applying the binary operator '!=' (line 3221)
            result_ne_107952 = python_operator(stypy.reporting.localization.Localization(__file__, 3221, 21), '!=', subscript_call_result_107949, CURVE3_107951)
            
            # Applying the binary operator 'or' (line 3220)
            result_or_keyword_107953 = python_operator(stypy.reporting.localization.Localization(__file__, 3220, 16), 'or', result_or_keyword_107942, result_ne_107952)
            
            # Testing the type of an if condition (line 3220)
            if_condition_107954 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3220, 12), result_or_keyword_107953)
            # Assigning a type to the variable 'if_condition_107954' (line 3220)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3220, 12), 'if_condition_107954', if_condition_107954)
            # SSA begins for if statement (line 3220)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Str to a Name (line 3222):
            
            # Assigning a Str to a Name (line 3222):
            
            # Assigning a Str to a Name (line 3222):
            unicode_107955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3222, 22), 'unicode', u"'path' it's not a valid quadratic bezier curve")
            # Assigning a type to the variable 'msg' (line 3222)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3222, 16), 'msg', unicode_107955)
            
            # Call to ValueError(...): (line 3223)
            # Processing the call arguments (line 3223)
            # Getting the type of 'msg' (line 3223)
            msg_107957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3223, 33), 'msg', False)
            # Processing the call keyword arguments (line 3223)
            kwargs_107958 = {}
            # Getting the type of 'ValueError' (line 3223)
            ValueError_107956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3223, 22), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 3223)
            ValueError_call_result_107959 = invoke(stypy.reporting.localization.Localization(__file__, 3223, 22), ValueError_107956, *[msg_107957], **kwargs_107958)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3223, 16), ValueError_call_result_107959, 'raise parameter', BaseException)
            # SSA join for if statement (line 3220)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Call to list(...): (line 3225)
            # Processing the call arguments (line 3225)
            
            # Obtaining the type of the subscript
            int_107961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3225, 36), 'int')
            
            # Obtaining the type of the subscript
            int_107962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3225, 33), 'int')
            # Getting the type of 'segments' (line 3225)
            segments_107963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3225, 24), 'segments', False)
            # Obtaining the member '__getitem__' of a type (line 3225)
            getitem___107964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3225, 24), segments_107963, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3225)
            subscript_call_result_107965 = invoke(stypy.reporting.localization.Localization(__file__, 3225, 24), getitem___107964, int_107962)
            
            # Obtaining the member '__getitem__' of a type (line 3225)
            getitem___107966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3225, 24), subscript_call_result_107965, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3225)
            subscript_call_result_107967 = invoke(stypy.reporting.localization.Localization(__file__, 3225, 24), getitem___107966, int_107961)
            
            # Processing the call keyword arguments (line 3225)
            kwargs_107968 = {}
            # Getting the type of 'list' (line 3225)
            list_107960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3225, 19), 'list', False)
            # Calling list(args, kwargs) (line 3225)
            list_call_result_107969 = invoke(stypy.reporting.localization.Localization(__file__, 3225, 19), list_107960, *[subscript_call_result_107967], **kwargs_107968)
            
            
            # Call to list(...): (line 3225)
            # Processing the call arguments (line 3225)
            
            # Obtaining the type of the subscript
            int_107971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3225, 59), 'int')
            
            # Obtaining the type of the subscript
            int_107972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3225, 56), 'int')
            # Getting the type of 'segments' (line 3225)
            segments_107973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3225, 47), 'segments', False)
            # Obtaining the member '__getitem__' of a type (line 3225)
            getitem___107974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3225, 47), segments_107973, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3225)
            subscript_call_result_107975 = invoke(stypy.reporting.localization.Localization(__file__, 3225, 47), getitem___107974, int_107972)
            
            # Obtaining the member '__getitem__' of a type (line 3225)
            getitem___107976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3225, 47), subscript_call_result_107975, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3225)
            subscript_call_result_107977 = invoke(stypy.reporting.localization.Localization(__file__, 3225, 47), getitem___107976, int_107971)
            
            # Processing the call keyword arguments (line 3225)
            kwargs_107978 = {}
            # Getting the type of 'list' (line 3225)
            list_107970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3225, 42), 'list', False)
            # Calling list(args, kwargs) (line 3225)
            list_call_result_107979 = invoke(stypy.reporting.localization.Localization(__file__, 3225, 42), list_107970, *[subscript_call_result_107977], **kwargs_107978)
            
            # Applying the binary operator '+' (line 3225)
            result_add_107980 = python_operator(stypy.reporting.localization.Localization(__file__, 3225, 19), '+', list_call_result_107969, list_call_result_107979)
            
            # Assigning a type to the variable 'stypy_return_type' (line 3225)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3225, 12), 'stypy_return_type', result_add_107980)
            
            # ################# End of 'ensure_quadratic_bezier(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'ensure_quadratic_bezier' in the type store
            # Getting the type of 'stypy_return_type' (line 3211)
            stypy_return_type_107981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3211, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_107981)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'ensure_quadratic_bezier'
            return stypy_return_type_107981


        @norecursion
        def transmute(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'transmute'
            module_type_store = module_type_store.open_function_context('transmute', 3227, 8, False)
            # Assigning a type to the variable 'self' (line 3228)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3228, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            _Base.transmute.__dict__.__setitem__('stypy_localization', localization)
            _Base.transmute.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            _Base.transmute.__dict__.__setitem__('stypy_type_store', module_type_store)
            _Base.transmute.__dict__.__setitem__('stypy_function_name', '_Base.transmute')
            _Base.transmute.__dict__.__setitem__('stypy_param_names_list', ['path', 'mutation_size', 'linewidth'])
            _Base.transmute.__dict__.__setitem__('stypy_varargs_param_name', None)
            _Base.transmute.__dict__.__setitem__('stypy_kwargs_param_name', None)
            _Base.transmute.__dict__.__setitem__('stypy_call_defaults', defaults)
            _Base.transmute.__dict__.__setitem__('stypy_call_varargs', varargs)
            _Base.transmute.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            _Base.transmute.__dict__.__setitem__('stypy_declared_arg_number', 4)
            arguments = process_argument_values(localization, type_of_self, module_type_store, '_Base.transmute', ['path', 'mutation_size', 'linewidth'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'transmute', localization, ['path', 'mutation_size', 'linewidth'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'transmute(...)' code ##################

            unicode_107982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3239, (-1)), 'unicode', u'\n            The transmute method is the very core of the ArrowStyle\n            class and must be overridden in the subclasses. It receives\n            the path object along which the arrow will be drawn, and\n            the mutation_size, with which the arrow head etc.\n            will be scaled. The linewidth may be used to adjust\n            the path so that it does not pass beyond the given\n            points. It returns a tuple of a Path instance and a\n            boolean. The boolean value indicate whether the path can\n            be filled or not. The return value can also be a list of paths\n            and list of booleans of a same length.\n            ')
            
            # Call to NotImplementedError(...): (line 3241)
            # Processing the call arguments (line 3241)
            unicode_107984 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3241, 38), 'unicode', u'Derived must override')
            # Processing the call keyword arguments (line 3241)
            kwargs_107985 = {}
            # Getting the type of 'NotImplementedError' (line 3241)
            NotImplementedError_107983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3241, 18), 'NotImplementedError', False)
            # Calling NotImplementedError(args, kwargs) (line 3241)
            NotImplementedError_call_result_107986 = invoke(stypy.reporting.localization.Localization(__file__, 3241, 18), NotImplementedError_107983, *[unicode_107984], **kwargs_107985)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3241, 12), NotImplementedError_call_result_107986, 'raise parameter', BaseException)
            
            # ################# End of 'transmute(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'transmute' in the type store
            # Getting the type of 'stypy_return_type' (line 3227)
            stypy_return_type_107987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3227, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_107987)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'transmute'
            return stypy_return_type_107987


        @norecursion
        def __call__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            float_107988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3244, 34), 'float')
            defaults = [float_107988]
            # Create a new context for function '__call__'
            module_type_store = module_type_store.open_function_context('__call__', 3243, 8, False)
            # Assigning a type to the variable 'self' (line 3244)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3244, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            _Base.__call__.__dict__.__setitem__('stypy_localization', localization)
            _Base.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            _Base.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
            _Base.__call__.__dict__.__setitem__('stypy_function_name', '_Base.__call__')
            _Base.__call__.__dict__.__setitem__('stypy_param_names_list', ['path', 'mutation_size', 'linewidth', 'aspect_ratio'])
            _Base.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
            _Base.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
            _Base.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
            _Base.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
            _Base.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            _Base.__call__.__dict__.__setitem__('stypy_declared_arg_number', 5)
            arguments = process_argument_values(localization, type_of_self, module_type_store, '_Base.__call__', ['path', 'mutation_size', 'linewidth', 'aspect_ratio'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, '__call__', localization, ['path', 'mutation_size', 'linewidth', 'aspect_ratio'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__call__(...)' code ##################

            unicode_107989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3248, (-1)), 'unicode', u'\n            The __call__ method is a thin wrapper around the transmute method\n            and take care of the aspect ratio.\n            ')
            
            # Assigning a Call to a Name (line 3250):
            
            # Assigning a Call to a Name (line 3250):
            
            # Assigning a Call to a Name (line 3250):
            
            # Call to make_path_regular(...): (line 3250)
            # Processing the call arguments (line 3250)
            # Getting the type of 'path' (line 3250)
            path_107991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3250, 37), 'path', False)
            # Processing the call keyword arguments (line 3250)
            kwargs_107992 = {}
            # Getting the type of 'make_path_regular' (line 3250)
            make_path_regular_107990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3250, 19), 'make_path_regular', False)
            # Calling make_path_regular(args, kwargs) (line 3250)
            make_path_regular_call_result_107993 = invoke(stypy.reporting.localization.Localization(__file__, 3250, 19), make_path_regular_107990, *[path_107991], **kwargs_107992)
            
            # Assigning a type to the variable 'path' (line 3250)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3250, 12), 'path', make_path_regular_call_result_107993)
            
            # Type idiom detected: calculating its left and rigth part (line 3252)
            # Getting the type of 'aspect_ratio' (line 3252)
            aspect_ratio_107994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3252, 12), 'aspect_ratio')
            # Getting the type of 'None' (line 3252)
            None_107995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3252, 35), 'None')
            
            (may_be_107996, more_types_in_union_107997) = may_not_be_none(aspect_ratio_107994, None_107995)

            if may_be_107996:

                if more_types_in_union_107997:
                    # Runtime conditional SSA (line 3252)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Assigning a Tuple to a Tuple (line 3255):
                
                # Assigning a Subscript to a Name (line 3255):
                
                # Assigning a Subscript to a Name (line 3255):
                
                # Obtaining the type of the subscript
                slice_107998 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3255, 34), None, None, None)
                # Getting the type of 'path' (line 3255)
                path_107999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3255, 34), 'path')
                # Obtaining the member 'vertices' of a type (line 3255)
                vertices_108000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3255, 34), path_107999, 'vertices')
                # Obtaining the member '__getitem__' of a type (line 3255)
                getitem___108001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3255, 34), vertices_108000, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 3255)
                subscript_call_result_108002 = invoke(stypy.reporting.localization.Localization(__file__, 3255, 34), getitem___108001, slice_107998)
                
                # Assigning a type to the variable 'tuple_assignment_100586' (line 3255)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3255, 16), 'tuple_assignment_100586', subscript_call_result_108002)
                
                # Assigning a Subscript to a Name (line 3255):
                
                # Assigning a Subscript to a Name (line 3255):
                
                # Obtaining the type of the subscript
                slice_108003 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3255, 52), None, None, None)
                # Getting the type of 'path' (line 3255)
                path_108004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3255, 52), 'path')
                # Obtaining the member 'codes' of a type (line 3255)
                codes_108005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3255, 52), path_108004, 'codes')
                # Obtaining the member '__getitem__' of a type (line 3255)
                getitem___108006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3255, 52), codes_108005, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 3255)
                subscript_call_result_108007 = invoke(stypy.reporting.localization.Localization(__file__, 3255, 52), getitem___108006, slice_108003)
                
                # Assigning a type to the variable 'tuple_assignment_100587' (line 3255)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3255, 16), 'tuple_assignment_100587', subscript_call_result_108007)
                
                # Assigning a Name to a Name (line 3255):
                
                # Assigning a Name to a Name (line 3255):
                # Getting the type of 'tuple_assignment_100586' (line 3255)
                tuple_assignment_100586_108008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3255, 16), 'tuple_assignment_100586')
                # Assigning a type to the variable 'vertices' (line 3255)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3255, 16), 'vertices', tuple_assignment_100586_108008)
                
                # Assigning a Name to a Name (line 3255):
                
                # Assigning a Name to a Name (line 3255):
                # Getting the type of 'tuple_assignment_100587' (line 3255)
                tuple_assignment_100587_108009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3255, 16), 'tuple_assignment_100587')
                # Assigning a type to the variable 'codes' (line 3255)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3255, 26), 'codes', tuple_assignment_100587_108009)
                
                # Assigning a BinOp to a Subscript (line 3257):
                
                # Assigning a BinOp to a Subscript (line 3257):
                
                # Assigning a BinOp to a Subscript (line 3257):
                
                # Obtaining the type of the subscript
                slice_108010 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3257, 33), None, None, None)
                int_108011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3257, 45), 'int')
                # Getting the type of 'vertices' (line 3257)
                vertices_108012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3257, 33), 'vertices')
                # Obtaining the member '__getitem__' of a type (line 3257)
                getitem___108013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3257, 33), vertices_108012, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 3257)
                subscript_call_result_108014 = invoke(stypy.reporting.localization.Localization(__file__, 3257, 33), getitem___108013, (slice_108010, int_108011))
                
                # Getting the type of 'aspect_ratio' (line 3257)
                aspect_ratio_108015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3257, 50), 'aspect_ratio')
                # Applying the binary operator 'div' (line 3257)
                result_div_108016 = python_operator(stypy.reporting.localization.Localization(__file__, 3257, 33), 'div', subscript_call_result_108014, aspect_ratio_108015)
                
                # Getting the type of 'vertices' (line 3257)
                vertices_108017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3257, 16), 'vertices')
                slice_108018 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3257, 16), None, None, None)
                int_108019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3257, 28), 'int')
                # Storing an element on a container (line 3257)
                set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3257, 16), vertices_108017, ((slice_108018, int_108019), result_div_108016))
                
                # Assigning a Call to a Name (line 3258):
                
                # Assigning a Call to a Name (line 3258):
                
                # Assigning a Call to a Name (line 3258):
                
                # Call to Path(...): (line 3258)
                # Processing the call arguments (line 3258)
                # Getting the type of 'vertices' (line 3258)
                vertices_108021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3258, 35), 'vertices', False)
                # Getting the type of 'codes' (line 3258)
                codes_108022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3258, 45), 'codes', False)
                # Processing the call keyword arguments (line 3258)
                kwargs_108023 = {}
                # Getting the type of 'Path' (line 3258)
                Path_108020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3258, 30), 'Path', False)
                # Calling Path(args, kwargs) (line 3258)
                Path_call_result_108024 = invoke(stypy.reporting.localization.Localization(__file__, 3258, 30), Path_108020, *[vertices_108021, codes_108022], **kwargs_108023)
                
                # Assigning a type to the variable 'path_shrunk' (line 3258)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3258, 16), 'path_shrunk', Path_call_result_108024)
                
                # Assigning a Call to a Tuple (line 3260):
                
                # Assigning a Call to a Name:
                
                # Assigning a Call to a Name:
                
                # Call to transmute(...): (line 3260)
                # Processing the call arguments (line 3260)
                # Getting the type of 'path_shrunk' (line 3260)
                path_shrunk_108027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3260, 56), 'path_shrunk', False)
                # Getting the type of 'linewidth' (line 3261)
                linewidth_108028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3261, 56), 'linewidth', False)
                # Getting the type of 'mutation_size' (line 3262)
                mutation_size_108029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3262, 56), 'mutation_size', False)
                # Processing the call keyword arguments (line 3260)
                kwargs_108030 = {}
                # Getting the type of 'self' (line 3260)
                self_108025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3260, 41), 'self', False)
                # Obtaining the member 'transmute' of a type (line 3260)
                transmute_108026 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3260, 41), self_108025, 'transmute')
                # Calling transmute(args, kwargs) (line 3260)
                transmute_call_result_108031 = invoke(stypy.reporting.localization.Localization(__file__, 3260, 41), transmute_108026, *[path_shrunk_108027, linewidth_108028, mutation_size_108029], **kwargs_108030)
                
                # Assigning a type to the variable 'call_assignment_100588' (line 3260)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3260, 16), 'call_assignment_100588', transmute_call_result_108031)
                
                # Assigning a Call to a Name (line 3260):
                
                # Assigning a Call to a Name (line 3260):
                
                # Call to __getitem__(...):
                # Processing the call arguments
                int_108034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3260, 16), 'int')
                # Processing the call keyword arguments
                kwargs_108035 = {}
                # Getting the type of 'call_assignment_100588' (line 3260)
                call_assignment_100588_108032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3260, 16), 'call_assignment_100588', False)
                # Obtaining the member '__getitem__' of a type (line 3260)
                getitem___108033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3260, 16), call_assignment_100588_108032, '__getitem__')
                # Calling __getitem__(args, kwargs)
                getitem___call_result_108036 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___108033, *[int_108034], **kwargs_108035)
                
                # Assigning a type to the variable 'call_assignment_100589' (line 3260)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3260, 16), 'call_assignment_100589', getitem___call_result_108036)
                
                # Assigning a Name to a Name (line 3260):
                
                # Assigning a Name to a Name (line 3260):
                # Getting the type of 'call_assignment_100589' (line 3260)
                call_assignment_100589_108037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3260, 16), 'call_assignment_100589')
                # Assigning a type to the variable 'path_mutated' (line 3260)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3260, 16), 'path_mutated', call_assignment_100589_108037)
                
                # Assigning a Call to a Name (line 3260):
                
                # Assigning a Call to a Name (line 3260):
                
                # Call to __getitem__(...):
                # Processing the call arguments
                int_108040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3260, 16), 'int')
                # Processing the call keyword arguments
                kwargs_108041 = {}
                # Getting the type of 'call_assignment_100588' (line 3260)
                call_assignment_100588_108038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3260, 16), 'call_assignment_100588', False)
                # Obtaining the member '__getitem__' of a type (line 3260)
                getitem___108039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3260, 16), call_assignment_100588_108038, '__getitem__')
                # Calling __getitem__(args, kwargs)
                getitem___call_result_108042 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___108039, *[int_108040], **kwargs_108041)
                
                # Assigning a type to the variable 'call_assignment_100590' (line 3260)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3260, 16), 'call_assignment_100590', getitem___call_result_108042)
                
                # Assigning a Name to a Name (line 3260):
                
                # Assigning a Name to a Name (line 3260):
                # Getting the type of 'call_assignment_100590' (line 3260)
                call_assignment_100590_108043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3260, 16), 'call_assignment_100590')
                # Assigning a type to the variable 'fillable' (line 3260)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3260, 30), 'fillable', call_assignment_100590_108043)
                
                
                # Call to iterable(...): (line 3263)
                # Processing the call arguments (line 3263)
                # Getting the type of 'fillable' (line 3263)
                fillable_108046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3263, 34), 'fillable', False)
                # Processing the call keyword arguments (line 3263)
                kwargs_108047 = {}
                # Getting the type of 'cbook' (line 3263)
                cbook_108044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3263, 19), 'cbook', False)
                # Obtaining the member 'iterable' of a type (line 3263)
                iterable_108045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3263, 19), cbook_108044, 'iterable')
                # Calling iterable(args, kwargs) (line 3263)
                iterable_call_result_108048 = invoke(stypy.reporting.localization.Localization(__file__, 3263, 19), iterable_108045, *[fillable_108046], **kwargs_108047)
                
                # Testing the type of an if condition (line 3263)
                if_condition_108049 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3263, 16), iterable_call_result_108048)
                # Assigning a type to the variable 'if_condition_108049' (line 3263)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3263, 16), 'if_condition_108049', if_condition_108049)
                # SSA begins for if statement (line 3263)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Assigning a List to a Name (line 3264):
                
                # Assigning a List to a Name (line 3264):
                
                # Assigning a List to a Name (line 3264):
                
                # Obtaining an instance of the builtin type 'list' (line 3264)
                list_108050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3264, 32), 'list')
                # Adding type elements to the builtin type 'list' instance (line 3264)
                
                # Assigning a type to the variable 'path_list' (line 3264)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3264, 20), 'path_list', list_108050)
                
                
                # Call to zip(...): (line 3265)
                # Processing the call arguments (line 3265)
                # Getting the type of 'path_mutated' (line 3265)
                path_mutated_108052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3265, 33), 'path_mutated', False)
                # Processing the call keyword arguments (line 3265)
                kwargs_108053 = {}
                # Getting the type of 'zip' (line 3265)
                zip_108051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3265, 29), 'zip', False)
                # Calling zip(args, kwargs) (line 3265)
                zip_call_result_108054 = invoke(stypy.reporting.localization.Localization(__file__, 3265, 29), zip_108051, *[path_mutated_108052], **kwargs_108053)
                
                # Testing the type of a for loop iterable (line 3265)
                is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3265, 20), zip_call_result_108054)
                # Getting the type of the for loop variable (line 3265)
                for_loop_var_108055 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3265, 20), zip_call_result_108054)
                # Assigning a type to the variable 'p' (line 3265)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3265, 20), 'p', for_loop_var_108055)
                # SSA begins for a for statement (line 3265)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
                
                # Assigning a Tuple to a Tuple (line 3266):
                
                # Assigning a Attribute to a Name (line 3266):
                
                # Assigning a Attribute to a Name (line 3266):
                # Getting the type of 'p' (line 3266)
                p_108056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3266, 31), 'p')
                # Obtaining the member 'vertices' of a type (line 3266)
                vertices_108057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3266, 31), p_108056, 'vertices')
                # Assigning a type to the variable 'tuple_assignment_100591' (line 3266)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3266, 24), 'tuple_assignment_100591', vertices_108057)
                
                # Assigning a Attribute to a Name (line 3266):
                
                # Assigning a Attribute to a Name (line 3266):
                # Getting the type of 'p' (line 3266)
                p_108058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3266, 43), 'p')
                # Obtaining the member 'codes' of a type (line 3266)
                codes_108059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3266, 43), p_108058, 'codes')
                # Assigning a type to the variable 'tuple_assignment_100592' (line 3266)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3266, 24), 'tuple_assignment_100592', codes_108059)
                
                # Assigning a Name to a Name (line 3266):
                
                # Assigning a Name to a Name (line 3266):
                # Getting the type of 'tuple_assignment_100591' (line 3266)
                tuple_assignment_100591_108060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3266, 24), 'tuple_assignment_100591')
                # Assigning a type to the variable 'v' (line 3266)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3266, 24), 'v', tuple_assignment_100591_108060)
                
                # Assigning a Name to a Name (line 3266):
                
                # Assigning a Name to a Name (line 3266):
                # Getting the type of 'tuple_assignment_100592' (line 3266)
                tuple_assignment_100592_108061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3266, 24), 'tuple_assignment_100592')
                # Assigning a type to the variable 'c' (line 3266)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3266, 27), 'c', tuple_assignment_100592_108061)
                
                # Assigning a BinOp to a Subscript (line 3268):
                
                # Assigning a BinOp to a Subscript (line 3268):
                
                # Assigning a BinOp to a Subscript (line 3268):
                
                # Obtaining the type of the subscript
                slice_108062 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3268, 34), None, None, None)
                int_108063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3268, 39), 'int')
                # Getting the type of 'v' (line 3268)
                v_108064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3268, 34), 'v')
                # Obtaining the member '__getitem__' of a type (line 3268)
                getitem___108065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3268, 34), v_108064, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 3268)
                subscript_call_result_108066 = invoke(stypy.reporting.localization.Localization(__file__, 3268, 34), getitem___108065, (slice_108062, int_108063))
                
                # Getting the type of 'aspect_ratio' (line 3268)
                aspect_ratio_108067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3268, 44), 'aspect_ratio')
                # Applying the binary operator '*' (line 3268)
                result_mul_108068 = python_operator(stypy.reporting.localization.Localization(__file__, 3268, 34), '*', subscript_call_result_108066, aspect_ratio_108067)
                
                # Getting the type of 'v' (line 3268)
                v_108069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3268, 24), 'v')
                slice_108070 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3268, 24), None, None, None)
                int_108071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3268, 29), 'int')
                # Storing an element on a container (line 3268)
                set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3268, 24), v_108069, ((slice_108070, int_108071), result_mul_108068))
                
                # Call to append(...): (line 3269)
                # Processing the call arguments (line 3269)
                
                # Call to Path(...): (line 3269)
                # Processing the call arguments (line 3269)
                # Getting the type of 'v' (line 3269)
                v_108075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3269, 46), 'v', False)
                # Getting the type of 'c' (line 3269)
                c_108076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3269, 49), 'c', False)
                # Processing the call keyword arguments (line 3269)
                kwargs_108077 = {}
                # Getting the type of 'Path' (line 3269)
                Path_108074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3269, 41), 'Path', False)
                # Calling Path(args, kwargs) (line 3269)
                Path_call_result_108078 = invoke(stypy.reporting.localization.Localization(__file__, 3269, 41), Path_108074, *[v_108075, c_108076], **kwargs_108077)
                
                # Processing the call keyword arguments (line 3269)
                kwargs_108079 = {}
                # Getting the type of 'path_list' (line 3269)
                path_list_108072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3269, 24), 'path_list', False)
                # Obtaining the member 'append' of a type (line 3269)
                append_108073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3269, 24), path_list_108072, 'append')
                # Calling append(args, kwargs) (line 3269)
                append_call_result_108080 = invoke(stypy.reporting.localization.Localization(__file__, 3269, 24), append_108073, *[Path_call_result_108078], **kwargs_108079)
                
                # SSA join for a for statement
                module_type_store = module_type_store.join_ssa_context()
                
                
                # Obtaining an instance of the builtin type 'tuple' (line 3270)
                tuple_108081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3270, 27), 'tuple')
                # Adding type elements to the builtin type 'tuple' instance (line 3270)
                # Adding element type (line 3270)
                # Getting the type of 'path_list' (line 3270)
                path_list_108082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3270, 27), 'path_list')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3270, 27), tuple_108081, path_list_108082)
                # Adding element type (line 3270)
                # Getting the type of 'fillable' (line 3270)
                fillable_108083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3270, 38), 'fillable')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3270, 27), tuple_108081, fillable_108083)
                
                # Assigning a type to the variable 'stypy_return_type' (line 3270)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3270, 20), 'stypy_return_type', tuple_108081)
                # SSA branch for the else part of an if statement (line 3263)
                module_type_store.open_ssa_branch('else')
                
                # Obtaining an instance of the builtin type 'tuple' (line 3272)
                tuple_108084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3272, 27), 'tuple')
                # Adding type elements to the builtin type 'tuple' instance (line 3272)
                # Adding element type (line 3272)
                # Getting the type of 'path_mutated' (line 3272)
                path_mutated_108085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3272, 27), 'path_mutated')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3272, 27), tuple_108084, path_mutated_108085)
                # Adding element type (line 3272)
                # Getting the type of 'fillable' (line 3272)
                fillable_108086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3272, 41), 'fillable')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3272, 27), tuple_108084, fillable_108086)
                
                # Assigning a type to the variable 'stypy_return_type' (line 3272)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3272, 20), 'stypy_return_type', tuple_108084)
                # SSA join for if statement (line 3263)
                module_type_store = module_type_store.join_ssa_context()
                

                if more_types_in_union_107997:
                    # Runtime conditional SSA for else branch (line 3252)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_107996) or more_types_in_union_107997):
                
                # Call to transmute(...): (line 3274)
                # Processing the call arguments (line 3274)
                # Getting the type of 'path' (line 3274)
                path_108089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3274, 38), 'path', False)
                # Getting the type of 'mutation_size' (line 3274)
                mutation_size_108090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3274, 44), 'mutation_size', False)
                # Getting the type of 'linewidth' (line 3274)
                linewidth_108091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3274, 59), 'linewidth', False)
                # Processing the call keyword arguments (line 3274)
                kwargs_108092 = {}
                # Getting the type of 'self' (line 3274)
                self_108087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3274, 23), 'self', False)
                # Obtaining the member 'transmute' of a type (line 3274)
                transmute_108088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3274, 23), self_108087, 'transmute')
                # Calling transmute(args, kwargs) (line 3274)
                transmute_call_result_108093 = invoke(stypy.reporting.localization.Localization(__file__, 3274, 23), transmute_108088, *[path_108089, mutation_size_108090, linewidth_108091], **kwargs_108092)
                
                # Assigning a type to the variable 'stypy_return_type' (line 3274)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3274, 16), 'stypy_return_type', transmute_call_result_108093)

                if (may_be_107996 and more_types_in_union_107997):
                    # SSA join for if statement (line 3252)
                    module_type_store = module_type_store.join_ssa_context()


            
            
            # ################# End of '__call__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function '__call__' in the type store
            # Getting the type of 'stypy_return_type' (line 3243)
            stypy_return_type_108094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3243, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_108094)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '__call__'
            return stypy_return_type_108094


        @norecursion
        def __reduce__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '__reduce__'
            module_type_store = module_type_store.open_function_context('__reduce__', 3276, 8, False)
            # Assigning a type to the variable 'self' (line 3277)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3277, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            _Base.__reduce__.__dict__.__setitem__('stypy_localization', localization)
            _Base.__reduce__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            _Base.__reduce__.__dict__.__setitem__('stypy_type_store', module_type_store)
            _Base.__reduce__.__dict__.__setitem__('stypy_function_name', '_Base.__reduce__')
            _Base.__reduce__.__dict__.__setitem__('stypy_param_names_list', [])
            _Base.__reduce__.__dict__.__setitem__('stypy_varargs_param_name', None)
            _Base.__reduce__.__dict__.__setitem__('stypy_kwargs_param_name', None)
            _Base.__reduce__.__dict__.__setitem__('stypy_call_defaults', defaults)
            _Base.__reduce__.__dict__.__setitem__('stypy_call_varargs', varargs)
            _Base.__reduce__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            _Base.__reduce__.__dict__.__setitem__('stypy_declared_arg_number', 1)
            arguments = process_argument_values(localization, type_of_self, module_type_store, '_Base.__reduce__', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, '__reduce__', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__reduce__(...)' code ##################

            stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3279, 12))
            
            # 'import matplotlib.cbook' statement (line 3279)
            update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
            import_108095 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3279, 12), 'matplotlib.cbook')

            if (type(import_108095) is not StypyTypeError):

                if (import_108095 != 'pyd_module'):
                    __import__(import_108095)
                    sys_modules_108096 = sys.modules[import_108095]
                    import_module(stypy.reporting.localization.Localization(__file__, 3279, 12), 'cbook', sys_modules_108096.module_type_store, module_type_store)
                else:
                    import matplotlib.cbook as cbook

                    import_module(stypy.reporting.localization.Localization(__file__, 3279, 12), 'cbook', matplotlib.cbook, module_type_store)

            else:
                # Assigning a type to the variable 'matplotlib.cbook' (line 3279)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3279, 12), 'matplotlib.cbook', import_108095)

            remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
            
            
            # Obtaining an instance of the builtin type 'tuple' (line 3280)
            tuple_108097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3280, 20), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3280)
            # Adding element type (line 3280)
            
            # Call to _NestedClassGetter(...): (line 3280)
            # Processing the call keyword arguments (line 3280)
            kwargs_108100 = {}
            # Getting the type of 'cbook' (line 3280)
            cbook_108098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3280, 20), 'cbook', False)
            # Obtaining the member '_NestedClassGetter' of a type (line 3280)
            _NestedClassGetter_108099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3280, 20), cbook_108098, '_NestedClassGetter')
            # Calling _NestedClassGetter(args, kwargs) (line 3280)
            _NestedClassGetter_call_result_108101 = invoke(stypy.reporting.localization.Localization(__file__, 3280, 20), _NestedClassGetter_108099, *[], **kwargs_108100)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3280, 20), tuple_108097, _NestedClassGetter_call_result_108101)
            # Adding element type (line 3280)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3281)
            tuple_108102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3281, 21), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3281)
            # Adding element type (line 3281)
            # Getting the type of 'ArrowStyle' (line 3281)
            ArrowStyle_108103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3281, 21), 'ArrowStyle')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3281, 21), tuple_108102, ArrowStyle_108103)
            # Adding element type (line 3281)
            # Getting the type of 'self' (line 3281)
            self_108104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3281, 33), 'self')
            # Obtaining the member '__class__' of a type (line 3281)
            class___108105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3281, 33), self_108104, '__class__')
            # Obtaining the member '__name__' of a type (line 3281)
            name___108106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3281, 33), class___108105, '__name__')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3281, 21), tuple_108102, name___108106)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3280, 20), tuple_108097, tuple_108102)
            # Adding element type (line 3280)
            # Getting the type of 'self' (line 3282)
            self_108107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3282, 20), 'self')
            # Obtaining the member '__dict__' of a type (line 3282)
            dict___108108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3282, 20), self_108107, '__dict__')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3280, 20), tuple_108097, dict___108108)
            
            # Assigning a type to the variable 'stypy_return_type' (line 3280)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3280, 12), 'stypy_return_type', tuple_108097)
            
            # ################# End of '__reduce__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function '__reduce__' in the type store
            # Getting the type of 'stypy_return_type' (line 3276)
            stypy_return_type_108109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3276, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_108109)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '__reduce__'
            return stypy_return_type_108109

    
    # Assigning a type to the variable '_Base' (line 3191)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3191, 4), '_Base', _Base)
    # Declaration of the '_Curve' class
    # Getting the type of '_Base' (line 3285)
    _Base_108110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3285, 17), '_Base')

    class _Curve(_Base_108110, ):
        unicode_108111 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3291, (-1)), 'unicode', u'\n        A simple arrow which will work with any path instance. The\n        returned path is simply concatenation of the original path + at\n        most two paths representing the arrow head at the begin point and the\n        at the end point. The arrow heads can be either open or closed.\n        ')

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            # Getting the type of 'None' (line 3293)
            None_108112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3293, 38), 'None')
            # Getting the type of 'None' (line 3293)
            None_108113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3293, 53), 'None')
            # Getting the type of 'False' (line 3294)
            False_108114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3294, 31), 'False')
            # Getting the type of 'False' (line 3294)
            False_108115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3294, 46), 'False')
            float_108116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3295, 33), 'float')
            float_108117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3295, 48), 'float')
            defaults = [None_108112, None_108113, False_108114, False_108115, float_108116, float_108117]
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 3293, 8, False)
            # Assigning a type to the variable 'self' (line 3294)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3294, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, '_Curve.__init__', ['beginarrow', 'endarrow', 'fillbegin', 'fillend', 'head_length', 'head_width'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, ['beginarrow', 'endarrow', 'fillbegin', 'fillend', 'head_length', 'head_width'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            unicode_108118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3302, (-1)), 'unicode', u'\n            The arrows are drawn if *beginarrow* and/or *endarrow* are\n            true. *head_length* and *head_width* determines the size\n            of the arrow relative to the *mutation scale*.  The\n            arrowhead at the begin (or end) is closed if fillbegin (or\n            fillend) is True.\n            ')
            
            # Assigning a Tuple to a Tuple (line 3303):
            
            # Assigning a Name to a Name (line 3303):
            
            # Assigning a Name to a Name (line 3303):
            # Getting the type of 'beginarrow' (line 3303)
            beginarrow_108119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3303, 45), 'beginarrow')
            # Assigning a type to the variable 'tuple_assignment_100593' (line 3303)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3303, 12), 'tuple_assignment_100593', beginarrow_108119)
            
            # Assigning a Name to a Name (line 3303):
            
            # Assigning a Name to a Name (line 3303):
            # Getting the type of 'endarrow' (line 3303)
            endarrow_108120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3303, 57), 'endarrow')
            # Assigning a type to the variable 'tuple_assignment_100594' (line 3303)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3303, 12), 'tuple_assignment_100594', endarrow_108120)
            
            # Assigning a Name to a Attribute (line 3303):
            
            # Assigning a Name to a Attribute (line 3303):
            # Getting the type of 'tuple_assignment_100593' (line 3303)
            tuple_assignment_100593_108121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3303, 12), 'tuple_assignment_100593')
            # Getting the type of 'self' (line 3303)
            self_108122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3303, 12), 'self')
            # Setting the type of the member 'beginarrow' of a type (line 3303)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3303, 12), self_108122, 'beginarrow', tuple_assignment_100593_108121)
            
            # Assigning a Name to a Attribute (line 3303):
            
            # Assigning a Name to a Attribute (line 3303):
            # Getting the type of 'tuple_assignment_100594' (line 3303)
            tuple_assignment_100594_108123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3303, 12), 'tuple_assignment_100594')
            # Getting the type of 'self' (line 3303)
            self_108124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3303, 29), 'self')
            # Setting the type of the member 'endarrow' of a type (line 3303)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3303, 29), self_108124, 'endarrow', tuple_assignment_100594_108123)
            
            # Assigning a Tuple to a Tuple (line 3304):
            
            # Assigning a Name to a Name (line 3304):
            
            # Assigning a Name to a Name (line 3304):
            # Getting the type of 'head_length' (line 3304)
            head_length_108125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3304, 48), 'head_length')
            # Assigning a type to the variable 'tuple_assignment_100595' (line 3304)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3304, 12), 'tuple_assignment_100595', head_length_108125)
            
            # Assigning a Name to a Name (line 3304):
            
            # Assigning a Name to a Name (line 3304):
            # Getting the type of 'head_width' (line 3304)
            head_width_108126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3304, 61), 'head_width')
            # Assigning a type to the variable 'tuple_assignment_100596' (line 3304)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3304, 12), 'tuple_assignment_100596', head_width_108126)
            
            # Assigning a Name to a Attribute (line 3304):
            
            # Assigning a Name to a Attribute (line 3304):
            # Getting the type of 'tuple_assignment_100595' (line 3304)
            tuple_assignment_100595_108127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3304, 12), 'tuple_assignment_100595')
            # Getting the type of 'self' (line 3304)
            self_108128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3304, 12), 'self')
            # Setting the type of the member 'head_length' of a type (line 3304)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3304, 12), self_108128, 'head_length', tuple_assignment_100595_108127)
            
            # Assigning a Name to a Attribute (line 3304):
            
            # Assigning a Name to a Attribute (line 3304):
            # Getting the type of 'tuple_assignment_100596' (line 3304)
            tuple_assignment_100596_108129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3304, 12), 'tuple_assignment_100596')
            # Getting the type of 'self' (line 3304)
            self_108130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3304, 30), 'self')
            # Setting the type of the member 'head_width' of a type (line 3304)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3304, 30), self_108130, 'head_width', tuple_assignment_100596_108129)
            
            # Assigning a Tuple to a Tuple (line 3305):
            
            # Assigning a Name to a Name (line 3305):
            
            # Assigning a Name to a Name (line 3305):
            # Getting the type of 'fillbegin' (line 3305)
            fillbegin_108131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3305, 43), 'fillbegin')
            # Assigning a type to the variable 'tuple_assignment_100597' (line 3305)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3305, 12), 'tuple_assignment_100597', fillbegin_108131)
            
            # Assigning a Name to a Name (line 3305):
            
            # Assigning a Name to a Name (line 3305):
            # Getting the type of 'fillend' (line 3305)
            fillend_108132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3305, 54), 'fillend')
            # Assigning a type to the variable 'tuple_assignment_100598' (line 3305)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3305, 12), 'tuple_assignment_100598', fillend_108132)
            
            # Assigning a Name to a Attribute (line 3305):
            
            # Assigning a Name to a Attribute (line 3305):
            # Getting the type of 'tuple_assignment_100597' (line 3305)
            tuple_assignment_100597_108133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3305, 12), 'tuple_assignment_100597')
            # Getting the type of 'self' (line 3305)
            self_108134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3305, 12), 'self')
            # Setting the type of the member 'fillbegin' of a type (line 3305)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3305, 12), self_108134, 'fillbegin', tuple_assignment_100597_108133)
            
            # Assigning a Name to a Attribute (line 3305):
            
            # Assigning a Name to a Attribute (line 3305):
            # Getting the type of 'tuple_assignment_100598' (line 3305)
            tuple_assignment_100598_108135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3305, 12), 'tuple_assignment_100598')
            # Getting the type of 'self' (line 3305)
            self_108136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3305, 28), 'self')
            # Setting the type of the member 'fillend' of a type (line 3305)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3305, 28), self_108136, 'fillend', tuple_assignment_100598_108135)
            
            # Call to __init__(...): (line 3306)
            # Processing the call keyword arguments (line 3306)
            kwargs_108144 = {}
            
            # Call to super(...): (line 3306)
            # Processing the call arguments (line 3306)
            # Getting the type of 'ArrowStyle' (line 3306)
            ArrowStyle_108138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3306, 18), 'ArrowStyle', False)
            # Obtaining the member '_Curve' of a type (line 3306)
            _Curve_108139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3306, 18), ArrowStyle_108138, '_Curve')
            # Getting the type of 'self' (line 3306)
            self_108140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3306, 37), 'self', False)
            # Processing the call keyword arguments (line 3306)
            kwargs_108141 = {}
            # Getting the type of 'super' (line 3306)
            super_108137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3306, 12), 'super', False)
            # Calling super(args, kwargs) (line 3306)
            super_call_result_108142 = invoke(stypy.reporting.localization.Localization(__file__, 3306, 12), super_108137, *[_Curve_108139, self_108140], **kwargs_108141)
            
            # Obtaining the member '__init__' of a type (line 3306)
            init___108143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3306, 12), super_call_result_108142, '__init__')
            # Calling __init__(args, kwargs) (line 3306)
            init___call_result_108145 = invoke(stypy.reporting.localization.Localization(__file__, 3306, 12), init___108143, *[], **kwargs_108144)
            
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()


        @norecursion
        def _get_arrow_wedge(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_get_arrow_wedge'
            module_type_store = module_type_store.open_function_context('_get_arrow_wedge', 3308, 8, False)
            # Assigning a type to the variable 'self' (line 3309)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3309, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            _Curve._get_arrow_wedge.__dict__.__setitem__('stypy_localization', localization)
            _Curve._get_arrow_wedge.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            _Curve._get_arrow_wedge.__dict__.__setitem__('stypy_type_store', module_type_store)
            _Curve._get_arrow_wedge.__dict__.__setitem__('stypy_function_name', '_Curve._get_arrow_wedge')
            _Curve._get_arrow_wedge.__dict__.__setitem__('stypy_param_names_list', ['x0', 'y0', 'x1', 'y1', 'head_dist', 'cos_t', 'sin_t', 'linewidth'])
            _Curve._get_arrow_wedge.__dict__.__setitem__('stypy_varargs_param_name', None)
            _Curve._get_arrow_wedge.__dict__.__setitem__('stypy_kwargs_param_name', None)
            _Curve._get_arrow_wedge.__dict__.__setitem__('stypy_call_defaults', defaults)
            _Curve._get_arrow_wedge.__dict__.__setitem__('stypy_call_varargs', varargs)
            _Curve._get_arrow_wedge.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            _Curve._get_arrow_wedge.__dict__.__setitem__('stypy_declared_arg_number', 9)
            arguments = process_argument_values(localization, type_of_self, module_type_store, '_Curve._get_arrow_wedge', ['x0', 'y0', 'x1', 'y1', 'head_dist', 'cos_t', 'sin_t', 'linewidth'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, '_get_arrow_wedge', localization, ['x0', 'y0', 'x1', 'y1', 'head_dist', 'cos_t', 'sin_t', 'linewidth'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '_get_arrow_wedge(...)' code ##################

            unicode_108146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3316, (-1)), 'unicode', u'\n            Return the paths for arrow heads. Since arrow lines are\n            drawn with capstyle=projected, The arrow goes beyond the\n            desired point. This method also returns the amount of the path\n            to be shrunken so that it does not overshoot.\n            ')
            
            # Assigning a Tuple to a Tuple (line 3319):
            
            # Assigning a BinOp to a Name (line 3319):
            
            # Assigning a BinOp to a Name (line 3319):
            # Getting the type of 'x0' (line 3319)
            x0_108147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3319, 21), 'x0')
            # Getting the type of 'x1' (line 3319)
            x1_108148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3319, 26), 'x1')
            # Applying the binary operator '-' (line 3319)
            result_sub_108149 = python_operator(stypy.reporting.localization.Localization(__file__, 3319, 21), '-', x0_108147, x1_108148)
            
            # Assigning a type to the variable 'tuple_assignment_100599' (line 3319)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3319, 12), 'tuple_assignment_100599', result_sub_108149)
            
            # Assigning a BinOp to a Name (line 3319):
            
            # Assigning a BinOp to a Name (line 3319):
            # Getting the type of 'y0' (line 3319)
            y0_108150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3319, 30), 'y0')
            # Getting the type of 'y1' (line 3319)
            y1_108151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3319, 35), 'y1')
            # Applying the binary operator '-' (line 3319)
            result_sub_108152 = python_operator(stypy.reporting.localization.Localization(__file__, 3319, 30), '-', y0_108150, y1_108151)
            
            # Assigning a type to the variable 'tuple_assignment_100600' (line 3319)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3319, 12), 'tuple_assignment_100600', result_sub_108152)
            
            # Assigning a Name to a Name (line 3319):
            
            # Assigning a Name to a Name (line 3319):
            # Getting the type of 'tuple_assignment_100599' (line 3319)
            tuple_assignment_100599_108153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3319, 12), 'tuple_assignment_100599')
            # Assigning a type to the variable 'dx' (line 3319)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3319, 12), 'dx', tuple_assignment_100599_108153)
            
            # Assigning a Name to a Name (line 3319):
            
            # Assigning a Name to a Name (line 3319):
            # Getting the type of 'tuple_assignment_100600' (line 3319)
            tuple_assignment_100600_108154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3319, 12), 'tuple_assignment_100600')
            # Assigning a type to the variable 'dy' (line 3319)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3319, 16), 'dy', tuple_assignment_100600_108154)
            
            # Assigning a Call to a Name (line 3321):
            
            # Assigning a Call to a Name (line 3321):
            
            # Assigning a Call to a Name (line 3321):
            
            # Call to hypot(...): (line 3321)
            # Processing the call arguments (line 3321)
            # Getting the type of 'dx' (line 3321)
            dx_108157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3321, 35), 'dx', False)
            # Getting the type of 'dy' (line 3321)
            dy_108158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3321, 39), 'dy', False)
            # Processing the call keyword arguments (line 3321)
            kwargs_108159 = {}
            # Getting the type of 'np' (line 3321)
            np_108155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3321, 26), 'np', False)
            # Obtaining the member 'hypot' of a type (line 3321)
            hypot_108156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3321, 26), np_108155, 'hypot')
            # Calling hypot(args, kwargs) (line 3321)
            hypot_call_result_108160 = invoke(stypy.reporting.localization.Localization(__file__, 3321, 26), hypot_108156, *[dx_108157, dy_108158], **kwargs_108159)
            
            # Assigning a type to the variable 'cp_distance' (line 3321)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3321, 12), 'cp_distance', hypot_call_result_108160)
            
            # Assigning a BinOp to a Name (line 3325):
            
            # Assigning a BinOp to a Name (line 3325):
            
            # Assigning a BinOp to a Name (line 3325):
            float_108161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3325, 29), 'float')
            # Getting the type of 'linewidth' (line 3325)
            linewidth_108162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3325, 34), 'linewidth')
            # Applying the binary operator '*' (line 3325)
            result_mul_108163 = python_operator(stypy.reporting.localization.Localization(__file__, 3325, 29), '*', float_108161, linewidth_108162)
            
            # Getting the type of 'sin_t' (line 3325)
            sin_t_108164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3325, 46), 'sin_t')
            # Applying the binary operator 'div' (line 3325)
            result_div_108165 = python_operator(stypy.reporting.localization.Localization(__file__, 3325, 44), 'div', result_mul_108163, sin_t_108164)
            
            # Assigning a type to the variable 'pad_projected' (line 3325)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3325, 12), 'pad_projected', result_div_108165)
            
            
            # Getting the type of 'cp_distance' (line 3328)
            cp_distance_108166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3328, 15), 'cp_distance')
            int_108167 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3328, 30), 'int')
            # Applying the binary operator '==' (line 3328)
            result_eq_108168 = python_operator(stypy.reporting.localization.Localization(__file__, 3328, 15), '==', cp_distance_108166, int_108167)
            
            # Testing the type of an if condition (line 3328)
            if_condition_108169 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3328, 12), result_eq_108168)
            # Assigning a type to the variable 'if_condition_108169' (line 3328)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3328, 12), 'if_condition_108169', if_condition_108169)
            # SSA begins for if statement (line 3328)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Num to a Name (line 3329):
            
            # Assigning a Num to a Name (line 3329):
            
            # Assigning a Num to a Name (line 3329):
            int_108170 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3329, 30), 'int')
            # Assigning a type to the variable 'cp_distance' (line 3329)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3329, 16), 'cp_distance', int_108170)
            # SSA join for if statement (line 3328)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a BinOp to a Name (line 3332):
            
            # Assigning a BinOp to a Name (line 3332):
            
            # Assigning a BinOp to a Name (line 3332):
            # Getting the type of 'pad_projected' (line 3332)
            pad_projected_108171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3332, 18), 'pad_projected')
            # Getting the type of 'dx' (line 3332)
            dx_108172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3332, 34), 'dx')
            # Applying the binary operator '*' (line 3332)
            result_mul_108173 = python_operator(stypy.reporting.localization.Localization(__file__, 3332, 18), '*', pad_projected_108171, dx_108172)
            
            # Getting the type of 'cp_distance' (line 3332)
            cp_distance_108174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3332, 39), 'cp_distance')
            # Applying the binary operator 'div' (line 3332)
            result_div_108175 = python_operator(stypy.reporting.localization.Localization(__file__, 3332, 37), 'div', result_mul_108173, cp_distance_108174)
            
            # Assigning a type to the variable 'ddx' (line 3332)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3332, 12), 'ddx', result_div_108175)
            
            # Assigning a BinOp to a Name (line 3333):
            
            # Assigning a BinOp to a Name (line 3333):
            
            # Assigning a BinOp to a Name (line 3333):
            # Getting the type of 'pad_projected' (line 3333)
            pad_projected_108176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3333, 18), 'pad_projected')
            # Getting the type of 'dy' (line 3333)
            dy_108177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3333, 34), 'dy')
            # Applying the binary operator '*' (line 3333)
            result_mul_108178 = python_operator(stypy.reporting.localization.Localization(__file__, 3333, 18), '*', pad_projected_108176, dy_108177)
            
            # Getting the type of 'cp_distance' (line 3333)
            cp_distance_108179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3333, 39), 'cp_distance')
            # Applying the binary operator 'div' (line 3333)
            result_div_108180 = python_operator(stypy.reporting.localization.Localization(__file__, 3333, 37), 'div', result_mul_108178, cp_distance_108179)
            
            # Assigning a type to the variable 'ddy' (line 3333)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3333, 12), 'ddy', result_div_108180)
            
            # Assigning a BinOp to a Name (line 3336):
            
            # Assigning a BinOp to a Name (line 3336):
            
            # Assigning a BinOp to a Name (line 3336):
            # Getting the type of 'dx' (line 3336)
            dx_108181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3336, 17), 'dx')
            # Getting the type of 'cp_distance' (line 3336)
            cp_distance_108182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3336, 22), 'cp_distance')
            # Applying the binary operator 'div' (line 3336)
            result_div_108183 = python_operator(stypy.reporting.localization.Localization(__file__, 3336, 17), 'div', dx_108181, cp_distance_108182)
            
            # Getting the type of 'head_dist' (line 3336)
            head_dist_108184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3336, 36), 'head_dist')
            # Applying the binary operator '*' (line 3336)
            result_mul_108185 = python_operator(stypy.reporting.localization.Localization(__file__, 3336, 34), '*', result_div_108183, head_dist_108184)
            
            # Assigning a type to the variable 'dx' (line 3336)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3336, 12), 'dx', result_mul_108185)
            
            # Assigning a BinOp to a Name (line 3337):
            
            # Assigning a BinOp to a Name (line 3337):
            
            # Assigning a BinOp to a Name (line 3337):
            # Getting the type of 'dy' (line 3337)
            dy_108186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3337, 17), 'dy')
            # Getting the type of 'cp_distance' (line 3337)
            cp_distance_108187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3337, 22), 'cp_distance')
            # Applying the binary operator 'div' (line 3337)
            result_div_108188 = python_operator(stypy.reporting.localization.Localization(__file__, 3337, 17), 'div', dy_108186, cp_distance_108187)
            
            # Getting the type of 'head_dist' (line 3337)
            head_dist_108189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3337, 36), 'head_dist')
            # Applying the binary operator '*' (line 3337)
            result_mul_108190 = python_operator(stypy.reporting.localization.Localization(__file__, 3337, 34), '*', result_div_108188, head_dist_108189)
            
            # Assigning a type to the variable 'dy' (line 3337)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3337, 12), 'dy', result_mul_108190)
            
            # Assigning a Tuple to a Tuple (line 3339):
            
            # Assigning a BinOp to a Name (line 3339):
            
            # Assigning a BinOp to a Name (line 3339):
            # Getting the type of 'cos_t' (line 3339)
            cos_t_108191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3339, 23), 'cos_t')
            # Getting the type of 'dx' (line 3339)
            dx_108192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3339, 31), 'dx')
            # Applying the binary operator '*' (line 3339)
            result_mul_108193 = python_operator(stypy.reporting.localization.Localization(__file__, 3339, 23), '*', cos_t_108191, dx_108192)
            
            # Getting the type of 'sin_t' (line 3339)
            sin_t_108194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3339, 36), 'sin_t')
            # Getting the type of 'dy' (line 3339)
            dy_108195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3339, 44), 'dy')
            # Applying the binary operator '*' (line 3339)
            result_mul_108196 = python_operator(stypy.reporting.localization.Localization(__file__, 3339, 36), '*', sin_t_108194, dy_108195)
            
            # Applying the binary operator '+' (line 3339)
            result_add_108197 = python_operator(stypy.reporting.localization.Localization(__file__, 3339, 23), '+', result_mul_108193, result_mul_108196)
            
            # Assigning a type to the variable 'tuple_assignment_100601' (line 3339)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3339, 12), 'tuple_assignment_100601', result_add_108197)
            
            # Assigning a BinOp to a Name (line 3339):
            
            # Assigning a BinOp to a Name (line 3339):
            
            # Getting the type of 'sin_t' (line 3339)
            sin_t_108198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3339, 49), 'sin_t')
            # Applying the 'usub' unary operator (line 3339)
            result___neg___108199 = python_operator(stypy.reporting.localization.Localization(__file__, 3339, 48), 'usub', sin_t_108198)
            
            # Getting the type of 'dx' (line 3339)
            dx_108200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3339, 57), 'dx')
            # Applying the binary operator '*' (line 3339)
            result_mul_108201 = python_operator(stypy.reporting.localization.Localization(__file__, 3339, 48), '*', result___neg___108199, dx_108200)
            
            # Getting the type of 'cos_t' (line 3339)
            cos_t_108202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3339, 62), 'cos_t')
            # Getting the type of 'dy' (line 3339)
            dy_108203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3339, 70), 'dy')
            # Applying the binary operator '*' (line 3339)
            result_mul_108204 = python_operator(stypy.reporting.localization.Localization(__file__, 3339, 62), '*', cos_t_108202, dy_108203)
            
            # Applying the binary operator '+' (line 3339)
            result_add_108205 = python_operator(stypy.reporting.localization.Localization(__file__, 3339, 48), '+', result_mul_108201, result_mul_108204)
            
            # Assigning a type to the variable 'tuple_assignment_100602' (line 3339)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3339, 12), 'tuple_assignment_100602', result_add_108205)
            
            # Assigning a Name to a Name (line 3339):
            
            # Assigning a Name to a Name (line 3339):
            # Getting the type of 'tuple_assignment_100601' (line 3339)
            tuple_assignment_100601_108206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3339, 12), 'tuple_assignment_100601')
            # Assigning a type to the variable 'dx1' (line 3339)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3339, 12), 'dx1', tuple_assignment_100601_108206)
            
            # Assigning a Name to a Name (line 3339):
            
            # Assigning a Name to a Name (line 3339):
            # Getting the type of 'tuple_assignment_100602' (line 3339)
            tuple_assignment_100602_108207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3339, 12), 'tuple_assignment_100602')
            # Assigning a type to the variable 'dy1' (line 3339)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3339, 17), 'dy1', tuple_assignment_100602_108207)
            
            # Assigning a Tuple to a Tuple (line 3340):
            
            # Assigning a BinOp to a Name (line 3340):
            
            # Assigning a BinOp to a Name (line 3340):
            # Getting the type of 'cos_t' (line 3340)
            cos_t_108208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3340, 23), 'cos_t')
            # Getting the type of 'dx' (line 3340)
            dx_108209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3340, 31), 'dx')
            # Applying the binary operator '*' (line 3340)
            result_mul_108210 = python_operator(stypy.reporting.localization.Localization(__file__, 3340, 23), '*', cos_t_108208, dx_108209)
            
            # Getting the type of 'sin_t' (line 3340)
            sin_t_108211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3340, 36), 'sin_t')
            # Getting the type of 'dy' (line 3340)
            dy_108212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3340, 44), 'dy')
            # Applying the binary operator '*' (line 3340)
            result_mul_108213 = python_operator(stypy.reporting.localization.Localization(__file__, 3340, 36), '*', sin_t_108211, dy_108212)
            
            # Applying the binary operator '-' (line 3340)
            result_sub_108214 = python_operator(stypy.reporting.localization.Localization(__file__, 3340, 23), '-', result_mul_108210, result_mul_108213)
            
            # Assigning a type to the variable 'tuple_assignment_100603' (line 3340)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3340, 12), 'tuple_assignment_100603', result_sub_108214)
            
            # Assigning a BinOp to a Name (line 3340):
            
            # Assigning a BinOp to a Name (line 3340):
            # Getting the type of 'sin_t' (line 3340)
            sin_t_108215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3340, 48), 'sin_t')
            # Getting the type of 'dx' (line 3340)
            dx_108216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3340, 56), 'dx')
            # Applying the binary operator '*' (line 3340)
            result_mul_108217 = python_operator(stypy.reporting.localization.Localization(__file__, 3340, 48), '*', sin_t_108215, dx_108216)
            
            # Getting the type of 'cos_t' (line 3340)
            cos_t_108218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3340, 61), 'cos_t')
            # Getting the type of 'dy' (line 3340)
            dy_108219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3340, 69), 'dy')
            # Applying the binary operator '*' (line 3340)
            result_mul_108220 = python_operator(stypy.reporting.localization.Localization(__file__, 3340, 61), '*', cos_t_108218, dy_108219)
            
            # Applying the binary operator '+' (line 3340)
            result_add_108221 = python_operator(stypy.reporting.localization.Localization(__file__, 3340, 48), '+', result_mul_108217, result_mul_108220)
            
            # Assigning a type to the variable 'tuple_assignment_100604' (line 3340)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3340, 12), 'tuple_assignment_100604', result_add_108221)
            
            # Assigning a Name to a Name (line 3340):
            
            # Assigning a Name to a Name (line 3340):
            # Getting the type of 'tuple_assignment_100603' (line 3340)
            tuple_assignment_100603_108222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3340, 12), 'tuple_assignment_100603')
            # Assigning a type to the variable 'dx2' (line 3340)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3340, 12), 'dx2', tuple_assignment_100603_108222)
            
            # Assigning a Name to a Name (line 3340):
            
            # Assigning a Name to a Name (line 3340):
            # Getting the type of 'tuple_assignment_100604' (line 3340)
            tuple_assignment_100604_108223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3340, 12), 'tuple_assignment_100604')
            # Assigning a type to the variable 'dy2' (line 3340)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3340, 17), 'dy2', tuple_assignment_100604_108223)
            
            # Assigning a List to a Name (line 3342):
            
            # Assigning a List to a Name (line 3342):
            
            # Assigning a List to a Name (line 3342):
            
            # Obtaining an instance of the builtin type 'list' (line 3342)
            list_108224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3342, 29), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3342)
            # Adding element type (line 3342)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3342)
            tuple_108225 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3342, 31), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3342)
            # Adding element type (line 3342)
            # Getting the type of 'x1' (line 3342)
            x1_108226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3342, 31), 'x1')
            # Getting the type of 'ddx' (line 3342)
            ddx_108227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3342, 36), 'ddx')
            # Applying the binary operator '+' (line 3342)
            result_add_108228 = python_operator(stypy.reporting.localization.Localization(__file__, 3342, 31), '+', x1_108226, ddx_108227)
            
            # Getting the type of 'dx1' (line 3342)
            dx1_108229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3342, 42), 'dx1')
            # Applying the binary operator '+' (line 3342)
            result_add_108230 = python_operator(stypy.reporting.localization.Localization(__file__, 3342, 40), '+', result_add_108228, dx1_108229)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3342, 31), tuple_108225, result_add_108230)
            # Adding element type (line 3342)
            # Getting the type of 'y1' (line 3342)
            y1_108231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3342, 47), 'y1')
            # Getting the type of 'ddy' (line 3342)
            ddy_108232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3342, 52), 'ddy')
            # Applying the binary operator '+' (line 3342)
            result_add_108233 = python_operator(stypy.reporting.localization.Localization(__file__, 3342, 47), '+', y1_108231, ddy_108232)
            
            # Getting the type of 'dy1' (line 3342)
            dy1_108234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3342, 58), 'dy1')
            # Applying the binary operator '+' (line 3342)
            result_add_108235 = python_operator(stypy.reporting.localization.Localization(__file__, 3342, 56), '+', result_add_108233, dy1_108234)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3342, 31), tuple_108225, result_add_108235)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3342, 29), list_108224, tuple_108225)
            # Adding element type (line 3342)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3343)
            tuple_108236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3343, 31), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3343)
            # Adding element type (line 3343)
            # Getting the type of 'x1' (line 3343)
            x1_108237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3343, 31), 'x1')
            # Getting the type of 'ddx' (line 3343)
            ddx_108238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3343, 36), 'ddx')
            # Applying the binary operator '+' (line 3343)
            result_add_108239 = python_operator(stypy.reporting.localization.Localization(__file__, 3343, 31), '+', x1_108237, ddx_108238)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3343, 31), tuple_108236, result_add_108239)
            # Adding element type (line 3343)
            # Getting the type of 'y1' (line 3343)
            y1_108240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3343, 41), 'y1')
            # Getting the type of 'ddy' (line 3343)
            ddy_108241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3343, 46), 'ddy')
            # Applying the binary operator '+' (line 3343)
            result_add_108242 = python_operator(stypy.reporting.localization.Localization(__file__, 3343, 41), '+', y1_108240, ddy_108241)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3343, 31), tuple_108236, result_add_108242)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3342, 29), list_108224, tuple_108236)
            # Adding element type (line 3342)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3344)
            tuple_108243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3344, 31), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3344)
            # Adding element type (line 3344)
            # Getting the type of 'x1' (line 3344)
            x1_108244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3344, 31), 'x1')
            # Getting the type of 'ddx' (line 3344)
            ddx_108245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3344, 36), 'ddx')
            # Applying the binary operator '+' (line 3344)
            result_add_108246 = python_operator(stypy.reporting.localization.Localization(__file__, 3344, 31), '+', x1_108244, ddx_108245)
            
            # Getting the type of 'dx2' (line 3344)
            dx2_108247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3344, 42), 'dx2')
            # Applying the binary operator '+' (line 3344)
            result_add_108248 = python_operator(stypy.reporting.localization.Localization(__file__, 3344, 40), '+', result_add_108246, dx2_108247)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3344, 31), tuple_108243, result_add_108248)
            # Adding element type (line 3344)
            # Getting the type of 'y1' (line 3344)
            y1_108249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3344, 47), 'y1')
            # Getting the type of 'ddy' (line 3344)
            ddy_108250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3344, 52), 'ddy')
            # Applying the binary operator '+' (line 3344)
            result_add_108251 = python_operator(stypy.reporting.localization.Localization(__file__, 3344, 47), '+', y1_108249, ddy_108250)
            
            # Getting the type of 'dy2' (line 3344)
            dy2_108252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3344, 58), 'dy2')
            # Applying the binary operator '+' (line 3344)
            result_add_108253 = python_operator(stypy.reporting.localization.Localization(__file__, 3344, 56), '+', result_add_108251, dy2_108252)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3344, 31), tuple_108243, result_add_108253)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3342, 29), list_108224, tuple_108243)
            
            # Assigning a type to the variable 'vertices_arrow' (line 3342)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3342, 12), 'vertices_arrow', list_108224)
            
            # Assigning a List to a Name (line 3345):
            
            # Assigning a List to a Name (line 3345):
            
            # Assigning a List to a Name (line 3345):
            
            # Obtaining an instance of the builtin type 'list' (line 3345)
            list_108254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3345, 26), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3345)
            # Adding element type (line 3345)
            # Getting the type of 'Path' (line 3345)
            Path_108255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3345, 27), 'Path')
            # Obtaining the member 'MOVETO' of a type (line 3345)
            MOVETO_108256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3345, 27), Path_108255, 'MOVETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3345, 26), list_108254, MOVETO_108256)
            # Adding element type (line 3345)
            # Getting the type of 'Path' (line 3346)
            Path_108257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3346, 27), 'Path')
            # Obtaining the member 'LINETO' of a type (line 3346)
            LINETO_108258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3346, 27), Path_108257, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3345, 26), list_108254, LINETO_108258)
            # Adding element type (line 3345)
            # Getting the type of 'Path' (line 3347)
            Path_108259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3347, 27), 'Path')
            # Obtaining the member 'LINETO' of a type (line 3347)
            LINETO_108260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3347, 27), Path_108259, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3345, 26), list_108254, LINETO_108260)
            
            # Assigning a type to the variable 'codes_arrow' (line 3345)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3345, 12), 'codes_arrow', list_108254)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3349)
            tuple_108261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3349, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3349)
            # Adding element type (line 3349)
            # Getting the type of 'vertices_arrow' (line 3349)
            vertices_arrow_108262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3349, 19), 'vertices_arrow')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3349, 19), tuple_108261, vertices_arrow_108262)
            # Adding element type (line 3349)
            # Getting the type of 'codes_arrow' (line 3349)
            codes_arrow_108263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3349, 35), 'codes_arrow')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3349, 19), tuple_108261, codes_arrow_108263)
            # Adding element type (line 3349)
            # Getting the type of 'ddx' (line 3349)
            ddx_108264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3349, 48), 'ddx')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3349, 19), tuple_108261, ddx_108264)
            # Adding element type (line 3349)
            # Getting the type of 'ddy' (line 3349)
            ddy_108265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3349, 53), 'ddy')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3349, 19), tuple_108261, ddy_108265)
            
            # Assigning a type to the variable 'stypy_return_type' (line 3349)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3349, 12), 'stypy_return_type', tuple_108261)
            
            # ################# End of '_get_arrow_wedge(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function '_get_arrow_wedge' in the type store
            # Getting the type of 'stypy_return_type' (line 3308)
            stypy_return_type_108266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3308, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_108266)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_get_arrow_wedge'
            return stypy_return_type_108266


        @norecursion
        def transmute(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'transmute'
            module_type_store = module_type_store.open_function_context('transmute', 3351, 8, False)
            # Assigning a type to the variable 'self' (line 3352)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3352, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            _Curve.transmute.__dict__.__setitem__('stypy_localization', localization)
            _Curve.transmute.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            _Curve.transmute.__dict__.__setitem__('stypy_type_store', module_type_store)
            _Curve.transmute.__dict__.__setitem__('stypy_function_name', '_Curve.transmute')
            _Curve.transmute.__dict__.__setitem__('stypy_param_names_list', ['path', 'mutation_size', 'linewidth'])
            _Curve.transmute.__dict__.__setitem__('stypy_varargs_param_name', None)
            _Curve.transmute.__dict__.__setitem__('stypy_kwargs_param_name', None)
            _Curve.transmute.__dict__.__setitem__('stypy_call_defaults', defaults)
            _Curve.transmute.__dict__.__setitem__('stypy_call_varargs', varargs)
            _Curve.transmute.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            _Curve.transmute.__dict__.__setitem__('stypy_declared_arg_number', 4)
            arguments = process_argument_values(localization, type_of_self, module_type_store, '_Curve.transmute', ['path', 'mutation_size', 'linewidth'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'transmute', localization, ['path', 'mutation_size', 'linewidth'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'transmute(...)' code ##################

            
            # Assigning a BinOp to a Name (line 3353):
            
            # Assigning a BinOp to a Name (line 3353):
            
            # Assigning a BinOp to a Name (line 3353):
            # Getting the type of 'self' (line 3353)
            self_108267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3353, 26), 'self')
            # Obtaining the member 'head_length' of a type (line 3353)
            head_length_108268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3353, 26), self_108267, 'head_length')
            # Getting the type of 'mutation_size' (line 3353)
            mutation_size_108269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3353, 45), 'mutation_size')
            # Applying the binary operator '*' (line 3353)
            result_mul_108270 = python_operator(stypy.reporting.localization.Localization(__file__, 3353, 26), '*', head_length_108268, mutation_size_108269)
            
            # Assigning a type to the variable 'head_length' (line 3353)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3353, 12), 'head_length', result_mul_108270)
            
            # Assigning a BinOp to a Name (line 3354):
            
            # Assigning a BinOp to a Name (line 3354):
            
            # Assigning a BinOp to a Name (line 3354):
            # Getting the type of 'self' (line 3354)
            self_108271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3354, 25), 'self')
            # Obtaining the member 'head_width' of a type (line 3354)
            head_width_108272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3354, 25), self_108271, 'head_width')
            # Getting the type of 'mutation_size' (line 3354)
            mutation_size_108273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3354, 43), 'mutation_size')
            # Applying the binary operator '*' (line 3354)
            result_mul_108274 = python_operator(stypy.reporting.localization.Localization(__file__, 3354, 25), '*', head_width_108272, mutation_size_108273)
            
            # Assigning a type to the variable 'head_width' (line 3354)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3354, 12), 'head_width', result_mul_108274)
            
            # Assigning a Call to a Name (line 3355):
            
            # Assigning a Call to a Name (line 3355):
            
            # Assigning a Call to a Name (line 3355):
            
            # Call to sqrt(...): (line 3355)
            # Processing the call arguments (line 3355)
            # Getting the type of 'head_length' (line 3355)
            head_length_108277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3355, 34), 'head_length', False)
            int_108278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3355, 49), 'int')
            # Applying the binary operator '**' (line 3355)
            result_pow_108279 = python_operator(stypy.reporting.localization.Localization(__file__, 3355, 34), '**', head_length_108277, int_108278)
            
            # Getting the type of 'head_width' (line 3355)
            head_width_108280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3355, 53), 'head_width', False)
            int_108281 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3355, 67), 'int')
            # Applying the binary operator '**' (line 3355)
            result_pow_108282 = python_operator(stypy.reporting.localization.Localization(__file__, 3355, 53), '**', head_width_108280, int_108281)
            
            # Applying the binary operator '+' (line 3355)
            result_add_108283 = python_operator(stypy.reporting.localization.Localization(__file__, 3355, 34), '+', result_pow_108279, result_pow_108282)
            
            # Processing the call keyword arguments (line 3355)
            kwargs_108284 = {}
            # Getting the type of 'math' (line 3355)
            math_108275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3355, 24), 'math', False)
            # Obtaining the member 'sqrt' of a type (line 3355)
            sqrt_108276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3355, 24), math_108275, 'sqrt')
            # Calling sqrt(args, kwargs) (line 3355)
            sqrt_call_result_108285 = invoke(stypy.reporting.localization.Localization(__file__, 3355, 24), sqrt_108276, *[result_add_108283], **kwargs_108284)
            
            # Assigning a type to the variable 'head_dist' (line 3355)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3355, 12), 'head_dist', sqrt_call_result_108285)
            
            # Assigning a Tuple to a Tuple (line 3356):
            
            # Assigning a BinOp to a Name (line 3356):
            
            # Assigning a BinOp to a Name (line 3356):
            # Getting the type of 'head_length' (line 3356)
            head_length_108286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3356, 27), 'head_length')
            # Getting the type of 'head_dist' (line 3356)
            head_dist_108287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3356, 41), 'head_dist')
            # Applying the binary operator 'div' (line 3356)
            result_div_108288 = python_operator(stypy.reporting.localization.Localization(__file__, 3356, 27), 'div', head_length_108286, head_dist_108287)
            
            # Assigning a type to the variable 'tuple_assignment_100605' (line 3356)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3356, 12), 'tuple_assignment_100605', result_div_108288)
            
            # Assigning a BinOp to a Name (line 3356):
            
            # Assigning a BinOp to a Name (line 3356):
            # Getting the type of 'head_width' (line 3356)
            head_width_108289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3356, 52), 'head_width')
            # Getting the type of 'head_dist' (line 3356)
            head_dist_108290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3356, 65), 'head_dist')
            # Applying the binary operator 'div' (line 3356)
            result_div_108291 = python_operator(stypy.reporting.localization.Localization(__file__, 3356, 52), 'div', head_width_108289, head_dist_108290)
            
            # Assigning a type to the variable 'tuple_assignment_100606' (line 3356)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3356, 12), 'tuple_assignment_100606', result_div_108291)
            
            # Assigning a Name to a Name (line 3356):
            
            # Assigning a Name to a Name (line 3356):
            # Getting the type of 'tuple_assignment_100605' (line 3356)
            tuple_assignment_100605_108292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3356, 12), 'tuple_assignment_100605')
            # Assigning a type to the variable 'cos_t' (line 3356)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3356, 12), 'cos_t', tuple_assignment_100605_108292)
            
            # Assigning a Name to a Name (line 3356):
            
            # Assigning a Name to a Name (line 3356):
            # Getting the type of 'tuple_assignment_100606' (line 3356)
            tuple_assignment_100606_108293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3356, 12), 'tuple_assignment_100606')
            # Assigning a type to the variable 'sin_t' (line 3356)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3356, 19), 'sin_t', tuple_assignment_100606_108293)
            
            # Assigning a Subscript to a Tuple (line 3359):
            
            # Assigning a Subscript to a Name (line 3359):
            
            # Assigning a Subscript to a Name (line 3359):
            
            # Obtaining the type of the subscript
            int_108294 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3359, 12), 'int')
            
            # Obtaining the type of the subscript
            int_108295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3359, 35), 'int')
            # Getting the type of 'path' (line 3359)
            path_108296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3359, 21), 'path')
            # Obtaining the member 'vertices' of a type (line 3359)
            vertices_108297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3359, 21), path_108296, 'vertices')
            # Obtaining the member '__getitem__' of a type (line 3359)
            getitem___108298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3359, 21), vertices_108297, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3359)
            subscript_call_result_108299 = invoke(stypy.reporting.localization.Localization(__file__, 3359, 21), getitem___108298, int_108295)
            
            # Obtaining the member '__getitem__' of a type (line 3359)
            getitem___108300 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3359, 12), subscript_call_result_108299, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3359)
            subscript_call_result_108301 = invoke(stypy.reporting.localization.Localization(__file__, 3359, 12), getitem___108300, int_108294)
            
            # Assigning a type to the variable 'tuple_var_assignment_100607' (line 3359)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3359, 12), 'tuple_var_assignment_100607', subscript_call_result_108301)
            
            # Assigning a Subscript to a Name (line 3359):
            
            # Assigning a Subscript to a Name (line 3359):
            
            # Obtaining the type of the subscript
            int_108302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3359, 12), 'int')
            
            # Obtaining the type of the subscript
            int_108303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3359, 35), 'int')
            # Getting the type of 'path' (line 3359)
            path_108304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3359, 21), 'path')
            # Obtaining the member 'vertices' of a type (line 3359)
            vertices_108305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3359, 21), path_108304, 'vertices')
            # Obtaining the member '__getitem__' of a type (line 3359)
            getitem___108306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3359, 21), vertices_108305, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3359)
            subscript_call_result_108307 = invoke(stypy.reporting.localization.Localization(__file__, 3359, 21), getitem___108306, int_108303)
            
            # Obtaining the member '__getitem__' of a type (line 3359)
            getitem___108308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3359, 12), subscript_call_result_108307, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3359)
            subscript_call_result_108309 = invoke(stypy.reporting.localization.Localization(__file__, 3359, 12), getitem___108308, int_108302)
            
            # Assigning a type to the variable 'tuple_var_assignment_100608' (line 3359)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3359, 12), 'tuple_var_assignment_100608', subscript_call_result_108309)
            
            # Assigning a Name to a Name (line 3359):
            
            # Assigning a Name to a Name (line 3359):
            # Getting the type of 'tuple_var_assignment_100607' (line 3359)
            tuple_var_assignment_100607_108310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3359, 12), 'tuple_var_assignment_100607')
            # Assigning a type to the variable 'x0' (line 3359)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3359, 12), 'x0', tuple_var_assignment_100607_108310)
            
            # Assigning a Name to a Name (line 3359):
            
            # Assigning a Name to a Name (line 3359):
            # Getting the type of 'tuple_var_assignment_100608' (line 3359)
            tuple_var_assignment_100608_108311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3359, 12), 'tuple_var_assignment_100608')
            # Assigning a type to the variable 'y0' (line 3359)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3359, 16), 'y0', tuple_var_assignment_100608_108311)
            
            # Assigning a Subscript to a Tuple (line 3360):
            
            # Assigning a Subscript to a Name (line 3360):
            
            # Assigning a Subscript to a Name (line 3360):
            
            # Obtaining the type of the subscript
            int_108312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3360, 12), 'int')
            
            # Obtaining the type of the subscript
            int_108313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3360, 35), 'int')
            # Getting the type of 'path' (line 3360)
            path_108314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3360, 21), 'path')
            # Obtaining the member 'vertices' of a type (line 3360)
            vertices_108315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3360, 21), path_108314, 'vertices')
            # Obtaining the member '__getitem__' of a type (line 3360)
            getitem___108316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3360, 21), vertices_108315, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3360)
            subscript_call_result_108317 = invoke(stypy.reporting.localization.Localization(__file__, 3360, 21), getitem___108316, int_108313)
            
            # Obtaining the member '__getitem__' of a type (line 3360)
            getitem___108318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3360, 12), subscript_call_result_108317, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3360)
            subscript_call_result_108319 = invoke(stypy.reporting.localization.Localization(__file__, 3360, 12), getitem___108318, int_108312)
            
            # Assigning a type to the variable 'tuple_var_assignment_100609' (line 3360)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3360, 12), 'tuple_var_assignment_100609', subscript_call_result_108319)
            
            # Assigning a Subscript to a Name (line 3360):
            
            # Assigning a Subscript to a Name (line 3360):
            
            # Obtaining the type of the subscript
            int_108320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3360, 12), 'int')
            
            # Obtaining the type of the subscript
            int_108321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3360, 35), 'int')
            # Getting the type of 'path' (line 3360)
            path_108322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3360, 21), 'path')
            # Obtaining the member 'vertices' of a type (line 3360)
            vertices_108323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3360, 21), path_108322, 'vertices')
            # Obtaining the member '__getitem__' of a type (line 3360)
            getitem___108324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3360, 21), vertices_108323, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3360)
            subscript_call_result_108325 = invoke(stypy.reporting.localization.Localization(__file__, 3360, 21), getitem___108324, int_108321)
            
            # Obtaining the member '__getitem__' of a type (line 3360)
            getitem___108326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3360, 12), subscript_call_result_108325, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3360)
            subscript_call_result_108327 = invoke(stypy.reporting.localization.Localization(__file__, 3360, 12), getitem___108326, int_108320)
            
            # Assigning a type to the variable 'tuple_var_assignment_100610' (line 3360)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3360, 12), 'tuple_var_assignment_100610', subscript_call_result_108327)
            
            # Assigning a Name to a Name (line 3360):
            
            # Assigning a Name to a Name (line 3360):
            # Getting the type of 'tuple_var_assignment_100609' (line 3360)
            tuple_var_assignment_100609_108328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3360, 12), 'tuple_var_assignment_100609')
            # Assigning a type to the variable 'x1' (line 3360)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3360, 12), 'x1', tuple_var_assignment_100609_108328)
            
            # Assigning a Name to a Name (line 3360):
            
            # Assigning a Name to a Name (line 3360):
            # Getting the type of 'tuple_var_assignment_100610' (line 3360)
            tuple_var_assignment_100610_108329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3360, 12), 'tuple_var_assignment_100610')
            # Assigning a type to the variable 'y1' (line 3360)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3360, 16), 'y1', tuple_var_assignment_100610_108329)
            
            # Assigning a BoolOp to a Name (line 3363):
            
            # Assigning a BoolOp to a Name (line 3363):
            
            # Assigning a BoolOp to a Name (line 3363):
            
            # Evaluating a boolean operation
            # Getting the type of 'self' (line 3363)
            self_108330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3363, 30), 'self')
            # Obtaining the member 'beginarrow' of a type (line 3363)
            beginarrow_108331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3363, 30), self_108330, 'beginarrow')
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'x0' (line 3363)
            x0_108332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3363, 55), 'x0')
            # Getting the type of 'x1' (line 3363)
            x1_108333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3363, 61), 'x1')
            # Applying the binary operator '==' (line 3363)
            result_eq_108334 = python_operator(stypy.reporting.localization.Localization(__file__, 3363, 55), '==', x0_108332, x1_108333)
            
            
            # Getting the type of 'y0' (line 3363)
            y0_108335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3363, 68), 'y0')
            # Getting the type of 'y1' (line 3363)
            y1_108336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3363, 74), 'y1')
            # Applying the binary operator '==' (line 3363)
            result_eq_108337 = python_operator(stypy.reporting.localization.Localization(__file__, 3363, 68), '==', y0_108335, y1_108336)
            
            # Applying the binary operator 'and' (line 3363)
            result_and_keyword_108338 = python_operator(stypy.reporting.localization.Localization(__file__, 3363, 55), 'and', result_eq_108334, result_eq_108337)
            
            # Applying the 'not' unary operator (line 3363)
            result_not__108339 = python_operator(stypy.reporting.localization.Localization(__file__, 3363, 50), 'not', result_and_keyword_108338)
            
            # Applying the binary operator 'and' (line 3363)
            result_and_keyword_108340 = python_operator(stypy.reporting.localization.Localization(__file__, 3363, 30), 'and', beginarrow_108331, result_not__108339)
            
            # Assigning a type to the variable 'has_begin_arrow' (line 3363)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3363, 12), 'has_begin_arrow', result_and_keyword_108340)
            
            # Getting the type of 'has_begin_arrow' (line 3364)
            has_begin_arrow_108341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3364, 15), 'has_begin_arrow')
            # Testing the type of an if condition (line 3364)
            if_condition_108342 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3364, 12), has_begin_arrow_108341)
            # Assigning a type to the variable 'if_condition_108342' (line 3364)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3364, 12), 'if_condition_108342', if_condition_108342)
            # SSA begins for if statement (line 3364)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Tuple (line 3365):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to _get_arrow_wedge(...): (line 3366)
            # Processing the call arguments (line 3366)
            # Getting the type of 'x1' (line 3366)
            x1_108345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3366, 49), 'x1', False)
            # Getting the type of 'y1' (line 3366)
            y1_108346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3366, 53), 'y1', False)
            # Getting the type of 'x0' (line 3366)
            x0_108347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3366, 57), 'x0', False)
            # Getting the type of 'y0' (line 3366)
            y0_108348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3366, 61), 'y0', False)
            # Getting the type of 'head_dist' (line 3367)
            head_dist_108349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3367, 49), 'head_dist', False)
            # Getting the type of 'cos_t' (line 3367)
            cos_t_108350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3367, 60), 'cos_t', False)
            # Getting the type of 'sin_t' (line 3367)
            sin_t_108351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3367, 67), 'sin_t', False)
            # Getting the type of 'linewidth' (line 3368)
            linewidth_108352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3368, 49), 'linewidth', False)
            # Processing the call keyword arguments (line 3366)
            kwargs_108353 = {}
            # Getting the type of 'self' (line 3366)
            self_108343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3366, 27), 'self', False)
            # Obtaining the member '_get_arrow_wedge' of a type (line 3366)
            _get_arrow_wedge_108344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3366, 27), self_108343, '_get_arrow_wedge')
            # Calling _get_arrow_wedge(args, kwargs) (line 3366)
            _get_arrow_wedge_call_result_108354 = invoke(stypy.reporting.localization.Localization(__file__, 3366, 27), _get_arrow_wedge_108344, *[x1_108345, y1_108346, x0_108347, y0_108348, head_dist_108349, cos_t_108350, sin_t_108351, linewidth_108352], **kwargs_108353)
            
            # Assigning a type to the variable 'call_assignment_100611' (line 3365)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3365, 16), 'call_assignment_100611', _get_arrow_wedge_call_result_108354)
            
            # Assigning a Call to a Name (line 3365):
            
            # Assigning a Call to a Name (line 3365):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_108357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3365, 16), 'int')
            # Processing the call keyword arguments
            kwargs_108358 = {}
            # Getting the type of 'call_assignment_100611' (line 3365)
            call_assignment_100611_108355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3365, 16), 'call_assignment_100611', False)
            # Obtaining the member '__getitem__' of a type (line 3365)
            getitem___108356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3365, 16), call_assignment_100611_108355, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_108359 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___108356, *[int_108357], **kwargs_108358)
            
            # Assigning a type to the variable 'call_assignment_100612' (line 3365)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3365, 16), 'call_assignment_100612', getitem___call_result_108359)
            
            # Assigning a Name to a Name (line 3365):
            
            # Assigning a Name to a Name (line 3365):
            # Getting the type of 'call_assignment_100612' (line 3365)
            call_assignment_100612_108360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3365, 16), 'call_assignment_100612')
            # Assigning a type to the variable 'verticesA' (line 3365)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3365, 16), 'verticesA', call_assignment_100612_108360)
            
            # Assigning a Call to a Name (line 3365):
            
            # Assigning a Call to a Name (line 3365):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_108363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3365, 16), 'int')
            # Processing the call keyword arguments
            kwargs_108364 = {}
            # Getting the type of 'call_assignment_100611' (line 3365)
            call_assignment_100611_108361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3365, 16), 'call_assignment_100611', False)
            # Obtaining the member '__getitem__' of a type (line 3365)
            getitem___108362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3365, 16), call_assignment_100611_108361, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_108365 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___108362, *[int_108363], **kwargs_108364)
            
            # Assigning a type to the variable 'call_assignment_100613' (line 3365)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3365, 16), 'call_assignment_100613', getitem___call_result_108365)
            
            # Assigning a Name to a Name (line 3365):
            
            # Assigning a Name to a Name (line 3365):
            # Getting the type of 'call_assignment_100613' (line 3365)
            call_assignment_100613_108366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3365, 16), 'call_assignment_100613')
            # Assigning a type to the variable 'codesA' (line 3365)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3365, 27), 'codesA', call_assignment_100613_108366)
            
            # Assigning a Call to a Name (line 3365):
            
            # Assigning a Call to a Name (line 3365):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_108369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3365, 16), 'int')
            # Processing the call keyword arguments
            kwargs_108370 = {}
            # Getting the type of 'call_assignment_100611' (line 3365)
            call_assignment_100611_108367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3365, 16), 'call_assignment_100611', False)
            # Obtaining the member '__getitem__' of a type (line 3365)
            getitem___108368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3365, 16), call_assignment_100611_108367, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_108371 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___108368, *[int_108369], **kwargs_108370)
            
            # Assigning a type to the variable 'call_assignment_100614' (line 3365)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3365, 16), 'call_assignment_100614', getitem___call_result_108371)
            
            # Assigning a Name to a Name (line 3365):
            
            # Assigning a Name to a Name (line 3365):
            # Getting the type of 'call_assignment_100614' (line 3365)
            call_assignment_100614_108372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3365, 16), 'call_assignment_100614')
            # Assigning a type to the variable 'ddxA' (line 3365)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3365, 35), 'ddxA', call_assignment_100614_108372)
            
            # Assigning a Call to a Name (line 3365):
            
            # Assigning a Call to a Name (line 3365):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_108375 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3365, 16), 'int')
            # Processing the call keyword arguments
            kwargs_108376 = {}
            # Getting the type of 'call_assignment_100611' (line 3365)
            call_assignment_100611_108373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3365, 16), 'call_assignment_100611', False)
            # Obtaining the member '__getitem__' of a type (line 3365)
            getitem___108374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3365, 16), call_assignment_100611_108373, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_108377 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___108374, *[int_108375], **kwargs_108376)
            
            # Assigning a type to the variable 'call_assignment_100615' (line 3365)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3365, 16), 'call_assignment_100615', getitem___call_result_108377)
            
            # Assigning a Name to a Name (line 3365):
            
            # Assigning a Name to a Name (line 3365):
            # Getting the type of 'call_assignment_100615' (line 3365)
            call_assignment_100615_108378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3365, 16), 'call_assignment_100615')
            # Assigning a type to the variable 'ddyA' (line 3365)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3365, 41), 'ddyA', call_assignment_100615_108378)
            # SSA branch for the else part of an if statement (line 3364)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Tuple to a Tuple (line 3370):
            
            # Assigning a List to a Name (line 3370):
            
            # Assigning a List to a Name (line 3370):
            
            # Obtaining an instance of the builtin type 'list' (line 3370)
            list_108379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3370, 36), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3370)
            
            # Assigning a type to the variable 'tuple_assignment_100616' (line 3370)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3370, 16), 'tuple_assignment_100616', list_108379)
            
            # Assigning a List to a Name (line 3370):
            
            # Assigning a List to a Name (line 3370):
            
            # Obtaining an instance of the builtin type 'list' (line 3370)
            list_108380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3370, 40), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3370)
            
            # Assigning a type to the variable 'tuple_assignment_100617' (line 3370)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3370, 16), 'tuple_assignment_100617', list_108380)
            
            # Assigning a Name to a Name (line 3370):
            
            # Assigning a Name to a Name (line 3370):
            # Getting the type of 'tuple_assignment_100616' (line 3370)
            tuple_assignment_100616_108381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3370, 16), 'tuple_assignment_100616')
            # Assigning a type to the variable 'verticesA' (line 3370)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3370, 16), 'verticesA', tuple_assignment_100616_108381)
            
            # Assigning a Name to a Name (line 3370):
            
            # Assigning a Name to a Name (line 3370):
            # Getting the type of 'tuple_assignment_100617' (line 3370)
            tuple_assignment_100617_108382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3370, 16), 'tuple_assignment_100617')
            # Assigning a type to the variable 'codesA' (line 3370)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3370, 27), 'codesA', tuple_assignment_100617_108382)
            
            # Assigning a Tuple to a Tuple (line 3371):
            
            # Assigning a Num to a Name (line 3371):
            
            # Assigning a Num to a Name (line 3371):
            float_108383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3371, 29), 'float')
            # Assigning a type to the variable 'tuple_assignment_100618' (line 3371)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3371, 16), 'tuple_assignment_100618', float_108383)
            
            # Assigning a Num to a Name (line 3371):
            
            # Assigning a Num to a Name (line 3371):
            float_108384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3371, 33), 'float')
            # Assigning a type to the variable 'tuple_assignment_100619' (line 3371)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3371, 16), 'tuple_assignment_100619', float_108384)
            
            # Assigning a Name to a Name (line 3371):
            
            # Assigning a Name to a Name (line 3371):
            # Getting the type of 'tuple_assignment_100618' (line 3371)
            tuple_assignment_100618_108385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3371, 16), 'tuple_assignment_100618')
            # Assigning a type to the variable 'ddxA' (line 3371)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3371, 16), 'ddxA', tuple_assignment_100618_108385)
            
            # Assigning a Name to a Name (line 3371):
            
            # Assigning a Name to a Name (line 3371):
            # Getting the type of 'tuple_assignment_100619' (line 3371)
            tuple_assignment_100619_108386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3371, 16), 'tuple_assignment_100619')
            # Assigning a type to the variable 'ddyA' (line 3371)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3371, 22), 'ddyA', tuple_assignment_100619_108386)
            # SSA join for if statement (line 3364)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Subscript to a Tuple (line 3374):
            
            # Assigning a Subscript to a Name (line 3374):
            
            # Assigning a Subscript to a Name (line 3374):
            
            # Obtaining the type of the subscript
            int_108387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3374, 12), 'int')
            
            # Obtaining the type of the subscript
            int_108388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3374, 35), 'int')
            # Getting the type of 'path' (line 3374)
            path_108389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3374, 21), 'path')
            # Obtaining the member 'vertices' of a type (line 3374)
            vertices_108390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3374, 21), path_108389, 'vertices')
            # Obtaining the member '__getitem__' of a type (line 3374)
            getitem___108391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3374, 21), vertices_108390, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3374)
            subscript_call_result_108392 = invoke(stypy.reporting.localization.Localization(__file__, 3374, 21), getitem___108391, int_108388)
            
            # Obtaining the member '__getitem__' of a type (line 3374)
            getitem___108393 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3374, 12), subscript_call_result_108392, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3374)
            subscript_call_result_108394 = invoke(stypy.reporting.localization.Localization(__file__, 3374, 12), getitem___108393, int_108387)
            
            # Assigning a type to the variable 'tuple_var_assignment_100620' (line 3374)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3374, 12), 'tuple_var_assignment_100620', subscript_call_result_108394)
            
            # Assigning a Subscript to a Name (line 3374):
            
            # Assigning a Subscript to a Name (line 3374):
            
            # Obtaining the type of the subscript
            int_108395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3374, 12), 'int')
            
            # Obtaining the type of the subscript
            int_108396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3374, 35), 'int')
            # Getting the type of 'path' (line 3374)
            path_108397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3374, 21), 'path')
            # Obtaining the member 'vertices' of a type (line 3374)
            vertices_108398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3374, 21), path_108397, 'vertices')
            # Obtaining the member '__getitem__' of a type (line 3374)
            getitem___108399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3374, 21), vertices_108398, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3374)
            subscript_call_result_108400 = invoke(stypy.reporting.localization.Localization(__file__, 3374, 21), getitem___108399, int_108396)
            
            # Obtaining the member '__getitem__' of a type (line 3374)
            getitem___108401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3374, 12), subscript_call_result_108400, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3374)
            subscript_call_result_108402 = invoke(stypy.reporting.localization.Localization(__file__, 3374, 12), getitem___108401, int_108395)
            
            # Assigning a type to the variable 'tuple_var_assignment_100621' (line 3374)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3374, 12), 'tuple_var_assignment_100621', subscript_call_result_108402)
            
            # Assigning a Name to a Name (line 3374):
            
            # Assigning a Name to a Name (line 3374):
            # Getting the type of 'tuple_var_assignment_100620' (line 3374)
            tuple_var_assignment_100620_108403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3374, 12), 'tuple_var_assignment_100620')
            # Assigning a type to the variable 'x2' (line 3374)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3374, 12), 'x2', tuple_var_assignment_100620_108403)
            
            # Assigning a Name to a Name (line 3374):
            
            # Assigning a Name to a Name (line 3374):
            # Getting the type of 'tuple_var_assignment_100621' (line 3374)
            tuple_var_assignment_100621_108404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3374, 12), 'tuple_var_assignment_100621')
            # Assigning a type to the variable 'y2' (line 3374)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3374, 16), 'y2', tuple_var_assignment_100621_108404)
            
            # Assigning a Subscript to a Tuple (line 3375):
            
            # Assigning a Subscript to a Name (line 3375):
            
            # Assigning a Subscript to a Name (line 3375):
            
            # Obtaining the type of the subscript
            int_108405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3375, 12), 'int')
            
            # Obtaining the type of the subscript
            int_108406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3375, 35), 'int')
            # Getting the type of 'path' (line 3375)
            path_108407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3375, 21), 'path')
            # Obtaining the member 'vertices' of a type (line 3375)
            vertices_108408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3375, 21), path_108407, 'vertices')
            # Obtaining the member '__getitem__' of a type (line 3375)
            getitem___108409 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3375, 21), vertices_108408, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3375)
            subscript_call_result_108410 = invoke(stypy.reporting.localization.Localization(__file__, 3375, 21), getitem___108409, int_108406)
            
            # Obtaining the member '__getitem__' of a type (line 3375)
            getitem___108411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3375, 12), subscript_call_result_108410, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3375)
            subscript_call_result_108412 = invoke(stypy.reporting.localization.Localization(__file__, 3375, 12), getitem___108411, int_108405)
            
            # Assigning a type to the variable 'tuple_var_assignment_100622' (line 3375)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3375, 12), 'tuple_var_assignment_100622', subscript_call_result_108412)
            
            # Assigning a Subscript to a Name (line 3375):
            
            # Assigning a Subscript to a Name (line 3375):
            
            # Obtaining the type of the subscript
            int_108413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3375, 12), 'int')
            
            # Obtaining the type of the subscript
            int_108414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3375, 35), 'int')
            # Getting the type of 'path' (line 3375)
            path_108415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3375, 21), 'path')
            # Obtaining the member 'vertices' of a type (line 3375)
            vertices_108416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3375, 21), path_108415, 'vertices')
            # Obtaining the member '__getitem__' of a type (line 3375)
            getitem___108417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3375, 21), vertices_108416, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3375)
            subscript_call_result_108418 = invoke(stypy.reporting.localization.Localization(__file__, 3375, 21), getitem___108417, int_108414)
            
            # Obtaining the member '__getitem__' of a type (line 3375)
            getitem___108419 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3375, 12), subscript_call_result_108418, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3375)
            subscript_call_result_108420 = invoke(stypy.reporting.localization.Localization(__file__, 3375, 12), getitem___108419, int_108413)
            
            # Assigning a type to the variable 'tuple_var_assignment_100623' (line 3375)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3375, 12), 'tuple_var_assignment_100623', subscript_call_result_108420)
            
            # Assigning a Name to a Name (line 3375):
            
            # Assigning a Name to a Name (line 3375):
            # Getting the type of 'tuple_var_assignment_100622' (line 3375)
            tuple_var_assignment_100622_108421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3375, 12), 'tuple_var_assignment_100622')
            # Assigning a type to the variable 'x3' (line 3375)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3375, 12), 'x3', tuple_var_assignment_100622_108421)
            
            # Assigning a Name to a Name (line 3375):
            
            # Assigning a Name to a Name (line 3375):
            # Getting the type of 'tuple_var_assignment_100623' (line 3375)
            tuple_var_assignment_100623_108422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3375, 12), 'tuple_var_assignment_100623')
            # Assigning a type to the variable 'y3' (line 3375)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3375, 16), 'y3', tuple_var_assignment_100623_108422)
            
            # Assigning a BoolOp to a Name (line 3378):
            
            # Assigning a BoolOp to a Name (line 3378):
            
            # Assigning a BoolOp to a Name (line 3378):
            
            # Evaluating a boolean operation
            # Getting the type of 'self' (line 3378)
            self_108423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3378, 29), 'self')
            # Obtaining the member 'endarrow' of a type (line 3378)
            endarrow_108424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3378, 29), self_108423, 'endarrow')
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'x2' (line 3378)
            x2_108425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3378, 53), 'x2')
            # Getting the type of 'x3' (line 3378)
            x3_108426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3378, 59), 'x3')
            # Applying the binary operator '==' (line 3378)
            result_eq_108427 = python_operator(stypy.reporting.localization.Localization(__file__, 3378, 53), '==', x2_108425, x3_108426)
            
            
            # Getting the type of 'y2' (line 3378)
            y2_108428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3378, 68), 'y2')
            # Getting the type of 'y3' (line 3378)
            y3_108429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3378, 74), 'y3')
            # Applying the binary operator '==' (line 3378)
            result_eq_108430 = python_operator(stypy.reporting.localization.Localization(__file__, 3378, 68), '==', y2_108428, y3_108429)
            
            # Applying the binary operator 'and' (line 3378)
            result_and_keyword_108431 = python_operator(stypy.reporting.localization.Localization(__file__, 3378, 52), 'and', result_eq_108427, result_eq_108430)
            
            # Applying the 'not' unary operator (line 3378)
            result_not__108432 = python_operator(stypy.reporting.localization.Localization(__file__, 3378, 47), 'not', result_and_keyword_108431)
            
            # Applying the binary operator 'and' (line 3378)
            result_and_keyword_108433 = python_operator(stypy.reporting.localization.Localization(__file__, 3378, 29), 'and', endarrow_108424, result_not__108432)
            
            # Assigning a type to the variable 'has_end_arrow' (line 3378)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3378, 12), 'has_end_arrow', result_and_keyword_108433)
            
            # Getting the type of 'has_end_arrow' (line 3379)
            has_end_arrow_108434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3379, 15), 'has_end_arrow')
            # Testing the type of an if condition (line 3379)
            if_condition_108435 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3379, 12), has_end_arrow_108434)
            # Assigning a type to the variable 'if_condition_108435' (line 3379)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3379, 12), 'if_condition_108435', if_condition_108435)
            # SSA begins for if statement (line 3379)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Tuple (line 3380):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to _get_arrow_wedge(...): (line 3381)
            # Processing the call arguments (line 3381)
            # Getting the type of 'x2' (line 3381)
            x2_108438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3381, 49), 'x2', False)
            # Getting the type of 'y2' (line 3381)
            y2_108439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3381, 53), 'y2', False)
            # Getting the type of 'x3' (line 3381)
            x3_108440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3381, 57), 'x3', False)
            # Getting the type of 'y3' (line 3381)
            y3_108441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3381, 61), 'y3', False)
            # Getting the type of 'head_dist' (line 3382)
            head_dist_108442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3382, 49), 'head_dist', False)
            # Getting the type of 'cos_t' (line 3382)
            cos_t_108443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3382, 60), 'cos_t', False)
            # Getting the type of 'sin_t' (line 3382)
            sin_t_108444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3382, 67), 'sin_t', False)
            # Getting the type of 'linewidth' (line 3383)
            linewidth_108445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3383, 49), 'linewidth', False)
            # Processing the call keyword arguments (line 3381)
            kwargs_108446 = {}
            # Getting the type of 'self' (line 3381)
            self_108436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3381, 27), 'self', False)
            # Obtaining the member '_get_arrow_wedge' of a type (line 3381)
            _get_arrow_wedge_108437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3381, 27), self_108436, '_get_arrow_wedge')
            # Calling _get_arrow_wedge(args, kwargs) (line 3381)
            _get_arrow_wedge_call_result_108447 = invoke(stypy.reporting.localization.Localization(__file__, 3381, 27), _get_arrow_wedge_108437, *[x2_108438, y2_108439, x3_108440, y3_108441, head_dist_108442, cos_t_108443, sin_t_108444, linewidth_108445], **kwargs_108446)
            
            # Assigning a type to the variable 'call_assignment_100624' (line 3380)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3380, 16), 'call_assignment_100624', _get_arrow_wedge_call_result_108447)
            
            # Assigning a Call to a Name (line 3380):
            
            # Assigning a Call to a Name (line 3380):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_108450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3380, 16), 'int')
            # Processing the call keyword arguments
            kwargs_108451 = {}
            # Getting the type of 'call_assignment_100624' (line 3380)
            call_assignment_100624_108448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3380, 16), 'call_assignment_100624', False)
            # Obtaining the member '__getitem__' of a type (line 3380)
            getitem___108449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3380, 16), call_assignment_100624_108448, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_108452 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___108449, *[int_108450], **kwargs_108451)
            
            # Assigning a type to the variable 'call_assignment_100625' (line 3380)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3380, 16), 'call_assignment_100625', getitem___call_result_108452)
            
            # Assigning a Name to a Name (line 3380):
            
            # Assigning a Name to a Name (line 3380):
            # Getting the type of 'call_assignment_100625' (line 3380)
            call_assignment_100625_108453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3380, 16), 'call_assignment_100625')
            # Assigning a type to the variable 'verticesB' (line 3380)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3380, 16), 'verticesB', call_assignment_100625_108453)
            
            # Assigning a Call to a Name (line 3380):
            
            # Assigning a Call to a Name (line 3380):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_108456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3380, 16), 'int')
            # Processing the call keyword arguments
            kwargs_108457 = {}
            # Getting the type of 'call_assignment_100624' (line 3380)
            call_assignment_100624_108454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3380, 16), 'call_assignment_100624', False)
            # Obtaining the member '__getitem__' of a type (line 3380)
            getitem___108455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3380, 16), call_assignment_100624_108454, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_108458 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___108455, *[int_108456], **kwargs_108457)
            
            # Assigning a type to the variable 'call_assignment_100626' (line 3380)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3380, 16), 'call_assignment_100626', getitem___call_result_108458)
            
            # Assigning a Name to a Name (line 3380):
            
            # Assigning a Name to a Name (line 3380):
            # Getting the type of 'call_assignment_100626' (line 3380)
            call_assignment_100626_108459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3380, 16), 'call_assignment_100626')
            # Assigning a type to the variable 'codesB' (line 3380)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3380, 27), 'codesB', call_assignment_100626_108459)
            
            # Assigning a Call to a Name (line 3380):
            
            # Assigning a Call to a Name (line 3380):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_108462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3380, 16), 'int')
            # Processing the call keyword arguments
            kwargs_108463 = {}
            # Getting the type of 'call_assignment_100624' (line 3380)
            call_assignment_100624_108460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3380, 16), 'call_assignment_100624', False)
            # Obtaining the member '__getitem__' of a type (line 3380)
            getitem___108461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3380, 16), call_assignment_100624_108460, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_108464 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___108461, *[int_108462], **kwargs_108463)
            
            # Assigning a type to the variable 'call_assignment_100627' (line 3380)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3380, 16), 'call_assignment_100627', getitem___call_result_108464)
            
            # Assigning a Name to a Name (line 3380):
            
            # Assigning a Name to a Name (line 3380):
            # Getting the type of 'call_assignment_100627' (line 3380)
            call_assignment_100627_108465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3380, 16), 'call_assignment_100627')
            # Assigning a type to the variable 'ddxB' (line 3380)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3380, 35), 'ddxB', call_assignment_100627_108465)
            
            # Assigning a Call to a Name (line 3380):
            
            # Assigning a Call to a Name (line 3380):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_108468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3380, 16), 'int')
            # Processing the call keyword arguments
            kwargs_108469 = {}
            # Getting the type of 'call_assignment_100624' (line 3380)
            call_assignment_100624_108466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3380, 16), 'call_assignment_100624', False)
            # Obtaining the member '__getitem__' of a type (line 3380)
            getitem___108467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3380, 16), call_assignment_100624_108466, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_108470 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___108467, *[int_108468], **kwargs_108469)
            
            # Assigning a type to the variable 'call_assignment_100628' (line 3380)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3380, 16), 'call_assignment_100628', getitem___call_result_108470)
            
            # Assigning a Name to a Name (line 3380):
            
            # Assigning a Name to a Name (line 3380):
            # Getting the type of 'call_assignment_100628' (line 3380)
            call_assignment_100628_108471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3380, 16), 'call_assignment_100628')
            # Assigning a type to the variable 'ddyB' (line 3380)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3380, 41), 'ddyB', call_assignment_100628_108471)
            # SSA branch for the else part of an if statement (line 3379)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Tuple to a Tuple (line 3385):
            
            # Assigning a List to a Name (line 3385):
            
            # Assigning a List to a Name (line 3385):
            
            # Obtaining an instance of the builtin type 'list' (line 3385)
            list_108472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3385, 36), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3385)
            
            # Assigning a type to the variable 'tuple_assignment_100629' (line 3385)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3385, 16), 'tuple_assignment_100629', list_108472)
            
            # Assigning a List to a Name (line 3385):
            
            # Assigning a List to a Name (line 3385):
            
            # Obtaining an instance of the builtin type 'list' (line 3385)
            list_108473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3385, 40), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3385)
            
            # Assigning a type to the variable 'tuple_assignment_100630' (line 3385)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3385, 16), 'tuple_assignment_100630', list_108473)
            
            # Assigning a Name to a Name (line 3385):
            
            # Assigning a Name to a Name (line 3385):
            # Getting the type of 'tuple_assignment_100629' (line 3385)
            tuple_assignment_100629_108474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3385, 16), 'tuple_assignment_100629')
            # Assigning a type to the variable 'verticesB' (line 3385)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3385, 16), 'verticesB', tuple_assignment_100629_108474)
            
            # Assigning a Name to a Name (line 3385):
            
            # Assigning a Name to a Name (line 3385):
            # Getting the type of 'tuple_assignment_100630' (line 3385)
            tuple_assignment_100630_108475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3385, 16), 'tuple_assignment_100630')
            # Assigning a type to the variable 'codesB' (line 3385)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3385, 27), 'codesB', tuple_assignment_100630_108475)
            
            # Assigning a Tuple to a Tuple (line 3386):
            
            # Assigning a Num to a Name (line 3386):
            
            # Assigning a Num to a Name (line 3386):
            float_108476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3386, 29), 'float')
            # Assigning a type to the variable 'tuple_assignment_100631' (line 3386)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3386, 16), 'tuple_assignment_100631', float_108476)
            
            # Assigning a Num to a Name (line 3386):
            
            # Assigning a Num to a Name (line 3386):
            float_108477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3386, 33), 'float')
            # Assigning a type to the variable 'tuple_assignment_100632' (line 3386)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3386, 16), 'tuple_assignment_100632', float_108477)
            
            # Assigning a Name to a Name (line 3386):
            
            # Assigning a Name to a Name (line 3386):
            # Getting the type of 'tuple_assignment_100631' (line 3386)
            tuple_assignment_100631_108478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3386, 16), 'tuple_assignment_100631')
            # Assigning a type to the variable 'ddxB' (line 3386)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3386, 16), 'ddxB', tuple_assignment_100631_108478)
            
            # Assigning a Name to a Name (line 3386):
            
            # Assigning a Name to a Name (line 3386):
            # Getting the type of 'tuple_assignment_100632' (line 3386)
            tuple_assignment_100632_108479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3386, 16), 'tuple_assignment_100632')
            # Assigning a type to the variable 'ddyB' (line 3386)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3386, 22), 'ddyB', tuple_assignment_100632_108479)
            # SSA join for if statement (line 3379)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a List to a Name (line 3390):
            
            # Assigning a List to a Name (line 3390):
            
            # Assigning a List to a Name (line 3390):
            
            # Obtaining an instance of the builtin type 'list' (line 3390)
            list_108480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3390, 20), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3390)
            # Adding element type (line 3390)
            
            # Call to Path(...): (line 3390)
            # Processing the call arguments (line 3390)
            
            # Call to concatenate(...): (line 3390)
            # Processing the call arguments (line 3390)
            
            # Obtaining an instance of the builtin type 'list' (line 3390)
            list_108484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3390, 41), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3390)
            # Adding element type (line 3390)
            
            # Obtaining an instance of the builtin type 'list' (line 3390)
            list_108485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3390, 42), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3390)
            # Adding element type (line 3390)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3390)
            tuple_108486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3390, 44), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3390)
            # Adding element type (line 3390)
            # Getting the type of 'x0' (line 3390)
            x0_108487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3390, 44), 'x0', False)
            # Getting the type of 'ddxA' (line 3390)
            ddxA_108488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3390, 49), 'ddxA', False)
            # Applying the binary operator '+' (line 3390)
            result_add_108489 = python_operator(stypy.reporting.localization.Localization(__file__, 3390, 44), '+', x0_108487, ddxA_108488)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3390, 44), tuple_108486, result_add_108489)
            # Adding element type (line 3390)
            # Getting the type of 'y0' (line 3390)
            y0_108490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3390, 55), 'y0', False)
            # Getting the type of 'ddyA' (line 3390)
            ddyA_108491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3390, 60), 'ddyA', False)
            # Applying the binary operator '+' (line 3390)
            result_add_108492 = python_operator(stypy.reporting.localization.Localization(__file__, 3390, 55), '+', y0_108490, ddyA_108491)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3390, 44), tuple_108486, result_add_108492)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3390, 42), list_108485, tuple_108486)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3390, 41), list_108484, list_108485)
            # Adding element type (line 3390)
            
            # Obtaining the type of the subscript
            int_108493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3391, 56), 'int')
            int_108494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3391, 58), 'int')
            slice_108495 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3391, 42), int_108493, int_108494, None)
            # Getting the type of 'path' (line 3391)
            path_108496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3391, 42), 'path', False)
            # Obtaining the member 'vertices' of a type (line 3391)
            vertices_108497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3391, 42), path_108496, 'vertices')
            # Obtaining the member '__getitem__' of a type (line 3391)
            getitem___108498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3391, 42), vertices_108497, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3391)
            subscript_call_result_108499 = invoke(stypy.reporting.localization.Localization(__file__, 3391, 42), getitem___108498, slice_108495)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3390, 41), list_108484, subscript_call_result_108499)
            # Adding element type (line 3390)
            
            # Obtaining an instance of the builtin type 'list' (line 3392)
            list_108500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3392, 42), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3392)
            # Adding element type (line 3392)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3392)
            tuple_108501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3392, 44), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3392)
            # Adding element type (line 3392)
            # Getting the type of 'x3' (line 3392)
            x3_108502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3392, 44), 'x3', False)
            # Getting the type of 'ddxB' (line 3392)
            ddxB_108503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3392, 49), 'ddxB', False)
            # Applying the binary operator '+' (line 3392)
            result_add_108504 = python_operator(stypy.reporting.localization.Localization(__file__, 3392, 44), '+', x3_108502, ddxB_108503)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3392, 44), tuple_108501, result_add_108504)
            # Adding element type (line 3392)
            # Getting the type of 'y3' (line 3392)
            y3_108505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3392, 55), 'y3', False)
            # Getting the type of 'ddyB' (line 3392)
            ddyB_108506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3392, 60), 'ddyB', False)
            # Applying the binary operator '+' (line 3392)
            result_add_108507 = python_operator(stypy.reporting.localization.Localization(__file__, 3392, 55), '+', y3_108505, ddyB_108506)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3392, 44), tuple_108501, result_add_108507)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3392, 42), list_108500, tuple_108501)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3390, 41), list_108484, list_108500)
            
            # Processing the call keyword arguments (line 3390)
            kwargs_108508 = {}
            # Getting the type of 'np' (line 3390)
            np_108482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3390, 26), 'np', False)
            # Obtaining the member 'concatenate' of a type (line 3390)
            concatenate_108483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3390, 26), np_108482, 'concatenate')
            # Calling concatenate(args, kwargs) (line 3390)
            concatenate_call_result_108509 = invoke(stypy.reporting.localization.Localization(__file__, 3390, 26), concatenate_108483, *[list_108484], **kwargs_108508)
            
            # Getting the type of 'path' (line 3393)
            path_108510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3393, 26), 'path', False)
            # Obtaining the member 'codes' of a type (line 3393)
            codes_108511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3393, 26), path_108510, 'codes')
            # Processing the call keyword arguments (line 3390)
            kwargs_108512 = {}
            # Getting the type of 'Path' (line 3390)
            Path_108481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3390, 21), 'Path', False)
            # Calling Path(args, kwargs) (line 3390)
            Path_call_result_108513 = invoke(stypy.reporting.localization.Localization(__file__, 3390, 21), Path_108481, *[concatenate_call_result_108509, codes_108511], **kwargs_108512)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3390, 20), list_108480, Path_call_result_108513)
            
            # Assigning a type to the variable '_path' (line 3390)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3390, 12), '_path', list_108480)
            
            # Assigning a List to a Name (line 3394):
            
            # Assigning a List to a Name (line 3394):
            
            # Assigning a List to a Name (line 3394):
            
            # Obtaining an instance of the builtin type 'list' (line 3394)
            list_108514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3394, 24), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3394)
            # Adding element type (line 3394)
            # Getting the type of 'False' (line 3394)
            False_108515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3394, 25), 'False')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3394, 24), list_108514, False_108515)
            
            # Assigning a type to the variable '_fillable' (line 3394)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3394, 12), '_fillable', list_108514)
            
            # Getting the type of 'has_begin_arrow' (line 3396)
            has_begin_arrow_108516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3396, 15), 'has_begin_arrow')
            # Testing the type of an if condition (line 3396)
            if_condition_108517 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3396, 12), has_begin_arrow_108516)
            # Assigning a type to the variable 'if_condition_108517' (line 3396)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3396, 12), 'if_condition_108517', if_condition_108517)
            # SSA begins for if statement (line 3396)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Getting the type of 'self' (line 3397)
            self_108518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3397, 19), 'self')
            # Obtaining the member 'fillbegin' of a type (line 3397)
            fillbegin_108519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3397, 19), self_108518, 'fillbegin')
            # Testing the type of an if condition (line 3397)
            if_condition_108520 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3397, 16), fillbegin_108519)
            # Assigning a type to the variable 'if_condition_108520' (line 3397)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3397, 16), 'if_condition_108520', if_condition_108520)
            # SSA begins for if statement (line 3397)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 3398):
            
            # Assigning a Call to a Name (line 3398):
            
            # Assigning a Call to a Name (line 3398):
            
            # Call to concatenate(...): (line 3398)
            # Processing the call arguments (line 3398)
            
            # Obtaining an instance of the builtin type 'list' (line 3398)
            list_108523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3398, 39), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3398)
            # Adding element type (line 3398)
            # Getting the type of 'verticesA' (line 3398)
            verticesA_108524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3398, 40), 'verticesA', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3398, 39), list_108523, verticesA_108524)
            # Adding element type (line 3398)
            
            # Obtaining an instance of the builtin type 'list' (line 3398)
            list_108525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3398, 51), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3398)
            # Adding element type (line 3398)
            
            # Obtaining the type of the subscript
            int_108526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3398, 62), 'int')
            # Getting the type of 'verticesA' (line 3398)
            verticesA_108527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3398, 52), 'verticesA', False)
            # Obtaining the member '__getitem__' of a type (line 3398)
            getitem___108528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3398, 52), verticesA_108527, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3398)
            subscript_call_result_108529 = invoke(stypy.reporting.localization.Localization(__file__, 3398, 52), getitem___108528, int_108526)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3398, 51), list_108525, subscript_call_result_108529)
            # Adding element type (line 3398)
            
            # Obtaining the type of the subscript
            int_108530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3399, 62), 'int')
            # Getting the type of 'verticesA' (line 3399)
            verticesA_108531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3399, 52), 'verticesA', False)
            # Obtaining the member '__getitem__' of a type (line 3399)
            getitem___108532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3399, 52), verticesA_108531, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3399)
            subscript_call_result_108533 = invoke(stypy.reporting.localization.Localization(__file__, 3399, 52), getitem___108532, int_108530)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3398, 51), list_108525, subscript_call_result_108533)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3398, 39), list_108523, list_108525)
            
            # Processing the call keyword arguments (line 3398)
            kwargs_108534 = {}
            # Getting the type of 'np' (line 3398)
            np_108521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3398, 24), 'np', False)
            # Obtaining the member 'concatenate' of a type (line 3398)
            concatenate_108522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3398, 24), np_108521, 'concatenate')
            # Calling concatenate(args, kwargs) (line 3398)
            concatenate_call_result_108535 = invoke(stypy.reporting.localization.Localization(__file__, 3398, 24), concatenate_108522, *[list_108523], **kwargs_108534)
            
            # Assigning a type to the variable 'p' (line 3398)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3398, 20), 'p', concatenate_call_result_108535)
            
            # Assigning a Call to a Name (line 3400):
            
            # Assigning a Call to a Name (line 3400):
            
            # Assigning a Call to a Name (line 3400):
            
            # Call to concatenate(...): (line 3400)
            # Processing the call arguments (line 3400)
            
            # Obtaining an instance of the builtin type 'list' (line 3400)
            list_108538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3400, 39), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3400)
            # Adding element type (line 3400)
            # Getting the type of 'codesA' (line 3400)
            codesA_108539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3400, 40), 'codesA', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3400, 39), list_108538, codesA_108539)
            # Adding element type (line 3400)
            
            # Obtaining an instance of the builtin type 'list' (line 3400)
            list_108540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3400, 48), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3400)
            # Adding element type (line 3400)
            # Getting the type of 'Path' (line 3400)
            Path_108541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3400, 49), 'Path', False)
            # Obtaining the member 'LINETO' of a type (line 3400)
            LINETO_108542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3400, 49), Path_108541, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3400, 48), list_108540, LINETO_108542)
            # Adding element type (line 3400)
            # Getting the type of 'Path' (line 3400)
            Path_108543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3400, 62), 'Path', False)
            # Obtaining the member 'CLOSEPOLY' of a type (line 3400)
            CLOSEPOLY_108544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3400, 62), Path_108543, 'CLOSEPOLY')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3400, 48), list_108540, CLOSEPOLY_108544)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3400, 39), list_108538, list_108540)
            
            # Processing the call keyword arguments (line 3400)
            kwargs_108545 = {}
            # Getting the type of 'np' (line 3400)
            np_108536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3400, 24), 'np', False)
            # Obtaining the member 'concatenate' of a type (line 3400)
            concatenate_108537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3400, 24), np_108536, 'concatenate')
            # Calling concatenate(args, kwargs) (line 3400)
            concatenate_call_result_108546 = invoke(stypy.reporting.localization.Localization(__file__, 3400, 24), concatenate_108537, *[list_108538], **kwargs_108545)
            
            # Assigning a type to the variable 'c' (line 3400)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3400, 20), 'c', concatenate_call_result_108546)
            
            # Call to append(...): (line 3401)
            # Processing the call arguments (line 3401)
            
            # Call to Path(...): (line 3401)
            # Processing the call arguments (line 3401)
            # Getting the type of 'p' (line 3401)
            p_108550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3401, 38), 'p', False)
            # Getting the type of 'c' (line 3401)
            c_108551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3401, 41), 'c', False)
            # Processing the call keyword arguments (line 3401)
            kwargs_108552 = {}
            # Getting the type of 'Path' (line 3401)
            Path_108549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3401, 33), 'Path', False)
            # Calling Path(args, kwargs) (line 3401)
            Path_call_result_108553 = invoke(stypy.reporting.localization.Localization(__file__, 3401, 33), Path_108549, *[p_108550, c_108551], **kwargs_108552)
            
            # Processing the call keyword arguments (line 3401)
            kwargs_108554 = {}
            # Getting the type of '_path' (line 3401)
            _path_108547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3401, 20), '_path', False)
            # Obtaining the member 'append' of a type (line 3401)
            append_108548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3401, 20), _path_108547, 'append')
            # Calling append(args, kwargs) (line 3401)
            append_call_result_108555 = invoke(stypy.reporting.localization.Localization(__file__, 3401, 20), append_108548, *[Path_call_result_108553], **kwargs_108554)
            
            
            # Call to append(...): (line 3402)
            # Processing the call arguments (line 3402)
            # Getting the type of 'True' (line 3402)
            True_108558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3402, 37), 'True', False)
            # Processing the call keyword arguments (line 3402)
            kwargs_108559 = {}
            # Getting the type of '_fillable' (line 3402)
            _fillable_108556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3402, 20), '_fillable', False)
            # Obtaining the member 'append' of a type (line 3402)
            append_108557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3402, 20), _fillable_108556, 'append')
            # Calling append(args, kwargs) (line 3402)
            append_call_result_108560 = invoke(stypy.reporting.localization.Localization(__file__, 3402, 20), append_108557, *[True_108558], **kwargs_108559)
            
            # SSA branch for the else part of an if statement (line 3397)
            module_type_store.open_ssa_branch('else')
            
            # Call to append(...): (line 3404)
            # Processing the call arguments (line 3404)
            
            # Call to Path(...): (line 3404)
            # Processing the call arguments (line 3404)
            # Getting the type of 'verticesA' (line 3404)
            verticesA_108564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3404, 38), 'verticesA', False)
            # Getting the type of 'codesA' (line 3404)
            codesA_108565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3404, 49), 'codesA', False)
            # Processing the call keyword arguments (line 3404)
            kwargs_108566 = {}
            # Getting the type of 'Path' (line 3404)
            Path_108563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3404, 33), 'Path', False)
            # Calling Path(args, kwargs) (line 3404)
            Path_call_result_108567 = invoke(stypy.reporting.localization.Localization(__file__, 3404, 33), Path_108563, *[verticesA_108564, codesA_108565], **kwargs_108566)
            
            # Processing the call keyword arguments (line 3404)
            kwargs_108568 = {}
            # Getting the type of '_path' (line 3404)
            _path_108561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3404, 20), '_path', False)
            # Obtaining the member 'append' of a type (line 3404)
            append_108562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3404, 20), _path_108561, 'append')
            # Calling append(args, kwargs) (line 3404)
            append_call_result_108569 = invoke(stypy.reporting.localization.Localization(__file__, 3404, 20), append_108562, *[Path_call_result_108567], **kwargs_108568)
            
            
            # Call to append(...): (line 3405)
            # Processing the call arguments (line 3405)
            # Getting the type of 'False' (line 3405)
            False_108572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3405, 37), 'False', False)
            # Processing the call keyword arguments (line 3405)
            kwargs_108573 = {}
            # Getting the type of '_fillable' (line 3405)
            _fillable_108570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3405, 20), '_fillable', False)
            # Obtaining the member 'append' of a type (line 3405)
            append_108571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3405, 20), _fillable_108570, 'append')
            # Calling append(args, kwargs) (line 3405)
            append_call_result_108574 = invoke(stypy.reporting.localization.Localization(__file__, 3405, 20), append_108571, *[False_108572], **kwargs_108573)
            
            # SSA join for if statement (line 3397)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 3396)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Getting the type of 'has_end_arrow' (line 3407)
            has_end_arrow_108575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3407, 15), 'has_end_arrow')
            # Testing the type of an if condition (line 3407)
            if_condition_108576 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3407, 12), has_end_arrow_108575)
            # Assigning a type to the variable 'if_condition_108576' (line 3407)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3407, 12), 'if_condition_108576', if_condition_108576)
            # SSA begins for if statement (line 3407)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Getting the type of 'self' (line 3408)
            self_108577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3408, 19), 'self')
            # Obtaining the member 'fillend' of a type (line 3408)
            fillend_108578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3408, 19), self_108577, 'fillend')
            # Testing the type of an if condition (line 3408)
            if_condition_108579 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3408, 16), fillend_108578)
            # Assigning a type to the variable 'if_condition_108579' (line 3408)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3408, 16), 'if_condition_108579', if_condition_108579)
            # SSA begins for if statement (line 3408)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to append(...): (line 3409)
            # Processing the call arguments (line 3409)
            # Getting the type of 'True' (line 3409)
            True_108582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3409, 37), 'True', False)
            # Processing the call keyword arguments (line 3409)
            kwargs_108583 = {}
            # Getting the type of '_fillable' (line 3409)
            _fillable_108580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3409, 20), '_fillable', False)
            # Obtaining the member 'append' of a type (line 3409)
            append_108581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3409, 20), _fillable_108580, 'append')
            # Calling append(args, kwargs) (line 3409)
            append_call_result_108584 = invoke(stypy.reporting.localization.Localization(__file__, 3409, 20), append_108581, *[True_108582], **kwargs_108583)
            
            
            # Assigning a Call to a Name (line 3410):
            
            # Assigning a Call to a Name (line 3410):
            
            # Assigning a Call to a Name (line 3410):
            
            # Call to concatenate(...): (line 3410)
            # Processing the call arguments (line 3410)
            
            # Obtaining an instance of the builtin type 'list' (line 3410)
            list_108587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3410, 39), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3410)
            # Adding element type (line 3410)
            # Getting the type of 'verticesB' (line 3410)
            verticesB_108588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3410, 40), 'verticesB', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3410, 39), list_108587, verticesB_108588)
            # Adding element type (line 3410)
            
            # Obtaining an instance of the builtin type 'list' (line 3410)
            list_108589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3410, 51), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3410)
            # Adding element type (line 3410)
            
            # Obtaining the type of the subscript
            int_108590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3410, 62), 'int')
            # Getting the type of 'verticesB' (line 3410)
            verticesB_108591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3410, 52), 'verticesB', False)
            # Obtaining the member '__getitem__' of a type (line 3410)
            getitem___108592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3410, 52), verticesB_108591, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3410)
            subscript_call_result_108593 = invoke(stypy.reporting.localization.Localization(__file__, 3410, 52), getitem___108592, int_108590)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3410, 51), list_108589, subscript_call_result_108593)
            # Adding element type (line 3410)
            
            # Obtaining the type of the subscript
            int_108594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3411, 62), 'int')
            # Getting the type of 'verticesB' (line 3411)
            verticesB_108595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3411, 52), 'verticesB', False)
            # Obtaining the member '__getitem__' of a type (line 3411)
            getitem___108596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3411, 52), verticesB_108595, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3411)
            subscript_call_result_108597 = invoke(stypy.reporting.localization.Localization(__file__, 3411, 52), getitem___108596, int_108594)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3410, 51), list_108589, subscript_call_result_108597)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3410, 39), list_108587, list_108589)
            
            # Processing the call keyword arguments (line 3410)
            kwargs_108598 = {}
            # Getting the type of 'np' (line 3410)
            np_108585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3410, 24), 'np', False)
            # Obtaining the member 'concatenate' of a type (line 3410)
            concatenate_108586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3410, 24), np_108585, 'concatenate')
            # Calling concatenate(args, kwargs) (line 3410)
            concatenate_call_result_108599 = invoke(stypy.reporting.localization.Localization(__file__, 3410, 24), concatenate_108586, *[list_108587], **kwargs_108598)
            
            # Assigning a type to the variable 'p' (line 3410)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3410, 20), 'p', concatenate_call_result_108599)
            
            # Assigning a Call to a Name (line 3412):
            
            # Assigning a Call to a Name (line 3412):
            
            # Assigning a Call to a Name (line 3412):
            
            # Call to concatenate(...): (line 3412)
            # Processing the call arguments (line 3412)
            
            # Obtaining an instance of the builtin type 'list' (line 3412)
            list_108602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3412, 39), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3412)
            # Adding element type (line 3412)
            # Getting the type of 'codesB' (line 3412)
            codesB_108603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3412, 40), 'codesB', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3412, 39), list_108602, codesB_108603)
            # Adding element type (line 3412)
            
            # Obtaining an instance of the builtin type 'list' (line 3412)
            list_108604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3412, 48), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3412)
            # Adding element type (line 3412)
            # Getting the type of 'Path' (line 3412)
            Path_108605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3412, 49), 'Path', False)
            # Obtaining the member 'LINETO' of a type (line 3412)
            LINETO_108606 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3412, 49), Path_108605, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3412, 48), list_108604, LINETO_108606)
            # Adding element type (line 3412)
            # Getting the type of 'Path' (line 3412)
            Path_108607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3412, 62), 'Path', False)
            # Obtaining the member 'CLOSEPOLY' of a type (line 3412)
            CLOSEPOLY_108608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3412, 62), Path_108607, 'CLOSEPOLY')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3412, 48), list_108604, CLOSEPOLY_108608)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3412, 39), list_108602, list_108604)
            
            # Processing the call keyword arguments (line 3412)
            kwargs_108609 = {}
            # Getting the type of 'np' (line 3412)
            np_108600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3412, 24), 'np', False)
            # Obtaining the member 'concatenate' of a type (line 3412)
            concatenate_108601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3412, 24), np_108600, 'concatenate')
            # Calling concatenate(args, kwargs) (line 3412)
            concatenate_call_result_108610 = invoke(stypy.reporting.localization.Localization(__file__, 3412, 24), concatenate_108601, *[list_108602], **kwargs_108609)
            
            # Assigning a type to the variable 'c' (line 3412)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3412, 20), 'c', concatenate_call_result_108610)
            
            # Call to append(...): (line 3413)
            # Processing the call arguments (line 3413)
            
            # Call to Path(...): (line 3413)
            # Processing the call arguments (line 3413)
            # Getting the type of 'p' (line 3413)
            p_108614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3413, 38), 'p', False)
            # Getting the type of 'c' (line 3413)
            c_108615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3413, 41), 'c', False)
            # Processing the call keyword arguments (line 3413)
            kwargs_108616 = {}
            # Getting the type of 'Path' (line 3413)
            Path_108613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3413, 33), 'Path', False)
            # Calling Path(args, kwargs) (line 3413)
            Path_call_result_108617 = invoke(stypy.reporting.localization.Localization(__file__, 3413, 33), Path_108613, *[p_108614, c_108615], **kwargs_108616)
            
            # Processing the call keyword arguments (line 3413)
            kwargs_108618 = {}
            # Getting the type of '_path' (line 3413)
            _path_108611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3413, 20), '_path', False)
            # Obtaining the member 'append' of a type (line 3413)
            append_108612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3413, 20), _path_108611, 'append')
            # Calling append(args, kwargs) (line 3413)
            append_call_result_108619 = invoke(stypy.reporting.localization.Localization(__file__, 3413, 20), append_108612, *[Path_call_result_108617], **kwargs_108618)
            
            # SSA branch for the else part of an if statement (line 3408)
            module_type_store.open_ssa_branch('else')
            
            # Call to append(...): (line 3415)
            # Processing the call arguments (line 3415)
            # Getting the type of 'False' (line 3415)
            False_108622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3415, 37), 'False', False)
            # Processing the call keyword arguments (line 3415)
            kwargs_108623 = {}
            # Getting the type of '_fillable' (line 3415)
            _fillable_108620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3415, 20), '_fillable', False)
            # Obtaining the member 'append' of a type (line 3415)
            append_108621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3415, 20), _fillable_108620, 'append')
            # Calling append(args, kwargs) (line 3415)
            append_call_result_108624 = invoke(stypy.reporting.localization.Localization(__file__, 3415, 20), append_108621, *[False_108622], **kwargs_108623)
            
            
            # Call to append(...): (line 3416)
            # Processing the call arguments (line 3416)
            
            # Call to Path(...): (line 3416)
            # Processing the call arguments (line 3416)
            # Getting the type of 'verticesB' (line 3416)
            verticesB_108628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3416, 38), 'verticesB', False)
            # Getting the type of 'codesB' (line 3416)
            codesB_108629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3416, 49), 'codesB', False)
            # Processing the call keyword arguments (line 3416)
            kwargs_108630 = {}
            # Getting the type of 'Path' (line 3416)
            Path_108627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3416, 33), 'Path', False)
            # Calling Path(args, kwargs) (line 3416)
            Path_call_result_108631 = invoke(stypy.reporting.localization.Localization(__file__, 3416, 33), Path_108627, *[verticesB_108628, codesB_108629], **kwargs_108630)
            
            # Processing the call keyword arguments (line 3416)
            kwargs_108632 = {}
            # Getting the type of '_path' (line 3416)
            _path_108625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3416, 20), '_path', False)
            # Obtaining the member 'append' of a type (line 3416)
            append_108626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3416, 20), _path_108625, 'append')
            # Calling append(args, kwargs) (line 3416)
            append_call_result_108633 = invoke(stypy.reporting.localization.Localization(__file__, 3416, 20), append_108626, *[Path_call_result_108631], **kwargs_108632)
            
            # SSA join for if statement (line 3408)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 3407)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Obtaining an instance of the builtin type 'tuple' (line 3418)
            tuple_108634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3418, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3418)
            # Adding element type (line 3418)
            # Getting the type of '_path' (line 3418)
            _path_108635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3418, 19), '_path')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3418, 19), tuple_108634, _path_108635)
            # Adding element type (line 3418)
            # Getting the type of '_fillable' (line 3418)
            _fillable_108636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3418, 26), '_fillable')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3418, 19), tuple_108634, _fillable_108636)
            
            # Assigning a type to the variable 'stypy_return_type' (line 3418)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3418, 12), 'stypy_return_type', tuple_108634)
            
            # ################# End of 'transmute(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'transmute' in the type store
            # Getting the type of 'stypy_return_type' (line 3351)
            stypy_return_type_108637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3351, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_108637)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'transmute'
            return stypy_return_type_108637

    
    # Assigning a type to the variable '_Curve' (line 3285)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3285, 4), '_Curve', _Curve)
    # Declaration of the 'Curve' class
    # Getting the type of '_Curve' (line 3420)
    _Curve_108638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3420, 16), '_Curve')

    class Curve(_Curve_108638, ):
        unicode_108639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3423, (-1)), 'unicode', u'\n        A simple curve without any arrow head.\n        ')

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 3425, 8, False)
            # Assigning a type to the variable 'self' (line 3426)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3426, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Curve.__init__', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            
            # Call to __init__(...): (line 3426)
            # Processing the call keyword arguments (line 3426)
            # Getting the type of 'False' (line 3427)
            False_108647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3427, 27), 'False', False)
            keyword_108648 = False_108647
            # Getting the type of 'False' (line 3427)
            False_108649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3427, 43), 'False', False)
            keyword_108650 = False_108649
            kwargs_108651 = {'beginarrow': keyword_108648, 'endarrow': keyword_108650}
            
            # Call to super(...): (line 3426)
            # Processing the call arguments (line 3426)
            # Getting the type of 'ArrowStyle' (line 3426)
            ArrowStyle_108641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3426, 18), 'ArrowStyle', False)
            # Obtaining the member 'Curve' of a type (line 3426)
            Curve_108642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3426, 18), ArrowStyle_108641, 'Curve')
            # Getting the type of 'self' (line 3426)
            self_108643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3426, 36), 'self', False)
            # Processing the call keyword arguments (line 3426)
            kwargs_108644 = {}
            # Getting the type of 'super' (line 3426)
            super_108640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3426, 12), 'super', False)
            # Calling super(args, kwargs) (line 3426)
            super_call_result_108645 = invoke(stypy.reporting.localization.Localization(__file__, 3426, 12), super_108640, *[Curve_108642, self_108643], **kwargs_108644)
            
            # Obtaining the member '__init__' of a type (line 3426)
            init___108646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3426, 12), super_call_result_108645, '__init__')
            # Calling __init__(args, kwargs) (line 3426)
            init___call_result_108652 = invoke(stypy.reporting.localization.Localization(__file__, 3426, 12), init___108646, *[], **kwargs_108651)
            
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()

    
    # Assigning a type to the variable 'Curve' (line 3420)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3420, 4), 'Curve', Curve)
    
    # Assigning a Name to a Subscript (line 3429):
    
    # Assigning a Name to a Subscript (line 3429):
    # Declaration of the 'CurveA' class
    # Getting the type of '_Curve' (line 3431)
    _Curve_108653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3431, 17), '_Curve')

    class CurveA(_Curve_108653, ):
        unicode_108654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3434, (-1)), 'unicode', u'\n        An arrow with a head at its begin point.\n        ')

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            float_108655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3436, 39), 'float')
            float_108656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3436, 54), 'float')
            defaults = [float_108655, float_108656]
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 3436, 8, False)
            # Assigning a type to the variable 'self' (line 3437)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3437, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'CurveA.__init__', ['head_length', 'head_width'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, ['head_length', 'head_width'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            unicode_108657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3445, (-1)), 'unicode', u'\n            Parameters\n            ----------\n            head_length : float, optional, default : 0.4\n                Length of the arrow head\n\n            head_width : float, optional, default : 0.2\n                Width of the arrow head\n            ')
            
            # Call to __init__(...): (line 3447)
            # Processing the call keyword arguments (line 3447)
            # Getting the type of 'True' (line 3448)
            True_108665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3448, 29), 'True', False)
            keyword_108666 = True_108665
            # Getting the type of 'False' (line 3448)
            False_108667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3448, 44), 'False', False)
            keyword_108668 = False_108667
            # Getting the type of 'head_length' (line 3449)
            head_length_108669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3449, 30), 'head_length', False)
            keyword_108670 = head_length_108669
            # Getting the type of 'head_width' (line 3449)
            head_width_108671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3449, 54), 'head_width', False)
            keyword_108672 = head_width_108671
            kwargs_108673 = {'beginarrow': keyword_108666, 'head_width': keyword_108672, 'endarrow': keyword_108668, 'head_length': keyword_108670}
            
            # Call to super(...): (line 3447)
            # Processing the call arguments (line 3447)
            # Getting the type of 'ArrowStyle' (line 3447)
            ArrowStyle_108659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3447, 18), 'ArrowStyle', False)
            # Obtaining the member 'CurveA' of a type (line 3447)
            CurveA_108660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3447, 18), ArrowStyle_108659, 'CurveA')
            # Getting the type of 'self' (line 3447)
            self_108661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3447, 37), 'self', False)
            # Processing the call keyword arguments (line 3447)
            kwargs_108662 = {}
            # Getting the type of 'super' (line 3447)
            super_108658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3447, 12), 'super', False)
            # Calling super(args, kwargs) (line 3447)
            super_call_result_108663 = invoke(stypy.reporting.localization.Localization(__file__, 3447, 12), super_108658, *[CurveA_108660, self_108661], **kwargs_108662)
            
            # Obtaining the member '__init__' of a type (line 3447)
            init___108664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3447, 12), super_call_result_108663, '__init__')
            # Calling __init__(args, kwargs) (line 3447)
            init___call_result_108674 = invoke(stypy.reporting.localization.Localization(__file__, 3447, 12), init___108664, *[], **kwargs_108673)
            
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()

    
    # Assigning a type to the variable 'CurveA' (line 3431)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3431, 4), 'CurveA', CurveA)
    
    # Assigning a Name to a Subscript (line 3451):
    
    # Assigning a Name to a Subscript (line 3451):
    # Declaration of the 'CurveB' class
    # Getting the type of '_Curve' (line 3453)
    _Curve_108675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3453, 17), '_Curve')

    class CurveB(_Curve_108675, ):
        unicode_108676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3456, (-1)), 'unicode', u'\n        An arrow with a head at its end point.\n        ')

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            float_108677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3458, 39), 'float')
            float_108678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3458, 54), 'float')
            defaults = [float_108677, float_108678]
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 3458, 8, False)
            # Assigning a type to the variable 'self' (line 3459)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3459, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'CurveB.__init__', ['head_length', 'head_width'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, ['head_length', 'head_width'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            unicode_108679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3467, (-1)), 'unicode', u'\n            Parameters\n            ----------\n            head_length : float, optional, default : 0.4\n                Length of the arrow head\n\n            head_width : float, optional, default : 0.2\n                Width of the arrow head\n            ')
            
            # Call to __init__(...): (line 3469)
            # Processing the call keyword arguments (line 3469)
            # Getting the type of 'False' (line 3470)
            False_108687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3470, 27), 'False', False)
            keyword_108688 = False_108687
            # Getting the type of 'True' (line 3470)
            True_108689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3470, 43), 'True', False)
            keyword_108690 = True_108689
            # Getting the type of 'head_length' (line 3471)
            head_length_108691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3471, 28), 'head_length', False)
            keyword_108692 = head_length_108691
            # Getting the type of 'head_width' (line 3471)
            head_width_108693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3471, 52), 'head_width', False)
            keyword_108694 = head_width_108693
            kwargs_108695 = {'beginarrow': keyword_108688, 'head_width': keyword_108694, 'endarrow': keyword_108690, 'head_length': keyword_108692}
            
            # Call to super(...): (line 3469)
            # Processing the call arguments (line 3469)
            # Getting the type of 'ArrowStyle' (line 3469)
            ArrowStyle_108681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3469, 18), 'ArrowStyle', False)
            # Obtaining the member 'CurveB' of a type (line 3469)
            CurveB_108682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3469, 18), ArrowStyle_108681, 'CurveB')
            # Getting the type of 'self' (line 3469)
            self_108683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3469, 37), 'self', False)
            # Processing the call keyword arguments (line 3469)
            kwargs_108684 = {}
            # Getting the type of 'super' (line 3469)
            super_108680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3469, 12), 'super', False)
            # Calling super(args, kwargs) (line 3469)
            super_call_result_108685 = invoke(stypy.reporting.localization.Localization(__file__, 3469, 12), super_108680, *[CurveB_108682, self_108683], **kwargs_108684)
            
            # Obtaining the member '__init__' of a type (line 3469)
            init___108686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3469, 12), super_call_result_108685, '__init__')
            # Calling __init__(args, kwargs) (line 3469)
            init___call_result_108696 = invoke(stypy.reporting.localization.Localization(__file__, 3469, 12), init___108686, *[], **kwargs_108695)
            
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()

    
    # Assigning a type to the variable 'CurveB' (line 3453)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3453, 4), 'CurveB', CurveB)
    
    # Assigning a Name to a Subscript (line 3473):
    
    # Assigning a Name to a Subscript (line 3473):
    # Declaration of the 'CurveAB' class
    # Getting the type of '_Curve' (line 3475)
    _Curve_108697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3475, 18), '_Curve')

    class CurveAB(_Curve_108697, ):
        unicode_108698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3478, (-1)), 'unicode', u'\n        An arrow with heads both at the begin and the end point.\n        ')

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            float_108699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3480, 39), 'float')
            float_108700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3480, 54), 'float')
            defaults = [float_108699, float_108700]
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 3480, 8, False)
            # Assigning a type to the variable 'self' (line 3481)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3481, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'CurveAB.__init__', ['head_length', 'head_width'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, ['head_length', 'head_width'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            unicode_108701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3489, (-1)), 'unicode', u'\n            Parameters\n            ----------\n            head_length : float, optional, default : 0.4\n                Length of the arrow head\n\n            head_width : float, optional, default : 0.2\n                Width of the arrow head\n            ')
            
            # Call to __init__(...): (line 3491)
            # Processing the call keyword arguments (line 3491)
            # Getting the type of 'True' (line 3492)
            True_108709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3492, 27), 'True', False)
            keyword_108710 = True_108709
            # Getting the type of 'True' (line 3492)
            True_108711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3492, 42), 'True', False)
            keyword_108712 = True_108711
            # Getting the type of 'head_length' (line 3493)
            head_length_108713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3493, 28), 'head_length', False)
            keyword_108714 = head_length_108713
            # Getting the type of 'head_width' (line 3493)
            head_width_108715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3493, 52), 'head_width', False)
            keyword_108716 = head_width_108715
            kwargs_108717 = {'beginarrow': keyword_108710, 'head_width': keyword_108716, 'endarrow': keyword_108712, 'head_length': keyword_108714}
            
            # Call to super(...): (line 3491)
            # Processing the call arguments (line 3491)
            # Getting the type of 'ArrowStyle' (line 3491)
            ArrowStyle_108703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3491, 18), 'ArrowStyle', False)
            # Obtaining the member 'CurveAB' of a type (line 3491)
            CurveAB_108704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3491, 18), ArrowStyle_108703, 'CurveAB')
            # Getting the type of 'self' (line 3491)
            self_108705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3491, 38), 'self', False)
            # Processing the call keyword arguments (line 3491)
            kwargs_108706 = {}
            # Getting the type of 'super' (line 3491)
            super_108702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3491, 12), 'super', False)
            # Calling super(args, kwargs) (line 3491)
            super_call_result_108707 = invoke(stypy.reporting.localization.Localization(__file__, 3491, 12), super_108702, *[CurveAB_108704, self_108705], **kwargs_108706)
            
            # Obtaining the member '__init__' of a type (line 3491)
            init___108708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3491, 12), super_call_result_108707, '__init__')
            # Calling __init__(args, kwargs) (line 3491)
            init___call_result_108718 = invoke(stypy.reporting.localization.Localization(__file__, 3491, 12), init___108708, *[], **kwargs_108717)
            
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()

    
    # Assigning a type to the variable 'CurveAB' (line 3475)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3475, 4), 'CurveAB', CurveAB)
    
    # Assigning a Name to a Subscript (line 3495):
    
    # Assigning a Name to a Subscript (line 3495):
    # Declaration of the 'CurveFilledA' class
    # Getting the type of '_Curve' (line 3497)
    _Curve_108719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3497, 23), '_Curve')

    class CurveFilledA(_Curve_108719, ):
        unicode_108720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3500, (-1)), 'unicode', u'\n        An arrow with filled triangle head at the begin.\n        ')

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            float_108721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3502, 39), 'float')
            float_108722 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3502, 54), 'float')
            defaults = [float_108721, float_108722]
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 3502, 8, False)
            # Assigning a type to the variable 'self' (line 3503)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3503, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'CurveFilledA.__init__', ['head_length', 'head_width'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, ['head_length', 'head_width'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            unicode_108723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3511, (-1)), 'unicode', u'\n            Parameters\n            ----------\n            head_length : float, optional, default : 0.4\n                Length of the arrow head\n\n            head_width : float, optional, default : 0.2\n                Width of the arrow head\n            ')
            
            # Call to __init__(...): (line 3513)
            # Processing the call keyword arguments (line 3513)
            # Getting the type of 'True' (line 3514)
            True_108731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3514, 27), 'True', False)
            keyword_108732 = True_108731
            # Getting the type of 'False' (line 3514)
            False_108733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3514, 42), 'False', False)
            keyword_108734 = False_108733
            # Getting the type of 'True' (line 3515)
            True_108735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3515, 26), 'True', False)
            keyword_108736 = True_108735
            # Getting the type of 'False' (line 3515)
            False_108737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3515, 40), 'False', False)
            keyword_108738 = False_108737
            # Getting the type of 'head_length' (line 3516)
            head_length_108739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3516, 28), 'head_length', False)
            keyword_108740 = head_length_108739
            # Getting the type of 'head_width' (line 3516)
            head_width_108741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3516, 52), 'head_width', False)
            keyword_108742 = head_width_108741
            kwargs_108743 = {'head_length': keyword_108740, 'beginarrow': keyword_108732, 'head_width': keyword_108742, 'endarrow': keyword_108734, 'fillend': keyword_108738, 'fillbegin': keyword_108736}
            
            # Call to super(...): (line 3513)
            # Processing the call arguments (line 3513)
            # Getting the type of 'ArrowStyle' (line 3513)
            ArrowStyle_108725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3513, 18), 'ArrowStyle', False)
            # Obtaining the member 'CurveFilledA' of a type (line 3513)
            CurveFilledA_108726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3513, 18), ArrowStyle_108725, 'CurveFilledA')
            # Getting the type of 'self' (line 3513)
            self_108727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3513, 43), 'self', False)
            # Processing the call keyword arguments (line 3513)
            kwargs_108728 = {}
            # Getting the type of 'super' (line 3513)
            super_108724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3513, 12), 'super', False)
            # Calling super(args, kwargs) (line 3513)
            super_call_result_108729 = invoke(stypy.reporting.localization.Localization(__file__, 3513, 12), super_108724, *[CurveFilledA_108726, self_108727], **kwargs_108728)
            
            # Obtaining the member '__init__' of a type (line 3513)
            init___108730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3513, 12), super_call_result_108729, '__init__')
            # Calling __init__(args, kwargs) (line 3513)
            init___call_result_108744 = invoke(stypy.reporting.localization.Localization(__file__, 3513, 12), init___108730, *[], **kwargs_108743)
            
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()

    
    # Assigning a type to the variable 'CurveFilledA' (line 3497)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3497, 4), 'CurveFilledA', CurveFilledA)
    
    # Assigning a Name to a Subscript (line 3518):
    
    # Assigning a Name to a Subscript (line 3518):
    # Declaration of the 'CurveFilledB' class
    # Getting the type of '_Curve' (line 3520)
    _Curve_108745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3520, 23), '_Curve')

    class CurveFilledB(_Curve_108745, ):
        unicode_108746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3523, (-1)), 'unicode', u'\n        An arrow with filled triangle head at the end.\n        ')

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            float_108747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3525, 39), 'float')
            float_108748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3525, 54), 'float')
            defaults = [float_108747, float_108748]
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 3525, 8, False)
            # Assigning a type to the variable 'self' (line 3526)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3526, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'CurveFilledB.__init__', ['head_length', 'head_width'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, ['head_length', 'head_width'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            unicode_108749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3534, (-1)), 'unicode', u'\n            Parameters\n            ----------\n            head_length : float, optional, default : 0.4\n                Length of the arrow head\n\n            head_width : float, optional, default : 0.2\n                Width of the arrow head\n            ')
            
            # Call to __init__(...): (line 3536)
            # Processing the call keyword arguments (line 3536)
            # Getting the type of 'False' (line 3537)
            False_108757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3537, 27), 'False', False)
            keyword_108758 = False_108757
            # Getting the type of 'True' (line 3537)
            True_108759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3537, 43), 'True', False)
            keyword_108760 = True_108759
            # Getting the type of 'False' (line 3538)
            False_108761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3538, 26), 'False', False)
            keyword_108762 = False_108761
            # Getting the type of 'True' (line 3538)
            True_108763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3538, 41), 'True', False)
            keyword_108764 = True_108763
            # Getting the type of 'head_length' (line 3539)
            head_length_108765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3539, 28), 'head_length', False)
            keyword_108766 = head_length_108765
            # Getting the type of 'head_width' (line 3539)
            head_width_108767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3539, 52), 'head_width', False)
            keyword_108768 = head_width_108767
            kwargs_108769 = {'head_length': keyword_108766, 'beginarrow': keyword_108758, 'head_width': keyword_108768, 'endarrow': keyword_108760, 'fillend': keyword_108764, 'fillbegin': keyword_108762}
            
            # Call to super(...): (line 3536)
            # Processing the call arguments (line 3536)
            # Getting the type of 'ArrowStyle' (line 3536)
            ArrowStyle_108751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3536, 18), 'ArrowStyle', False)
            # Obtaining the member 'CurveFilledB' of a type (line 3536)
            CurveFilledB_108752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3536, 18), ArrowStyle_108751, 'CurveFilledB')
            # Getting the type of 'self' (line 3536)
            self_108753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3536, 43), 'self', False)
            # Processing the call keyword arguments (line 3536)
            kwargs_108754 = {}
            # Getting the type of 'super' (line 3536)
            super_108750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3536, 12), 'super', False)
            # Calling super(args, kwargs) (line 3536)
            super_call_result_108755 = invoke(stypy.reporting.localization.Localization(__file__, 3536, 12), super_108750, *[CurveFilledB_108752, self_108753], **kwargs_108754)
            
            # Obtaining the member '__init__' of a type (line 3536)
            init___108756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3536, 12), super_call_result_108755, '__init__')
            # Calling __init__(args, kwargs) (line 3536)
            init___call_result_108770 = invoke(stypy.reporting.localization.Localization(__file__, 3536, 12), init___108756, *[], **kwargs_108769)
            
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()

    
    # Assigning a type to the variable 'CurveFilledB' (line 3520)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3520, 4), 'CurveFilledB', CurveFilledB)
    
    # Assigning a Name to a Subscript (line 3541):
    
    # Assigning a Name to a Subscript (line 3541):
    # Declaration of the 'CurveFilledAB' class
    # Getting the type of '_Curve' (line 3543)
    _Curve_108771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3543, 24), '_Curve')

    class CurveFilledAB(_Curve_108771, ):
        unicode_108772 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3546, (-1)), 'unicode', u'\n        An arrow with filled triangle heads at both ends.\n        ')

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            float_108773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3548, 39), 'float')
            float_108774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3548, 54), 'float')
            defaults = [float_108773, float_108774]
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 3548, 8, False)
            # Assigning a type to the variable 'self' (line 3549)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3549, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'CurveFilledAB.__init__', ['head_length', 'head_width'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, ['head_length', 'head_width'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            unicode_108775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3557, (-1)), 'unicode', u'\n            Parameters\n            ----------\n            head_length : float, optional, default : 0.4\n                Length of the arrow head\n\n            head_width : float, optional, default : 0.2\n                Width of the arrow head\n            ')
            
            # Call to __init__(...): (line 3559)
            # Processing the call keyword arguments (line 3559)
            # Getting the type of 'True' (line 3560)
            True_108783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3560, 27), 'True', False)
            keyword_108784 = True_108783
            # Getting the type of 'True' (line 3560)
            True_108785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3560, 42), 'True', False)
            keyword_108786 = True_108785
            # Getting the type of 'True' (line 3561)
            True_108787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3561, 26), 'True', False)
            keyword_108788 = True_108787
            # Getting the type of 'True' (line 3561)
            True_108789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3561, 40), 'True', False)
            keyword_108790 = True_108789
            # Getting the type of 'head_length' (line 3562)
            head_length_108791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3562, 28), 'head_length', False)
            keyword_108792 = head_length_108791
            # Getting the type of 'head_width' (line 3562)
            head_width_108793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3562, 52), 'head_width', False)
            keyword_108794 = head_width_108793
            kwargs_108795 = {'head_length': keyword_108792, 'beginarrow': keyword_108784, 'head_width': keyword_108794, 'endarrow': keyword_108786, 'fillend': keyword_108790, 'fillbegin': keyword_108788}
            
            # Call to super(...): (line 3559)
            # Processing the call arguments (line 3559)
            # Getting the type of 'ArrowStyle' (line 3559)
            ArrowStyle_108777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3559, 18), 'ArrowStyle', False)
            # Obtaining the member 'CurveFilledAB' of a type (line 3559)
            CurveFilledAB_108778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3559, 18), ArrowStyle_108777, 'CurveFilledAB')
            # Getting the type of 'self' (line 3559)
            self_108779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3559, 44), 'self', False)
            # Processing the call keyword arguments (line 3559)
            kwargs_108780 = {}
            # Getting the type of 'super' (line 3559)
            super_108776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3559, 12), 'super', False)
            # Calling super(args, kwargs) (line 3559)
            super_call_result_108781 = invoke(stypy.reporting.localization.Localization(__file__, 3559, 12), super_108776, *[CurveFilledAB_108778, self_108779], **kwargs_108780)
            
            # Obtaining the member '__init__' of a type (line 3559)
            init___108782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3559, 12), super_call_result_108781, '__init__')
            # Calling __init__(args, kwargs) (line 3559)
            init___call_result_108796 = invoke(stypy.reporting.localization.Localization(__file__, 3559, 12), init___108782, *[], **kwargs_108795)
            
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()

    
    # Assigning a type to the variable 'CurveFilledAB' (line 3543)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3543, 4), 'CurveFilledAB', CurveFilledAB)
    
    # Assigning a Name to a Subscript (line 3564):
    
    # Assigning a Name to a Subscript (line 3564):
    # Declaration of the '_Bracket' class
    # Getting the type of '_Base' (line 3566)
    _Base_108797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3566, 19), '_Base')

    class _Bracket(_Base_108797, ):

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            # Getting the type of 'None' (line 3568)
            None_108798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3568, 36), 'None')
            # Getting the type of 'None' (line 3568)
            None_108799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3568, 51), 'None')
            float_108800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3569, 28), 'float')
            float_108801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3569, 39), 'float')
            float_108802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3570, 29), 'float')
            float_108803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3570, 42), 'float')
            # Getting the type of 'None' (line 3571)
            None_108804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3571, 28), 'None')
            # Getting the type of 'None' (line 3571)
            None_108805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3571, 41), 'None')
            # Getting the type of 'None' (line 3572)
            None_108806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3572, 28), 'None')
            # Getting the type of 'None' (line 3572)
            None_108807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3572, 41), 'None')
            defaults = [None_108798, None_108799, float_108800, float_108801, float_108802, float_108803, None_108804, None_108805, None_108806, None_108807]
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 3568, 8, False)
            # Assigning a type to the variable 'self' (line 3569)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3569, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, '_Bracket.__init__', ['bracketA', 'bracketB', 'widthA', 'widthB', 'lengthA', 'lengthB', 'angleA', 'angleB', 'scaleA', 'scaleB'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, ['bracketA', 'bracketB', 'widthA', 'widthB', 'lengthA', 'lengthB', 'angleA', 'angleB', 'scaleA', 'scaleB'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            
            # Assigning a Tuple to a Tuple (line 3573):
            
            # Assigning a Name to a Name (line 3573):
            
            # Assigning a Name to a Name (line 3573):
            # Getting the type of 'bracketA' (line 3573)
            bracketA_108808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3573, 43), 'bracketA')
            # Assigning a type to the variable 'tuple_assignment_100633' (line 3573)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3573, 12), 'tuple_assignment_100633', bracketA_108808)
            
            # Assigning a Name to a Name (line 3573):
            
            # Assigning a Name to a Name (line 3573):
            # Getting the type of 'bracketB' (line 3573)
            bracketB_108809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3573, 53), 'bracketB')
            # Assigning a type to the variable 'tuple_assignment_100634' (line 3573)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3573, 12), 'tuple_assignment_100634', bracketB_108809)
            
            # Assigning a Name to a Attribute (line 3573):
            
            # Assigning a Name to a Attribute (line 3573):
            # Getting the type of 'tuple_assignment_100633' (line 3573)
            tuple_assignment_100633_108810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3573, 12), 'tuple_assignment_100633')
            # Getting the type of 'self' (line 3573)
            self_108811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3573, 12), 'self')
            # Setting the type of the member 'bracketA' of a type (line 3573)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3573, 12), self_108811, 'bracketA', tuple_assignment_100633_108810)
            
            # Assigning a Name to a Attribute (line 3573):
            
            # Assigning a Name to a Attribute (line 3573):
            # Getting the type of 'tuple_assignment_100634' (line 3573)
            tuple_assignment_100634_108812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3573, 12), 'tuple_assignment_100634')
            # Getting the type of 'self' (line 3573)
            self_108813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3573, 27), 'self')
            # Setting the type of the member 'bracketB' of a type (line 3573)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3573, 27), self_108813, 'bracketB', tuple_assignment_100634_108812)
            
            # Assigning a Tuple to a Tuple (line 3574):
            
            # Assigning a Name to a Name (line 3574):
            
            # Assigning a Name to a Name (line 3574):
            # Getting the type of 'widthA' (line 3574)
            widthA_108814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3574, 39), 'widthA')
            # Assigning a type to the variable 'tuple_assignment_100635' (line 3574)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3574, 12), 'tuple_assignment_100635', widthA_108814)
            
            # Assigning a Name to a Name (line 3574):
            
            # Assigning a Name to a Name (line 3574):
            # Getting the type of 'widthB' (line 3574)
            widthB_108815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3574, 47), 'widthB')
            # Assigning a type to the variable 'tuple_assignment_100636' (line 3574)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3574, 12), 'tuple_assignment_100636', widthB_108815)
            
            # Assigning a Name to a Attribute (line 3574):
            
            # Assigning a Name to a Attribute (line 3574):
            # Getting the type of 'tuple_assignment_100635' (line 3574)
            tuple_assignment_100635_108816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3574, 12), 'tuple_assignment_100635')
            # Getting the type of 'self' (line 3574)
            self_108817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3574, 12), 'self')
            # Setting the type of the member 'widthA' of a type (line 3574)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3574, 12), self_108817, 'widthA', tuple_assignment_100635_108816)
            
            # Assigning a Name to a Attribute (line 3574):
            
            # Assigning a Name to a Attribute (line 3574):
            # Getting the type of 'tuple_assignment_100636' (line 3574)
            tuple_assignment_100636_108818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3574, 12), 'tuple_assignment_100636')
            # Getting the type of 'self' (line 3574)
            self_108819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3574, 25), 'self')
            # Setting the type of the member 'widthB' of a type (line 3574)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3574, 25), self_108819, 'widthB', tuple_assignment_100636_108818)
            
            # Assigning a Tuple to a Tuple (line 3575):
            
            # Assigning a Name to a Name (line 3575):
            
            # Assigning a Name to a Name (line 3575):
            # Getting the type of 'lengthA' (line 3575)
            lengthA_108820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3575, 41), 'lengthA')
            # Assigning a type to the variable 'tuple_assignment_100637' (line 3575)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3575, 12), 'tuple_assignment_100637', lengthA_108820)
            
            # Assigning a Name to a Name (line 3575):
            
            # Assigning a Name to a Name (line 3575):
            # Getting the type of 'lengthB' (line 3575)
            lengthB_108821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3575, 50), 'lengthB')
            # Assigning a type to the variable 'tuple_assignment_100638' (line 3575)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3575, 12), 'tuple_assignment_100638', lengthB_108821)
            
            # Assigning a Name to a Attribute (line 3575):
            
            # Assigning a Name to a Attribute (line 3575):
            # Getting the type of 'tuple_assignment_100637' (line 3575)
            tuple_assignment_100637_108822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3575, 12), 'tuple_assignment_100637')
            # Getting the type of 'self' (line 3575)
            self_108823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3575, 12), 'self')
            # Setting the type of the member 'lengthA' of a type (line 3575)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3575, 12), self_108823, 'lengthA', tuple_assignment_100637_108822)
            
            # Assigning a Name to a Attribute (line 3575):
            
            # Assigning a Name to a Attribute (line 3575):
            # Getting the type of 'tuple_assignment_100638' (line 3575)
            tuple_assignment_100638_108824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3575, 12), 'tuple_assignment_100638')
            # Getting the type of 'self' (line 3575)
            self_108825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3575, 26), 'self')
            # Setting the type of the member 'lengthB' of a type (line 3575)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3575, 26), self_108825, 'lengthB', tuple_assignment_100638_108824)
            
            # Assigning a Tuple to a Tuple (line 3576):
            
            # Assigning a Name to a Name (line 3576):
            
            # Assigning a Name to a Name (line 3576):
            # Getting the type of 'angleA' (line 3576)
            angleA_108826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3576, 39), 'angleA')
            # Assigning a type to the variable 'tuple_assignment_100639' (line 3576)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3576, 12), 'tuple_assignment_100639', angleA_108826)
            
            # Assigning a Name to a Name (line 3576):
            
            # Assigning a Name to a Name (line 3576):
            # Getting the type of 'angleB' (line 3576)
            angleB_108827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3576, 47), 'angleB')
            # Assigning a type to the variable 'tuple_assignment_100640' (line 3576)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3576, 12), 'tuple_assignment_100640', angleB_108827)
            
            # Assigning a Name to a Attribute (line 3576):
            
            # Assigning a Name to a Attribute (line 3576):
            # Getting the type of 'tuple_assignment_100639' (line 3576)
            tuple_assignment_100639_108828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3576, 12), 'tuple_assignment_100639')
            # Getting the type of 'self' (line 3576)
            self_108829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3576, 12), 'self')
            # Setting the type of the member 'angleA' of a type (line 3576)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3576, 12), self_108829, 'angleA', tuple_assignment_100639_108828)
            
            # Assigning a Name to a Attribute (line 3576):
            
            # Assigning a Name to a Attribute (line 3576):
            # Getting the type of 'tuple_assignment_100640' (line 3576)
            tuple_assignment_100640_108830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3576, 12), 'tuple_assignment_100640')
            # Getting the type of 'self' (line 3576)
            self_108831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3576, 25), 'self')
            # Setting the type of the member 'angleB' of a type (line 3576)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3576, 25), self_108831, 'angleB', tuple_assignment_100640_108830)
            
            # Assigning a Tuple to a Tuple (line 3577):
            
            # Assigning a Name to a Name (line 3577):
            
            # Assigning a Name to a Name (line 3577):
            # Getting the type of 'scaleA' (line 3577)
            scaleA_108832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3577, 39), 'scaleA')
            # Assigning a type to the variable 'tuple_assignment_100641' (line 3577)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3577, 12), 'tuple_assignment_100641', scaleA_108832)
            
            # Assigning a Name to a Name (line 3577):
            
            # Assigning a Name to a Name (line 3577):
            # Getting the type of 'scaleB' (line 3577)
            scaleB_108833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3577, 47), 'scaleB')
            # Assigning a type to the variable 'tuple_assignment_100642' (line 3577)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3577, 12), 'tuple_assignment_100642', scaleB_108833)
            
            # Assigning a Name to a Attribute (line 3577):
            
            # Assigning a Name to a Attribute (line 3577):
            # Getting the type of 'tuple_assignment_100641' (line 3577)
            tuple_assignment_100641_108834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3577, 12), 'tuple_assignment_100641')
            # Getting the type of 'self' (line 3577)
            self_108835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3577, 12), 'self')
            # Setting the type of the member 'scaleA' of a type (line 3577)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3577, 12), self_108835, 'scaleA', tuple_assignment_100641_108834)
            
            # Assigning a Name to a Attribute (line 3577):
            
            # Assigning a Name to a Attribute (line 3577):
            # Getting the type of 'tuple_assignment_100642' (line 3577)
            tuple_assignment_100642_108836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3577, 12), 'tuple_assignment_100642')
            # Getting the type of 'self' (line 3577)
            self_108837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3577, 25), 'self')
            # Setting the type of the member 'scaleB' of a type (line 3577)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3577, 25), self_108837, 'scaleB', tuple_assignment_100642_108836)
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()


        @norecursion
        def _get_bracket(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_get_bracket'
            module_type_store = module_type_store.open_function_context('_get_bracket', 3579, 8, False)
            # Assigning a type to the variable 'self' (line 3580)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3580, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            _Bracket._get_bracket.__dict__.__setitem__('stypy_localization', localization)
            _Bracket._get_bracket.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            _Bracket._get_bracket.__dict__.__setitem__('stypy_type_store', module_type_store)
            _Bracket._get_bracket.__dict__.__setitem__('stypy_function_name', '_Bracket._get_bracket')
            _Bracket._get_bracket.__dict__.__setitem__('stypy_param_names_list', ['x0', 'y0', 'cos_t', 'sin_t', 'width', 'length'])
            _Bracket._get_bracket.__dict__.__setitem__('stypy_varargs_param_name', None)
            _Bracket._get_bracket.__dict__.__setitem__('stypy_kwargs_param_name', None)
            _Bracket._get_bracket.__dict__.__setitem__('stypy_call_defaults', defaults)
            _Bracket._get_bracket.__dict__.__setitem__('stypy_call_varargs', varargs)
            _Bracket._get_bracket.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            _Bracket._get_bracket.__dict__.__setitem__('stypy_declared_arg_number', 7)
            arguments = process_argument_values(localization, type_of_self, module_type_store, '_Bracket._get_bracket', ['x0', 'y0', 'cos_t', 'sin_t', 'width', 'length'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, '_get_bracket', localization, ['x0', 'y0', 'cos_t', 'sin_t', 'width', 'length'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '_get_bracket(...)' code ##################

            stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3583, 12))
            
            # 'from matplotlib.bezier import get_normal_points' statement (line 3583)
            update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
            import_108838 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3583, 12), 'matplotlib.bezier')

            if (type(import_108838) is not StypyTypeError):

                if (import_108838 != 'pyd_module'):
                    __import__(import_108838)
                    sys_modules_108839 = sys.modules[import_108838]
                    import_from_module(stypy.reporting.localization.Localization(__file__, 3583, 12), 'matplotlib.bezier', sys_modules_108839.module_type_store, module_type_store, ['get_normal_points'])
                    nest_module(stypy.reporting.localization.Localization(__file__, 3583, 12), __file__, sys_modules_108839, sys_modules_108839.module_type_store, module_type_store)
                else:
                    from matplotlib.bezier import get_normal_points

                    import_from_module(stypy.reporting.localization.Localization(__file__, 3583, 12), 'matplotlib.bezier', None, module_type_store, ['get_normal_points'], [get_normal_points])

            else:
                # Assigning a type to the variable 'matplotlib.bezier' (line 3583)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3583, 12), 'matplotlib.bezier', import_108838)

            remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
            
            
            # Assigning a Call to a Tuple (line 3584):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to get_normal_points(...): (line 3584)
            # Processing the call arguments (line 3584)
            # Getting the type of 'x0' (line 3584)
            x0_108841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3584, 47), 'x0', False)
            # Getting the type of 'y0' (line 3584)
            y0_108842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3584, 51), 'y0', False)
            # Getting the type of 'cos_t' (line 3584)
            cos_t_108843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3584, 55), 'cos_t', False)
            # Getting the type of 'sin_t' (line 3584)
            sin_t_108844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3584, 62), 'sin_t', False)
            # Getting the type of 'width' (line 3584)
            width_108845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3584, 69), 'width', False)
            # Processing the call keyword arguments (line 3584)
            kwargs_108846 = {}
            # Getting the type of 'get_normal_points' (line 3584)
            get_normal_points_108840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3584, 29), 'get_normal_points', False)
            # Calling get_normal_points(args, kwargs) (line 3584)
            get_normal_points_call_result_108847 = invoke(stypy.reporting.localization.Localization(__file__, 3584, 29), get_normal_points_108840, *[x0_108841, y0_108842, cos_t_108843, sin_t_108844, width_108845], **kwargs_108846)
            
            # Assigning a type to the variable 'call_assignment_100643' (line 3584)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3584, 12), 'call_assignment_100643', get_normal_points_call_result_108847)
            
            # Assigning a Call to a Name (line 3584):
            
            # Assigning a Call to a Name (line 3584):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_108850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3584, 12), 'int')
            # Processing the call keyword arguments
            kwargs_108851 = {}
            # Getting the type of 'call_assignment_100643' (line 3584)
            call_assignment_100643_108848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3584, 12), 'call_assignment_100643', False)
            # Obtaining the member '__getitem__' of a type (line 3584)
            getitem___108849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3584, 12), call_assignment_100643_108848, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_108852 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___108849, *[int_108850], **kwargs_108851)
            
            # Assigning a type to the variable 'call_assignment_100644' (line 3584)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3584, 12), 'call_assignment_100644', getitem___call_result_108852)
            
            # Assigning a Name to a Name (line 3584):
            
            # Assigning a Name to a Name (line 3584):
            # Getting the type of 'call_assignment_100644' (line 3584)
            call_assignment_100644_108853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3584, 12), 'call_assignment_100644')
            # Assigning a type to the variable 'x1' (line 3584)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3584, 12), 'x1', call_assignment_100644_108853)
            
            # Assigning a Call to a Name (line 3584):
            
            # Assigning a Call to a Name (line 3584):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_108856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3584, 12), 'int')
            # Processing the call keyword arguments
            kwargs_108857 = {}
            # Getting the type of 'call_assignment_100643' (line 3584)
            call_assignment_100643_108854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3584, 12), 'call_assignment_100643', False)
            # Obtaining the member '__getitem__' of a type (line 3584)
            getitem___108855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3584, 12), call_assignment_100643_108854, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_108858 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___108855, *[int_108856], **kwargs_108857)
            
            # Assigning a type to the variable 'call_assignment_100645' (line 3584)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3584, 12), 'call_assignment_100645', getitem___call_result_108858)
            
            # Assigning a Name to a Name (line 3584):
            
            # Assigning a Name to a Name (line 3584):
            # Getting the type of 'call_assignment_100645' (line 3584)
            call_assignment_100645_108859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3584, 12), 'call_assignment_100645')
            # Assigning a type to the variable 'y1' (line 3584)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3584, 16), 'y1', call_assignment_100645_108859)
            
            # Assigning a Call to a Name (line 3584):
            
            # Assigning a Call to a Name (line 3584):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_108862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3584, 12), 'int')
            # Processing the call keyword arguments
            kwargs_108863 = {}
            # Getting the type of 'call_assignment_100643' (line 3584)
            call_assignment_100643_108860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3584, 12), 'call_assignment_100643', False)
            # Obtaining the member '__getitem__' of a type (line 3584)
            getitem___108861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3584, 12), call_assignment_100643_108860, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_108864 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___108861, *[int_108862], **kwargs_108863)
            
            # Assigning a type to the variable 'call_assignment_100646' (line 3584)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3584, 12), 'call_assignment_100646', getitem___call_result_108864)
            
            # Assigning a Name to a Name (line 3584):
            
            # Assigning a Name to a Name (line 3584):
            # Getting the type of 'call_assignment_100646' (line 3584)
            call_assignment_100646_108865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3584, 12), 'call_assignment_100646')
            # Assigning a type to the variable 'x2' (line 3584)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3584, 20), 'x2', call_assignment_100646_108865)
            
            # Assigning a Call to a Name (line 3584):
            
            # Assigning a Call to a Name (line 3584):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_108868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3584, 12), 'int')
            # Processing the call keyword arguments
            kwargs_108869 = {}
            # Getting the type of 'call_assignment_100643' (line 3584)
            call_assignment_100643_108866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3584, 12), 'call_assignment_100643', False)
            # Obtaining the member '__getitem__' of a type (line 3584)
            getitem___108867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3584, 12), call_assignment_100643_108866, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_108870 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___108867, *[int_108868], **kwargs_108869)
            
            # Assigning a type to the variable 'call_assignment_100647' (line 3584)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3584, 12), 'call_assignment_100647', getitem___call_result_108870)
            
            # Assigning a Name to a Name (line 3584):
            
            # Assigning a Name to a Name (line 3584):
            # Getting the type of 'call_assignment_100647' (line 3584)
            call_assignment_100647_108871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3584, 12), 'call_assignment_100647')
            # Assigning a type to the variable 'y2' (line 3584)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3584, 24), 'y2', call_assignment_100647_108871)
            
            # Assigning a Tuple to a Tuple (line 3586):
            
            # Assigning a BinOp to a Name (line 3586):
            
            # Assigning a BinOp to a Name (line 3586):
            # Getting the type of 'length' (line 3586)
            length_108872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3586, 21), 'length')
            # Getting the type of 'cos_t' (line 3586)
            cos_t_108873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3586, 30), 'cos_t')
            # Applying the binary operator '*' (line 3586)
            result_mul_108874 = python_operator(stypy.reporting.localization.Localization(__file__, 3586, 21), '*', length_108872, cos_t_108873)
            
            # Assigning a type to the variable 'tuple_assignment_100648' (line 3586)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3586, 12), 'tuple_assignment_100648', result_mul_108874)
            
            # Assigning a BinOp to a Name (line 3586):
            
            # Assigning a BinOp to a Name (line 3586):
            # Getting the type of 'length' (line 3586)
            length_108875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3586, 37), 'length')
            # Getting the type of 'sin_t' (line 3586)
            sin_t_108876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3586, 46), 'sin_t')
            # Applying the binary operator '*' (line 3586)
            result_mul_108877 = python_operator(stypy.reporting.localization.Localization(__file__, 3586, 37), '*', length_108875, sin_t_108876)
            
            # Assigning a type to the variable 'tuple_assignment_100649' (line 3586)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3586, 12), 'tuple_assignment_100649', result_mul_108877)
            
            # Assigning a Name to a Name (line 3586):
            
            # Assigning a Name to a Name (line 3586):
            # Getting the type of 'tuple_assignment_100648' (line 3586)
            tuple_assignment_100648_108878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3586, 12), 'tuple_assignment_100648')
            # Assigning a type to the variable 'dx' (line 3586)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3586, 12), 'dx', tuple_assignment_100648_108878)
            
            # Assigning a Name to a Name (line 3586):
            
            # Assigning a Name to a Name (line 3586):
            # Getting the type of 'tuple_assignment_100649' (line 3586)
            tuple_assignment_100649_108879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3586, 12), 'tuple_assignment_100649')
            # Assigning a type to the variable 'dy' (line 3586)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3586, 16), 'dy', tuple_assignment_100649_108879)
            
            # Assigning a List to a Name (line 3588):
            
            # Assigning a List to a Name (line 3588):
            
            # Assigning a List to a Name (line 3588):
            
            # Obtaining an instance of the builtin type 'list' (line 3588)
            list_108880 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3588, 29), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3588)
            # Adding element type (line 3588)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3588)
            tuple_108881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3588, 31), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3588)
            # Adding element type (line 3588)
            # Getting the type of 'x1' (line 3588)
            x1_108882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3588, 31), 'x1')
            # Getting the type of 'dx' (line 3588)
            dx_108883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3588, 36), 'dx')
            # Applying the binary operator '+' (line 3588)
            result_add_108884 = python_operator(stypy.reporting.localization.Localization(__file__, 3588, 31), '+', x1_108882, dx_108883)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3588, 31), tuple_108881, result_add_108884)
            # Adding element type (line 3588)
            # Getting the type of 'y1' (line 3588)
            y1_108885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3588, 40), 'y1')
            # Getting the type of 'dy' (line 3588)
            dy_108886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3588, 45), 'dy')
            # Applying the binary operator '+' (line 3588)
            result_add_108887 = python_operator(stypy.reporting.localization.Localization(__file__, 3588, 40), '+', y1_108885, dy_108886)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3588, 31), tuple_108881, result_add_108887)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3588, 29), list_108880, tuple_108881)
            # Adding element type (line 3588)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3589)
            tuple_108888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3589, 31), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3589)
            # Adding element type (line 3589)
            # Getting the type of 'x1' (line 3589)
            x1_108889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3589, 31), 'x1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3589, 31), tuple_108888, x1_108889)
            # Adding element type (line 3589)
            # Getting the type of 'y1' (line 3589)
            y1_108890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3589, 35), 'y1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3589, 31), tuple_108888, y1_108890)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3588, 29), list_108880, tuple_108888)
            # Adding element type (line 3588)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3590)
            tuple_108891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3590, 31), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3590)
            # Adding element type (line 3590)
            # Getting the type of 'x2' (line 3590)
            x2_108892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3590, 31), 'x2')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3590, 31), tuple_108891, x2_108892)
            # Adding element type (line 3590)
            # Getting the type of 'y2' (line 3590)
            y2_108893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3590, 35), 'y2')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3590, 31), tuple_108891, y2_108893)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3588, 29), list_108880, tuple_108891)
            # Adding element type (line 3588)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3591)
            tuple_108894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3591, 31), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3591)
            # Adding element type (line 3591)
            # Getting the type of 'x2' (line 3591)
            x2_108895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3591, 31), 'x2')
            # Getting the type of 'dx' (line 3591)
            dx_108896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3591, 36), 'dx')
            # Applying the binary operator '+' (line 3591)
            result_add_108897 = python_operator(stypy.reporting.localization.Localization(__file__, 3591, 31), '+', x2_108895, dx_108896)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3591, 31), tuple_108894, result_add_108897)
            # Adding element type (line 3591)
            # Getting the type of 'y2' (line 3591)
            y2_108898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3591, 40), 'y2')
            # Getting the type of 'dy' (line 3591)
            dy_108899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3591, 45), 'dy')
            # Applying the binary operator '+' (line 3591)
            result_add_108900 = python_operator(stypy.reporting.localization.Localization(__file__, 3591, 40), '+', y2_108898, dy_108899)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3591, 31), tuple_108894, result_add_108900)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3588, 29), list_108880, tuple_108894)
            
            # Assigning a type to the variable 'vertices_arrow' (line 3588)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3588, 12), 'vertices_arrow', list_108880)
            
            # Assigning a List to a Name (line 3592):
            
            # Assigning a List to a Name (line 3592):
            
            # Assigning a List to a Name (line 3592):
            
            # Obtaining an instance of the builtin type 'list' (line 3592)
            list_108901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3592, 26), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3592)
            # Adding element type (line 3592)
            # Getting the type of 'Path' (line 3592)
            Path_108902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3592, 27), 'Path')
            # Obtaining the member 'MOVETO' of a type (line 3592)
            MOVETO_108903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3592, 27), Path_108902, 'MOVETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3592, 26), list_108901, MOVETO_108903)
            # Adding element type (line 3592)
            # Getting the type of 'Path' (line 3593)
            Path_108904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3593, 27), 'Path')
            # Obtaining the member 'LINETO' of a type (line 3593)
            LINETO_108905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3593, 27), Path_108904, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3592, 26), list_108901, LINETO_108905)
            # Adding element type (line 3592)
            # Getting the type of 'Path' (line 3594)
            Path_108906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3594, 27), 'Path')
            # Obtaining the member 'LINETO' of a type (line 3594)
            LINETO_108907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3594, 27), Path_108906, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3592, 26), list_108901, LINETO_108907)
            # Adding element type (line 3592)
            # Getting the type of 'Path' (line 3595)
            Path_108908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3595, 27), 'Path')
            # Obtaining the member 'LINETO' of a type (line 3595)
            LINETO_108909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3595, 27), Path_108908, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3592, 26), list_108901, LINETO_108909)
            
            # Assigning a type to the variable 'codes_arrow' (line 3592)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3592, 12), 'codes_arrow', list_108901)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3597)
            tuple_108910 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3597, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3597)
            # Adding element type (line 3597)
            # Getting the type of 'vertices_arrow' (line 3597)
            vertices_arrow_108911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3597, 19), 'vertices_arrow')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3597, 19), tuple_108910, vertices_arrow_108911)
            # Adding element type (line 3597)
            # Getting the type of 'codes_arrow' (line 3597)
            codes_arrow_108912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3597, 35), 'codes_arrow')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3597, 19), tuple_108910, codes_arrow_108912)
            
            # Assigning a type to the variable 'stypy_return_type' (line 3597)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3597, 12), 'stypy_return_type', tuple_108910)
            
            # ################# End of '_get_bracket(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function '_get_bracket' in the type store
            # Getting the type of 'stypy_return_type' (line 3579)
            stypy_return_type_108913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3579, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_108913)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_get_bracket'
            return stypy_return_type_108913


        @norecursion
        def transmute(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'transmute'
            module_type_store = module_type_store.open_function_context('transmute', 3599, 8, False)
            # Assigning a type to the variable 'self' (line 3600)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3600, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            _Bracket.transmute.__dict__.__setitem__('stypy_localization', localization)
            _Bracket.transmute.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            _Bracket.transmute.__dict__.__setitem__('stypy_type_store', module_type_store)
            _Bracket.transmute.__dict__.__setitem__('stypy_function_name', '_Bracket.transmute')
            _Bracket.transmute.__dict__.__setitem__('stypy_param_names_list', ['path', 'mutation_size', 'linewidth'])
            _Bracket.transmute.__dict__.__setitem__('stypy_varargs_param_name', None)
            _Bracket.transmute.__dict__.__setitem__('stypy_kwargs_param_name', None)
            _Bracket.transmute.__dict__.__setitem__('stypy_call_defaults', defaults)
            _Bracket.transmute.__dict__.__setitem__('stypy_call_varargs', varargs)
            _Bracket.transmute.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            _Bracket.transmute.__dict__.__setitem__('stypy_declared_arg_number', 4)
            arguments = process_argument_values(localization, type_of_self, module_type_store, '_Bracket.transmute', ['path', 'mutation_size', 'linewidth'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'transmute', localization, ['path', 'mutation_size', 'linewidth'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'transmute(...)' code ##################

            
            # Type idiom detected: calculating its left and rigth part (line 3601)
            # Getting the type of 'self' (line 3601)
            self_108914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 15), 'self')
            # Obtaining the member 'scaleA' of a type (line 3601)
            scaleA_108915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3601, 15), self_108914, 'scaleA')
            # Getting the type of 'None' (line 3601)
            None_108916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 30), 'None')
            
            (may_be_108917, more_types_in_union_108918) = may_be_none(scaleA_108915, None_108916)

            if may_be_108917:

                if more_types_in_union_108918:
                    # Runtime conditional SSA (line 3601)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Assigning a Name to a Name (line 3602):
                
                # Assigning a Name to a Name (line 3602):
                
                # Assigning a Name to a Name (line 3602):
                # Getting the type of 'mutation_size' (line 3602)
                mutation_size_108919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3602, 25), 'mutation_size')
                # Assigning a type to the variable 'scaleA' (line 3602)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3602, 16), 'scaleA', mutation_size_108919)

                if more_types_in_union_108918:
                    # Runtime conditional SSA for else branch (line 3601)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_108917) or more_types_in_union_108918):
                
                # Assigning a Attribute to a Name (line 3604):
                
                # Assigning a Attribute to a Name (line 3604):
                
                # Assigning a Attribute to a Name (line 3604):
                # Getting the type of 'self' (line 3604)
                self_108920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3604, 25), 'self')
                # Obtaining the member 'scaleA' of a type (line 3604)
                scaleA_108921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3604, 25), self_108920, 'scaleA')
                # Assigning a type to the variable 'scaleA' (line 3604)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3604, 16), 'scaleA', scaleA_108921)

                if (may_be_108917 and more_types_in_union_108918):
                    # SSA join for if statement (line 3601)
                    module_type_store = module_type_store.join_ssa_context()


            
            
            # Type idiom detected: calculating its left and rigth part (line 3606)
            # Getting the type of 'self' (line 3606)
            self_108922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3606, 15), 'self')
            # Obtaining the member 'scaleB' of a type (line 3606)
            scaleB_108923 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3606, 15), self_108922, 'scaleB')
            # Getting the type of 'None' (line 3606)
            None_108924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3606, 30), 'None')
            
            (may_be_108925, more_types_in_union_108926) = may_be_none(scaleB_108923, None_108924)

            if may_be_108925:

                if more_types_in_union_108926:
                    # Runtime conditional SSA (line 3606)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Assigning a Name to a Name (line 3607):
                
                # Assigning a Name to a Name (line 3607):
                
                # Assigning a Name to a Name (line 3607):
                # Getting the type of 'mutation_size' (line 3607)
                mutation_size_108927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3607, 25), 'mutation_size')
                # Assigning a type to the variable 'scaleB' (line 3607)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3607, 16), 'scaleB', mutation_size_108927)

                if more_types_in_union_108926:
                    # Runtime conditional SSA for else branch (line 3606)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_108925) or more_types_in_union_108926):
                
                # Assigning a Attribute to a Name (line 3609):
                
                # Assigning a Attribute to a Name (line 3609):
                
                # Assigning a Attribute to a Name (line 3609):
                # Getting the type of 'self' (line 3609)
                self_108928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3609, 25), 'self')
                # Obtaining the member 'scaleB' of a type (line 3609)
                scaleB_108929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3609, 25), self_108928, 'scaleB')
                # Assigning a type to the variable 'scaleB' (line 3609)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3609, 16), 'scaleB', scaleB_108929)

                if (may_be_108925 and more_types_in_union_108926):
                    # SSA join for if statement (line 3606)
                    module_type_store = module_type_store.join_ssa_context()


            
            
            # Assigning a Tuple to a Tuple (line 3611):
            
            # Assigning a List to a Name (line 3611):
            
            # Assigning a List to a Name (line 3611):
            
            # Obtaining an instance of the builtin type 'list' (line 3611)
            list_108930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3611, 40), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3611)
            
            # Assigning a type to the variable 'tuple_assignment_100650' (line 3611)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3611, 12), 'tuple_assignment_100650', list_108930)
            
            # Assigning a List to a Name (line 3611):
            
            # Assigning a List to a Name (line 3611):
            
            # Obtaining an instance of the builtin type 'list' (line 3611)
            list_108931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3611, 44), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3611)
            
            # Assigning a type to the variable 'tuple_assignment_100651' (line 3611)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3611, 12), 'tuple_assignment_100651', list_108931)
            
            # Assigning a Name to a Name (line 3611):
            
            # Assigning a Name to a Name (line 3611):
            # Getting the type of 'tuple_assignment_100650' (line 3611)
            tuple_assignment_100650_108932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3611, 12), 'tuple_assignment_100650')
            # Assigning a type to the variable 'vertices_list' (line 3611)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3611, 12), 'vertices_list', tuple_assignment_100650_108932)
            
            # Assigning a Name to a Name (line 3611):
            
            # Assigning a Name to a Name (line 3611):
            # Getting the type of 'tuple_assignment_100651' (line 3611)
            tuple_assignment_100651_108933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3611, 12), 'tuple_assignment_100651')
            # Assigning a type to the variable 'codes_list' (line 3611)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3611, 27), 'codes_list', tuple_assignment_100651_108933)
            
            # Getting the type of 'self' (line 3613)
            self_108934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3613, 15), 'self')
            # Obtaining the member 'bracketA' of a type (line 3613)
            bracketA_108935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3613, 15), self_108934, 'bracketA')
            # Testing the type of an if condition (line 3613)
            if_condition_108936 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3613, 12), bracketA_108935)
            # Assigning a type to the variable 'if_condition_108936' (line 3613)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3613, 12), 'if_condition_108936', if_condition_108936)
            # SSA begins for if statement (line 3613)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Subscript to a Tuple (line 3614):
            
            # Assigning a Subscript to a Name (line 3614):
            
            # Assigning a Subscript to a Name (line 3614):
            
            # Obtaining the type of the subscript
            int_108937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3614, 16), 'int')
            
            # Obtaining the type of the subscript
            int_108938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3614, 39), 'int')
            # Getting the type of 'path' (line 3614)
            path_108939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3614, 25), 'path')
            # Obtaining the member 'vertices' of a type (line 3614)
            vertices_108940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3614, 25), path_108939, 'vertices')
            # Obtaining the member '__getitem__' of a type (line 3614)
            getitem___108941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3614, 25), vertices_108940, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3614)
            subscript_call_result_108942 = invoke(stypy.reporting.localization.Localization(__file__, 3614, 25), getitem___108941, int_108938)
            
            # Obtaining the member '__getitem__' of a type (line 3614)
            getitem___108943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3614, 16), subscript_call_result_108942, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3614)
            subscript_call_result_108944 = invoke(stypy.reporting.localization.Localization(__file__, 3614, 16), getitem___108943, int_108937)
            
            # Assigning a type to the variable 'tuple_var_assignment_100652' (line 3614)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3614, 16), 'tuple_var_assignment_100652', subscript_call_result_108944)
            
            # Assigning a Subscript to a Name (line 3614):
            
            # Assigning a Subscript to a Name (line 3614):
            
            # Obtaining the type of the subscript
            int_108945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3614, 16), 'int')
            
            # Obtaining the type of the subscript
            int_108946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3614, 39), 'int')
            # Getting the type of 'path' (line 3614)
            path_108947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3614, 25), 'path')
            # Obtaining the member 'vertices' of a type (line 3614)
            vertices_108948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3614, 25), path_108947, 'vertices')
            # Obtaining the member '__getitem__' of a type (line 3614)
            getitem___108949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3614, 25), vertices_108948, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3614)
            subscript_call_result_108950 = invoke(stypy.reporting.localization.Localization(__file__, 3614, 25), getitem___108949, int_108946)
            
            # Obtaining the member '__getitem__' of a type (line 3614)
            getitem___108951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3614, 16), subscript_call_result_108950, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3614)
            subscript_call_result_108952 = invoke(stypy.reporting.localization.Localization(__file__, 3614, 16), getitem___108951, int_108945)
            
            # Assigning a type to the variable 'tuple_var_assignment_100653' (line 3614)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3614, 16), 'tuple_var_assignment_100653', subscript_call_result_108952)
            
            # Assigning a Name to a Name (line 3614):
            
            # Assigning a Name to a Name (line 3614):
            # Getting the type of 'tuple_var_assignment_100652' (line 3614)
            tuple_var_assignment_100652_108953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3614, 16), 'tuple_var_assignment_100652')
            # Assigning a type to the variable 'x0' (line 3614)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3614, 16), 'x0', tuple_var_assignment_100652_108953)
            
            # Assigning a Name to a Name (line 3614):
            
            # Assigning a Name to a Name (line 3614):
            # Getting the type of 'tuple_var_assignment_100653' (line 3614)
            tuple_var_assignment_100653_108954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3614, 16), 'tuple_var_assignment_100653')
            # Assigning a type to the variable 'y0' (line 3614)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3614, 20), 'y0', tuple_var_assignment_100653_108954)
            
            # Assigning a Subscript to a Tuple (line 3615):
            
            # Assigning a Subscript to a Name (line 3615):
            
            # Assigning a Subscript to a Name (line 3615):
            
            # Obtaining the type of the subscript
            int_108955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3615, 16), 'int')
            
            # Obtaining the type of the subscript
            int_108956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3615, 39), 'int')
            # Getting the type of 'path' (line 3615)
            path_108957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3615, 25), 'path')
            # Obtaining the member 'vertices' of a type (line 3615)
            vertices_108958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3615, 25), path_108957, 'vertices')
            # Obtaining the member '__getitem__' of a type (line 3615)
            getitem___108959 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3615, 25), vertices_108958, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3615)
            subscript_call_result_108960 = invoke(stypy.reporting.localization.Localization(__file__, 3615, 25), getitem___108959, int_108956)
            
            # Obtaining the member '__getitem__' of a type (line 3615)
            getitem___108961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3615, 16), subscript_call_result_108960, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3615)
            subscript_call_result_108962 = invoke(stypy.reporting.localization.Localization(__file__, 3615, 16), getitem___108961, int_108955)
            
            # Assigning a type to the variable 'tuple_var_assignment_100654' (line 3615)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3615, 16), 'tuple_var_assignment_100654', subscript_call_result_108962)
            
            # Assigning a Subscript to a Name (line 3615):
            
            # Assigning a Subscript to a Name (line 3615):
            
            # Obtaining the type of the subscript
            int_108963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3615, 16), 'int')
            
            # Obtaining the type of the subscript
            int_108964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3615, 39), 'int')
            # Getting the type of 'path' (line 3615)
            path_108965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3615, 25), 'path')
            # Obtaining the member 'vertices' of a type (line 3615)
            vertices_108966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3615, 25), path_108965, 'vertices')
            # Obtaining the member '__getitem__' of a type (line 3615)
            getitem___108967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3615, 25), vertices_108966, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3615)
            subscript_call_result_108968 = invoke(stypy.reporting.localization.Localization(__file__, 3615, 25), getitem___108967, int_108964)
            
            # Obtaining the member '__getitem__' of a type (line 3615)
            getitem___108969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3615, 16), subscript_call_result_108968, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3615)
            subscript_call_result_108970 = invoke(stypy.reporting.localization.Localization(__file__, 3615, 16), getitem___108969, int_108963)
            
            # Assigning a type to the variable 'tuple_var_assignment_100655' (line 3615)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3615, 16), 'tuple_var_assignment_100655', subscript_call_result_108970)
            
            # Assigning a Name to a Name (line 3615):
            
            # Assigning a Name to a Name (line 3615):
            # Getting the type of 'tuple_var_assignment_100654' (line 3615)
            tuple_var_assignment_100654_108971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3615, 16), 'tuple_var_assignment_100654')
            # Assigning a type to the variable 'x1' (line 3615)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3615, 16), 'x1', tuple_var_assignment_100654_108971)
            
            # Assigning a Name to a Name (line 3615):
            
            # Assigning a Name to a Name (line 3615):
            # Getting the type of 'tuple_var_assignment_100655' (line 3615)
            tuple_var_assignment_100655_108972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3615, 16), 'tuple_var_assignment_100655')
            # Assigning a type to the variable 'y1' (line 3615)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3615, 20), 'y1', tuple_var_assignment_100655_108972)
            
            # Assigning a Call to a Tuple (line 3616):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to get_cos_sin(...): (line 3616)
            # Processing the call arguments (line 3616)
            # Getting the type of 'x1' (line 3616)
            x1_108974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3616, 43), 'x1', False)
            # Getting the type of 'y1' (line 3616)
            y1_108975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3616, 47), 'y1', False)
            # Getting the type of 'x0' (line 3616)
            x0_108976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3616, 51), 'x0', False)
            # Getting the type of 'y0' (line 3616)
            y0_108977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3616, 55), 'y0', False)
            # Processing the call keyword arguments (line 3616)
            kwargs_108978 = {}
            # Getting the type of 'get_cos_sin' (line 3616)
            get_cos_sin_108973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3616, 31), 'get_cos_sin', False)
            # Calling get_cos_sin(args, kwargs) (line 3616)
            get_cos_sin_call_result_108979 = invoke(stypy.reporting.localization.Localization(__file__, 3616, 31), get_cos_sin_108973, *[x1_108974, y1_108975, x0_108976, y0_108977], **kwargs_108978)
            
            # Assigning a type to the variable 'call_assignment_100656' (line 3616)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3616, 16), 'call_assignment_100656', get_cos_sin_call_result_108979)
            
            # Assigning a Call to a Name (line 3616):
            
            # Assigning a Call to a Name (line 3616):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_108982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3616, 16), 'int')
            # Processing the call keyword arguments
            kwargs_108983 = {}
            # Getting the type of 'call_assignment_100656' (line 3616)
            call_assignment_100656_108980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3616, 16), 'call_assignment_100656', False)
            # Obtaining the member '__getitem__' of a type (line 3616)
            getitem___108981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3616, 16), call_assignment_100656_108980, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_108984 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___108981, *[int_108982], **kwargs_108983)
            
            # Assigning a type to the variable 'call_assignment_100657' (line 3616)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3616, 16), 'call_assignment_100657', getitem___call_result_108984)
            
            # Assigning a Name to a Name (line 3616):
            
            # Assigning a Name to a Name (line 3616):
            # Getting the type of 'call_assignment_100657' (line 3616)
            call_assignment_100657_108985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3616, 16), 'call_assignment_100657')
            # Assigning a type to the variable 'cos_t' (line 3616)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3616, 16), 'cos_t', call_assignment_100657_108985)
            
            # Assigning a Call to a Name (line 3616):
            
            # Assigning a Call to a Name (line 3616):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_108988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3616, 16), 'int')
            # Processing the call keyword arguments
            kwargs_108989 = {}
            # Getting the type of 'call_assignment_100656' (line 3616)
            call_assignment_100656_108986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3616, 16), 'call_assignment_100656', False)
            # Obtaining the member '__getitem__' of a type (line 3616)
            getitem___108987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3616, 16), call_assignment_100656_108986, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_108990 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___108987, *[int_108988], **kwargs_108989)
            
            # Assigning a type to the variable 'call_assignment_100658' (line 3616)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3616, 16), 'call_assignment_100658', getitem___call_result_108990)
            
            # Assigning a Name to a Name (line 3616):
            
            # Assigning a Name to a Name (line 3616):
            # Getting the type of 'call_assignment_100658' (line 3616)
            call_assignment_100658_108991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3616, 16), 'call_assignment_100658')
            # Assigning a type to the variable 'sin_t' (line 3616)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3616, 23), 'sin_t', call_assignment_100658_108991)
            
            # Assigning a Call to a Tuple (line 3617):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to _get_bracket(...): (line 3617)
            # Processing the call arguments (line 3617)
            # Getting the type of 'x0' (line 3617)
            x0_108994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3617, 54), 'x0', False)
            # Getting the type of 'y0' (line 3617)
            y0_108995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3617, 58), 'y0', False)
            # Getting the type of 'cos_t' (line 3617)
            cos_t_108996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3617, 62), 'cos_t', False)
            # Getting the type of 'sin_t' (line 3617)
            sin_t_108997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3617, 69), 'sin_t', False)
            # Getting the type of 'self' (line 3618)
            self_108998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3618, 54), 'self', False)
            # Obtaining the member 'widthA' of a type (line 3618)
            widthA_108999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3618, 54), self_108998, 'widthA')
            # Getting the type of 'scaleA' (line 3618)
            scaleA_109000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3618, 68), 'scaleA', False)
            # Applying the binary operator '*' (line 3618)
            result_mul_109001 = python_operator(stypy.reporting.localization.Localization(__file__, 3618, 54), '*', widthA_108999, scaleA_109000)
            
            # Getting the type of 'self' (line 3619)
            self_109002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3619, 54), 'self', False)
            # Obtaining the member 'lengthA' of a type (line 3619)
            lengthA_109003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3619, 54), self_109002, 'lengthA')
            # Getting the type of 'scaleA' (line 3619)
            scaleA_109004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3619, 69), 'scaleA', False)
            # Applying the binary operator '*' (line 3619)
            result_mul_109005 = python_operator(stypy.reporting.localization.Localization(__file__, 3619, 54), '*', lengthA_109003, scaleA_109004)
            
            # Processing the call keyword arguments (line 3617)
            kwargs_109006 = {}
            # Getting the type of 'self' (line 3617)
            self_108992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3617, 36), 'self', False)
            # Obtaining the member '_get_bracket' of a type (line 3617)
            _get_bracket_108993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3617, 36), self_108992, '_get_bracket')
            # Calling _get_bracket(args, kwargs) (line 3617)
            _get_bracket_call_result_109007 = invoke(stypy.reporting.localization.Localization(__file__, 3617, 36), _get_bracket_108993, *[x0_108994, y0_108995, cos_t_108996, sin_t_108997, result_mul_109001, result_mul_109005], **kwargs_109006)
            
            # Assigning a type to the variable 'call_assignment_100659' (line 3617)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3617, 16), 'call_assignment_100659', _get_bracket_call_result_109007)
            
            # Assigning a Call to a Name (line 3617):
            
            # Assigning a Call to a Name (line 3617):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3617, 16), 'int')
            # Processing the call keyword arguments
            kwargs_109011 = {}
            # Getting the type of 'call_assignment_100659' (line 3617)
            call_assignment_100659_109008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3617, 16), 'call_assignment_100659', False)
            # Obtaining the member '__getitem__' of a type (line 3617)
            getitem___109009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3617, 16), call_assignment_100659_109008, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109012 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109009, *[int_109010], **kwargs_109011)
            
            # Assigning a type to the variable 'call_assignment_100660' (line 3617)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3617, 16), 'call_assignment_100660', getitem___call_result_109012)
            
            # Assigning a Name to a Name (line 3617):
            
            # Assigning a Name to a Name (line 3617):
            # Getting the type of 'call_assignment_100660' (line 3617)
            call_assignment_100660_109013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3617, 16), 'call_assignment_100660')
            # Assigning a type to the variable 'verticesA' (line 3617)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3617, 16), 'verticesA', call_assignment_100660_109013)
            
            # Assigning a Call to a Name (line 3617):
            
            # Assigning a Call to a Name (line 3617):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3617, 16), 'int')
            # Processing the call keyword arguments
            kwargs_109017 = {}
            # Getting the type of 'call_assignment_100659' (line 3617)
            call_assignment_100659_109014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3617, 16), 'call_assignment_100659', False)
            # Obtaining the member '__getitem__' of a type (line 3617)
            getitem___109015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3617, 16), call_assignment_100659_109014, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109018 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109015, *[int_109016], **kwargs_109017)
            
            # Assigning a type to the variable 'call_assignment_100661' (line 3617)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3617, 16), 'call_assignment_100661', getitem___call_result_109018)
            
            # Assigning a Name to a Name (line 3617):
            
            # Assigning a Name to a Name (line 3617):
            # Getting the type of 'call_assignment_100661' (line 3617)
            call_assignment_100661_109019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3617, 16), 'call_assignment_100661')
            # Assigning a type to the variable 'codesA' (line 3617)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3617, 27), 'codesA', call_assignment_100661_109019)
            
            # Call to append(...): (line 3620)
            # Processing the call arguments (line 3620)
            # Getting the type of 'verticesA' (line 3620)
            verticesA_109022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3620, 37), 'verticesA', False)
            # Processing the call keyword arguments (line 3620)
            kwargs_109023 = {}
            # Getting the type of 'vertices_list' (line 3620)
            vertices_list_109020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3620, 16), 'vertices_list', False)
            # Obtaining the member 'append' of a type (line 3620)
            append_109021 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3620, 16), vertices_list_109020, 'append')
            # Calling append(args, kwargs) (line 3620)
            append_call_result_109024 = invoke(stypy.reporting.localization.Localization(__file__, 3620, 16), append_109021, *[verticesA_109022], **kwargs_109023)
            
            
            # Call to append(...): (line 3621)
            # Processing the call arguments (line 3621)
            # Getting the type of 'codesA' (line 3621)
            codesA_109027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3621, 34), 'codesA', False)
            # Processing the call keyword arguments (line 3621)
            kwargs_109028 = {}
            # Getting the type of 'codes_list' (line 3621)
            codes_list_109025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3621, 16), 'codes_list', False)
            # Obtaining the member 'append' of a type (line 3621)
            append_109026 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3621, 16), codes_list_109025, 'append')
            # Calling append(args, kwargs) (line 3621)
            append_call_result_109029 = invoke(stypy.reporting.localization.Localization(__file__, 3621, 16), append_109026, *[codesA_109027], **kwargs_109028)
            
            # SSA join for if statement (line 3613)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Call to append(...): (line 3623)
            # Processing the call arguments (line 3623)
            # Getting the type of 'path' (line 3623)
            path_109032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3623, 33), 'path', False)
            # Obtaining the member 'vertices' of a type (line 3623)
            vertices_109033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3623, 33), path_109032, 'vertices')
            # Processing the call keyword arguments (line 3623)
            kwargs_109034 = {}
            # Getting the type of 'vertices_list' (line 3623)
            vertices_list_109030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3623, 12), 'vertices_list', False)
            # Obtaining the member 'append' of a type (line 3623)
            append_109031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3623, 12), vertices_list_109030, 'append')
            # Calling append(args, kwargs) (line 3623)
            append_call_result_109035 = invoke(stypy.reporting.localization.Localization(__file__, 3623, 12), append_109031, *[vertices_109033], **kwargs_109034)
            
            
            # Call to append(...): (line 3624)
            # Processing the call arguments (line 3624)
            # Getting the type of 'path' (line 3624)
            path_109038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3624, 30), 'path', False)
            # Obtaining the member 'codes' of a type (line 3624)
            codes_109039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3624, 30), path_109038, 'codes')
            # Processing the call keyword arguments (line 3624)
            kwargs_109040 = {}
            # Getting the type of 'codes_list' (line 3624)
            codes_list_109036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3624, 12), 'codes_list', False)
            # Obtaining the member 'append' of a type (line 3624)
            append_109037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3624, 12), codes_list_109036, 'append')
            # Calling append(args, kwargs) (line 3624)
            append_call_result_109041 = invoke(stypy.reporting.localization.Localization(__file__, 3624, 12), append_109037, *[codes_109039], **kwargs_109040)
            
            
            # Getting the type of 'self' (line 3626)
            self_109042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3626, 15), 'self')
            # Obtaining the member 'bracketB' of a type (line 3626)
            bracketB_109043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3626, 15), self_109042, 'bracketB')
            # Testing the type of an if condition (line 3626)
            if_condition_109044 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3626, 12), bracketB_109043)
            # Assigning a type to the variable 'if_condition_109044' (line 3626)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3626, 12), 'if_condition_109044', if_condition_109044)
            # SSA begins for if statement (line 3626)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Subscript to a Tuple (line 3627):
            
            # Assigning a Subscript to a Name (line 3627):
            
            # Assigning a Subscript to a Name (line 3627):
            
            # Obtaining the type of the subscript
            int_109045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3627, 16), 'int')
            
            # Obtaining the type of the subscript
            int_109046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3627, 39), 'int')
            # Getting the type of 'path' (line 3627)
            path_109047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3627, 25), 'path')
            # Obtaining the member 'vertices' of a type (line 3627)
            vertices_109048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3627, 25), path_109047, 'vertices')
            # Obtaining the member '__getitem__' of a type (line 3627)
            getitem___109049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3627, 25), vertices_109048, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3627)
            subscript_call_result_109050 = invoke(stypy.reporting.localization.Localization(__file__, 3627, 25), getitem___109049, int_109046)
            
            # Obtaining the member '__getitem__' of a type (line 3627)
            getitem___109051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3627, 16), subscript_call_result_109050, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3627)
            subscript_call_result_109052 = invoke(stypy.reporting.localization.Localization(__file__, 3627, 16), getitem___109051, int_109045)
            
            # Assigning a type to the variable 'tuple_var_assignment_100662' (line 3627)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3627, 16), 'tuple_var_assignment_100662', subscript_call_result_109052)
            
            # Assigning a Subscript to a Name (line 3627):
            
            # Assigning a Subscript to a Name (line 3627):
            
            # Obtaining the type of the subscript
            int_109053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3627, 16), 'int')
            
            # Obtaining the type of the subscript
            int_109054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3627, 39), 'int')
            # Getting the type of 'path' (line 3627)
            path_109055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3627, 25), 'path')
            # Obtaining the member 'vertices' of a type (line 3627)
            vertices_109056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3627, 25), path_109055, 'vertices')
            # Obtaining the member '__getitem__' of a type (line 3627)
            getitem___109057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3627, 25), vertices_109056, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3627)
            subscript_call_result_109058 = invoke(stypy.reporting.localization.Localization(__file__, 3627, 25), getitem___109057, int_109054)
            
            # Obtaining the member '__getitem__' of a type (line 3627)
            getitem___109059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3627, 16), subscript_call_result_109058, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3627)
            subscript_call_result_109060 = invoke(stypy.reporting.localization.Localization(__file__, 3627, 16), getitem___109059, int_109053)
            
            # Assigning a type to the variable 'tuple_var_assignment_100663' (line 3627)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3627, 16), 'tuple_var_assignment_100663', subscript_call_result_109060)
            
            # Assigning a Name to a Name (line 3627):
            
            # Assigning a Name to a Name (line 3627):
            # Getting the type of 'tuple_var_assignment_100662' (line 3627)
            tuple_var_assignment_100662_109061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3627, 16), 'tuple_var_assignment_100662')
            # Assigning a type to the variable 'x0' (line 3627)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3627, 16), 'x0', tuple_var_assignment_100662_109061)
            
            # Assigning a Name to a Name (line 3627):
            
            # Assigning a Name to a Name (line 3627):
            # Getting the type of 'tuple_var_assignment_100663' (line 3627)
            tuple_var_assignment_100663_109062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3627, 16), 'tuple_var_assignment_100663')
            # Assigning a type to the variable 'y0' (line 3627)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3627, 20), 'y0', tuple_var_assignment_100663_109062)
            
            # Assigning a Subscript to a Tuple (line 3628):
            
            # Assigning a Subscript to a Name (line 3628):
            
            # Assigning a Subscript to a Name (line 3628):
            
            # Obtaining the type of the subscript
            int_109063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3628, 16), 'int')
            
            # Obtaining the type of the subscript
            int_109064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3628, 39), 'int')
            # Getting the type of 'path' (line 3628)
            path_109065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3628, 25), 'path')
            # Obtaining the member 'vertices' of a type (line 3628)
            vertices_109066 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3628, 25), path_109065, 'vertices')
            # Obtaining the member '__getitem__' of a type (line 3628)
            getitem___109067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3628, 25), vertices_109066, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3628)
            subscript_call_result_109068 = invoke(stypy.reporting.localization.Localization(__file__, 3628, 25), getitem___109067, int_109064)
            
            # Obtaining the member '__getitem__' of a type (line 3628)
            getitem___109069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3628, 16), subscript_call_result_109068, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3628)
            subscript_call_result_109070 = invoke(stypy.reporting.localization.Localization(__file__, 3628, 16), getitem___109069, int_109063)
            
            # Assigning a type to the variable 'tuple_var_assignment_100664' (line 3628)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3628, 16), 'tuple_var_assignment_100664', subscript_call_result_109070)
            
            # Assigning a Subscript to a Name (line 3628):
            
            # Assigning a Subscript to a Name (line 3628):
            
            # Obtaining the type of the subscript
            int_109071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3628, 16), 'int')
            
            # Obtaining the type of the subscript
            int_109072 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3628, 39), 'int')
            # Getting the type of 'path' (line 3628)
            path_109073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3628, 25), 'path')
            # Obtaining the member 'vertices' of a type (line 3628)
            vertices_109074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3628, 25), path_109073, 'vertices')
            # Obtaining the member '__getitem__' of a type (line 3628)
            getitem___109075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3628, 25), vertices_109074, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3628)
            subscript_call_result_109076 = invoke(stypy.reporting.localization.Localization(__file__, 3628, 25), getitem___109075, int_109072)
            
            # Obtaining the member '__getitem__' of a type (line 3628)
            getitem___109077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3628, 16), subscript_call_result_109076, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3628)
            subscript_call_result_109078 = invoke(stypy.reporting.localization.Localization(__file__, 3628, 16), getitem___109077, int_109071)
            
            # Assigning a type to the variable 'tuple_var_assignment_100665' (line 3628)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3628, 16), 'tuple_var_assignment_100665', subscript_call_result_109078)
            
            # Assigning a Name to a Name (line 3628):
            
            # Assigning a Name to a Name (line 3628):
            # Getting the type of 'tuple_var_assignment_100664' (line 3628)
            tuple_var_assignment_100664_109079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3628, 16), 'tuple_var_assignment_100664')
            # Assigning a type to the variable 'x1' (line 3628)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3628, 16), 'x1', tuple_var_assignment_100664_109079)
            
            # Assigning a Name to a Name (line 3628):
            
            # Assigning a Name to a Name (line 3628):
            # Getting the type of 'tuple_var_assignment_100665' (line 3628)
            tuple_var_assignment_100665_109080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3628, 16), 'tuple_var_assignment_100665')
            # Assigning a type to the variable 'y1' (line 3628)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3628, 20), 'y1', tuple_var_assignment_100665_109080)
            
            # Assigning a Call to a Tuple (line 3629):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to get_cos_sin(...): (line 3629)
            # Processing the call arguments (line 3629)
            # Getting the type of 'x1' (line 3629)
            x1_109082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3629, 43), 'x1', False)
            # Getting the type of 'y1' (line 3629)
            y1_109083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3629, 47), 'y1', False)
            # Getting the type of 'x0' (line 3629)
            x0_109084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3629, 51), 'x0', False)
            # Getting the type of 'y0' (line 3629)
            y0_109085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3629, 55), 'y0', False)
            # Processing the call keyword arguments (line 3629)
            kwargs_109086 = {}
            # Getting the type of 'get_cos_sin' (line 3629)
            get_cos_sin_109081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3629, 31), 'get_cos_sin', False)
            # Calling get_cos_sin(args, kwargs) (line 3629)
            get_cos_sin_call_result_109087 = invoke(stypy.reporting.localization.Localization(__file__, 3629, 31), get_cos_sin_109081, *[x1_109082, y1_109083, x0_109084, y0_109085], **kwargs_109086)
            
            # Assigning a type to the variable 'call_assignment_100666' (line 3629)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3629, 16), 'call_assignment_100666', get_cos_sin_call_result_109087)
            
            # Assigning a Call to a Name (line 3629):
            
            # Assigning a Call to a Name (line 3629):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3629, 16), 'int')
            # Processing the call keyword arguments
            kwargs_109091 = {}
            # Getting the type of 'call_assignment_100666' (line 3629)
            call_assignment_100666_109088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3629, 16), 'call_assignment_100666', False)
            # Obtaining the member '__getitem__' of a type (line 3629)
            getitem___109089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3629, 16), call_assignment_100666_109088, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109092 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109089, *[int_109090], **kwargs_109091)
            
            # Assigning a type to the variable 'call_assignment_100667' (line 3629)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3629, 16), 'call_assignment_100667', getitem___call_result_109092)
            
            # Assigning a Name to a Name (line 3629):
            
            # Assigning a Name to a Name (line 3629):
            # Getting the type of 'call_assignment_100667' (line 3629)
            call_assignment_100667_109093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3629, 16), 'call_assignment_100667')
            # Assigning a type to the variable 'cos_t' (line 3629)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3629, 16), 'cos_t', call_assignment_100667_109093)
            
            # Assigning a Call to a Name (line 3629):
            
            # Assigning a Call to a Name (line 3629):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3629, 16), 'int')
            # Processing the call keyword arguments
            kwargs_109097 = {}
            # Getting the type of 'call_assignment_100666' (line 3629)
            call_assignment_100666_109094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3629, 16), 'call_assignment_100666', False)
            # Obtaining the member '__getitem__' of a type (line 3629)
            getitem___109095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3629, 16), call_assignment_100666_109094, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109098 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109095, *[int_109096], **kwargs_109097)
            
            # Assigning a type to the variable 'call_assignment_100668' (line 3629)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3629, 16), 'call_assignment_100668', getitem___call_result_109098)
            
            # Assigning a Name to a Name (line 3629):
            
            # Assigning a Name to a Name (line 3629):
            # Getting the type of 'call_assignment_100668' (line 3629)
            call_assignment_100668_109099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3629, 16), 'call_assignment_100668')
            # Assigning a type to the variable 'sin_t' (line 3629)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3629, 23), 'sin_t', call_assignment_100668_109099)
            
            # Assigning a Call to a Tuple (line 3630):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to _get_bracket(...): (line 3630)
            # Processing the call arguments (line 3630)
            # Getting the type of 'x0' (line 3630)
            x0_109102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3630, 54), 'x0', False)
            # Getting the type of 'y0' (line 3630)
            y0_109103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3630, 58), 'y0', False)
            # Getting the type of 'cos_t' (line 3630)
            cos_t_109104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3630, 62), 'cos_t', False)
            # Getting the type of 'sin_t' (line 3630)
            sin_t_109105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3630, 69), 'sin_t', False)
            # Getting the type of 'self' (line 3631)
            self_109106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3631, 54), 'self', False)
            # Obtaining the member 'widthB' of a type (line 3631)
            widthB_109107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3631, 54), self_109106, 'widthB')
            # Getting the type of 'scaleB' (line 3631)
            scaleB_109108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3631, 68), 'scaleB', False)
            # Applying the binary operator '*' (line 3631)
            result_mul_109109 = python_operator(stypy.reporting.localization.Localization(__file__, 3631, 54), '*', widthB_109107, scaleB_109108)
            
            # Getting the type of 'self' (line 3632)
            self_109110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3632, 54), 'self', False)
            # Obtaining the member 'lengthB' of a type (line 3632)
            lengthB_109111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3632, 54), self_109110, 'lengthB')
            # Getting the type of 'scaleB' (line 3632)
            scaleB_109112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3632, 69), 'scaleB', False)
            # Applying the binary operator '*' (line 3632)
            result_mul_109113 = python_operator(stypy.reporting.localization.Localization(__file__, 3632, 54), '*', lengthB_109111, scaleB_109112)
            
            # Processing the call keyword arguments (line 3630)
            kwargs_109114 = {}
            # Getting the type of 'self' (line 3630)
            self_109100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3630, 36), 'self', False)
            # Obtaining the member '_get_bracket' of a type (line 3630)
            _get_bracket_109101 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3630, 36), self_109100, '_get_bracket')
            # Calling _get_bracket(args, kwargs) (line 3630)
            _get_bracket_call_result_109115 = invoke(stypy.reporting.localization.Localization(__file__, 3630, 36), _get_bracket_109101, *[x0_109102, y0_109103, cos_t_109104, sin_t_109105, result_mul_109109, result_mul_109113], **kwargs_109114)
            
            # Assigning a type to the variable 'call_assignment_100669' (line 3630)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3630, 16), 'call_assignment_100669', _get_bracket_call_result_109115)
            
            # Assigning a Call to a Name (line 3630):
            
            # Assigning a Call to a Name (line 3630):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3630, 16), 'int')
            # Processing the call keyword arguments
            kwargs_109119 = {}
            # Getting the type of 'call_assignment_100669' (line 3630)
            call_assignment_100669_109116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3630, 16), 'call_assignment_100669', False)
            # Obtaining the member '__getitem__' of a type (line 3630)
            getitem___109117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3630, 16), call_assignment_100669_109116, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109120 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109117, *[int_109118], **kwargs_109119)
            
            # Assigning a type to the variable 'call_assignment_100670' (line 3630)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3630, 16), 'call_assignment_100670', getitem___call_result_109120)
            
            # Assigning a Name to a Name (line 3630):
            
            # Assigning a Name to a Name (line 3630):
            # Getting the type of 'call_assignment_100670' (line 3630)
            call_assignment_100670_109121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3630, 16), 'call_assignment_100670')
            # Assigning a type to the variable 'verticesB' (line 3630)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3630, 16), 'verticesB', call_assignment_100670_109121)
            
            # Assigning a Call to a Name (line 3630):
            
            # Assigning a Call to a Name (line 3630):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3630, 16), 'int')
            # Processing the call keyword arguments
            kwargs_109125 = {}
            # Getting the type of 'call_assignment_100669' (line 3630)
            call_assignment_100669_109122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3630, 16), 'call_assignment_100669', False)
            # Obtaining the member '__getitem__' of a type (line 3630)
            getitem___109123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3630, 16), call_assignment_100669_109122, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109126 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109123, *[int_109124], **kwargs_109125)
            
            # Assigning a type to the variable 'call_assignment_100671' (line 3630)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3630, 16), 'call_assignment_100671', getitem___call_result_109126)
            
            # Assigning a Name to a Name (line 3630):
            
            # Assigning a Name to a Name (line 3630):
            # Getting the type of 'call_assignment_100671' (line 3630)
            call_assignment_100671_109127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3630, 16), 'call_assignment_100671')
            # Assigning a type to the variable 'codesB' (line 3630)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3630, 27), 'codesB', call_assignment_100671_109127)
            
            # Call to append(...): (line 3633)
            # Processing the call arguments (line 3633)
            # Getting the type of 'verticesB' (line 3633)
            verticesB_109130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3633, 37), 'verticesB', False)
            # Processing the call keyword arguments (line 3633)
            kwargs_109131 = {}
            # Getting the type of 'vertices_list' (line 3633)
            vertices_list_109128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3633, 16), 'vertices_list', False)
            # Obtaining the member 'append' of a type (line 3633)
            append_109129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3633, 16), vertices_list_109128, 'append')
            # Calling append(args, kwargs) (line 3633)
            append_call_result_109132 = invoke(stypy.reporting.localization.Localization(__file__, 3633, 16), append_109129, *[verticesB_109130], **kwargs_109131)
            
            
            # Call to append(...): (line 3634)
            # Processing the call arguments (line 3634)
            # Getting the type of 'codesB' (line 3634)
            codesB_109135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3634, 34), 'codesB', False)
            # Processing the call keyword arguments (line 3634)
            kwargs_109136 = {}
            # Getting the type of 'codes_list' (line 3634)
            codes_list_109133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3634, 16), 'codes_list', False)
            # Obtaining the member 'append' of a type (line 3634)
            append_109134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3634, 16), codes_list_109133, 'append')
            # Calling append(args, kwargs) (line 3634)
            append_call_result_109137 = invoke(stypy.reporting.localization.Localization(__file__, 3634, 16), append_109134, *[codesB_109135], **kwargs_109136)
            
            # SSA join for if statement (line 3626)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Name (line 3636):
            
            # Assigning a Call to a Name (line 3636):
            
            # Assigning a Call to a Name (line 3636):
            
            # Call to concatenate(...): (line 3636)
            # Processing the call arguments (line 3636)
            # Getting the type of 'vertices_list' (line 3636)
            vertices_list_109140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3636, 38), 'vertices_list', False)
            # Processing the call keyword arguments (line 3636)
            kwargs_109141 = {}
            # Getting the type of 'np' (line 3636)
            np_109138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3636, 23), 'np', False)
            # Obtaining the member 'concatenate' of a type (line 3636)
            concatenate_109139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3636, 23), np_109138, 'concatenate')
            # Calling concatenate(args, kwargs) (line 3636)
            concatenate_call_result_109142 = invoke(stypy.reporting.localization.Localization(__file__, 3636, 23), concatenate_109139, *[vertices_list_109140], **kwargs_109141)
            
            # Assigning a type to the variable 'vertices' (line 3636)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3636, 12), 'vertices', concatenate_call_result_109142)
            
            # Assigning a Call to a Name (line 3637):
            
            # Assigning a Call to a Name (line 3637):
            
            # Assigning a Call to a Name (line 3637):
            
            # Call to concatenate(...): (line 3637)
            # Processing the call arguments (line 3637)
            # Getting the type of 'codes_list' (line 3637)
            codes_list_109145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3637, 35), 'codes_list', False)
            # Processing the call keyword arguments (line 3637)
            kwargs_109146 = {}
            # Getting the type of 'np' (line 3637)
            np_109143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3637, 20), 'np', False)
            # Obtaining the member 'concatenate' of a type (line 3637)
            concatenate_109144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3637, 20), np_109143, 'concatenate')
            # Calling concatenate(args, kwargs) (line 3637)
            concatenate_call_result_109147 = invoke(stypy.reporting.localization.Localization(__file__, 3637, 20), concatenate_109144, *[codes_list_109145], **kwargs_109146)
            
            # Assigning a type to the variable 'codes' (line 3637)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3637, 12), 'codes', concatenate_call_result_109147)
            
            # Assigning a Call to a Name (line 3639):
            
            # Assigning a Call to a Name (line 3639):
            
            # Assigning a Call to a Name (line 3639):
            
            # Call to Path(...): (line 3639)
            # Processing the call arguments (line 3639)
            # Getting the type of 'vertices' (line 3639)
            vertices_109149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3639, 21), 'vertices', False)
            # Getting the type of 'codes' (line 3639)
            codes_109150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3639, 31), 'codes', False)
            # Processing the call keyword arguments (line 3639)
            kwargs_109151 = {}
            # Getting the type of 'Path' (line 3639)
            Path_109148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3639, 16), 'Path', False)
            # Calling Path(args, kwargs) (line 3639)
            Path_call_result_109152 = invoke(stypy.reporting.localization.Localization(__file__, 3639, 16), Path_109148, *[vertices_109149, codes_109150], **kwargs_109151)
            
            # Assigning a type to the variable 'p' (line 3639)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3639, 12), 'p', Path_call_result_109152)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3641)
            tuple_109153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3641, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3641)
            # Adding element type (line 3641)
            # Getting the type of 'p' (line 3641)
            p_109154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3641, 19), 'p')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3641, 19), tuple_109153, p_109154)
            # Adding element type (line 3641)
            # Getting the type of 'False' (line 3641)
            False_109155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3641, 22), 'False')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3641, 19), tuple_109153, False_109155)
            
            # Assigning a type to the variable 'stypy_return_type' (line 3641)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3641, 12), 'stypy_return_type', tuple_109153)
            
            # ################# End of 'transmute(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'transmute' in the type store
            # Getting the type of 'stypy_return_type' (line 3599)
            stypy_return_type_109156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3599, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_109156)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'transmute'
            return stypy_return_type_109156

    
    # Assigning a type to the variable '_Bracket' (line 3566)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3566, 4), '_Bracket', _Bracket)
    # Declaration of the 'BracketAB' class
    # Getting the type of '_Bracket' (line 3643)
    _Bracket_109157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3643, 20), '_Bracket')

    class BracketAB(_Bracket_109157, ):
        unicode_109158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3646, (-1)), 'unicode', u'\n        An arrow with a bracket(]) at both ends.\n        ')

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            float_109159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3649, 28), 'float')
            float_109160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3649, 40), 'float')
            # Getting the type of 'None' (line 3649)
            None_109161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3649, 52), 'None')
            float_109162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3650, 28), 'float')
            float_109163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3650, 40), 'float')
            # Getting the type of 'None' (line 3650)
            None_109164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3650, 52), 'None')
            defaults = [float_109159, float_109160, None_109161, float_109162, float_109163, None_109164]
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 3648, 8, False)
            # Assigning a type to the variable 'self' (line 3649)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3649, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'BracketAB.__init__', ['widthA', 'lengthA', 'angleA', 'widthB', 'lengthB', 'angleB'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, ['widthA', 'lengthA', 'angleA', 'widthB', 'lengthB', 'angleB'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            unicode_109165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3671, (-1)), 'unicode', u'\n            Parameters\n            ----------\n            widthA : float, optional, default : 1.0\n                Width of the bracket\n\n            lengthA : float, optional, default : 0.2\n                Length of the bracket\n\n            angleA : float, optional, default : None\n                Angle between the bracket and the line\n\n            widthB : float, optional, default : 1.0\n                Width of the bracket\n\n            lengthB : float, optional, default : 0.2\n                Length of the bracket\n\n            angleB : float, optional, default : None\n                Angle between the bracket and the line\n            ')
            
            # Call to __init__(...): (line 3673)
            # Processing the call arguments (line 3673)
            # Getting the type of 'True' (line 3674)
            True_109173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3674, 24), 'True', False)
            # Getting the type of 'True' (line 3674)
            True_109174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3674, 30), 'True', False)
            # Processing the call keyword arguments (line 3673)
            # Getting the type of 'widthA' (line 3674)
            widthA_109175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3674, 43), 'widthA', False)
            keyword_109176 = widthA_109175
            # Getting the type of 'lengthA' (line 3674)
            lengthA_109177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3674, 59), 'lengthA', False)
            keyword_109178 = lengthA_109177
            # Getting the type of 'angleA' (line 3675)
            angleA_109179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3675, 31), 'angleA', False)
            keyword_109180 = angleA_109179
            # Getting the type of 'widthB' (line 3675)
            widthB_109181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3675, 46), 'widthB', False)
            keyword_109182 = widthB_109181
            # Getting the type of 'lengthB' (line 3675)
            lengthB_109183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3675, 62), 'lengthB', False)
            keyword_109184 = lengthB_109183
            # Getting the type of 'angleB' (line 3676)
            angleB_109185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3676, 31), 'angleB', False)
            keyword_109186 = angleB_109185
            kwargs_109187 = {'angleA': keyword_109180, 'angleB': keyword_109186, 'widthB': keyword_109182, 'lengthB': keyword_109184, 'lengthA': keyword_109178, 'widthA': keyword_109176}
            
            # Call to super(...): (line 3673)
            # Processing the call arguments (line 3673)
            # Getting the type of 'ArrowStyle' (line 3673)
            ArrowStyle_109167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3673, 18), 'ArrowStyle', False)
            # Obtaining the member 'BracketAB' of a type (line 3673)
            BracketAB_109168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3673, 18), ArrowStyle_109167, 'BracketAB')
            # Getting the type of 'self' (line 3673)
            self_109169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3673, 40), 'self', False)
            # Processing the call keyword arguments (line 3673)
            kwargs_109170 = {}
            # Getting the type of 'super' (line 3673)
            super_109166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3673, 12), 'super', False)
            # Calling super(args, kwargs) (line 3673)
            super_call_result_109171 = invoke(stypy.reporting.localization.Localization(__file__, 3673, 12), super_109166, *[BracketAB_109168, self_109169], **kwargs_109170)
            
            # Obtaining the member '__init__' of a type (line 3673)
            init___109172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3673, 12), super_call_result_109171, '__init__')
            # Calling __init__(args, kwargs) (line 3673)
            init___call_result_109188 = invoke(stypy.reporting.localization.Localization(__file__, 3673, 12), init___109172, *[True_109173, True_109174], **kwargs_109187)
            
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()

    
    # Assigning a type to the variable 'BracketAB' (line 3643)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3643, 4), 'BracketAB', BracketAB)
    
    # Assigning a Name to a Subscript (line 3678):
    
    # Assigning a Name to a Subscript (line 3678):
    # Declaration of the 'BracketA' class
    # Getting the type of '_Bracket' (line 3680)
    _Bracket_109189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3680, 19), '_Bracket')

    class BracketA(_Bracket_109189, ):
        unicode_109190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3683, (-1)), 'unicode', u'\n        An arrow with a bracket(])  at its end.\n        ')

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            float_109191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3685, 34), 'float')
            float_109192 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3685, 46), 'float')
            # Getting the type of 'None' (line 3685)
            None_109193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3685, 58), 'None')
            defaults = [float_109191, float_109192, None_109193]
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 3685, 8, False)
            # Assigning a type to the variable 'self' (line 3686)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3686, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'BracketA.__init__', ['widthA', 'lengthA', 'angleA'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, ['widthA', 'lengthA', 'angleA'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            unicode_109194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3697, (-1)), 'unicode', u'\n            Parameters\n            ----------\n            widthA : float, optional, default : 1.0\n                Width of the bracket\n\n            lengthA : float, optional, default : 0.2\n                Length of the bracket\n\n            angleA : float, optional, default : None\n                Angle between the bracket and the line\n            ')
            
            # Call to __init__(...): (line 3699)
            # Processing the call arguments (line 3699)
            # Getting the type of 'True' (line 3699)
            True_109202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3699, 54), 'True', False)
            # Getting the type of 'None' (line 3699)
            None_109203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3699, 60), 'None', False)
            # Processing the call keyword arguments (line 3699)
            # Getting the type of 'widthA' (line 3700)
            widthA_109204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3700, 61), 'widthA', False)
            keyword_109205 = widthA_109204
            # Getting the type of 'lengthA' (line 3701)
            lengthA_109206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3701, 62), 'lengthA', False)
            keyword_109207 = lengthA_109206
            # Getting the type of 'angleA' (line 3702)
            angleA_109208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3702, 61), 'angleA', False)
            keyword_109209 = angleA_109208
            kwargs_109210 = {'lengthA': keyword_109207, 'widthA': keyword_109205, 'angleA': keyword_109209}
            
            # Call to super(...): (line 3699)
            # Processing the call arguments (line 3699)
            # Getting the type of 'ArrowStyle' (line 3699)
            ArrowStyle_109196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3699, 18), 'ArrowStyle', False)
            # Obtaining the member 'BracketA' of a type (line 3699)
            BracketA_109197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3699, 18), ArrowStyle_109196, 'BracketA')
            # Getting the type of 'self' (line 3699)
            self_109198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3699, 39), 'self', False)
            # Processing the call keyword arguments (line 3699)
            kwargs_109199 = {}
            # Getting the type of 'super' (line 3699)
            super_109195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3699, 12), 'super', False)
            # Calling super(args, kwargs) (line 3699)
            super_call_result_109200 = invoke(stypy.reporting.localization.Localization(__file__, 3699, 12), super_109195, *[BracketA_109197, self_109198], **kwargs_109199)
            
            # Obtaining the member '__init__' of a type (line 3699)
            init___109201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3699, 12), super_call_result_109200, '__init__')
            # Calling __init__(args, kwargs) (line 3699)
            init___call_result_109211 = invoke(stypy.reporting.localization.Localization(__file__, 3699, 12), init___109201, *[True_109202, None_109203], **kwargs_109210)
            
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()

    
    # Assigning a type to the variable 'BracketA' (line 3680)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3680, 4), 'BracketA', BracketA)
    
    # Assigning a Name to a Subscript (line 3704):
    
    # Assigning a Name to a Subscript (line 3704):
    # Declaration of the 'BracketB' class
    # Getting the type of '_Bracket' (line 3706)
    _Bracket_109212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3706, 19), '_Bracket')

    class BracketB(_Bracket_109212, ):
        unicode_109213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3709, (-1)), 'unicode', u'\n        An arrow with a bracket([)  at its end.\n        ')

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            float_109214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3711, 34), 'float')
            float_109215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3711, 46), 'float')
            # Getting the type of 'None' (line 3711)
            None_109216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3711, 58), 'None')
            defaults = [float_109214, float_109215, None_109216]
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 3711, 8, False)
            # Assigning a type to the variable 'self' (line 3712)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3712, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'BracketB.__init__', ['widthB', 'lengthB', 'angleB'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, ['widthB', 'lengthB', 'angleB'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            unicode_109217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3723, (-1)), 'unicode', u'\n            Parameters\n            ----------\n            widthB : float, optional, default : 1.0\n                Width of the bracket\n\n            lengthB : float, optional, default : 0.2\n                Length of the bracket\n\n            angleB : float, optional, default : None\n                Angle between the bracket and the line\n            ')
            
            # Call to __init__(...): (line 3725)
            # Processing the call arguments (line 3725)
            # Getting the type of 'None' (line 3725)
            None_109225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3725, 54), 'None', False)
            # Getting the type of 'True' (line 3725)
            True_109226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3725, 60), 'True', False)
            # Processing the call keyword arguments (line 3725)
            # Getting the type of 'widthB' (line 3726)
            widthB_109227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3726, 61), 'widthB', False)
            keyword_109228 = widthB_109227
            # Getting the type of 'lengthB' (line 3727)
            lengthB_109229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3727, 62), 'lengthB', False)
            keyword_109230 = lengthB_109229
            # Getting the type of 'angleB' (line 3728)
            angleB_109231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3728, 61), 'angleB', False)
            keyword_109232 = angleB_109231
            kwargs_109233 = {'widthB': keyword_109228, 'lengthB': keyword_109230, 'angleB': keyword_109232}
            
            # Call to super(...): (line 3725)
            # Processing the call arguments (line 3725)
            # Getting the type of 'ArrowStyle' (line 3725)
            ArrowStyle_109219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3725, 18), 'ArrowStyle', False)
            # Obtaining the member 'BracketB' of a type (line 3725)
            BracketB_109220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3725, 18), ArrowStyle_109219, 'BracketB')
            # Getting the type of 'self' (line 3725)
            self_109221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3725, 39), 'self', False)
            # Processing the call keyword arguments (line 3725)
            kwargs_109222 = {}
            # Getting the type of 'super' (line 3725)
            super_109218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3725, 12), 'super', False)
            # Calling super(args, kwargs) (line 3725)
            super_call_result_109223 = invoke(stypy.reporting.localization.Localization(__file__, 3725, 12), super_109218, *[BracketB_109220, self_109221], **kwargs_109222)
            
            # Obtaining the member '__init__' of a type (line 3725)
            init___109224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3725, 12), super_call_result_109223, '__init__')
            # Calling __init__(args, kwargs) (line 3725)
            init___call_result_109234 = invoke(stypy.reporting.localization.Localization(__file__, 3725, 12), init___109224, *[None_109225, True_109226], **kwargs_109233)
            
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()

    
    # Assigning a type to the variable 'BracketB' (line 3706)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3706, 4), 'BracketB', BracketB)
    
    # Assigning a Name to a Subscript (line 3730):
    
    # Assigning a Name to a Subscript (line 3730):
    # Declaration of the 'BarAB' class
    # Getting the type of '_Bracket' (line 3732)
    _Bracket_109235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3732, 16), '_Bracket')

    class BarAB(_Bracket_109235, ):
        unicode_109236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3735, (-1)), 'unicode', u'\n        An arrow with a bar(|) at both ends.\n        ')

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            float_109237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3738, 28), 'float')
            # Getting the type of 'None' (line 3738)
            None_109238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3738, 39), 'None')
            float_109239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3739, 28), 'float')
            # Getting the type of 'None' (line 3739)
            None_109240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3739, 39), 'None')
            defaults = [float_109237, None_109238, float_109239, None_109240]
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 3737, 8, False)
            # Assigning a type to the variable 'self' (line 3738)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3738, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'BarAB.__init__', ['widthA', 'angleA', 'widthB', 'angleB'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, ['widthA', 'angleA', 'widthB', 'angleB'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            unicode_109241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3754, (-1)), 'unicode', u'\n            Parameters\n            ----------\n            widthA : float, optional, default : 1.0\n                Width of the bracket\n\n            angleA : float, optional, default : None\n                Angle between the bracket and the line\n\n            widthB : float, optional, default : 1.0\n                Width of the bracket\n\n            angleB : float, optional, default : None\n                Angle between the bracket and the line\n            ')
            
            # Call to __init__(...): (line 3756)
            # Processing the call arguments (line 3756)
            # Getting the type of 'True' (line 3757)
            True_109249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3757, 24), 'True', False)
            # Getting the type of 'True' (line 3757)
            True_109250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3757, 30), 'True', False)
            # Processing the call keyword arguments (line 3756)
            # Getting the type of 'widthA' (line 3757)
            widthA_109251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3757, 43), 'widthA', False)
            keyword_109252 = widthA_109251
            int_109253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3757, 59), 'int')
            keyword_109254 = int_109253
            # Getting the type of 'angleA' (line 3757)
            angleA_109255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3757, 69), 'angleA', False)
            keyword_109256 = angleA_109255
            # Getting the type of 'widthB' (line 3758)
            widthB_109257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3758, 31), 'widthB', False)
            keyword_109258 = widthB_109257
            int_109259 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3758, 47), 'int')
            keyword_109260 = int_109259
            # Getting the type of 'angleB' (line 3758)
            angleB_109261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3758, 57), 'angleB', False)
            keyword_109262 = angleB_109261
            kwargs_109263 = {'angleA': keyword_109256, 'angleB': keyword_109262, 'widthB': keyword_109258, 'lengthB': keyword_109260, 'lengthA': keyword_109254, 'widthA': keyword_109252}
            
            # Call to super(...): (line 3756)
            # Processing the call arguments (line 3756)
            # Getting the type of 'ArrowStyle' (line 3756)
            ArrowStyle_109243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3756, 18), 'ArrowStyle', False)
            # Obtaining the member 'BarAB' of a type (line 3756)
            BarAB_109244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3756, 18), ArrowStyle_109243, 'BarAB')
            # Getting the type of 'self' (line 3756)
            self_109245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3756, 36), 'self', False)
            # Processing the call keyword arguments (line 3756)
            kwargs_109246 = {}
            # Getting the type of 'super' (line 3756)
            super_109242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3756, 12), 'super', False)
            # Calling super(args, kwargs) (line 3756)
            super_call_result_109247 = invoke(stypy.reporting.localization.Localization(__file__, 3756, 12), super_109242, *[BarAB_109244, self_109245], **kwargs_109246)
            
            # Obtaining the member '__init__' of a type (line 3756)
            init___109248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3756, 12), super_call_result_109247, '__init__')
            # Calling __init__(args, kwargs) (line 3756)
            init___call_result_109264 = invoke(stypy.reporting.localization.Localization(__file__, 3756, 12), init___109248, *[True_109249, True_109250], **kwargs_109263)
            
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()

    
    # Assigning a type to the variable 'BarAB' (line 3732)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3732, 4), 'BarAB', BarAB)
    
    # Assigning a Name to a Subscript (line 3760):
    
    # Assigning a Name to a Subscript (line 3760):
    # Declaration of the 'Simple' class
    # Getting the type of '_Base' (line 3762)
    _Base_109265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3762, 17), '_Base')

    class Simple(_Base_109265, ):
        unicode_109266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3765, (-1)), 'unicode', u'\n        A simple arrow. Only works with a quadratic bezier curve.\n        ')

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            float_109267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3767, 39), 'float')
            float_109268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3767, 54), 'float')
            float_109269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3767, 69), 'float')
            defaults = [float_109267, float_109268, float_109269]
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 3767, 8, False)
            # Assigning a type to the variable 'self' (line 3768)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3768, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Simple.__init__', ['head_length', 'head_width', 'tail_width'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, ['head_length', 'head_width', 'tail_width'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            unicode_109270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3779, (-1)), 'unicode', u'\n            Parameters\n            ----------\n            head_length : float, optional, default : 0.5\n                Length of the arrow head\n\n            head_width : float, optional, default : 0.5\n                Width of the arrow head\n\n            tail_width : float, optional, default : 0.2\n                Width of the arrow tail\n            ')
            
            # Assigning a Tuple to a Tuple (line 3781):
            
            # Assigning a Name to a Name (line 3781):
            
            # Assigning a Name to a Name (line 3781):
            # Getting the type of 'head_length' (line 3782)
            head_length_109271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3782, 16), 'head_length')
            # Assigning a type to the variable 'tuple_assignment_100672' (line 3781)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3781, 12), 'tuple_assignment_100672', head_length_109271)
            
            # Assigning a Name to a Name (line 3781):
            
            # Assigning a Name to a Name (line 3781):
            # Getting the type of 'head_width' (line 3782)
            head_width_109272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3782, 29), 'head_width')
            # Assigning a type to the variable 'tuple_assignment_100673' (line 3781)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3781, 12), 'tuple_assignment_100673', head_width_109272)
            
            # Assigning a Name to a Name (line 3781):
            
            # Assigning a Name to a Name (line 3781):
            # Getting the type of 'tail_width' (line 3782)
            tail_width_109273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3782, 41), 'tail_width')
            # Assigning a type to the variable 'tuple_assignment_100674' (line 3781)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3781, 12), 'tuple_assignment_100674', tail_width_109273)
            
            # Assigning a Name to a Attribute (line 3781):
            
            # Assigning a Name to a Attribute (line 3781):
            # Getting the type of 'tuple_assignment_100672' (line 3781)
            tuple_assignment_100672_109274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3781, 12), 'tuple_assignment_100672')
            # Getting the type of 'self' (line 3781)
            self_109275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3781, 12), 'self')
            # Setting the type of the member 'head_length' of a type (line 3781)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3781, 12), self_109275, 'head_length', tuple_assignment_100672_109274)
            
            # Assigning a Name to a Attribute (line 3781):
            
            # Assigning a Name to a Attribute (line 3781):
            # Getting the type of 'tuple_assignment_100673' (line 3781)
            tuple_assignment_100673_109276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3781, 12), 'tuple_assignment_100673')
            # Getting the type of 'self' (line 3781)
            self_109277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3781, 30), 'self')
            # Setting the type of the member 'head_width' of a type (line 3781)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3781, 30), self_109277, 'head_width', tuple_assignment_100673_109276)
            
            # Assigning a Name to a Attribute (line 3781):
            
            # Assigning a Name to a Attribute (line 3781):
            # Getting the type of 'tuple_assignment_100674' (line 3781)
            tuple_assignment_100674_109278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3781, 12), 'tuple_assignment_100674')
            # Getting the type of 'self' (line 3781)
            self_109279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3781, 47), 'self')
            # Setting the type of the member 'tail_width' of a type (line 3781)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3781, 47), self_109279, 'tail_width', tuple_assignment_100674_109278)
            
            # Call to __init__(...): (line 3783)
            # Processing the call keyword arguments (line 3783)
            kwargs_109287 = {}
            
            # Call to super(...): (line 3783)
            # Processing the call arguments (line 3783)
            # Getting the type of 'ArrowStyle' (line 3783)
            ArrowStyle_109281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3783, 18), 'ArrowStyle', False)
            # Obtaining the member 'Simple' of a type (line 3783)
            Simple_109282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3783, 18), ArrowStyle_109281, 'Simple')
            # Getting the type of 'self' (line 3783)
            self_109283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3783, 37), 'self', False)
            # Processing the call keyword arguments (line 3783)
            kwargs_109284 = {}
            # Getting the type of 'super' (line 3783)
            super_109280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3783, 12), 'super', False)
            # Calling super(args, kwargs) (line 3783)
            super_call_result_109285 = invoke(stypy.reporting.localization.Localization(__file__, 3783, 12), super_109280, *[Simple_109282, self_109283], **kwargs_109284)
            
            # Obtaining the member '__init__' of a type (line 3783)
            init___109286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3783, 12), super_call_result_109285, '__init__')
            # Calling __init__(args, kwargs) (line 3783)
            init___call_result_109288 = invoke(stypy.reporting.localization.Localization(__file__, 3783, 12), init___109286, *[], **kwargs_109287)
            
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()


        @norecursion
        def transmute(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'transmute'
            module_type_store = module_type_store.open_function_context('transmute', 3785, 8, False)
            # Assigning a type to the variable 'self' (line 3786)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3786, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            Simple.transmute.__dict__.__setitem__('stypy_localization', localization)
            Simple.transmute.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            Simple.transmute.__dict__.__setitem__('stypy_type_store', module_type_store)
            Simple.transmute.__dict__.__setitem__('stypy_function_name', 'Simple.transmute')
            Simple.transmute.__dict__.__setitem__('stypy_param_names_list', ['path', 'mutation_size', 'linewidth'])
            Simple.transmute.__dict__.__setitem__('stypy_varargs_param_name', None)
            Simple.transmute.__dict__.__setitem__('stypy_kwargs_param_name', None)
            Simple.transmute.__dict__.__setitem__('stypy_call_defaults', defaults)
            Simple.transmute.__dict__.__setitem__('stypy_call_varargs', varargs)
            Simple.transmute.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            Simple.transmute.__dict__.__setitem__('stypy_declared_arg_number', 4)
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Simple.transmute', ['path', 'mutation_size', 'linewidth'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'transmute', localization, ['path', 'mutation_size', 'linewidth'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'transmute(...)' code ##################

            
            # Assigning a Call to a Tuple (line 3787):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to ensure_quadratic_bezier(...): (line 3787)
            # Processing the call arguments (line 3787)
            # Getting the type of 'path' (line 3787)
            path_109291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3787, 66), 'path', False)
            # Processing the call keyword arguments (line 3787)
            kwargs_109292 = {}
            # Getting the type of 'self' (line 3787)
            self_109289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3787, 37), 'self', False)
            # Obtaining the member 'ensure_quadratic_bezier' of a type (line 3787)
            ensure_quadratic_bezier_109290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3787, 37), self_109289, 'ensure_quadratic_bezier')
            # Calling ensure_quadratic_bezier(args, kwargs) (line 3787)
            ensure_quadratic_bezier_call_result_109293 = invoke(stypy.reporting.localization.Localization(__file__, 3787, 37), ensure_quadratic_bezier_109290, *[path_109291], **kwargs_109292)
            
            # Assigning a type to the variable 'call_assignment_100675' (line 3787)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3787, 12), 'call_assignment_100675', ensure_quadratic_bezier_call_result_109293)
            
            # Assigning a Call to a Name (line 3787):
            
            # Assigning a Call to a Name (line 3787):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3787, 12), 'int')
            # Processing the call keyword arguments
            kwargs_109297 = {}
            # Getting the type of 'call_assignment_100675' (line 3787)
            call_assignment_100675_109294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3787, 12), 'call_assignment_100675', False)
            # Obtaining the member '__getitem__' of a type (line 3787)
            getitem___109295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3787, 12), call_assignment_100675_109294, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109298 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109295, *[int_109296], **kwargs_109297)
            
            # Assigning a type to the variable 'call_assignment_100676' (line 3787)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3787, 12), 'call_assignment_100676', getitem___call_result_109298)
            
            # Assigning a Name to a Name (line 3787):
            
            # Assigning a Name to a Name (line 3787):
            # Getting the type of 'call_assignment_100676' (line 3787)
            call_assignment_100676_109299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3787, 12), 'call_assignment_100676')
            # Assigning a type to the variable 'x0' (line 3787)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3787, 12), 'x0', call_assignment_100676_109299)
            
            # Assigning a Call to a Name (line 3787):
            
            # Assigning a Call to a Name (line 3787):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3787, 12), 'int')
            # Processing the call keyword arguments
            kwargs_109303 = {}
            # Getting the type of 'call_assignment_100675' (line 3787)
            call_assignment_100675_109300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3787, 12), 'call_assignment_100675', False)
            # Obtaining the member '__getitem__' of a type (line 3787)
            getitem___109301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3787, 12), call_assignment_100675_109300, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109304 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109301, *[int_109302], **kwargs_109303)
            
            # Assigning a type to the variable 'call_assignment_100677' (line 3787)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3787, 12), 'call_assignment_100677', getitem___call_result_109304)
            
            # Assigning a Name to a Name (line 3787):
            
            # Assigning a Name to a Name (line 3787):
            # Getting the type of 'call_assignment_100677' (line 3787)
            call_assignment_100677_109305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3787, 12), 'call_assignment_100677')
            # Assigning a type to the variable 'y0' (line 3787)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3787, 16), 'y0', call_assignment_100677_109305)
            
            # Assigning a Call to a Name (line 3787):
            
            # Assigning a Call to a Name (line 3787):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3787, 12), 'int')
            # Processing the call keyword arguments
            kwargs_109309 = {}
            # Getting the type of 'call_assignment_100675' (line 3787)
            call_assignment_100675_109306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3787, 12), 'call_assignment_100675', False)
            # Obtaining the member '__getitem__' of a type (line 3787)
            getitem___109307 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3787, 12), call_assignment_100675_109306, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109310 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109307, *[int_109308], **kwargs_109309)
            
            # Assigning a type to the variable 'call_assignment_100678' (line 3787)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3787, 12), 'call_assignment_100678', getitem___call_result_109310)
            
            # Assigning a Name to a Name (line 3787):
            
            # Assigning a Name to a Name (line 3787):
            # Getting the type of 'call_assignment_100678' (line 3787)
            call_assignment_100678_109311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3787, 12), 'call_assignment_100678')
            # Assigning a type to the variable 'x1' (line 3787)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3787, 20), 'x1', call_assignment_100678_109311)
            
            # Assigning a Call to a Name (line 3787):
            
            # Assigning a Call to a Name (line 3787):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3787, 12), 'int')
            # Processing the call keyword arguments
            kwargs_109315 = {}
            # Getting the type of 'call_assignment_100675' (line 3787)
            call_assignment_100675_109312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3787, 12), 'call_assignment_100675', False)
            # Obtaining the member '__getitem__' of a type (line 3787)
            getitem___109313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3787, 12), call_assignment_100675_109312, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109316 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109313, *[int_109314], **kwargs_109315)
            
            # Assigning a type to the variable 'call_assignment_100679' (line 3787)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3787, 12), 'call_assignment_100679', getitem___call_result_109316)
            
            # Assigning a Name to a Name (line 3787):
            
            # Assigning a Name to a Name (line 3787):
            # Getting the type of 'call_assignment_100679' (line 3787)
            call_assignment_100679_109317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3787, 12), 'call_assignment_100679')
            # Assigning a type to the variable 'y1' (line 3787)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3787, 24), 'y1', call_assignment_100679_109317)
            
            # Assigning a Call to a Name (line 3787):
            
            # Assigning a Call to a Name (line 3787):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3787, 12), 'int')
            # Processing the call keyword arguments
            kwargs_109321 = {}
            # Getting the type of 'call_assignment_100675' (line 3787)
            call_assignment_100675_109318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3787, 12), 'call_assignment_100675', False)
            # Obtaining the member '__getitem__' of a type (line 3787)
            getitem___109319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3787, 12), call_assignment_100675_109318, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109322 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109319, *[int_109320], **kwargs_109321)
            
            # Assigning a type to the variable 'call_assignment_100680' (line 3787)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3787, 12), 'call_assignment_100680', getitem___call_result_109322)
            
            # Assigning a Name to a Name (line 3787):
            
            # Assigning a Name to a Name (line 3787):
            # Getting the type of 'call_assignment_100680' (line 3787)
            call_assignment_100680_109323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3787, 12), 'call_assignment_100680')
            # Assigning a type to the variable 'x2' (line 3787)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3787, 28), 'x2', call_assignment_100680_109323)
            
            # Assigning a Call to a Name (line 3787):
            
            # Assigning a Call to a Name (line 3787):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3787, 12), 'int')
            # Processing the call keyword arguments
            kwargs_109327 = {}
            # Getting the type of 'call_assignment_100675' (line 3787)
            call_assignment_100675_109324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3787, 12), 'call_assignment_100675', False)
            # Obtaining the member '__getitem__' of a type (line 3787)
            getitem___109325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3787, 12), call_assignment_100675_109324, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109328 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109325, *[int_109326], **kwargs_109327)
            
            # Assigning a type to the variable 'call_assignment_100681' (line 3787)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3787, 12), 'call_assignment_100681', getitem___call_result_109328)
            
            # Assigning a Name to a Name (line 3787):
            
            # Assigning a Name to a Name (line 3787):
            # Getting the type of 'call_assignment_100681' (line 3787)
            call_assignment_100681_109329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3787, 12), 'call_assignment_100681')
            # Assigning a type to the variable 'y2' (line 3787)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3787, 32), 'y2', call_assignment_100681_109329)
            
            # Assigning a BinOp to a Name (line 3790):
            
            # Assigning a BinOp to a Name (line 3790):
            
            # Assigning a BinOp to a Name (line 3790):
            # Getting the type of 'self' (line 3790)
            self_109330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3790, 26), 'self')
            # Obtaining the member 'head_length' of a type (line 3790)
            head_length_109331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3790, 26), self_109330, 'head_length')
            # Getting the type of 'mutation_size' (line 3790)
            mutation_size_109332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3790, 45), 'mutation_size')
            # Applying the binary operator '*' (line 3790)
            result_mul_109333 = python_operator(stypy.reporting.localization.Localization(__file__, 3790, 26), '*', head_length_109331, mutation_size_109332)
            
            # Assigning a type to the variable 'head_length' (line 3790)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3790, 12), 'head_length', result_mul_109333)
            
            # Assigning a Call to a Name (line 3791):
            
            # Assigning a Call to a Name (line 3791):
            
            # Assigning a Call to a Name (line 3791):
            
            # Call to inside_circle(...): (line 3791)
            # Processing the call arguments (line 3791)
            # Getting the type of 'x2' (line 3791)
            x2_109335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3791, 33), 'x2', False)
            # Getting the type of 'y2' (line 3791)
            y2_109336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3791, 37), 'y2', False)
            # Getting the type of 'head_length' (line 3791)
            head_length_109337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3791, 41), 'head_length', False)
            # Processing the call keyword arguments (line 3791)
            kwargs_109338 = {}
            # Getting the type of 'inside_circle' (line 3791)
            inside_circle_109334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3791, 19), 'inside_circle', False)
            # Calling inside_circle(args, kwargs) (line 3791)
            inside_circle_call_result_109339 = invoke(stypy.reporting.localization.Localization(__file__, 3791, 19), inside_circle_109334, *[x2_109335, y2_109336, head_length_109337], **kwargs_109338)
            
            # Assigning a type to the variable 'in_f' (line 3791)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3791, 12), 'in_f', inside_circle_call_result_109339)
            
            # Assigning a List to a Name (line 3792):
            
            # Assigning a List to a Name (line 3792):
            
            # Assigning a List to a Name (line 3792):
            
            # Obtaining an instance of the builtin type 'list' (line 3792)
            list_109340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3792, 25), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3792)
            # Adding element type (line 3792)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3792)
            tuple_109341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3792, 27), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3792)
            # Adding element type (line 3792)
            # Getting the type of 'x0' (line 3792)
            x0_109342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3792, 27), 'x0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3792, 27), tuple_109341, x0_109342)
            # Adding element type (line 3792)
            # Getting the type of 'y0' (line 3792)
            y0_109343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3792, 31), 'y0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3792, 27), tuple_109341, y0_109343)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3792, 25), list_109340, tuple_109341)
            # Adding element type (line 3792)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3792)
            tuple_109344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3792, 37), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3792)
            # Adding element type (line 3792)
            # Getting the type of 'x1' (line 3792)
            x1_109345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3792, 37), 'x1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3792, 37), tuple_109344, x1_109345)
            # Adding element type (line 3792)
            # Getting the type of 'y1' (line 3792)
            y1_109346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3792, 41), 'y1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3792, 37), tuple_109344, y1_109346)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3792, 25), list_109340, tuple_109344)
            # Adding element type (line 3792)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3792)
            tuple_109347 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3792, 47), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3792)
            # Adding element type (line 3792)
            # Getting the type of 'x2' (line 3792)
            x2_109348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3792, 47), 'x2')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3792, 47), tuple_109347, x2_109348)
            # Adding element type (line 3792)
            # Getting the type of 'y2' (line 3792)
            y2_109349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3792, 51), 'y2')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3792, 47), tuple_109347, y2_109349)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3792, 25), list_109340, tuple_109347)
            
            # Assigning a type to the variable 'arrow_path' (line 3792)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3792, 12), 'arrow_path', list_109340)
            stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3794, 12))
            
            # 'from matplotlib.bezier import NonIntersectingPathException' statement (line 3794)
            update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
            import_109350 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3794, 12), 'matplotlib.bezier')

            if (type(import_109350) is not StypyTypeError):

                if (import_109350 != 'pyd_module'):
                    __import__(import_109350)
                    sys_modules_109351 = sys.modules[import_109350]
                    import_from_module(stypy.reporting.localization.Localization(__file__, 3794, 12), 'matplotlib.bezier', sys_modules_109351.module_type_store, module_type_store, ['NonIntersectingPathException'])
                    nest_module(stypy.reporting.localization.Localization(__file__, 3794, 12), __file__, sys_modules_109351, sys_modules_109351.module_type_store, module_type_store)
                else:
                    from matplotlib.bezier import NonIntersectingPathException

                    import_from_module(stypy.reporting.localization.Localization(__file__, 3794, 12), 'matplotlib.bezier', None, module_type_store, ['NonIntersectingPathException'], [NonIntersectingPathException])

            else:
                # Assigning a type to the variable 'matplotlib.bezier' (line 3794)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3794, 12), 'matplotlib.bezier', import_109350)

            remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
            
            
            
            # SSA begins for try-except statement (line 3796)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            # Assigning a Call to a Tuple (line 3797):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to split_bezier_intersecting_with_closedpath(...): (line 3798)
            # Processing the call arguments (line 3798)
            # Getting the type of 'arrow_path' (line 3798)
            arrow_path_109353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3798, 64), 'arrow_path', False)
            # Getting the type of 'in_f' (line 3799)
            in_f_109354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3799, 64), 'in_f', False)
            # Processing the call keyword arguments (line 3798)
            float_109355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3800, 74), 'float')
            keyword_109356 = float_109355
            kwargs_109357 = {'tolerence': keyword_109356}
            # Getting the type of 'split_bezier_intersecting_with_closedpath' (line 3798)
            split_bezier_intersecting_with_closedpath_109352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3798, 22), 'split_bezier_intersecting_with_closedpath', False)
            # Calling split_bezier_intersecting_with_closedpath(args, kwargs) (line 3798)
            split_bezier_intersecting_with_closedpath_call_result_109358 = invoke(stypy.reporting.localization.Localization(__file__, 3798, 22), split_bezier_intersecting_with_closedpath_109352, *[arrow_path_109353, in_f_109354], **kwargs_109357)
            
            # Assigning a type to the variable 'call_assignment_100682' (line 3797)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3797, 16), 'call_assignment_100682', split_bezier_intersecting_with_closedpath_call_result_109358)
            
            # Assigning a Call to a Name (line 3797):
            
            # Assigning a Call to a Name (line 3797):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3797, 16), 'int')
            # Processing the call keyword arguments
            kwargs_109362 = {}
            # Getting the type of 'call_assignment_100682' (line 3797)
            call_assignment_100682_109359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3797, 16), 'call_assignment_100682', False)
            # Obtaining the member '__getitem__' of a type (line 3797)
            getitem___109360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3797, 16), call_assignment_100682_109359, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109363 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109360, *[int_109361], **kwargs_109362)
            
            # Assigning a type to the variable 'call_assignment_100683' (line 3797)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3797, 16), 'call_assignment_100683', getitem___call_result_109363)
            
            # Assigning a Name to a Name (line 3797):
            
            # Assigning a Name to a Name (line 3797):
            # Getting the type of 'call_assignment_100683' (line 3797)
            call_assignment_100683_109364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3797, 16), 'call_assignment_100683')
            # Assigning a type to the variable 'arrow_out' (line 3797)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3797, 16), 'arrow_out', call_assignment_100683_109364)
            
            # Assigning a Call to a Name (line 3797):
            
            # Assigning a Call to a Name (line 3797):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3797, 16), 'int')
            # Processing the call keyword arguments
            kwargs_109368 = {}
            # Getting the type of 'call_assignment_100682' (line 3797)
            call_assignment_100682_109365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3797, 16), 'call_assignment_100682', False)
            # Obtaining the member '__getitem__' of a type (line 3797)
            getitem___109366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3797, 16), call_assignment_100682_109365, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109369 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109366, *[int_109367], **kwargs_109368)
            
            # Assigning a type to the variable 'call_assignment_100684' (line 3797)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3797, 16), 'call_assignment_100684', getitem___call_result_109369)
            
            # Assigning a Name to a Name (line 3797):
            
            # Assigning a Name to a Name (line 3797):
            # Getting the type of 'call_assignment_100684' (line 3797)
            call_assignment_100684_109370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3797, 16), 'call_assignment_100684')
            # Assigning a type to the variable 'arrow_in' (line 3797)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3797, 27), 'arrow_in', call_assignment_100684_109370)
            # SSA branch for the except part of a try statement (line 3796)
            # SSA branch for the except 'NonIntersectingPathException' branch of a try statement (line 3796)
            module_type_store.open_ssa_branch('except')
            
            # Assigning a Call to a Tuple (line 3804):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to _point_along_a_line(...): (line 3804)
            # Processing the call arguments (line 3804)
            # Getting the type of 'x2' (line 3804)
            x2_109372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3804, 45), 'x2', False)
            # Getting the type of 'y2' (line 3804)
            y2_109373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3804, 49), 'y2', False)
            # Getting the type of 'x1' (line 3804)
            x1_109374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3804, 53), 'x1', False)
            # Getting the type of 'y1' (line 3804)
            y1_109375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3804, 57), 'y1', False)
            # Getting the type of 'head_length' (line 3804)
            head_length_109376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3804, 61), 'head_length', False)
            # Processing the call keyword arguments (line 3804)
            kwargs_109377 = {}
            # Getting the type of '_point_along_a_line' (line 3804)
            _point_along_a_line_109371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3804, 25), '_point_along_a_line', False)
            # Calling _point_along_a_line(args, kwargs) (line 3804)
            _point_along_a_line_call_result_109378 = invoke(stypy.reporting.localization.Localization(__file__, 3804, 25), _point_along_a_line_109371, *[x2_109372, y2_109373, x1_109374, y1_109375, head_length_109376], **kwargs_109377)
            
            # Assigning a type to the variable 'call_assignment_100685' (line 3804)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3804, 16), 'call_assignment_100685', _point_along_a_line_call_result_109378)
            
            # Assigning a Call to a Name (line 3804):
            
            # Assigning a Call to a Name (line 3804):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109381 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3804, 16), 'int')
            # Processing the call keyword arguments
            kwargs_109382 = {}
            # Getting the type of 'call_assignment_100685' (line 3804)
            call_assignment_100685_109379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3804, 16), 'call_assignment_100685', False)
            # Obtaining the member '__getitem__' of a type (line 3804)
            getitem___109380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3804, 16), call_assignment_100685_109379, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109383 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109380, *[int_109381], **kwargs_109382)
            
            # Assigning a type to the variable 'call_assignment_100686' (line 3804)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3804, 16), 'call_assignment_100686', getitem___call_result_109383)
            
            # Assigning a Name to a Name (line 3804):
            
            # Assigning a Name to a Name (line 3804):
            # Getting the type of 'call_assignment_100686' (line 3804)
            call_assignment_100686_109384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3804, 16), 'call_assignment_100686')
            # Assigning a type to the variable 'x0' (line 3804)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3804, 16), 'x0', call_assignment_100686_109384)
            
            # Assigning a Call to a Name (line 3804):
            
            # Assigning a Call to a Name (line 3804):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3804, 16), 'int')
            # Processing the call keyword arguments
            kwargs_109388 = {}
            # Getting the type of 'call_assignment_100685' (line 3804)
            call_assignment_100685_109385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3804, 16), 'call_assignment_100685', False)
            # Obtaining the member '__getitem__' of a type (line 3804)
            getitem___109386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3804, 16), call_assignment_100685_109385, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109389 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109386, *[int_109387], **kwargs_109388)
            
            # Assigning a type to the variable 'call_assignment_100687' (line 3804)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3804, 16), 'call_assignment_100687', getitem___call_result_109389)
            
            # Assigning a Name to a Name (line 3804):
            
            # Assigning a Name to a Name (line 3804):
            # Getting the type of 'call_assignment_100687' (line 3804)
            call_assignment_100687_109390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3804, 16), 'call_assignment_100687')
            # Assigning a type to the variable 'y0' (line 3804)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3804, 20), 'y0', call_assignment_100687_109390)
            
            # Assigning a Tuple to a Tuple (line 3805):
            
            # Assigning a BinOp to a Name (line 3805):
            
            # Assigning a BinOp to a Name (line 3805):
            float_109391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3805, 27), 'float')
            # Getting the type of 'x0' (line 3805)
            x0_109392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3805, 34), 'x0')
            # Getting the type of 'x2' (line 3805)
            x2_109393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3805, 39), 'x2')
            # Applying the binary operator '+' (line 3805)
            result_add_109394 = python_operator(stypy.reporting.localization.Localization(__file__, 3805, 34), '+', x0_109392, x2_109393)
            
            # Applying the binary operator '*' (line 3805)
            result_mul_109395 = python_operator(stypy.reporting.localization.Localization(__file__, 3805, 27), '*', float_109391, result_add_109394)
            
            # Assigning a type to the variable 'tuple_assignment_100688' (line 3805)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3805, 16), 'tuple_assignment_100688', result_mul_109395)
            
            # Assigning a BinOp to a Name (line 3805):
            
            # Assigning a BinOp to a Name (line 3805):
            float_109396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3805, 44), 'float')
            # Getting the type of 'y0' (line 3805)
            y0_109397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3805, 51), 'y0')
            # Getting the type of 'y2' (line 3805)
            y2_109398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3805, 56), 'y2')
            # Applying the binary operator '+' (line 3805)
            result_add_109399 = python_operator(stypy.reporting.localization.Localization(__file__, 3805, 51), '+', y0_109397, y2_109398)
            
            # Applying the binary operator '*' (line 3805)
            result_mul_109400 = python_operator(stypy.reporting.localization.Localization(__file__, 3805, 44), '*', float_109396, result_add_109399)
            
            # Assigning a type to the variable 'tuple_assignment_100689' (line 3805)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3805, 16), 'tuple_assignment_100689', result_mul_109400)
            
            # Assigning a Name to a Name (line 3805):
            
            # Assigning a Name to a Name (line 3805):
            # Getting the type of 'tuple_assignment_100688' (line 3805)
            tuple_assignment_100688_109401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3805, 16), 'tuple_assignment_100688')
            # Assigning a type to the variable 'x1n' (line 3805)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3805, 16), 'x1n', tuple_assignment_100688_109401)
            
            # Assigning a Name to a Name (line 3805):
            
            # Assigning a Name to a Name (line 3805):
            # Getting the type of 'tuple_assignment_100689' (line 3805)
            tuple_assignment_100689_109402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3805, 16), 'tuple_assignment_100689')
            # Assigning a type to the variable 'y1n' (line 3805)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3805, 21), 'y1n', tuple_assignment_100689_109402)
            
            # Assigning a List to a Name (line 3806):
            
            # Assigning a List to a Name (line 3806):
            
            # Assigning a List to a Name (line 3806):
            
            # Obtaining an instance of the builtin type 'list' (line 3806)
            list_109403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3806, 27), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3806)
            # Adding element type (line 3806)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3806)
            tuple_109404 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3806, 29), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3806)
            # Adding element type (line 3806)
            # Getting the type of 'x0' (line 3806)
            x0_109405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3806, 29), 'x0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3806, 29), tuple_109404, x0_109405)
            # Adding element type (line 3806)
            # Getting the type of 'y0' (line 3806)
            y0_109406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3806, 33), 'y0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3806, 29), tuple_109404, y0_109406)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3806, 27), list_109403, tuple_109404)
            # Adding element type (line 3806)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3806)
            tuple_109407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3806, 39), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3806)
            # Adding element type (line 3806)
            # Getting the type of 'x1n' (line 3806)
            x1n_109408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3806, 39), 'x1n')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3806, 39), tuple_109407, x1n_109408)
            # Adding element type (line 3806)
            # Getting the type of 'y1n' (line 3806)
            y1n_109409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3806, 44), 'y1n')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3806, 39), tuple_109407, y1n_109409)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3806, 27), list_109403, tuple_109407)
            # Adding element type (line 3806)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3806)
            tuple_109410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3806, 51), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3806)
            # Adding element type (line 3806)
            # Getting the type of 'x2' (line 3806)
            x2_109411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3806, 51), 'x2')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3806, 51), tuple_109410, x2_109411)
            # Adding element type (line 3806)
            # Getting the type of 'y2' (line 3806)
            y2_109412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3806, 55), 'y2')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3806, 51), tuple_109410, y2_109412)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3806, 27), list_109403, tuple_109410)
            
            # Assigning a type to the variable 'arrow_in' (line 3806)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3806, 16), 'arrow_in', list_109403)
            
            # Assigning a Name to a Name (line 3807):
            
            # Assigning a Name to a Name (line 3807):
            
            # Assigning a Name to a Name (line 3807):
            # Getting the type of 'None' (line 3807)
            None_109413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3807, 28), 'None')
            # Assigning a type to the variable 'arrow_out' (line 3807)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3807, 16), 'arrow_out', None_109413)
            # SSA join for try-except statement (line 3796)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a BinOp to a Name (line 3810):
            
            # Assigning a BinOp to a Name (line 3810):
            
            # Assigning a BinOp to a Name (line 3810):
            # Getting the type of 'self' (line 3810)
            self_109414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3810, 25), 'self')
            # Obtaining the member 'head_width' of a type (line 3810)
            head_width_109415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3810, 25), self_109414, 'head_width')
            # Getting the type of 'mutation_size' (line 3810)
            mutation_size_109416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3810, 43), 'mutation_size')
            # Applying the binary operator '*' (line 3810)
            result_mul_109417 = python_operator(stypy.reporting.localization.Localization(__file__, 3810, 25), '*', head_width_109415, mutation_size_109416)
            
            # Assigning a type to the variable 'head_width' (line 3810)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3810, 12), 'head_width', result_mul_109417)
            
            # Assigning a Call to a Tuple (line 3811):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to make_wedged_bezier2(...): (line 3811)
            # Processing the call arguments (line 3811)
            # Getting the type of 'arrow_in' (line 3811)
            arrow_in_109419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3811, 56), 'arrow_in', False)
            # Getting the type of 'head_width' (line 3812)
            head_width_109420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3812, 56), 'head_width', False)
            float_109421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3812, 69), 'float')
            # Applying the binary operator 'div' (line 3812)
            result_div_109422 = python_operator(stypy.reporting.localization.Localization(__file__, 3812, 56), 'div', head_width_109420, float_109421)
            
            # Processing the call keyword arguments (line 3811)
            float_109423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3812, 76), 'float')
            keyword_109424 = float_109423
            kwargs_109425 = {'wm': keyword_109424}
            # Getting the type of 'make_wedged_bezier2' (line 3811)
            make_wedged_bezier2_109418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3811, 36), 'make_wedged_bezier2', False)
            # Calling make_wedged_bezier2(args, kwargs) (line 3811)
            make_wedged_bezier2_call_result_109426 = invoke(stypy.reporting.localization.Localization(__file__, 3811, 36), make_wedged_bezier2_109418, *[arrow_in_109419, result_div_109422], **kwargs_109425)
            
            # Assigning a type to the variable 'call_assignment_100690' (line 3811)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3811, 12), 'call_assignment_100690', make_wedged_bezier2_call_result_109426)
            
            # Assigning a Call to a Name (line 3811):
            
            # Assigning a Call to a Name (line 3811):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3811, 12), 'int')
            # Processing the call keyword arguments
            kwargs_109430 = {}
            # Getting the type of 'call_assignment_100690' (line 3811)
            call_assignment_100690_109427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3811, 12), 'call_assignment_100690', False)
            # Obtaining the member '__getitem__' of a type (line 3811)
            getitem___109428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3811, 12), call_assignment_100690_109427, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109431 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109428, *[int_109429], **kwargs_109430)
            
            # Assigning a type to the variable 'call_assignment_100691' (line 3811)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3811, 12), 'call_assignment_100691', getitem___call_result_109431)
            
            # Assigning a Name to a Name (line 3811):
            
            # Assigning a Name to a Name (line 3811):
            # Getting the type of 'call_assignment_100691' (line 3811)
            call_assignment_100691_109432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3811, 12), 'call_assignment_100691')
            # Assigning a type to the variable 'head_left' (line 3811)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3811, 12), 'head_left', call_assignment_100691_109432)
            
            # Assigning a Call to a Name (line 3811):
            
            # Assigning a Call to a Name (line 3811):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3811, 12), 'int')
            # Processing the call keyword arguments
            kwargs_109436 = {}
            # Getting the type of 'call_assignment_100690' (line 3811)
            call_assignment_100690_109433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3811, 12), 'call_assignment_100690', False)
            # Obtaining the member '__getitem__' of a type (line 3811)
            getitem___109434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3811, 12), call_assignment_100690_109433, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109437 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109434, *[int_109435], **kwargs_109436)
            
            # Assigning a type to the variable 'call_assignment_100692' (line 3811)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3811, 12), 'call_assignment_100692', getitem___call_result_109437)
            
            # Assigning a Name to a Name (line 3811):
            
            # Assigning a Name to a Name (line 3811):
            # Getting the type of 'call_assignment_100692' (line 3811)
            call_assignment_100692_109438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3811, 12), 'call_assignment_100692')
            # Assigning a type to the variable 'head_right' (line 3811)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3811, 23), 'head_right', call_assignment_100692_109438)
            
            # Type idiom detected: calculating its left and rigth part (line 3815)
            # Getting the type of 'arrow_out' (line 3815)
            arrow_out_109439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3815, 12), 'arrow_out')
            # Getting the type of 'None' (line 3815)
            None_109440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3815, 32), 'None')
            
            (may_be_109441, more_types_in_union_109442) = may_not_be_none(arrow_out_109439, None_109440)

            if may_be_109441:

                if more_types_in_union_109442:
                    # Runtime conditional SSA (line 3815)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Assigning a BinOp to a Name (line 3816):
                
                # Assigning a BinOp to a Name (line 3816):
                
                # Assigning a BinOp to a Name (line 3816):
                # Getting the type of 'self' (line 3816)
                self_109443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3816, 29), 'self')
                # Obtaining the member 'tail_width' of a type (line 3816)
                tail_width_109444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3816, 29), self_109443, 'tail_width')
                # Getting the type of 'mutation_size' (line 3816)
                mutation_size_109445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3816, 47), 'mutation_size')
                # Applying the binary operator '*' (line 3816)
                result_mul_109446 = python_operator(stypy.reporting.localization.Localization(__file__, 3816, 29), '*', tail_width_109444, mutation_size_109445)
                
                # Assigning a type to the variable 'tail_width' (line 3816)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3816, 16), 'tail_width', result_mul_109446)
                
                # Assigning a Call to a Tuple (line 3817):
                
                # Assigning a Call to a Name:
                
                # Assigning a Call to a Name:
                
                # Call to get_parallels(...): (line 3817)
                # Processing the call arguments (line 3817)
                # Getting the type of 'arrow_out' (line 3817)
                arrow_out_109448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3817, 54), 'arrow_out', False)
                # Getting the type of 'tail_width' (line 3818)
                tail_width_109449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3818, 54), 'tail_width', False)
                float_109450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3818, 67), 'float')
                # Applying the binary operator 'div' (line 3818)
                result_div_109451 = python_operator(stypy.reporting.localization.Localization(__file__, 3818, 54), 'div', tail_width_109449, float_109450)
                
                # Processing the call keyword arguments (line 3817)
                kwargs_109452 = {}
                # Getting the type of 'get_parallels' (line 3817)
                get_parallels_109447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3817, 40), 'get_parallels', False)
                # Calling get_parallels(args, kwargs) (line 3817)
                get_parallels_call_result_109453 = invoke(stypy.reporting.localization.Localization(__file__, 3817, 40), get_parallels_109447, *[arrow_out_109448, result_div_109451], **kwargs_109452)
                
                # Assigning a type to the variable 'call_assignment_100693' (line 3817)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3817, 16), 'call_assignment_100693', get_parallels_call_result_109453)
                
                # Assigning a Call to a Name (line 3817):
                
                # Assigning a Call to a Name (line 3817):
                
                # Call to __getitem__(...):
                # Processing the call arguments
                int_109456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3817, 16), 'int')
                # Processing the call keyword arguments
                kwargs_109457 = {}
                # Getting the type of 'call_assignment_100693' (line 3817)
                call_assignment_100693_109454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3817, 16), 'call_assignment_100693', False)
                # Obtaining the member '__getitem__' of a type (line 3817)
                getitem___109455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3817, 16), call_assignment_100693_109454, '__getitem__')
                # Calling __getitem__(args, kwargs)
                getitem___call_result_109458 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109455, *[int_109456], **kwargs_109457)
                
                # Assigning a type to the variable 'call_assignment_100694' (line 3817)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3817, 16), 'call_assignment_100694', getitem___call_result_109458)
                
                # Assigning a Name to a Name (line 3817):
                
                # Assigning a Name to a Name (line 3817):
                # Getting the type of 'call_assignment_100694' (line 3817)
                call_assignment_100694_109459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3817, 16), 'call_assignment_100694')
                # Assigning a type to the variable 'tail_left' (line 3817)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3817, 16), 'tail_left', call_assignment_100694_109459)
                
                # Assigning a Call to a Name (line 3817):
                
                # Assigning a Call to a Name (line 3817):
                
                # Call to __getitem__(...):
                # Processing the call arguments
                int_109462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3817, 16), 'int')
                # Processing the call keyword arguments
                kwargs_109463 = {}
                # Getting the type of 'call_assignment_100693' (line 3817)
                call_assignment_100693_109460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3817, 16), 'call_assignment_100693', False)
                # Obtaining the member '__getitem__' of a type (line 3817)
                getitem___109461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3817, 16), call_assignment_100693_109460, '__getitem__')
                # Calling __getitem__(args, kwargs)
                getitem___call_result_109464 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109461, *[int_109462], **kwargs_109463)
                
                # Assigning a type to the variable 'call_assignment_100695' (line 3817)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3817, 16), 'call_assignment_100695', getitem___call_result_109464)
                
                # Assigning a Name to a Name (line 3817):
                
                # Assigning a Name to a Name (line 3817):
                # Getting the type of 'call_assignment_100695' (line 3817)
                call_assignment_100695_109465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3817, 16), 'call_assignment_100695')
                # Assigning a type to the variable 'tail_right' (line 3817)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3817, 27), 'tail_right', call_assignment_100695_109465)
                
                # Assigning a List to a Name (line 3820):
                
                # Assigning a List to a Name (line 3820):
                
                # Assigning a List to a Name (line 3820):
                
                # Obtaining an instance of the builtin type 'list' (line 3820)
                list_109466 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3820, 29), 'list')
                # Adding type elements to the builtin type 'list' instance (line 3820)
                # Adding element type (line 3820)
                
                # Obtaining an instance of the builtin type 'tuple' (line 3820)
                tuple_109467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3820, 31), 'tuple')
                # Adding type elements to the builtin type 'tuple' instance (line 3820)
                # Adding element type (line 3820)
                # Getting the type of 'Path' (line 3820)
                Path_109468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3820, 31), 'Path')
                # Obtaining the member 'MOVETO' of a type (line 3820)
                MOVETO_109469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3820, 31), Path_109468, 'MOVETO')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3820, 31), tuple_109467, MOVETO_109469)
                # Adding element type (line 3820)
                
                # Obtaining the type of the subscript
                int_109470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3820, 55), 'int')
                # Getting the type of 'tail_right' (line 3820)
                tail_right_109471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3820, 44), 'tail_right')
                # Obtaining the member '__getitem__' of a type (line 3820)
                getitem___109472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3820, 44), tail_right_109471, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 3820)
                subscript_call_result_109473 = invoke(stypy.reporting.localization.Localization(__file__, 3820, 44), getitem___109472, int_109470)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3820, 31), tuple_109467, subscript_call_result_109473)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3820, 29), list_109466, tuple_109467)
                # Adding element type (line 3820)
                
                # Obtaining an instance of the builtin type 'tuple' (line 3821)
                tuple_109474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3821, 31), 'tuple')
                # Adding type elements to the builtin type 'tuple' instance (line 3821)
                # Adding element type (line 3821)
                # Getting the type of 'Path' (line 3821)
                Path_109475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3821, 31), 'Path')
                # Obtaining the member 'CURVE3' of a type (line 3821)
                CURVE3_109476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3821, 31), Path_109475, 'CURVE3')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3821, 31), tuple_109474, CURVE3_109476)
                # Adding element type (line 3821)
                
                # Obtaining the type of the subscript
                int_109477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3821, 55), 'int')
                # Getting the type of 'tail_right' (line 3821)
                tail_right_109478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3821, 44), 'tail_right')
                # Obtaining the member '__getitem__' of a type (line 3821)
                getitem___109479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3821, 44), tail_right_109478, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 3821)
                subscript_call_result_109480 = invoke(stypy.reporting.localization.Localization(__file__, 3821, 44), getitem___109479, int_109477)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3821, 31), tuple_109474, subscript_call_result_109480)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3820, 29), list_109466, tuple_109474)
                # Adding element type (line 3820)
                
                # Obtaining an instance of the builtin type 'tuple' (line 3822)
                tuple_109481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3822, 31), 'tuple')
                # Adding type elements to the builtin type 'tuple' instance (line 3822)
                # Adding element type (line 3822)
                # Getting the type of 'Path' (line 3822)
                Path_109482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3822, 31), 'Path')
                # Obtaining the member 'CURVE3' of a type (line 3822)
                CURVE3_109483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3822, 31), Path_109482, 'CURVE3')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3822, 31), tuple_109481, CURVE3_109483)
                # Adding element type (line 3822)
                
                # Obtaining the type of the subscript
                int_109484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3822, 55), 'int')
                # Getting the type of 'tail_right' (line 3822)
                tail_right_109485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3822, 44), 'tail_right')
                # Obtaining the member '__getitem__' of a type (line 3822)
                getitem___109486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3822, 44), tail_right_109485, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 3822)
                subscript_call_result_109487 = invoke(stypy.reporting.localization.Localization(__file__, 3822, 44), getitem___109486, int_109484)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3822, 31), tuple_109481, subscript_call_result_109487)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3820, 29), list_109466, tuple_109481)
                # Adding element type (line 3820)
                
                # Obtaining an instance of the builtin type 'tuple' (line 3823)
                tuple_109488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3823, 31), 'tuple')
                # Adding type elements to the builtin type 'tuple' instance (line 3823)
                # Adding element type (line 3823)
                # Getting the type of 'Path' (line 3823)
                Path_109489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3823, 31), 'Path')
                # Obtaining the member 'LINETO' of a type (line 3823)
                LINETO_109490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3823, 31), Path_109489, 'LINETO')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3823, 31), tuple_109488, LINETO_109490)
                # Adding element type (line 3823)
                
                # Obtaining the type of the subscript
                int_109491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3823, 55), 'int')
                # Getting the type of 'head_right' (line 3823)
                head_right_109492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3823, 44), 'head_right')
                # Obtaining the member '__getitem__' of a type (line 3823)
                getitem___109493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3823, 44), head_right_109492, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 3823)
                subscript_call_result_109494 = invoke(stypy.reporting.localization.Localization(__file__, 3823, 44), getitem___109493, int_109491)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3823, 31), tuple_109488, subscript_call_result_109494)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3820, 29), list_109466, tuple_109488)
                # Adding element type (line 3820)
                
                # Obtaining an instance of the builtin type 'tuple' (line 3824)
                tuple_109495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3824, 31), 'tuple')
                # Adding type elements to the builtin type 'tuple' instance (line 3824)
                # Adding element type (line 3824)
                # Getting the type of 'Path' (line 3824)
                Path_109496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3824, 31), 'Path')
                # Obtaining the member 'CURVE3' of a type (line 3824)
                CURVE3_109497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3824, 31), Path_109496, 'CURVE3')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3824, 31), tuple_109495, CURVE3_109497)
                # Adding element type (line 3824)
                
                # Obtaining the type of the subscript
                int_109498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3824, 55), 'int')
                # Getting the type of 'head_right' (line 3824)
                head_right_109499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3824, 44), 'head_right')
                # Obtaining the member '__getitem__' of a type (line 3824)
                getitem___109500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3824, 44), head_right_109499, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 3824)
                subscript_call_result_109501 = invoke(stypy.reporting.localization.Localization(__file__, 3824, 44), getitem___109500, int_109498)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3824, 31), tuple_109495, subscript_call_result_109501)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3820, 29), list_109466, tuple_109495)
                # Adding element type (line 3820)
                
                # Obtaining an instance of the builtin type 'tuple' (line 3825)
                tuple_109502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3825, 31), 'tuple')
                # Adding type elements to the builtin type 'tuple' instance (line 3825)
                # Adding element type (line 3825)
                # Getting the type of 'Path' (line 3825)
                Path_109503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3825, 31), 'Path')
                # Obtaining the member 'CURVE3' of a type (line 3825)
                CURVE3_109504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3825, 31), Path_109503, 'CURVE3')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3825, 31), tuple_109502, CURVE3_109504)
                # Adding element type (line 3825)
                
                # Obtaining the type of the subscript
                int_109505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3825, 55), 'int')
                # Getting the type of 'head_right' (line 3825)
                head_right_109506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3825, 44), 'head_right')
                # Obtaining the member '__getitem__' of a type (line 3825)
                getitem___109507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3825, 44), head_right_109506, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 3825)
                subscript_call_result_109508 = invoke(stypy.reporting.localization.Localization(__file__, 3825, 44), getitem___109507, int_109505)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3825, 31), tuple_109502, subscript_call_result_109508)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3820, 29), list_109466, tuple_109502)
                # Adding element type (line 3820)
                
                # Obtaining an instance of the builtin type 'tuple' (line 3826)
                tuple_109509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3826, 31), 'tuple')
                # Adding type elements to the builtin type 'tuple' instance (line 3826)
                # Adding element type (line 3826)
                # Getting the type of 'Path' (line 3826)
                Path_109510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3826, 31), 'Path')
                # Obtaining the member 'CURVE3' of a type (line 3826)
                CURVE3_109511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3826, 31), Path_109510, 'CURVE3')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3826, 31), tuple_109509, CURVE3_109511)
                # Adding element type (line 3826)
                
                # Obtaining the type of the subscript
                int_109512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3826, 54), 'int')
                # Getting the type of 'head_left' (line 3826)
                head_left_109513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3826, 44), 'head_left')
                # Obtaining the member '__getitem__' of a type (line 3826)
                getitem___109514 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3826, 44), head_left_109513, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 3826)
                subscript_call_result_109515 = invoke(stypy.reporting.localization.Localization(__file__, 3826, 44), getitem___109514, int_109512)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3826, 31), tuple_109509, subscript_call_result_109515)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3820, 29), list_109466, tuple_109509)
                # Adding element type (line 3820)
                
                # Obtaining an instance of the builtin type 'tuple' (line 3827)
                tuple_109516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3827, 31), 'tuple')
                # Adding type elements to the builtin type 'tuple' instance (line 3827)
                # Adding element type (line 3827)
                # Getting the type of 'Path' (line 3827)
                Path_109517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3827, 31), 'Path')
                # Obtaining the member 'CURVE3' of a type (line 3827)
                CURVE3_109518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3827, 31), Path_109517, 'CURVE3')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3827, 31), tuple_109516, CURVE3_109518)
                # Adding element type (line 3827)
                
                # Obtaining the type of the subscript
                int_109519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3827, 54), 'int')
                # Getting the type of 'head_left' (line 3827)
                head_left_109520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3827, 44), 'head_left')
                # Obtaining the member '__getitem__' of a type (line 3827)
                getitem___109521 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3827, 44), head_left_109520, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 3827)
                subscript_call_result_109522 = invoke(stypy.reporting.localization.Localization(__file__, 3827, 44), getitem___109521, int_109519)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3827, 31), tuple_109516, subscript_call_result_109522)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3820, 29), list_109466, tuple_109516)
                # Adding element type (line 3820)
                
                # Obtaining an instance of the builtin type 'tuple' (line 3828)
                tuple_109523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3828, 31), 'tuple')
                # Adding type elements to the builtin type 'tuple' instance (line 3828)
                # Adding element type (line 3828)
                # Getting the type of 'Path' (line 3828)
                Path_109524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3828, 31), 'Path')
                # Obtaining the member 'LINETO' of a type (line 3828)
                LINETO_109525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3828, 31), Path_109524, 'LINETO')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3828, 31), tuple_109523, LINETO_109525)
                # Adding element type (line 3828)
                
                # Obtaining the type of the subscript
                int_109526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3828, 54), 'int')
                # Getting the type of 'tail_left' (line 3828)
                tail_left_109527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3828, 44), 'tail_left')
                # Obtaining the member '__getitem__' of a type (line 3828)
                getitem___109528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3828, 44), tail_left_109527, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 3828)
                subscript_call_result_109529 = invoke(stypy.reporting.localization.Localization(__file__, 3828, 44), getitem___109528, int_109526)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3828, 31), tuple_109523, subscript_call_result_109529)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3820, 29), list_109466, tuple_109523)
                # Adding element type (line 3820)
                
                # Obtaining an instance of the builtin type 'tuple' (line 3829)
                tuple_109530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3829, 31), 'tuple')
                # Adding type elements to the builtin type 'tuple' instance (line 3829)
                # Adding element type (line 3829)
                # Getting the type of 'Path' (line 3829)
                Path_109531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3829, 31), 'Path')
                # Obtaining the member 'CURVE3' of a type (line 3829)
                CURVE3_109532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3829, 31), Path_109531, 'CURVE3')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3829, 31), tuple_109530, CURVE3_109532)
                # Adding element type (line 3829)
                
                # Obtaining the type of the subscript
                int_109533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3829, 54), 'int')
                # Getting the type of 'tail_left' (line 3829)
                tail_left_109534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3829, 44), 'tail_left')
                # Obtaining the member '__getitem__' of a type (line 3829)
                getitem___109535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3829, 44), tail_left_109534, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 3829)
                subscript_call_result_109536 = invoke(stypy.reporting.localization.Localization(__file__, 3829, 44), getitem___109535, int_109533)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3829, 31), tuple_109530, subscript_call_result_109536)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3820, 29), list_109466, tuple_109530)
                # Adding element type (line 3820)
                
                # Obtaining an instance of the builtin type 'tuple' (line 3830)
                tuple_109537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3830, 31), 'tuple')
                # Adding type elements to the builtin type 'tuple' instance (line 3830)
                # Adding element type (line 3830)
                # Getting the type of 'Path' (line 3830)
                Path_109538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3830, 31), 'Path')
                # Obtaining the member 'CURVE3' of a type (line 3830)
                CURVE3_109539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3830, 31), Path_109538, 'CURVE3')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3830, 31), tuple_109537, CURVE3_109539)
                # Adding element type (line 3830)
                
                # Obtaining the type of the subscript
                int_109540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3830, 54), 'int')
                # Getting the type of 'tail_left' (line 3830)
                tail_left_109541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3830, 44), 'tail_left')
                # Obtaining the member '__getitem__' of a type (line 3830)
                getitem___109542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3830, 44), tail_left_109541, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 3830)
                subscript_call_result_109543 = invoke(stypy.reporting.localization.Localization(__file__, 3830, 44), getitem___109542, int_109540)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3830, 31), tuple_109537, subscript_call_result_109543)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3820, 29), list_109466, tuple_109537)
                # Adding element type (line 3820)
                
                # Obtaining an instance of the builtin type 'tuple' (line 3831)
                tuple_109544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3831, 31), 'tuple')
                # Adding type elements to the builtin type 'tuple' instance (line 3831)
                # Adding element type (line 3831)
                # Getting the type of 'Path' (line 3831)
                Path_109545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3831, 31), 'Path')
                # Obtaining the member 'LINETO' of a type (line 3831)
                LINETO_109546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3831, 31), Path_109545, 'LINETO')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3831, 31), tuple_109544, LINETO_109546)
                # Adding element type (line 3831)
                
                # Obtaining the type of the subscript
                int_109547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3831, 55), 'int')
                # Getting the type of 'tail_right' (line 3831)
                tail_right_109548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3831, 44), 'tail_right')
                # Obtaining the member '__getitem__' of a type (line 3831)
                getitem___109549 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3831, 44), tail_right_109548, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 3831)
                subscript_call_result_109550 = invoke(stypy.reporting.localization.Localization(__file__, 3831, 44), getitem___109549, int_109547)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3831, 31), tuple_109544, subscript_call_result_109550)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3820, 29), list_109466, tuple_109544)
                # Adding element type (line 3820)
                
                # Obtaining an instance of the builtin type 'tuple' (line 3832)
                tuple_109551 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3832, 31), 'tuple')
                # Adding type elements to the builtin type 'tuple' instance (line 3832)
                # Adding element type (line 3832)
                # Getting the type of 'Path' (line 3832)
                Path_109552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3832, 31), 'Path')
                # Obtaining the member 'CLOSEPOLY' of a type (line 3832)
                CLOSEPOLY_109553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3832, 31), Path_109552, 'CLOSEPOLY')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3832, 31), tuple_109551, CLOSEPOLY_109553)
                # Adding element type (line 3832)
                
                # Obtaining the type of the subscript
                int_109554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3832, 58), 'int')
                # Getting the type of 'tail_right' (line 3832)
                tail_right_109555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3832, 47), 'tail_right')
                # Obtaining the member '__getitem__' of a type (line 3832)
                getitem___109556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3832, 47), tail_right_109555, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 3832)
                subscript_call_result_109557 = invoke(stypy.reporting.localization.Localization(__file__, 3832, 47), getitem___109556, int_109554)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3832, 31), tuple_109551, subscript_call_result_109557)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3820, 29), list_109466, tuple_109551)
                
                # Assigning a type to the variable 'patch_path' (line 3820)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3820, 16), 'patch_path', list_109466)

                if more_types_in_union_109442:
                    # Runtime conditional SSA for else branch (line 3815)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_109441) or more_types_in_union_109442):
                
                # Assigning a List to a Name (line 3835):
                
                # Assigning a List to a Name (line 3835):
                
                # Assigning a List to a Name (line 3835):
                
                # Obtaining an instance of the builtin type 'list' (line 3835)
                list_109558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3835, 29), 'list')
                # Adding type elements to the builtin type 'list' instance (line 3835)
                # Adding element type (line 3835)
                
                # Obtaining an instance of the builtin type 'tuple' (line 3835)
                tuple_109559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3835, 31), 'tuple')
                # Adding type elements to the builtin type 'tuple' instance (line 3835)
                # Adding element type (line 3835)
                # Getting the type of 'Path' (line 3835)
                Path_109560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3835, 31), 'Path')
                # Obtaining the member 'MOVETO' of a type (line 3835)
                MOVETO_109561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3835, 31), Path_109560, 'MOVETO')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3835, 31), tuple_109559, MOVETO_109561)
                # Adding element type (line 3835)
                
                # Obtaining the type of the subscript
                int_109562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3835, 55), 'int')
                # Getting the type of 'head_right' (line 3835)
                head_right_109563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3835, 44), 'head_right')
                # Obtaining the member '__getitem__' of a type (line 3835)
                getitem___109564 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3835, 44), head_right_109563, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 3835)
                subscript_call_result_109565 = invoke(stypy.reporting.localization.Localization(__file__, 3835, 44), getitem___109564, int_109562)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3835, 31), tuple_109559, subscript_call_result_109565)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3835, 29), list_109558, tuple_109559)
                # Adding element type (line 3835)
                
                # Obtaining an instance of the builtin type 'tuple' (line 3836)
                tuple_109566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3836, 31), 'tuple')
                # Adding type elements to the builtin type 'tuple' instance (line 3836)
                # Adding element type (line 3836)
                # Getting the type of 'Path' (line 3836)
                Path_109567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3836, 31), 'Path')
                # Obtaining the member 'CURVE3' of a type (line 3836)
                CURVE3_109568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3836, 31), Path_109567, 'CURVE3')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3836, 31), tuple_109566, CURVE3_109568)
                # Adding element type (line 3836)
                
                # Obtaining the type of the subscript
                int_109569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3836, 55), 'int')
                # Getting the type of 'head_right' (line 3836)
                head_right_109570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3836, 44), 'head_right')
                # Obtaining the member '__getitem__' of a type (line 3836)
                getitem___109571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3836, 44), head_right_109570, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 3836)
                subscript_call_result_109572 = invoke(stypy.reporting.localization.Localization(__file__, 3836, 44), getitem___109571, int_109569)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3836, 31), tuple_109566, subscript_call_result_109572)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3835, 29), list_109558, tuple_109566)
                # Adding element type (line 3835)
                
                # Obtaining an instance of the builtin type 'tuple' (line 3837)
                tuple_109573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3837, 31), 'tuple')
                # Adding type elements to the builtin type 'tuple' instance (line 3837)
                # Adding element type (line 3837)
                # Getting the type of 'Path' (line 3837)
                Path_109574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3837, 31), 'Path')
                # Obtaining the member 'CURVE3' of a type (line 3837)
                CURVE3_109575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3837, 31), Path_109574, 'CURVE3')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3837, 31), tuple_109573, CURVE3_109575)
                # Adding element type (line 3837)
                
                # Obtaining the type of the subscript
                int_109576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3837, 55), 'int')
                # Getting the type of 'head_right' (line 3837)
                head_right_109577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3837, 44), 'head_right')
                # Obtaining the member '__getitem__' of a type (line 3837)
                getitem___109578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3837, 44), head_right_109577, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 3837)
                subscript_call_result_109579 = invoke(stypy.reporting.localization.Localization(__file__, 3837, 44), getitem___109578, int_109576)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3837, 31), tuple_109573, subscript_call_result_109579)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3835, 29), list_109558, tuple_109573)
                # Adding element type (line 3835)
                
                # Obtaining an instance of the builtin type 'tuple' (line 3838)
                tuple_109580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3838, 31), 'tuple')
                # Adding type elements to the builtin type 'tuple' instance (line 3838)
                # Adding element type (line 3838)
                # Getting the type of 'Path' (line 3838)
                Path_109581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3838, 31), 'Path')
                # Obtaining the member 'CURVE3' of a type (line 3838)
                CURVE3_109582 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3838, 31), Path_109581, 'CURVE3')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3838, 31), tuple_109580, CURVE3_109582)
                # Adding element type (line 3838)
                
                # Obtaining the type of the subscript
                int_109583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3838, 54), 'int')
                # Getting the type of 'head_left' (line 3838)
                head_left_109584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3838, 44), 'head_left')
                # Obtaining the member '__getitem__' of a type (line 3838)
                getitem___109585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3838, 44), head_left_109584, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 3838)
                subscript_call_result_109586 = invoke(stypy.reporting.localization.Localization(__file__, 3838, 44), getitem___109585, int_109583)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3838, 31), tuple_109580, subscript_call_result_109586)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3835, 29), list_109558, tuple_109580)
                # Adding element type (line 3835)
                
                # Obtaining an instance of the builtin type 'tuple' (line 3839)
                tuple_109587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3839, 31), 'tuple')
                # Adding type elements to the builtin type 'tuple' instance (line 3839)
                # Adding element type (line 3839)
                # Getting the type of 'Path' (line 3839)
                Path_109588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3839, 31), 'Path')
                # Obtaining the member 'CURVE3' of a type (line 3839)
                CURVE3_109589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3839, 31), Path_109588, 'CURVE3')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3839, 31), tuple_109587, CURVE3_109589)
                # Adding element type (line 3839)
                
                # Obtaining the type of the subscript
                int_109590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3839, 54), 'int')
                # Getting the type of 'head_left' (line 3839)
                head_left_109591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3839, 44), 'head_left')
                # Obtaining the member '__getitem__' of a type (line 3839)
                getitem___109592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3839, 44), head_left_109591, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 3839)
                subscript_call_result_109593 = invoke(stypy.reporting.localization.Localization(__file__, 3839, 44), getitem___109592, int_109590)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3839, 31), tuple_109587, subscript_call_result_109593)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3835, 29), list_109558, tuple_109587)
                # Adding element type (line 3835)
                
                # Obtaining an instance of the builtin type 'tuple' (line 3840)
                tuple_109594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3840, 31), 'tuple')
                # Adding type elements to the builtin type 'tuple' instance (line 3840)
                # Adding element type (line 3840)
                # Getting the type of 'Path' (line 3840)
                Path_109595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3840, 31), 'Path')
                # Obtaining the member 'CLOSEPOLY' of a type (line 3840)
                CLOSEPOLY_109596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3840, 31), Path_109595, 'CLOSEPOLY')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3840, 31), tuple_109594, CLOSEPOLY_109596)
                # Adding element type (line 3840)
                
                # Obtaining the type of the subscript
                int_109597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3840, 57), 'int')
                # Getting the type of 'head_left' (line 3840)
                head_left_109598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3840, 47), 'head_left')
                # Obtaining the member '__getitem__' of a type (line 3840)
                getitem___109599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3840, 47), head_left_109598, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 3840)
                subscript_call_result_109600 = invoke(stypy.reporting.localization.Localization(__file__, 3840, 47), getitem___109599, int_109597)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3840, 31), tuple_109594, subscript_call_result_109600)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3835, 29), list_109558, tuple_109594)
                
                # Assigning a type to the variable 'patch_path' (line 3835)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3835, 16), 'patch_path', list_109558)

                if (may_be_109441 and more_types_in_union_109442):
                    # SSA join for if statement (line 3815)
                    module_type_store = module_type_store.join_ssa_context()


            
            
            # Assigning a Call to a Name (line 3843):
            
            # Assigning a Call to a Name (line 3843):
            
            # Assigning a Call to a Name (line 3843):
            
            # Call to Path(...): (line 3843)
            # Processing the call arguments (line 3843)
            # Calculating list comprehension
            # Calculating comprehension expression
            # Getting the type of 'patch_path' (line 3843)
            patch_path_109603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3843, 39), 'patch_path', False)
            comprehension_109604 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3843, 25), patch_path_109603)
            # Assigning a type to the variable 'c' (line 3843)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3843, 25), 'c', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3843, 25), comprehension_109604))
            # Assigning a type to the variable 'p' (line 3843)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3843, 25), 'p', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3843, 25), comprehension_109604))
            # Getting the type of 'p' (line 3843)
            p_109602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3843, 25), 'p', False)
            list_109605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3843, 25), 'list')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3843, 25), list_109605, p_109602)
            # Calculating list comprehension
            # Calculating comprehension expression
            # Getting the type of 'patch_path' (line 3843)
            patch_path_109607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3843, 67), 'patch_path', False)
            comprehension_109608 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3843, 53), patch_path_109607)
            # Assigning a type to the variable 'c' (line 3843)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3843, 53), 'c', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3843, 53), comprehension_109608))
            # Assigning a type to the variable 'p' (line 3843)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3843, 53), 'p', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3843, 53), comprehension_109608))
            # Getting the type of 'c' (line 3843)
            c_109606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3843, 53), 'c', False)
            list_109609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3843, 53), 'list')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3843, 53), list_109609, c_109606)
            # Processing the call keyword arguments (line 3843)
            kwargs_109610 = {}
            # Getting the type of 'Path' (line 3843)
            Path_109601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3843, 19), 'Path', False)
            # Calling Path(args, kwargs) (line 3843)
            Path_call_result_109611 = invoke(stypy.reporting.localization.Localization(__file__, 3843, 19), Path_109601, *[list_109605, list_109609], **kwargs_109610)
            
            # Assigning a type to the variable 'path' (line 3843)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3843, 12), 'path', Path_call_result_109611)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3845)
            tuple_109612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3845, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3845)
            # Adding element type (line 3845)
            # Getting the type of 'path' (line 3845)
            path_109613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3845, 19), 'path')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3845, 19), tuple_109612, path_109613)
            # Adding element type (line 3845)
            # Getting the type of 'True' (line 3845)
            True_109614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3845, 25), 'True')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3845, 19), tuple_109612, True_109614)
            
            # Assigning a type to the variable 'stypy_return_type' (line 3845)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3845, 12), 'stypy_return_type', tuple_109612)
            
            # ################# End of 'transmute(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'transmute' in the type store
            # Getting the type of 'stypy_return_type' (line 3785)
            stypy_return_type_109615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3785, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_109615)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'transmute'
            return stypy_return_type_109615

    
    # Assigning a type to the variable 'Simple' (line 3762)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3762, 4), 'Simple', Simple)
    
    # Assigning a Name to a Subscript (line 3847):
    
    # Assigning a Name to a Subscript (line 3847):
    # Declaration of the 'Fancy' class
    # Getting the type of '_Base' (line 3849)
    _Base_109616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3849, 16), '_Base')

    class Fancy(_Base_109616, ):
        unicode_109617 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3852, (-1)), 'unicode', u'\n        A fancy arrow. Only works with a quadratic bezier curve.\n        ')

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            float_109618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3854, 39), 'float')
            float_109619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3854, 54), 'float')
            float_109620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3854, 69), 'float')
            defaults = [float_109618, float_109619, float_109620]
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 3854, 8, False)
            # Assigning a type to the variable 'self' (line 3855)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3855, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Fancy.__init__', ['head_length', 'head_width', 'tail_width'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, ['head_length', 'head_width', 'tail_width'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            unicode_109621 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3866, (-1)), 'unicode', u'\n            Parameters\n            ----------\n            head_length : float, optional, default : 0.4\n                Length of the arrow head\n\n            head_width : float, optional, default : 0.4\n                Width of the arrow head\n\n            tail_width : float, optional, default : 0.4\n                Width of the arrow tail\n            ')
            
            # Assigning a Tuple to a Tuple (line 3868):
            
            # Assigning a Name to a Name (line 3868):
            
            # Assigning a Name to a Name (line 3868):
            # Getting the type of 'head_length' (line 3869)
            head_length_109622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3869, 16), 'head_length')
            # Assigning a type to the variable 'tuple_assignment_100696' (line 3868)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3868, 12), 'tuple_assignment_100696', head_length_109622)
            
            # Assigning a Name to a Name (line 3868):
            
            # Assigning a Name to a Name (line 3868):
            # Getting the type of 'head_width' (line 3869)
            head_width_109623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3869, 29), 'head_width')
            # Assigning a type to the variable 'tuple_assignment_100697' (line 3868)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3868, 12), 'tuple_assignment_100697', head_width_109623)
            
            # Assigning a Name to a Name (line 3868):
            
            # Assigning a Name to a Name (line 3868):
            # Getting the type of 'tail_width' (line 3869)
            tail_width_109624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3869, 41), 'tail_width')
            # Assigning a type to the variable 'tuple_assignment_100698' (line 3868)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3868, 12), 'tuple_assignment_100698', tail_width_109624)
            
            # Assigning a Name to a Attribute (line 3868):
            
            # Assigning a Name to a Attribute (line 3868):
            # Getting the type of 'tuple_assignment_100696' (line 3868)
            tuple_assignment_100696_109625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3868, 12), 'tuple_assignment_100696')
            # Getting the type of 'self' (line 3868)
            self_109626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3868, 12), 'self')
            # Setting the type of the member 'head_length' of a type (line 3868)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3868, 12), self_109626, 'head_length', tuple_assignment_100696_109625)
            
            # Assigning a Name to a Attribute (line 3868):
            
            # Assigning a Name to a Attribute (line 3868):
            # Getting the type of 'tuple_assignment_100697' (line 3868)
            tuple_assignment_100697_109627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3868, 12), 'tuple_assignment_100697')
            # Getting the type of 'self' (line 3868)
            self_109628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3868, 30), 'self')
            # Setting the type of the member 'head_width' of a type (line 3868)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3868, 30), self_109628, 'head_width', tuple_assignment_100697_109627)
            
            # Assigning a Name to a Attribute (line 3868):
            
            # Assigning a Name to a Attribute (line 3868):
            # Getting the type of 'tuple_assignment_100698' (line 3868)
            tuple_assignment_100698_109629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3868, 12), 'tuple_assignment_100698')
            # Getting the type of 'self' (line 3868)
            self_109630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3868, 47), 'self')
            # Setting the type of the member 'tail_width' of a type (line 3868)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3868, 47), self_109630, 'tail_width', tuple_assignment_100698_109629)
            
            # Call to __init__(...): (line 3870)
            # Processing the call keyword arguments (line 3870)
            kwargs_109638 = {}
            
            # Call to super(...): (line 3870)
            # Processing the call arguments (line 3870)
            # Getting the type of 'ArrowStyle' (line 3870)
            ArrowStyle_109632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3870, 18), 'ArrowStyle', False)
            # Obtaining the member 'Fancy' of a type (line 3870)
            Fancy_109633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3870, 18), ArrowStyle_109632, 'Fancy')
            # Getting the type of 'self' (line 3870)
            self_109634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3870, 36), 'self', False)
            # Processing the call keyword arguments (line 3870)
            kwargs_109635 = {}
            # Getting the type of 'super' (line 3870)
            super_109631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3870, 12), 'super', False)
            # Calling super(args, kwargs) (line 3870)
            super_call_result_109636 = invoke(stypy.reporting.localization.Localization(__file__, 3870, 12), super_109631, *[Fancy_109633, self_109634], **kwargs_109635)
            
            # Obtaining the member '__init__' of a type (line 3870)
            init___109637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3870, 12), super_call_result_109636, '__init__')
            # Calling __init__(args, kwargs) (line 3870)
            init___call_result_109639 = invoke(stypy.reporting.localization.Localization(__file__, 3870, 12), init___109637, *[], **kwargs_109638)
            
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()


        @norecursion
        def transmute(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'transmute'
            module_type_store = module_type_store.open_function_context('transmute', 3872, 8, False)
            # Assigning a type to the variable 'self' (line 3873)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3873, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            Fancy.transmute.__dict__.__setitem__('stypy_localization', localization)
            Fancy.transmute.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            Fancy.transmute.__dict__.__setitem__('stypy_type_store', module_type_store)
            Fancy.transmute.__dict__.__setitem__('stypy_function_name', 'Fancy.transmute')
            Fancy.transmute.__dict__.__setitem__('stypy_param_names_list', ['path', 'mutation_size', 'linewidth'])
            Fancy.transmute.__dict__.__setitem__('stypy_varargs_param_name', None)
            Fancy.transmute.__dict__.__setitem__('stypy_kwargs_param_name', None)
            Fancy.transmute.__dict__.__setitem__('stypy_call_defaults', defaults)
            Fancy.transmute.__dict__.__setitem__('stypy_call_varargs', varargs)
            Fancy.transmute.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            Fancy.transmute.__dict__.__setitem__('stypy_declared_arg_number', 4)
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Fancy.transmute', ['path', 'mutation_size', 'linewidth'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'transmute', localization, ['path', 'mutation_size', 'linewidth'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'transmute(...)' code ##################

            
            # Assigning a Call to a Tuple (line 3874):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to ensure_quadratic_bezier(...): (line 3874)
            # Processing the call arguments (line 3874)
            # Getting the type of 'path' (line 3874)
            path_109642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3874, 66), 'path', False)
            # Processing the call keyword arguments (line 3874)
            kwargs_109643 = {}
            # Getting the type of 'self' (line 3874)
            self_109640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3874, 37), 'self', False)
            # Obtaining the member 'ensure_quadratic_bezier' of a type (line 3874)
            ensure_quadratic_bezier_109641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3874, 37), self_109640, 'ensure_quadratic_bezier')
            # Calling ensure_quadratic_bezier(args, kwargs) (line 3874)
            ensure_quadratic_bezier_call_result_109644 = invoke(stypy.reporting.localization.Localization(__file__, 3874, 37), ensure_quadratic_bezier_109641, *[path_109642], **kwargs_109643)
            
            # Assigning a type to the variable 'call_assignment_100699' (line 3874)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3874, 12), 'call_assignment_100699', ensure_quadratic_bezier_call_result_109644)
            
            # Assigning a Call to a Name (line 3874):
            
            # Assigning a Call to a Name (line 3874):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3874, 12), 'int')
            # Processing the call keyword arguments
            kwargs_109648 = {}
            # Getting the type of 'call_assignment_100699' (line 3874)
            call_assignment_100699_109645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3874, 12), 'call_assignment_100699', False)
            # Obtaining the member '__getitem__' of a type (line 3874)
            getitem___109646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3874, 12), call_assignment_100699_109645, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109649 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109646, *[int_109647], **kwargs_109648)
            
            # Assigning a type to the variable 'call_assignment_100700' (line 3874)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3874, 12), 'call_assignment_100700', getitem___call_result_109649)
            
            # Assigning a Name to a Name (line 3874):
            
            # Assigning a Name to a Name (line 3874):
            # Getting the type of 'call_assignment_100700' (line 3874)
            call_assignment_100700_109650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3874, 12), 'call_assignment_100700')
            # Assigning a type to the variable 'x0' (line 3874)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3874, 12), 'x0', call_assignment_100700_109650)
            
            # Assigning a Call to a Name (line 3874):
            
            # Assigning a Call to a Name (line 3874):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109653 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3874, 12), 'int')
            # Processing the call keyword arguments
            kwargs_109654 = {}
            # Getting the type of 'call_assignment_100699' (line 3874)
            call_assignment_100699_109651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3874, 12), 'call_assignment_100699', False)
            # Obtaining the member '__getitem__' of a type (line 3874)
            getitem___109652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3874, 12), call_assignment_100699_109651, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109655 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109652, *[int_109653], **kwargs_109654)
            
            # Assigning a type to the variable 'call_assignment_100701' (line 3874)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3874, 12), 'call_assignment_100701', getitem___call_result_109655)
            
            # Assigning a Name to a Name (line 3874):
            
            # Assigning a Name to a Name (line 3874):
            # Getting the type of 'call_assignment_100701' (line 3874)
            call_assignment_100701_109656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3874, 12), 'call_assignment_100701')
            # Assigning a type to the variable 'y0' (line 3874)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3874, 16), 'y0', call_assignment_100701_109656)
            
            # Assigning a Call to a Name (line 3874):
            
            # Assigning a Call to a Name (line 3874):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3874, 12), 'int')
            # Processing the call keyword arguments
            kwargs_109660 = {}
            # Getting the type of 'call_assignment_100699' (line 3874)
            call_assignment_100699_109657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3874, 12), 'call_assignment_100699', False)
            # Obtaining the member '__getitem__' of a type (line 3874)
            getitem___109658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3874, 12), call_assignment_100699_109657, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109661 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109658, *[int_109659], **kwargs_109660)
            
            # Assigning a type to the variable 'call_assignment_100702' (line 3874)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3874, 12), 'call_assignment_100702', getitem___call_result_109661)
            
            # Assigning a Name to a Name (line 3874):
            
            # Assigning a Name to a Name (line 3874):
            # Getting the type of 'call_assignment_100702' (line 3874)
            call_assignment_100702_109662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3874, 12), 'call_assignment_100702')
            # Assigning a type to the variable 'x1' (line 3874)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3874, 20), 'x1', call_assignment_100702_109662)
            
            # Assigning a Call to a Name (line 3874):
            
            # Assigning a Call to a Name (line 3874):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3874, 12), 'int')
            # Processing the call keyword arguments
            kwargs_109666 = {}
            # Getting the type of 'call_assignment_100699' (line 3874)
            call_assignment_100699_109663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3874, 12), 'call_assignment_100699', False)
            # Obtaining the member '__getitem__' of a type (line 3874)
            getitem___109664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3874, 12), call_assignment_100699_109663, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109667 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109664, *[int_109665], **kwargs_109666)
            
            # Assigning a type to the variable 'call_assignment_100703' (line 3874)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3874, 12), 'call_assignment_100703', getitem___call_result_109667)
            
            # Assigning a Name to a Name (line 3874):
            
            # Assigning a Name to a Name (line 3874):
            # Getting the type of 'call_assignment_100703' (line 3874)
            call_assignment_100703_109668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3874, 12), 'call_assignment_100703')
            # Assigning a type to the variable 'y1' (line 3874)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3874, 24), 'y1', call_assignment_100703_109668)
            
            # Assigning a Call to a Name (line 3874):
            
            # Assigning a Call to a Name (line 3874):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3874, 12), 'int')
            # Processing the call keyword arguments
            kwargs_109672 = {}
            # Getting the type of 'call_assignment_100699' (line 3874)
            call_assignment_100699_109669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3874, 12), 'call_assignment_100699', False)
            # Obtaining the member '__getitem__' of a type (line 3874)
            getitem___109670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3874, 12), call_assignment_100699_109669, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109673 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109670, *[int_109671], **kwargs_109672)
            
            # Assigning a type to the variable 'call_assignment_100704' (line 3874)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3874, 12), 'call_assignment_100704', getitem___call_result_109673)
            
            # Assigning a Name to a Name (line 3874):
            
            # Assigning a Name to a Name (line 3874):
            # Getting the type of 'call_assignment_100704' (line 3874)
            call_assignment_100704_109674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3874, 12), 'call_assignment_100704')
            # Assigning a type to the variable 'x2' (line 3874)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3874, 28), 'x2', call_assignment_100704_109674)
            
            # Assigning a Call to a Name (line 3874):
            
            # Assigning a Call to a Name (line 3874):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3874, 12), 'int')
            # Processing the call keyword arguments
            kwargs_109678 = {}
            # Getting the type of 'call_assignment_100699' (line 3874)
            call_assignment_100699_109675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3874, 12), 'call_assignment_100699', False)
            # Obtaining the member '__getitem__' of a type (line 3874)
            getitem___109676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3874, 12), call_assignment_100699_109675, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109679 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109676, *[int_109677], **kwargs_109678)
            
            # Assigning a type to the variable 'call_assignment_100705' (line 3874)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3874, 12), 'call_assignment_100705', getitem___call_result_109679)
            
            # Assigning a Name to a Name (line 3874):
            
            # Assigning a Name to a Name (line 3874):
            # Getting the type of 'call_assignment_100705' (line 3874)
            call_assignment_100705_109680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3874, 12), 'call_assignment_100705')
            # Assigning a type to the variable 'y2' (line 3874)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3874, 32), 'y2', call_assignment_100705_109680)
            
            # Assigning a BinOp to a Name (line 3877):
            
            # Assigning a BinOp to a Name (line 3877):
            
            # Assigning a BinOp to a Name (line 3877):
            # Getting the type of 'self' (line 3877)
            self_109681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3877, 26), 'self')
            # Obtaining the member 'head_length' of a type (line 3877)
            head_length_109682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3877, 26), self_109681, 'head_length')
            # Getting the type of 'mutation_size' (line 3877)
            mutation_size_109683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3877, 45), 'mutation_size')
            # Applying the binary operator '*' (line 3877)
            result_mul_109684 = python_operator(stypy.reporting.localization.Localization(__file__, 3877, 26), '*', head_length_109682, mutation_size_109683)
            
            # Assigning a type to the variable 'head_length' (line 3877)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3877, 12), 'head_length', result_mul_109684)
            
            # Assigning a List to a Name (line 3878):
            
            # Assigning a List to a Name (line 3878):
            
            # Assigning a List to a Name (line 3878):
            
            # Obtaining an instance of the builtin type 'list' (line 3878)
            list_109685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3878, 25), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3878)
            # Adding element type (line 3878)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3878)
            tuple_109686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3878, 27), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3878)
            # Adding element type (line 3878)
            # Getting the type of 'x0' (line 3878)
            x0_109687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3878, 27), 'x0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3878, 27), tuple_109686, x0_109687)
            # Adding element type (line 3878)
            # Getting the type of 'y0' (line 3878)
            y0_109688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3878, 31), 'y0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3878, 27), tuple_109686, y0_109688)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3878, 25), list_109685, tuple_109686)
            # Adding element type (line 3878)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3878)
            tuple_109689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3878, 37), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3878)
            # Adding element type (line 3878)
            # Getting the type of 'x1' (line 3878)
            x1_109690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3878, 37), 'x1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3878, 37), tuple_109689, x1_109690)
            # Adding element type (line 3878)
            # Getting the type of 'y1' (line 3878)
            y1_109691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3878, 41), 'y1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3878, 37), tuple_109689, y1_109691)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3878, 25), list_109685, tuple_109689)
            # Adding element type (line 3878)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3878)
            tuple_109692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3878, 47), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3878)
            # Adding element type (line 3878)
            # Getting the type of 'x2' (line 3878)
            x2_109693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3878, 47), 'x2')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3878, 47), tuple_109692, x2_109693)
            # Adding element type (line 3878)
            # Getting the type of 'y2' (line 3878)
            y2_109694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3878, 51), 'y2')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3878, 47), tuple_109692, y2_109694)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3878, 25), list_109685, tuple_109692)
            
            # Assigning a type to the variable 'arrow_path' (line 3878)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3878, 12), 'arrow_path', list_109685)
            stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3880, 12))
            
            # 'from matplotlib.bezier import NonIntersectingPathException' statement (line 3880)
            update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
            import_109695 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3880, 12), 'matplotlib.bezier')

            if (type(import_109695) is not StypyTypeError):

                if (import_109695 != 'pyd_module'):
                    __import__(import_109695)
                    sys_modules_109696 = sys.modules[import_109695]
                    import_from_module(stypy.reporting.localization.Localization(__file__, 3880, 12), 'matplotlib.bezier', sys_modules_109696.module_type_store, module_type_store, ['NonIntersectingPathException'])
                    nest_module(stypy.reporting.localization.Localization(__file__, 3880, 12), __file__, sys_modules_109696, sys_modules_109696.module_type_store, module_type_store)
                else:
                    from matplotlib.bezier import NonIntersectingPathException

                    import_from_module(stypy.reporting.localization.Localization(__file__, 3880, 12), 'matplotlib.bezier', None, module_type_store, ['NonIntersectingPathException'], [NonIntersectingPathException])

            else:
                # Assigning a type to the variable 'matplotlib.bezier' (line 3880)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3880, 12), 'matplotlib.bezier', import_109695)

            remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
            
            
            # Assigning a Call to a Name (line 3883):
            
            # Assigning a Call to a Name (line 3883):
            
            # Assigning a Call to a Name (line 3883):
            
            # Call to inside_circle(...): (line 3883)
            # Processing the call arguments (line 3883)
            # Getting the type of 'x2' (line 3883)
            x2_109698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3883, 33), 'x2', False)
            # Getting the type of 'y2' (line 3883)
            y2_109699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3883, 37), 'y2', False)
            # Getting the type of 'head_length' (line 3883)
            head_length_109700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3883, 41), 'head_length', False)
            # Processing the call keyword arguments (line 3883)
            kwargs_109701 = {}
            # Getting the type of 'inside_circle' (line 3883)
            inside_circle_109697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3883, 19), 'inside_circle', False)
            # Calling inside_circle(args, kwargs) (line 3883)
            inside_circle_call_result_109702 = invoke(stypy.reporting.localization.Localization(__file__, 3883, 19), inside_circle_109697, *[x2_109698, y2_109699, head_length_109700], **kwargs_109701)
            
            # Assigning a type to the variable 'in_f' (line 3883)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3883, 12), 'in_f', inside_circle_call_result_109702)
            
            
            # SSA begins for try-except statement (line 3884)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            # Assigning a Call to a Tuple (line 3885):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to split_bezier_intersecting_with_closedpath(...): (line 3886)
            # Processing the call arguments (line 3886)
            # Getting the type of 'arrow_path' (line 3887)
            arrow_path_109704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3887, 32), 'arrow_path', False)
            # Getting the type of 'in_f' (line 3888)
            in_f_109705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3888, 32), 'in_f', False)
            # Processing the call keyword arguments (line 3886)
            float_109706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3889, 42), 'float')
            keyword_109707 = float_109706
            kwargs_109708 = {'tolerence': keyword_109707}
            # Getting the type of 'split_bezier_intersecting_with_closedpath' (line 3886)
            split_bezier_intersecting_with_closedpath_109703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3886, 26), 'split_bezier_intersecting_with_closedpath', False)
            # Calling split_bezier_intersecting_with_closedpath(args, kwargs) (line 3886)
            split_bezier_intersecting_with_closedpath_call_result_109709 = invoke(stypy.reporting.localization.Localization(__file__, 3886, 26), split_bezier_intersecting_with_closedpath_109703, *[arrow_path_109704, in_f_109705], **kwargs_109708)
            
            # Assigning a type to the variable 'call_assignment_100706' (line 3885)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3885, 16), 'call_assignment_100706', split_bezier_intersecting_with_closedpath_call_result_109709)
            
            # Assigning a Call to a Name (line 3885):
            
            # Assigning a Call to a Name (line 3885):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109712 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3885, 16), 'int')
            # Processing the call keyword arguments
            kwargs_109713 = {}
            # Getting the type of 'call_assignment_100706' (line 3885)
            call_assignment_100706_109710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3885, 16), 'call_assignment_100706', False)
            # Obtaining the member '__getitem__' of a type (line 3885)
            getitem___109711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3885, 16), call_assignment_100706_109710, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109714 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109711, *[int_109712], **kwargs_109713)
            
            # Assigning a type to the variable 'call_assignment_100707' (line 3885)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3885, 16), 'call_assignment_100707', getitem___call_result_109714)
            
            # Assigning a Name to a Name (line 3885):
            
            # Assigning a Name to a Name (line 3885):
            # Getting the type of 'call_assignment_100707' (line 3885)
            call_assignment_100707_109715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3885, 16), 'call_assignment_100707')
            # Assigning a type to the variable 'path_out' (line 3885)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3885, 16), 'path_out', call_assignment_100707_109715)
            
            # Assigning a Call to a Name (line 3885):
            
            # Assigning a Call to a Name (line 3885):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3885, 16), 'int')
            # Processing the call keyword arguments
            kwargs_109719 = {}
            # Getting the type of 'call_assignment_100706' (line 3885)
            call_assignment_100706_109716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3885, 16), 'call_assignment_100706', False)
            # Obtaining the member '__getitem__' of a type (line 3885)
            getitem___109717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3885, 16), call_assignment_100706_109716, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109720 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109717, *[int_109718], **kwargs_109719)
            
            # Assigning a type to the variable 'call_assignment_100708' (line 3885)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3885, 16), 'call_assignment_100708', getitem___call_result_109720)
            
            # Assigning a Name to a Name (line 3885):
            
            # Assigning a Name to a Name (line 3885):
            # Getting the type of 'call_assignment_100708' (line 3885)
            call_assignment_100708_109721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3885, 16), 'call_assignment_100708')
            # Assigning a type to the variable 'path_in' (line 3885)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3885, 26), 'path_in', call_assignment_100708_109721)
            # SSA branch for the except part of a try statement (line 3884)
            # SSA branch for the except 'NonIntersectingPathException' branch of a try statement (line 3884)
            module_type_store.open_ssa_branch('except')
            
            # Assigning a Call to a Tuple (line 3893):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to _point_along_a_line(...): (line 3893)
            # Processing the call arguments (line 3893)
            # Getting the type of 'x2' (line 3893)
            x2_109723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3893, 45), 'x2', False)
            # Getting the type of 'y2' (line 3893)
            y2_109724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3893, 49), 'y2', False)
            # Getting the type of 'x1' (line 3893)
            x1_109725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3893, 53), 'x1', False)
            # Getting the type of 'y1' (line 3893)
            y1_109726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3893, 57), 'y1', False)
            # Getting the type of 'head_length' (line 3893)
            head_length_109727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3893, 61), 'head_length', False)
            # Processing the call keyword arguments (line 3893)
            kwargs_109728 = {}
            # Getting the type of '_point_along_a_line' (line 3893)
            _point_along_a_line_109722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3893, 25), '_point_along_a_line', False)
            # Calling _point_along_a_line(args, kwargs) (line 3893)
            _point_along_a_line_call_result_109729 = invoke(stypy.reporting.localization.Localization(__file__, 3893, 25), _point_along_a_line_109722, *[x2_109723, y2_109724, x1_109725, y1_109726, head_length_109727], **kwargs_109728)
            
            # Assigning a type to the variable 'call_assignment_100709' (line 3893)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3893, 16), 'call_assignment_100709', _point_along_a_line_call_result_109729)
            
            # Assigning a Call to a Name (line 3893):
            
            # Assigning a Call to a Name (line 3893):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3893, 16), 'int')
            # Processing the call keyword arguments
            kwargs_109733 = {}
            # Getting the type of 'call_assignment_100709' (line 3893)
            call_assignment_100709_109730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3893, 16), 'call_assignment_100709', False)
            # Obtaining the member '__getitem__' of a type (line 3893)
            getitem___109731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3893, 16), call_assignment_100709_109730, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109734 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109731, *[int_109732], **kwargs_109733)
            
            # Assigning a type to the variable 'call_assignment_100710' (line 3893)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3893, 16), 'call_assignment_100710', getitem___call_result_109734)
            
            # Assigning a Name to a Name (line 3893):
            
            # Assigning a Name to a Name (line 3893):
            # Getting the type of 'call_assignment_100710' (line 3893)
            call_assignment_100710_109735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3893, 16), 'call_assignment_100710')
            # Assigning a type to the variable 'x0' (line 3893)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3893, 16), 'x0', call_assignment_100710_109735)
            
            # Assigning a Call to a Name (line 3893):
            
            # Assigning a Call to a Name (line 3893):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3893, 16), 'int')
            # Processing the call keyword arguments
            kwargs_109739 = {}
            # Getting the type of 'call_assignment_100709' (line 3893)
            call_assignment_100709_109736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3893, 16), 'call_assignment_100709', False)
            # Obtaining the member '__getitem__' of a type (line 3893)
            getitem___109737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3893, 16), call_assignment_100709_109736, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109740 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109737, *[int_109738], **kwargs_109739)
            
            # Assigning a type to the variable 'call_assignment_100711' (line 3893)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3893, 16), 'call_assignment_100711', getitem___call_result_109740)
            
            # Assigning a Name to a Name (line 3893):
            
            # Assigning a Name to a Name (line 3893):
            # Getting the type of 'call_assignment_100711' (line 3893)
            call_assignment_100711_109741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3893, 16), 'call_assignment_100711')
            # Assigning a type to the variable 'y0' (line 3893)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3893, 20), 'y0', call_assignment_100711_109741)
            
            # Assigning a Tuple to a Tuple (line 3894):
            
            # Assigning a BinOp to a Name (line 3894):
            
            # Assigning a BinOp to a Name (line 3894):
            float_109742 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3894, 27), 'float')
            # Getting the type of 'x0' (line 3894)
            x0_109743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3894, 34), 'x0')
            # Getting the type of 'x2' (line 3894)
            x2_109744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3894, 39), 'x2')
            # Applying the binary operator '+' (line 3894)
            result_add_109745 = python_operator(stypy.reporting.localization.Localization(__file__, 3894, 34), '+', x0_109743, x2_109744)
            
            # Applying the binary operator '*' (line 3894)
            result_mul_109746 = python_operator(stypy.reporting.localization.Localization(__file__, 3894, 27), '*', float_109742, result_add_109745)
            
            # Assigning a type to the variable 'tuple_assignment_100712' (line 3894)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3894, 16), 'tuple_assignment_100712', result_mul_109746)
            
            # Assigning a BinOp to a Name (line 3894):
            
            # Assigning a BinOp to a Name (line 3894):
            float_109747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3894, 44), 'float')
            # Getting the type of 'y0' (line 3894)
            y0_109748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3894, 51), 'y0')
            # Getting the type of 'y2' (line 3894)
            y2_109749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3894, 56), 'y2')
            # Applying the binary operator '+' (line 3894)
            result_add_109750 = python_operator(stypy.reporting.localization.Localization(__file__, 3894, 51), '+', y0_109748, y2_109749)
            
            # Applying the binary operator '*' (line 3894)
            result_mul_109751 = python_operator(stypy.reporting.localization.Localization(__file__, 3894, 44), '*', float_109747, result_add_109750)
            
            # Assigning a type to the variable 'tuple_assignment_100713' (line 3894)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3894, 16), 'tuple_assignment_100713', result_mul_109751)
            
            # Assigning a Name to a Name (line 3894):
            
            # Assigning a Name to a Name (line 3894):
            # Getting the type of 'tuple_assignment_100712' (line 3894)
            tuple_assignment_100712_109752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3894, 16), 'tuple_assignment_100712')
            # Assigning a type to the variable 'x1n' (line 3894)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3894, 16), 'x1n', tuple_assignment_100712_109752)
            
            # Assigning a Name to a Name (line 3894):
            
            # Assigning a Name to a Name (line 3894):
            # Getting the type of 'tuple_assignment_100713' (line 3894)
            tuple_assignment_100713_109753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3894, 16), 'tuple_assignment_100713')
            # Assigning a type to the variable 'y1n' (line 3894)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3894, 21), 'y1n', tuple_assignment_100713_109753)
            
            # Assigning a List to a Name (line 3895):
            
            # Assigning a List to a Name (line 3895):
            
            # Assigning a List to a Name (line 3895):
            
            # Obtaining an instance of the builtin type 'list' (line 3895)
            list_109754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3895, 29), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3895)
            # Adding element type (line 3895)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3895)
            tuple_109755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3895, 31), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3895)
            # Adding element type (line 3895)
            # Getting the type of 'x0' (line 3895)
            x0_109756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3895, 31), 'x0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3895, 31), tuple_109755, x0_109756)
            # Adding element type (line 3895)
            # Getting the type of 'y0' (line 3895)
            y0_109757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3895, 35), 'y0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3895, 31), tuple_109755, y0_109757)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3895, 29), list_109754, tuple_109755)
            # Adding element type (line 3895)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3895)
            tuple_109758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3895, 41), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3895)
            # Adding element type (line 3895)
            # Getting the type of 'x1n' (line 3895)
            x1n_109759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3895, 41), 'x1n')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3895, 41), tuple_109758, x1n_109759)
            # Adding element type (line 3895)
            # Getting the type of 'y1n' (line 3895)
            y1n_109760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3895, 46), 'y1n')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3895, 41), tuple_109758, y1n_109760)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3895, 29), list_109754, tuple_109758)
            # Adding element type (line 3895)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3895)
            tuple_109761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3895, 53), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3895)
            # Adding element type (line 3895)
            # Getting the type of 'x2' (line 3895)
            x2_109762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3895, 53), 'x2')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3895, 53), tuple_109761, x2_109762)
            # Adding element type (line 3895)
            # Getting the type of 'y2' (line 3895)
            y2_109763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3895, 57), 'y2')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3895, 53), tuple_109761, y2_109763)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3895, 29), list_109754, tuple_109761)
            
            # Assigning a type to the variable 'arrow_path' (line 3895)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3895, 16), 'arrow_path', list_109754)
            
            # Assigning a Name to a Name (line 3896):
            
            # Assigning a Name to a Name (line 3896):
            
            # Assigning a Name to a Name (line 3896):
            # Getting the type of 'arrow_path' (line 3896)
            arrow_path_109764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3896, 28), 'arrow_path')
            # Assigning a type to the variable 'path_head' (line 3896)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3896, 16), 'path_head', arrow_path_109764)
            # SSA branch for the else branch of a try statement (line 3884)
            module_type_store.open_ssa_branch('except else')
            
            # Assigning a Name to a Name (line 3898):
            
            # Assigning a Name to a Name (line 3898):
            
            # Assigning a Name to a Name (line 3898):
            # Getting the type of 'path_in' (line 3898)
            path_in_109765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3898, 28), 'path_in')
            # Assigning a type to the variable 'path_head' (line 3898)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3898, 16), 'path_head', path_in_109765)
            # SSA join for try-except statement (line 3884)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Name (line 3901):
            
            # Assigning a Call to a Name (line 3901):
            
            # Assigning a Call to a Name (line 3901):
            
            # Call to inside_circle(...): (line 3901)
            # Processing the call arguments (line 3901)
            # Getting the type of 'x2' (line 3901)
            x2_109767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3901, 33), 'x2', False)
            # Getting the type of 'y2' (line 3901)
            y2_109768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3901, 37), 'y2', False)
            # Getting the type of 'head_length' (line 3901)
            head_length_109769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3901, 41), 'head_length', False)
            float_109770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3901, 55), 'float')
            # Applying the binary operator '*' (line 3901)
            result_mul_109771 = python_operator(stypy.reporting.localization.Localization(__file__, 3901, 41), '*', head_length_109769, float_109770)
            
            # Processing the call keyword arguments (line 3901)
            kwargs_109772 = {}
            # Getting the type of 'inside_circle' (line 3901)
            inside_circle_109766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3901, 19), 'inside_circle', False)
            # Calling inside_circle(args, kwargs) (line 3901)
            inside_circle_call_result_109773 = invoke(stypy.reporting.localization.Localization(__file__, 3901, 19), inside_circle_109766, *[x2_109767, y2_109768, result_mul_109771], **kwargs_109772)
            
            # Assigning a type to the variable 'in_f' (line 3901)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3901, 12), 'in_f', inside_circle_call_result_109773)
            
            # Assigning a Call to a Tuple (line 3902):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to split_bezier_intersecting_with_closedpath(...): (line 3902)
            # Processing the call arguments (line 3902)
            # Getting the type of 'arrow_path' (line 3903)
            arrow_path_109775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3903, 40), 'arrow_path', False)
            # Getting the type of 'in_f' (line 3904)
            in_f_109776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3904, 40), 'in_f', False)
            # Processing the call keyword arguments (line 3902)
            float_109777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3905, 50), 'float')
            keyword_109778 = float_109777
            kwargs_109779 = {'tolerence': keyword_109778}
            # Getting the type of 'split_bezier_intersecting_with_closedpath' (line 3902)
            split_bezier_intersecting_with_closedpath_109774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3902, 32), 'split_bezier_intersecting_with_closedpath', False)
            # Calling split_bezier_intersecting_with_closedpath(args, kwargs) (line 3902)
            split_bezier_intersecting_with_closedpath_call_result_109780 = invoke(stypy.reporting.localization.Localization(__file__, 3902, 32), split_bezier_intersecting_with_closedpath_109774, *[arrow_path_109775, in_f_109776], **kwargs_109779)
            
            # Assigning a type to the variable 'call_assignment_100714' (line 3902)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3902, 12), 'call_assignment_100714', split_bezier_intersecting_with_closedpath_call_result_109780)
            
            # Assigning a Call to a Name (line 3902):
            
            # Assigning a Call to a Name (line 3902):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3902, 12), 'int')
            # Processing the call keyword arguments
            kwargs_109784 = {}
            # Getting the type of 'call_assignment_100714' (line 3902)
            call_assignment_100714_109781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3902, 12), 'call_assignment_100714', False)
            # Obtaining the member '__getitem__' of a type (line 3902)
            getitem___109782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3902, 12), call_assignment_100714_109781, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109785 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109782, *[int_109783], **kwargs_109784)
            
            # Assigning a type to the variable 'call_assignment_100715' (line 3902)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3902, 12), 'call_assignment_100715', getitem___call_result_109785)
            
            # Assigning a Name to a Name (line 3902):
            
            # Assigning a Name to a Name (line 3902):
            # Getting the type of 'call_assignment_100715' (line 3902)
            call_assignment_100715_109786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3902, 12), 'call_assignment_100715')
            # Assigning a type to the variable 'path_out' (line 3902)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3902, 12), 'path_out', call_assignment_100715_109786)
            
            # Assigning a Call to a Name (line 3902):
            
            # Assigning a Call to a Name (line 3902):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3902, 12), 'int')
            # Processing the call keyword arguments
            kwargs_109790 = {}
            # Getting the type of 'call_assignment_100714' (line 3902)
            call_assignment_100714_109787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3902, 12), 'call_assignment_100714', False)
            # Obtaining the member '__getitem__' of a type (line 3902)
            getitem___109788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3902, 12), call_assignment_100714_109787, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109791 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109788, *[int_109789], **kwargs_109790)
            
            # Assigning a type to the variable 'call_assignment_100716' (line 3902)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3902, 12), 'call_assignment_100716', getitem___call_result_109791)
            
            # Assigning a Name to a Name (line 3902):
            
            # Assigning a Name to a Name (line 3902):
            # Getting the type of 'call_assignment_100716' (line 3902)
            call_assignment_100716_109792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3902, 12), 'call_assignment_100716')
            # Assigning a type to the variable 'path_in' (line 3902)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3902, 22), 'path_in', call_assignment_100716_109792)
            
            # Assigning a Name to a Name (line 3907):
            
            # Assigning a Name to a Name (line 3907):
            
            # Assigning a Name to a Name (line 3907):
            # Getting the type of 'path_out' (line 3907)
            path_out_109793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3907, 24), 'path_out')
            # Assigning a type to the variable 'path_tail' (line 3907)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3907, 12), 'path_tail', path_out_109793)
            
            # Assigning a BinOp to a Name (line 3910):
            
            # Assigning a BinOp to a Name (line 3910):
            
            # Assigning a BinOp to a Name (line 3910):
            # Getting the type of 'self' (line 3910)
            self_109794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3910, 25), 'self')
            # Obtaining the member 'head_width' of a type (line 3910)
            head_width_109795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3910, 25), self_109794, 'head_width')
            # Getting the type of 'mutation_size' (line 3910)
            mutation_size_109796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3910, 43), 'mutation_size')
            # Applying the binary operator '*' (line 3910)
            result_mul_109797 = python_operator(stypy.reporting.localization.Localization(__file__, 3910, 25), '*', head_width_109795, mutation_size_109796)
            
            # Assigning a type to the variable 'head_width' (line 3910)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3910, 12), 'head_width', result_mul_109797)
            
            # Assigning a Call to a Tuple (line 3911):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to make_wedged_bezier2(...): (line 3911)
            # Processing the call arguments (line 3911)
            # Getting the type of 'path_head' (line 3911)
            path_head_109799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3911, 49), 'path_head', False)
            # Getting the type of 'head_width' (line 3912)
            head_width_109800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3912, 49), 'head_width', False)
            float_109801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3912, 62), 'float')
            # Applying the binary operator 'div' (line 3912)
            result_div_109802 = python_operator(stypy.reporting.localization.Localization(__file__, 3912, 49), 'div', head_width_109800, float_109801)
            
            # Processing the call keyword arguments (line 3911)
            float_109803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3913, 52), 'float')
            keyword_109804 = float_109803
            kwargs_109805 = {'wm': keyword_109804}
            # Getting the type of 'make_wedged_bezier2' (line 3911)
            make_wedged_bezier2_109798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3911, 29), 'make_wedged_bezier2', False)
            # Calling make_wedged_bezier2(args, kwargs) (line 3911)
            make_wedged_bezier2_call_result_109806 = invoke(stypy.reporting.localization.Localization(__file__, 3911, 29), make_wedged_bezier2_109798, *[path_head_109799, result_div_109802], **kwargs_109805)
            
            # Assigning a type to the variable 'call_assignment_100717' (line 3911)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3911, 12), 'call_assignment_100717', make_wedged_bezier2_call_result_109806)
            
            # Assigning a Call to a Name (line 3911):
            
            # Assigning a Call to a Name (line 3911):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3911, 12), 'int')
            # Processing the call keyword arguments
            kwargs_109810 = {}
            # Getting the type of 'call_assignment_100717' (line 3911)
            call_assignment_100717_109807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3911, 12), 'call_assignment_100717', False)
            # Obtaining the member '__getitem__' of a type (line 3911)
            getitem___109808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3911, 12), call_assignment_100717_109807, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109811 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109808, *[int_109809], **kwargs_109810)
            
            # Assigning a type to the variable 'call_assignment_100718' (line 3911)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3911, 12), 'call_assignment_100718', getitem___call_result_109811)
            
            # Assigning a Name to a Name (line 3911):
            
            # Assigning a Name to a Name (line 3911):
            # Getting the type of 'call_assignment_100718' (line 3911)
            call_assignment_100718_109812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3911, 12), 'call_assignment_100718')
            # Assigning a type to the variable 'head_l' (line 3911)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3911, 12), 'head_l', call_assignment_100718_109812)
            
            # Assigning a Call to a Name (line 3911):
            
            # Assigning a Call to a Name (line 3911):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3911, 12), 'int')
            # Processing the call keyword arguments
            kwargs_109816 = {}
            # Getting the type of 'call_assignment_100717' (line 3911)
            call_assignment_100717_109813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3911, 12), 'call_assignment_100717', False)
            # Obtaining the member '__getitem__' of a type (line 3911)
            getitem___109814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3911, 12), call_assignment_100717_109813, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109817 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109814, *[int_109815], **kwargs_109816)
            
            # Assigning a type to the variable 'call_assignment_100719' (line 3911)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3911, 12), 'call_assignment_100719', getitem___call_result_109817)
            
            # Assigning a Name to a Name (line 3911):
            
            # Assigning a Name to a Name (line 3911):
            # Getting the type of 'call_assignment_100719' (line 3911)
            call_assignment_100719_109818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3911, 12), 'call_assignment_100719')
            # Assigning a type to the variable 'head_r' (line 3911)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3911, 20), 'head_r', call_assignment_100719_109818)
            
            # Assigning a BinOp to a Name (line 3916):
            
            # Assigning a BinOp to a Name (line 3916):
            
            # Assigning a BinOp to a Name (line 3916):
            # Getting the type of 'self' (line 3916)
            self_109819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3916, 25), 'self')
            # Obtaining the member 'tail_width' of a type (line 3916)
            tail_width_109820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3916, 25), self_109819, 'tail_width')
            # Getting the type of 'mutation_size' (line 3916)
            mutation_size_109821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3916, 43), 'mutation_size')
            # Applying the binary operator '*' (line 3916)
            result_mul_109822 = python_operator(stypy.reporting.localization.Localization(__file__, 3916, 25), '*', tail_width_109820, mutation_size_109821)
            
            # Assigning a type to the variable 'tail_width' (line 3916)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3916, 12), 'tail_width', result_mul_109822)
            
            # Assigning a Call to a Tuple (line 3917):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to make_wedged_bezier2(...): (line 3917)
            # Processing the call arguments (line 3917)
            # Getting the type of 'path_tail' (line 3917)
            path_tail_109824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3917, 56), 'path_tail', False)
            # Getting the type of 'tail_width' (line 3918)
            tail_width_109825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3918, 56), 'tail_width', False)
            float_109826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3918, 69), 'float')
            # Applying the binary operator '*' (line 3918)
            result_mul_109827 = python_operator(stypy.reporting.localization.Localization(__file__, 3918, 56), '*', tail_width_109825, float_109826)
            
            # Processing the call keyword arguments (line 3917)
            float_109828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3919, 59), 'float')
            keyword_109829 = float_109828
            float_109830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3919, 66), 'float')
            keyword_109831 = float_109830
            float_109832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3919, 74), 'float')
            keyword_109833 = float_109832
            kwargs_109834 = {'wm': keyword_109831, 'w2': keyword_109833, 'w1': keyword_109829}
            # Getting the type of 'make_wedged_bezier2' (line 3917)
            make_wedged_bezier2_109823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3917, 36), 'make_wedged_bezier2', False)
            # Calling make_wedged_bezier2(args, kwargs) (line 3917)
            make_wedged_bezier2_call_result_109835 = invoke(stypy.reporting.localization.Localization(__file__, 3917, 36), make_wedged_bezier2_109823, *[path_tail_109824, result_mul_109827], **kwargs_109834)
            
            # Assigning a type to the variable 'call_assignment_100720' (line 3917)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3917, 12), 'call_assignment_100720', make_wedged_bezier2_call_result_109835)
            
            # Assigning a Call to a Name (line 3917):
            
            # Assigning a Call to a Name (line 3917):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3917, 12), 'int')
            # Processing the call keyword arguments
            kwargs_109839 = {}
            # Getting the type of 'call_assignment_100720' (line 3917)
            call_assignment_100720_109836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3917, 12), 'call_assignment_100720', False)
            # Obtaining the member '__getitem__' of a type (line 3917)
            getitem___109837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3917, 12), call_assignment_100720_109836, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109840 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109837, *[int_109838], **kwargs_109839)
            
            # Assigning a type to the variable 'call_assignment_100721' (line 3917)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3917, 12), 'call_assignment_100721', getitem___call_result_109840)
            
            # Assigning a Name to a Name (line 3917):
            
            # Assigning a Name to a Name (line 3917):
            # Getting the type of 'call_assignment_100721' (line 3917)
            call_assignment_100721_109841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3917, 12), 'call_assignment_100721')
            # Assigning a type to the variable 'tail_left' (line 3917)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3917, 12), 'tail_left', call_assignment_100721_109841)
            
            # Assigning a Call to a Name (line 3917):
            
            # Assigning a Call to a Name (line 3917):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3917, 12), 'int')
            # Processing the call keyword arguments
            kwargs_109845 = {}
            # Getting the type of 'call_assignment_100720' (line 3917)
            call_assignment_100720_109842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3917, 12), 'call_assignment_100720', False)
            # Obtaining the member '__getitem__' of a type (line 3917)
            getitem___109843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3917, 12), call_assignment_100720_109842, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109846 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109843, *[int_109844], **kwargs_109845)
            
            # Assigning a type to the variable 'call_assignment_100722' (line 3917)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3917, 12), 'call_assignment_100722', getitem___call_result_109846)
            
            # Assigning a Name to a Name (line 3917):
            
            # Assigning a Name to a Name (line 3917):
            # Getting the type of 'call_assignment_100722' (line 3917)
            call_assignment_100722_109847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3917, 12), 'call_assignment_100722')
            # Assigning a type to the variable 'tail_right' (line 3917)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3917, 23), 'tail_right', call_assignment_100722_109847)
            
            # Assigning a Call to a Name (line 3922):
            
            # Assigning a Call to a Name (line 3922):
            
            # Assigning a Call to a Name (line 3922):
            
            # Call to inside_circle(...): (line 3922)
            # Processing the call arguments (line 3922)
            # Getting the type of 'x0' (line 3922)
            x0_109849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3922, 33), 'x0', False)
            # Getting the type of 'y0' (line 3922)
            y0_109850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3922, 37), 'y0', False)
            # Getting the type of 'tail_width' (line 3922)
            tail_width_109851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3922, 41), 'tail_width', False)
            float_109852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3922, 54), 'float')
            # Applying the binary operator '*' (line 3922)
            result_mul_109853 = python_operator(stypy.reporting.localization.Localization(__file__, 3922, 41), '*', tail_width_109851, float_109852)
            
            # Processing the call keyword arguments (line 3922)
            kwargs_109854 = {}
            # Getting the type of 'inside_circle' (line 3922)
            inside_circle_109848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3922, 19), 'inside_circle', False)
            # Calling inside_circle(args, kwargs) (line 3922)
            inside_circle_call_result_109855 = invoke(stypy.reporting.localization.Localization(__file__, 3922, 19), inside_circle_109848, *[x0_109849, y0_109850, result_mul_109853], **kwargs_109854)
            
            # Assigning a type to the variable 'in_f' (line 3922)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3922, 12), 'in_f', inside_circle_call_result_109855)
            
            # Assigning a Call to a Tuple (line 3923):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to split_bezier_intersecting_with_closedpath(...): (line 3923)
            # Processing the call arguments (line 3923)
            # Getting the type of 'arrow_path' (line 3924)
            arrow_path_109857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3924, 36), 'arrow_path', False)
            # Getting the type of 'in_f' (line 3925)
            in_f_109858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3925, 36), 'in_f', False)
            # Processing the call keyword arguments (line 3923)
            float_109859 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3926, 46), 'float')
            keyword_109860 = float_109859
            kwargs_109861 = {'tolerence': keyword_109860}
            # Getting the type of 'split_bezier_intersecting_with_closedpath' (line 3923)
            split_bezier_intersecting_with_closedpath_109856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3923, 32), 'split_bezier_intersecting_with_closedpath', False)
            # Calling split_bezier_intersecting_with_closedpath(args, kwargs) (line 3923)
            split_bezier_intersecting_with_closedpath_call_result_109862 = invoke(stypy.reporting.localization.Localization(__file__, 3923, 32), split_bezier_intersecting_with_closedpath_109856, *[arrow_path_109857, in_f_109858], **kwargs_109861)
            
            # Assigning a type to the variable 'call_assignment_100723' (line 3923)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3923, 12), 'call_assignment_100723', split_bezier_intersecting_with_closedpath_call_result_109862)
            
            # Assigning a Call to a Name (line 3923):
            
            # Assigning a Call to a Name (line 3923):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109865 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3923, 12), 'int')
            # Processing the call keyword arguments
            kwargs_109866 = {}
            # Getting the type of 'call_assignment_100723' (line 3923)
            call_assignment_100723_109863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3923, 12), 'call_assignment_100723', False)
            # Obtaining the member '__getitem__' of a type (line 3923)
            getitem___109864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3923, 12), call_assignment_100723_109863, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109867 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109864, *[int_109865], **kwargs_109866)
            
            # Assigning a type to the variable 'call_assignment_100724' (line 3923)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3923, 12), 'call_assignment_100724', getitem___call_result_109867)
            
            # Assigning a Name to a Name (line 3923):
            
            # Assigning a Name to a Name (line 3923):
            # Getting the type of 'call_assignment_100724' (line 3923)
            call_assignment_100724_109868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3923, 12), 'call_assignment_100724')
            # Assigning a type to the variable 'path_in' (line 3923)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3923, 12), 'path_in', call_assignment_100724_109868)
            
            # Assigning a Call to a Name (line 3923):
            
            # Assigning a Call to a Name (line 3923):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_109871 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3923, 12), 'int')
            # Processing the call keyword arguments
            kwargs_109872 = {}
            # Getting the type of 'call_assignment_100723' (line 3923)
            call_assignment_100723_109869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3923, 12), 'call_assignment_100723', False)
            # Obtaining the member '__getitem__' of a type (line 3923)
            getitem___109870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3923, 12), call_assignment_100723_109869, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_109873 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___109870, *[int_109871], **kwargs_109872)
            
            # Assigning a type to the variable 'call_assignment_100725' (line 3923)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3923, 12), 'call_assignment_100725', getitem___call_result_109873)
            
            # Assigning a Name to a Name (line 3923):
            
            # Assigning a Name to a Name (line 3923):
            # Getting the type of 'call_assignment_100725' (line 3923)
            call_assignment_100725_109874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3923, 12), 'call_assignment_100725')
            # Assigning a type to the variable 'path_out' (line 3923)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3923, 21), 'path_out', call_assignment_100725_109874)
            
            # Assigning a Subscript to a Name (line 3928):
            
            # Assigning a Subscript to a Name (line 3928):
            
            # Assigning a Subscript to a Name (line 3928):
            
            # Obtaining the type of the subscript
            int_109875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3928, 33), 'int')
            # Getting the type of 'path_in' (line 3928)
            path_in_109876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3928, 25), 'path_in')
            # Obtaining the member '__getitem__' of a type (line 3928)
            getitem___109877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3928, 25), path_in_109876, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3928)
            subscript_call_result_109878 = invoke(stypy.reporting.localization.Localization(__file__, 3928, 25), getitem___109877, int_109875)
            
            # Assigning a type to the variable 'tail_start' (line 3928)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3928, 12), 'tail_start', subscript_call_result_109878)
            
            # Assigning a Tuple to a Tuple (line 3930):
            
            # Assigning a Name to a Name (line 3930):
            
            # Assigning a Name to a Name (line 3930):
            # Getting the type of 'head_r' (line 3930)
            head_r_109879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3930, 36), 'head_r')
            # Assigning a type to the variable 'tuple_assignment_100726' (line 3930)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3930, 12), 'tuple_assignment_100726', head_r_109879)
            
            # Assigning a Name to a Name (line 3930):
            
            # Assigning a Name to a Name (line 3930):
            # Getting the type of 'head_l' (line 3930)
            head_l_109880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3930, 44), 'head_l')
            # Assigning a type to the variable 'tuple_assignment_100727' (line 3930)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3930, 12), 'tuple_assignment_100727', head_l_109880)
            
            # Assigning a Name to a Name (line 3930):
            
            # Assigning a Name to a Name (line 3930):
            # Getting the type of 'tuple_assignment_100726' (line 3930)
            tuple_assignment_100726_109881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3930, 12), 'tuple_assignment_100726')
            # Assigning a type to the variable 'head_right' (line 3930)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3930, 12), 'head_right', tuple_assignment_100726_109881)
            
            # Assigning a Name to a Name (line 3930):
            
            # Assigning a Name to a Name (line 3930):
            # Getting the type of 'tuple_assignment_100727' (line 3930)
            tuple_assignment_100727_109882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3930, 12), 'tuple_assignment_100727')
            # Assigning a type to the variable 'head_left' (line 3930)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3930, 24), 'head_left', tuple_assignment_100727_109882)
            
            # Assigning a List to a Name (line 3931):
            
            # Assigning a List to a Name (line 3931):
            
            # Assigning a List to a Name (line 3931):
            
            # Obtaining an instance of the builtin type 'list' (line 3931)
            list_109883 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3931, 25), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3931)
            # Adding element type (line 3931)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3931)
            tuple_109884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3931, 27), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3931)
            # Adding element type (line 3931)
            # Getting the type of 'Path' (line 3931)
            Path_109885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3931, 27), 'Path')
            # Obtaining the member 'MOVETO' of a type (line 3931)
            MOVETO_109886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3931, 27), Path_109885, 'MOVETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3931, 27), tuple_109884, MOVETO_109886)
            # Adding element type (line 3931)
            # Getting the type of 'tail_start' (line 3931)
            tail_start_109887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3931, 40), 'tail_start')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3931, 27), tuple_109884, tail_start_109887)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3931, 25), list_109883, tuple_109884)
            # Adding element type (line 3931)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3932)
            tuple_109888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3932, 27), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3932)
            # Adding element type (line 3932)
            # Getting the type of 'Path' (line 3932)
            Path_109889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3932, 27), 'Path')
            # Obtaining the member 'LINETO' of a type (line 3932)
            LINETO_109890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3932, 27), Path_109889, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3932, 27), tuple_109888, LINETO_109890)
            # Adding element type (line 3932)
            
            # Obtaining the type of the subscript
            int_109891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3932, 51), 'int')
            # Getting the type of 'tail_right' (line 3932)
            tail_right_109892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3932, 40), 'tail_right')
            # Obtaining the member '__getitem__' of a type (line 3932)
            getitem___109893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3932, 40), tail_right_109892, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3932)
            subscript_call_result_109894 = invoke(stypy.reporting.localization.Localization(__file__, 3932, 40), getitem___109893, int_109891)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3932, 27), tuple_109888, subscript_call_result_109894)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3931, 25), list_109883, tuple_109888)
            # Adding element type (line 3931)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3933)
            tuple_109895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3933, 27), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3933)
            # Adding element type (line 3933)
            # Getting the type of 'Path' (line 3933)
            Path_109896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3933, 27), 'Path')
            # Obtaining the member 'CURVE3' of a type (line 3933)
            CURVE3_109897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3933, 27), Path_109896, 'CURVE3')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3933, 27), tuple_109895, CURVE3_109897)
            # Adding element type (line 3933)
            
            # Obtaining the type of the subscript
            int_109898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3933, 51), 'int')
            # Getting the type of 'tail_right' (line 3933)
            tail_right_109899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3933, 40), 'tail_right')
            # Obtaining the member '__getitem__' of a type (line 3933)
            getitem___109900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3933, 40), tail_right_109899, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3933)
            subscript_call_result_109901 = invoke(stypy.reporting.localization.Localization(__file__, 3933, 40), getitem___109900, int_109898)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3933, 27), tuple_109895, subscript_call_result_109901)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3931, 25), list_109883, tuple_109895)
            # Adding element type (line 3931)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3934)
            tuple_109902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3934, 27), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3934)
            # Adding element type (line 3934)
            # Getting the type of 'Path' (line 3934)
            Path_109903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3934, 27), 'Path')
            # Obtaining the member 'CURVE3' of a type (line 3934)
            CURVE3_109904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3934, 27), Path_109903, 'CURVE3')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3934, 27), tuple_109902, CURVE3_109904)
            # Adding element type (line 3934)
            
            # Obtaining the type of the subscript
            int_109905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3934, 51), 'int')
            # Getting the type of 'tail_right' (line 3934)
            tail_right_109906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3934, 40), 'tail_right')
            # Obtaining the member '__getitem__' of a type (line 3934)
            getitem___109907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3934, 40), tail_right_109906, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3934)
            subscript_call_result_109908 = invoke(stypy.reporting.localization.Localization(__file__, 3934, 40), getitem___109907, int_109905)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3934, 27), tuple_109902, subscript_call_result_109908)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3931, 25), list_109883, tuple_109902)
            # Adding element type (line 3931)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3935)
            tuple_109909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3935, 27), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3935)
            # Adding element type (line 3935)
            # Getting the type of 'Path' (line 3935)
            Path_109910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3935, 27), 'Path')
            # Obtaining the member 'LINETO' of a type (line 3935)
            LINETO_109911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3935, 27), Path_109910, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3935, 27), tuple_109909, LINETO_109911)
            # Adding element type (line 3935)
            
            # Obtaining the type of the subscript
            int_109912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3935, 51), 'int')
            # Getting the type of 'head_right' (line 3935)
            head_right_109913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3935, 40), 'head_right')
            # Obtaining the member '__getitem__' of a type (line 3935)
            getitem___109914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3935, 40), head_right_109913, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3935)
            subscript_call_result_109915 = invoke(stypy.reporting.localization.Localization(__file__, 3935, 40), getitem___109914, int_109912)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3935, 27), tuple_109909, subscript_call_result_109915)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3931, 25), list_109883, tuple_109909)
            # Adding element type (line 3931)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3936)
            tuple_109916 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3936, 27), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3936)
            # Adding element type (line 3936)
            # Getting the type of 'Path' (line 3936)
            Path_109917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3936, 27), 'Path')
            # Obtaining the member 'CURVE3' of a type (line 3936)
            CURVE3_109918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3936, 27), Path_109917, 'CURVE3')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3936, 27), tuple_109916, CURVE3_109918)
            # Adding element type (line 3936)
            
            # Obtaining the type of the subscript
            int_109919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3936, 51), 'int')
            # Getting the type of 'head_right' (line 3936)
            head_right_109920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3936, 40), 'head_right')
            # Obtaining the member '__getitem__' of a type (line 3936)
            getitem___109921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3936, 40), head_right_109920, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3936)
            subscript_call_result_109922 = invoke(stypy.reporting.localization.Localization(__file__, 3936, 40), getitem___109921, int_109919)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3936, 27), tuple_109916, subscript_call_result_109922)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3931, 25), list_109883, tuple_109916)
            # Adding element type (line 3931)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3937)
            tuple_109923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3937, 27), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3937)
            # Adding element type (line 3937)
            # Getting the type of 'Path' (line 3937)
            Path_109924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3937, 27), 'Path')
            # Obtaining the member 'CURVE3' of a type (line 3937)
            CURVE3_109925 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3937, 27), Path_109924, 'CURVE3')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3937, 27), tuple_109923, CURVE3_109925)
            # Adding element type (line 3937)
            
            # Obtaining the type of the subscript
            int_109926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3937, 51), 'int')
            # Getting the type of 'head_right' (line 3937)
            head_right_109927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3937, 40), 'head_right')
            # Obtaining the member '__getitem__' of a type (line 3937)
            getitem___109928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3937, 40), head_right_109927, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3937)
            subscript_call_result_109929 = invoke(stypy.reporting.localization.Localization(__file__, 3937, 40), getitem___109928, int_109926)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3937, 27), tuple_109923, subscript_call_result_109929)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3931, 25), list_109883, tuple_109923)
            # Adding element type (line 3931)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3938)
            tuple_109930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3938, 27), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3938)
            # Adding element type (line 3938)
            # Getting the type of 'Path' (line 3938)
            Path_109931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3938, 27), 'Path')
            # Obtaining the member 'CURVE3' of a type (line 3938)
            CURVE3_109932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3938, 27), Path_109931, 'CURVE3')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3938, 27), tuple_109930, CURVE3_109932)
            # Adding element type (line 3938)
            
            # Obtaining the type of the subscript
            int_109933 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3938, 50), 'int')
            # Getting the type of 'head_left' (line 3938)
            head_left_109934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3938, 40), 'head_left')
            # Obtaining the member '__getitem__' of a type (line 3938)
            getitem___109935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3938, 40), head_left_109934, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3938)
            subscript_call_result_109936 = invoke(stypy.reporting.localization.Localization(__file__, 3938, 40), getitem___109935, int_109933)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3938, 27), tuple_109930, subscript_call_result_109936)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3931, 25), list_109883, tuple_109930)
            # Adding element type (line 3931)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3939)
            tuple_109937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3939, 27), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3939)
            # Adding element type (line 3939)
            # Getting the type of 'Path' (line 3939)
            Path_109938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3939, 27), 'Path')
            # Obtaining the member 'CURVE3' of a type (line 3939)
            CURVE3_109939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3939, 27), Path_109938, 'CURVE3')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3939, 27), tuple_109937, CURVE3_109939)
            # Adding element type (line 3939)
            
            # Obtaining the type of the subscript
            int_109940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3939, 50), 'int')
            # Getting the type of 'head_left' (line 3939)
            head_left_109941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3939, 40), 'head_left')
            # Obtaining the member '__getitem__' of a type (line 3939)
            getitem___109942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3939, 40), head_left_109941, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3939)
            subscript_call_result_109943 = invoke(stypy.reporting.localization.Localization(__file__, 3939, 40), getitem___109942, int_109940)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3939, 27), tuple_109937, subscript_call_result_109943)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3931, 25), list_109883, tuple_109937)
            # Adding element type (line 3931)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3940)
            tuple_109944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3940, 27), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3940)
            # Adding element type (line 3940)
            # Getting the type of 'Path' (line 3940)
            Path_109945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3940, 27), 'Path')
            # Obtaining the member 'LINETO' of a type (line 3940)
            LINETO_109946 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3940, 27), Path_109945, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3940, 27), tuple_109944, LINETO_109946)
            # Adding element type (line 3940)
            
            # Obtaining the type of the subscript
            int_109947 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3940, 50), 'int')
            # Getting the type of 'tail_left' (line 3940)
            tail_left_109948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3940, 40), 'tail_left')
            # Obtaining the member '__getitem__' of a type (line 3940)
            getitem___109949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3940, 40), tail_left_109948, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3940)
            subscript_call_result_109950 = invoke(stypy.reporting.localization.Localization(__file__, 3940, 40), getitem___109949, int_109947)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3940, 27), tuple_109944, subscript_call_result_109950)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3931, 25), list_109883, tuple_109944)
            # Adding element type (line 3931)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3941)
            tuple_109951 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3941, 27), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3941)
            # Adding element type (line 3941)
            # Getting the type of 'Path' (line 3941)
            Path_109952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3941, 27), 'Path')
            # Obtaining the member 'CURVE3' of a type (line 3941)
            CURVE3_109953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3941, 27), Path_109952, 'CURVE3')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3941, 27), tuple_109951, CURVE3_109953)
            # Adding element type (line 3941)
            
            # Obtaining the type of the subscript
            int_109954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3941, 50), 'int')
            # Getting the type of 'tail_left' (line 3941)
            tail_left_109955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3941, 40), 'tail_left')
            # Obtaining the member '__getitem__' of a type (line 3941)
            getitem___109956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3941, 40), tail_left_109955, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3941)
            subscript_call_result_109957 = invoke(stypy.reporting.localization.Localization(__file__, 3941, 40), getitem___109956, int_109954)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3941, 27), tuple_109951, subscript_call_result_109957)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3931, 25), list_109883, tuple_109951)
            # Adding element type (line 3931)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3942)
            tuple_109958 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3942, 27), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3942)
            # Adding element type (line 3942)
            # Getting the type of 'Path' (line 3942)
            Path_109959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3942, 27), 'Path')
            # Obtaining the member 'CURVE3' of a type (line 3942)
            CURVE3_109960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3942, 27), Path_109959, 'CURVE3')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3942, 27), tuple_109958, CURVE3_109960)
            # Adding element type (line 3942)
            
            # Obtaining the type of the subscript
            int_109961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3942, 50), 'int')
            # Getting the type of 'tail_left' (line 3942)
            tail_left_109962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3942, 40), 'tail_left')
            # Obtaining the member '__getitem__' of a type (line 3942)
            getitem___109963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3942, 40), tail_left_109962, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3942)
            subscript_call_result_109964 = invoke(stypy.reporting.localization.Localization(__file__, 3942, 40), getitem___109963, int_109961)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3942, 27), tuple_109958, subscript_call_result_109964)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3931, 25), list_109883, tuple_109958)
            # Adding element type (line 3931)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3943)
            tuple_109965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3943, 27), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3943)
            # Adding element type (line 3943)
            # Getting the type of 'Path' (line 3943)
            Path_109966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3943, 27), 'Path')
            # Obtaining the member 'LINETO' of a type (line 3943)
            LINETO_109967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3943, 27), Path_109966, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3943, 27), tuple_109965, LINETO_109967)
            # Adding element type (line 3943)
            # Getting the type of 'tail_start' (line 3943)
            tail_start_109968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3943, 40), 'tail_start')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3943, 27), tuple_109965, tail_start_109968)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3931, 25), list_109883, tuple_109965)
            # Adding element type (line 3931)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3944)
            tuple_109969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3944, 27), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3944)
            # Adding element type (line 3944)
            # Getting the type of 'Path' (line 3944)
            Path_109970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3944, 27), 'Path')
            # Obtaining the member 'CLOSEPOLY' of a type (line 3944)
            CLOSEPOLY_109971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3944, 27), Path_109970, 'CLOSEPOLY')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3944, 27), tuple_109969, CLOSEPOLY_109971)
            # Adding element type (line 3944)
            # Getting the type of 'tail_start' (line 3944)
            tail_start_109972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3944, 43), 'tail_start')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3944, 27), tuple_109969, tail_start_109972)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3931, 25), list_109883, tuple_109969)
            
            # Assigning a type to the variable 'patch_path' (line 3931)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3931, 12), 'patch_path', list_109883)
            
            # Assigning a Call to a Name (line 3946):
            
            # Assigning a Call to a Name (line 3946):
            
            # Assigning a Call to a Name (line 3946):
            
            # Call to Path(...): (line 3946)
            # Processing the call arguments (line 3946)
            # Calculating list comprehension
            # Calculating comprehension expression
            # Getting the type of 'patch_path' (line 3946)
            patch_path_109975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3946, 39), 'patch_path', False)
            comprehension_109976 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3946, 25), patch_path_109975)
            # Assigning a type to the variable 'c' (line 3946)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3946, 25), 'c', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3946, 25), comprehension_109976))
            # Assigning a type to the variable 'p' (line 3946)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3946, 25), 'p', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3946, 25), comprehension_109976))
            # Getting the type of 'p' (line 3946)
            p_109974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3946, 25), 'p', False)
            list_109977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3946, 25), 'list')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3946, 25), list_109977, p_109974)
            # Calculating list comprehension
            # Calculating comprehension expression
            # Getting the type of 'patch_path' (line 3946)
            patch_path_109979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3946, 67), 'patch_path', False)
            comprehension_109980 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3946, 53), patch_path_109979)
            # Assigning a type to the variable 'c' (line 3946)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3946, 53), 'c', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3946, 53), comprehension_109980))
            # Assigning a type to the variable 'p' (line 3946)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3946, 53), 'p', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3946, 53), comprehension_109980))
            # Getting the type of 'c' (line 3946)
            c_109978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3946, 53), 'c', False)
            list_109981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3946, 53), 'list')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3946, 53), list_109981, c_109978)
            # Processing the call keyword arguments (line 3946)
            kwargs_109982 = {}
            # Getting the type of 'Path' (line 3946)
            Path_109973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3946, 19), 'Path', False)
            # Calling Path(args, kwargs) (line 3946)
            Path_call_result_109983 = invoke(stypy.reporting.localization.Localization(__file__, 3946, 19), Path_109973, *[list_109977, list_109981], **kwargs_109982)
            
            # Assigning a type to the variable 'path' (line 3946)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3946, 12), 'path', Path_call_result_109983)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3948)
            tuple_109984 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3948, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3948)
            # Adding element type (line 3948)
            # Getting the type of 'path' (line 3948)
            path_109985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3948, 19), 'path')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3948, 19), tuple_109984, path_109985)
            # Adding element type (line 3948)
            # Getting the type of 'True' (line 3948)
            True_109986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3948, 25), 'True')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3948, 19), tuple_109984, True_109986)
            
            # Assigning a type to the variable 'stypy_return_type' (line 3948)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3948, 12), 'stypy_return_type', tuple_109984)
            
            # ################# End of 'transmute(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'transmute' in the type store
            # Getting the type of 'stypy_return_type' (line 3872)
            stypy_return_type_109987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3872, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_109987)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'transmute'
            return stypy_return_type_109987

    
    # Assigning a type to the variable 'Fancy' (line 3849)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3849, 4), 'Fancy', Fancy)
    
    # Assigning a Name to a Subscript (line 3950):
    
    # Assigning a Name to a Subscript (line 3950):
    # Declaration of the 'Wedge' class
    # Getting the type of '_Base' (line 3952)
    _Base_109988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3952, 16), '_Base')

    class Wedge(_Base_109988, ):
        unicode_109989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3957, (-1)), 'unicode', u'\n        Wedge(?) shape. Only works with a quadratic bezier curve.  The\n        begin point has a width of the tail_width and the end point has a\n        width of 0. At the middle, the width is shrink_factor*tail_width.\n        ')

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            float_109990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3959, 38), 'float')
            float_109991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3959, 56), 'float')
            defaults = [float_109990, float_109991]
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 3959, 8, False)
            # Assigning a type to the variable 'self' (line 3960)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3960, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Wedge.__init__', ['tail_width', 'shrink_factor'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, ['tail_width', 'shrink_factor'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            unicode_109992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3968, (-1)), 'unicode', u'\n            Parameters\n            ----------\n            tail_width : float, optional, default : 0.3\n                Width of the tail\n\n            shrink_factor : float, optional, default : 0.5\n                Fraction of the arrow width at the middle point\n            ')
            
            # Assigning a Name to a Attribute (line 3970):
            
            # Assigning a Name to a Attribute (line 3970):
            
            # Assigning a Name to a Attribute (line 3970):
            # Getting the type of 'tail_width' (line 3970)
            tail_width_109993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3970, 30), 'tail_width')
            # Getting the type of 'self' (line 3970)
            self_109994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3970, 12), 'self')
            # Setting the type of the member 'tail_width' of a type (line 3970)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3970, 12), self_109994, 'tail_width', tail_width_109993)
            
            # Assigning a Name to a Attribute (line 3971):
            
            # Assigning a Name to a Attribute (line 3971):
            
            # Assigning a Name to a Attribute (line 3971):
            # Getting the type of 'shrink_factor' (line 3971)
            shrink_factor_109995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3971, 33), 'shrink_factor')
            # Getting the type of 'self' (line 3971)
            self_109996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3971, 12), 'self')
            # Setting the type of the member 'shrink_factor' of a type (line 3971)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3971, 12), self_109996, 'shrink_factor', shrink_factor_109995)
            
            # Call to __init__(...): (line 3972)
            # Processing the call keyword arguments (line 3972)
            kwargs_110004 = {}
            
            # Call to super(...): (line 3972)
            # Processing the call arguments (line 3972)
            # Getting the type of 'ArrowStyle' (line 3972)
            ArrowStyle_109998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3972, 18), 'ArrowStyle', False)
            # Obtaining the member 'Wedge' of a type (line 3972)
            Wedge_109999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3972, 18), ArrowStyle_109998, 'Wedge')
            # Getting the type of 'self' (line 3972)
            self_110000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3972, 36), 'self', False)
            # Processing the call keyword arguments (line 3972)
            kwargs_110001 = {}
            # Getting the type of 'super' (line 3972)
            super_109997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3972, 12), 'super', False)
            # Calling super(args, kwargs) (line 3972)
            super_call_result_110002 = invoke(stypy.reporting.localization.Localization(__file__, 3972, 12), super_109997, *[Wedge_109999, self_110000], **kwargs_110001)
            
            # Obtaining the member '__init__' of a type (line 3972)
            init___110003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3972, 12), super_call_result_110002, '__init__')
            # Calling __init__(args, kwargs) (line 3972)
            init___call_result_110005 = invoke(stypy.reporting.localization.Localization(__file__, 3972, 12), init___110003, *[], **kwargs_110004)
            
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()


        @norecursion
        def transmute(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'transmute'
            module_type_store = module_type_store.open_function_context('transmute', 3974, 8, False)
            # Assigning a type to the variable 'self' (line 3975)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3975, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            Wedge.transmute.__dict__.__setitem__('stypy_localization', localization)
            Wedge.transmute.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            Wedge.transmute.__dict__.__setitem__('stypy_type_store', module_type_store)
            Wedge.transmute.__dict__.__setitem__('stypy_function_name', 'Wedge.transmute')
            Wedge.transmute.__dict__.__setitem__('stypy_param_names_list', ['path', 'mutation_size', 'linewidth'])
            Wedge.transmute.__dict__.__setitem__('stypy_varargs_param_name', None)
            Wedge.transmute.__dict__.__setitem__('stypy_kwargs_param_name', None)
            Wedge.transmute.__dict__.__setitem__('stypy_call_defaults', defaults)
            Wedge.transmute.__dict__.__setitem__('stypy_call_varargs', varargs)
            Wedge.transmute.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            Wedge.transmute.__dict__.__setitem__('stypy_declared_arg_number', 4)
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Wedge.transmute', ['path', 'mutation_size', 'linewidth'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'transmute', localization, ['path', 'mutation_size', 'linewidth'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'transmute(...)' code ##################

            
            # Assigning a Call to a Tuple (line 3976):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to ensure_quadratic_bezier(...): (line 3976)
            # Processing the call arguments (line 3976)
            # Getting the type of 'path' (line 3976)
            path_110008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3976, 66), 'path', False)
            # Processing the call keyword arguments (line 3976)
            kwargs_110009 = {}
            # Getting the type of 'self' (line 3976)
            self_110006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3976, 37), 'self', False)
            # Obtaining the member 'ensure_quadratic_bezier' of a type (line 3976)
            ensure_quadratic_bezier_110007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3976, 37), self_110006, 'ensure_quadratic_bezier')
            # Calling ensure_quadratic_bezier(args, kwargs) (line 3976)
            ensure_quadratic_bezier_call_result_110010 = invoke(stypy.reporting.localization.Localization(__file__, 3976, 37), ensure_quadratic_bezier_110007, *[path_110008], **kwargs_110009)
            
            # Assigning a type to the variable 'call_assignment_100728' (line 3976)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3976, 12), 'call_assignment_100728', ensure_quadratic_bezier_call_result_110010)
            
            # Assigning a Call to a Name (line 3976):
            
            # Assigning a Call to a Name (line 3976):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_110013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3976, 12), 'int')
            # Processing the call keyword arguments
            kwargs_110014 = {}
            # Getting the type of 'call_assignment_100728' (line 3976)
            call_assignment_100728_110011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3976, 12), 'call_assignment_100728', False)
            # Obtaining the member '__getitem__' of a type (line 3976)
            getitem___110012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3976, 12), call_assignment_100728_110011, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_110015 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___110012, *[int_110013], **kwargs_110014)
            
            # Assigning a type to the variable 'call_assignment_100729' (line 3976)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3976, 12), 'call_assignment_100729', getitem___call_result_110015)
            
            # Assigning a Name to a Name (line 3976):
            
            # Assigning a Name to a Name (line 3976):
            # Getting the type of 'call_assignment_100729' (line 3976)
            call_assignment_100729_110016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3976, 12), 'call_assignment_100729')
            # Assigning a type to the variable 'x0' (line 3976)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3976, 12), 'x0', call_assignment_100729_110016)
            
            # Assigning a Call to a Name (line 3976):
            
            # Assigning a Call to a Name (line 3976):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_110019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3976, 12), 'int')
            # Processing the call keyword arguments
            kwargs_110020 = {}
            # Getting the type of 'call_assignment_100728' (line 3976)
            call_assignment_100728_110017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3976, 12), 'call_assignment_100728', False)
            # Obtaining the member '__getitem__' of a type (line 3976)
            getitem___110018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3976, 12), call_assignment_100728_110017, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_110021 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___110018, *[int_110019], **kwargs_110020)
            
            # Assigning a type to the variable 'call_assignment_100730' (line 3976)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3976, 12), 'call_assignment_100730', getitem___call_result_110021)
            
            # Assigning a Name to a Name (line 3976):
            
            # Assigning a Name to a Name (line 3976):
            # Getting the type of 'call_assignment_100730' (line 3976)
            call_assignment_100730_110022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3976, 12), 'call_assignment_100730')
            # Assigning a type to the variable 'y0' (line 3976)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3976, 16), 'y0', call_assignment_100730_110022)
            
            # Assigning a Call to a Name (line 3976):
            
            # Assigning a Call to a Name (line 3976):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_110025 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3976, 12), 'int')
            # Processing the call keyword arguments
            kwargs_110026 = {}
            # Getting the type of 'call_assignment_100728' (line 3976)
            call_assignment_100728_110023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3976, 12), 'call_assignment_100728', False)
            # Obtaining the member '__getitem__' of a type (line 3976)
            getitem___110024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3976, 12), call_assignment_100728_110023, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_110027 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___110024, *[int_110025], **kwargs_110026)
            
            # Assigning a type to the variable 'call_assignment_100731' (line 3976)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3976, 12), 'call_assignment_100731', getitem___call_result_110027)
            
            # Assigning a Name to a Name (line 3976):
            
            # Assigning a Name to a Name (line 3976):
            # Getting the type of 'call_assignment_100731' (line 3976)
            call_assignment_100731_110028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3976, 12), 'call_assignment_100731')
            # Assigning a type to the variable 'x1' (line 3976)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3976, 20), 'x1', call_assignment_100731_110028)
            
            # Assigning a Call to a Name (line 3976):
            
            # Assigning a Call to a Name (line 3976):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_110031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3976, 12), 'int')
            # Processing the call keyword arguments
            kwargs_110032 = {}
            # Getting the type of 'call_assignment_100728' (line 3976)
            call_assignment_100728_110029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3976, 12), 'call_assignment_100728', False)
            # Obtaining the member '__getitem__' of a type (line 3976)
            getitem___110030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3976, 12), call_assignment_100728_110029, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_110033 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___110030, *[int_110031], **kwargs_110032)
            
            # Assigning a type to the variable 'call_assignment_100732' (line 3976)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3976, 12), 'call_assignment_100732', getitem___call_result_110033)
            
            # Assigning a Name to a Name (line 3976):
            
            # Assigning a Name to a Name (line 3976):
            # Getting the type of 'call_assignment_100732' (line 3976)
            call_assignment_100732_110034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3976, 12), 'call_assignment_100732')
            # Assigning a type to the variable 'y1' (line 3976)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3976, 24), 'y1', call_assignment_100732_110034)
            
            # Assigning a Call to a Name (line 3976):
            
            # Assigning a Call to a Name (line 3976):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_110037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3976, 12), 'int')
            # Processing the call keyword arguments
            kwargs_110038 = {}
            # Getting the type of 'call_assignment_100728' (line 3976)
            call_assignment_100728_110035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3976, 12), 'call_assignment_100728', False)
            # Obtaining the member '__getitem__' of a type (line 3976)
            getitem___110036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3976, 12), call_assignment_100728_110035, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_110039 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___110036, *[int_110037], **kwargs_110038)
            
            # Assigning a type to the variable 'call_assignment_100733' (line 3976)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3976, 12), 'call_assignment_100733', getitem___call_result_110039)
            
            # Assigning a Name to a Name (line 3976):
            
            # Assigning a Name to a Name (line 3976):
            # Getting the type of 'call_assignment_100733' (line 3976)
            call_assignment_100733_110040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3976, 12), 'call_assignment_100733')
            # Assigning a type to the variable 'x2' (line 3976)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3976, 28), 'x2', call_assignment_100733_110040)
            
            # Assigning a Call to a Name (line 3976):
            
            # Assigning a Call to a Name (line 3976):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_110043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3976, 12), 'int')
            # Processing the call keyword arguments
            kwargs_110044 = {}
            # Getting the type of 'call_assignment_100728' (line 3976)
            call_assignment_100728_110041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3976, 12), 'call_assignment_100728', False)
            # Obtaining the member '__getitem__' of a type (line 3976)
            getitem___110042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3976, 12), call_assignment_100728_110041, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_110045 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___110042, *[int_110043], **kwargs_110044)
            
            # Assigning a type to the variable 'call_assignment_100734' (line 3976)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3976, 12), 'call_assignment_100734', getitem___call_result_110045)
            
            # Assigning a Name to a Name (line 3976):
            
            # Assigning a Name to a Name (line 3976):
            # Getting the type of 'call_assignment_100734' (line 3976)
            call_assignment_100734_110046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3976, 12), 'call_assignment_100734')
            # Assigning a type to the variable 'y2' (line 3976)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3976, 32), 'y2', call_assignment_100734_110046)
            
            # Assigning a List to a Name (line 3978):
            
            # Assigning a List to a Name (line 3978):
            
            # Assigning a List to a Name (line 3978):
            
            # Obtaining an instance of the builtin type 'list' (line 3978)
            list_110047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3978, 25), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3978)
            # Adding element type (line 3978)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3978)
            tuple_110048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3978, 27), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3978)
            # Adding element type (line 3978)
            # Getting the type of 'x0' (line 3978)
            x0_110049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3978, 27), 'x0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3978, 27), tuple_110048, x0_110049)
            # Adding element type (line 3978)
            # Getting the type of 'y0' (line 3978)
            y0_110050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3978, 31), 'y0')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3978, 27), tuple_110048, y0_110050)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3978, 25), list_110047, tuple_110048)
            # Adding element type (line 3978)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3978)
            tuple_110051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3978, 37), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3978)
            # Adding element type (line 3978)
            # Getting the type of 'x1' (line 3978)
            x1_110052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3978, 37), 'x1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3978, 37), tuple_110051, x1_110052)
            # Adding element type (line 3978)
            # Getting the type of 'y1' (line 3978)
            y1_110053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3978, 41), 'y1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3978, 37), tuple_110051, y1_110053)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3978, 25), list_110047, tuple_110051)
            # Adding element type (line 3978)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3978)
            tuple_110054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3978, 47), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3978)
            # Adding element type (line 3978)
            # Getting the type of 'x2' (line 3978)
            x2_110055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3978, 47), 'x2')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3978, 47), tuple_110054, x2_110055)
            # Adding element type (line 3978)
            # Getting the type of 'y2' (line 3978)
            y2_110056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3978, 51), 'y2')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3978, 47), tuple_110054, y2_110056)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3978, 25), list_110047, tuple_110054)
            
            # Assigning a type to the variable 'arrow_path' (line 3978)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3978, 12), 'arrow_path', list_110047)
            
            # Assigning a Call to a Tuple (line 3979):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to make_wedged_bezier2(...): (line 3979)
            # Processing the call arguments (line 3979)
            # Getting the type of 'arrow_path' (line 3980)
            arrow_path_110058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3980, 36), 'arrow_path', False)
            # Getting the type of 'self' (line 3981)
            self_110059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3981, 36), 'self', False)
            # Obtaining the member 'tail_width' of a type (line 3981)
            tail_width_110060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3981, 36), self_110059, 'tail_width')
            # Getting the type of 'mutation_size' (line 3981)
            mutation_size_110061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3981, 54), 'mutation_size', False)
            # Applying the binary operator '*' (line 3981)
            result_mul_110062 = python_operator(stypy.reporting.localization.Localization(__file__, 3981, 36), '*', tail_width_110060, mutation_size_110061)
            
            float_110063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3981, 70), 'float')
            # Applying the binary operator 'div' (line 3981)
            result_div_110064 = python_operator(stypy.reporting.localization.Localization(__file__, 3981, 68), 'div', result_mul_110062, float_110063)
            
            # Processing the call keyword arguments (line 3979)
            # Getting the type of 'self' (line 3982)
            self_110065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3982, 39), 'self', False)
            # Obtaining the member 'shrink_factor' of a type (line 3982)
            shrink_factor_110066 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3982, 39), self_110065, 'shrink_factor')
            keyword_110067 = shrink_factor_110066
            kwargs_110068 = {'wm': keyword_110067}
            # Getting the type of 'make_wedged_bezier2' (line 3979)
            make_wedged_bezier2_110057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3979, 30), 'make_wedged_bezier2', False)
            # Calling make_wedged_bezier2(args, kwargs) (line 3979)
            make_wedged_bezier2_call_result_110069 = invoke(stypy.reporting.localization.Localization(__file__, 3979, 30), make_wedged_bezier2_110057, *[arrow_path_110058, result_div_110064], **kwargs_110068)
            
            # Assigning a type to the variable 'call_assignment_100735' (line 3979)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3979, 12), 'call_assignment_100735', make_wedged_bezier2_call_result_110069)
            
            # Assigning a Call to a Name (line 3979):
            
            # Assigning a Call to a Name (line 3979):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_110072 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3979, 12), 'int')
            # Processing the call keyword arguments
            kwargs_110073 = {}
            # Getting the type of 'call_assignment_100735' (line 3979)
            call_assignment_100735_110070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3979, 12), 'call_assignment_100735', False)
            # Obtaining the member '__getitem__' of a type (line 3979)
            getitem___110071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3979, 12), call_assignment_100735_110070, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_110074 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___110071, *[int_110072], **kwargs_110073)
            
            # Assigning a type to the variable 'call_assignment_100736' (line 3979)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3979, 12), 'call_assignment_100736', getitem___call_result_110074)
            
            # Assigning a Name to a Name (line 3979):
            
            # Assigning a Name to a Name (line 3979):
            # Getting the type of 'call_assignment_100736' (line 3979)
            call_assignment_100736_110075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3979, 12), 'call_assignment_100736')
            # Assigning a type to the variable 'b_plus' (line 3979)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3979, 12), 'b_plus', call_assignment_100736_110075)
            
            # Assigning a Call to a Name (line 3979):
            
            # Assigning a Call to a Name (line 3979):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_110078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3979, 12), 'int')
            # Processing the call keyword arguments
            kwargs_110079 = {}
            # Getting the type of 'call_assignment_100735' (line 3979)
            call_assignment_100735_110076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3979, 12), 'call_assignment_100735', False)
            # Obtaining the member '__getitem__' of a type (line 3979)
            getitem___110077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3979, 12), call_assignment_100735_110076, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_110080 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___110077, *[int_110078], **kwargs_110079)
            
            # Assigning a type to the variable 'call_assignment_100737' (line 3979)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3979, 12), 'call_assignment_100737', getitem___call_result_110080)
            
            # Assigning a Name to a Name (line 3979):
            
            # Assigning a Name to a Name (line 3979):
            # Getting the type of 'call_assignment_100737' (line 3979)
            call_assignment_100737_110081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3979, 12), 'call_assignment_100737')
            # Assigning a type to the variable 'b_minus' (line 3979)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3979, 20), 'b_minus', call_assignment_100737_110081)
            
            # Assigning a List to a Name (line 3984):
            
            # Assigning a List to a Name (line 3984):
            
            # Assigning a List to a Name (line 3984):
            
            # Obtaining an instance of the builtin type 'list' (line 3984)
            list_110082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3984, 25), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3984)
            # Adding element type (line 3984)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3984)
            tuple_110083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3984, 27), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3984)
            # Adding element type (line 3984)
            # Getting the type of 'Path' (line 3984)
            Path_110084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3984, 27), 'Path')
            # Obtaining the member 'MOVETO' of a type (line 3984)
            MOVETO_110085 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3984, 27), Path_110084, 'MOVETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3984, 27), tuple_110083, MOVETO_110085)
            # Adding element type (line 3984)
            
            # Obtaining the type of the subscript
            int_110086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3984, 47), 'int')
            # Getting the type of 'b_plus' (line 3984)
            b_plus_110087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3984, 40), 'b_plus')
            # Obtaining the member '__getitem__' of a type (line 3984)
            getitem___110088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3984, 40), b_plus_110087, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3984)
            subscript_call_result_110089 = invoke(stypy.reporting.localization.Localization(__file__, 3984, 40), getitem___110088, int_110086)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3984, 27), tuple_110083, subscript_call_result_110089)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3984, 25), list_110082, tuple_110083)
            # Adding element type (line 3984)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3985)
            tuple_110090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3985, 27), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3985)
            # Adding element type (line 3985)
            # Getting the type of 'Path' (line 3985)
            Path_110091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3985, 27), 'Path')
            # Obtaining the member 'CURVE3' of a type (line 3985)
            CURVE3_110092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3985, 27), Path_110091, 'CURVE3')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3985, 27), tuple_110090, CURVE3_110092)
            # Adding element type (line 3985)
            
            # Obtaining the type of the subscript
            int_110093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3985, 47), 'int')
            # Getting the type of 'b_plus' (line 3985)
            b_plus_110094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3985, 40), 'b_plus')
            # Obtaining the member '__getitem__' of a type (line 3985)
            getitem___110095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3985, 40), b_plus_110094, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3985)
            subscript_call_result_110096 = invoke(stypy.reporting.localization.Localization(__file__, 3985, 40), getitem___110095, int_110093)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3985, 27), tuple_110090, subscript_call_result_110096)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3984, 25), list_110082, tuple_110090)
            # Adding element type (line 3984)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3986)
            tuple_110097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3986, 27), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3986)
            # Adding element type (line 3986)
            # Getting the type of 'Path' (line 3986)
            Path_110098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3986, 27), 'Path')
            # Obtaining the member 'CURVE3' of a type (line 3986)
            CURVE3_110099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3986, 27), Path_110098, 'CURVE3')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3986, 27), tuple_110097, CURVE3_110099)
            # Adding element type (line 3986)
            
            # Obtaining the type of the subscript
            int_110100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3986, 47), 'int')
            # Getting the type of 'b_plus' (line 3986)
            b_plus_110101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3986, 40), 'b_plus')
            # Obtaining the member '__getitem__' of a type (line 3986)
            getitem___110102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3986, 40), b_plus_110101, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3986)
            subscript_call_result_110103 = invoke(stypy.reporting.localization.Localization(__file__, 3986, 40), getitem___110102, int_110100)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3986, 27), tuple_110097, subscript_call_result_110103)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3984, 25), list_110082, tuple_110097)
            # Adding element type (line 3984)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3987)
            tuple_110104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3987, 27), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3987)
            # Adding element type (line 3987)
            # Getting the type of 'Path' (line 3987)
            Path_110105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3987, 27), 'Path')
            # Obtaining the member 'LINETO' of a type (line 3987)
            LINETO_110106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3987, 27), Path_110105, 'LINETO')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3987, 27), tuple_110104, LINETO_110106)
            # Adding element type (line 3987)
            
            # Obtaining the type of the subscript
            int_110107 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3987, 48), 'int')
            # Getting the type of 'b_minus' (line 3987)
            b_minus_110108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3987, 40), 'b_minus')
            # Obtaining the member '__getitem__' of a type (line 3987)
            getitem___110109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3987, 40), b_minus_110108, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3987)
            subscript_call_result_110110 = invoke(stypy.reporting.localization.Localization(__file__, 3987, 40), getitem___110109, int_110107)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3987, 27), tuple_110104, subscript_call_result_110110)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3984, 25), list_110082, tuple_110104)
            # Adding element type (line 3984)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3988)
            tuple_110111 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3988, 27), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3988)
            # Adding element type (line 3988)
            # Getting the type of 'Path' (line 3988)
            Path_110112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3988, 27), 'Path')
            # Obtaining the member 'CURVE3' of a type (line 3988)
            CURVE3_110113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3988, 27), Path_110112, 'CURVE3')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3988, 27), tuple_110111, CURVE3_110113)
            # Adding element type (line 3988)
            
            # Obtaining the type of the subscript
            int_110114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3988, 48), 'int')
            # Getting the type of 'b_minus' (line 3988)
            b_minus_110115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3988, 40), 'b_minus')
            # Obtaining the member '__getitem__' of a type (line 3988)
            getitem___110116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3988, 40), b_minus_110115, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3988)
            subscript_call_result_110117 = invoke(stypy.reporting.localization.Localization(__file__, 3988, 40), getitem___110116, int_110114)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3988, 27), tuple_110111, subscript_call_result_110117)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3984, 25), list_110082, tuple_110111)
            # Adding element type (line 3984)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3989)
            tuple_110118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3989, 27), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3989)
            # Adding element type (line 3989)
            # Getting the type of 'Path' (line 3989)
            Path_110119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3989, 27), 'Path')
            # Obtaining the member 'CURVE3' of a type (line 3989)
            CURVE3_110120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3989, 27), Path_110119, 'CURVE3')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3989, 27), tuple_110118, CURVE3_110120)
            # Adding element type (line 3989)
            
            # Obtaining the type of the subscript
            int_110121 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3989, 48), 'int')
            # Getting the type of 'b_minus' (line 3989)
            b_minus_110122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3989, 40), 'b_minus')
            # Obtaining the member '__getitem__' of a type (line 3989)
            getitem___110123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3989, 40), b_minus_110122, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3989)
            subscript_call_result_110124 = invoke(stypy.reporting.localization.Localization(__file__, 3989, 40), getitem___110123, int_110121)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3989, 27), tuple_110118, subscript_call_result_110124)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3984, 25), list_110082, tuple_110118)
            # Adding element type (line 3984)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3990)
            tuple_110125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3990, 27), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3990)
            # Adding element type (line 3990)
            # Getting the type of 'Path' (line 3990)
            Path_110126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3990, 27), 'Path')
            # Obtaining the member 'CLOSEPOLY' of a type (line 3990)
            CLOSEPOLY_110127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3990, 27), Path_110126, 'CLOSEPOLY')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3990, 27), tuple_110125, CLOSEPOLY_110127)
            # Adding element type (line 3990)
            
            # Obtaining the type of the subscript
            int_110128 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3990, 51), 'int')
            # Getting the type of 'b_minus' (line 3990)
            b_minus_110129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3990, 43), 'b_minus')
            # Obtaining the member '__getitem__' of a type (line 3990)
            getitem___110130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3990, 43), b_minus_110129, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3990)
            subscript_call_result_110131 = invoke(stypy.reporting.localization.Localization(__file__, 3990, 43), getitem___110130, int_110128)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3990, 27), tuple_110125, subscript_call_result_110131)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3984, 25), list_110082, tuple_110125)
            
            # Assigning a type to the variable 'patch_path' (line 3984)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3984, 12), 'patch_path', list_110082)
            
            # Assigning a Call to a Name (line 3992):
            
            # Assigning a Call to a Name (line 3992):
            
            # Assigning a Call to a Name (line 3992):
            
            # Call to Path(...): (line 3992)
            # Processing the call arguments (line 3992)
            # Calculating list comprehension
            # Calculating comprehension expression
            # Getting the type of 'patch_path' (line 3992)
            patch_path_110134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3992, 39), 'patch_path', False)
            comprehension_110135 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3992, 25), patch_path_110134)
            # Assigning a type to the variable 'c' (line 3992)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3992, 25), 'c', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3992, 25), comprehension_110135))
            # Assigning a type to the variable 'p' (line 3992)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3992, 25), 'p', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3992, 25), comprehension_110135))
            # Getting the type of 'p' (line 3992)
            p_110133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3992, 25), 'p', False)
            list_110136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3992, 25), 'list')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3992, 25), list_110136, p_110133)
            # Calculating list comprehension
            # Calculating comprehension expression
            # Getting the type of 'patch_path' (line 3992)
            patch_path_110138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3992, 67), 'patch_path', False)
            comprehension_110139 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3992, 53), patch_path_110138)
            # Assigning a type to the variable 'c' (line 3992)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3992, 53), 'c', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3992, 53), comprehension_110139))
            # Assigning a type to the variable 'p' (line 3992)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3992, 53), 'p', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3992, 53), comprehension_110139))
            # Getting the type of 'c' (line 3992)
            c_110137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3992, 53), 'c', False)
            list_110140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3992, 53), 'list')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3992, 53), list_110140, c_110137)
            # Processing the call keyword arguments (line 3992)
            kwargs_110141 = {}
            # Getting the type of 'Path' (line 3992)
            Path_110132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3992, 19), 'Path', False)
            # Calling Path(args, kwargs) (line 3992)
            Path_call_result_110142 = invoke(stypy.reporting.localization.Localization(__file__, 3992, 19), Path_110132, *[list_110136, list_110140], **kwargs_110141)
            
            # Assigning a type to the variable 'path' (line 3992)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3992, 12), 'path', Path_call_result_110142)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3994)
            tuple_110143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3994, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3994)
            # Adding element type (line 3994)
            # Getting the type of 'path' (line 3994)
            path_110144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3994, 19), 'path')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3994, 19), tuple_110143, path_110144)
            # Adding element type (line 3994)
            # Getting the type of 'True' (line 3994)
            True_110145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3994, 25), 'True')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3994, 19), tuple_110143, True_110145)
            
            # Assigning a type to the variable 'stypy_return_type' (line 3994)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3994, 12), 'stypy_return_type', tuple_110143)
            
            # ################# End of 'transmute(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'transmute' in the type store
            # Getting the type of 'stypy_return_type' (line 3974)
            stypy_return_type_110146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3974, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_110146)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'transmute'
            return stypy_return_type_110146

    
    # Assigning a type to the variable 'Wedge' (line 3952)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3952, 4), 'Wedge', Wedge)
    
    # Assigning a Name to a Subscript (line 3996):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 3152, 0, False)
        # Assigning a type to the variable 'self' (line 3153)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3153, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ArrowStyle.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'ArrowStyle' (line 3152)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3152, 0), 'ArrowStyle', ArrowStyle)

# Assigning a Dict to a Name (line 3189):

# Obtaining an instance of the builtin type 'dict' (line 3189)
dict_110147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3189, 18), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 3189)

# Getting the type of 'ArrowStyle'
ArrowStyle_110148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ArrowStyle')
# Setting the type of the member '_style_list' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ArrowStyle_110148, '_style_list', dict_110147)

# Assigning a Name to a Subscript (line 3429):
# Getting the type of 'Curve' (line 3429)
Curve_110149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3429, 23), 'Curve')
# Getting the type of 'ArrowStyle'
ArrowStyle_110150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ArrowStyle')
# Setting the type of the member '_style_list' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ArrowStyle_110150, '_style_list', Curve_110149)

# Assigning a Name to a Subscript (line 3451):
# Getting the type of 'CurveA' (line 3451)
CurveA_110151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3451, 24), 'CurveA')
# Getting the type of 'ArrowStyle'
ArrowStyle_110152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ArrowStyle')
# Setting the type of the member '_style_list' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ArrowStyle_110152, '_style_list', CurveA_110151)

# Assigning a Name to a Subscript (line 3473):
# Getting the type of 'CurveB' (line 3473)
CurveB_110153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3473, 24), 'CurveB')
# Getting the type of 'ArrowStyle'
ArrowStyle_110154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ArrowStyle')
# Setting the type of the member '_style_list' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ArrowStyle_110154, '_style_list', CurveB_110153)

# Assigning a Name to a Subscript (line 3495):
# Getting the type of 'CurveAB' (line 3495)
CurveAB_110155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3495, 25), 'CurveAB')
# Getting the type of 'ArrowStyle'
ArrowStyle_110156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ArrowStyle')
# Setting the type of the member '_style_list' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ArrowStyle_110156, '_style_list', CurveAB_110155)

# Assigning a Name to a Subscript (line 3518):
# Getting the type of 'CurveFilledA' (line 3518)
CurveFilledA_110157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3518, 25), 'CurveFilledA')
# Getting the type of 'ArrowStyle'
ArrowStyle_110158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ArrowStyle')
# Setting the type of the member '_style_list' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ArrowStyle_110158, '_style_list', CurveFilledA_110157)

# Assigning a Name to a Subscript (line 3541):
# Getting the type of 'CurveFilledB' (line 3541)
CurveFilledB_110159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3541, 25), 'CurveFilledB')
# Getting the type of 'ArrowStyle'
ArrowStyle_110160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ArrowStyle')
# Setting the type of the member '_style_list' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ArrowStyle_110160, '_style_list', CurveFilledB_110159)

# Assigning a Name to a Subscript (line 3564):
# Getting the type of 'CurveFilledAB' (line 3564)
CurveFilledAB_110161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3564, 27), 'CurveFilledAB')
# Getting the type of 'ArrowStyle'
ArrowStyle_110162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ArrowStyle')
# Setting the type of the member '_style_list' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ArrowStyle_110162, '_style_list', CurveFilledAB_110161)

# Assigning a Name to a Subscript (line 3678):
# Getting the type of 'BracketAB' (line 3678)
BracketAB_110163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3678, 25), 'BracketAB')
# Getting the type of 'ArrowStyle'
ArrowStyle_110164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ArrowStyle')
# Setting the type of the member '_style_list' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ArrowStyle_110164, '_style_list', BracketAB_110163)

# Assigning a Name to a Subscript (line 3704):
# Getting the type of 'BracketA' (line 3704)
BracketA_110165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3704, 24), 'BracketA')
# Getting the type of 'ArrowStyle'
ArrowStyle_110166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ArrowStyle')
# Setting the type of the member '_style_list' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ArrowStyle_110166, '_style_list', BracketA_110165)

# Assigning a Name to a Subscript (line 3730):
# Getting the type of 'BracketB' (line 3730)
BracketB_110167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3730, 24), 'BracketB')
# Getting the type of 'ArrowStyle'
ArrowStyle_110168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ArrowStyle')
# Setting the type of the member '_style_list' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ArrowStyle_110168, '_style_list', BracketB_110167)

# Assigning a Name to a Subscript (line 3760):
# Getting the type of 'BarAB' (line 3760)
BarAB_110169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3760, 25), 'BarAB')
# Getting the type of 'ArrowStyle'
ArrowStyle_110170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ArrowStyle')
# Setting the type of the member '_style_list' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ArrowStyle_110170, '_style_list', BarAB_110169)

# Assigning a Name to a Subscript (line 3847):
# Getting the type of 'Simple' (line 3847)
Simple_110171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3847, 28), 'Simple')
# Getting the type of 'ArrowStyle'
ArrowStyle_110172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ArrowStyle')
# Setting the type of the member '_style_list' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ArrowStyle_110172, '_style_list', Simple_110171)

# Assigning a Name to a Subscript (line 3950):
# Getting the type of 'Fancy' (line 3950)
Fancy_110173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3950, 27), 'Fancy')
# Getting the type of 'ArrowStyle'
ArrowStyle_110174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ArrowStyle')
# Setting the type of the member '_style_list' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ArrowStyle_110174, '_style_list', Fancy_110173)

# Assigning a Name to a Subscript (line 3996):
# Getting the type of 'Wedge' (line 3996)
Wedge_110175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3996, 27), 'Wedge')
# Getting the type of 'ArrowStyle'
ArrowStyle_110176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ArrowStyle')
# Setting the type of the member '_style_list' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ArrowStyle_110176, '_style_list', Wedge_110175)

# Assigning a Name to a Subscript (line 3996):

# Getting the type of '__doc__' (line 3998)
doc___110177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3998, 7), '__doc__')
# Testing the type of an if condition (line 3998)
if_condition_110178 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3998, 4), doc___110177)
# Assigning a type to the variable 'if_condition_110178' (line 3998)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3998, 4), 'if_condition_110178', if_condition_110178)
# SSA begins for if statement (line 3998)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Assigning a BinOp to a Name (line 3999):

# Assigning a BinOp to a Name (line 3999):

# Assigning a BinOp to a Name (line 3999):

# Call to dedent(...): (line 3999)
# Processing the call arguments (line 3999)
# Getting the type of '__doc__' (line 3999)
doc___110181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3999, 31), '__doc__', False)
# Processing the call keyword arguments (line 3999)
kwargs_110182 = {}
# Getting the type of 'cbook' (line 3999)
cbook_110179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3999, 18), 'cbook', False)
# Obtaining the member 'dedent' of a type (line 3999)
dedent_110180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3999, 18), cbook_110179, 'dedent')
# Calling dedent(args, kwargs) (line 3999)
dedent_call_result_110183 = invoke(stypy.reporting.localization.Localization(__file__, 3999, 18), dedent_110180, *[doc___110181], **kwargs_110182)


# Obtaining an instance of the builtin type 'dict' (line 4000)
dict_110184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4000, 15), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 4000)
# Adding element type (key, value) (line 4000)
unicode_110185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4000, 16), 'unicode', u'AvailableArrowstyles')

# Call to _pprint_styles(...): (line 4000)
# Processing the call arguments (line 4000)
# Getting the type of 'ArrowStyle'
ArrowStyle_110187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ArrowStyle', False)
# Obtaining the member '_style_list' of a type
_style_list_110188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ArrowStyle_110187, '_style_list')
# Processing the call keyword arguments (line 4000)
kwargs_110189 = {}
# Getting the type of '_pprint_styles' (line 4000)
_pprint_styles_110186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4000, 40), '_pprint_styles', False)
# Calling _pprint_styles(args, kwargs) (line 4000)
_pprint_styles_call_result_110190 = invoke(stypy.reporting.localization.Localization(__file__, 4000, 40), _pprint_styles_110186, *[_style_list_110188], **kwargs_110189)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4000, 15), dict_110184, (unicode_110185, _pprint_styles_call_result_110190))

# Applying the binary operator '%' (line 3999)
result_mod_110191 = python_operator(stypy.reporting.localization.Localization(__file__, 3999, 18), '%', dedent_call_result_110183, dict_110184)

# Assigning a type to the variable '__doc__' (line 3999)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3999, 8), '__doc__', result_mod_110191)
# SSA join for if statement (line 3998)
module_type_store = module_type_store.join_ssa_context()


# Call to update(...): (line 4003)
# Processing the call keyword arguments (line 4003)

# Call to _pprint_styles(...): (line 4004)
# Processing the call arguments (line 4004)
# Getting the type of 'ArrowStyle' (line 4004)
ArrowStyle_110196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4004, 40), 'ArrowStyle', False)
# Obtaining the member '_style_list' of a type (line 4004)
_style_list_110197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4004, 40), ArrowStyle_110196, '_style_list')
# Processing the call keyword arguments (line 4004)
kwargs_110198 = {}
# Getting the type of '_pprint_styles' (line 4004)
_pprint_styles_110195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4004, 25), '_pprint_styles', False)
# Calling _pprint_styles(args, kwargs) (line 4004)
_pprint_styles_call_result_110199 = invoke(stypy.reporting.localization.Localization(__file__, 4004, 25), _pprint_styles_110195, *[_style_list_110197], **kwargs_110198)

keyword_110200 = _pprint_styles_call_result_110199

# Call to _pprint_styles(...): (line 4005)
# Processing the call arguments (line 4005)
# Getting the type of 'ConnectionStyle' (line 4005)
ConnectionStyle_110202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4005, 44), 'ConnectionStyle', False)
# Obtaining the member '_style_list' of a type (line 4005)
_style_list_110203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4005, 44), ConnectionStyle_110202, '_style_list')
# Processing the call keyword arguments (line 4005)
kwargs_110204 = {}
# Getting the type of '_pprint_styles' (line 4005)
_pprint_styles_110201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4005, 29), '_pprint_styles', False)
# Calling _pprint_styles(args, kwargs) (line 4005)
_pprint_styles_call_result_110205 = invoke(stypy.reporting.localization.Localization(__file__, 4005, 29), _pprint_styles_110201, *[_style_list_110203], **kwargs_110204)

keyword_110206 = _pprint_styles_call_result_110205
kwargs_110207 = {'AvailableConnectorstyles': keyword_110206, 'AvailableArrowstyles': keyword_110200}
# Getting the type of 'docstring' (line 4003)
docstring_110192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4003, 0), 'docstring', False)
# Obtaining the member 'interpd' of a type (line 4003)
interpd_110193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4003, 0), docstring_110192, 'interpd')
# Obtaining the member 'update' of a type (line 4003)
update_110194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4003, 0), interpd_110193, 'update')
# Calling update(args, kwargs) (line 4003)
update_call_result_110208 = invoke(stypy.reporting.localization.Localization(__file__, 4003, 0), update_110194, *[], **kwargs_110207)

# Declaration of the 'FancyArrowPatch' class
# Getting the type of 'Patch' (line 4009)
Patch_110209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4009, 22), 'Patch')

class FancyArrowPatch(Patch_110209, ):
    unicode_110210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4016, (-1)), 'unicode', u'\n    A fancy arrow patch. It draws an arrow using the :class:`ArrowStyle`.\n\n    The head and tail positions are fixed at the specified start and end points\n    of the arrow, but the size and shape (in display coordinates) of the arrow\n    does not change when the axis is moved or zoomed.\n    ')
    
    # Assigning a Name to a Name (line 4017):
    
    # Assigning a Name to a Name (line 4017):

    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 4019, 4, False)
        # Assigning a type to the variable 'self' (line 4020)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4020, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyArrowPatch.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        FancyArrowPatch.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyArrowPatch.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyArrowPatch.stypy__str__.__dict__.__setitem__('stypy_function_name', 'FancyArrowPatch.stypy__str__')
        FancyArrowPatch.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        FancyArrowPatch.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyArrowPatch.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyArrowPatch.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyArrowPatch.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyArrowPatch.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyArrowPatch.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyArrowPatch.stypy__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        
        
        # Getting the type of 'self' (line 4021)
        self_110211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4021, 11), 'self')
        # Obtaining the member '_posA_posB' of a type (line 4021)
        _posA_posB_110212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4021, 11), self_110211, '_posA_posB')
        # Getting the type of 'None' (line 4021)
        None_110213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4021, 34), 'None')
        # Applying the binary operator 'isnot' (line 4021)
        result_is_not_110214 = python_operator(stypy.reporting.localization.Localization(__file__, 4021, 11), 'isnot', _posA_posB_110212, None_110213)
        
        # Testing the type of an if condition (line 4021)
        if_condition_110215 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4021, 8), result_is_not_110214)
        # Assigning a type to the variable 'if_condition_110215' (line 4021)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4021, 8), 'if_condition_110215', if_condition_110215)
        # SSA begins for if statement (line 4021)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Tuple (line 4022):
        
        # Assigning a Subscript to a Name (line 4022):
        
        # Assigning a Subscript to a Name (line 4022):
        
        # Obtaining the type of the subscript
        int_110216 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4022, 12), 'int')
        # Getting the type of 'self' (line 4022)
        self_110217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4022, 33), 'self')
        # Obtaining the member '_posA_posB' of a type (line 4022)
        _posA_posB_110218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4022, 33), self_110217, '_posA_posB')
        # Obtaining the member '__getitem__' of a type (line 4022)
        getitem___110219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4022, 12), _posA_posB_110218, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4022)
        subscript_call_result_110220 = invoke(stypy.reporting.localization.Localization(__file__, 4022, 12), getitem___110219, int_110216)
        
        # Assigning a type to the variable 'tuple_var_assignment_100738' (line 4022)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4022, 12), 'tuple_var_assignment_100738', subscript_call_result_110220)
        
        # Assigning a Subscript to a Name (line 4022):
        
        # Assigning a Subscript to a Name (line 4022):
        
        # Obtaining the type of the subscript
        int_110221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4022, 12), 'int')
        # Getting the type of 'self' (line 4022)
        self_110222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4022, 33), 'self')
        # Obtaining the member '_posA_posB' of a type (line 4022)
        _posA_posB_110223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4022, 33), self_110222, '_posA_posB')
        # Obtaining the member '__getitem__' of a type (line 4022)
        getitem___110224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4022, 12), _posA_posB_110223, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4022)
        subscript_call_result_110225 = invoke(stypy.reporting.localization.Localization(__file__, 4022, 12), getitem___110224, int_110221)
        
        # Assigning a type to the variable 'tuple_var_assignment_100739' (line 4022)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4022, 12), 'tuple_var_assignment_100739', subscript_call_result_110225)
        
        # Assigning a Name to a Tuple (line 4022):
        
        # Assigning a Subscript to a Name (line 4022):
        
        # Obtaining the type of the subscript
        int_110226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4022, 12), 'int')
        # Getting the type of 'tuple_var_assignment_100738' (line 4022)
        tuple_var_assignment_100738_110227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4022, 12), 'tuple_var_assignment_100738')
        # Obtaining the member '__getitem__' of a type (line 4022)
        getitem___110228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4022, 12), tuple_var_assignment_100738_110227, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4022)
        subscript_call_result_110229 = invoke(stypy.reporting.localization.Localization(__file__, 4022, 12), getitem___110228, int_110226)
        
        # Assigning a type to the variable 'tuple_var_assignment_100783' (line 4022)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4022, 12), 'tuple_var_assignment_100783', subscript_call_result_110229)
        
        # Assigning a Subscript to a Name (line 4022):
        
        # Obtaining the type of the subscript
        int_110230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4022, 12), 'int')
        # Getting the type of 'tuple_var_assignment_100738' (line 4022)
        tuple_var_assignment_100738_110231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4022, 12), 'tuple_var_assignment_100738')
        # Obtaining the member '__getitem__' of a type (line 4022)
        getitem___110232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4022, 12), tuple_var_assignment_100738_110231, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4022)
        subscript_call_result_110233 = invoke(stypy.reporting.localization.Localization(__file__, 4022, 12), getitem___110232, int_110230)
        
        # Assigning a type to the variable 'tuple_var_assignment_100784' (line 4022)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4022, 12), 'tuple_var_assignment_100784', subscript_call_result_110233)
        
        # Assigning a Name to a Name (line 4022):
        # Getting the type of 'tuple_var_assignment_100783' (line 4022)
        tuple_var_assignment_100783_110234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4022, 12), 'tuple_var_assignment_100783')
        # Assigning a type to the variable 'x1' (line 4022)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4022, 13), 'x1', tuple_var_assignment_100783_110234)
        
        # Assigning a Name to a Name (line 4022):
        # Getting the type of 'tuple_var_assignment_100784' (line 4022)
        tuple_var_assignment_100784_110235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4022, 12), 'tuple_var_assignment_100784')
        # Assigning a type to the variable 'y1' (line 4022)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4022, 17), 'y1', tuple_var_assignment_100784_110235)
        
        # Assigning a Name to a Tuple (line 4022):
        
        # Assigning a Subscript to a Name (line 4022):
        
        # Obtaining the type of the subscript
        int_110236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4022, 12), 'int')
        # Getting the type of 'tuple_var_assignment_100739' (line 4022)
        tuple_var_assignment_100739_110237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4022, 12), 'tuple_var_assignment_100739')
        # Obtaining the member '__getitem__' of a type (line 4022)
        getitem___110238 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4022, 12), tuple_var_assignment_100739_110237, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4022)
        subscript_call_result_110239 = invoke(stypy.reporting.localization.Localization(__file__, 4022, 12), getitem___110238, int_110236)
        
        # Assigning a type to the variable 'tuple_var_assignment_100785' (line 4022)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4022, 12), 'tuple_var_assignment_100785', subscript_call_result_110239)
        
        # Assigning a Subscript to a Name (line 4022):
        
        # Obtaining the type of the subscript
        int_110240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4022, 12), 'int')
        # Getting the type of 'tuple_var_assignment_100739' (line 4022)
        tuple_var_assignment_100739_110241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4022, 12), 'tuple_var_assignment_100739')
        # Obtaining the member '__getitem__' of a type (line 4022)
        getitem___110242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4022, 12), tuple_var_assignment_100739_110241, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4022)
        subscript_call_result_110243 = invoke(stypy.reporting.localization.Localization(__file__, 4022, 12), getitem___110242, int_110240)
        
        # Assigning a type to the variable 'tuple_var_assignment_100786' (line 4022)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4022, 12), 'tuple_var_assignment_100786', subscript_call_result_110243)
        
        # Assigning a Name to a Name (line 4022):
        # Getting the type of 'tuple_var_assignment_100785' (line 4022)
        tuple_var_assignment_100785_110244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4022, 12), 'tuple_var_assignment_100785')
        # Assigning a type to the variable 'x2' (line 4022)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4022, 23), 'x2', tuple_var_assignment_100785_110244)
        
        # Assigning a Name to a Name (line 4022):
        # Getting the type of 'tuple_var_assignment_100786' (line 4022)
        tuple_var_assignment_100786_110245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4022, 12), 'tuple_var_assignment_100786')
        # Assigning a type to the variable 'y2' (line 4022)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4022, 27), 'y2', tuple_var_assignment_100786_110245)
        # Getting the type of 'self' (line 4023)
        self_110246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4023, 19), 'self')
        # Obtaining the member '__class__' of a type (line 4023)
        class___110247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4023, 19), self_110246, '__class__')
        # Obtaining the member '__name__' of a type (line 4023)
        name___110248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4023, 19), class___110247, '__name__')
        unicode_110249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4024, 18), 'unicode', u'(%g,%g->%g,%g)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 4024)
        tuple_110250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4024, 38), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 4024)
        # Adding element type (line 4024)
        # Getting the type of 'x1' (line 4024)
        x1_110251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4024, 38), 'x1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4024, 38), tuple_110250, x1_110251)
        # Adding element type (line 4024)
        # Getting the type of 'y1' (line 4024)
        y1_110252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4024, 42), 'y1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4024, 38), tuple_110250, y1_110252)
        # Adding element type (line 4024)
        # Getting the type of 'x2' (line 4024)
        x2_110253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4024, 46), 'x2')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4024, 38), tuple_110250, x2_110253)
        # Adding element type (line 4024)
        # Getting the type of 'y2' (line 4024)
        y2_110254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4024, 50), 'y2')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4024, 38), tuple_110250, y2_110254)
        
        # Applying the binary operator '%' (line 4024)
        result_mod_110255 = python_operator(stypy.reporting.localization.Localization(__file__, 4024, 18), '%', unicode_110249, tuple_110250)
        
        # Applying the binary operator '+' (line 4023)
        result_add_110256 = python_operator(stypy.reporting.localization.Localization(__file__, 4023, 19), '+', name___110248, result_mod_110255)
        
        # Assigning a type to the variable 'stypy_return_type' (line 4023)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4023, 12), 'stypy_return_type', result_add_110256)
        # SSA branch for the else part of an if statement (line 4021)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'self' (line 4026)
        self_110257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4026, 19), 'self')
        # Obtaining the member '__class__' of a type (line 4026)
        class___110258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4026, 19), self_110257, '__class__')
        # Obtaining the member '__name__' of a type (line 4026)
        name___110259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4026, 19), class___110258, '__name__')
        unicode_110260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4027, 18), 'unicode', u'(%s)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 4027)
        tuple_110261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4027, 28), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 4027)
        # Adding element type (line 4027)
        
        # Call to str(...): (line 4027)
        # Processing the call arguments (line 4027)
        # Getting the type of 'self' (line 4027)
        self_110263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4027, 32), 'self', False)
        # Obtaining the member '_path_original' of a type (line 4027)
        _path_original_110264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4027, 32), self_110263, '_path_original')
        # Processing the call keyword arguments (line 4027)
        kwargs_110265 = {}
        # Getting the type of 'str' (line 4027)
        str_110262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4027, 28), 'str', False)
        # Calling str(args, kwargs) (line 4027)
        str_call_result_110266 = invoke(stypy.reporting.localization.Localization(__file__, 4027, 28), str_110262, *[_path_original_110264], **kwargs_110265)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4027, 28), tuple_110261, str_call_result_110266)
        
        # Applying the binary operator '%' (line 4027)
        result_mod_110267 = python_operator(stypy.reporting.localization.Localization(__file__, 4027, 18), '%', unicode_110260, tuple_110261)
        
        # Applying the binary operator '+' (line 4026)
        result_add_110268 = python_operator(stypy.reporting.localization.Localization(__file__, 4026, 19), '+', name___110259, result_mod_110267)
        
        # Assigning a type to the variable 'stypy_return_type' (line 4026)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4026, 12), 'stypy_return_type', result_add_110268)
        # SSA join for if statement (line 4021)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 4019)
        stypy_return_type_110269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4019, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_110269)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_110269


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 4030)
        None_110270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4030, 28), 'None')
        # Getting the type of 'None' (line 4030)
        None_110271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4030, 39), 'None')
        # Getting the type of 'None' (line 4031)
        None_110272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4031, 22), 'None')
        unicode_110273 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4032, 28), 'unicode', u'simple')
        # Getting the type of 'None' (line 4033)
        None_110274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4033, 34), 'None')
        unicode_110275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4034, 33), 'unicode', u'arc3')
        # Getting the type of 'None' (line 4035)
        None_110276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4035, 27), 'None')
        # Getting the type of 'None' (line 4036)
        None_110277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4036, 24), 'None')
        # Getting the type of 'None' (line 4037)
        None_110278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4037, 24), 'None')
        int_110279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4038, 25), 'int')
        int_110280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4039, 25), 'int')
        int_110281 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4040, 32), 'int')
        # Getting the type of 'None' (line 4041)
        None_110282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4041, 33), 'None')
        int_110283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4042, 25), 'int')
        defaults = [None_110270, None_110271, None_110272, unicode_110273, None_110274, unicode_110275, None_110276, None_110277, None_110278, int_110279, int_110280, int_110281, None_110282, int_110283]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 4029, 4, False)
        # Assigning a type to the variable 'self' (line 4030)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4030, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyArrowPatch.__init__', ['posA', 'posB', 'path', 'arrowstyle', 'arrow_transmuter', 'connectionstyle', 'connector', 'patchA', 'patchB', 'shrinkA', 'shrinkB', 'mutation_scale', 'mutation_aspect', 'dpi_cor'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['posA', 'posB', 'path', 'arrowstyle', 'arrow_transmuter', 'connectionstyle', 'connector', 'patchA', 'patchB', 'shrinkA', 'shrinkB', 'mutation_scale', 'mutation_aspect', 'dpi_cor'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_110284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4114, (-1)), 'unicode', u"\n        If *posA* and *posB* are given, a path connecting two points is\n        created according to *connectionstyle*. The path will be\n        clipped with *patchA* and *patchB* and further shrunken by\n        *shrinkA* and *shrinkB*. An arrow is drawn along this\n        resulting path using the *arrowstyle* parameter.\n\n        Alternatively if *path* is provided, an arrow is drawn along this path\n        and *patchA*, *patchB*, *shrinkA*, and *shrinkB* are ignored.\n\n        Parameters\n        ----------\n\n        posA, posB : None, tuple, optional (default: None)\n            (x,y) coordinates of arrow tail and arrow head respectively.\n\n        path : None, Path (default: None)\n            :class:`matplotlib.path.Path` instance. If provided, an arrow is\n            drawn along this path and *patchA*, *patchB*, *shrinkA*, and\n            *shrinkB* are ignored.\n\n        arrowstyle : str or ArrowStyle, optional (default: 'simple')\n            Describes how the fancy arrow will be\n            drawn. It can be string of the available arrowstyle names,\n            with optional comma-separated attributes, or an\n            :class:`ArrowStyle` instance. The optional attributes are meant to\n            be scaled with the *mutation_scale*. The following arrow styles are\n            available:\n\n            %(AvailableArrowstyles)s\n\n        arrow_transmuter :\n            Ignored\n\n        connectionstyle : str, ConnectionStyle, or None, optional\n        (default: 'arc3')\n            Describes how *posA* and *posB* are connected. It can be an\n            instance of the :class:`ConnectionStyle` class or a string of the\n            connectionstyle name, with optional comma-separated attributes. The\n            following connection styles are available:\n\n            %(AvailableConnectorstyles)s\n\n        connector :\n            Ignored\n\n        patchA, patchB : None, Patch, optional (default: None)\n            Head and tail patch respectively. :class:`matplotlib.patch.Patch`\n            instance.\n\n        shrinkA, shrinkB : scalar, optional (default: 2)\n            Shrinking factor of the tail and head of the arrow respectively\n\n        mutation_scale : scalar, optional (default: 1)\n            Value with which attributes of *arrowstyle* (e.g., *head_length*)\n            will be scaled.\n\n        mutation_aspect : None, scalar, optional (default: None)\n            The height of the rectangle will be squeezed by this value before\n            the mutation and the mutated box will be stretched by the inverse\n            of it.\n\n        dpi_cor : scalar, optional (default: 1)\n            dpi_cor is currently used for linewidth-related things and shrink\n            factor. Mutation scale is affected by this.\n\n        Notes\n        -----\n        Valid kwargs are:\n        %(Patch)s\n        ")
        
        # Call to __init__(...): (line 4115)
        # Processing the call arguments (line 4115)
        # Getting the type of 'self' (line 4115)
        self_110287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4115, 23), 'self', False)
        # Processing the call keyword arguments (line 4115)
        # Getting the type of 'kwargs' (line 4115)
        kwargs_110288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4115, 31), 'kwargs', False)
        kwargs_110289 = {'kwargs_110288': kwargs_110288}
        # Getting the type of 'Patch' (line 4115)
        Patch_110285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4115, 8), 'Patch', False)
        # Obtaining the member '__init__' of a type (line 4115)
        init___110286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4115, 8), Patch_110285, '__init__')
        # Calling __init__(args, kwargs) (line 4115)
        init___call_result_110290 = invoke(stypy.reporting.localization.Localization(__file__, 4115, 8), init___110286, *[self_110287], **kwargs_110289)
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'posA' (line 4117)
        posA_110291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4117, 11), 'posA')
        # Getting the type of 'None' (line 4117)
        None_110292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4117, 23), 'None')
        # Applying the binary operator 'isnot' (line 4117)
        result_is_not_110293 = python_operator(stypy.reporting.localization.Localization(__file__, 4117, 11), 'isnot', posA_110291, None_110292)
        
        
        # Getting the type of 'posB' (line 4117)
        posB_110294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4117, 32), 'posB')
        # Getting the type of 'None' (line 4117)
        None_110295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4117, 44), 'None')
        # Applying the binary operator 'isnot' (line 4117)
        result_is_not_110296 = python_operator(stypy.reporting.localization.Localization(__file__, 4117, 32), 'isnot', posB_110294, None_110295)
        
        # Applying the binary operator 'and' (line 4117)
        result_and_keyword_110297 = python_operator(stypy.reporting.localization.Localization(__file__, 4117, 11), 'and', result_is_not_110293, result_is_not_110296)
        
        # Getting the type of 'path' (line 4117)
        path_110298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4117, 53), 'path')
        # Getting the type of 'None' (line 4117)
        None_110299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4117, 61), 'None')
        # Applying the binary operator 'is' (line 4117)
        result_is__110300 = python_operator(stypy.reporting.localization.Localization(__file__, 4117, 53), 'is', path_110298, None_110299)
        
        # Applying the binary operator 'and' (line 4117)
        result_and_keyword_110301 = python_operator(stypy.reporting.localization.Localization(__file__, 4117, 11), 'and', result_and_keyword_110297, result_is__110300)
        
        # Testing the type of an if condition (line 4117)
        if_condition_110302 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4117, 8), result_and_keyword_110301)
        # Assigning a type to the variable 'if_condition_110302' (line 4117)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4117, 8), 'if_condition_110302', if_condition_110302)
        # SSA begins for if statement (line 4117)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a List to a Attribute (line 4118):
        
        # Assigning a List to a Attribute (line 4118):
        
        # Assigning a List to a Attribute (line 4118):
        
        # Obtaining an instance of the builtin type 'list' (line 4118)
        list_110303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4118, 30), 'list')
        # Adding type elements to the builtin type 'list' instance (line 4118)
        # Adding element type (line 4118)
        # Getting the type of 'posA' (line 4118)
        posA_110304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4118, 31), 'posA')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4118, 30), list_110303, posA_110304)
        # Adding element type (line 4118)
        # Getting the type of 'posB' (line 4118)
        posB_110305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4118, 37), 'posB')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4118, 30), list_110303, posB_110305)
        
        # Getting the type of 'self' (line 4118)
        self_110306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4118, 12), 'self')
        # Setting the type of the member '_posA_posB' of a type (line 4118)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4118, 12), self_110306, '_posA_posB', list_110303)
        
        # Type idiom detected: calculating its left and rigth part (line 4120)
        # Getting the type of 'connectionstyle' (line 4120)
        connectionstyle_110307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4120, 15), 'connectionstyle')
        # Getting the type of 'None' (line 4120)
        None_110308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4120, 34), 'None')
        
        (may_be_110309, more_types_in_union_110310) = may_be_none(connectionstyle_110307, None_110308)

        if may_be_110309:

            if more_types_in_union_110310:
                # Runtime conditional SSA (line 4120)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Str to a Name (line 4121):
            
            # Assigning a Str to a Name (line 4121):
            
            # Assigning a Str to a Name (line 4121):
            unicode_110311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4121, 34), 'unicode', u'arc3')
            # Assigning a type to the variable 'connectionstyle' (line 4121)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4121, 16), 'connectionstyle', unicode_110311)

            if more_types_in_union_110310:
                # SSA join for if statement (line 4120)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to set_connectionstyle(...): (line 4122)
        # Processing the call arguments (line 4122)
        # Getting the type of 'connectionstyle' (line 4122)
        connectionstyle_110314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4122, 37), 'connectionstyle', False)
        # Processing the call keyword arguments (line 4122)
        kwargs_110315 = {}
        # Getting the type of 'self' (line 4122)
        self_110312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4122, 12), 'self', False)
        # Obtaining the member 'set_connectionstyle' of a type (line 4122)
        set_connectionstyle_110313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4122, 12), self_110312, 'set_connectionstyle')
        # Calling set_connectionstyle(args, kwargs) (line 4122)
        set_connectionstyle_call_result_110316 = invoke(stypy.reporting.localization.Localization(__file__, 4122, 12), set_connectionstyle_110313, *[connectionstyle_110314], **kwargs_110315)
        
        # SSA branch for the else part of an if statement (line 4117)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'posA' (line 4124)
        posA_110317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4124, 13), 'posA')
        # Getting the type of 'None' (line 4124)
        None_110318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4124, 21), 'None')
        # Applying the binary operator 'is' (line 4124)
        result_is__110319 = python_operator(stypy.reporting.localization.Localization(__file__, 4124, 13), 'is', posA_110317, None_110318)
        
        
        # Getting the type of 'posB' (line 4124)
        posB_110320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4124, 30), 'posB')
        # Getting the type of 'None' (line 4124)
        None_110321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4124, 38), 'None')
        # Applying the binary operator 'is' (line 4124)
        result_is__110322 = python_operator(stypy.reporting.localization.Localization(__file__, 4124, 30), 'is', posB_110320, None_110321)
        
        # Applying the binary operator 'and' (line 4124)
        result_and_keyword_110323 = python_operator(stypy.reporting.localization.Localization(__file__, 4124, 13), 'and', result_is__110319, result_is__110322)
        
        # Getting the type of 'path' (line 4124)
        path_110324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4124, 47), 'path')
        # Getting the type of 'None' (line 4124)
        None_110325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4124, 59), 'None')
        # Applying the binary operator 'isnot' (line 4124)
        result_is_not_110326 = python_operator(stypy.reporting.localization.Localization(__file__, 4124, 47), 'isnot', path_110324, None_110325)
        
        # Applying the binary operator 'and' (line 4124)
        result_and_keyword_110327 = python_operator(stypy.reporting.localization.Localization(__file__, 4124, 13), 'and', result_and_keyword_110323, result_is_not_110326)
        
        # Testing the type of an if condition (line 4124)
        if_condition_110328 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4124, 13), result_and_keyword_110327)
        # Assigning a type to the variable 'if_condition_110328' (line 4124)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4124, 13), 'if_condition_110328', if_condition_110328)
        # SSA begins for if statement (line 4124)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 4125):
        
        # Assigning a Name to a Attribute (line 4125):
        
        # Assigning a Name to a Attribute (line 4125):
        # Getting the type of 'None' (line 4125)
        None_110329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4125, 30), 'None')
        # Getting the type of 'self' (line 4125)
        self_110330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4125, 12), 'self')
        # Setting the type of the member '_posA_posB' of a type (line 4125)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4125, 12), self_110330, '_posA_posB', None_110329)
        
        # Assigning a Name to a Attribute (line 4126):
        
        # Assigning a Name to a Attribute (line 4126):
        
        # Assigning a Name to a Attribute (line 4126):
        # Getting the type of 'None' (line 4126)
        None_110331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4126, 30), 'None')
        # Getting the type of 'self' (line 4126)
        self_110332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4126, 12), 'self')
        # Setting the type of the member '_connetors' of a type (line 4126)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4126, 12), self_110332, '_connetors', None_110331)
        # SSA branch for the else part of an if statement (line 4124)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 4128)
        # Processing the call arguments (line 4128)
        unicode_110334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4128, 29), 'unicode', u'either posA and posB, or path need to provided')
        # Processing the call keyword arguments (line 4128)
        kwargs_110335 = {}
        # Getting the type of 'ValueError' (line 4128)
        ValueError_110333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4128, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 4128)
        ValueError_call_result_110336 = invoke(stypy.reporting.localization.Localization(__file__, 4128, 18), ValueError_110333, *[unicode_110334], **kwargs_110335)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 4128, 12), ValueError_call_result_110336, 'raise parameter', BaseException)
        # SSA join for if statement (line 4124)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 4117)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 4130):
        
        # Assigning a Name to a Attribute (line 4130):
        
        # Assigning a Name to a Attribute (line 4130):
        # Getting the type of 'patchA' (line 4130)
        patchA_110337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4130, 22), 'patchA')
        # Getting the type of 'self' (line 4130)
        self_110338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4130, 8), 'self')
        # Setting the type of the member 'patchA' of a type (line 4130)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4130, 8), self_110338, 'patchA', patchA_110337)
        
        # Assigning a Name to a Attribute (line 4131):
        
        # Assigning a Name to a Attribute (line 4131):
        
        # Assigning a Name to a Attribute (line 4131):
        # Getting the type of 'patchB' (line 4131)
        patchB_110339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4131, 22), 'patchB')
        # Getting the type of 'self' (line 4131)
        self_110340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4131, 8), 'self')
        # Setting the type of the member 'patchB' of a type (line 4131)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4131, 8), self_110340, 'patchB', patchB_110339)
        
        # Assigning a Name to a Attribute (line 4132):
        
        # Assigning a Name to a Attribute (line 4132):
        
        # Assigning a Name to a Attribute (line 4132):
        # Getting the type of 'shrinkA' (line 4132)
        shrinkA_110341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4132, 23), 'shrinkA')
        # Getting the type of 'self' (line 4132)
        self_110342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4132, 8), 'self')
        # Setting the type of the member 'shrinkA' of a type (line 4132)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4132, 8), self_110342, 'shrinkA', shrinkA_110341)
        
        # Assigning a Name to a Attribute (line 4133):
        
        # Assigning a Name to a Attribute (line 4133):
        
        # Assigning a Name to a Attribute (line 4133):
        # Getting the type of 'shrinkB' (line 4133)
        shrinkB_110343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4133, 23), 'shrinkB')
        # Getting the type of 'self' (line 4133)
        self_110344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4133, 8), 'self')
        # Setting the type of the member 'shrinkB' of a type (line 4133)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4133, 8), self_110344, 'shrinkB', shrinkB_110343)
        
        # Assigning a Name to a Attribute (line 4135):
        
        # Assigning a Name to a Attribute (line 4135):
        
        # Assigning a Name to a Attribute (line 4135):
        # Getting the type of 'path' (line 4135)
        path_110345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4135, 30), 'path')
        # Getting the type of 'self' (line 4135)
        self_110346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4135, 8), 'self')
        # Setting the type of the member '_path_original' of a type (line 4135)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4135, 8), self_110346, '_path_original', path_110345)
        
        # Call to set_arrowstyle(...): (line 4137)
        # Processing the call arguments (line 4137)
        # Getting the type of 'arrowstyle' (line 4137)
        arrowstyle_110349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4137, 28), 'arrowstyle', False)
        # Processing the call keyword arguments (line 4137)
        kwargs_110350 = {}
        # Getting the type of 'self' (line 4137)
        self_110347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4137, 8), 'self', False)
        # Obtaining the member 'set_arrowstyle' of a type (line 4137)
        set_arrowstyle_110348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4137, 8), self_110347, 'set_arrowstyle')
        # Calling set_arrowstyle(args, kwargs) (line 4137)
        set_arrowstyle_call_result_110351 = invoke(stypy.reporting.localization.Localization(__file__, 4137, 8), set_arrowstyle_110348, *[arrowstyle_110349], **kwargs_110350)
        
        
        # Assigning a Name to a Attribute (line 4139):
        
        # Assigning a Name to a Attribute (line 4139):
        
        # Assigning a Name to a Attribute (line 4139):
        # Getting the type of 'mutation_scale' (line 4139)
        mutation_scale_110352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4139, 31), 'mutation_scale')
        # Getting the type of 'self' (line 4139)
        self_110353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4139, 8), 'self')
        # Setting the type of the member '_mutation_scale' of a type (line 4139)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4139, 8), self_110353, '_mutation_scale', mutation_scale_110352)
        
        # Assigning a Name to a Attribute (line 4140):
        
        # Assigning a Name to a Attribute (line 4140):
        
        # Assigning a Name to a Attribute (line 4140):
        # Getting the type of 'mutation_aspect' (line 4140)
        mutation_aspect_110354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4140, 32), 'mutation_aspect')
        # Getting the type of 'self' (line 4140)
        self_110355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4140, 8), 'self')
        # Setting the type of the member '_mutation_aspect' of a type (line 4140)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4140, 8), self_110355, '_mutation_aspect', mutation_aspect_110354)
        
        # Call to set_dpi_cor(...): (line 4142)
        # Processing the call arguments (line 4142)
        # Getting the type of 'dpi_cor' (line 4142)
        dpi_cor_110358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4142, 25), 'dpi_cor', False)
        # Processing the call keyword arguments (line 4142)
        kwargs_110359 = {}
        # Getting the type of 'self' (line 4142)
        self_110356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4142, 8), 'self', False)
        # Obtaining the member 'set_dpi_cor' of a type (line 4142)
        set_dpi_cor_110357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4142, 8), self_110356, 'set_dpi_cor')
        # Calling set_dpi_cor(args, kwargs) (line 4142)
        set_dpi_cor_call_result_110360 = invoke(stypy.reporting.localization.Localization(__file__, 4142, 8), set_dpi_cor_110357, *[dpi_cor_110358], **kwargs_110359)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def set_dpi_cor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_dpi_cor'
        module_type_store = module_type_store.open_function_context('set_dpi_cor', 4144, 4, False)
        # Assigning a type to the variable 'self' (line 4145)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4145, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyArrowPatch.set_dpi_cor.__dict__.__setitem__('stypy_localization', localization)
        FancyArrowPatch.set_dpi_cor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyArrowPatch.set_dpi_cor.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyArrowPatch.set_dpi_cor.__dict__.__setitem__('stypy_function_name', 'FancyArrowPatch.set_dpi_cor')
        FancyArrowPatch.set_dpi_cor.__dict__.__setitem__('stypy_param_names_list', ['dpi_cor'])
        FancyArrowPatch.set_dpi_cor.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyArrowPatch.set_dpi_cor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyArrowPatch.set_dpi_cor.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyArrowPatch.set_dpi_cor.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyArrowPatch.set_dpi_cor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyArrowPatch.set_dpi_cor.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyArrowPatch.set_dpi_cor', ['dpi_cor'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_dpi_cor', localization, ['dpi_cor'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_dpi_cor(...)' code ##################

        unicode_110361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4152, (-1)), 'unicode', u'\n        dpi_cor is currently used for linewidth-related things and\n        shrink factor. Mutation scale is affected by this.\n\n        Parameters\n        ----------\n        dpi_cor : scalar\n        ')
        
        # Assigning a Name to a Attribute (line 4153):
        
        # Assigning a Name to a Attribute (line 4153):
        
        # Assigning a Name to a Attribute (line 4153):
        # Getting the type of 'dpi_cor' (line 4153)
        dpi_cor_110362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4153, 24), 'dpi_cor')
        # Getting the type of 'self' (line 4153)
        self_110363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4153, 8), 'self')
        # Setting the type of the member '_dpi_cor' of a type (line 4153)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4153, 8), self_110363, '_dpi_cor', dpi_cor_110362)
        
        # Assigning a Name to a Attribute (line 4154):
        
        # Assigning a Name to a Attribute (line 4154):
        
        # Assigning a Name to a Attribute (line 4154):
        # Getting the type of 'True' (line 4154)
        True_110364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4154, 21), 'True')
        # Getting the type of 'self' (line 4154)
        self_110365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4154, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 4154)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4154, 8), self_110365, 'stale', True_110364)
        
        # ################# End of 'set_dpi_cor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_dpi_cor' in the type store
        # Getting the type of 'stypy_return_type' (line 4144)
        stypy_return_type_110366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4144, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_110366)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_dpi_cor'
        return stypy_return_type_110366


    @norecursion
    def get_dpi_cor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_dpi_cor'
        module_type_store = module_type_store.open_function_context('get_dpi_cor', 4156, 4, False)
        # Assigning a type to the variable 'self' (line 4157)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4157, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyArrowPatch.get_dpi_cor.__dict__.__setitem__('stypy_localization', localization)
        FancyArrowPatch.get_dpi_cor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyArrowPatch.get_dpi_cor.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyArrowPatch.get_dpi_cor.__dict__.__setitem__('stypy_function_name', 'FancyArrowPatch.get_dpi_cor')
        FancyArrowPatch.get_dpi_cor.__dict__.__setitem__('stypy_param_names_list', [])
        FancyArrowPatch.get_dpi_cor.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyArrowPatch.get_dpi_cor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyArrowPatch.get_dpi_cor.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyArrowPatch.get_dpi_cor.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyArrowPatch.get_dpi_cor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyArrowPatch.get_dpi_cor.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyArrowPatch.get_dpi_cor', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_dpi_cor', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_dpi_cor(...)' code ##################

        unicode_110367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4164, (-1)), 'unicode', u'\n        dpi_cor is currently used for linewidth-related things and\n        shrink factor. Mutation scale is affected by this.\n\n        Returns\n        -------\n        dpi_cor : scalar\n        ')
        # Getting the type of 'self' (line 4165)
        self_110368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4165, 15), 'self')
        # Obtaining the member '_dpi_cor' of a type (line 4165)
        _dpi_cor_110369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4165, 15), self_110368, '_dpi_cor')
        # Assigning a type to the variable 'stypy_return_type' (line 4165)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4165, 8), 'stypy_return_type', _dpi_cor_110369)
        
        # ################# End of 'get_dpi_cor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_dpi_cor' in the type store
        # Getting the type of 'stypy_return_type' (line 4156)
        stypy_return_type_110370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4156, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_110370)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_dpi_cor'
        return stypy_return_type_110370


    @norecursion
    def set_positions(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_positions'
        module_type_store = module_type_store.open_function_context('set_positions', 4167, 4, False)
        # Assigning a type to the variable 'self' (line 4168)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4168, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyArrowPatch.set_positions.__dict__.__setitem__('stypy_localization', localization)
        FancyArrowPatch.set_positions.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyArrowPatch.set_positions.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyArrowPatch.set_positions.__dict__.__setitem__('stypy_function_name', 'FancyArrowPatch.set_positions')
        FancyArrowPatch.set_positions.__dict__.__setitem__('stypy_param_names_list', ['posA', 'posB'])
        FancyArrowPatch.set_positions.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyArrowPatch.set_positions.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyArrowPatch.set_positions.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyArrowPatch.set_positions.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyArrowPatch.set_positions.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyArrowPatch.set_positions.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyArrowPatch.set_positions', ['posA', 'posB'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_positions', localization, ['posA', 'posB'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_positions(...)' code ##################

        unicode_110371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4176, (-1)), 'unicode', u'\n        Set the begin and end positions of the connecting path.\n\n        Parameters\n        ----------\n        posA, posB : None, tuple\n            (x,y) coordinates of arrow tail and arrow head respectively. If\n            `None` use current value.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 4177)
        # Getting the type of 'posA' (line 4177)
        posA_110372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4177, 8), 'posA')
        # Getting the type of 'None' (line 4177)
        None_110373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4177, 23), 'None')
        
        (may_be_110374, more_types_in_union_110375) = may_not_be_none(posA_110372, None_110373)

        if may_be_110374:

            if more_types_in_union_110375:
                # Runtime conditional SSA (line 4177)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Subscript (line 4178):
            
            # Assigning a Name to a Subscript (line 4178):
            
            # Assigning a Name to a Subscript (line 4178):
            # Getting the type of 'posA' (line 4178)
            posA_110376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4178, 33), 'posA')
            # Getting the type of 'self' (line 4178)
            self_110377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4178, 12), 'self')
            # Obtaining the member '_posA_posB' of a type (line 4178)
            _posA_posB_110378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4178, 12), self_110377, '_posA_posB')
            int_110379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4178, 28), 'int')
            # Storing an element on a container (line 4178)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4178, 12), _posA_posB_110378, (int_110379, posA_110376))

            if more_types_in_union_110375:
                # SSA join for if statement (line 4177)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 4179)
        # Getting the type of 'posB' (line 4179)
        posB_110380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4179, 8), 'posB')
        # Getting the type of 'None' (line 4179)
        None_110381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4179, 23), 'None')
        
        (may_be_110382, more_types_in_union_110383) = may_not_be_none(posB_110380, None_110381)

        if may_be_110382:

            if more_types_in_union_110383:
                # Runtime conditional SSA (line 4179)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Subscript (line 4180):
            
            # Assigning a Name to a Subscript (line 4180):
            
            # Assigning a Name to a Subscript (line 4180):
            # Getting the type of 'posB' (line 4180)
            posB_110384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4180, 33), 'posB')
            # Getting the type of 'self' (line 4180)
            self_110385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4180, 12), 'self')
            # Obtaining the member '_posA_posB' of a type (line 4180)
            _posA_posB_110386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4180, 12), self_110385, '_posA_posB')
            int_110387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4180, 28), 'int')
            # Storing an element on a container (line 4180)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4180, 12), _posA_posB_110386, (int_110387, posB_110384))

            if more_types_in_union_110383:
                # SSA join for if statement (line 4179)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 4181):
        
        # Assigning a Name to a Attribute (line 4181):
        
        # Assigning a Name to a Attribute (line 4181):
        # Getting the type of 'True' (line 4181)
        True_110388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4181, 21), 'True')
        # Getting the type of 'self' (line 4181)
        self_110389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4181, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 4181)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4181, 8), self_110389, 'stale', True_110388)
        
        # ################# End of 'set_positions(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_positions' in the type store
        # Getting the type of 'stypy_return_type' (line 4167)
        stypy_return_type_110390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4167, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_110390)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_positions'
        return stypy_return_type_110390


    @norecursion
    def set_patchA(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_patchA'
        module_type_store = module_type_store.open_function_context('set_patchA', 4183, 4, False)
        # Assigning a type to the variable 'self' (line 4184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4184, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyArrowPatch.set_patchA.__dict__.__setitem__('stypy_localization', localization)
        FancyArrowPatch.set_patchA.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyArrowPatch.set_patchA.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyArrowPatch.set_patchA.__dict__.__setitem__('stypy_function_name', 'FancyArrowPatch.set_patchA')
        FancyArrowPatch.set_patchA.__dict__.__setitem__('stypy_param_names_list', ['patchA'])
        FancyArrowPatch.set_patchA.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyArrowPatch.set_patchA.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyArrowPatch.set_patchA.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyArrowPatch.set_patchA.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyArrowPatch.set_patchA.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyArrowPatch.set_patchA.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyArrowPatch.set_patchA', ['patchA'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_patchA', localization, ['patchA'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_patchA(...)' code ##################

        unicode_110391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4191, (-1)), 'unicode', u'\n        Set the tail patch.\n\n        Parameters\n        ----------\n        patchA : Patch\n            :class:`matplotlib.patch.Patch` instance.\n        ')
        
        # Assigning a Name to a Attribute (line 4192):
        
        # Assigning a Name to a Attribute (line 4192):
        
        # Assigning a Name to a Attribute (line 4192):
        # Getting the type of 'patchA' (line 4192)
        patchA_110392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4192, 22), 'patchA')
        # Getting the type of 'self' (line 4192)
        self_110393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4192, 8), 'self')
        # Setting the type of the member 'patchA' of a type (line 4192)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4192, 8), self_110393, 'patchA', patchA_110392)
        
        # Assigning a Name to a Attribute (line 4193):
        
        # Assigning a Name to a Attribute (line 4193):
        
        # Assigning a Name to a Attribute (line 4193):
        # Getting the type of 'True' (line 4193)
        True_110394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4193, 21), 'True')
        # Getting the type of 'self' (line 4193)
        self_110395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4193, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 4193)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4193, 8), self_110395, 'stale', True_110394)
        
        # ################# End of 'set_patchA(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_patchA' in the type store
        # Getting the type of 'stypy_return_type' (line 4183)
        stypy_return_type_110396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4183, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_110396)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_patchA'
        return stypy_return_type_110396


    @norecursion
    def set_patchB(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_patchB'
        module_type_store = module_type_store.open_function_context('set_patchB', 4195, 4, False)
        # Assigning a type to the variable 'self' (line 4196)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4196, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyArrowPatch.set_patchB.__dict__.__setitem__('stypy_localization', localization)
        FancyArrowPatch.set_patchB.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyArrowPatch.set_patchB.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyArrowPatch.set_patchB.__dict__.__setitem__('stypy_function_name', 'FancyArrowPatch.set_patchB')
        FancyArrowPatch.set_patchB.__dict__.__setitem__('stypy_param_names_list', ['patchB'])
        FancyArrowPatch.set_patchB.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyArrowPatch.set_patchB.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyArrowPatch.set_patchB.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyArrowPatch.set_patchB.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyArrowPatch.set_patchB.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyArrowPatch.set_patchB.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyArrowPatch.set_patchB', ['patchB'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_patchB', localization, ['patchB'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_patchB(...)' code ##################

        unicode_110397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4203, (-1)), 'unicode', u'\n        Set the head patch.\n\n        Parameters\n        ----------\n        patchB : Patch\n            :class:`matplotlib.patch.Patch` instance.\n        ')
        
        # Assigning a Name to a Attribute (line 4204):
        
        # Assigning a Name to a Attribute (line 4204):
        
        # Assigning a Name to a Attribute (line 4204):
        # Getting the type of 'patchB' (line 4204)
        patchB_110398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4204, 22), 'patchB')
        # Getting the type of 'self' (line 4204)
        self_110399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4204, 8), 'self')
        # Setting the type of the member 'patchB' of a type (line 4204)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4204, 8), self_110399, 'patchB', patchB_110398)
        
        # Assigning a Name to a Attribute (line 4205):
        
        # Assigning a Name to a Attribute (line 4205):
        
        # Assigning a Name to a Attribute (line 4205):
        # Getting the type of 'True' (line 4205)
        True_110400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4205, 21), 'True')
        # Getting the type of 'self' (line 4205)
        self_110401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4205, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 4205)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4205, 8), self_110401, 'stale', True_110400)
        
        # ################# End of 'set_patchB(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_patchB' in the type store
        # Getting the type of 'stypy_return_type' (line 4195)
        stypy_return_type_110402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4195, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_110402)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_patchB'
        return stypy_return_type_110402


    @norecursion
    def set_connectionstyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_connectionstyle'
        module_type_store = module_type_store.open_function_context('set_connectionstyle', 4207, 4, False)
        # Assigning a type to the variable 'self' (line 4208)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4208, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyArrowPatch.set_connectionstyle.__dict__.__setitem__('stypy_localization', localization)
        FancyArrowPatch.set_connectionstyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyArrowPatch.set_connectionstyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyArrowPatch.set_connectionstyle.__dict__.__setitem__('stypy_function_name', 'FancyArrowPatch.set_connectionstyle')
        FancyArrowPatch.set_connectionstyle.__dict__.__setitem__('stypy_param_names_list', ['connectionstyle'])
        FancyArrowPatch.set_connectionstyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyArrowPatch.set_connectionstyle.__dict__.__setitem__('stypy_kwargs_param_name', 'kw')
        FancyArrowPatch.set_connectionstyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyArrowPatch.set_connectionstyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyArrowPatch.set_connectionstyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyArrowPatch.set_connectionstyle.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyArrowPatch.set_connectionstyle', ['connectionstyle'], None, 'kw', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_connectionstyle', localization, ['connectionstyle'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_connectionstyle(...)' code ##################

        unicode_110403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4225, (-1)), 'unicode', u'\n        Set the connection style. Old attributes are forgotten.\n\n        Parameters\n        ----------\n        connectionstyle : None, ConnectionStyle instance, or string\n            Can be a string with connectionstyle name with\n            optional comma-separated attributes, e.g.::\n\n                set_connectionstyle("arc,angleA=0,armA=30,rad=10")\n\n            Alternatively, the attributes can be provided as keywords, e.g.::\n\n                set_connectionstyle("arc", angleA=0,armA=30,rad=10)\n\n            Without any arguments (or with ``connectionstyle=None``), return\n            available styles as a list of strings.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 4227)
        # Getting the type of 'connectionstyle' (line 4227)
        connectionstyle_110404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4227, 11), 'connectionstyle')
        # Getting the type of 'None' (line 4227)
        None_110405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4227, 30), 'None')
        
        (may_be_110406, more_types_in_union_110407) = may_be_none(connectionstyle_110404, None_110405)

        if may_be_110406:

            if more_types_in_union_110407:
                # Runtime conditional SSA (line 4227)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to pprint_styles(...): (line 4228)
            # Processing the call keyword arguments (line 4228)
            kwargs_110410 = {}
            # Getting the type of 'ConnectionStyle' (line 4228)
            ConnectionStyle_110408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4228, 19), 'ConnectionStyle', False)
            # Obtaining the member 'pprint_styles' of a type (line 4228)
            pprint_styles_110409 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4228, 19), ConnectionStyle_110408, 'pprint_styles')
            # Calling pprint_styles(args, kwargs) (line 4228)
            pprint_styles_call_result_110411 = invoke(stypy.reporting.localization.Localization(__file__, 4228, 19), pprint_styles_110409, *[], **kwargs_110410)
            
            # Assigning a type to the variable 'stypy_return_type' (line 4228)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4228, 12), 'stypy_return_type', pprint_styles_call_result_110411)

            if more_types_in_union_110407:
                # SSA join for if statement (line 4227)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Evaluating a boolean operation
        
        # Call to isinstance(...): (line 4230)
        # Processing the call arguments (line 4230)
        # Getting the type of 'connectionstyle' (line 4230)
        connectionstyle_110413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4230, 23), 'connectionstyle', False)
        # Getting the type of 'ConnectionStyle' (line 4230)
        ConnectionStyle_110414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4230, 40), 'ConnectionStyle', False)
        # Obtaining the member '_Base' of a type (line 4230)
        _Base_110415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4230, 40), ConnectionStyle_110414, '_Base')
        # Processing the call keyword arguments (line 4230)
        kwargs_110416 = {}
        # Getting the type of 'isinstance' (line 4230)
        isinstance_110412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4230, 12), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 4230)
        isinstance_call_result_110417 = invoke(stypy.reporting.localization.Localization(__file__, 4230, 12), isinstance_110412, *[connectionstyle_110413, _Base_110415], **kwargs_110416)
        
        
        # Call to callable(...): (line 4231)
        # Processing the call arguments (line 4231)
        # Getting the type of 'connectionstyle' (line 4231)
        connectionstyle_110419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4231, 25), 'connectionstyle', False)
        # Processing the call keyword arguments (line 4231)
        kwargs_110420 = {}
        # Getting the type of 'callable' (line 4231)
        callable_110418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4231, 16), 'callable', False)
        # Calling callable(args, kwargs) (line 4231)
        callable_call_result_110421 = invoke(stypy.reporting.localization.Localization(__file__, 4231, 16), callable_110418, *[connectionstyle_110419], **kwargs_110420)
        
        # Applying the binary operator 'or' (line 4230)
        result_or_keyword_110422 = python_operator(stypy.reporting.localization.Localization(__file__, 4230, 12), 'or', isinstance_call_result_110417, callable_call_result_110421)
        
        # Testing the type of an if condition (line 4230)
        if_condition_110423 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4230, 8), result_or_keyword_110422)
        # Assigning a type to the variable 'if_condition_110423' (line 4230)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4230, 8), 'if_condition_110423', if_condition_110423)
        # SSA begins for if statement (line 4230)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 4232):
        
        # Assigning a Name to a Attribute (line 4232):
        
        # Assigning a Name to a Attribute (line 4232):
        # Getting the type of 'connectionstyle' (line 4232)
        connectionstyle_110424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4232, 30), 'connectionstyle')
        # Getting the type of 'self' (line 4232)
        self_110425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4232, 12), 'self')
        # Setting the type of the member '_connector' of a type (line 4232)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4232, 12), self_110425, '_connector', connectionstyle_110424)
        # SSA branch for the else part of an if statement (line 4230)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Attribute (line 4234):
        
        # Assigning a Call to a Attribute (line 4234):
        
        # Assigning a Call to a Attribute (line 4234):
        
        # Call to ConnectionStyle(...): (line 4234)
        # Processing the call arguments (line 4234)
        # Getting the type of 'connectionstyle' (line 4234)
        connectionstyle_110427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4234, 46), 'connectionstyle', False)
        # Processing the call keyword arguments (line 4234)
        # Getting the type of 'kw' (line 4234)
        kw_110428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4234, 65), 'kw', False)
        kwargs_110429 = {'kw_110428': kw_110428}
        # Getting the type of 'ConnectionStyle' (line 4234)
        ConnectionStyle_110426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4234, 30), 'ConnectionStyle', False)
        # Calling ConnectionStyle(args, kwargs) (line 4234)
        ConnectionStyle_call_result_110430 = invoke(stypy.reporting.localization.Localization(__file__, 4234, 30), ConnectionStyle_110426, *[connectionstyle_110427], **kwargs_110429)
        
        # Getting the type of 'self' (line 4234)
        self_110431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4234, 12), 'self')
        # Setting the type of the member '_connector' of a type (line 4234)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4234, 12), self_110431, '_connector', ConnectionStyle_call_result_110430)
        # SSA join for if statement (line 4230)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 4235):
        
        # Assigning a Name to a Attribute (line 4235):
        
        # Assigning a Name to a Attribute (line 4235):
        # Getting the type of 'True' (line 4235)
        True_110432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4235, 21), 'True')
        # Getting the type of 'self' (line 4235)
        self_110433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4235, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 4235)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4235, 8), self_110433, 'stale', True_110432)
        
        # ################# End of 'set_connectionstyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_connectionstyle' in the type store
        # Getting the type of 'stypy_return_type' (line 4207)
        stypy_return_type_110434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4207, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_110434)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_connectionstyle'
        return stypy_return_type_110434


    @norecursion
    def get_connectionstyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_connectionstyle'
        module_type_store = module_type_store.open_function_context('get_connectionstyle', 4237, 4, False)
        # Assigning a type to the variable 'self' (line 4238)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4238, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyArrowPatch.get_connectionstyle.__dict__.__setitem__('stypy_localization', localization)
        FancyArrowPatch.get_connectionstyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyArrowPatch.get_connectionstyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyArrowPatch.get_connectionstyle.__dict__.__setitem__('stypy_function_name', 'FancyArrowPatch.get_connectionstyle')
        FancyArrowPatch.get_connectionstyle.__dict__.__setitem__('stypy_param_names_list', [])
        FancyArrowPatch.get_connectionstyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyArrowPatch.get_connectionstyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyArrowPatch.get_connectionstyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyArrowPatch.get_connectionstyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyArrowPatch.get_connectionstyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyArrowPatch.get_connectionstyle.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyArrowPatch.get_connectionstyle', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_connectionstyle', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_connectionstyle(...)' code ##################

        unicode_110435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4240, (-1)), 'unicode', u'\n        Return the :class:`ConnectionStyle` instance.\n        ')
        # Getting the type of 'self' (line 4241)
        self_110436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4241, 15), 'self')
        # Obtaining the member '_connector' of a type (line 4241)
        _connector_110437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4241, 15), self_110436, '_connector')
        # Assigning a type to the variable 'stypy_return_type' (line 4241)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4241, 8), 'stypy_return_type', _connector_110437)
        
        # ################# End of 'get_connectionstyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_connectionstyle' in the type store
        # Getting the type of 'stypy_return_type' (line 4237)
        stypy_return_type_110438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4237, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_110438)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_connectionstyle'
        return stypy_return_type_110438


    @norecursion
    def set_arrowstyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 4243)
        None_110439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4243, 40), 'None')
        defaults = [None_110439]
        # Create a new context for function 'set_arrowstyle'
        module_type_store = module_type_store.open_function_context('set_arrowstyle', 4243, 4, False)
        # Assigning a type to the variable 'self' (line 4244)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4244, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyArrowPatch.set_arrowstyle.__dict__.__setitem__('stypy_localization', localization)
        FancyArrowPatch.set_arrowstyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyArrowPatch.set_arrowstyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyArrowPatch.set_arrowstyle.__dict__.__setitem__('stypy_function_name', 'FancyArrowPatch.set_arrowstyle')
        FancyArrowPatch.set_arrowstyle.__dict__.__setitem__('stypy_param_names_list', ['arrowstyle'])
        FancyArrowPatch.set_arrowstyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyArrowPatch.set_arrowstyle.__dict__.__setitem__('stypy_kwargs_param_name', 'kw')
        FancyArrowPatch.set_arrowstyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyArrowPatch.set_arrowstyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyArrowPatch.set_arrowstyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyArrowPatch.set_arrowstyle.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyArrowPatch.set_arrowstyle', ['arrowstyle'], None, 'kw', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_arrowstyle', localization, ['arrowstyle'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_arrowstyle(...)' code ##################

        unicode_110440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4261, (-1)), 'unicode', u'\n        Set the arrow style. Old attributes are forgotten. Without arguments\n        (or with ``arrowstyle=None``) returns available box styles as a list of\n        strings.\n\n        Parameters\n        ----------\n        arrowstyle : None, ArrowStyle, str, optional (default: None)\n            Can be a string with arrowstyle name with optional comma-separated\n            attributes, e.g.::\n\n                set_arrowstyle("Fancy,head_length=0.2")\n\n            Alternatively attributes can be provided as keywords, e.g.::\n\n                set_arrowstyle("fancy", head_length=0.2)\n\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 4263)
        # Getting the type of 'arrowstyle' (line 4263)
        arrowstyle_110441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4263, 11), 'arrowstyle')
        # Getting the type of 'None' (line 4263)
        None_110442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4263, 25), 'None')
        
        (may_be_110443, more_types_in_union_110444) = may_be_none(arrowstyle_110441, None_110442)

        if may_be_110443:

            if more_types_in_union_110444:
                # Runtime conditional SSA (line 4263)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to pprint_styles(...): (line 4264)
            # Processing the call keyword arguments (line 4264)
            kwargs_110447 = {}
            # Getting the type of 'ArrowStyle' (line 4264)
            ArrowStyle_110445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4264, 19), 'ArrowStyle', False)
            # Obtaining the member 'pprint_styles' of a type (line 4264)
            pprint_styles_110446 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4264, 19), ArrowStyle_110445, 'pprint_styles')
            # Calling pprint_styles(args, kwargs) (line 4264)
            pprint_styles_call_result_110448 = invoke(stypy.reporting.localization.Localization(__file__, 4264, 19), pprint_styles_110446, *[], **kwargs_110447)
            
            # Assigning a type to the variable 'stypy_return_type' (line 4264)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4264, 12), 'stypy_return_type', pprint_styles_call_result_110448)

            if more_types_in_union_110444:
                # SSA join for if statement (line 4263)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Call to isinstance(...): (line 4266)
        # Processing the call arguments (line 4266)
        # Getting the type of 'arrowstyle' (line 4266)
        arrowstyle_110450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4266, 22), 'arrowstyle', False)
        # Getting the type of 'ArrowStyle' (line 4266)
        ArrowStyle_110451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4266, 34), 'ArrowStyle', False)
        # Obtaining the member '_Base' of a type (line 4266)
        _Base_110452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4266, 34), ArrowStyle_110451, '_Base')
        # Processing the call keyword arguments (line 4266)
        kwargs_110453 = {}
        # Getting the type of 'isinstance' (line 4266)
        isinstance_110449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4266, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 4266)
        isinstance_call_result_110454 = invoke(stypy.reporting.localization.Localization(__file__, 4266, 11), isinstance_110449, *[arrowstyle_110450, _Base_110452], **kwargs_110453)
        
        # Testing the type of an if condition (line 4266)
        if_condition_110455 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4266, 8), isinstance_call_result_110454)
        # Assigning a type to the variable 'if_condition_110455' (line 4266)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4266, 8), 'if_condition_110455', if_condition_110455)
        # SSA begins for if statement (line 4266)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 4267):
        
        # Assigning a Name to a Attribute (line 4267):
        
        # Assigning a Name to a Attribute (line 4267):
        # Getting the type of 'arrowstyle' (line 4267)
        arrowstyle_110456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4267, 37), 'arrowstyle')
        # Getting the type of 'self' (line 4267)
        self_110457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4267, 12), 'self')
        # Setting the type of the member '_arrow_transmuter' of a type (line 4267)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4267, 12), self_110457, '_arrow_transmuter', arrowstyle_110456)
        # SSA branch for the else part of an if statement (line 4266)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Attribute (line 4269):
        
        # Assigning a Call to a Attribute (line 4269):
        
        # Assigning a Call to a Attribute (line 4269):
        
        # Call to ArrowStyle(...): (line 4269)
        # Processing the call arguments (line 4269)
        # Getting the type of 'arrowstyle' (line 4269)
        arrowstyle_110459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4269, 48), 'arrowstyle', False)
        # Processing the call keyword arguments (line 4269)
        # Getting the type of 'kw' (line 4269)
        kw_110460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4269, 62), 'kw', False)
        kwargs_110461 = {'kw_110460': kw_110460}
        # Getting the type of 'ArrowStyle' (line 4269)
        ArrowStyle_110458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4269, 37), 'ArrowStyle', False)
        # Calling ArrowStyle(args, kwargs) (line 4269)
        ArrowStyle_call_result_110462 = invoke(stypy.reporting.localization.Localization(__file__, 4269, 37), ArrowStyle_110458, *[arrowstyle_110459], **kwargs_110461)
        
        # Getting the type of 'self' (line 4269)
        self_110463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4269, 12), 'self')
        # Setting the type of the member '_arrow_transmuter' of a type (line 4269)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4269, 12), self_110463, '_arrow_transmuter', ArrowStyle_call_result_110462)
        # SSA join for if statement (line 4266)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 4270):
        
        # Assigning a Name to a Attribute (line 4270):
        
        # Assigning a Name to a Attribute (line 4270):
        # Getting the type of 'True' (line 4270)
        True_110464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4270, 21), 'True')
        # Getting the type of 'self' (line 4270)
        self_110465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4270, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 4270)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4270, 8), self_110465, 'stale', True_110464)
        
        # ################# End of 'set_arrowstyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_arrowstyle' in the type store
        # Getting the type of 'stypy_return_type' (line 4243)
        stypy_return_type_110466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4243, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_110466)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_arrowstyle'
        return stypy_return_type_110466


    @norecursion
    def get_arrowstyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_arrowstyle'
        module_type_store = module_type_store.open_function_context('get_arrowstyle', 4272, 4, False)
        # Assigning a type to the variable 'self' (line 4273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4273, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyArrowPatch.get_arrowstyle.__dict__.__setitem__('stypy_localization', localization)
        FancyArrowPatch.get_arrowstyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyArrowPatch.get_arrowstyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyArrowPatch.get_arrowstyle.__dict__.__setitem__('stypy_function_name', 'FancyArrowPatch.get_arrowstyle')
        FancyArrowPatch.get_arrowstyle.__dict__.__setitem__('stypy_param_names_list', [])
        FancyArrowPatch.get_arrowstyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyArrowPatch.get_arrowstyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyArrowPatch.get_arrowstyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyArrowPatch.get_arrowstyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyArrowPatch.get_arrowstyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyArrowPatch.get_arrowstyle.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyArrowPatch.get_arrowstyle', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_arrowstyle', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_arrowstyle(...)' code ##################

        unicode_110467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4275, (-1)), 'unicode', u'\n        Return the arrowstyle object.\n        ')
        # Getting the type of 'self' (line 4276)
        self_110468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4276, 15), 'self')
        # Obtaining the member '_arrow_transmuter' of a type (line 4276)
        _arrow_transmuter_110469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4276, 15), self_110468, '_arrow_transmuter')
        # Assigning a type to the variable 'stypy_return_type' (line 4276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4276, 8), 'stypy_return_type', _arrow_transmuter_110469)
        
        # ################# End of 'get_arrowstyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_arrowstyle' in the type store
        # Getting the type of 'stypy_return_type' (line 4272)
        stypy_return_type_110470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4272, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_110470)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_arrowstyle'
        return stypy_return_type_110470


    @norecursion
    def set_mutation_scale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_mutation_scale'
        module_type_store = module_type_store.open_function_context('set_mutation_scale', 4278, 4, False)
        # Assigning a type to the variable 'self' (line 4279)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4279, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyArrowPatch.set_mutation_scale.__dict__.__setitem__('stypy_localization', localization)
        FancyArrowPatch.set_mutation_scale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyArrowPatch.set_mutation_scale.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyArrowPatch.set_mutation_scale.__dict__.__setitem__('stypy_function_name', 'FancyArrowPatch.set_mutation_scale')
        FancyArrowPatch.set_mutation_scale.__dict__.__setitem__('stypy_param_names_list', ['scale'])
        FancyArrowPatch.set_mutation_scale.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyArrowPatch.set_mutation_scale.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyArrowPatch.set_mutation_scale.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyArrowPatch.set_mutation_scale.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyArrowPatch.set_mutation_scale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyArrowPatch.set_mutation_scale.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyArrowPatch.set_mutation_scale', ['scale'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_mutation_scale', localization, ['scale'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_mutation_scale(...)' code ##################

        unicode_110471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4285, (-1)), 'unicode', u'\n        Set the mutation scale.\n\n        Parameters\n        ----------\n        scale : scalar\n        ')
        
        # Assigning a Name to a Attribute (line 4286):
        
        # Assigning a Name to a Attribute (line 4286):
        
        # Assigning a Name to a Attribute (line 4286):
        # Getting the type of 'scale' (line 4286)
        scale_110472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4286, 31), 'scale')
        # Getting the type of 'self' (line 4286)
        self_110473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4286, 8), 'self')
        # Setting the type of the member '_mutation_scale' of a type (line 4286)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4286, 8), self_110473, '_mutation_scale', scale_110472)
        
        # Assigning a Name to a Attribute (line 4287):
        
        # Assigning a Name to a Attribute (line 4287):
        
        # Assigning a Name to a Attribute (line 4287):
        # Getting the type of 'True' (line 4287)
        True_110474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4287, 21), 'True')
        # Getting the type of 'self' (line 4287)
        self_110475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4287, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 4287)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4287, 8), self_110475, 'stale', True_110474)
        
        # ################# End of 'set_mutation_scale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_mutation_scale' in the type store
        # Getting the type of 'stypy_return_type' (line 4278)
        stypy_return_type_110476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4278, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_110476)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_mutation_scale'
        return stypy_return_type_110476


    @norecursion
    def get_mutation_scale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_mutation_scale'
        module_type_store = module_type_store.open_function_context('get_mutation_scale', 4289, 4, False)
        # Assigning a type to the variable 'self' (line 4290)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4290, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyArrowPatch.get_mutation_scale.__dict__.__setitem__('stypy_localization', localization)
        FancyArrowPatch.get_mutation_scale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyArrowPatch.get_mutation_scale.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyArrowPatch.get_mutation_scale.__dict__.__setitem__('stypy_function_name', 'FancyArrowPatch.get_mutation_scale')
        FancyArrowPatch.get_mutation_scale.__dict__.__setitem__('stypy_param_names_list', [])
        FancyArrowPatch.get_mutation_scale.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyArrowPatch.get_mutation_scale.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyArrowPatch.get_mutation_scale.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyArrowPatch.get_mutation_scale.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyArrowPatch.get_mutation_scale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyArrowPatch.get_mutation_scale.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyArrowPatch.get_mutation_scale', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_mutation_scale', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_mutation_scale(...)' code ##################

        unicode_110477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4296, (-1)), 'unicode', u'\n        Return the mutation scale.\n\n        Returns\n        -------\n        scale : scalar\n        ')
        # Getting the type of 'self' (line 4297)
        self_110478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4297, 15), 'self')
        # Obtaining the member '_mutation_scale' of a type (line 4297)
        _mutation_scale_110479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4297, 15), self_110478, '_mutation_scale')
        # Assigning a type to the variable 'stypy_return_type' (line 4297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4297, 8), 'stypy_return_type', _mutation_scale_110479)
        
        # ################# End of 'get_mutation_scale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_mutation_scale' in the type store
        # Getting the type of 'stypy_return_type' (line 4289)
        stypy_return_type_110480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4289, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_110480)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_mutation_scale'
        return stypy_return_type_110480


    @norecursion
    def set_mutation_aspect(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_mutation_aspect'
        module_type_store = module_type_store.open_function_context('set_mutation_aspect', 4299, 4, False)
        # Assigning a type to the variable 'self' (line 4300)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4300, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyArrowPatch.set_mutation_aspect.__dict__.__setitem__('stypy_localization', localization)
        FancyArrowPatch.set_mutation_aspect.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyArrowPatch.set_mutation_aspect.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyArrowPatch.set_mutation_aspect.__dict__.__setitem__('stypy_function_name', 'FancyArrowPatch.set_mutation_aspect')
        FancyArrowPatch.set_mutation_aspect.__dict__.__setitem__('stypy_param_names_list', ['aspect'])
        FancyArrowPatch.set_mutation_aspect.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyArrowPatch.set_mutation_aspect.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyArrowPatch.set_mutation_aspect.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyArrowPatch.set_mutation_aspect.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyArrowPatch.set_mutation_aspect.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyArrowPatch.set_mutation_aspect.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyArrowPatch.set_mutation_aspect', ['aspect'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_mutation_aspect', localization, ['aspect'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_mutation_aspect(...)' code ##################

        unicode_110481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4306, (-1)), 'unicode', u'\n        Set the aspect ratio of the bbox mutation.\n\n        Parameters\n        ----------\n        aspect : scalar\n        ')
        
        # Assigning a Name to a Attribute (line 4307):
        
        # Assigning a Name to a Attribute (line 4307):
        
        # Assigning a Name to a Attribute (line 4307):
        # Getting the type of 'aspect' (line 4307)
        aspect_110482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4307, 32), 'aspect')
        # Getting the type of 'self' (line 4307)
        self_110483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4307, 8), 'self')
        # Setting the type of the member '_mutation_aspect' of a type (line 4307)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4307, 8), self_110483, '_mutation_aspect', aspect_110482)
        
        # Assigning a Name to a Attribute (line 4308):
        
        # Assigning a Name to a Attribute (line 4308):
        
        # Assigning a Name to a Attribute (line 4308):
        # Getting the type of 'True' (line 4308)
        True_110484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4308, 21), 'True')
        # Getting the type of 'self' (line 4308)
        self_110485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4308, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 4308)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4308, 8), self_110485, 'stale', True_110484)
        
        # ################# End of 'set_mutation_aspect(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_mutation_aspect' in the type store
        # Getting the type of 'stypy_return_type' (line 4299)
        stypy_return_type_110486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4299, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_110486)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_mutation_aspect'
        return stypy_return_type_110486


    @norecursion
    def get_mutation_aspect(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_mutation_aspect'
        module_type_store = module_type_store.open_function_context('get_mutation_aspect', 4310, 4, False)
        # Assigning a type to the variable 'self' (line 4311)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4311, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyArrowPatch.get_mutation_aspect.__dict__.__setitem__('stypy_localization', localization)
        FancyArrowPatch.get_mutation_aspect.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyArrowPatch.get_mutation_aspect.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyArrowPatch.get_mutation_aspect.__dict__.__setitem__('stypy_function_name', 'FancyArrowPatch.get_mutation_aspect')
        FancyArrowPatch.get_mutation_aspect.__dict__.__setitem__('stypy_param_names_list', [])
        FancyArrowPatch.get_mutation_aspect.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyArrowPatch.get_mutation_aspect.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyArrowPatch.get_mutation_aspect.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyArrowPatch.get_mutation_aspect.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyArrowPatch.get_mutation_aspect.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyArrowPatch.get_mutation_aspect.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyArrowPatch.get_mutation_aspect', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_mutation_aspect', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_mutation_aspect(...)' code ##################

        unicode_110487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4313, (-1)), 'unicode', u'\n        Return the aspect ratio of the bbox mutation.\n        ')
        # Getting the type of 'self' (line 4314)
        self_110488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4314, 15), 'self')
        # Obtaining the member '_mutation_aspect' of a type (line 4314)
        _mutation_aspect_110489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4314, 15), self_110488, '_mutation_aspect')
        # Assigning a type to the variable 'stypy_return_type' (line 4314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4314, 8), 'stypy_return_type', _mutation_aspect_110489)
        
        # ################# End of 'get_mutation_aspect(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_mutation_aspect' in the type store
        # Getting the type of 'stypy_return_type' (line 4310)
        stypy_return_type_110490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4310, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_110490)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_mutation_aspect'
        return stypy_return_type_110490


    @norecursion
    def get_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_path'
        module_type_store = module_type_store.open_function_context('get_path', 4316, 4, False)
        # Assigning a type to the variable 'self' (line 4317)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4317, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyArrowPatch.get_path.__dict__.__setitem__('stypy_localization', localization)
        FancyArrowPatch.get_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyArrowPatch.get_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyArrowPatch.get_path.__dict__.__setitem__('stypy_function_name', 'FancyArrowPatch.get_path')
        FancyArrowPatch.get_path.__dict__.__setitem__('stypy_param_names_list', [])
        FancyArrowPatch.get_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyArrowPatch.get_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyArrowPatch.get_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyArrowPatch.get_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyArrowPatch.get_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyArrowPatch.get_path.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyArrowPatch.get_path', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_path', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_path(...)' code ##################

        unicode_110491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4321, (-1)), 'unicode', u'\n        Return the path of the arrow in the data coordinates. Use\n        get_path_in_displaycoord() method to retrieve the arrow path\n        in display coordinates.\n        ')
        
        # Assigning a Call to a Tuple (line 4322):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to get_path_in_displaycoord(...): (line 4322)
        # Processing the call keyword arguments (line 4322)
        kwargs_110494 = {}
        # Getting the type of 'self' (line 4322)
        self_110492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4322, 26), 'self', False)
        # Obtaining the member 'get_path_in_displaycoord' of a type (line 4322)
        get_path_in_displaycoord_110493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4322, 26), self_110492, 'get_path_in_displaycoord')
        # Calling get_path_in_displaycoord(args, kwargs) (line 4322)
        get_path_in_displaycoord_call_result_110495 = invoke(stypy.reporting.localization.Localization(__file__, 4322, 26), get_path_in_displaycoord_110493, *[], **kwargs_110494)
        
        # Assigning a type to the variable 'call_assignment_100740' (line 4322)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4322, 8), 'call_assignment_100740', get_path_in_displaycoord_call_result_110495)
        
        # Assigning a Call to a Name (line 4322):
        
        # Assigning a Call to a Name (line 4322):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_110498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4322, 8), 'int')
        # Processing the call keyword arguments
        kwargs_110499 = {}
        # Getting the type of 'call_assignment_100740' (line 4322)
        call_assignment_100740_110496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4322, 8), 'call_assignment_100740', False)
        # Obtaining the member '__getitem__' of a type (line 4322)
        getitem___110497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4322, 8), call_assignment_100740_110496, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_110500 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___110497, *[int_110498], **kwargs_110499)
        
        # Assigning a type to the variable 'call_assignment_100741' (line 4322)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4322, 8), 'call_assignment_100741', getitem___call_result_110500)
        
        # Assigning a Name to a Name (line 4322):
        
        # Assigning a Name to a Name (line 4322):
        # Getting the type of 'call_assignment_100741' (line 4322)
        call_assignment_100741_110501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4322, 8), 'call_assignment_100741')
        # Assigning a type to the variable '_path' (line 4322)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4322, 8), '_path', call_assignment_100741_110501)
        
        # Assigning a Call to a Name (line 4322):
        
        # Assigning a Call to a Name (line 4322):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_110504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4322, 8), 'int')
        # Processing the call keyword arguments
        kwargs_110505 = {}
        # Getting the type of 'call_assignment_100740' (line 4322)
        call_assignment_100740_110502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4322, 8), 'call_assignment_100740', False)
        # Obtaining the member '__getitem__' of a type (line 4322)
        getitem___110503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4322, 8), call_assignment_100740_110502, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_110506 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___110503, *[int_110504], **kwargs_110505)
        
        # Assigning a type to the variable 'call_assignment_100742' (line 4322)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4322, 8), 'call_assignment_100742', getitem___call_result_110506)
        
        # Assigning a Name to a Name (line 4322):
        
        # Assigning a Name to a Name (line 4322):
        # Getting the type of 'call_assignment_100742' (line 4322)
        call_assignment_100742_110507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4322, 8), 'call_assignment_100742')
        # Assigning a type to the variable 'fillable' (line 4322)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4322, 15), 'fillable', call_assignment_100742_110507)
        
        
        # Call to iterable(...): (line 4324)
        # Processing the call arguments (line 4324)
        # Getting the type of 'fillable' (line 4324)
        fillable_110510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4324, 26), 'fillable', False)
        # Processing the call keyword arguments (line 4324)
        kwargs_110511 = {}
        # Getting the type of 'cbook' (line 4324)
        cbook_110508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4324, 11), 'cbook', False)
        # Obtaining the member 'iterable' of a type (line 4324)
        iterable_110509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4324, 11), cbook_110508, 'iterable')
        # Calling iterable(args, kwargs) (line 4324)
        iterable_call_result_110512 = invoke(stypy.reporting.localization.Localization(__file__, 4324, 11), iterable_110509, *[fillable_110510], **kwargs_110511)
        
        # Testing the type of an if condition (line 4324)
        if_condition_110513 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4324, 8), iterable_call_result_110512)
        # Assigning a type to the variable 'if_condition_110513' (line 4324)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4324, 8), 'if_condition_110513', if_condition_110513)
        # SSA begins for if statement (line 4324)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 4325):
        
        # Assigning a Call to a Name (line 4325):
        
        # Assigning a Call to a Name (line 4325):
        
        # Call to concatenate_paths(...): (line 4325)
        # Processing the call arguments (line 4325)
        # Getting the type of '_path' (line 4325)
        _path_110515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4325, 38), '_path', False)
        # Processing the call keyword arguments (line 4325)
        kwargs_110516 = {}
        # Getting the type of 'concatenate_paths' (line 4325)
        concatenate_paths_110514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4325, 20), 'concatenate_paths', False)
        # Calling concatenate_paths(args, kwargs) (line 4325)
        concatenate_paths_call_result_110517 = invoke(stypy.reporting.localization.Localization(__file__, 4325, 20), concatenate_paths_110514, *[_path_110515], **kwargs_110516)
        
        # Assigning a type to the variable '_path' (line 4325)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4325, 12), '_path', concatenate_paths_call_result_110517)
        # SSA join for if statement (line 4324)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to transform_path(...): (line 4327)
        # Processing the call arguments (line 4327)
        # Getting the type of '_path' (line 4327)
        _path_110526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4327, 62), '_path', False)
        # Processing the call keyword arguments (line 4327)
        kwargs_110527 = {}
        
        # Call to inverted(...): (line 4327)
        # Processing the call keyword arguments (line 4327)
        kwargs_110523 = {}
        
        # Call to get_transform(...): (line 4327)
        # Processing the call keyword arguments (line 4327)
        kwargs_110520 = {}
        # Getting the type of 'self' (line 4327)
        self_110518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4327, 15), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 4327)
        get_transform_110519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4327, 15), self_110518, 'get_transform')
        # Calling get_transform(args, kwargs) (line 4327)
        get_transform_call_result_110521 = invoke(stypy.reporting.localization.Localization(__file__, 4327, 15), get_transform_110519, *[], **kwargs_110520)
        
        # Obtaining the member 'inverted' of a type (line 4327)
        inverted_110522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4327, 15), get_transform_call_result_110521, 'inverted')
        # Calling inverted(args, kwargs) (line 4327)
        inverted_call_result_110524 = invoke(stypy.reporting.localization.Localization(__file__, 4327, 15), inverted_110522, *[], **kwargs_110523)
        
        # Obtaining the member 'transform_path' of a type (line 4327)
        transform_path_110525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4327, 15), inverted_call_result_110524, 'transform_path')
        # Calling transform_path(args, kwargs) (line 4327)
        transform_path_call_result_110528 = invoke(stypy.reporting.localization.Localization(__file__, 4327, 15), transform_path_110525, *[_path_110526], **kwargs_110527)
        
        # Assigning a type to the variable 'stypy_return_type' (line 4327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4327, 8), 'stypy_return_type', transform_path_call_result_110528)
        
        # ################# End of 'get_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_path' in the type store
        # Getting the type of 'stypy_return_type' (line 4316)
        stypy_return_type_110529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4316, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_110529)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_path'
        return stypy_return_type_110529


    @norecursion
    def get_path_in_displaycoord(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_path_in_displaycoord'
        module_type_store = module_type_store.open_function_context('get_path_in_displaycoord', 4329, 4, False)
        # Assigning a type to the variable 'self' (line 4330)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4330, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyArrowPatch.get_path_in_displaycoord.__dict__.__setitem__('stypy_localization', localization)
        FancyArrowPatch.get_path_in_displaycoord.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyArrowPatch.get_path_in_displaycoord.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyArrowPatch.get_path_in_displaycoord.__dict__.__setitem__('stypy_function_name', 'FancyArrowPatch.get_path_in_displaycoord')
        FancyArrowPatch.get_path_in_displaycoord.__dict__.__setitem__('stypy_param_names_list', [])
        FancyArrowPatch.get_path_in_displaycoord.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyArrowPatch.get_path_in_displaycoord.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyArrowPatch.get_path_in_displaycoord.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyArrowPatch.get_path_in_displaycoord.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyArrowPatch.get_path_in_displaycoord.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyArrowPatch.get_path_in_displaycoord.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyArrowPatch.get_path_in_displaycoord', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_path_in_displaycoord', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_path_in_displaycoord(...)' code ##################

        unicode_110530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4332, (-1)), 'unicode', u'\n        Return the mutated path of the arrow in display coordinates.\n        ')
        
        # Assigning a Call to a Name (line 4334):
        
        # Assigning a Call to a Name (line 4334):
        
        # Assigning a Call to a Name (line 4334):
        
        # Call to get_dpi_cor(...): (line 4334)
        # Processing the call keyword arguments (line 4334)
        kwargs_110533 = {}
        # Getting the type of 'self' (line 4334)
        self_110531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4334, 18), 'self', False)
        # Obtaining the member 'get_dpi_cor' of a type (line 4334)
        get_dpi_cor_110532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4334, 18), self_110531, 'get_dpi_cor')
        # Calling get_dpi_cor(args, kwargs) (line 4334)
        get_dpi_cor_call_result_110534 = invoke(stypy.reporting.localization.Localization(__file__, 4334, 18), get_dpi_cor_110532, *[], **kwargs_110533)
        
        # Assigning a type to the variable 'dpi_cor' (line 4334)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4334, 8), 'dpi_cor', get_dpi_cor_call_result_110534)
        
        
        # Getting the type of 'self' (line 4336)
        self_110535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4336, 11), 'self')
        # Obtaining the member '_posA_posB' of a type (line 4336)
        _posA_posB_110536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4336, 11), self_110535, '_posA_posB')
        # Getting the type of 'None' (line 4336)
        None_110537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4336, 34), 'None')
        # Applying the binary operator 'isnot' (line 4336)
        result_is_not_110538 = python_operator(stypy.reporting.localization.Localization(__file__, 4336, 11), 'isnot', _posA_posB_110536, None_110537)
        
        # Testing the type of an if condition (line 4336)
        if_condition_110539 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4336, 8), result_is_not_110538)
        # Assigning a type to the variable 'if_condition_110539' (line 4336)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4336, 8), 'if_condition_110539', if_condition_110539)
        # SSA begins for if statement (line 4336)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 4337):
        
        # Assigning a Call to a Name (line 4337):
        
        # Assigning a Call to a Name (line 4337):
        
        # Call to transform_point(...): (line 4337)
        # Processing the call arguments (line 4337)
        
        # Obtaining the type of the subscript
        int_110545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4337, 72), 'int')
        # Getting the type of 'self' (line 4337)
        self_110546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4337, 56), 'self', False)
        # Obtaining the member '_posA_posB' of a type (line 4337)
        _posA_posB_110547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4337, 56), self_110546, '_posA_posB')
        # Obtaining the member '__getitem__' of a type (line 4337)
        getitem___110548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4337, 56), _posA_posB_110547, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4337)
        subscript_call_result_110549 = invoke(stypy.reporting.localization.Localization(__file__, 4337, 56), getitem___110548, int_110545)
        
        # Processing the call keyword arguments (line 4337)
        kwargs_110550 = {}
        
        # Call to get_transform(...): (line 4337)
        # Processing the call keyword arguments (line 4337)
        kwargs_110542 = {}
        # Getting the type of 'self' (line 4337)
        self_110540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4337, 19), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 4337)
        get_transform_110541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4337, 19), self_110540, 'get_transform')
        # Calling get_transform(args, kwargs) (line 4337)
        get_transform_call_result_110543 = invoke(stypy.reporting.localization.Localization(__file__, 4337, 19), get_transform_110541, *[], **kwargs_110542)
        
        # Obtaining the member 'transform_point' of a type (line 4337)
        transform_point_110544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4337, 19), get_transform_call_result_110543, 'transform_point')
        # Calling transform_point(args, kwargs) (line 4337)
        transform_point_call_result_110551 = invoke(stypy.reporting.localization.Localization(__file__, 4337, 19), transform_point_110544, *[subscript_call_result_110549], **kwargs_110550)
        
        # Assigning a type to the variable 'posA' (line 4337)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4337, 12), 'posA', transform_point_call_result_110551)
        
        # Assigning a Call to a Name (line 4338):
        
        # Assigning a Call to a Name (line 4338):
        
        # Assigning a Call to a Name (line 4338):
        
        # Call to transform_point(...): (line 4338)
        # Processing the call arguments (line 4338)
        
        # Obtaining the type of the subscript
        int_110557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4338, 72), 'int')
        # Getting the type of 'self' (line 4338)
        self_110558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4338, 56), 'self', False)
        # Obtaining the member '_posA_posB' of a type (line 4338)
        _posA_posB_110559 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4338, 56), self_110558, '_posA_posB')
        # Obtaining the member '__getitem__' of a type (line 4338)
        getitem___110560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4338, 56), _posA_posB_110559, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4338)
        subscript_call_result_110561 = invoke(stypy.reporting.localization.Localization(__file__, 4338, 56), getitem___110560, int_110557)
        
        # Processing the call keyword arguments (line 4338)
        kwargs_110562 = {}
        
        # Call to get_transform(...): (line 4338)
        # Processing the call keyword arguments (line 4338)
        kwargs_110554 = {}
        # Getting the type of 'self' (line 4338)
        self_110552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4338, 19), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 4338)
        get_transform_110553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4338, 19), self_110552, 'get_transform')
        # Calling get_transform(args, kwargs) (line 4338)
        get_transform_call_result_110555 = invoke(stypy.reporting.localization.Localization(__file__, 4338, 19), get_transform_110553, *[], **kwargs_110554)
        
        # Obtaining the member 'transform_point' of a type (line 4338)
        transform_point_110556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4338, 19), get_transform_call_result_110555, 'transform_point')
        # Calling transform_point(args, kwargs) (line 4338)
        transform_point_call_result_110563 = invoke(stypy.reporting.localization.Localization(__file__, 4338, 19), transform_point_110556, *[subscript_call_result_110561], **kwargs_110562)
        
        # Assigning a type to the variable 'posB' (line 4338)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4338, 12), 'posB', transform_point_call_result_110563)
        
        # Assigning a Call to a Name (line 4339):
        
        # Assigning a Call to a Name (line 4339):
        
        # Assigning a Call to a Name (line 4339):
        
        # Call to (...): (line 4339)
        # Processing the call arguments (line 4339)
        # Getting the type of 'posA' (line 4339)
        posA_110568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4339, 47), 'posA', False)
        # Getting the type of 'posB' (line 4339)
        posB_110569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4339, 53), 'posB', False)
        # Processing the call keyword arguments (line 4339)
        # Getting the type of 'self' (line 4340)
        self_110570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4340, 54), 'self', False)
        # Obtaining the member 'patchA' of a type (line 4340)
        patchA_110571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4340, 54), self_110570, 'patchA')
        keyword_110572 = patchA_110571
        # Getting the type of 'self' (line 4341)
        self_110573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4341, 54), 'self', False)
        # Obtaining the member 'patchB' of a type (line 4341)
        patchB_110574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4341, 54), self_110573, 'patchB')
        keyword_110575 = patchB_110574
        # Getting the type of 'self' (line 4342)
        self_110576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4342, 55), 'self', False)
        # Obtaining the member 'shrinkA' of a type (line 4342)
        shrinkA_110577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4342, 55), self_110576, 'shrinkA')
        # Getting the type of 'dpi_cor' (line 4342)
        dpi_cor_110578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4342, 70), 'dpi_cor', False)
        # Applying the binary operator '*' (line 4342)
        result_mul_110579 = python_operator(stypy.reporting.localization.Localization(__file__, 4342, 55), '*', shrinkA_110577, dpi_cor_110578)
        
        keyword_110580 = result_mul_110579
        # Getting the type of 'self' (line 4343)
        self_110581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4343, 55), 'self', False)
        # Obtaining the member 'shrinkB' of a type (line 4343)
        shrinkB_110582 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4343, 55), self_110581, 'shrinkB')
        # Getting the type of 'dpi_cor' (line 4343)
        dpi_cor_110583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4343, 70), 'dpi_cor', False)
        # Applying the binary operator '*' (line 4343)
        result_mul_110584 = python_operator(stypy.reporting.localization.Localization(__file__, 4343, 55), '*', shrinkB_110582, dpi_cor_110583)
        
        keyword_110585 = result_mul_110584
        kwargs_110586 = {'patchA': keyword_110572, 'patchB': keyword_110575, 'shrinkB': keyword_110585, 'shrinkA': keyword_110580}
        
        # Call to get_connectionstyle(...): (line 4339)
        # Processing the call keyword arguments (line 4339)
        kwargs_110566 = {}
        # Getting the type of 'self' (line 4339)
        self_110564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4339, 20), 'self', False)
        # Obtaining the member 'get_connectionstyle' of a type (line 4339)
        get_connectionstyle_110565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4339, 20), self_110564, 'get_connectionstyle')
        # Calling get_connectionstyle(args, kwargs) (line 4339)
        get_connectionstyle_call_result_110567 = invoke(stypy.reporting.localization.Localization(__file__, 4339, 20), get_connectionstyle_110565, *[], **kwargs_110566)
        
        # Calling (args, kwargs) (line 4339)
        _call_result_110587 = invoke(stypy.reporting.localization.Localization(__file__, 4339, 20), get_connectionstyle_call_result_110567, *[posA_110568, posB_110569], **kwargs_110586)
        
        # Assigning a type to the variable '_path' (line 4339)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4339, 12), '_path', _call_result_110587)
        # SSA branch for the else part of an if statement (line 4336)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 4346):
        
        # Assigning a Call to a Name (line 4346):
        
        # Assigning a Call to a Name (line 4346):
        
        # Call to transform_path(...): (line 4346)
        # Processing the call arguments (line 4346)
        # Getting the type of 'self' (line 4346)
        self_110593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4346, 56), 'self', False)
        # Obtaining the member '_path_original' of a type (line 4346)
        _path_original_110594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4346, 56), self_110593, '_path_original')
        # Processing the call keyword arguments (line 4346)
        kwargs_110595 = {}
        
        # Call to get_transform(...): (line 4346)
        # Processing the call keyword arguments (line 4346)
        kwargs_110590 = {}
        # Getting the type of 'self' (line 4346)
        self_110588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4346, 20), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 4346)
        get_transform_110589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4346, 20), self_110588, 'get_transform')
        # Calling get_transform(args, kwargs) (line 4346)
        get_transform_call_result_110591 = invoke(stypy.reporting.localization.Localization(__file__, 4346, 20), get_transform_110589, *[], **kwargs_110590)
        
        # Obtaining the member 'transform_path' of a type (line 4346)
        transform_path_110592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4346, 20), get_transform_call_result_110591, 'transform_path')
        # Calling transform_path(args, kwargs) (line 4346)
        transform_path_call_result_110596 = invoke(stypy.reporting.localization.Localization(__file__, 4346, 20), transform_path_110592, *[_path_original_110594], **kwargs_110595)
        
        # Assigning a type to the variable '_path' (line 4346)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4346, 12), '_path', transform_path_call_result_110596)
        # SSA join for if statement (line 4336)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 4348):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to (...): (line 4348)
        # Processing the call arguments (line 4348)
        # Getting the type of '_path' (line 4349)
        _path_110601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4349, 12), '_path', False)
        
        # Call to get_mutation_scale(...): (line 4350)
        # Processing the call keyword arguments (line 4350)
        kwargs_110604 = {}
        # Getting the type of 'self' (line 4350)
        self_110602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4350, 12), 'self', False)
        # Obtaining the member 'get_mutation_scale' of a type (line 4350)
        get_mutation_scale_110603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4350, 12), self_110602, 'get_mutation_scale')
        # Calling get_mutation_scale(args, kwargs) (line 4350)
        get_mutation_scale_call_result_110605 = invoke(stypy.reporting.localization.Localization(__file__, 4350, 12), get_mutation_scale_110603, *[], **kwargs_110604)
        
        # Getting the type of 'dpi_cor' (line 4350)
        dpi_cor_110606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4350, 40), 'dpi_cor', False)
        # Applying the binary operator '*' (line 4350)
        result_mul_110607 = python_operator(stypy.reporting.localization.Localization(__file__, 4350, 12), '*', get_mutation_scale_call_result_110605, dpi_cor_110606)
        
        
        # Call to get_linewidth(...): (line 4351)
        # Processing the call keyword arguments (line 4351)
        kwargs_110610 = {}
        # Getting the type of 'self' (line 4351)
        self_110608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4351, 12), 'self', False)
        # Obtaining the member 'get_linewidth' of a type (line 4351)
        get_linewidth_110609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4351, 12), self_110608, 'get_linewidth')
        # Calling get_linewidth(args, kwargs) (line 4351)
        get_linewidth_call_result_110611 = invoke(stypy.reporting.localization.Localization(__file__, 4351, 12), get_linewidth_110609, *[], **kwargs_110610)
        
        # Getting the type of 'dpi_cor' (line 4351)
        dpi_cor_110612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4351, 35), 'dpi_cor', False)
        # Applying the binary operator '*' (line 4351)
        result_mul_110613 = python_operator(stypy.reporting.localization.Localization(__file__, 4351, 12), '*', get_linewidth_call_result_110611, dpi_cor_110612)
        
        
        # Call to get_mutation_aspect(...): (line 4352)
        # Processing the call keyword arguments (line 4352)
        kwargs_110616 = {}
        # Getting the type of 'self' (line 4352)
        self_110614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4352, 12), 'self', False)
        # Obtaining the member 'get_mutation_aspect' of a type (line 4352)
        get_mutation_aspect_110615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4352, 12), self_110614, 'get_mutation_aspect')
        # Calling get_mutation_aspect(args, kwargs) (line 4352)
        get_mutation_aspect_call_result_110617 = invoke(stypy.reporting.localization.Localization(__file__, 4352, 12), get_mutation_aspect_110615, *[], **kwargs_110616)
        
        # Processing the call keyword arguments (line 4348)
        kwargs_110618 = {}
        
        # Call to get_arrowstyle(...): (line 4348)
        # Processing the call keyword arguments (line 4348)
        kwargs_110599 = {}
        # Getting the type of 'self' (line 4348)
        self_110597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4348, 26), 'self', False)
        # Obtaining the member 'get_arrowstyle' of a type (line 4348)
        get_arrowstyle_110598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4348, 26), self_110597, 'get_arrowstyle')
        # Calling get_arrowstyle(args, kwargs) (line 4348)
        get_arrowstyle_call_result_110600 = invoke(stypy.reporting.localization.Localization(__file__, 4348, 26), get_arrowstyle_110598, *[], **kwargs_110599)
        
        # Calling (args, kwargs) (line 4348)
        _call_result_110619 = invoke(stypy.reporting.localization.Localization(__file__, 4348, 26), get_arrowstyle_call_result_110600, *[_path_110601, result_mul_110607, result_mul_110613, get_mutation_aspect_call_result_110617], **kwargs_110618)
        
        # Assigning a type to the variable 'call_assignment_100743' (line 4348)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4348, 8), 'call_assignment_100743', _call_result_110619)
        
        # Assigning a Call to a Name (line 4348):
        
        # Assigning a Call to a Name (line 4348):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_110622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4348, 8), 'int')
        # Processing the call keyword arguments
        kwargs_110623 = {}
        # Getting the type of 'call_assignment_100743' (line 4348)
        call_assignment_100743_110620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4348, 8), 'call_assignment_100743', False)
        # Obtaining the member '__getitem__' of a type (line 4348)
        getitem___110621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4348, 8), call_assignment_100743_110620, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_110624 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___110621, *[int_110622], **kwargs_110623)
        
        # Assigning a type to the variable 'call_assignment_100744' (line 4348)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4348, 8), 'call_assignment_100744', getitem___call_result_110624)
        
        # Assigning a Name to a Name (line 4348):
        
        # Assigning a Name to a Name (line 4348):
        # Getting the type of 'call_assignment_100744' (line 4348)
        call_assignment_100744_110625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4348, 8), 'call_assignment_100744')
        # Assigning a type to the variable '_path' (line 4348)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4348, 8), '_path', call_assignment_100744_110625)
        
        # Assigning a Call to a Name (line 4348):
        
        # Assigning a Call to a Name (line 4348):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_110628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4348, 8), 'int')
        # Processing the call keyword arguments
        kwargs_110629 = {}
        # Getting the type of 'call_assignment_100743' (line 4348)
        call_assignment_100743_110626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4348, 8), 'call_assignment_100743', False)
        # Obtaining the member '__getitem__' of a type (line 4348)
        getitem___110627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4348, 8), call_assignment_100743_110626, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_110630 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___110627, *[int_110628], **kwargs_110629)
        
        # Assigning a type to the variable 'call_assignment_100745' (line 4348)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4348, 8), 'call_assignment_100745', getitem___call_result_110630)
        
        # Assigning a Name to a Name (line 4348):
        
        # Assigning a Name to a Name (line 4348):
        # Getting the type of 'call_assignment_100745' (line 4348)
        call_assignment_100745_110631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4348, 8), 'call_assignment_100745')
        # Assigning a type to the variable 'fillable' (line 4348)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4348, 15), 'fillable', call_assignment_100745_110631)
        
        # Obtaining an instance of the builtin type 'tuple' (line 4357)
        tuple_110632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4357, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 4357)
        # Adding element type (line 4357)
        # Getting the type of '_path' (line 4357)
        _path_110633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4357, 15), '_path')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4357, 15), tuple_110632, _path_110633)
        # Adding element type (line 4357)
        # Getting the type of 'fillable' (line 4357)
        fillable_110634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4357, 22), 'fillable')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4357, 15), tuple_110632, fillable_110634)
        
        # Assigning a type to the variable 'stypy_return_type' (line 4357)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4357, 8), 'stypy_return_type', tuple_110632)
        
        # ################# End of 'get_path_in_displaycoord(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_path_in_displaycoord' in the type store
        # Getting the type of 'stypy_return_type' (line 4329)
        stypy_return_type_110635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4329, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_110635)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_path_in_displaycoord'
        return stypy_return_type_110635


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 4359, 4, False)
        # Assigning a type to the variable 'self' (line 4360)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4360, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FancyArrowPatch.draw.__dict__.__setitem__('stypy_localization', localization)
        FancyArrowPatch.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FancyArrowPatch.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        FancyArrowPatch.draw.__dict__.__setitem__('stypy_function_name', 'FancyArrowPatch.draw')
        FancyArrowPatch.draw.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        FancyArrowPatch.draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        FancyArrowPatch.draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FancyArrowPatch.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        FancyArrowPatch.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        FancyArrowPatch.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FancyArrowPatch.draw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FancyArrowPatch.draw', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        
        
        
        # Call to get_visible(...): (line 4360)
        # Processing the call keyword arguments (line 4360)
        kwargs_110638 = {}
        # Getting the type of 'self' (line 4360)
        self_110636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4360, 15), 'self', False)
        # Obtaining the member 'get_visible' of a type (line 4360)
        get_visible_110637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4360, 15), self_110636, 'get_visible')
        # Calling get_visible(args, kwargs) (line 4360)
        get_visible_call_result_110639 = invoke(stypy.reporting.localization.Localization(__file__, 4360, 15), get_visible_110637, *[], **kwargs_110638)
        
        # Applying the 'not' unary operator (line 4360)
        result_not__110640 = python_operator(stypy.reporting.localization.Localization(__file__, 4360, 11), 'not', get_visible_call_result_110639)
        
        # Testing the type of an if condition (line 4360)
        if_condition_110641 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4360, 8), result_not__110640)
        # Assigning a type to the variable 'if_condition_110641' (line 4360)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4360, 8), 'if_condition_110641', if_condition_110641)
        # SSA begins for if statement (line 4360)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 4361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4361, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 4360)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to open_group(...): (line 4363)
        # Processing the call arguments (line 4363)
        unicode_110644 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4363, 28), 'unicode', u'patch')
        
        # Call to get_gid(...): (line 4363)
        # Processing the call keyword arguments (line 4363)
        kwargs_110647 = {}
        # Getting the type of 'self' (line 4363)
        self_110645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4363, 37), 'self', False)
        # Obtaining the member 'get_gid' of a type (line 4363)
        get_gid_110646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4363, 37), self_110645, 'get_gid')
        # Calling get_gid(args, kwargs) (line 4363)
        get_gid_call_result_110648 = invoke(stypy.reporting.localization.Localization(__file__, 4363, 37), get_gid_110646, *[], **kwargs_110647)
        
        # Processing the call keyword arguments (line 4363)
        kwargs_110649 = {}
        # Getting the type of 'renderer' (line 4363)
        renderer_110642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4363, 8), 'renderer', False)
        # Obtaining the member 'open_group' of a type (line 4363)
        open_group_110643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4363, 8), renderer_110642, 'open_group')
        # Calling open_group(args, kwargs) (line 4363)
        open_group_call_result_110650 = invoke(stypy.reporting.localization.Localization(__file__, 4363, 8), open_group_110643, *[unicode_110644, get_gid_call_result_110648], **kwargs_110649)
        
        
        # Assigning a Call to a Name (line 4364):
        
        # Assigning a Call to a Name (line 4364):
        
        # Assigning a Call to a Name (line 4364):
        
        # Call to new_gc(...): (line 4364)
        # Processing the call keyword arguments (line 4364)
        kwargs_110653 = {}
        # Getting the type of 'renderer' (line 4364)
        renderer_110651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4364, 13), 'renderer', False)
        # Obtaining the member 'new_gc' of a type (line 4364)
        new_gc_110652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4364, 13), renderer_110651, 'new_gc')
        # Calling new_gc(args, kwargs) (line 4364)
        new_gc_call_result_110654 = invoke(stypy.reporting.localization.Localization(__file__, 4364, 13), new_gc_110652, *[], **kwargs_110653)
        
        # Assigning a type to the variable 'gc' (line 4364)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4364, 8), 'gc', new_gc_call_result_110654)
        
        # Call to set_foreground(...): (line 4366)
        # Processing the call arguments (line 4366)
        # Getting the type of 'self' (line 4366)
        self_110657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4366, 26), 'self', False)
        # Obtaining the member '_edgecolor' of a type (line 4366)
        _edgecolor_110658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4366, 26), self_110657, '_edgecolor')
        # Processing the call keyword arguments (line 4366)
        # Getting the type of 'True' (line 4366)
        True_110659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4366, 50), 'True', False)
        keyword_110660 = True_110659
        kwargs_110661 = {'isRGBA': keyword_110660}
        # Getting the type of 'gc' (line 4366)
        gc_110655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4366, 8), 'gc', False)
        # Obtaining the member 'set_foreground' of a type (line 4366)
        set_foreground_110656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4366, 8), gc_110655, 'set_foreground')
        # Calling set_foreground(args, kwargs) (line 4366)
        set_foreground_call_result_110662 = invoke(stypy.reporting.localization.Localization(__file__, 4366, 8), set_foreground_110656, *[_edgecolor_110658], **kwargs_110661)
        
        
        # Assigning a Attribute to a Name (line 4368):
        
        # Assigning a Attribute to a Name (line 4368):
        
        # Assigning a Attribute to a Name (line 4368):
        # Getting the type of 'self' (line 4368)
        self_110663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4368, 13), 'self')
        # Obtaining the member '_linewidth' of a type (line 4368)
        _linewidth_110664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4368, 13), self_110663, '_linewidth')
        # Assigning a type to the variable 'lw' (line 4368)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4368, 8), 'lw', _linewidth_110664)
        
        
        
        # Obtaining the type of the subscript
        int_110665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4369, 27), 'int')
        # Getting the type of 'self' (line 4369)
        self_110666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4369, 11), 'self')
        # Obtaining the member '_edgecolor' of a type (line 4369)
        _edgecolor_110667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4369, 11), self_110666, '_edgecolor')
        # Obtaining the member '__getitem__' of a type (line 4369)
        getitem___110668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4369, 11), _edgecolor_110667, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4369)
        subscript_call_result_110669 = invoke(stypy.reporting.localization.Localization(__file__, 4369, 11), getitem___110668, int_110665)
        
        int_110670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4369, 33), 'int')
        # Applying the binary operator '==' (line 4369)
        result_eq_110671 = python_operator(stypy.reporting.localization.Localization(__file__, 4369, 11), '==', subscript_call_result_110669, int_110670)
        
        # Testing the type of an if condition (line 4369)
        if_condition_110672 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4369, 8), result_eq_110671)
        # Assigning a type to the variable 'if_condition_110672' (line 4369)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4369, 8), 'if_condition_110672', if_condition_110672)
        # SSA begins for if statement (line 4369)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 4370):
        
        # Assigning a Num to a Name (line 4370):
        
        # Assigning a Num to a Name (line 4370):
        int_110673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4370, 17), 'int')
        # Assigning a type to the variable 'lw' (line 4370)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4370, 12), 'lw', int_110673)
        # SSA join for if statement (line 4369)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_linewidth(...): (line 4371)
        # Processing the call arguments (line 4371)
        # Getting the type of 'lw' (line 4371)
        lw_110676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4371, 25), 'lw', False)
        # Processing the call keyword arguments (line 4371)
        kwargs_110677 = {}
        # Getting the type of 'gc' (line 4371)
        gc_110674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4371, 8), 'gc', False)
        # Obtaining the member 'set_linewidth' of a type (line 4371)
        set_linewidth_110675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4371, 8), gc_110674, 'set_linewidth')
        # Calling set_linewidth(args, kwargs) (line 4371)
        set_linewidth_call_result_110678 = invoke(stypy.reporting.localization.Localization(__file__, 4371, 8), set_linewidth_110675, *[lw_110676], **kwargs_110677)
        
        
        # Call to set_dashes(...): (line 4372)
        # Processing the call arguments (line 4372)
        # Getting the type of 'self' (line 4372)
        self_110681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4372, 22), 'self', False)
        # Obtaining the member '_dashoffset' of a type (line 4372)
        _dashoffset_110682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4372, 22), self_110681, '_dashoffset')
        # Getting the type of 'self' (line 4372)
        self_110683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4372, 40), 'self', False)
        # Obtaining the member '_dashes' of a type (line 4372)
        _dashes_110684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4372, 40), self_110683, '_dashes')
        # Processing the call keyword arguments (line 4372)
        kwargs_110685 = {}
        # Getting the type of 'gc' (line 4372)
        gc_110679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4372, 8), 'gc', False)
        # Obtaining the member 'set_dashes' of a type (line 4372)
        set_dashes_110680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4372, 8), gc_110679, 'set_dashes')
        # Calling set_dashes(args, kwargs) (line 4372)
        set_dashes_call_result_110686 = invoke(stypy.reporting.localization.Localization(__file__, 4372, 8), set_dashes_110680, *[_dashoffset_110682, _dashes_110684], **kwargs_110685)
        
        
        # Call to set_antialiased(...): (line 4374)
        # Processing the call arguments (line 4374)
        # Getting the type of 'self' (line 4374)
        self_110689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4374, 27), 'self', False)
        # Obtaining the member '_antialiased' of a type (line 4374)
        _antialiased_110690 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4374, 27), self_110689, '_antialiased')
        # Processing the call keyword arguments (line 4374)
        kwargs_110691 = {}
        # Getting the type of 'gc' (line 4374)
        gc_110687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4374, 8), 'gc', False)
        # Obtaining the member 'set_antialiased' of a type (line 4374)
        set_antialiased_110688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4374, 8), gc_110687, 'set_antialiased')
        # Calling set_antialiased(args, kwargs) (line 4374)
        set_antialiased_call_result_110692 = invoke(stypy.reporting.localization.Localization(__file__, 4374, 8), set_antialiased_110688, *[_antialiased_110690], **kwargs_110691)
        
        
        # Call to _set_gc_clip(...): (line 4375)
        # Processing the call arguments (line 4375)
        # Getting the type of 'gc' (line 4375)
        gc_110695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4375, 26), 'gc', False)
        # Processing the call keyword arguments (line 4375)
        kwargs_110696 = {}
        # Getting the type of 'self' (line 4375)
        self_110693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4375, 8), 'self', False)
        # Obtaining the member '_set_gc_clip' of a type (line 4375)
        _set_gc_clip_110694 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4375, 8), self_110693, '_set_gc_clip')
        # Calling _set_gc_clip(args, kwargs) (line 4375)
        _set_gc_clip_call_result_110697 = invoke(stypy.reporting.localization.Localization(__file__, 4375, 8), _set_gc_clip_110694, *[gc_110695], **kwargs_110696)
        
        
        # Call to set_capstyle(...): (line 4376)
        # Processing the call arguments (line 4376)
        unicode_110700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4376, 24), 'unicode', u'round')
        # Processing the call keyword arguments (line 4376)
        kwargs_110701 = {}
        # Getting the type of 'gc' (line 4376)
        gc_110698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4376, 8), 'gc', False)
        # Obtaining the member 'set_capstyle' of a type (line 4376)
        set_capstyle_110699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4376, 8), gc_110698, 'set_capstyle')
        # Calling set_capstyle(args, kwargs) (line 4376)
        set_capstyle_call_result_110702 = invoke(stypy.reporting.localization.Localization(__file__, 4376, 8), set_capstyle_110699, *[unicode_110700], **kwargs_110701)
        
        
        # Call to set_snap(...): (line 4377)
        # Processing the call arguments (line 4377)
        
        # Call to get_snap(...): (line 4377)
        # Processing the call keyword arguments (line 4377)
        kwargs_110707 = {}
        # Getting the type of 'self' (line 4377)
        self_110705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4377, 20), 'self', False)
        # Obtaining the member 'get_snap' of a type (line 4377)
        get_snap_110706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4377, 20), self_110705, 'get_snap')
        # Calling get_snap(args, kwargs) (line 4377)
        get_snap_call_result_110708 = invoke(stypy.reporting.localization.Localization(__file__, 4377, 20), get_snap_110706, *[], **kwargs_110707)
        
        # Processing the call keyword arguments (line 4377)
        kwargs_110709 = {}
        # Getting the type of 'gc' (line 4377)
        gc_110703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4377, 8), 'gc', False)
        # Obtaining the member 'set_snap' of a type (line 4377)
        set_snap_110704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4377, 8), gc_110703, 'set_snap')
        # Calling set_snap(args, kwargs) (line 4377)
        set_snap_call_result_110710 = invoke(stypy.reporting.localization.Localization(__file__, 4377, 8), set_snap_110704, *[get_snap_call_result_110708], **kwargs_110709)
        
        
        # Assigning a Attribute to a Name (line 4379):
        
        # Assigning a Attribute to a Name (line 4379):
        
        # Assigning a Attribute to a Name (line 4379):
        # Getting the type of 'self' (line 4379)
        self_110711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4379, 18), 'self')
        # Obtaining the member '_facecolor' of a type (line 4379)
        _facecolor_110712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4379, 18), self_110711, '_facecolor')
        # Assigning a type to the variable 'rgbFace' (line 4379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4379, 8), 'rgbFace', _facecolor_110712)
        
        
        
        # Obtaining the type of the subscript
        int_110713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4380, 19), 'int')
        # Getting the type of 'rgbFace' (line 4380)
        rgbFace_110714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4380, 11), 'rgbFace')
        # Obtaining the member '__getitem__' of a type (line 4380)
        getitem___110715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4380, 11), rgbFace_110714, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4380)
        subscript_call_result_110716 = invoke(stypy.reporting.localization.Localization(__file__, 4380, 11), getitem___110715, int_110713)
        
        int_110717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4380, 25), 'int')
        # Applying the binary operator '==' (line 4380)
        result_eq_110718 = python_operator(stypy.reporting.localization.Localization(__file__, 4380, 11), '==', subscript_call_result_110716, int_110717)
        
        # Testing the type of an if condition (line 4380)
        if_condition_110719 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4380, 8), result_eq_110718)
        # Assigning a type to the variable 'if_condition_110719' (line 4380)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4380, 8), 'if_condition_110719', if_condition_110719)
        # SSA begins for if statement (line 4380)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 4381):
        
        # Assigning a Name to a Name (line 4381):
        
        # Assigning a Name to a Name (line 4381):
        # Getting the type of 'None' (line 4381)
        None_110720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4381, 22), 'None')
        # Assigning a type to the variable 'rgbFace' (line 4381)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4381, 12), 'rgbFace', None_110720)
        # SSA join for if statement (line 4380)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_alpha(...): (line 4383)
        # Processing the call arguments (line 4383)
        # Getting the type of 'self' (line 4383)
        self_110723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4383, 21), 'self', False)
        # Obtaining the member '_alpha' of a type (line 4383)
        _alpha_110724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4383, 21), self_110723, '_alpha')
        # Processing the call keyword arguments (line 4383)
        kwargs_110725 = {}
        # Getting the type of 'gc' (line 4383)
        gc_110721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4383, 8), 'gc', False)
        # Obtaining the member 'set_alpha' of a type (line 4383)
        set_alpha_110722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4383, 8), gc_110721, 'set_alpha')
        # Calling set_alpha(args, kwargs) (line 4383)
        set_alpha_call_result_110726 = invoke(stypy.reporting.localization.Localization(__file__, 4383, 8), set_alpha_110722, *[_alpha_110724], **kwargs_110725)
        
        
        # Getting the type of 'self' (line 4385)
        self_110727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4385, 11), 'self')
        # Obtaining the member '_hatch' of a type (line 4385)
        _hatch_110728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4385, 11), self_110727, '_hatch')
        # Testing the type of an if condition (line 4385)
        if_condition_110729 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4385, 8), _hatch_110728)
        # Assigning a type to the variable 'if_condition_110729' (line 4385)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4385, 8), 'if_condition_110729', if_condition_110729)
        # SSA begins for if statement (line 4385)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_hatch(...): (line 4386)
        # Processing the call arguments (line 4386)
        # Getting the type of 'self' (line 4386)
        self_110732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4386, 25), 'self', False)
        # Obtaining the member '_hatch' of a type (line 4386)
        _hatch_110733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4386, 25), self_110732, '_hatch')
        # Processing the call keyword arguments (line 4386)
        kwargs_110734 = {}
        # Getting the type of 'gc' (line 4386)
        gc_110730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4386, 12), 'gc', False)
        # Obtaining the member 'set_hatch' of a type (line 4386)
        set_hatch_110731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4386, 12), gc_110730, 'set_hatch')
        # Calling set_hatch(args, kwargs) (line 4386)
        set_hatch_call_result_110735 = invoke(stypy.reporting.localization.Localization(__file__, 4386, 12), set_hatch_110731, *[_hatch_110733], **kwargs_110734)
        
        
        
        # Getting the type of 'self' (line 4387)
        self_110736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4387, 15), 'self')
        # Obtaining the member '_hatch_color' of a type (line 4387)
        _hatch_color_110737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4387, 15), self_110736, '_hatch_color')
        # Getting the type of 'None' (line 4387)
        None_110738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4387, 40), 'None')
        # Applying the binary operator 'isnot' (line 4387)
        result_is_not_110739 = python_operator(stypy.reporting.localization.Localization(__file__, 4387, 15), 'isnot', _hatch_color_110737, None_110738)
        
        # Testing the type of an if condition (line 4387)
        if_condition_110740 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4387, 12), result_is_not_110739)
        # Assigning a type to the variable 'if_condition_110740' (line 4387)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4387, 12), 'if_condition_110740', if_condition_110740)
        # SSA begins for if statement (line 4387)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # SSA begins for try-except statement (line 4388)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to set_hatch_color(...): (line 4389)
        # Processing the call arguments (line 4389)
        # Getting the type of 'self' (line 4389)
        self_110743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4389, 39), 'self', False)
        # Obtaining the member '_hatch_color' of a type (line 4389)
        _hatch_color_110744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4389, 39), self_110743, '_hatch_color')
        # Processing the call keyword arguments (line 4389)
        kwargs_110745 = {}
        # Getting the type of 'gc' (line 4389)
        gc_110741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4389, 20), 'gc', False)
        # Obtaining the member 'set_hatch_color' of a type (line 4389)
        set_hatch_color_110742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4389, 20), gc_110741, 'set_hatch_color')
        # Calling set_hatch_color(args, kwargs) (line 4389)
        set_hatch_color_call_result_110746 = invoke(stypy.reporting.localization.Localization(__file__, 4389, 20), set_hatch_color_110742, *[_hatch_color_110744], **kwargs_110745)
        
        # SSA branch for the except part of a try statement (line 4388)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 4388)
        module_type_store.open_ssa_branch('except')
        
        # Call to warn(...): (line 4392)
        # Processing the call arguments (line 4392)
        unicode_110749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4392, 34), 'unicode', u'Your backend does not support setting the hatch color.')
        # Processing the call keyword arguments (line 4392)
        kwargs_110750 = {}
        # Getting the type of 'warnings' (line 4392)
        warnings_110747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4392, 20), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 4392)
        warn_110748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4392, 20), warnings_110747, 'warn')
        # Calling warn(args, kwargs) (line 4392)
        warn_call_result_110751 = invoke(stypy.reporting.localization.Localization(__file__, 4392, 20), warn_110748, *[unicode_110749], **kwargs_110750)
        
        # SSA join for try-except statement (line 4388)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 4387)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 4385)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to get_sketch_params(...): (line 4395)
        # Processing the call keyword arguments (line 4395)
        kwargs_110754 = {}
        # Getting the type of 'self' (line 4395)
        self_110752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4395, 11), 'self', False)
        # Obtaining the member 'get_sketch_params' of a type (line 4395)
        get_sketch_params_110753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4395, 11), self_110752, 'get_sketch_params')
        # Calling get_sketch_params(args, kwargs) (line 4395)
        get_sketch_params_call_result_110755 = invoke(stypy.reporting.localization.Localization(__file__, 4395, 11), get_sketch_params_110753, *[], **kwargs_110754)
        
        # Getting the type of 'None' (line 4395)
        None_110756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4395, 43), 'None')
        # Applying the binary operator 'isnot' (line 4395)
        result_is_not_110757 = python_operator(stypy.reporting.localization.Localization(__file__, 4395, 11), 'isnot', get_sketch_params_call_result_110755, None_110756)
        
        # Testing the type of an if condition (line 4395)
        if_condition_110758 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4395, 8), result_is_not_110757)
        # Assigning a type to the variable 'if_condition_110758' (line 4395)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4395, 8), 'if_condition_110758', if_condition_110758)
        # SSA begins for if statement (line 4395)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_sketch_params(...): (line 4396)
        
        # Call to get_sketch_params(...): (line 4396)
        # Processing the call keyword arguments (line 4396)
        kwargs_110763 = {}
        # Getting the type of 'self' (line 4396)
        self_110761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4396, 34), 'self', False)
        # Obtaining the member 'get_sketch_params' of a type (line 4396)
        get_sketch_params_110762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4396, 34), self_110761, 'get_sketch_params')
        # Calling get_sketch_params(args, kwargs) (line 4396)
        get_sketch_params_call_result_110764 = invoke(stypy.reporting.localization.Localization(__file__, 4396, 34), get_sketch_params_110762, *[], **kwargs_110763)
        
        # Processing the call keyword arguments (line 4396)
        kwargs_110765 = {}
        # Getting the type of 'gc' (line 4396)
        gc_110759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4396, 12), 'gc', False)
        # Obtaining the member 'set_sketch_params' of a type (line 4396)
        set_sketch_params_110760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4396, 12), gc_110759, 'set_sketch_params')
        # Calling set_sketch_params(args, kwargs) (line 4396)
        set_sketch_params_call_result_110766 = invoke(stypy.reporting.localization.Localization(__file__, 4396, 12), set_sketch_params_110760, *[get_sketch_params_call_result_110764], **kwargs_110765)
        
        # SSA join for if statement (line 4395)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_dpi_cor(...): (line 4402)
        # Processing the call arguments (line 4402)
        
        # Call to points_to_pixels(...): (line 4402)
        # Processing the call arguments (line 4402)
        float_110771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4402, 51), 'float')
        # Processing the call keyword arguments (line 4402)
        kwargs_110772 = {}
        # Getting the type of 'renderer' (line 4402)
        renderer_110769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4402, 25), 'renderer', False)
        # Obtaining the member 'points_to_pixels' of a type (line 4402)
        points_to_pixels_110770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4402, 25), renderer_110769, 'points_to_pixels')
        # Calling points_to_pixels(args, kwargs) (line 4402)
        points_to_pixels_call_result_110773 = invoke(stypy.reporting.localization.Localization(__file__, 4402, 25), points_to_pixels_110770, *[float_110771], **kwargs_110772)
        
        # Processing the call keyword arguments (line 4402)
        kwargs_110774 = {}
        # Getting the type of 'self' (line 4402)
        self_110767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4402, 8), 'self', False)
        # Obtaining the member 'set_dpi_cor' of a type (line 4402)
        set_dpi_cor_110768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4402, 8), self_110767, 'set_dpi_cor')
        # Calling set_dpi_cor(args, kwargs) (line 4402)
        set_dpi_cor_call_result_110775 = invoke(stypy.reporting.localization.Localization(__file__, 4402, 8), set_dpi_cor_110768, *[points_to_pixels_call_result_110773], **kwargs_110774)
        
        
        # Assigning a Call to a Tuple (line 4403):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to get_path_in_displaycoord(...): (line 4403)
        # Processing the call keyword arguments (line 4403)
        kwargs_110778 = {}
        # Getting the type of 'self' (line 4403)
        self_110776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4403, 25), 'self', False)
        # Obtaining the member 'get_path_in_displaycoord' of a type (line 4403)
        get_path_in_displaycoord_110777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4403, 25), self_110776, 'get_path_in_displaycoord')
        # Calling get_path_in_displaycoord(args, kwargs) (line 4403)
        get_path_in_displaycoord_call_result_110779 = invoke(stypy.reporting.localization.Localization(__file__, 4403, 25), get_path_in_displaycoord_110777, *[], **kwargs_110778)
        
        # Assigning a type to the variable 'call_assignment_100746' (line 4403)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4403, 8), 'call_assignment_100746', get_path_in_displaycoord_call_result_110779)
        
        # Assigning a Call to a Name (line 4403):
        
        # Assigning a Call to a Name (line 4403):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_110782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4403, 8), 'int')
        # Processing the call keyword arguments
        kwargs_110783 = {}
        # Getting the type of 'call_assignment_100746' (line 4403)
        call_assignment_100746_110780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4403, 8), 'call_assignment_100746', False)
        # Obtaining the member '__getitem__' of a type (line 4403)
        getitem___110781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4403, 8), call_assignment_100746_110780, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_110784 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___110781, *[int_110782], **kwargs_110783)
        
        # Assigning a type to the variable 'call_assignment_100747' (line 4403)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4403, 8), 'call_assignment_100747', getitem___call_result_110784)
        
        # Assigning a Name to a Name (line 4403):
        
        # Assigning a Name to a Name (line 4403):
        # Getting the type of 'call_assignment_100747' (line 4403)
        call_assignment_100747_110785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4403, 8), 'call_assignment_100747')
        # Assigning a type to the variable 'path' (line 4403)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4403, 8), 'path', call_assignment_100747_110785)
        
        # Assigning a Call to a Name (line 4403):
        
        # Assigning a Call to a Name (line 4403):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_110788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4403, 8), 'int')
        # Processing the call keyword arguments
        kwargs_110789 = {}
        # Getting the type of 'call_assignment_100746' (line 4403)
        call_assignment_100746_110786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4403, 8), 'call_assignment_100746', False)
        # Obtaining the member '__getitem__' of a type (line 4403)
        getitem___110787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4403, 8), call_assignment_100746_110786, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_110790 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___110787, *[int_110788], **kwargs_110789)
        
        # Assigning a type to the variable 'call_assignment_100748' (line 4403)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4403, 8), 'call_assignment_100748', getitem___call_result_110790)
        
        # Assigning a Name to a Name (line 4403):
        
        # Assigning a Name to a Name (line 4403):
        # Getting the type of 'call_assignment_100748' (line 4403)
        call_assignment_100748_110791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4403, 8), 'call_assignment_100748')
        # Assigning a type to the variable 'fillable' (line 4403)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4403, 14), 'fillable', call_assignment_100748_110791)
        
        
        
        # Call to iterable(...): (line 4405)
        # Processing the call arguments (line 4405)
        # Getting the type of 'fillable' (line 4405)
        fillable_110794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4405, 30), 'fillable', False)
        # Processing the call keyword arguments (line 4405)
        kwargs_110795 = {}
        # Getting the type of 'cbook' (line 4405)
        cbook_110792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4405, 15), 'cbook', False)
        # Obtaining the member 'iterable' of a type (line 4405)
        iterable_110793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4405, 15), cbook_110792, 'iterable')
        # Calling iterable(args, kwargs) (line 4405)
        iterable_call_result_110796 = invoke(stypy.reporting.localization.Localization(__file__, 4405, 15), iterable_110793, *[fillable_110794], **kwargs_110795)
        
        # Applying the 'not' unary operator (line 4405)
        result_not__110797 = python_operator(stypy.reporting.localization.Localization(__file__, 4405, 11), 'not', iterable_call_result_110796)
        
        # Testing the type of an if condition (line 4405)
        if_condition_110798 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4405, 8), result_not__110797)
        # Assigning a type to the variable 'if_condition_110798' (line 4405)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4405, 8), 'if_condition_110798', if_condition_110798)
        # SSA begins for if statement (line 4405)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a List to a Name (line 4406):
        
        # Assigning a List to a Name (line 4406):
        
        # Assigning a List to a Name (line 4406):
        
        # Obtaining an instance of the builtin type 'list' (line 4406)
        list_110799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4406, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 4406)
        # Adding element type (line 4406)
        # Getting the type of 'path' (line 4406)
        path_110800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4406, 20), 'path')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4406, 19), list_110799, path_110800)
        
        # Assigning a type to the variable 'path' (line 4406)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4406, 12), 'path', list_110799)
        
        # Assigning a List to a Name (line 4407):
        
        # Assigning a List to a Name (line 4407):
        
        # Assigning a List to a Name (line 4407):
        
        # Obtaining an instance of the builtin type 'list' (line 4407)
        list_110801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4407, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 4407)
        # Adding element type (line 4407)
        # Getting the type of 'fillable' (line 4407)
        fillable_110802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4407, 24), 'fillable')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4407, 23), list_110801, fillable_110802)
        
        # Assigning a type to the variable 'fillable' (line 4407)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4407, 12), 'fillable', list_110801)
        # SSA join for if statement (line 4405)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 4409):
        
        # Assigning a Call to a Name (line 4409):
        
        # Assigning a Call to a Name (line 4409):
        
        # Call to IdentityTransform(...): (line 4409)
        # Processing the call keyword arguments (line 4409)
        kwargs_110805 = {}
        # Getting the type of 'transforms' (line 4409)
        transforms_110803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4409, 17), 'transforms', False)
        # Obtaining the member 'IdentityTransform' of a type (line 4409)
        IdentityTransform_110804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4409, 17), transforms_110803, 'IdentityTransform')
        # Calling IdentityTransform(args, kwargs) (line 4409)
        IdentityTransform_call_result_110806 = invoke(stypy.reporting.localization.Localization(__file__, 4409, 17), IdentityTransform_110804, *[], **kwargs_110805)
        
        # Assigning a type to the variable 'affine' (line 4409)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4409, 8), 'affine', IdentityTransform_call_result_110806)
        
        
        # Call to get_path_effects(...): (line 4411)
        # Processing the call keyword arguments (line 4411)
        kwargs_110809 = {}
        # Getting the type of 'self' (line 4411)
        self_110807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4411, 11), 'self', False)
        # Obtaining the member 'get_path_effects' of a type (line 4411)
        get_path_effects_110808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4411, 11), self_110807, 'get_path_effects')
        # Calling get_path_effects(args, kwargs) (line 4411)
        get_path_effects_call_result_110810 = invoke(stypy.reporting.localization.Localization(__file__, 4411, 11), get_path_effects_110808, *[], **kwargs_110809)
        
        # Testing the type of an if condition (line 4411)
        if_condition_110811 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4411, 8), get_path_effects_call_result_110810)
        # Assigning a type to the variable 'if_condition_110811' (line 4411)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4411, 8), 'if_condition_110811', if_condition_110811)
        # SSA begins for if statement (line 4411)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 4412, 12))
        
        # 'from matplotlib.patheffects import PathEffectRenderer' statement (line 4412)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_110812 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 4412, 12), 'matplotlib.patheffects')

        if (type(import_110812) is not StypyTypeError):

            if (import_110812 != 'pyd_module'):
                __import__(import_110812)
                sys_modules_110813 = sys.modules[import_110812]
                import_from_module(stypy.reporting.localization.Localization(__file__, 4412, 12), 'matplotlib.patheffects', sys_modules_110813.module_type_store, module_type_store, ['PathEffectRenderer'])
                nest_module(stypy.reporting.localization.Localization(__file__, 4412, 12), __file__, sys_modules_110813, sys_modules_110813.module_type_store, module_type_store)
            else:
                from matplotlib.patheffects import PathEffectRenderer

                import_from_module(stypy.reporting.localization.Localization(__file__, 4412, 12), 'matplotlib.patheffects', None, module_type_store, ['PathEffectRenderer'], [PathEffectRenderer])

        else:
            # Assigning a type to the variable 'matplotlib.patheffects' (line 4412)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4412, 12), 'matplotlib.patheffects', import_110812)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Assigning a Call to a Name (line 4413):
        
        # Assigning a Call to a Name (line 4413):
        
        # Assigning a Call to a Name (line 4413):
        
        # Call to PathEffectRenderer(...): (line 4413)
        # Processing the call arguments (line 4413)
        
        # Call to get_path_effects(...): (line 4413)
        # Processing the call keyword arguments (line 4413)
        kwargs_110817 = {}
        # Getting the type of 'self' (line 4413)
        self_110815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4413, 42), 'self', False)
        # Obtaining the member 'get_path_effects' of a type (line 4413)
        get_path_effects_110816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4413, 42), self_110815, 'get_path_effects')
        # Calling get_path_effects(args, kwargs) (line 4413)
        get_path_effects_call_result_110818 = invoke(stypy.reporting.localization.Localization(__file__, 4413, 42), get_path_effects_110816, *[], **kwargs_110817)
        
        # Getting the type of 'renderer' (line 4413)
        renderer_110819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4413, 67), 'renderer', False)
        # Processing the call keyword arguments (line 4413)
        kwargs_110820 = {}
        # Getting the type of 'PathEffectRenderer' (line 4413)
        PathEffectRenderer_110814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4413, 23), 'PathEffectRenderer', False)
        # Calling PathEffectRenderer(args, kwargs) (line 4413)
        PathEffectRenderer_call_result_110821 = invoke(stypy.reporting.localization.Localization(__file__, 4413, 23), PathEffectRenderer_110814, *[get_path_effects_call_result_110818, renderer_110819], **kwargs_110820)
        
        # Assigning a type to the variable 'renderer' (line 4413)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4413, 12), 'renderer', PathEffectRenderer_call_result_110821)
        # SSA join for if statement (line 4411)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to zip(...): (line 4415)
        # Processing the call arguments (line 4415)
        # Getting the type of 'path' (line 4415)
        path_110823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4415, 24), 'path', False)
        # Getting the type of 'fillable' (line 4415)
        fillable_110824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4415, 30), 'fillable', False)
        # Processing the call keyword arguments (line 4415)
        kwargs_110825 = {}
        # Getting the type of 'zip' (line 4415)
        zip_110822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4415, 20), 'zip', False)
        # Calling zip(args, kwargs) (line 4415)
        zip_call_result_110826 = invoke(stypy.reporting.localization.Localization(__file__, 4415, 20), zip_110822, *[path_110823, fillable_110824], **kwargs_110825)
        
        # Testing the type of a for loop iterable (line 4415)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 4415, 8), zip_call_result_110826)
        # Getting the type of the for loop variable (line 4415)
        for_loop_var_110827 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 4415, 8), zip_call_result_110826)
        # Assigning a type to the variable 'p' (line 4415)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4415, 8), 'p', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4415, 8), for_loop_var_110827))
        # Assigning a type to the variable 'f' (line 4415)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4415, 8), 'f', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4415, 8), for_loop_var_110827))
        # SSA begins for a for statement (line 4415)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Getting the type of 'f' (line 4416)
        f_110828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4416, 15), 'f')
        # Testing the type of an if condition (line 4416)
        if_condition_110829 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4416, 12), f_110828)
        # Assigning a type to the variable 'if_condition_110829' (line 4416)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4416, 12), 'if_condition_110829', if_condition_110829)
        # SSA begins for if statement (line 4416)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw_path(...): (line 4417)
        # Processing the call arguments (line 4417)
        # Getting the type of 'gc' (line 4417)
        gc_110832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4417, 35), 'gc', False)
        # Getting the type of 'p' (line 4417)
        p_110833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4417, 39), 'p', False)
        # Getting the type of 'affine' (line 4417)
        affine_110834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4417, 42), 'affine', False)
        # Getting the type of 'rgbFace' (line 4417)
        rgbFace_110835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4417, 50), 'rgbFace', False)
        # Processing the call keyword arguments (line 4417)
        kwargs_110836 = {}
        # Getting the type of 'renderer' (line 4417)
        renderer_110830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4417, 16), 'renderer', False)
        # Obtaining the member 'draw_path' of a type (line 4417)
        draw_path_110831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4417, 16), renderer_110830, 'draw_path')
        # Calling draw_path(args, kwargs) (line 4417)
        draw_path_call_result_110837 = invoke(stypy.reporting.localization.Localization(__file__, 4417, 16), draw_path_110831, *[gc_110832, p_110833, affine_110834, rgbFace_110835], **kwargs_110836)
        
        # SSA branch for the else part of an if statement (line 4416)
        module_type_store.open_ssa_branch('else')
        
        # Call to draw_path(...): (line 4419)
        # Processing the call arguments (line 4419)
        # Getting the type of 'gc' (line 4419)
        gc_110840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4419, 35), 'gc', False)
        # Getting the type of 'p' (line 4419)
        p_110841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4419, 39), 'p', False)
        # Getting the type of 'affine' (line 4419)
        affine_110842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4419, 42), 'affine', False)
        # Getting the type of 'None' (line 4419)
        None_110843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4419, 50), 'None', False)
        # Processing the call keyword arguments (line 4419)
        kwargs_110844 = {}
        # Getting the type of 'renderer' (line 4419)
        renderer_110838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4419, 16), 'renderer', False)
        # Obtaining the member 'draw_path' of a type (line 4419)
        draw_path_110839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4419, 16), renderer_110838, 'draw_path')
        # Calling draw_path(args, kwargs) (line 4419)
        draw_path_call_result_110845 = invoke(stypy.reporting.localization.Localization(__file__, 4419, 16), draw_path_110839, *[gc_110840, p_110841, affine_110842, None_110843], **kwargs_110844)
        
        # SSA join for if statement (line 4416)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to restore(...): (line 4421)
        # Processing the call keyword arguments (line 4421)
        kwargs_110848 = {}
        # Getting the type of 'gc' (line 4421)
        gc_110846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4421, 8), 'gc', False)
        # Obtaining the member 'restore' of a type (line 4421)
        restore_110847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4421, 8), gc_110846, 'restore')
        # Calling restore(args, kwargs) (line 4421)
        restore_call_result_110849 = invoke(stypy.reporting.localization.Localization(__file__, 4421, 8), restore_110847, *[], **kwargs_110848)
        
        
        # Call to close_group(...): (line 4422)
        # Processing the call arguments (line 4422)
        unicode_110852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4422, 29), 'unicode', u'patch')
        # Processing the call keyword arguments (line 4422)
        kwargs_110853 = {}
        # Getting the type of 'renderer' (line 4422)
        renderer_110850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4422, 8), 'renderer', False)
        # Obtaining the member 'close_group' of a type (line 4422)
        close_group_110851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4422, 8), renderer_110850, 'close_group')
        # Calling close_group(args, kwargs) (line 4422)
        close_group_call_result_110854 = invoke(stypy.reporting.localization.Localization(__file__, 4422, 8), close_group_110851, *[unicode_110852], **kwargs_110853)
        
        
        # Assigning a Name to a Attribute (line 4423):
        
        # Assigning a Name to a Attribute (line 4423):
        
        # Assigning a Name to a Attribute (line 4423):
        # Getting the type of 'False' (line 4423)
        False_110855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4423, 21), 'False')
        # Getting the type of 'self' (line 4423)
        self_110856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4423, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 4423)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4423, 8), self_110856, 'stale', False_110855)
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 4359)
        stypy_return_type_110857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4359, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_110857)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_110857


# Assigning a type to the variable 'FancyArrowPatch' (line 4009)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4009, 0), 'FancyArrowPatch', FancyArrowPatch)

# Assigning a Name to a Name (line 4017):
# Getting the type of 'True' (line 4017)
True_110858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4017, 20), 'True')
# Getting the type of 'FancyArrowPatch'
FancyArrowPatch_110859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'FancyArrowPatch')
# Setting the type of the member '_edge_default' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), FancyArrowPatch_110859, '_edge_default', True_110858)
# Declaration of the 'ConnectionPatch' class
# Getting the type of 'FancyArrowPatch' (line 4426)
FancyArrowPatch_110860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4426, 22), 'FancyArrowPatch')

class ConnectionPatch(FancyArrowPatch_110860, ):
    unicode_110861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4430, (-1)), 'unicode', u'\n    A :class:`~matplotlib.patches.ConnectionPatch` class is to make\n    connecting lines between two points (possibly in different axes).\n    ')

    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 4431, 4, False)
        # Assigning a type to the variable 'self' (line 4432)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4432, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ConnectionPatch.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        ConnectionPatch.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ConnectionPatch.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        ConnectionPatch.stypy__str__.__dict__.__setitem__('stypy_function_name', 'ConnectionPatch.stypy__str__')
        ConnectionPatch.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        ConnectionPatch.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        ConnectionPatch.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ConnectionPatch.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        ConnectionPatch.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        ConnectionPatch.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ConnectionPatch.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ConnectionPatch.stypy__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        unicode_110862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4432, 15), 'unicode', u'ConnectionPatch((%g,%g),(%g,%g))')
        
        # Obtaining an instance of the builtin type 'tuple' (line 4433)
        tuple_110863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4433, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 4433)
        # Adding element type (line 4433)
        
        # Obtaining the type of the subscript
        int_110864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4433, 25), 'int')
        # Getting the type of 'self' (line 4433)
        self_110865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4433, 16), 'self')
        # Obtaining the member 'xy1' of a type (line 4433)
        xy1_110866 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4433, 16), self_110865, 'xy1')
        # Obtaining the member '__getitem__' of a type (line 4433)
        getitem___110867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4433, 16), xy1_110866, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4433)
        subscript_call_result_110868 = invoke(stypy.reporting.localization.Localization(__file__, 4433, 16), getitem___110867, int_110864)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4433, 16), tuple_110863, subscript_call_result_110868)
        # Adding element type (line 4433)
        
        # Obtaining the type of the subscript
        int_110869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4433, 38), 'int')
        # Getting the type of 'self' (line 4433)
        self_110870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4433, 29), 'self')
        # Obtaining the member 'xy1' of a type (line 4433)
        xy1_110871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4433, 29), self_110870, 'xy1')
        # Obtaining the member '__getitem__' of a type (line 4433)
        getitem___110872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4433, 29), xy1_110871, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4433)
        subscript_call_result_110873 = invoke(stypy.reporting.localization.Localization(__file__, 4433, 29), getitem___110872, int_110869)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4433, 16), tuple_110863, subscript_call_result_110873)
        # Adding element type (line 4433)
        
        # Obtaining the type of the subscript
        int_110874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4433, 51), 'int')
        # Getting the type of 'self' (line 4433)
        self_110875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4433, 42), 'self')
        # Obtaining the member 'xy2' of a type (line 4433)
        xy2_110876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4433, 42), self_110875, 'xy2')
        # Obtaining the member '__getitem__' of a type (line 4433)
        getitem___110877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4433, 42), xy2_110876, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4433)
        subscript_call_result_110878 = invoke(stypy.reporting.localization.Localization(__file__, 4433, 42), getitem___110877, int_110874)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4433, 16), tuple_110863, subscript_call_result_110878)
        # Adding element type (line 4433)
        
        # Obtaining the type of the subscript
        int_110879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4433, 64), 'int')
        # Getting the type of 'self' (line 4433)
        self_110880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4433, 55), 'self')
        # Obtaining the member 'xy2' of a type (line 4433)
        xy2_110881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4433, 55), self_110880, 'xy2')
        # Obtaining the member '__getitem__' of a type (line 4433)
        getitem___110882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4433, 55), xy2_110881, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4433)
        subscript_call_result_110883 = invoke(stypy.reporting.localization.Localization(__file__, 4433, 55), getitem___110882, int_110879)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4433, 16), tuple_110863, subscript_call_result_110883)
        
        # Applying the binary operator '%' (line 4432)
        result_mod_110884 = python_operator(stypy.reporting.localization.Localization(__file__, 4432, 15), '%', unicode_110862, tuple_110863)
        
        # Assigning a type to the variable 'stypy_return_type' (line 4432)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4432, 8), 'stypy_return_type', result_mod_110884)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 4431)
        stypy_return_type_110885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4431, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_110885)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_110885


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 4436)
        None_110886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4436, 50), 'None')
        # Getting the type of 'None' (line 4437)
        None_110887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4437, 23), 'None')
        # Getting the type of 'None' (line 4437)
        None_110888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4437, 35), 'None')
        unicode_110889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4438, 28), 'unicode', u'-')
        # Getting the type of 'None' (line 4439)
        None_110890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4439, 34), 'None')
        unicode_110891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4440, 33), 'unicode', u'arc3')
        # Getting the type of 'None' (line 4441)
        None_110892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4441, 27), 'None')
        # Getting the type of 'None' (line 4442)
        None_110893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4442, 24), 'None')
        # Getting the type of 'None' (line 4443)
        None_110894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4443, 24), 'None')
        float_110895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4444, 25), 'float')
        float_110896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4445, 25), 'float')
        float_110897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4446, 32), 'float')
        # Getting the type of 'None' (line 4447)
        None_110898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4447, 33), 'None')
        # Getting the type of 'False' (line 4448)
        False_110899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4448, 25), 'False')
        float_110900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4449, 25), 'float')
        defaults = [None_110886, None_110887, None_110888, unicode_110889, None_110890, unicode_110891, None_110892, None_110893, None_110894, float_110895, float_110896, float_110897, None_110898, False_110899, float_110900]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 4435, 4, False)
        # Assigning a type to the variable 'self' (line 4436)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4436, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ConnectionPatch.__init__', ['xyA', 'xyB', 'coordsA', 'coordsB', 'axesA', 'axesB', 'arrowstyle', 'arrow_transmuter', 'connectionstyle', 'connector', 'patchA', 'patchB', 'shrinkA', 'shrinkB', 'mutation_scale', 'mutation_aspect', 'clip_on', 'dpi_cor'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['xyA', 'xyB', 'coordsA', 'coordsB', 'axesA', 'axesB', 'arrowstyle', 'arrow_transmuter', 'connectionstyle', 'connector', 'patchA', 'patchB', 'shrinkA', 'shrinkB', 'mutation_scale', 'mutation_aspect', 'clip_on', 'dpi_cor'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_110901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4498, (-1)), 'unicode', u'\n        Connect point *xyA* in *coordsA* with point *xyB* in *coordsB*\n\n\n        Valid keys are\n\n\n        ===============  ======================================================\n        Key              Description\n        ===============  ======================================================\n        arrowstyle       the arrow style\n        connectionstyle  the connection style\n        relpos           default is (0.5, 0.5)\n        patchA           default is bounding box of the text\n        patchB           default is None\n        shrinkA          default is 2 points\n        shrinkB          default is 2 points\n        mutation_scale   default is text size (in points)\n        mutation_aspect  default is 1.\n        ?                any key for :class:`matplotlib.patches.PathPatch`\n        ===============  ======================================================\n\n\n        *coordsA* and *coordsB* are strings that indicate the\n        coordinates of *xyA* and *xyB*.\n\n        =================   ===================================================\n        Property            Description\n        =================   ===================================================\n        \'figure points\'     points from the lower left corner of the figure\n        \'figure pixels\'     pixels from the lower left corner of the figure\n        \'figure fraction\'   0,0 is lower left of figure and 1,1 is upper, right\n        \'axes points\'       points from lower left corner of axes\n        \'axes pixels\'       pixels from lower left corner of axes\n        \'axes fraction\'     0,1 is lower left of axes and 1,1 is upper right\n        \'data\'              use the coordinate system of the object being\n                            annotated (default)\n        \'offset points\'     Specify an offset (in points) from the *xy* value\n\n        \'polar\'             you can specify *theta*, *r* for the annotation,\n                            even in cartesian plots.  Note that if you\n                            are using a polar axes, you do not need\n                            to specify polar for the coordinate\n                            system since that is the native "data" coordinate\n                            system.\n        =================   ===================================================\n\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 4499)
        # Getting the type of 'coordsB' (line 4499)
        coordsB_110902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4499, 11), 'coordsB')
        # Getting the type of 'None' (line 4499)
        None_110903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4499, 22), 'None')
        
        (may_be_110904, more_types_in_union_110905) = may_be_none(coordsB_110902, None_110903)

        if may_be_110904:

            if more_types_in_union_110905:
                # Runtime conditional SSA (line 4499)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Name (line 4500):
            
            # Assigning a Name to a Name (line 4500):
            
            # Assigning a Name to a Name (line 4500):
            # Getting the type of 'coordsA' (line 4500)
            coordsA_110906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4500, 22), 'coordsA')
            # Assigning a type to the variable 'coordsB' (line 4500)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4500, 12), 'coordsB', coordsA_110906)

            if more_types_in_union_110905:
                # SSA join for if statement (line 4499)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 4502):
        
        # Assigning a Name to a Attribute (line 4502):
        
        # Assigning a Name to a Attribute (line 4502):
        # Getting the type of 'xyA' (line 4502)
        xyA_110907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4502, 19), 'xyA')
        # Getting the type of 'self' (line 4502)
        self_110908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4502, 8), 'self')
        # Setting the type of the member 'xy1' of a type (line 4502)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4502, 8), self_110908, 'xy1', xyA_110907)
        
        # Assigning a Name to a Attribute (line 4503):
        
        # Assigning a Name to a Attribute (line 4503):
        
        # Assigning a Name to a Attribute (line 4503):
        # Getting the type of 'xyB' (line 4503)
        xyB_110909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4503, 19), 'xyB')
        # Getting the type of 'self' (line 4503)
        self_110910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4503, 8), 'self')
        # Setting the type of the member 'xy2' of a type (line 4503)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4503, 8), self_110910, 'xy2', xyB_110909)
        
        # Assigning a Name to a Attribute (line 4504):
        
        # Assigning a Name to a Attribute (line 4504):
        
        # Assigning a Name to a Attribute (line 4504):
        # Getting the type of 'coordsA' (line 4504)
        coordsA_110911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4504, 23), 'coordsA')
        # Getting the type of 'self' (line 4504)
        self_110912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4504, 8), 'self')
        # Setting the type of the member 'coords1' of a type (line 4504)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4504, 8), self_110912, 'coords1', coordsA_110911)
        
        # Assigning a Name to a Attribute (line 4505):
        
        # Assigning a Name to a Attribute (line 4505):
        
        # Assigning a Name to a Attribute (line 4505):
        # Getting the type of 'coordsB' (line 4505)
        coordsB_110913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4505, 23), 'coordsB')
        # Getting the type of 'self' (line 4505)
        self_110914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4505, 8), 'self')
        # Setting the type of the member 'coords2' of a type (line 4505)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4505, 8), self_110914, 'coords2', coordsB_110913)
        
        # Assigning a Name to a Attribute (line 4507):
        
        # Assigning a Name to a Attribute (line 4507):
        
        # Assigning a Name to a Attribute (line 4507):
        # Getting the type of 'axesA' (line 4507)
        axesA_110915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4507, 21), 'axesA')
        # Getting the type of 'self' (line 4507)
        self_110916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4507, 8), 'self')
        # Setting the type of the member 'axesA' of a type (line 4507)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4507, 8), self_110916, 'axesA', axesA_110915)
        
        # Assigning a Name to a Attribute (line 4508):
        
        # Assigning a Name to a Attribute (line 4508):
        
        # Assigning a Name to a Attribute (line 4508):
        # Getting the type of 'axesB' (line 4508)
        axesB_110917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4508, 21), 'axesB')
        # Getting the type of 'self' (line 4508)
        self_110918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4508, 8), 'self')
        # Setting the type of the member 'axesB' of a type (line 4508)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4508, 8), self_110918, 'axesB', axesB_110917)
        
        # Call to __init__(...): (line 4510)
        # Processing the call arguments (line 4510)
        # Getting the type of 'self' (line 4510)
        self_110921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4510, 33), 'self', False)
        # Processing the call keyword arguments (line 4510)
        
        # Obtaining an instance of the builtin type 'tuple' (line 4511)
        tuple_110922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4511, 39), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 4511)
        # Adding element type (line 4511)
        int_110923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4511, 39), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4511, 39), tuple_110922, int_110923)
        # Adding element type (line 4511)
        int_110924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4511, 42), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4511, 39), tuple_110922, int_110924)
        
        keyword_110925 = tuple_110922
        
        # Obtaining an instance of the builtin type 'tuple' (line 4511)
        tuple_110926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4511, 52), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 4511)
        # Adding element type (line 4511)
        int_110927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4511, 52), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4511, 52), tuple_110926, int_110927)
        # Adding element type (line 4511)
        int_110928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4511, 55), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4511, 52), tuple_110926, int_110928)
        
        keyword_110929 = tuple_110926
        # Getting the type of 'arrowstyle' (line 4512)
        arrowstyle_110930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4512, 44), 'arrowstyle', False)
        keyword_110931 = arrowstyle_110930
        # Getting the type of 'arrow_transmuter' (line 4513)
        arrow_transmuter_110932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4513, 50), 'arrow_transmuter', False)
        keyword_110933 = arrow_transmuter_110932
        # Getting the type of 'connectionstyle' (line 4514)
        connectionstyle_110934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4514, 49), 'connectionstyle', False)
        keyword_110935 = connectionstyle_110934
        # Getting the type of 'connector' (line 4515)
        connector_110936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4515, 43), 'connector', False)
        keyword_110937 = connector_110936
        # Getting the type of 'patchA' (line 4516)
        patchA_110938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4516, 40), 'patchA', False)
        keyword_110939 = patchA_110938
        # Getting the type of 'patchB' (line 4517)
        patchB_110940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4517, 40), 'patchB', False)
        keyword_110941 = patchB_110940
        # Getting the type of 'shrinkA' (line 4518)
        shrinkA_110942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4518, 41), 'shrinkA', False)
        keyword_110943 = shrinkA_110942
        # Getting the type of 'shrinkB' (line 4519)
        shrinkB_110944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4519, 41), 'shrinkB', False)
        keyword_110945 = shrinkB_110944
        # Getting the type of 'mutation_scale' (line 4520)
        mutation_scale_110946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4520, 48), 'mutation_scale', False)
        keyword_110947 = mutation_scale_110946
        # Getting the type of 'mutation_aspect' (line 4521)
        mutation_aspect_110948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4521, 49), 'mutation_aspect', False)
        keyword_110949 = mutation_aspect_110948
        # Getting the type of 'clip_on' (line 4522)
        clip_on_110950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4522, 41), 'clip_on', False)
        keyword_110951 = clip_on_110950
        # Getting the type of 'dpi_cor' (line 4523)
        dpi_cor_110952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4523, 41), 'dpi_cor', False)
        keyword_110953 = dpi_cor_110952
        # Getting the type of 'kwargs' (line 4524)
        kwargs_110954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4524, 35), 'kwargs', False)
        kwargs_110955 = {'connectionstyle': keyword_110935, 'mutation_scale': keyword_110947, 'arrowstyle': keyword_110931, 'clip_on': keyword_110951, 'arrow_transmuter': keyword_110933, 'kwargs_110954': kwargs_110954, 'mutation_aspect': keyword_110949, 'posB': keyword_110929, 'posA': keyword_110925, 'connector': keyword_110937, 'shrinkB': keyword_110945, 'shrinkA': keyword_110943, 'patchA': keyword_110939, 'patchB': keyword_110941, 'dpi_cor': keyword_110953}
        # Getting the type of 'FancyArrowPatch' (line 4510)
        FancyArrowPatch_110919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4510, 8), 'FancyArrowPatch', False)
        # Obtaining the member '__init__' of a type (line 4510)
        init___110920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4510, 8), FancyArrowPatch_110919, '__init__')
        # Calling __init__(args, kwargs) (line 4510)
        init___call_result_110956 = invoke(stypy.reporting.localization.Localization(__file__, 4510, 8), init___110920, *[self_110921], **kwargs_110955)
        
        
        # Assigning a Name to a Attribute (line 4527):
        
        # Assigning a Name to a Attribute (line 4527):
        
        # Assigning a Name to a Attribute (line 4527):
        # Getting the type of 'None' (line 4527)
        None_110957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4527, 32), 'None')
        # Getting the type of 'self' (line 4527)
        self_110958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4527, 8), 'self')
        # Setting the type of the member '_annotation_clip' of a type (line 4527)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4527, 8), self_110958, '_annotation_clip', None_110957)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _get_xy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 4529)
        None_110959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4529, 36), 'None')
        defaults = [None_110959]
        # Create a new context for function '_get_xy'
        module_type_store = module_type_store.open_function_context('_get_xy', 4529, 4, False)
        # Assigning a type to the variable 'self' (line 4530)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4530, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ConnectionPatch._get_xy.__dict__.__setitem__('stypy_localization', localization)
        ConnectionPatch._get_xy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ConnectionPatch._get_xy.__dict__.__setitem__('stypy_type_store', module_type_store)
        ConnectionPatch._get_xy.__dict__.__setitem__('stypy_function_name', 'ConnectionPatch._get_xy')
        ConnectionPatch._get_xy.__dict__.__setitem__('stypy_param_names_list', ['x', 'y', 's', 'axes'])
        ConnectionPatch._get_xy.__dict__.__setitem__('stypy_varargs_param_name', None)
        ConnectionPatch._get_xy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ConnectionPatch._get_xy.__dict__.__setitem__('stypy_call_defaults', defaults)
        ConnectionPatch._get_xy.__dict__.__setitem__('stypy_call_varargs', varargs)
        ConnectionPatch._get_xy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ConnectionPatch._get_xy.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ConnectionPatch._get_xy', ['x', 'y', 's', 'axes'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_xy', localization, ['x', 'y', 's', 'axes'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_xy(...)' code ##################

        unicode_110960 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4532, (-1)), 'unicode', u'\n        caculate the pixel position of given point\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 4534)
        # Getting the type of 'axes' (line 4534)
        axes_110961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4534, 11), 'axes')
        # Getting the type of 'None' (line 4534)
        None_110962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4534, 19), 'None')
        
        (may_be_110963, more_types_in_union_110964) = may_be_none(axes_110961, None_110962)

        if may_be_110963:

            if more_types_in_union_110964:
                # Runtime conditional SSA (line 4534)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 4535):
            
            # Assigning a Attribute to a Name (line 4535):
            
            # Assigning a Attribute to a Name (line 4535):
            # Getting the type of 'self' (line 4535)
            self_110965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4535, 19), 'self')
            # Obtaining the member 'axes' of a type (line 4535)
            axes_110966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4535, 19), self_110965, 'axes')
            # Assigning a type to the variable 'axes' (line 4535)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4535, 12), 'axes', axes_110966)

            if more_types_in_union_110964:
                # SSA join for if statement (line 4534)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 's' (line 4537)
        s_110967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4537, 11), 's')
        unicode_110968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4537, 16), 'unicode', u'data')
        # Applying the binary operator '==' (line 4537)
        result_eq_110969 = python_operator(stypy.reporting.localization.Localization(__file__, 4537, 11), '==', s_110967, unicode_110968)
        
        # Testing the type of an if condition (line 4537)
        if_condition_110970 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4537, 8), result_eq_110969)
        # Assigning a type to the variable 'if_condition_110970' (line 4537)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4537, 8), 'if_condition_110970', if_condition_110970)
        # SSA begins for if statement (line 4537)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 4538):
        
        # Assigning a Attribute to a Name (line 4538):
        
        # Assigning a Attribute to a Name (line 4538):
        # Getting the type of 'axes' (line 4538)
        axes_110971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4538, 20), 'axes')
        # Obtaining the member 'transData' of a type (line 4538)
        transData_110972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4538, 20), axes_110971, 'transData')
        # Assigning a type to the variable 'trans' (line 4538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4538, 12), 'trans', transData_110972)
        
        # Assigning a Call to a Name (line 4539):
        
        # Assigning a Call to a Name (line 4539):
        
        # Assigning a Call to a Name (line 4539):
        
        # Call to float(...): (line 4539)
        # Processing the call arguments (line 4539)
        
        # Call to convert_xunits(...): (line 4539)
        # Processing the call arguments (line 4539)
        # Getting the type of 'x' (line 4539)
        x_110976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4539, 42), 'x', False)
        # Processing the call keyword arguments (line 4539)
        kwargs_110977 = {}
        # Getting the type of 'self' (line 4539)
        self_110974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4539, 22), 'self', False)
        # Obtaining the member 'convert_xunits' of a type (line 4539)
        convert_xunits_110975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4539, 22), self_110974, 'convert_xunits')
        # Calling convert_xunits(args, kwargs) (line 4539)
        convert_xunits_call_result_110978 = invoke(stypy.reporting.localization.Localization(__file__, 4539, 22), convert_xunits_110975, *[x_110976], **kwargs_110977)
        
        # Processing the call keyword arguments (line 4539)
        kwargs_110979 = {}
        # Getting the type of 'float' (line 4539)
        float_110973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4539, 16), 'float', False)
        # Calling float(args, kwargs) (line 4539)
        float_call_result_110980 = invoke(stypy.reporting.localization.Localization(__file__, 4539, 16), float_110973, *[convert_xunits_call_result_110978], **kwargs_110979)
        
        # Assigning a type to the variable 'x' (line 4539)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4539, 12), 'x', float_call_result_110980)
        
        # Assigning a Call to a Name (line 4540):
        
        # Assigning a Call to a Name (line 4540):
        
        # Assigning a Call to a Name (line 4540):
        
        # Call to float(...): (line 4540)
        # Processing the call arguments (line 4540)
        
        # Call to convert_yunits(...): (line 4540)
        # Processing the call arguments (line 4540)
        # Getting the type of 'y' (line 4540)
        y_110984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4540, 42), 'y', False)
        # Processing the call keyword arguments (line 4540)
        kwargs_110985 = {}
        # Getting the type of 'self' (line 4540)
        self_110982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4540, 22), 'self', False)
        # Obtaining the member 'convert_yunits' of a type (line 4540)
        convert_yunits_110983 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4540, 22), self_110982, 'convert_yunits')
        # Calling convert_yunits(args, kwargs) (line 4540)
        convert_yunits_call_result_110986 = invoke(stypy.reporting.localization.Localization(__file__, 4540, 22), convert_yunits_110983, *[y_110984], **kwargs_110985)
        
        # Processing the call keyword arguments (line 4540)
        kwargs_110987 = {}
        # Getting the type of 'float' (line 4540)
        float_110981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4540, 16), 'float', False)
        # Calling float(args, kwargs) (line 4540)
        float_call_result_110988 = invoke(stypy.reporting.localization.Localization(__file__, 4540, 16), float_110981, *[convert_yunits_call_result_110986], **kwargs_110987)
        
        # Assigning a type to the variable 'y' (line 4540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4540, 12), 'y', float_call_result_110988)
        
        # Call to transform_point(...): (line 4541)
        # Processing the call arguments (line 4541)
        
        # Obtaining an instance of the builtin type 'tuple' (line 4541)
        tuple_110991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4541, 42), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 4541)
        # Adding element type (line 4541)
        # Getting the type of 'x' (line 4541)
        x_110992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4541, 42), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4541, 42), tuple_110991, x_110992)
        # Adding element type (line 4541)
        # Getting the type of 'y' (line 4541)
        y_110993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4541, 45), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4541, 42), tuple_110991, y_110993)
        
        # Processing the call keyword arguments (line 4541)
        kwargs_110994 = {}
        # Getting the type of 'trans' (line 4541)
        trans_110989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4541, 19), 'trans', False)
        # Obtaining the member 'transform_point' of a type (line 4541)
        transform_point_110990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4541, 19), trans_110989, 'transform_point')
        # Calling transform_point(args, kwargs) (line 4541)
        transform_point_call_result_110995 = invoke(stypy.reporting.localization.Localization(__file__, 4541, 19), transform_point_110990, *[tuple_110991], **kwargs_110994)
        
        # Assigning a type to the variable 'stypy_return_type' (line 4541)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4541, 12), 'stypy_return_type', transform_point_call_result_110995)
        # SSA branch for the else part of an if statement (line 4537)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 's' (line 4542)
        s_110996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4542, 13), 's')
        unicode_110997 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4542, 18), 'unicode', u'offset points')
        # Applying the binary operator '==' (line 4542)
        result_eq_110998 = python_operator(stypy.reporting.localization.Localization(__file__, 4542, 13), '==', s_110996, unicode_110997)
        
        # Testing the type of an if condition (line 4542)
        if_condition_110999 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4542, 13), result_eq_110998)
        # Assigning a type to the variable 'if_condition_110999' (line 4542)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4542, 13), 'if_condition_110999', if_condition_110999)
        # SSA begins for if statement (line 4542)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Tuple (line 4544):
        
        # Assigning a Subscript to a Name (line 4544):
        
        # Assigning a Subscript to a Name (line 4544):
        
        # Obtaining the type of the subscript
        int_111000 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4544, 12), 'int')
        # Getting the type of 'self' (line 4544)
        self_111001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4544, 21), 'self')
        # Obtaining the member 'xy' of a type (line 4544)
        xy_111002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4544, 21), self_111001, 'xy')
        # Obtaining the member '__getitem__' of a type (line 4544)
        getitem___111003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4544, 12), xy_111002, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4544)
        subscript_call_result_111004 = invoke(stypy.reporting.localization.Localization(__file__, 4544, 12), getitem___111003, int_111000)
        
        # Assigning a type to the variable 'tuple_var_assignment_100749' (line 4544)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4544, 12), 'tuple_var_assignment_100749', subscript_call_result_111004)
        
        # Assigning a Subscript to a Name (line 4544):
        
        # Assigning a Subscript to a Name (line 4544):
        
        # Obtaining the type of the subscript
        int_111005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4544, 12), 'int')
        # Getting the type of 'self' (line 4544)
        self_111006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4544, 21), 'self')
        # Obtaining the member 'xy' of a type (line 4544)
        xy_111007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4544, 21), self_111006, 'xy')
        # Obtaining the member '__getitem__' of a type (line 4544)
        getitem___111008 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4544, 12), xy_111007, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4544)
        subscript_call_result_111009 = invoke(stypy.reporting.localization.Localization(__file__, 4544, 12), getitem___111008, int_111005)
        
        # Assigning a type to the variable 'tuple_var_assignment_100750' (line 4544)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4544, 12), 'tuple_var_assignment_100750', subscript_call_result_111009)
        
        # Assigning a Name to a Name (line 4544):
        
        # Assigning a Name to a Name (line 4544):
        # Getting the type of 'tuple_var_assignment_100749' (line 4544)
        tuple_var_assignment_100749_111010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4544, 12), 'tuple_var_assignment_100749')
        # Assigning a type to the variable 'dx' (line 4544)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4544, 12), 'dx', tuple_var_assignment_100749_111010)
        
        # Assigning a Name to a Name (line 4544):
        
        # Assigning a Name to a Name (line 4544):
        # Getting the type of 'tuple_var_assignment_100750' (line 4544)
        tuple_var_assignment_100750_111011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4544, 12), 'tuple_var_assignment_100750')
        # Assigning a type to the variable 'dy' (line 4544)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4544, 16), 'dy', tuple_var_assignment_100750_111011)
        
        
        # Getting the type of 'self' (line 4547)
        self_111012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4547, 15), 'self')
        # Obtaining the member 'xycoords' of a type (line 4547)
        xycoords_111013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4547, 15), self_111012, 'xycoords')
        unicode_111014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4547, 32), 'unicode', u'offset points')
        # Applying the binary operator '==' (line 4547)
        result_eq_111015 = python_operator(stypy.reporting.localization.Localization(__file__, 4547, 15), '==', xycoords_111013, unicode_111014)
        
        # Testing the type of an if condition (line 4547)
        if_condition_111016 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4547, 12), result_eq_111015)
        # Assigning a type to the variable 'if_condition_111016' (line 4547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4547, 12), 'if_condition_111016', if_condition_111016)
        # SSA begins for if statement (line 4547)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _get_xy(...): (line 4548)
        # Processing the call arguments (line 4548)
        # Getting the type of 'dx' (line 4548)
        dx_111019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4548, 36), 'dx', False)
        # Getting the type of 'dy' (line 4548)
        dy_111020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4548, 40), 'dy', False)
        unicode_111021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4548, 44), 'unicode', u'data')
        # Processing the call keyword arguments (line 4548)
        kwargs_111022 = {}
        # Getting the type of 'self' (line 4548)
        self_111017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4548, 23), 'self', False)
        # Obtaining the member '_get_xy' of a type (line 4548)
        _get_xy_111018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4548, 23), self_111017, '_get_xy')
        # Calling _get_xy(args, kwargs) (line 4548)
        _get_xy_call_result_111023 = invoke(stypy.reporting.localization.Localization(__file__, 4548, 23), _get_xy_111018, *[dx_111019, dy_111020, unicode_111021], **kwargs_111022)
        
        # Assigning a type to the variable 'stypy_return_type' (line 4548)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4548, 16), 'stypy_return_type', _get_xy_call_result_111023)
        # SSA join for if statement (line 4547)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 4550):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to _get_xy(...): (line 4550)
        # Processing the call arguments (line 4550)
        # Getting the type of 'dx' (line 4550)
        dx_111026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4550, 34), 'dx', False)
        # Getting the type of 'dy' (line 4550)
        dy_111027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4550, 38), 'dy', False)
        # Getting the type of 'self' (line 4550)
        self_111028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4550, 42), 'self', False)
        # Obtaining the member 'xycoords' of a type (line 4550)
        xycoords_111029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4550, 42), self_111028, 'xycoords')
        # Processing the call keyword arguments (line 4550)
        kwargs_111030 = {}
        # Getting the type of 'self' (line 4550)
        self_111024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4550, 21), 'self', False)
        # Obtaining the member '_get_xy' of a type (line 4550)
        _get_xy_111025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4550, 21), self_111024, '_get_xy')
        # Calling _get_xy(args, kwargs) (line 4550)
        _get_xy_call_result_111031 = invoke(stypy.reporting.localization.Localization(__file__, 4550, 21), _get_xy_111025, *[dx_111026, dy_111027, xycoords_111029], **kwargs_111030)
        
        # Assigning a type to the variable 'call_assignment_100751' (line 4550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4550, 12), 'call_assignment_100751', _get_xy_call_result_111031)
        
        # Assigning a Call to a Name (line 4550):
        
        # Assigning a Call to a Name (line 4550):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_111034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4550, 12), 'int')
        # Processing the call keyword arguments
        kwargs_111035 = {}
        # Getting the type of 'call_assignment_100751' (line 4550)
        call_assignment_100751_111032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4550, 12), 'call_assignment_100751', False)
        # Obtaining the member '__getitem__' of a type (line 4550)
        getitem___111033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4550, 12), call_assignment_100751_111032, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_111036 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___111033, *[int_111034], **kwargs_111035)
        
        # Assigning a type to the variable 'call_assignment_100752' (line 4550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4550, 12), 'call_assignment_100752', getitem___call_result_111036)
        
        # Assigning a Name to a Name (line 4550):
        
        # Assigning a Name to a Name (line 4550):
        # Getting the type of 'call_assignment_100752' (line 4550)
        call_assignment_100752_111037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4550, 12), 'call_assignment_100752')
        # Assigning a type to the variable 'dx' (line 4550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4550, 12), 'dx', call_assignment_100752_111037)
        
        # Assigning a Call to a Name (line 4550):
        
        # Assigning a Call to a Name (line 4550):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_111040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4550, 12), 'int')
        # Processing the call keyword arguments
        kwargs_111041 = {}
        # Getting the type of 'call_assignment_100751' (line 4550)
        call_assignment_100751_111038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4550, 12), 'call_assignment_100751', False)
        # Obtaining the member '__getitem__' of a type (line 4550)
        getitem___111039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4550, 12), call_assignment_100751_111038, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_111042 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___111039, *[int_111040], **kwargs_111041)
        
        # Assigning a type to the variable 'call_assignment_100753' (line 4550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4550, 12), 'call_assignment_100753', getitem___call_result_111042)
        
        # Assigning a Name to a Name (line 4550):
        
        # Assigning a Name to a Name (line 4550):
        # Getting the type of 'call_assignment_100753' (line 4550)
        call_assignment_100753_111043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4550, 12), 'call_assignment_100753')
        # Assigning a type to the variable 'dy' (line 4550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4550, 16), 'dy', call_assignment_100753_111043)
        
        # Assigning a Call to a Name (line 4553):
        
        # Assigning a Call to a Name (line 4553):
        
        # Assigning a Call to a Name (line 4553):
        
        # Call to get_dpi(...): (line 4553)
        # Processing the call keyword arguments (line 4553)
        kwargs_111047 = {}
        # Getting the type of 'self' (line 4553)
        self_111044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4553, 18), 'self', False)
        # Obtaining the member 'figure' of a type (line 4553)
        figure_111045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4553, 18), self_111044, 'figure')
        # Obtaining the member 'get_dpi' of a type (line 4553)
        get_dpi_111046 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4553, 18), figure_111045, 'get_dpi')
        # Calling get_dpi(args, kwargs) (line 4553)
        get_dpi_call_result_111048 = invoke(stypy.reporting.localization.Localization(__file__, 4553, 18), get_dpi_111046, *[], **kwargs_111047)
        
        # Assigning a type to the variable 'dpi' (line 4553)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4553, 12), 'dpi', get_dpi_call_result_111048)
        
        # Getting the type of 'x' (line 4554)
        x_111049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4554, 12), 'x')
        # Getting the type of 'dpi' (line 4554)
        dpi_111050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4554, 17), 'dpi')
        float_111051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4554, 23), 'float')
        # Applying the binary operator 'div' (line 4554)
        result_div_111052 = python_operator(stypy.reporting.localization.Localization(__file__, 4554, 17), 'div', dpi_111050, float_111051)
        
        # Applying the binary operator '*=' (line 4554)
        result_imul_111053 = python_operator(stypy.reporting.localization.Localization(__file__, 4554, 12), '*=', x_111049, result_div_111052)
        # Assigning a type to the variable 'x' (line 4554)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4554, 12), 'x', result_imul_111053)
        
        
        # Getting the type of 'y' (line 4555)
        y_111054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4555, 12), 'y')
        # Getting the type of 'dpi' (line 4555)
        dpi_111055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4555, 17), 'dpi')
        float_111056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4555, 23), 'float')
        # Applying the binary operator 'div' (line 4555)
        result_div_111057 = python_operator(stypy.reporting.localization.Localization(__file__, 4555, 17), 'div', dpi_111055, float_111056)
        
        # Applying the binary operator '*=' (line 4555)
        result_imul_111058 = python_operator(stypy.reporting.localization.Localization(__file__, 4555, 12), '*=', y_111054, result_div_111057)
        # Assigning a type to the variable 'y' (line 4555)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4555, 12), 'y', result_imul_111058)
        
        
        # Getting the type of 'x' (line 4558)
        x_111059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4558, 12), 'x')
        # Getting the type of 'dx' (line 4558)
        dx_111060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4558, 17), 'dx')
        # Applying the binary operator '+=' (line 4558)
        result_iadd_111061 = python_operator(stypy.reporting.localization.Localization(__file__, 4558, 12), '+=', x_111059, dx_111060)
        # Assigning a type to the variable 'x' (line 4558)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4558, 12), 'x', result_iadd_111061)
        
        
        # Getting the type of 'y' (line 4559)
        y_111062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4559, 12), 'y')
        # Getting the type of 'dy' (line 4559)
        dy_111063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4559, 17), 'dy')
        # Applying the binary operator '+=' (line 4559)
        result_iadd_111064 = python_operator(stypy.reporting.localization.Localization(__file__, 4559, 12), '+=', y_111062, dy_111063)
        # Assigning a type to the variable 'y' (line 4559)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4559, 12), 'y', result_iadd_111064)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 4561)
        tuple_111065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4561, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 4561)
        # Adding element type (line 4561)
        # Getting the type of 'x' (line 4561)
        x_111066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4561, 19), 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4561, 19), tuple_111065, x_111066)
        # Adding element type (line 4561)
        # Getting the type of 'y' (line 4561)
        y_111067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4561, 22), 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4561, 19), tuple_111065, y_111067)
        
        # Assigning a type to the variable 'stypy_return_type' (line 4561)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4561, 12), 'stypy_return_type', tuple_111065)
        # SSA branch for the else part of an if statement (line 4542)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 's' (line 4562)
        s_111068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4562, 13), 's')
        unicode_111069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4562, 18), 'unicode', u'polar')
        # Applying the binary operator '==' (line 4562)
        result_eq_111070 = python_operator(stypy.reporting.localization.Localization(__file__, 4562, 13), '==', s_111068, unicode_111069)
        
        # Testing the type of an if condition (line 4562)
        if_condition_111071 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4562, 13), result_eq_111070)
        # Assigning a type to the variable 'if_condition_111071' (line 4562)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4562, 13), 'if_condition_111071', if_condition_111071)
        # SSA begins for if statement (line 4562)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 4563):
        
        # Assigning a Name to a Name (line 4563):
        
        # Assigning a Name to a Name (line 4563):
        # Getting the type of 'x' (line 4563)
        x_111072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4563, 23), 'x')
        # Assigning a type to the variable 'tuple_assignment_100754' (line 4563)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4563, 12), 'tuple_assignment_100754', x_111072)
        
        # Assigning a Name to a Name (line 4563):
        
        # Assigning a Name to a Name (line 4563):
        # Getting the type of 'y' (line 4563)
        y_111073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4563, 26), 'y')
        # Assigning a type to the variable 'tuple_assignment_100755' (line 4563)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4563, 12), 'tuple_assignment_100755', y_111073)
        
        # Assigning a Name to a Name (line 4563):
        
        # Assigning a Name to a Name (line 4563):
        # Getting the type of 'tuple_assignment_100754' (line 4563)
        tuple_assignment_100754_111074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4563, 12), 'tuple_assignment_100754')
        # Assigning a type to the variable 'theta' (line 4563)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4563, 12), 'theta', tuple_assignment_100754_111074)
        
        # Assigning a Name to a Name (line 4563):
        
        # Assigning a Name to a Name (line 4563):
        # Getting the type of 'tuple_assignment_100755' (line 4563)
        tuple_assignment_100755_111075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4563, 12), 'tuple_assignment_100755')
        # Assigning a type to the variable 'r' (line 4563)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4563, 19), 'r', tuple_assignment_100755_111075)
        
        # Assigning a BinOp to a Name (line 4564):
        
        # Assigning a BinOp to a Name (line 4564):
        
        # Assigning a BinOp to a Name (line 4564):
        # Getting the type of 'r' (line 4564)
        r_111076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4564, 16), 'r')
        
        # Call to cos(...): (line 4564)
        # Processing the call arguments (line 4564)
        # Getting the type of 'theta' (line 4564)
        theta_111079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4564, 27), 'theta', False)
        # Processing the call keyword arguments (line 4564)
        kwargs_111080 = {}
        # Getting the type of 'np' (line 4564)
        np_111077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4564, 20), 'np', False)
        # Obtaining the member 'cos' of a type (line 4564)
        cos_111078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4564, 20), np_111077, 'cos')
        # Calling cos(args, kwargs) (line 4564)
        cos_call_result_111081 = invoke(stypy.reporting.localization.Localization(__file__, 4564, 20), cos_111078, *[theta_111079], **kwargs_111080)
        
        # Applying the binary operator '*' (line 4564)
        result_mul_111082 = python_operator(stypy.reporting.localization.Localization(__file__, 4564, 16), '*', r_111076, cos_call_result_111081)
        
        # Assigning a type to the variable 'x' (line 4564)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4564, 12), 'x', result_mul_111082)
        
        # Assigning a BinOp to a Name (line 4565):
        
        # Assigning a BinOp to a Name (line 4565):
        
        # Assigning a BinOp to a Name (line 4565):
        # Getting the type of 'r' (line 4565)
        r_111083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4565, 16), 'r')
        
        # Call to sin(...): (line 4565)
        # Processing the call arguments (line 4565)
        # Getting the type of 'theta' (line 4565)
        theta_111086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4565, 27), 'theta', False)
        # Processing the call keyword arguments (line 4565)
        kwargs_111087 = {}
        # Getting the type of 'np' (line 4565)
        np_111084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4565, 20), 'np', False)
        # Obtaining the member 'sin' of a type (line 4565)
        sin_111085 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4565, 20), np_111084, 'sin')
        # Calling sin(args, kwargs) (line 4565)
        sin_call_result_111088 = invoke(stypy.reporting.localization.Localization(__file__, 4565, 20), sin_111085, *[theta_111086], **kwargs_111087)
        
        # Applying the binary operator '*' (line 4565)
        result_mul_111089 = python_operator(stypy.reporting.localization.Localization(__file__, 4565, 16), '*', r_111083, sin_call_result_111088)
        
        # Assigning a type to the variable 'y' (line 4565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4565, 12), 'y', result_mul_111089)
        
        # Assigning a Attribute to a Name (line 4566):
        
        # Assigning a Attribute to a Name (line 4566):
        
        # Assigning a Attribute to a Name (line 4566):
        # Getting the type of 'axes' (line 4566)
        axes_111090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4566, 20), 'axes')
        # Obtaining the member 'transData' of a type (line 4566)
        transData_111091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4566, 20), axes_111090, 'transData')
        # Assigning a type to the variable 'trans' (line 4566)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4566, 12), 'trans', transData_111091)
        
        # Call to transform_point(...): (line 4567)
        # Processing the call arguments (line 4567)
        
        # Obtaining an instance of the builtin type 'tuple' (line 4567)
        tuple_111094 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4567, 42), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 4567)
        # Adding element type (line 4567)
        # Getting the type of 'x' (line 4567)
        x_111095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4567, 42), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4567, 42), tuple_111094, x_111095)
        # Adding element type (line 4567)
        # Getting the type of 'y' (line 4567)
        y_111096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4567, 45), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4567, 42), tuple_111094, y_111096)
        
        # Processing the call keyword arguments (line 4567)
        kwargs_111097 = {}
        # Getting the type of 'trans' (line 4567)
        trans_111092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4567, 19), 'trans', False)
        # Obtaining the member 'transform_point' of a type (line 4567)
        transform_point_111093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4567, 19), trans_111092, 'transform_point')
        # Calling transform_point(args, kwargs) (line 4567)
        transform_point_call_result_111098 = invoke(stypy.reporting.localization.Localization(__file__, 4567, 19), transform_point_111093, *[tuple_111094], **kwargs_111097)
        
        # Assigning a type to the variable 'stypy_return_type' (line 4567)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4567, 12), 'stypy_return_type', transform_point_call_result_111098)
        # SSA branch for the else part of an if statement (line 4562)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 's' (line 4568)
        s_111099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4568, 13), 's')
        unicode_111100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4568, 18), 'unicode', u'figure points')
        # Applying the binary operator '==' (line 4568)
        result_eq_111101 = python_operator(stypy.reporting.localization.Localization(__file__, 4568, 13), '==', s_111099, unicode_111100)
        
        # Testing the type of an if condition (line 4568)
        if_condition_111102 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4568, 13), result_eq_111101)
        # Assigning a type to the variable 'if_condition_111102' (line 4568)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4568, 13), 'if_condition_111102', if_condition_111102)
        # SSA begins for if statement (line 4568)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 4570):
        
        # Assigning a Attribute to a Name (line 4570):
        
        # Assigning a Attribute to a Name (line 4570):
        # Getting the type of 'self' (line 4570)
        self_111103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4570, 18), 'self')
        # Obtaining the member 'figure' of a type (line 4570)
        figure_111104 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4570, 18), self_111103, 'figure')
        # Obtaining the member 'dpi' of a type (line 4570)
        dpi_111105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4570, 18), figure_111104, 'dpi')
        # Assigning a type to the variable 'dpi' (line 4570)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4570, 12), 'dpi', dpi_111105)
        
        # Assigning a Attribute to a Tuple (line 4571):
        
        # Assigning a Subscript to a Name (line 4571):
        
        # Assigning a Subscript to a Name (line 4571):
        
        # Obtaining the type of the subscript
        int_111106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4571, 12), 'int')
        # Getting the type of 'self' (line 4571)
        self_111107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4571, 25), 'self')
        # Obtaining the member 'figure' of a type (line 4571)
        figure_111108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4571, 25), self_111107, 'figure')
        # Obtaining the member 'bbox' of a type (line 4571)
        bbox_111109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4571, 25), figure_111108, 'bbox')
        # Obtaining the member 'bounds' of a type (line 4571)
        bounds_111110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4571, 25), bbox_111109, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 4571)
        getitem___111111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4571, 12), bounds_111110, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4571)
        subscript_call_result_111112 = invoke(stypy.reporting.localization.Localization(__file__, 4571, 12), getitem___111111, int_111106)
        
        # Assigning a type to the variable 'tuple_var_assignment_100756' (line 4571)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4571, 12), 'tuple_var_assignment_100756', subscript_call_result_111112)
        
        # Assigning a Subscript to a Name (line 4571):
        
        # Assigning a Subscript to a Name (line 4571):
        
        # Obtaining the type of the subscript
        int_111113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4571, 12), 'int')
        # Getting the type of 'self' (line 4571)
        self_111114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4571, 25), 'self')
        # Obtaining the member 'figure' of a type (line 4571)
        figure_111115 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4571, 25), self_111114, 'figure')
        # Obtaining the member 'bbox' of a type (line 4571)
        bbox_111116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4571, 25), figure_111115, 'bbox')
        # Obtaining the member 'bounds' of a type (line 4571)
        bounds_111117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4571, 25), bbox_111116, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 4571)
        getitem___111118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4571, 12), bounds_111117, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4571)
        subscript_call_result_111119 = invoke(stypy.reporting.localization.Localization(__file__, 4571, 12), getitem___111118, int_111113)
        
        # Assigning a type to the variable 'tuple_var_assignment_100757' (line 4571)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4571, 12), 'tuple_var_assignment_100757', subscript_call_result_111119)
        
        # Assigning a Subscript to a Name (line 4571):
        
        # Assigning a Subscript to a Name (line 4571):
        
        # Obtaining the type of the subscript
        int_111120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4571, 12), 'int')
        # Getting the type of 'self' (line 4571)
        self_111121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4571, 25), 'self')
        # Obtaining the member 'figure' of a type (line 4571)
        figure_111122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4571, 25), self_111121, 'figure')
        # Obtaining the member 'bbox' of a type (line 4571)
        bbox_111123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4571, 25), figure_111122, 'bbox')
        # Obtaining the member 'bounds' of a type (line 4571)
        bounds_111124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4571, 25), bbox_111123, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 4571)
        getitem___111125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4571, 12), bounds_111124, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4571)
        subscript_call_result_111126 = invoke(stypy.reporting.localization.Localization(__file__, 4571, 12), getitem___111125, int_111120)
        
        # Assigning a type to the variable 'tuple_var_assignment_100758' (line 4571)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4571, 12), 'tuple_var_assignment_100758', subscript_call_result_111126)
        
        # Assigning a Subscript to a Name (line 4571):
        
        # Assigning a Subscript to a Name (line 4571):
        
        # Obtaining the type of the subscript
        int_111127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4571, 12), 'int')
        # Getting the type of 'self' (line 4571)
        self_111128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4571, 25), 'self')
        # Obtaining the member 'figure' of a type (line 4571)
        figure_111129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4571, 25), self_111128, 'figure')
        # Obtaining the member 'bbox' of a type (line 4571)
        bbox_111130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4571, 25), figure_111129, 'bbox')
        # Obtaining the member 'bounds' of a type (line 4571)
        bounds_111131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4571, 25), bbox_111130, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 4571)
        getitem___111132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4571, 12), bounds_111131, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4571)
        subscript_call_result_111133 = invoke(stypy.reporting.localization.Localization(__file__, 4571, 12), getitem___111132, int_111127)
        
        # Assigning a type to the variable 'tuple_var_assignment_100759' (line 4571)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4571, 12), 'tuple_var_assignment_100759', subscript_call_result_111133)
        
        # Assigning a Name to a Name (line 4571):
        
        # Assigning a Name to a Name (line 4571):
        # Getting the type of 'tuple_var_assignment_100756' (line 4571)
        tuple_var_assignment_100756_111134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4571, 12), 'tuple_var_assignment_100756')
        # Assigning a type to the variable 'l' (line 4571)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4571, 12), 'l', tuple_var_assignment_100756_111134)
        
        # Assigning a Name to a Name (line 4571):
        
        # Assigning a Name to a Name (line 4571):
        # Getting the type of 'tuple_var_assignment_100757' (line 4571)
        tuple_var_assignment_100757_111135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4571, 12), 'tuple_var_assignment_100757')
        # Assigning a type to the variable 'b' (line 4571)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4571, 15), 'b', tuple_var_assignment_100757_111135)
        
        # Assigning a Name to a Name (line 4571):
        
        # Assigning a Name to a Name (line 4571):
        # Getting the type of 'tuple_var_assignment_100758' (line 4571)
        tuple_var_assignment_100758_111136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4571, 12), 'tuple_var_assignment_100758')
        # Assigning a type to the variable 'w' (line 4571)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4571, 18), 'w', tuple_var_assignment_100758_111136)
        
        # Assigning a Name to a Name (line 4571):
        
        # Assigning a Name to a Name (line 4571):
        # Getting the type of 'tuple_var_assignment_100759' (line 4571)
        tuple_var_assignment_100759_111137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4571, 12), 'tuple_var_assignment_100759')
        # Assigning a type to the variable 'h' (line 4571)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4571, 21), 'h', tuple_var_assignment_100759_111137)
        
        # Assigning a BinOp to a Name (line 4572):
        
        # Assigning a BinOp to a Name (line 4572):
        
        # Assigning a BinOp to a Name (line 4572):
        # Getting the type of 'l' (line 4572)
        l_111138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4572, 16), 'l')
        # Getting the type of 'w' (line 4572)
        w_111139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4572, 20), 'w')
        # Applying the binary operator '+' (line 4572)
        result_add_111140 = python_operator(stypy.reporting.localization.Localization(__file__, 4572, 16), '+', l_111138, w_111139)
        
        # Assigning a type to the variable 'r' (line 4572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4572, 12), 'r', result_add_111140)
        
        # Assigning a BinOp to a Name (line 4573):
        
        # Assigning a BinOp to a Name (line 4573):
        
        # Assigning a BinOp to a Name (line 4573):
        # Getting the type of 'b' (line 4573)
        b_111141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4573, 16), 'b')
        # Getting the type of 'h' (line 4573)
        h_111142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4573, 20), 'h')
        # Applying the binary operator '+' (line 4573)
        result_add_111143 = python_operator(stypy.reporting.localization.Localization(__file__, 4573, 16), '+', b_111141, h_111142)
        
        # Assigning a type to the variable 't' (line 4573)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4573, 12), 't', result_add_111143)
        
        # Getting the type of 'x' (line 4575)
        x_111144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4575, 12), 'x')
        # Getting the type of 'dpi' (line 4575)
        dpi_111145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4575, 17), 'dpi')
        float_111146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4575, 23), 'float')
        # Applying the binary operator 'div' (line 4575)
        result_div_111147 = python_operator(stypy.reporting.localization.Localization(__file__, 4575, 17), 'div', dpi_111145, float_111146)
        
        # Applying the binary operator '*=' (line 4575)
        result_imul_111148 = python_operator(stypy.reporting.localization.Localization(__file__, 4575, 12), '*=', x_111144, result_div_111147)
        # Assigning a type to the variable 'x' (line 4575)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4575, 12), 'x', result_imul_111148)
        
        
        # Getting the type of 'y' (line 4576)
        y_111149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4576, 12), 'y')
        # Getting the type of 'dpi' (line 4576)
        dpi_111150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4576, 17), 'dpi')
        float_111151 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4576, 23), 'float')
        # Applying the binary operator 'div' (line 4576)
        result_div_111152 = python_operator(stypy.reporting.localization.Localization(__file__, 4576, 17), 'div', dpi_111150, float_111151)
        
        # Applying the binary operator '*=' (line 4576)
        result_imul_111153 = python_operator(stypy.reporting.localization.Localization(__file__, 4576, 12), '*=', y_111149, result_div_111152)
        # Assigning a type to the variable 'y' (line 4576)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4576, 12), 'y', result_imul_111153)
        
        
        
        # Getting the type of 'x' (line 4577)
        x_111154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4577, 15), 'x')
        int_111155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4577, 19), 'int')
        # Applying the binary operator '<' (line 4577)
        result_lt_111156 = python_operator(stypy.reporting.localization.Localization(__file__, 4577, 15), '<', x_111154, int_111155)
        
        # Testing the type of an if condition (line 4577)
        if_condition_111157 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4577, 12), result_lt_111156)
        # Assigning a type to the variable 'if_condition_111157' (line 4577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4577, 12), 'if_condition_111157', if_condition_111157)
        # SSA begins for if statement (line 4577)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 4578):
        
        # Assigning a BinOp to a Name (line 4578):
        
        # Assigning a BinOp to a Name (line 4578):
        # Getting the type of 'r' (line 4578)
        r_111158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4578, 20), 'r')
        # Getting the type of 'x' (line 4578)
        x_111159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4578, 24), 'x')
        # Applying the binary operator '+' (line 4578)
        result_add_111160 = python_operator(stypy.reporting.localization.Localization(__file__, 4578, 20), '+', r_111158, x_111159)
        
        # Assigning a type to the variable 'x' (line 4578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4578, 16), 'x', result_add_111160)
        # SSA join for if statement (line 4577)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'y' (line 4579)
        y_111161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4579, 15), 'y')
        int_111162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4579, 19), 'int')
        # Applying the binary operator '<' (line 4579)
        result_lt_111163 = python_operator(stypy.reporting.localization.Localization(__file__, 4579, 15), '<', y_111161, int_111162)
        
        # Testing the type of an if condition (line 4579)
        if_condition_111164 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4579, 12), result_lt_111163)
        # Assigning a type to the variable 'if_condition_111164' (line 4579)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4579, 12), 'if_condition_111164', if_condition_111164)
        # SSA begins for if statement (line 4579)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 4580):
        
        # Assigning a BinOp to a Name (line 4580):
        
        # Assigning a BinOp to a Name (line 4580):
        # Getting the type of 't' (line 4580)
        t_111165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4580, 20), 't')
        # Getting the type of 'y' (line 4580)
        y_111166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4580, 24), 'y')
        # Applying the binary operator '+' (line 4580)
        result_add_111167 = python_operator(stypy.reporting.localization.Localization(__file__, 4580, 20), '+', t_111165, y_111166)
        
        # Assigning a type to the variable 'y' (line 4580)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4580, 16), 'y', result_add_111167)
        # SSA join for if statement (line 4579)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 4581)
        tuple_111168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4581, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 4581)
        # Adding element type (line 4581)
        # Getting the type of 'x' (line 4581)
        x_111169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4581, 19), 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4581, 19), tuple_111168, x_111169)
        # Adding element type (line 4581)
        # Getting the type of 'y' (line 4581)
        y_111170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4581, 22), 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4581, 19), tuple_111168, y_111170)
        
        # Assigning a type to the variable 'stypy_return_type' (line 4581)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4581, 12), 'stypy_return_type', tuple_111168)
        # SSA branch for the else part of an if statement (line 4568)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 's' (line 4582)
        s_111171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4582, 13), 's')
        unicode_111172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4582, 18), 'unicode', u'figure pixels')
        # Applying the binary operator '==' (line 4582)
        result_eq_111173 = python_operator(stypy.reporting.localization.Localization(__file__, 4582, 13), '==', s_111171, unicode_111172)
        
        # Testing the type of an if condition (line 4582)
        if_condition_111174 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4582, 13), result_eq_111173)
        # Assigning a type to the variable 'if_condition_111174' (line 4582)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4582, 13), 'if_condition_111174', if_condition_111174)
        # SSA begins for if statement (line 4582)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Tuple (line 4584):
        
        # Assigning a Subscript to a Name (line 4584):
        
        # Assigning a Subscript to a Name (line 4584):
        
        # Obtaining the type of the subscript
        int_111175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4584, 12), 'int')
        # Getting the type of 'self' (line 4584)
        self_111176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4584, 25), 'self')
        # Obtaining the member 'figure' of a type (line 4584)
        figure_111177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4584, 25), self_111176, 'figure')
        # Obtaining the member 'bbox' of a type (line 4584)
        bbox_111178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4584, 25), figure_111177, 'bbox')
        # Obtaining the member 'bounds' of a type (line 4584)
        bounds_111179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4584, 25), bbox_111178, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 4584)
        getitem___111180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4584, 12), bounds_111179, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4584)
        subscript_call_result_111181 = invoke(stypy.reporting.localization.Localization(__file__, 4584, 12), getitem___111180, int_111175)
        
        # Assigning a type to the variable 'tuple_var_assignment_100760' (line 4584)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4584, 12), 'tuple_var_assignment_100760', subscript_call_result_111181)
        
        # Assigning a Subscript to a Name (line 4584):
        
        # Assigning a Subscript to a Name (line 4584):
        
        # Obtaining the type of the subscript
        int_111182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4584, 12), 'int')
        # Getting the type of 'self' (line 4584)
        self_111183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4584, 25), 'self')
        # Obtaining the member 'figure' of a type (line 4584)
        figure_111184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4584, 25), self_111183, 'figure')
        # Obtaining the member 'bbox' of a type (line 4584)
        bbox_111185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4584, 25), figure_111184, 'bbox')
        # Obtaining the member 'bounds' of a type (line 4584)
        bounds_111186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4584, 25), bbox_111185, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 4584)
        getitem___111187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4584, 12), bounds_111186, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4584)
        subscript_call_result_111188 = invoke(stypy.reporting.localization.Localization(__file__, 4584, 12), getitem___111187, int_111182)
        
        # Assigning a type to the variable 'tuple_var_assignment_100761' (line 4584)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4584, 12), 'tuple_var_assignment_100761', subscript_call_result_111188)
        
        # Assigning a Subscript to a Name (line 4584):
        
        # Assigning a Subscript to a Name (line 4584):
        
        # Obtaining the type of the subscript
        int_111189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4584, 12), 'int')
        # Getting the type of 'self' (line 4584)
        self_111190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4584, 25), 'self')
        # Obtaining the member 'figure' of a type (line 4584)
        figure_111191 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4584, 25), self_111190, 'figure')
        # Obtaining the member 'bbox' of a type (line 4584)
        bbox_111192 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4584, 25), figure_111191, 'bbox')
        # Obtaining the member 'bounds' of a type (line 4584)
        bounds_111193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4584, 25), bbox_111192, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 4584)
        getitem___111194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4584, 12), bounds_111193, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4584)
        subscript_call_result_111195 = invoke(stypy.reporting.localization.Localization(__file__, 4584, 12), getitem___111194, int_111189)
        
        # Assigning a type to the variable 'tuple_var_assignment_100762' (line 4584)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4584, 12), 'tuple_var_assignment_100762', subscript_call_result_111195)
        
        # Assigning a Subscript to a Name (line 4584):
        
        # Assigning a Subscript to a Name (line 4584):
        
        # Obtaining the type of the subscript
        int_111196 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4584, 12), 'int')
        # Getting the type of 'self' (line 4584)
        self_111197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4584, 25), 'self')
        # Obtaining the member 'figure' of a type (line 4584)
        figure_111198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4584, 25), self_111197, 'figure')
        # Obtaining the member 'bbox' of a type (line 4584)
        bbox_111199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4584, 25), figure_111198, 'bbox')
        # Obtaining the member 'bounds' of a type (line 4584)
        bounds_111200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4584, 25), bbox_111199, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 4584)
        getitem___111201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4584, 12), bounds_111200, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4584)
        subscript_call_result_111202 = invoke(stypy.reporting.localization.Localization(__file__, 4584, 12), getitem___111201, int_111196)
        
        # Assigning a type to the variable 'tuple_var_assignment_100763' (line 4584)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4584, 12), 'tuple_var_assignment_100763', subscript_call_result_111202)
        
        # Assigning a Name to a Name (line 4584):
        
        # Assigning a Name to a Name (line 4584):
        # Getting the type of 'tuple_var_assignment_100760' (line 4584)
        tuple_var_assignment_100760_111203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4584, 12), 'tuple_var_assignment_100760')
        # Assigning a type to the variable 'l' (line 4584)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4584, 12), 'l', tuple_var_assignment_100760_111203)
        
        # Assigning a Name to a Name (line 4584):
        
        # Assigning a Name to a Name (line 4584):
        # Getting the type of 'tuple_var_assignment_100761' (line 4584)
        tuple_var_assignment_100761_111204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4584, 12), 'tuple_var_assignment_100761')
        # Assigning a type to the variable 'b' (line 4584)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4584, 15), 'b', tuple_var_assignment_100761_111204)
        
        # Assigning a Name to a Name (line 4584):
        
        # Assigning a Name to a Name (line 4584):
        # Getting the type of 'tuple_var_assignment_100762' (line 4584)
        tuple_var_assignment_100762_111205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4584, 12), 'tuple_var_assignment_100762')
        # Assigning a type to the variable 'w' (line 4584)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4584, 18), 'w', tuple_var_assignment_100762_111205)
        
        # Assigning a Name to a Name (line 4584):
        
        # Assigning a Name to a Name (line 4584):
        # Getting the type of 'tuple_var_assignment_100763' (line 4584)
        tuple_var_assignment_100763_111206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4584, 12), 'tuple_var_assignment_100763')
        # Assigning a type to the variable 'h' (line 4584)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4584, 21), 'h', tuple_var_assignment_100763_111206)
        
        # Assigning a BinOp to a Name (line 4585):
        
        # Assigning a BinOp to a Name (line 4585):
        
        # Assigning a BinOp to a Name (line 4585):
        # Getting the type of 'l' (line 4585)
        l_111207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4585, 16), 'l')
        # Getting the type of 'w' (line 4585)
        w_111208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4585, 20), 'w')
        # Applying the binary operator '+' (line 4585)
        result_add_111209 = python_operator(stypy.reporting.localization.Localization(__file__, 4585, 16), '+', l_111207, w_111208)
        
        # Assigning a type to the variable 'r' (line 4585)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4585, 12), 'r', result_add_111209)
        
        # Assigning a BinOp to a Name (line 4586):
        
        # Assigning a BinOp to a Name (line 4586):
        
        # Assigning a BinOp to a Name (line 4586):
        # Getting the type of 'b' (line 4586)
        b_111210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4586, 16), 'b')
        # Getting the type of 'h' (line 4586)
        h_111211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4586, 20), 'h')
        # Applying the binary operator '+' (line 4586)
        result_add_111212 = python_operator(stypy.reporting.localization.Localization(__file__, 4586, 16), '+', b_111210, h_111211)
        
        # Assigning a type to the variable 't' (line 4586)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4586, 12), 't', result_add_111212)
        
        
        # Getting the type of 'x' (line 4587)
        x_111213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4587, 15), 'x')
        int_111214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4587, 19), 'int')
        # Applying the binary operator '<' (line 4587)
        result_lt_111215 = python_operator(stypy.reporting.localization.Localization(__file__, 4587, 15), '<', x_111213, int_111214)
        
        # Testing the type of an if condition (line 4587)
        if_condition_111216 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4587, 12), result_lt_111215)
        # Assigning a type to the variable 'if_condition_111216' (line 4587)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4587, 12), 'if_condition_111216', if_condition_111216)
        # SSA begins for if statement (line 4587)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 4588):
        
        # Assigning a BinOp to a Name (line 4588):
        
        # Assigning a BinOp to a Name (line 4588):
        # Getting the type of 'r' (line 4588)
        r_111217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4588, 20), 'r')
        # Getting the type of 'x' (line 4588)
        x_111218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4588, 24), 'x')
        # Applying the binary operator '+' (line 4588)
        result_add_111219 = python_operator(stypy.reporting.localization.Localization(__file__, 4588, 20), '+', r_111217, x_111218)
        
        # Assigning a type to the variable 'x' (line 4588)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4588, 16), 'x', result_add_111219)
        # SSA join for if statement (line 4587)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'y' (line 4589)
        y_111220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4589, 15), 'y')
        int_111221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4589, 19), 'int')
        # Applying the binary operator '<' (line 4589)
        result_lt_111222 = python_operator(stypy.reporting.localization.Localization(__file__, 4589, 15), '<', y_111220, int_111221)
        
        # Testing the type of an if condition (line 4589)
        if_condition_111223 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4589, 12), result_lt_111222)
        # Assigning a type to the variable 'if_condition_111223' (line 4589)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4589, 12), 'if_condition_111223', if_condition_111223)
        # SSA begins for if statement (line 4589)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 4590):
        
        # Assigning a BinOp to a Name (line 4590):
        
        # Assigning a BinOp to a Name (line 4590):
        # Getting the type of 't' (line 4590)
        t_111224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4590, 20), 't')
        # Getting the type of 'y' (line 4590)
        y_111225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4590, 24), 'y')
        # Applying the binary operator '+' (line 4590)
        result_add_111226 = python_operator(stypy.reporting.localization.Localization(__file__, 4590, 20), '+', t_111224, y_111225)
        
        # Assigning a type to the variable 'y' (line 4590)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4590, 16), 'y', result_add_111226)
        # SSA join for if statement (line 4589)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 4591)
        tuple_111227 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4591, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 4591)
        # Adding element type (line 4591)
        # Getting the type of 'x' (line 4591)
        x_111228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4591, 19), 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4591, 19), tuple_111227, x_111228)
        # Adding element type (line 4591)
        # Getting the type of 'y' (line 4591)
        y_111229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4591, 22), 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4591, 19), tuple_111227, y_111229)
        
        # Assigning a type to the variable 'stypy_return_type' (line 4591)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4591, 12), 'stypy_return_type', tuple_111227)
        # SSA branch for the else part of an if statement (line 4582)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 's' (line 4592)
        s_111230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4592, 13), 's')
        unicode_111231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4592, 18), 'unicode', u'figure fraction')
        # Applying the binary operator '==' (line 4592)
        result_eq_111232 = python_operator(stypy.reporting.localization.Localization(__file__, 4592, 13), '==', s_111230, unicode_111231)
        
        # Testing the type of an if condition (line 4592)
        if_condition_111233 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4592, 13), result_eq_111232)
        # Assigning a type to the variable 'if_condition_111233' (line 4592)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4592, 13), 'if_condition_111233', if_condition_111233)
        # SSA begins for if statement (line 4592)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 4594):
        
        # Assigning a Attribute to a Name (line 4594):
        
        # Assigning a Attribute to a Name (line 4594):
        # Getting the type of 'self' (line 4594)
        self_111234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4594, 20), 'self')
        # Obtaining the member 'figure' of a type (line 4594)
        figure_111235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4594, 20), self_111234, 'figure')
        # Obtaining the member 'transFigure' of a type (line 4594)
        transFigure_111236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4594, 20), figure_111235, 'transFigure')
        # Assigning a type to the variable 'trans' (line 4594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4594, 12), 'trans', transFigure_111236)
        
        # Call to transform_point(...): (line 4595)
        # Processing the call arguments (line 4595)
        
        # Obtaining an instance of the builtin type 'tuple' (line 4595)
        tuple_111239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4595, 42), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 4595)
        # Adding element type (line 4595)
        # Getting the type of 'x' (line 4595)
        x_111240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4595, 42), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4595, 42), tuple_111239, x_111240)
        # Adding element type (line 4595)
        # Getting the type of 'y' (line 4595)
        y_111241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4595, 45), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4595, 42), tuple_111239, y_111241)
        
        # Processing the call keyword arguments (line 4595)
        kwargs_111242 = {}
        # Getting the type of 'trans' (line 4595)
        trans_111237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4595, 19), 'trans', False)
        # Obtaining the member 'transform_point' of a type (line 4595)
        transform_point_111238 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4595, 19), trans_111237, 'transform_point')
        # Calling transform_point(args, kwargs) (line 4595)
        transform_point_call_result_111243 = invoke(stypy.reporting.localization.Localization(__file__, 4595, 19), transform_point_111238, *[tuple_111239], **kwargs_111242)
        
        # Assigning a type to the variable 'stypy_return_type' (line 4595)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4595, 12), 'stypy_return_type', transform_point_call_result_111243)
        # SSA branch for the else part of an if statement (line 4592)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 's' (line 4596)
        s_111244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4596, 13), 's')
        unicode_111245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4596, 18), 'unicode', u'axes points')
        # Applying the binary operator '==' (line 4596)
        result_eq_111246 = python_operator(stypy.reporting.localization.Localization(__file__, 4596, 13), '==', s_111244, unicode_111245)
        
        # Testing the type of an if condition (line 4596)
        if_condition_111247 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4596, 13), result_eq_111246)
        # Assigning a type to the variable 'if_condition_111247' (line 4596)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4596, 13), 'if_condition_111247', if_condition_111247)
        # SSA begins for if statement (line 4596)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 4598):
        
        # Assigning a Attribute to a Name (line 4598):
        
        # Assigning a Attribute to a Name (line 4598):
        # Getting the type of 'self' (line 4598)
        self_111248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4598, 18), 'self')
        # Obtaining the member 'figure' of a type (line 4598)
        figure_111249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4598, 18), self_111248, 'figure')
        # Obtaining the member 'dpi' of a type (line 4598)
        dpi_111250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4598, 18), figure_111249, 'dpi')
        # Assigning a type to the variable 'dpi' (line 4598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4598, 12), 'dpi', dpi_111250)
        
        # Assigning a Attribute to a Tuple (line 4599):
        
        # Assigning a Subscript to a Name (line 4599):
        
        # Assigning a Subscript to a Name (line 4599):
        
        # Obtaining the type of the subscript
        int_111251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4599, 12), 'int')
        # Getting the type of 'axes' (line 4599)
        axes_111252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4599, 25), 'axes')
        # Obtaining the member 'bbox' of a type (line 4599)
        bbox_111253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4599, 25), axes_111252, 'bbox')
        # Obtaining the member 'bounds' of a type (line 4599)
        bounds_111254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4599, 25), bbox_111253, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 4599)
        getitem___111255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4599, 12), bounds_111254, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4599)
        subscript_call_result_111256 = invoke(stypy.reporting.localization.Localization(__file__, 4599, 12), getitem___111255, int_111251)
        
        # Assigning a type to the variable 'tuple_var_assignment_100764' (line 4599)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4599, 12), 'tuple_var_assignment_100764', subscript_call_result_111256)
        
        # Assigning a Subscript to a Name (line 4599):
        
        # Assigning a Subscript to a Name (line 4599):
        
        # Obtaining the type of the subscript
        int_111257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4599, 12), 'int')
        # Getting the type of 'axes' (line 4599)
        axes_111258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4599, 25), 'axes')
        # Obtaining the member 'bbox' of a type (line 4599)
        bbox_111259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4599, 25), axes_111258, 'bbox')
        # Obtaining the member 'bounds' of a type (line 4599)
        bounds_111260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4599, 25), bbox_111259, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 4599)
        getitem___111261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4599, 12), bounds_111260, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4599)
        subscript_call_result_111262 = invoke(stypy.reporting.localization.Localization(__file__, 4599, 12), getitem___111261, int_111257)
        
        # Assigning a type to the variable 'tuple_var_assignment_100765' (line 4599)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4599, 12), 'tuple_var_assignment_100765', subscript_call_result_111262)
        
        # Assigning a Subscript to a Name (line 4599):
        
        # Assigning a Subscript to a Name (line 4599):
        
        # Obtaining the type of the subscript
        int_111263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4599, 12), 'int')
        # Getting the type of 'axes' (line 4599)
        axes_111264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4599, 25), 'axes')
        # Obtaining the member 'bbox' of a type (line 4599)
        bbox_111265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4599, 25), axes_111264, 'bbox')
        # Obtaining the member 'bounds' of a type (line 4599)
        bounds_111266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4599, 25), bbox_111265, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 4599)
        getitem___111267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4599, 12), bounds_111266, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4599)
        subscript_call_result_111268 = invoke(stypy.reporting.localization.Localization(__file__, 4599, 12), getitem___111267, int_111263)
        
        # Assigning a type to the variable 'tuple_var_assignment_100766' (line 4599)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4599, 12), 'tuple_var_assignment_100766', subscript_call_result_111268)
        
        # Assigning a Subscript to a Name (line 4599):
        
        # Assigning a Subscript to a Name (line 4599):
        
        # Obtaining the type of the subscript
        int_111269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4599, 12), 'int')
        # Getting the type of 'axes' (line 4599)
        axes_111270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4599, 25), 'axes')
        # Obtaining the member 'bbox' of a type (line 4599)
        bbox_111271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4599, 25), axes_111270, 'bbox')
        # Obtaining the member 'bounds' of a type (line 4599)
        bounds_111272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4599, 25), bbox_111271, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 4599)
        getitem___111273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4599, 12), bounds_111272, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4599)
        subscript_call_result_111274 = invoke(stypy.reporting.localization.Localization(__file__, 4599, 12), getitem___111273, int_111269)
        
        # Assigning a type to the variable 'tuple_var_assignment_100767' (line 4599)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4599, 12), 'tuple_var_assignment_100767', subscript_call_result_111274)
        
        # Assigning a Name to a Name (line 4599):
        
        # Assigning a Name to a Name (line 4599):
        # Getting the type of 'tuple_var_assignment_100764' (line 4599)
        tuple_var_assignment_100764_111275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4599, 12), 'tuple_var_assignment_100764')
        # Assigning a type to the variable 'l' (line 4599)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4599, 12), 'l', tuple_var_assignment_100764_111275)
        
        # Assigning a Name to a Name (line 4599):
        
        # Assigning a Name to a Name (line 4599):
        # Getting the type of 'tuple_var_assignment_100765' (line 4599)
        tuple_var_assignment_100765_111276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4599, 12), 'tuple_var_assignment_100765')
        # Assigning a type to the variable 'b' (line 4599)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4599, 15), 'b', tuple_var_assignment_100765_111276)
        
        # Assigning a Name to a Name (line 4599):
        
        # Assigning a Name to a Name (line 4599):
        # Getting the type of 'tuple_var_assignment_100766' (line 4599)
        tuple_var_assignment_100766_111277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4599, 12), 'tuple_var_assignment_100766')
        # Assigning a type to the variable 'w' (line 4599)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4599, 18), 'w', tuple_var_assignment_100766_111277)
        
        # Assigning a Name to a Name (line 4599):
        
        # Assigning a Name to a Name (line 4599):
        # Getting the type of 'tuple_var_assignment_100767' (line 4599)
        tuple_var_assignment_100767_111278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4599, 12), 'tuple_var_assignment_100767')
        # Assigning a type to the variable 'h' (line 4599)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4599, 21), 'h', tuple_var_assignment_100767_111278)
        
        # Assigning a BinOp to a Name (line 4600):
        
        # Assigning a BinOp to a Name (line 4600):
        
        # Assigning a BinOp to a Name (line 4600):
        # Getting the type of 'l' (line 4600)
        l_111279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4600, 16), 'l')
        # Getting the type of 'w' (line 4600)
        w_111280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4600, 20), 'w')
        # Applying the binary operator '+' (line 4600)
        result_add_111281 = python_operator(stypy.reporting.localization.Localization(__file__, 4600, 16), '+', l_111279, w_111280)
        
        # Assigning a type to the variable 'r' (line 4600)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4600, 12), 'r', result_add_111281)
        
        # Assigning a BinOp to a Name (line 4601):
        
        # Assigning a BinOp to a Name (line 4601):
        
        # Assigning a BinOp to a Name (line 4601):
        # Getting the type of 'b' (line 4601)
        b_111282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4601, 16), 'b')
        # Getting the type of 'h' (line 4601)
        h_111283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4601, 20), 'h')
        # Applying the binary operator '+' (line 4601)
        result_add_111284 = python_operator(stypy.reporting.localization.Localization(__file__, 4601, 16), '+', b_111282, h_111283)
        
        # Assigning a type to the variable 't' (line 4601)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4601, 12), 't', result_add_111284)
        
        
        # Getting the type of 'x' (line 4602)
        x_111285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4602, 15), 'x')
        int_111286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4602, 19), 'int')
        # Applying the binary operator '<' (line 4602)
        result_lt_111287 = python_operator(stypy.reporting.localization.Localization(__file__, 4602, 15), '<', x_111285, int_111286)
        
        # Testing the type of an if condition (line 4602)
        if_condition_111288 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4602, 12), result_lt_111287)
        # Assigning a type to the variable 'if_condition_111288' (line 4602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4602, 12), 'if_condition_111288', if_condition_111288)
        # SSA begins for if statement (line 4602)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 4603):
        
        # Assigning a BinOp to a Name (line 4603):
        
        # Assigning a BinOp to a Name (line 4603):
        # Getting the type of 'r' (line 4603)
        r_111289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4603, 20), 'r')
        # Getting the type of 'x' (line 4603)
        x_111290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4603, 24), 'x')
        # Getting the type of 'dpi' (line 4603)
        dpi_111291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4603, 28), 'dpi')
        # Applying the binary operator '*' (line 4603)
        result_mul_111292 = python_operator(stypy.reporting.localization.Localization(__file__, 4603, 24), '*', x_111290, dpi_111291)
        
        float_111293 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4603, 34), 'float')
        # Applying the binary operator 'div' (line 4603)
        result_div_111294 = python_operator(stypy.reporting.localization.Localization(__file__, 4603, 32), 'div', result_mul_111292, float_111293)
        
        # Applying the binary operator '+' (line 4603)
        result_add_111295 = python_operator(stypy.reporting.localization.Localization(__file__, 4603, 20), '+', r_111289, result_div_111294)
        
        # Assigning a type to the variable 'x' (line 4603)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4603, 16), 'x', result_add_111295)
        # SSA branch for the else part of an if statement (line 4602)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 4605):
        
        # Assigning a BinOp to a Name (line 4605):
        
        # Assigning a BinOp to a Name (line 4605):
        # Getting the type of 'l' (line 4605)
        l_111296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4605, 20), 'l')
        # Getting the type of 'x' (line 4605)
        x_111297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4605, 24), 'x')
        # Getting the type of 'dpi' (line 4605)
        dpi_111298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4605, 28), 'dpi')
        # Applying the binary operator '*' (line 4605)
        result_mul_111299 = python_operator(stypy.reporting.localization.Localization(__file__, 4605, 24), '*', x_111297, dpi_111298)
        
        float_111300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4605, 34), 'float')
        # Applying the binary operator 'div' (line 4605)
        result_div_111301 = python_operator(stypy.reporting.localization.Localization(__file__, 4605, 32), 'div', result_mul_111299, float_111300)
        
        # Applying the binary operator '+' (line 4605)
        result_add_111302 = python_operator(stypy.reporting.localization.Localization(__file__, 4605, 20), '+', l_111296, result_div_111301)
        
        # Assigning a type to the variable 'x' (line 4605)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4605, 16), 'x', result_add_111302)
        # SSA join for if statement (line 4602)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'y' (line 4606)
        y_111303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4606, 15), 'y')
        int_111304 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4606, 19), 'int')
        # Applying the binary operator '<' (line 4606)
        result_lt_111305 = python_operator(stypy.reporting.localization.Localization(__file__, 4606, 15), '<', y_111303, int_111304)
        
        # Testing the type of an if condition (line 4606)
        if_condition_111306 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4606, 12), result_lt_111305)
        # Assigning a type to the variable 'if_condition_111306' (line 4606)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4606, 12), 'if_condition_111306', if_condition_111306)
        # SSA begins for if statement (line 4606)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 4607):
        
        # Assigning a BinOp to a Name (line 4607):
        
        # Assigning a BinOp to a Name (line 4607):
        # Getting the type of 't' (line 4607)
        t_111307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4607, 20), 't')
        # Getting the type of 'y' (line 4607)
        y_111308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4607, 24), 'y')
        # Getting the type of 'dpi' (line 4607)
        dpi_111309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4607, 28), 'dpi')
        # Applying the binary operator '*' (line 4607)
        result_mul_111310 = python_operator(stypy.reporting.localization.Localization(__file__, 4607, 24), '*', y_111308, dpi_111309)
        
        float_111311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4607, 34), 'float')
        # Applying the binary operator 'div' (line 4607)
        result_div_111312 = python_operator(stypy.reporting.localization.Localization(__file__, 4607, 32), 'div', result_mul_111310, float_111311)
        
        # Applying the binary operator '+' (line 4607)
        result_add_111313 = python_operator(stypy.reporting.localization.Localization(__file__, 4607, 20), '+', t_111307, result_div_111312)
        
        # Assigning a type to the variable 'y' (line 4607)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4607, 16), 'y', result_add_111313)
        # SSA branch for the else part of an if statement (line 4606)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 4609):
        
        # Assigning a BinOp to a Name (line 4609):
        
        # Assigning a BinOp to a Name (line 4609):
        # Getting the type of 'b' (line 4609)
        b_111314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4609, 20), 'b')
        # Getting the type of 'y' (line 4609)
        y_111315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4609, 24), 'y')
        # Getting the type of 'dpi' (line 4609)
        dpi_111316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4609, 28), 'dpi')
        # Applying the binary operator '*' (line 4609)
        result_mul_111317 = python_operator(stypy.reporting.localization.Localization(__file__, 4609, 24), '*', y_111315, dpi_111316)
        
        float_111318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4609, 34), 'float')
        # Applying the binary operator 'div' (line 4609)
        result_div_111319 = python_operator(stypy.reporting.localization.Localization(__file__, 4609, 32), 'div', result_mul_111317, float_111318)
        
        # Applying the binary operator '+' (line 4609)
        result_add_111320 = python_operator(stypy.reporting.localization.Localization(__file__, 4609, 20), '+', b_111314, result_div_111319)
        
        # Assigning a type to the variable 'y' (line 4609)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4609, 16), 'y', result_add_111320)
        # SSA join for if statement (line 4606)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 4610)
        tuple_111321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4610, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 4610)
        # Adding element type (line 4610)
        # Getting the type of 'x' (line 4610)
        x_111322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4610, 19), 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4610, 19), tuple_111321, x_111322)
        # Adding element type (line 4610)
        # Getting the type of 'y' (line 4610)
        y_111323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4610, 22), 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4610, 19), tuple_111321, y_111323)
        
        # Assigning a type to the variable 'stypy_return_type' (line 4610)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4610, 12), 'stypy_return_type', tuple_111321)
        # SSA branch for the else part of an if statement (line 4596)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 's' (line 4611)
        s_111324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4611, 13), 's')
        unicode_111325 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4611, 18), 'unicode', u'axes pixels')
        # Applying the binary operator '==' (line 4611)
        result_eq_111326 = python_operator(stypy.reporting.localization.Localization(__file__, 4611, 13), '==', s_111324, unicode_111325)
        
        # Testing the type of an if condition (line 4611)
        if_condition_111327 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4611, 13), result_eq_111326)
        # Assigning a type to the variable 'if_condition_111327' (line 4611)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4611, 13), 'if_condition_111327', if_condition_111327)
        # SSA begins for if statement (line 4611)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Tuple (line 4614):
        
        # Assigning a Subscript to a Name (line 4614):
        
        # Assigning a Subscript to a Name (line 4614):
        
        # Obtaining the type of the subscript
        int_111328 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4614, 12), 'int')
        # Getting the type of 'axes' (line 4614)
        axes_111329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4614, 25), 'axes')
        # Obtaining the member 'bbox' of a type (line 4614)
        bbox_111330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4614, 25), axes_111329, 'bbox')
        # Obtaining the member 'bounds' of a type (line 4614)
        bounds_111331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4614, 25), bbox_111330, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 4614)
        getitem___111332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4614, 12), bounds_111331, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4614)
        subscript_call_result_111333 = invoke(stypy.reporting.localization.Localization(__file__, 4614, 12), getitem___111332, int_111328)
        
        # Assigning a type to the variable 'tuple_var_assignment_100768' (line 4614)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4614, 12), 'tuple_var_assignment_100768', subscript_call_result_111333)
        
        # Assigning a Subscript to a Name (line 4614):
        
        # Assigning a Subscript to a Name (line 4614):
        
        # Obtaining the type of the subscript
        int_111334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4614, 12), 'int')
        # Getting the type of 'axes' (line 4614)
        axes_111335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4614, 25), 'axes')
        # Obtaining the member 'bbox' of a type (line 4614)
        bbox_111336 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4614, 25), axes_111335, 'bbox')
        # Obtaining the member 'bounds' of a type (line 4614)
        bounds_111337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4614, 25), bbox_111336, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 4614)
        getitem___111338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4614, 12), bounds_111337, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4614)
        subscript_call_result_111339 = invoke(stypy.reporting.localization.Localization(__file__, 4614, 12), getitem___111338, int_111334)
        
        # Assigning a type to the variable 'tuple_var_assignment_100769' (line 4614)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4614, 12), 'tuple_var_assignment_100769', subscript_call_result_111339)
        
        # Assigning a Subscript to a Name (line 4614):
        
        # Assigning a Subscript to a Name (line 4614):
        
        # Obtaining the type of the subscript
        int_111340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4614, 12), 'int')
        # Getting the type of 'axes' (line 4614)
        axes_111341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4614, 25), 'axes')
        # Obtaining the member 'bbox' of a type (line 4614)
        bbox_111342 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4614, 25), axes_111341, 'bbox')
        # Obtaining the member 'bounds' of a type (line 4614)
        bounds_111343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4614, 25), bbox_111342, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 4614)
        getitem___111344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4614, 12), bounds_111343, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4614)
        subscript_call_result_111345 = invoke(stypy.reporting.localization.Localization(__file__, 4614, 12), getitem___111344, int_111340)
        
        # Assigning a type to the variable 'tuple_var_assignment_100770' (line 4614)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4614, 12), 'tuple_var_assignment_100770', subscript_call_result_111345)
        
        # Assigning a Subscript to a Name (line 4614):
        
        # Assigning a Subscript to a Name (line 4614):
        
        # Obtaining the type of the subscript
        int_111346 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4614, 12), 'int')
        # Getting the type of 'axes' (line 4614)
        axes_111347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4614, 25), 'axes')
        # Obtaining the member 'bbox' of a type (line 4614)
        bbox_111348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4614, 25), axes_111347, 'bbox')
        # Obtaining the member 'bounds' of a type (line 4614)
        bounds_111349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4614, 25), bbox_111348, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 4614)
        getitem___111350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4614, 12), bounds_111349, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4614)
        subscript_call_result_111351 = invoke(stypy.reporting.localization.Localization(__file__, 4614, 12), getitem___111350, int_111346)
        
        # Assigning a type to the variable 'tuple_var_assignment_100771' (line 4614)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4614, 12), 'tuple_var_assignment_100771', subscript_call_result_111351)
        
        # Assigning a Name to a Name (line 4614):
        
        # Assigning a Name to a Name (line 4614):
        # Getting the type of 'tuple_var_assignment_100768' (line 4614)
        tuple_var_assignment_100768_111352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4614, 12), 'tuple_var_assignment_100768')
        # Assigning a type to the variable 'l' (line 4614)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4614, 12), 'l', tuple_var_assignment_100768_111352)
        
        # Assigning a Name to a Name (line 4614):
        
        # Assigning a Name to a Name (line 4614):
        # Getting the type of 'tuple_var_assignment_100769' (line 4614)
        tuple_var_assignment_100769_111353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4614, 12), 'tuple_var_assignment_100769')
        # Assigning a type to the variable 'b' (line 4614)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4614, 15), 'b', tuple_var_assignment_100769_111353)
        
        # Assigning a Name to a Name (line 4614):
        
        # Assigning a Name to a Name (line 4614):
        # Getting the type of 'tuple_var_assignment_100770' (line 4614)
        tuple_var_assignment_100770_111354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4614, 12), 'tuple_var_assignment_100770')
        # Assigning a type to the variable 'w' (line 4614)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4614, 18), 'w', tuple_var_assignment_100770_111354)
        
        # Assigning a Name to a Name (line 4614):
        
        # Assigning a Name to a Name (line 4614):
        # Getting the type of 'tuple_var_assignment_100771' (line 4614)
        tuple_var_assignment_100771_111355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4614, 12), 'tuple_var_assignment_100771')
        # Assigning a type to the variable 'h' (line 4614)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4614, 21), 'h', tuple_var_assignment_100771_111355)
        
        # Assigning a BinOp to a Name (line 4615):
        
        # Assigning a BinOp to a Name (line 4615):
        
        # Assigning a BinOp to a Name (line 4615):
        # Getting the type of 'l' (line 4615)
        l_111356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4615, 16), 'l')
        # Getting the type of 'w' (line 4615)
        w_111357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4615, 20), 'w')
        # Applying the binary operator '+' (line 4615)
        result_add_111358 = python_operator(stypy.reporting.localization.Localization(__file__, 4615, 16), '+', l_111356, w_111357)
        
        # Assigning a type to the variable 'r' (line 4615)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4615, 12), 'r', result_add_111358)
        
        # Assigning a BinOp to a Name (line 4616):
        
        # Assigning a BinOp to a Name (line 4616):
        
        # Assigning a BinOp to a Name (line 4616):
        # Getting the type of 'b' (line 4616)
        b_111359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4616, 16), 'b')
        # Getting the type of 'h' (line 4616)
        h_111360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4616, 20), 'h')
        # Applying the binary operator '+' (line 4616)
        result_add_111361 = python_operator(stypy.reporting.localization.Localization(__file__, 4616, 16), '+', b_111359, h_111360)
        
        # Assigning a type to the variable 't' (line 4616)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4616, 12), 't', result_add_111361)
        
        
        # Getting the type of 'x' (line 4617)
        x_111362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4617, 15), 'x')
        int_111363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4617, 19), 'int')
        # Applying the binary operator '<' (line 4617)
        result_lt_111364 = python_operator(stypy.reporting.localization.Localization(__file__, 4617, 15), '<', x_111362, int_111363)
        
        # Testing the type of an if condition (line 4617)
        if_condition_111365 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4617, 12), result_lt_111364)
        # Assigning a type to the variable 'if_condition_111365' (line 4617)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4617, 12), 'if_condition_111365', if_condition_111365)
        # SSA begins for if statement (line 4617)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 4618):
        
        # Assigning a BinOp to a Name (line 4618):
        
        # Assigning a BinOp to a Name (line 4618):
        # Getting the type of 'r' (line 4618)
        r_111366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4618, 20), 'r')
        # Getting the type of 'x' (line 4618)
        x_111367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4618, 24), 'x')
        # Applying the binary operator '+' (line 4618)
        result_add_111368 = python_operator(stypy.reporting.localization.Localization(__file__, 4618, 20), '+', r_111366, x_111367)
        
        # Assigning a type to the variable 'x' (line 4618)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4618, 16), 'x', result_add_111368)
        # SSA branch for the else part of an if statement (line 4617)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 4620):
        
        # Assigning a BinOp to a Name (line 4620):
        
        # Assigning a BinOp to a Name (line 4620):
        # Getting the type of 'l' (line 4620)
        l_111369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4620, 20), 'l')
        # Getting the type of 'x' (line 4620)
        x_111370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4620, 24), 'x')
        # Applying the binary operator '+' (line 4620)
        result_add_111371 = python_operator(stypy.reporting.localization.Localization(__file__, 4620, 20), '+', l_111369, x_111370)
        
        # Assigning a type to the variable 'x' (line 4620)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4620, 16), 'x', result_add_111371)
        # SSA join for if statement (line 4617)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'y' (line 4621)
        y_111372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4621, 15), 'y')
        int_111373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4621, 19), 'int')
        # Applying the binary operator '<' (line 4621)
        result_lt_111374 = python_operator(stypy.reporting.localization.Localization(__file__, 4621, 15), '<', y_111372, int_111373)
        
        # Testing the type of an if condition (line 4621)
        if_condition_111375 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4621, 12), result_lt_111374)
        # Assigning a type to the variable 'if_condition_111375' (line 4621)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4621, 12), 'if_condition_111375', if_condition_111375)
        # SSA begins for if statement (line 4621)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 4622):
        
        # Assigning a BinOp to a Name (line 4622):
        
        # Assigning a BinOp to a Name (line 4622):
        # Getting the type of 't' (line 4622)
        t_111376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4622, 20), 't')
        # Getting the type of 'y' (line 4622)
        y_111377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4622, 24), 'y')
        # Applying the binary operator '+' (line 4622)
        result_add_111378 = python_operator(stypy.reporting.localization.Localization(__file__, 4622, 20), '+', t_111376, y_111377)
        
        # Assigning a type to the variable 'y' (line 4622)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4622, 16), 'y', result_add_111378)
        # SSA branch for the else part of an if statement (line 4621)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 4624):
        
        # Assigning a BinOp to a Name (line 4624):
        
        # Assigning a BinOp to a Name (line 4624):
        # Getting the type of 'b' (line 4624)
        b_111379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4624, 20), 'b')
        # Getting the type of 'y' (line 4624)
        y_111380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4624, 24), 'y')
        # Applying the binary operator '+' (line 4624)
        result_add_111381 = python_operator(stypy.reporting.localization.Localization(__file__, 4624, 20), '+', b_111379, y_111380)
        
        # Assigning a type to the variable 'y' (line 4624)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4624, 16), 'y', result_add_111381)
        # SSA join for if statement (line 4621)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 4625)
        tuple_111382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4625, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 4625)
        # Adding element type (line 4625)
        # Getting the type of 'x' (line 4625)
        x_111383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4625, 19), 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4625, 19), tuple_111382, x_111383)
        # Adding element type (line 4625)
        # Getting the type of 'y' (line 4625)
        y_111384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4625, 22), 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4625, 19), tuple_111382, y_111384)
        
        # Assigning a type to the variable 'stypy_return_type' (line 4625)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4625, 12), 'stypy_return_type', tuple_111382)
        # SSA branch for the else part of an if statement (line 4611)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 's' (line 4626)
        s_111385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4626, 13), 's')
        unicode_111386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4626, 18), 'unicode', u'axes fraction')
        # Applying the binary operator '==' (line 4626)
        result_eq_111387 = python_operator(stypy.reporting.localization.Localization(__file__, 4626, 13), '==', s_111385, unicode_111386)
        
        # Testing the type of an if condition (line 4626)
        if_condition_111388 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4626, 13), result_eq_111387)
        # Assigning a type to the variable 'if_condition_111388' (line 4626)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4626, 13), 'if_condition_111388', if_condition_111388)
        # SSA begins for if statement (line 4626)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 4628):
        
        # Assigning a Attribute to a Name (line 4628):
        
        # Assigning a Attribute to a Name (line 4628):
        # Getting the type of 'axes' (line 4628)
        axes_111389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4628, 20), 'axes')
        # Obtaining the member 'transAxes' of a type (line 4628)
        transAxes_111390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4628, 20), axes_111389, 'transAxes')
        # Assigning a type to the variable 'trans' (line 4628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4628, 12), 'trans', transAxes_111390)
        
        # Call to transform_point(...): (line 4629)
        # Processing the call arguments (line 4629)
        
        # Obtaining an instance of the builtin type 'tuple' (line 4629)
        tuple_111393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4629, 42), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 4629)
        # Adding element type (line 4629)
        # Getting the type of 'x' (line 4629)
        x_111394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4629, 42), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4629, 42), tuple_111393, x_111394)
        # Adding element type (line 4629)
        # Getting the type of 'y' (line 4629)
        y_111395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4629, 45), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4629, 42), tuple_111393, y_111395)
        
        # Processing the call keyword arguments (line 4629)
        kwargs_111396 = {}
        # Getting the type of 'trans' (line 4629)
        trans_111391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4629, 19), 'trans', False)
        # Obtaining the member 'transform_point' of a type (line 4629)
        transform_point_111392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4629, 19), trans_111391, 'transform_point')
        # Calling transform_point(args, kwargs) (line 4629)
        transform_point_call_result_111397 = invoke(stypy.reporting.localization.Localization(__file__, 4629, 19), transform_point_111392, *[tuple_111393], **kwargs_111396)
        
        # Assigning a type to the variable 'stypy_return_type' (line 4629)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4629, 12), 'stypy_return_type', transform_point_call_result_111397)
        # SSA join for if statement (line 4626)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 4611)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 4596)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 4592)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 4582)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 4568)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 4562)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 4542)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 4537)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_get_xy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_xy' in the type store
        # Getting the type of 'stypy_return_type' (line 4529)
        stypy_return_type_111398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4529, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_111398)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_xy'
        return stypy_return_type_111398


    @norecursion
    def set_annotation_clip(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_annotation_clip'
        module_type_store = module_type_store.open_function_context('set_annotation_clip', 4631, 4, False)
        # Assigning a type to the variable 'self' (line 4632)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4632, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ConnectionPatch.set_annotation_clip.__dict__.__setitem__('stypy_localization', localization)
        ConnectionPatch.set_annotation_clip.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ConnectionPatch.set_annotation_clip.__dict__.__setitem__('stypy_type_store', module_type_store)
        ConnectionPatch.set_annotation_clip.__dict__.__setitem__('stypy_function_name', 'ConnectionPatch.set_annotation_clip')
        ConnectionPatch.set_annotation_clip.__dict__.__setitem__('stypy_param_names_list', ['b'])
        ConnectionPatch.set_annotation_clip.__dict__.__setitem__('stypy_varargs_param_name', None)
        ConnectionPatch.set_annotation_clip.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ConnectionPatch.set_annotation_clip.__dict__.__setitem__('stypy_call_defaults', defaults)
        ConnectionPatch.set_annotation_clip.__dict__.__setitem__('stypy_call_varargs', varargs)
        ConnectionPatch.set_annotation_clip.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ConnectionPatch.set_annotation_clip.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ConnectionPatch.set_annotation_clip', ['b'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_annotation_clip', localization, ['b'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_annotation_clip(...)' code ##################

        unicode_111399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4640, (-1)), 'unicode', u'\n        set *annotation_clip* attribute.\n\n          * True: the annotation will only be drawn when self.xy is inside the\n                   axes.\n          * False: the annotation will always be drawn regardless of its\n                    position.\n          * None: the self.xy will be checked only if *xycoords* is "data"\n        ')
        
        # Assigning a Name to a Attribute (line 4641):
        
        # Assigning a Name to a Attribute (line 4641):
        
        # Assigning a Name to a Attribute (line 4641):
        # Getting the type of 'b' (line 4641)
        b_111400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4641, 32), 'b')
        # Getting the type of 'self' (line 4641)
        self_111401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4641, 8), 'self')
        # Setting the type of the member '_annotation_clip' of a type (line 4641)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4641, 8), self_111401, '_annotation_clip', b_111400)
        
        # Assigning a Name to a Attribute (line 4642):
        
        # Assigning a Name to a Attribute (line 4642):
        
        # Assigning a Name to a Attribute (line 4642):
        # Getting the type of 'True' (line 4642)
        True_111402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4642, 21), 'True')
        # Getting the type of 'self' (line 4642)
        self_111403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4642, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 4642)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4642, 8), self_111403, 'stale', True_111402)
        
        # ################# End of 'set_annotation_clip(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_annotation_clip' in the type store
        # Getting the type of 'stypy_return_type' (line 4631)
        stypy_return_type_111404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4631, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_111404)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_annotation_clip'
        return stypy_return_type_111404


    @norecursion
    def get_annotation_clip(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_annotation_clip'
        module_type_store = module_type_store.open_function_context('get_annotation_clip', 4644, 4, False)
        # Assigning a type to the variable 'self' (line 4645)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4645, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ConnectionPatch.get_annotation_clip.__dict__.__setitem__('stypy_localization', localization)
        ConnectionPatch.get_annotation_clip.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ConnectionPatch.get_annotation_clip.__dict__.__setitem__('stypy_type_store', module_type_store)
        ConnectionPatch.get_annotation_clip.__dict__.__setitem__('stypy_function_name', 'ConnectionPatch.get_annotation_clip')
        ConnectionPatch.get_annotation_clip.__dict__.__setitem__('stypy_param_names_list', [])
        ConnectionPatch.get_annotation_clip.__dict__.__setitem__('stypy_varargs_param_name', None)
        ConnectionPatch.get_annotation_clip.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ConnectionPatch.get_annotation_clip.__dict__.__setitem__('stypy_call_defaults', defaults)
        ConnectionPatch.get_annotation_clip.__dict__.__setitem__('stypy_call_varargs', varargs)
        ConnectionPatch.get_annotation_clip.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ConnectionPatch.get_annotation_clip.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ConnectionPatch.get_annotation_clip', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_annotation_clip', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_annotation_clip(...)' code ##################

        unicode_111405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4648, (-1)), 'unicode', u'\n        Return *annotation_clip* attribute.\n        See :meth:`set_annotation_clip` for the meaning of return values.\n        ')
        # Getting the type of 'self' (line 4649)
        self_111406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4649, 15), 'self')
        # Obtaining the member '_annotation_clip' of a type (line 4649)
        _annotation_clip_111407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4649, 15), self_111406, '_annotation_clip')
        # Assigning a type to the variable 'stypy_return_type' (line 4649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4649, 8), 'stypy_return_type', _annotation_clip_111407)
        
        # ################# End of 'get_annotation_clip(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_annotation_clip' in the type store
        # Getting the type of 'stypy_return_type' (line 4644)
        stypy_return_type_111408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4644, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_111408)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_annotation_clip'
        return stypy_return_type_111408


    @norecursion
    def get_path_in_displaycoord(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_path_in_displaycoord'
        module_type_store = module_type_store.open_function_context('get_path_in_displaycoord', 4651, 4, False)
        # Assigning a type to the variable 'self' (line 4652)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4652, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ConnectionPatch.get_path_in_displaycoord.__dict__.__setitem__('stypy_localization', localization)
        ConnectionPatch.get_path_in_displaycoord.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ConnectionPatch.get_path_in_displaycoord.__dict__.__setitem__('stypy_type_store', module_type_store)
        ConnectionPatch.get_path_in_displaycoord.__dict__.__setitem__('stypy_function_name', 'ConnectionPatch.get_path_in_displaycoord')
        ConnectionPatch.get_path_in_displaycoord.__dict__.__setitem__('stypy_param_names_list', [])
        ConnectionPatch.get_path_in_displaycoord.__dict__.__setitem__('stypy_varargs_param_name', None)
        ConnectionPatch.get_path_in_displaycoord.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ConnectionPatch.get_path_in_displaycoord.__dict__.__setitem__('stypy_call_defaults', defaults)
        ConnectionPatch.get_path_in_displaycoord.__dict__.__setitem__('stypy_call_varargs', varargs)
        ConnectionPatch.get_path_in_displaycoord.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ConnectionPatch.get_path_in_displaycoord.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ConnectionPatch.get_path_in_displaycoord', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_path_in_displaycoord', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_path_in_displaycoord(...)' code ##################

        unicode_111409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4654, (-1)), 'unicode', u'\n        Return the mutated path of the arrow in the display coord\n        ')
        
        # Assigning a Call to a Name (line 4656):
        
        # Assigning a Call to a Name (line 4656):
        
        # Assigning a Call to a Name (line 4656):
        
        # Call to get_dpi_cor(...): (line 4656)
        # Processing the call keyword arguments (line 4656)
        kwargs_111412 = {}
        # Getting the type of 'self' (line 4656)
        self_111410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4656, 18), 'self', False)
        # Obtaining the member 'get_dpi_cor' of a type (line 4656)
        get_dpi_cor_111411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4656, 18), self_111410, 'get_dpi_cor')
        # Calling get_dpi_cor(args, kwargs) (line 4656)
        get_dpi_cor_call_result_111413 = invoke(stypy.reporting.localization.Localization(__file__, 4656, 18), get_dpi_cor_111411, *[], **kwargs_111412)
        
        # Assigning a type to the variable 'dpi_cor' (line 4656)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4656, 8), 'dpi_cor', get_dpi_cor_call_result_111413)
        
        # Assigning a Attribute to a Tuple (line 4658):
        
        # Assigning a Subscript to a Name (line 4658):
        
        # Assigning a Subscript to a Name (line 4658):
        
        # Obtaining the type of the subscript
        int_111414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4658, 8), 'int')
        # Getting the type of 'self' (line 4658)
        self_111415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4658, 15), 'self')
        # Obtaining the member 'xy1' of a type (line 4658)
        xy1_111416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4658, 15), self_111415, 'xy1')
        # Obtaining the member '__getitem__' of a type (line 4658)
        getitem___111417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4658, 8), xy1_111416, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4658)
        subscript_call_result_111418 = invoke(stypy.reporting.localization.Localization(__file__, 4658, 8), getitem___111417, int_111414)
        
        # Assigning a type to the variable 'tuple_var_assignment_100772' (line 4658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4658, 8), 'tuple_var_assignment_100772', subscript_call_result_111418)
        
        # Assigning a Subscript to a Name (line 4658):
        
        # Assigning a Subscript to a Name (line 4658):
        
        # Obtaining the type of the subscript
        int_111419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4658, 8), 'int')
        # Getting the type of 'self' (line 4658)
        self_111420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4658, 15), 'self')
        # Obtaining the member 'xy1' of a type (line 4658)
        xy1_111421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4658, 15), self_111420, 'xy1')
        # Obtaining the member '__getitem__' of a type (line 4658)
        getitem___111422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4658, 8), xy1_111421, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4658)
        subscript_call_result_111423 = invoke(stypy.reporting.localization.Localization(__file__, 4658, 8), getitem___111422, int_111419)
        
        # Assigning a type to the variable 'tuple_var_assignment_100773' (line 4658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4658, 8), 'tuple_var_assignment_100773', subscript_call_result_111423)
        
        # Assigning a Name to a Name (line 4658):
        
        # Assigning a Name to a Name (line 4658):
        # Getting the type of 'tuple_var_assignment_100772' (line 4658)
        tuple_var_assignment_100772_111424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4658, 8), 'tuple_var_assignment_100772')
        # Assigning a type to the variable 'x' (line 4658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4658, 8), 'x', tuple_var_assignment_100772_111424)
        
        # Assigning a Name to a Name (line 4658):
        
        # Assigning a Name to a Name (line 4658):
        # Getting the type of 'tuple_var_assignment_100773' (line 4658)
        tuple_var_assignment_100773_111425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4658, 8), 'tuple_var_assignment_100773')
        # Assigning a type to the variable 'y' (line 4658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4658, 11), 'y', tuple_var_assignment_100773_111425)
        
        # Assigning a Call to a Name (line 4659):
        
        # Assigning a Call to a Name (line 4659):
        
        # Assigning a Call to a Name (line 4659):
        
        # Call to _get_xy(...): (line 4659)
        # Processing the call arguments (line 4659)
        # Getting the type of 'x' (line 4659)
        x_111428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4659, 28), 'x', False)
        # Getting the type of 'y' (line 4659)
        y_111429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4659, 31), 'y', False)
        # Getting the type of 'self' (line 4659)
        self_111430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4659, 34), 'self', False)
        # Obtaining the member 'coords1' of a type (line 4659)
        coords1_111431 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4659, 34), self_111430, 'coords1')
        # Getting the type of 'self' (line 4659)
        self_111432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4659, 48), 'self', False)
        # Obtaining the member 'axesA' of a type (line 4659)
        axesA_111433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4659, 48), self_111432, 'axesA')
        # Processing the call keyword arguments (line 4659)
        kwargs_111434 = {}
        # Getting the type of 'self' (line 4659)
        self_111426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4659, 15), 'self', False)
        # Obtaining the member '_get_xy' of a type (line 4659)
        _get_xy_111427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4659, 15), self_111426, '_get_xy')
        # Calling _get_xy(args, kwargs) (line 4659)
        _get_xy_call_result_111435 = invoke(stypy.reporting.localization.Localization(__file__, 4659, 15), _get_xy_111427, *[x_111428, y_111429, coords1_111431, axesA_111433], **kwargs_111434)
        
        # Assigning a type to the variable 'posA' (line 4659)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4659, 8), 'posA', _get_xy_call_result_111435)
        
        # Assigning a Attribute to a Tuple (line 4661):
        
        # Assigning a Subscript to a Name (line 4661):
        
        # Assigning a Subscript to a Name (line 4661):
        
        # Obtaining the type of the subscript
        int_111436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4661, 8), 'int')
        # Getting the type of 'self' (line 4661)
        self_111437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4661, 15), 'self')
        # Obtaining the member 'xy2' of a type (line 4661)
        xy2_111438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4661, 15), self_111437, 'xy2')
        # Obtaining the member '__getitem__' of a type (line 4661)
        getitem___111439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4661, 8), xy2_111438, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4661)
        subscript_call_result_111440 = invoke(stypy.reporting.localization.Localization(__file__, 4661, 8), getitem___111439, int_111436)
        
        # Assigning a type to the variable 'tuple_var_assignment_100774' (line 4661)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4661, 8), 'tuple_var_assignment_100774', subscript_call_result_111440)
        
        # Assigning a Subscript to a Name (line 4661):
        
        # Assigning a Subscript to a Name (line 4661):
        
        # Obtaining the type of the subscript
        int_111441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4661, 8), 'int')
        # Getting the type of 'self' (line 4661)
        self_111442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4661, 15), 'self')
        # Obtaining the member 'xy2' of a type (line 4661)
        xy2_111443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4661, 15), self_111442, 'xy2')
        # Obtaining the member '__getitem__' of a type (line 4661)
        getitem___111444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4661, 8), xy2_111443, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4661)
        subscript_call_result_111445 = invoke(stypy.reporting.localization.Localization(__file__, 4661, 8), getitem___111444, int_111441)
        
        # Assigning a type to the variable 'tuple_var_assignment_100775' (line 4661)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4661, 8), 'tuple_var_assignment_100775', subscript_call_result_111445)
        
        # Assigning a Name to a Name (line 4661):
        
        # Assigning a Name to a Name (line 4661):
        # Getting the type of 'tuple_var_assignment_100774' (line 4661)
        tuple_var_assignment_100774_111446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4661, 8), 'tuple_var_assignment_100774')
        # Assigning a type to the variable 'x' (line 4661)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4661, 8), 'x', tuple_var_assignment_100774_111446)
        
        # Assigning a Name to a Name (line 4661):
        
        # Assigning a Name to a Name (line 4661):
        # Getting the type of 'tuple_var_assignment_100775' (line 4661)
        tuple_var_assignment_100775_111447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4661, 8), 'tuple_var_assignment_100775')
        # Assigning a type to the variable 'y' (line 4661)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4661, 11), 'y', tuple_var_assignment_100775_111447)
        
        # Assigning a Call to a Name (line 4662):
        
        # Assigning a Call to a Name (line 4662):
        
        # Assigning a Call to a Name (line 4662):
        
        # Call to _get_xy(...): (line 4662)
        # Processing the call arguments (line 4662)
        # Getting the type of 'x' (line 4662)
        x_111450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4662, 28), 'x', False)
        # Getting the type of 'y' (line 4662)
        y_111451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4662, 31), 'y', False)
        # Getting the type of 'self' (line 4662)
        self_111452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4662, 34), 'self', False)
        # Obtaining the member 'coords2' of a type (line 4662)
        coords2_111453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4662, 34), self_111452, 'coords2')
        # Getting the type of 'self' (line 4662)
        self_111454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4662, 48), 'self', False)
        # Obtaining the member 'axesB' of a type (line 4662)
        axesB_111455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4662, 48), self_111454, 'axesB')
        # Processing the call keyword arguments (line 4662)
        kwargs_111456 = {}
        # Getting the type of 'self' (line 4662)
        self_111448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4662, 15), 'self', False)
        # Obtaining the member '_get_xy' of a type (line 4662)
        _get_xy_111449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4662, 15), self_111448, '_get_xy')
        # Calling _get_xy(args, kwargs) (line 4662)
        _get_xy_call_result_111457 = invoke(stypy.reporting.localization.Localization(__file__, 4662, 15), _get_xy_111449, *[x_111450, y_111451, coords2_111453, axesB_111455], **kwargs_111456)
        
        # Assigning a type to the variable 'posB' (line 4662)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4662, 8), 'posB', _get_xy_call_result_111457)
        
        # Assigning a Call to a Name (line 4664):
        
        # Assigning a Call to a Name (line 4664):
        
        # Assigning a Call to a Name (line 4664):
        
        # Call to (...): (line 4664)
        # Processing the call arguments (line 4664)
        # Getting the type of 'posA' (line 4664)
        posA_111462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4664, 43), 'posA', False)
        # Getting the type of 'posB' (line 4664)
        posB_111463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4664, 49), 'posB', False)
        # Processing the call keyword arguments (line 4664)
        # Getting the type of 'self' (line 4665)
        self_111464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4665, 50), 'self', False)
        # Obtaining the member 'patchA' of a type (line 4665)
        patchA_111465 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4665, 50), self_111464, 'patchA')
        keyword_111466 = patchA_111465
        # Getting the type of 'self' (line 4666)
        self_111467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4666, 50), 'self', False)
        # Obtaining the member 'patchB' of a type (line 4666)
        patchB_111468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4666, 50), self_111467, 'patchB')
        keyword_111469 = patchB_111468
        # Getting the type of 'self' (line 4667)
        self_111470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4667, 51), 'self', False)
        # Obtaining the member 'shrinkA' of a type (line 4667)
        shrinkA_111471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4667, 51), self_111470, 'shrinkA')
        # Getting the type of 'dpi_cor' (line 4667)
        dpi_cor_111472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4667, 66), 'dpi_cor', False)
        # Applying the binary operator '*' (line 4667)
        result_mul_111473 = python_operator(stypy.reporting.localization.Localization(__file__, 4667, 51), '*', shrinkA_111471, dpi_cor_111472)
        
        keyword_111474 = result_mul_111473
        # Getting the type of 'self' (line 4668)
        self_111475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4668, 51), 'self', False)
        # Obtaining the member 'shrinkB' of a type (line 4668)
        shrinkB_111476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4668, 51), self_111475, 'shrinkB')
        # Getting the type of 'dpi_cor' (line 4668)
        dpi_cor_111477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4668, 66), 'dpi_cor', False)
        # Applying the binary operator '*' (line 4668)
        result_mul_111478 = python_operator(stypy.reporting.localization.Localization(__file__, 4668, 51), '*', shrinkB_111476, dpi_cor_111477)
        
        keyword_111479 = result_mul_111478
        kwargs_111480 = {'patchA': keyword_111466, 'patchB': keyword_111469, 'shrinkB': keyword_111479, 'shrinkA': keyword_111474}
        
        # Call to get_connectionstyle(...): (line 4664)
        # Processing the call keyword arguments (line 4664)
        kwargs_111460 = {}
        # Getting the type of 'self' (line 4664)
        self_111458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4664, 16), 'self', False)
        # Obtaining the member 'get_connectionstyle' of a type (line 4664)
        get_connectionstyle_111459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4664, 16), self_111458, 'get_connectionstyle')
        # Calling get_connectionstyle(args, kwargs) (line 4664)
        get_connectionstyle_call_result_111461 = invoke(stypy.reporting.localization.Localization(__file__, 4664, 16), get_connectionstyle_111459, *[], **kwargs_111460)
        
        # Calling (args, kwargs) (line 4664)
        _call_result_111481 = invoke(stypy.reporting.localization.Localization(__file__, 4664, 16), get_connectionstyle_call_result_111461, *[posA_111462, posB_111463], **kwargs_111480)
        
        # Assigning a type to the variable '_path' (line 4664)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4664, 8), '_path', _call_result_111481)
        
        # Assigning a Call to a Tuple (line 4671):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to (...): (line 4671)
        # Processing the call arguments (line 4671)
        # Getting the type of '_path' (line 4672)
        _path_111486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4672, 40), '_path', False)
        
        # Call to get_mutation_scale(...): (line 4673)
        # Processing the call keyword arguments (line 4673)
        kwargs_111489 = {}
        # Getting the type of 'self' (line 4673)
        self_111487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4673, 40), 'self', False)
        # Obtaining the member 'get_mutation_scale' of a type (line 4673)
        get_mutation_scale_111488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4673, 40), self_111487, 'get_mutation_scale')
        # Calling get_mutation_scale(args, kwargs) (line 4673)
        get_mutation_scale_call_result_111490 = invoke(stypy.reporting.localization.Localization(__file__, 4673, 40), get_mutation_scale_111488, *[], **kwargs_111489)
        
        # Getting the type of 'dpi_cor' (line 4673)
        dpi_cor_111491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4673, 68), 'dpi_cor', False)
        # Applying the binary operator '*' (line 4673)
        result_mul_111492 = python_operator(stypy.reporting.localization.Localization(__file__, 4673, 40), '*', get_mutation_scale_call_result_111490, dpi_cor_111491)
        
        
        # Call to get_linewidth(...): (line 4674)
        # Processing the call keyword arguments (line 4674)
        kwargs_111495 = {}
        # Getting the type of 'self' (line 4674)
        self_111493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4674, 40), 'self', False)
        # Obtaining the member 'get_linewidth' of a type (line 4674)
        get_linewidth_111494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4674, 40), self_111493, 'get_linewidth')
        # Calling get_linewidth(args, kwargs) (line 4674)
        get_linewidth_call_result_111496 = invoke(stypy.reporting.localization.Localization(__file__, 4674, 40), get_linewidth_111494, *[], **kwargs_111495)
        
        # Getting the type of 'dpi_cor' (line 4674)
        dpi_cor_111497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4674, 63), 'dpi_cor', False)
        # Applying the binary operator '*' (line 4674)
        result_mul_111498 = python_operator(stypy.reporting.localization.Localization(__file__, 4674, 40), '*', get_linewidth_call_result_111496, dpi_cor_111497)
        
        
        # Call to get_mutation_aspect(...): (line 4675)
        # Processing the call keyword arguments (line 4675)
        kwargs_111501 = {}
        # Getting the type of 'self' (line 4675)
        self_111499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4675, 40), 'self', False)
        # Obtaining the member 'get_mutation_aspect' of a type (line 4675)
        get_mutation_aspect_111500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4675, 40), self_111499, 'get_mutation_aspect')
        # Calling get_mutation_aspect(args, kwargs) (line 4675)
        get_mutation_aspect_call_result_111502 = invoke(stypy.reporting.localization.Localization(__file__, 4675, 40), get_mutation_aspect_111500, *[], **kwargs_111501)
        
        # Processing the call keyword arguments (line 4671)
        kwargs_111503 = {}
        
        # Call to get_arrowstyle(...): (line 4671)
        # Processing the call keyword arguments (line 4671)
        kwargs_111484 = {}
        # Getting the type of 'self' (line 4671)
        self_111482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4671, 26), 'self', False)
        # Obtaining the member 'get_arrowstyle' of a type (line 4671)
        get_arrowstyle_111483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4671, 26), self_111482, 'get_arrowstyle')
        # Calling get_arrowstyle(args, kwargs) (line 4671)
        get_arrowstyle_call_result_111485 = invoke(stypy.reporting.localization.Localization(__file__, 4671, 26), get_arrowstyle_111483, *[], **kwargs_111484)
        
        # Calling (args, kwargs) (line 4671)
        _call_result_111504 = invoke(stypy.reporting.localization.Localization(__file__, 4671, 26), get_arrowstyle_call_result_111485, *[_path_111486, result_mul_111492, result_mul_111498, get_mutation_aspect_call_result_111502], **kwargs_111503)
        
        # Assigning a type to the variable 'call_assignment_100776' (line 4671)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4671, 8), 'call_assignment_100776', _call_result_111504)
        
        # Assigning a Call to a Name (line 4671):
        
        # Assigning a Call to a Name (line 4671):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_111507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4671, 8), 'int')
        # Processing the call keyword arguments
        kwargs_111508 = {}
        # Getting the type of 'call_assignment_100776' (line 4671)
        call_assignment_100776_111505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4671, 8), 'call_assignment_100776', False)
        # Obtaining the member '__getitem__' of a type (line 4671)
        getitem___111506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4671, 8), call_assignment_100776_111505, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_111509 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___111506, *[int_111507], **kwargs_111508)
        
        # Assigning a type to the variable 'call_assignment_100777' (line 4671)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4671, 8), 'call_assignment_100777', getitem___call_result_111509)
        
        # Assigning a Name to a Name (line 4671):
        
        # Assigning a Name to a Name (line 4671):
        # Getting the type of 'call_assignment_100777' (line 4671)
        call_assignment_100777_111510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4671, 8), 'call_assignment_100777')
        # Assigning a type to the variable '_path' (line 4671)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4671, 8), '_path', call_assignment_100777_111510)
        
        # Assigning a Call to a Name (line 4671):
        
        # Assigning a Call to a Name (line 4671):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_111513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4671, 8), 'int')
        # Processing the call keyword arguments
        kwargs_111514 = {}
        # Getting the type of 'call_assignment_100776' (line 4671)
        call_assignment_100776_111511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4671, 8), 'call_assignment_100776', False)
        # Obtaining the member '__getitem__' of a type (line 4671)
        getitem___111512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4671, 8), call_assignment_100776_111511, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_111515 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___111512, *[int_111513], **kwargs_111514)
        
        # Assigning a type to the variable 'call_assignment_100778' (line 4671)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4671, 8), 'call_assignment_100778', getitem___call_result_111515)
        
        # Assigning a Name to a Name (line 4671):
        
        # Assigning a Name to a Name (line 4671):
        # Getting the type of 'call_assignment_100778' (line 4671)
        call_assignment_100778_111516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4671, 8), 'call_assignment_100778')
        # Assigning a type to the variable 'fillable' (line 4671)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4671, 15), 'fillable', call_assignment_100778_111516)
        
        # Obtaining an instance of the builtin type 'tuple' (line 4678)
        tuple_111517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4678, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 4678)
        # Adding element type (line 4678)
        # Getting the type of '_path' (line 4678)
        _path_111518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4678, 15), '_path')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4678, 15), tuple_111517, _path_111518)
        # Adding element type (line 4678)
        # Getting the type of 'fillable' (line 4678)
        fillable_111519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4678, 22), 'fillable')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4678, 15), tuple_111517, fillable_111519)
        
        # Assigning a type to the variable 'stypy_return_type' (line 4678)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4678, 8), 'stypy_return_type', tuple_111517)
        
        # ################# End of 'get_path_in_displaycoord(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_path_in_displaycoord' in the type store
        # Getting the type of 'stypy_return_type' (line 4651)
        stypy_return_type_111520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4651, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_111520)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_path_in_displaycoord'
        return stypy_return_type_111520


    @norecursion
    def _check_xy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_check_xy'
        module_type_store = module_type_store.open_function_context('_check_xy', 4680, 4, False)
        # Assigning a type to the variable 'self' (line 4681)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4681, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ConnectionPatch._check_xy.__dict__.__setitem__('stypy_localization', localization)
        ConnectionPatch._check_xy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ConnectionPatch._check_xy.__dict__.__setitem__('stypy_type_store', module_type_store)
        ConnectionPatch._check_xy.__dict__.__setitem__('stypy_function_name', 'ConnectionPatch._check_xy')
        ConnectionPatch._check_xy.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        ConnectionPatch._check_xy.__dict__.__setitem__('stypy_varargs_param_name', None)
        ConnectionPatch._check_xy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ConnectionPatch._check_xy.__dict__.__setitem__('stypy_call_defaults', defaults)
        ConnectionPatch._check_xy.__dict__.__setitem__('stypy_call_varargs', varargs)
        ConnectionPatch._check_xy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ConnectionPatch._check_xy.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ConnectionPatch._check_xy', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_check_xy', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_check_xy(...)' code ##################

        unicode_111521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4684, (-1)), 'unicode', u'\n        check if the annotation need to\n        be drawn.\n        ')
        
        # Assigning a Call to a Name (line 4686):
        
        # Assigning a Call to a Name (line 4686):
        
        # Assigning a Call to a Name (line 4686):
        
        # Call to get_annotation_clip(...): (line 4686)
        # Processing the call keyword arguments (line 4686)
        kwargs_111524 = {}
        # Getting the type of 'self' (line 4686)
        self_111522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4686, 12), 'self', False)
        # Obtaining the member 'get_annotation_clip' of a type (line 4686)
        get_annotation_clip_111523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4686, 12), self_111522, 'get_annotation_clip')
        # Calling get_annotation_clip(args, kwargs) (line 4686)
        get_annotation_clip_call_result_111525 = invoke(stypy.reporting.localization.Localization(__file__, 4686, 12), get_annotation_clip_111523, *[], **kwargs_111524)
        
        # Assigning a type to the variable 'b' (line 4686)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4686, 8), 'b', get_annotation_clip_call_result_111525)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'b' (line 4688)
        b_111526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4688, 11), 'b')
        
        # Evaluating a boolean operation
        
        # Getting the type of 'b' (line 4688)
        b_111527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4688, 17), 'b')
        # Getting the type of 'None' (line 4688)
        None_111528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4688, 22), 'None')
        # Applying the binary operator 'is' (line 4688)
        result_is__111529 = python_operator(stypy.reporting.localization.Localization(__file__, 4688, 17), 'is', b_111527, None_111528)
        
        
        # Getting the type of 'self' (line 4688)
        self_111530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4688, 31), 'self')
        # Obtaining the member 'coords1' of a type (line 4688)
        coords1_111531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4688, 31), self_111530, 'coords1')
        unicode_111532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4688, 47), 'unicode', u'data')
        # Applying the binary operator '==' (line 4688)
        result_eq_111533 = python_operator(stypy.reporting.localization.Localization(__file__, 4688, 31), '==', coords1_111531, unicode_111532)
        
        # Applying the binary operator 'and' (line 4688)
        result_and_keyword_111534 = python_operator(stypy.reporting.localization.Localization(__file__, 4688, 17), 'and', result_is__111529, result_eq_111533)
        
        # Applying the binary operator 'or' (line 4688)
        result_or_keyword_111535 = python_operator(stypy.reporting.localization.Localization(__file__, 4688, 11), 'or', b_111526, result_and_keyword_111534)
        
        # Testing the type of an if condition (line 4688)
        if_condition_111536 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4688, 8), result_or_keyword_111535)
        # Assigning a type to the variable 'if_condition_111536' (line 4688)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4688, 8), 'if_condition_111536', if_condition_111536)
        # SSA begins for if statement (line 4688)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Tuple (line 4689):
        
        # Assigning a Subscript to a Name (line 4689):
        
        # Assigning a Subscript to a Name (line 4689):
        
        # Obtaining the type of the subscript
        int_111537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4689, 12), 'int')
        # Getting the type of 'self' (line 4689)
        self_111538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4689, 19), 'self')
        # Obtaining the member 'xy1' of a type (line 4689)
        xy1_111539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4689, 19), self_111538, 'xy1')
        # Obtaining the member '__getitem__' of a type (line 4689)
        getitem___111540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4689, 12), xy1_111539, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4689)
        subscript_call_result_111541 = invoke(stypy.reporting.localization.Localization(__file__, 4689, 12), getitem___111540, int_111537)
        
        # Assigning a type to the variable 'tuple_var_assignment_100779' (line 4689)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4689, 12), 'tuple_var_assignment_100779', subscript_call_result_111541)
        
        # Assigning a Subscript to a Name (line 4689):
        
        # Assigning a Subscript to a Name (line 4689):
        
        # Obtaining the type of the subscript
        int_111542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4689, 12), 'int')
        # Getting the type of 'self' (line 4689)
        self_111543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4689, 19), 'self')
        # Obtaining the member 'xy1' of a type (line 4689)
        xy1_111544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4689, 19), self_111543, 'xy1')
        # Obtaining the member '__getitem__' of a type (line 4689)
        getitem___111545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4689, 12), xy1_111544, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4689)
        subscript_call_result_111546 = invoke(stypy.reporting.localization.Localization(__file__, 4689, 12), getitem___111545, int_111542)
        
        # Assigning a type to the variable 'tuple_var_assignment_100780' (line 4689)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4689, 12), 'tuple_var_assignment_100780', subscript_call_result_111546)
        
        # Assigning a Name to a Name (line 4689):
        
        # Assigning a Name to a Name (line 4689):
        # Getting the type of 'tuple_var_assignment_100779' (line 4689)
        tuple_var_assignment_100779_111547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4689, 12), 'tuple_var_assignment_100779')
        # Assigning a type to the variable 'x' (line 4689)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4689, 12), 'x', tuple_var_assignment_100779_111547)
        
        # Assigning a Name to a Name (line 4689):
        
        # Assigning a Name to a Name (line 4689):
        # Getting the type of 'tuple_var_assignment_100780' (line 4689)
        tuple_var_assignment_100780_111548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4689, 12), 'tuple_var_assignment_100780')
        # Assigning a type to the variable 'y' (line 4689)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4689, 15), 'y', tuple_var_assignment_100780_111548)
        
        # Assigning a Call to a Name (line 4690):
        
        # Assigning a Call to a Name (line 4690):
        
        # Assigning a Call to a Name (line 4690):
        
        # Call to _get_xy(...): (line 4690)
        # Processing the call arguments (line 4690)
        # Getting the type of 'x' (line 4690)
        x_111551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4690, 36), 'x', False)
        # Getting the type of 'y' (line 4690)
        y_111552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4690, 39), 'y', False)
        # Getting the type of 'self' (line 4690)
        self_111553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4690, 42), 'self', False)
        # Obtaining the member 'coords1' of a type (line 4690)
        coords1_111554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4690, 42), self_111553, 'coords1')
        # Getting the type of 'self' (line 4690)
        self_111555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4690, 56), 'self', False)
        # Obtaining the member 'axesA' of a type (line 4690)
        axesA_111556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4690, 56), self_111555, 'axesA')
        # Processing the call keyword arguments (line 4690)
        kwargs_111557 = {}
        # Getting the type of 'self' (line 4690)
        self_111549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4690, 23), 'self', False)
        # Obtaining the member '_get_xy' of a type (line 4690)
        _get_xy_111550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4690, 23), self_111549, '_get_xy')
        # Calling _get_xy(args, kwargs) (line 4690)
        _get_xy_call_result_111558 = invoke(stypy.reporting.localization.Localization(__file__, 4690, 23), _get_xy_111550, *[x_111551, y_111552, coords1_111554, axesA_111556], **kwargs_111557)
        
        # Assigning a type to the variable 'xy_pixel' (line 4690)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4690, 12), 'xy_pixel', _get_xy_call_result_111558)
        
        
        
        # Call to contains_point(...): (line 4691)
        # Processing the call arguments (line 4691)
        # Getting the type of 'xy_pixel' (line 4691)
        xy_pixel_111562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4691, 44), 'xy_pixel', False)
        # Processing the call keyword arguments (line 4691)
        kwargs_111563 = {}
        # Getting the type of 'self' (line 4691)
        self_111559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4691, 19), 'self', False)
        # Obtaining the member 'axes' of a type (line 4691)
        axes_111560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4691, 19), self_111559, 'axes')
        # Obtaining the member 'contains_point' of a type (line 4691)
        contains_point_111561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4691, 19), axes_111560, 'contains_point')
        # Calling contains_point(args, kwargs) (line 4691)
        contains_point_call_result_111564 = invoke(stypy.reporting.localization.Localization(__file__, 4691, 19), contains_point_111561, *[xy_pixel_111562], **kwargs_111563)
        
        # Applying the 'not' unary operator (line 4691)
        result_not__111565 = python_operator(stypy.reporting.localization.Localization(__file__, 4691, 15), 'not', contains_point_call_result_111564)
        
        # Testing the type of an if condition (line 4691)
        if_condition_111566 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4691, 12), result_not__111565)
        # Assigning a type to the variable 'if_condition_111566' (line 4691)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4691, 12), 'if_condition_111566', if_condition_111566)
        # SSA begins for if statement (line 4691)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'False' (line 4692)
        False_111567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4692, 23), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 4692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4692, 16), 'stypy_return_type', False_111567)
        # SSA join for if statement (line 4691)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 4688)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'b' (line 4694)
        b_111568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4694, 11), 'b')
        
        # Evaluating a boolean operation
        
        # Getting the type of 'b' (line 4694)
        b_111569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4694, 17), 'b')
        # Getting the type of 'None' (line 4694)
        None_111570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4694, 22), 'None')
        # Applying the binary operator 'is' (line 4694)
        result_is__111571 = python_operator(stypy.reporting.localization.Localization(__file__, 4694, 17), 'is', b_111569, None_111570)
        
        
        # Getting the type of 'self' (line 4694)
        self_111572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4694, 31), 'self')
        # Obtaining the member 'coords2' of a type (line 4694)
        coords2_111573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4694, 31), self_111572, 'coords2')
        unicode_111574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4694, 47), 'unicode', u'data')
        # Applying the binary operator '==' (line 4694)
        result_eq_111575 = python_operator(stypy.reporting.localization.Localization(__file__, 4694, 31), '==', coords2_111573, unicode_111574)
        
        # Applying the binary operator 'and' (line 4694)
        result_and_keyword_111576 = python_operator(stypy.reporting.localization.Localization(__file__, 4694, 17), 'and', result_is__111571, result_eq_111575)
        
        # Applying the binary operator 'or' (line 4694)
        result_or_keyword_111577 = python_operator(stypy.reporting.localization.Localization(__file__, 4694, 11), 'or', b_111568, result_and_keyword_111576)
        
        # Testing the type of an if condition (line 4694)
        if_condition_111578 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4694, 8), result_or_keyword_111577)
        # Assigning a type to the variable 'if_condition_111578' (line 4694)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4694, 8), 'if_condition_111578', if_condition_111578)
        # SSA begins for if statement (line 4694)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Tuple (line 4695):
        
        # Assigning a Subscript to a Name (line 4695):
        
        # Assigning a Subscript to a Name (line 4695):
        
        # Obtaining the type of the subscript
        int_111579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4695, 12), 'int')
        # Getting the type of 'self' (line 4695)
        self_111580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4695, 19), 'self')
        # Obtaining the member 'xy2' of a type (line 4695)
        xy2_111581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4695, 19), self_111580, 'xy2')
        # Obtaining the member '__getitem__' of a type (line 4695)
        getitem___111582 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4695, 12), xy2_111581, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4695)
        subscript_call_result_111583 = invoke(stypy.reporting.localization.Localization(__file__, 4695, 12), getitem___111582, int_111579)
        
        # Assigning a type to the variable 'tuple_var_assignment_100781' (line 4695)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4695, 12), 'tuple_var_assignment_100781', subscript_call_result_111583)
        
        # Assigning a Subscript to a Name (line 4695):
        
        # Assigning a Subscript to a Name (line 4695):
        
        # Obtaining the type of the subscript
        int_111584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4695, 12), 'int')
        # Getting the type of 'self' (line 4695)
        self_111585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4695, 19), 'self')
        # Obtaining the member 'xy2' of a type (line 4695)
        xy2_111586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4695, 19), self_111585, 'xy2')
        # Obtaining the member '__getitem__' of a type (line 4695)
        getitem___111587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4695, 12), xy2_111586, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4695)
        subscript_call_result_111588 = invoke(stypy.reporting.localization.Localization(__file__, 4695, 12), getitem___111587, int_111584)
        
        # Assigning a type to the variable 'tuple_var_assignment_100782' (line 4695)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4695, 12), 'tuple_var_assignment_100782', subscript_call_result_111588)
        
        # Assigning a Name to a Name (line 4695):
        
        # Assigning a Name to a Name (line 4695):
        # Getting the type of 'tuple_var_assignment_100781' (line 4695)
        tuple_var_assignment_100781_111589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4695, 12), 'tuple_var_assignment_100781')
        # Assigning a type to the variable 'x' (line 4695)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4695, 12), 'x', tuple_var_assignment_100781_111589)
        
        # Assigning a Name to a Name (line 4695):
        
        # Assigning a Name to a Name (line 4695):
        # Getting the type of 'tuple_var_assignment_100782' (line 4695)
        tuple_var_assignment_100782_111590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4695, 12), 'tuple_var_assignment_100782')
        # Assigning a type to the variable 'y' (line 4695)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4695, 15), 'y', tuple_var_assignment_100782_111590)
        
        # Assigning a Call to a Name (line 4696):
        
        # Assigning a Call to a Name (line 4696):
        
        # Assigning a Call to a Name (line 4696):
        
        # Call to _get_xy(...): (line 4696)
        # Processing the call arguments (line 4696)
        # Getting the type of 'x' (line 4696)
        x_111593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4696, 36), 'x', False)
        # Getting the type of 'y' (line 4696)
        y_111594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4696, 39), 'y', False)
        # Getting the type of 'self' (line 4696)
        self_111595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4696, 42), 'self', False)
        # Obtaining the member 'coords2' of a type (line 4696)
        coords2_111596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4696, 42), self_111595, 'coords2')
        # Getting the type of 'self' (line 4696)
        self_111597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4696, 56), 'self', False)
        # Obtaining the member 'axesB' of a type (line 4696)
        axesB_111598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4696, 56), self_111597, 'axesB')
        # Processing the call keyword arguments (line 4696)
        kwargs_111599 = {}
        # Getting the type of 'self' (line 4696)
        self_111591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4696, 23), 'self', False)
        # Obtaining the member '_get_xy' of a type (line 4696)
        _get_xy_111592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4696, 23), self_111591, '_get_xy')
        # Calling _get_xy(args, kwargs) (line 4696)
        _get_xy_call_result_111600 = invoke(stypy.reporting.localization.Localization(__file__, 4696, 23), _get_xy_111592, *[x_111593, y_111594, coords2_111596, axesB_111598], **kwargs_111599)
        
        # Assigning a type to the variable 'xy_pixel' (line 4696)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4696, 12), 'xy_pixel', _get_xy_call_result_111600)
        
        # Type idiom detected: calculating its left and rigth part (line 4697)
        # Getting the type of 'self' (line 4697)
        self_111601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4697, 15), 'self')
        # Obtaining the member 'axesB' of a type (line 4697)
        axesB_111602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4697, 15), self_111601, 'axesB')
        # Getting the type of 'None' (line 4697)
        None_111603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4697, 29), 'None')
        
        (may_be_111604, more_types_in_union_111605) = may_be_none(axesB_111602, None_111603)

        if may_be_111604:

            if more_types_in_union_111605:
                # Runtime conditional SSA (line 4697)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 4698):
            
            # Assigning a Attribute to a Name (line 4698):
            
            # Assigning a Attribute to a Name (line 4698):
            # Getting the type of 'self' (line 4698)
            self_111606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4698, 23), 'self')
            # Obtaining the member 'axes' of a type (line 4698)
            axes_111607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4698, 23), self_111606, 'axes')
            # Assigning a type to the variable 'axes' (line 4698)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4698, 16), 'axes', axes_111607)

            if more_types_in_union_111605:
                # Runtime conditional SSA for else branch (line 4697)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_111604) or more_types_in_union_111605):
            
            # Assigning a Attribute to a Name (line 4700):
            
            # Assigning a Attribute to a Name (line 4700):
            
            # Assigning a Attribute to a Name (line 4700):
            # Getting the type of 'self' (line 4700)
            self_111608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4700, 23), 'self')
            # Obtaining the member 'axesB' of a type (line 4700)
            axesB_111609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4700, 23), self_111608, 'axesB')
            # Assigning a type to the variable 'axes' (line 4700)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4700, 16), 'axes', axesB_111609)

            if (may_be_111604 and more_types_in_union_111605):
                # SSA join for if statement (line 4697)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        
        # Call to contains_point(...): (line 4701)
        # Processing the call arguments (line 4701)
        # Getting the type of 'xy_pixel' (line 4701)
        xy_pixel_111612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4701, 39), 'xy_pixel', False)
        # Processing the call keyword arguments (line 4701)
        kwargs_111613 = {}
        # Getting the type of 'axes' (line 4701)
        axes_111610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4701, 19), 'axes', False)
        # Obtaining the member 'contains_point' of a type (line 4701)
        contains_point_111611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4701, 19), axes_111610, 'contains_point')
        # Calling contains_point(args, kwargs) (line 4701)
        contains_point_call_result_111614 = invoke(stypy.reporting.localization.Localization(__file__, 4701, 19), contains_point_111611, *[xy_pixel_111612], **kwargs_111613)
        
        # Applying the 'not' unary operator (line 4701)
        result_not__111615 = python_operator(stypy.reporting.localization.Localization(__file__, 4701, 15), 'not', contains_point_call_result_111614)
        
        # Testing the type of an if condition (line 4701)
        if_condition_111616 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4701, 12), result_not__111615)
        # Assigning a type to the variable 'if_condition_111616' (line 4701)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4701, 12), 'if_condition_111616', if_condition_111616)
        # SSA begins for if statement (line 4701)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'False' (line 4702)
        False_111617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4702, 23), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 4702)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4702, 16), 'stypy_return_type', False_111617)
        # SSA join for if statement (line 4701)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 4694)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'True' (line 4704)
        True_111618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4704, 15), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 4704)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4704, 8), 'stypy_return_type', True_111618)
        
        # ################# End of '_check_xy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_check_xy' in the type store
        # Getting the type of 'stypy_return_type' (line 4680)
        stypy_return_type_111619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4680, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_111619)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_check_xy'
        return stypy_return_type_111619


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 4706, 4, False)
        # Assigning a type to the variable 'self' (line 4707)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4707, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ConnectionPatch.draw.__dict__.__setitem__('stypy_localization', localization)
        ConnectionPatch.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ConnectionPatch.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        ConnectionPatch.draw.__dict__.__setitem__('stypy_function_name', 'ConnectionPatch.draw')
        ConnectionPatch.draw.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        ConnectionPatch.draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        ConnectionPatch.draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ConnectionPatch.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        ConnectionPatch.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        ConnectionPatch.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ConnectionPatch.draw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ConnectionPatch.draw', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        unicode_111620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4709, (-1)), 'unicode', u'\n        Draw.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 4711)
        # Getting the type of 'renderer' (line 4711)
        renderer_111621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4711, 8), 'renderer')
        # Getting the type of 'None' (line 4711)
        None_111622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4711, 27), 'None')
        
        (may_be_111623, more_types_in_union_111624) = may_not_be_none(renderer_111621, None_111622)

        if may_be_111623:

            if more_types_in_union_111624:
                # Runtime conditional SSA (line 4711)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 4712):
            
            # Assigning a Name to a Attribute (line 4712):
            
            # Assigning a Name to a Attribute (line 4712):
            # Getting the type of 'renderer' (line 4712)
            renderer_111625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4712, 29), 'renderer')
            # Getting the type of 'self' (line 4712)
            self_111626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4712, 12), 'self')
            # Setting the type of the member '_renderer' of a type (line 4712)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4712, 12), self_111626, '_renderer', renderer_111625)

            if more_types_in_union_111624:
                # SSA join for if statement (line 4711)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        
        # Call to get_visible(...): (line 4713)
        # Processing the call keyword arguments (line 4713)
        kwargs_111629 = {}
        # Getting the type of 'self' (line 4713)
        self_111627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4713, 15), 'self', False)
        # Obtaining the member 'get_visible' of a type (line 4713)
        get_visible_111628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4713, 15), self_111627, 'get_visible')
        # Calling get_visible(args, kwargs) (line 4713)
        get_visible_call_result_111630 = invoke(stypy.reporting.localization.Localization(__file__, 4713, 15), get_visible_111628, *[], **kwargs_111629)
        
        # Applying the 'not' unary operator (line 4713)
        result_not__111631 = python_operator(stypy.reporting.localization.Localization(__file__, 4713, 11), 'not', get_visible_call_result_111630)
        
        # Testing the type of an if condition (line 4713)
        if_condition_111632 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4713, 8), result_not__111631)
        # Assigning a type to the variable 'if_condition_111632' (line 4713)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4713, 8), 'if_condition_111632', if_condition_111632)
        # SSA begins for if statement (line 4713)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 4714)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4714, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 4713)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to _check_xy(...): (line 4716)
        # Processing the call arguments (line 4716)
        # Getting the type of 'renderer' (line 4716)
        renderer_111635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4716, 30), 'renderer', False)
        # Processing the call keyword arguments (line 4716)
        kwargs_111636 = {}
        # Getting the type of 'self' (line 4716)
        self_111633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4716, 15), 'self', False)
        # Obtaining the member '_check_xy' of a type (line 4716)
        _check_xy_111634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4716, 15), self_111633, '_check_xy')
        # Calling _check_xy(args, kwargs) (line 4716)
        _check_xy_call_result_111637 = invoke(stypy.reporting.localization.Localization(__file__, 4716, 15), _check_xy_111634, *[renderer_111635], **kwargs_111636)
        
        # Applying the 'not' unary operator (line 4716)
        result_not__111638 = python_operator(stypy.reporting.localization.Localization(__file__, 4716, 11), 'not', _check_xy_call_result_111637)
        
        # Testing the type of an if condition (line 4716)
        if_condition_111639 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4716, 8), result_not__111638)
        # Assigning a type to the variable 'if_condition_111639' (line 4716)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4716, 8), 'if_condition_111639', if_condition_111639)
        # SSA begins for if statement (line 4716)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 4717)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4717, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 4716)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to draw(...): (line 4719)
        # Processing the call arguments (line 4719)
        # Getting the type of 'self' (line 4719)
        self_111642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4719, 29), 'self', False)
        # Getting the type of 'renderer' (line 4719)
        renderer_111643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4719, 35), 'renderer', False)
        # Processing the call keyword arguments (line 4719)
        kwargs_111644 = {}
        # Getting the type of 'FancyArrowPatch' (line 4719)
        FancyArrowPatch_111640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4719, 8), 'FancyArrowPatch', False)
        # Obtaining the member 'draw' of a type (line 4719)
        draw_111641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4719, 8), FancyArrowPatch_111640, 'draw')
        # Calling draw(args, kwargs) (line 4719)
        draw_call_result_111645 = invoke(stypy.reporting.localization.Localization(__file__, 4719, 8), draw_111641, *[self_111642, renderer_111643], **kwargs_111644)
        
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 4706)
        stypy_return_type_111646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4706, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_111646)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_111646


# Assigning a type to the variable 'ConnectionPatch' (line 4426)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4426, 0), 'ConnectionPatch', ConnectionPatch)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
