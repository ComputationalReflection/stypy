
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: 
2: # This file was generated by 'versioneer.py' (0.15) from
3: # revision-control system data, or from the parent directory name of an
4: # unpacked source archive. Distribution tarballs contain a pre-generated copy
5: # of this file.
6: 
7: import json
8: import sys
9: 
10: version_json = '''
11: {
12:  "dirty": false,
13:  "error": null,
14:  "full-revisionid": "b392d46466e98cd6a437e16b52b3ed8de23b0b52",
15:  "version": "2.1.0"
16: }
17: '''  # END VERSION_JSON
18: 
19: 
20: def get_versions():
21:     return json.loads(version_json)
22: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 7, 0))

# 'import json' statement (line 7)
import json

import_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'json', json, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 8, 0))

# 'import sys' statement (line 8)
import sys

import_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'sys', sys, module_type_store)


# Assigning a Str to a Name (line 10):
str_188173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 17, (-1)), 'str', '\n{\n "dirty": false,\n "error": null,\n "full-revisionid": "b392d46466e98cd6a437e16b52b3ed8de23b0b52",\n "version": "2.1.0"\n}\n')
# Assigning a type to the variable 'version_json' (line 10)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 10, 0), 'version_json', str_188173)

@norecursion
def get_versions(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_versions'
    module_type_store = module_type_store.open_function_context('get_versions', 20, 0, False)
    
    # Passed parameters checking function
    get_versions.stypy_localization = localization
    get_versions.stypy_type_of_self = None
    get_versions.stypy_type_store = module_type_store
    get_versions.stypy_function_name = 'get_versions'
    get_versions.stypy_param_names_list = []
    get_versions.stypy_varargs_param_name = None
    get_versions.stypy_kwargs_param_name = None
    get_versions.stypy_call_defaults = defaults
    get_versions.stypy_call_varargs = varargs
    get_versions.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_versions', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_versions', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_versions(...)' code ##################

    
    # Call to loads(...): (line 21)
    # Processing the call arguments (line 21)
    # Getting the type of 'version_json' (line 21)
    version_json_188176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 21, 22), 'version_json', False)
    # Processing the call keyword arguments (line 21)
    kwargs_188177 = {}
    # Getting the type of 'json' (line 21)
    json_188174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 21, 11), 'json', False)
    # Obtaining the member 'loads' of a type (line 21)
    loads_188175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 21, 11), json_188174, 'loads')
    # Calling loads(args, kwargs) (line 21)
    loads_call_result_188178 = invoke(stypy.reporting.localization.Localization(__file__, 21, 11), loads_188175, *[version_json_188176], **kwargs_188177)
    
    # Assigning a type to the variable 'stypy_return_type' (line 21)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 21, 4), 'stypy_return_type', loads_call_result_188178)
    
    # ################# End of 'get_versions(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_versions' in the type store
    # Getting the type of 'stypy_return_type' (line 20)
    stypy_return_type_188179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 20, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_188179)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_versions'
    return stypy_return_type_188179

# Assigning a type to the variable 'get_versions' (line 20)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 20, 0), 'get_versions', get_versions)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
