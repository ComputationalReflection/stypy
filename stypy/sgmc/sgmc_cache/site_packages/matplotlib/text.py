
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: '''
2: Classes for including text in a figure.
3: '''
4: from __future__ import (absolute_import, division, print_function,
5:                         unicode_literals)
6: 
7: import six
8: from six.moves import zip
9: 
10: import math
11: import warnings
12: import weakref
13: 
14: import contextlib
15: 
16: import numpy as np
17: 
18: from matplotlib import cbook
19: from matplotlib import rcParams
20: import matplotlib.artist as artist
21: from matplotlib.artist import Artist
22: from matplotlib.cbook import maxdict
23: from matplotlib import docstring
24: from matplotlib.font_manager import FontProperties
25: from matplotlib.patches import FancyBboxPatch
26: from matplotlib.patches import FancyArrowPatch, Rectangle
27: import matplotlib.transforms as mtransforms
28: from matplotlib.transforms import Affine2D, Bbox, Transform
29: from matplotlib.transforms import BboxBase, BboxTransformTo
30: from matplotlib.lines import Line2D
31: from matplotlib.path import Path
32: from matplotlib.artist import allow_rasterization
33: 
34: from matplotlib.textpath import TextPath
35: 
36: 
37: def _process_text_args(override, fontdict=None, **kwargs):
38:     "Return an override dict.  See :func:`~pyplot.text' docstring for info"
39: 
40:     if fontdict is not None:
41:         override.update(fontdict)
42: 
43:     override.update(kwargs)
44:     return override
45: 
46: 
47: @contextlib.contextmanager
48: def _wrap_text(textobj):
49:     '''
50:     Temporarily inserts newlines to the text if the wrap option is enabled.
51:     '''
52:     if textobj.get_wrap():
53:         old_text = textobj.get_text()
54:         try:
55:             textobj.set_text(textobj._get_wrapped_text())
56:             yield textobj
57:         finally:
58:             textobj.set_text(old_text)
59:     else:
60:         yield textobj
61: 
62: 
63: # Extracted from Text's method to serve as a function
64: def get_rotation(rotation):
65:     '''
66:     Return the text angle as float. The returned
67:     angle is between 0 and 360 deg.
68: 
69:     *rotation* may be 'horizontal', 'vertical', or a numeric value in degrees.
70:     '''
71:     try:
72:         angle = float(rotation)
73:     except (ValueError, TypeError):
74:         isString = isinstance(rotation, six.string_types)
75:         if ((isString and rotation == 'horizontal') or rotation is None):
76:             angle = 0.
77:         elif (isString and rotation == 'vertical'):
78:             angle = 90.
79:         else:
80:             raise ValueError("rotation is {0} expected either 'horizontal'"
81:                              " 'vertical', numeric value or"
82:                              "None".format(rotation))
83: 
84:     return angle % 360
85: # these are not available for the object inspector until after the
86: # class is build so we define an initial set here for the init
87: # function and they will be overridden after object defn
88: docstring.interpd.update(Text='''
89:     ========================== ================================================
90:     Property                   Value
91:     ========================== ================================================
92:     alpha                      float or None
93:     animated                   [True | False]
94:     backgroundcolor            any matplotlib color
95:     bbox                       rectangle prop dict plus key 'pad' which is a
96:                                pad in points; if a boxstyle is supplied as
97:                                a string, then pad is instead a fraction
98:                                of the font size
99:     clip_box                   a matplotlib.transform.Bbox instance
100:     clip_on                    [True | False]
101:     color                      any matplotlib color
102:     family                     ['serif' | 'sans-serif' | 'cursive' |
103:                                 'fantasy' | 'monospace']
104:     figure                     a matplotlib.figure.Figure instance
105:     fontproperties             a matplotlib.font_manager.FontProperties
106:                                instance
107:     horizontalalignment or ha  ['center' | 'right' | 'left']
108:     label                      any string
109:     linespacing                float
110:     lod                        [True | False]
111:     multialignment             ['left' | 'right' | 'center' ]
112:     name or fontname           string e.g.,
113:                                ['Sans' | 'Courier' | 'Helvetica' ...]
114:     position                   (x,y)
115:     rotation                   [ angle in degrees 'vertical' | 'horizontal'
116:     rotation_mode              [ None | 'anchor']
117:     size or fontsize           [size in points | relative size e.g., 'smaller',
118:                                                                   'x-large']
119:     style or fontstyle         [ 'normal' | 'italic' | 'oblique']
120:     text                       string
121:     transform                  a matplotlib.transform transformation instance
122:     usetex                     [True | False | None]
123:     variant                    ['normal' | 'small-caps']
124:     verticalalignment or va    ['center' | 'top' | 'bottom' | 'baseline' |
125:                                 'center_baseline' ]
126:     visible                    [True | False]
127:     weight or fontweight       ['normal' | 'bold' | 'heavy' | 'light' |
128:                                 'ultrabold' | 'ultralight']
129:     wrap                       [True | False]
130:     x                          float
131:     y                          float
132:     zorder                     any number
133:     ========================== ===============================================
134:     ''')
135: 
136: # TODO : This function may move into the Text class as a method. As a
137: # matter of fact, The information from the _get_textbox function
138: # should be available during the Text._get_layout() call, which is
139: # called within the _get_textbox. So, it would better to move this
140: # function as a method with some refactoring of _get_layout method.
141: 
142: 
143: def _get_textbox(text, renderer):
144:     '''
145:     Calculate the bounding box of the text. Unlike
146:     :meth:`matplotlib.text.Text.get_extents` method, The bbox size of
147:     the text before the rotation is calculated.
148:     '''
149: 
150:     projected_xs = []
151:     projected_ys = []
152: 
153:     theta = np.deg2rad(text.get_rotation())
154:     tr = mtransforms.Affine2D().rotate(-theta)
155: 
156:     _, parts, d = text._get_layout(renderer)
157: 
158:     for t, wh, x, y in parts:
159:         w, h = wh
160: 
161:         xt1, yt1 = tr.transform_point((x, y))
162:         yt1 -= d
163:         xt2, yt2 = xt1 + w, yt1 + h
164: 
165:         projected_xs.extend([xt1, xt2])
166:         projected_ys.extend([yt1, yt2])
167: 
168:     xt_box, yt_box = min(projected_xs), min(projected_ys)
169:     w_box, h_box = max(projected_xs) - xt_box, max(projected_ys) - yt_box
170: 
171:     tr = mtransforms.Affine2D().rotate(theta)
172: 
173:     x_box, y_box = tr.transform_point((xt_box, yt_box))
174: 
175:     return x_box, y_box, w_box, h_box
176: 
177: 
178: class Text(Artist):
179:     '''
180:     Handle storing and drawing of text in window or data coordinates.
181:     '''
182:     zorder = 3
183:     _cached = maxdict(50)
184: 
185:     def __repr__(self):
186:         return "Text(%g,%g,%s)" % (self._x, self._y, repr(self._text))
187: 
188:     def __init__(self,
189:                  x=0, y=0, text='',
190:                  color=None,           # defaults to rc params
191:                  verticalalignment='baseline',
192:                  horizontalalignment='left',
193:                  multialignment=None,
194:                  fontproperties=None,  # defaults to FontProperties()
195:                  rotation=None,
196:                  linespacing=None,
197:                  rotation_mode=None,
198:                  usetex=None,          # defaults to rcParams['text.usetex']
199:                  wrap=False,
200:                  **kwargs
201:                  ):
202:         '''
203:         Create a :class:`~matplotlib.text.Text` instance at *x*, *y*
204:         with string *text*.
205: 
206:         Valid kwargs are
207:         %(Text)s
208:         '''
209: 
210:         Artist.__init__(self)
211:         self._x, self._y = x, y
212: 
213:         if color is None:
214:             color = rcParams['text.color']
215:         if fontproperties is None:
216:             fontproperties = FontProperties()
217:         elif isinstance(fontproperties, six.string_types):
218:             fontproperties = FontProperties(fontproperties)
219: 
220:         self.set_text(text)
221:         self.set_color(color)
222:         self.set_usetex(usetex)
223:         self.set_wrap(wrap)
224:         self._verticalalignment = verticalalignment
225:         self._horizontalalignment = horizontalalignment
226:         self._multialignment = multialignment
227:         self._rotation = rotation
228:         self._fontproperties = fontproperties
229:         self._bbox_patch = None  # a FancyBboxPatch instance
230:         self._renderer = None
231:         if linespacing is None:
232:             linespacing = 1.2   # Maybe use rcParam later.
233:         self._linespacing = linespacing
234:         self.set_rotation_mode(rotation_mode)
235:         self.update(kwargs)
236: 
237:     def update(self, kwargs):
238:         '''
239:         Update properties from a dictionary.
240:         '''
241:         # Update bbox last, as it depends on font properties.
242:         sentinel = object()  # bbox can be None, so use another sentinel.
243:         bbox = kwargs.pop("bbox", sentinel)
244:         super(Text, self).update(kwargs)
245:         if bbox is not sentinel:
246:             self.set_bbox(bbox)
247: 
248:     def __getstate__(self):
249:         d = super(Text, self).__getstate__()
250:         # remove the cached _renderer (if it exists)
251:         d['_renderer'] = None
252:         return d
253: 
254:     def contains(self, mouseevent):
255:         '''Test whether the mouse event occurred in the patch.
256: 
257:         In the case of text, a hit is true anywhere in the
258:         axis-aligned bounding-box containing the text.
259: 
260:         Returns True or False.
261:         '''
262:         if callable(self._contains):
263:             return self._contains(self, mouseevent)
264: 
265:         if not self.get_visible() or self._renderer is None:
266:             return False, {}
267: 
268:         l, b, w, h = self.get_window_extent().bounds
269:         r, t = l + w, b + h
270: 
271:         x, y = mouseevent.x, mouseevent.y
272:         inside = (l <= x <= r and b <= y <= t)
273:         cattr = {}
274: 
275:         # if the text has a surrounding patch, also check containment for it,
276:         # and merge the results with the results for the text.
277:         if self._bbox_patch:
278:             patch_inside, patch_cattr = self._bbox_patch.contains(mouseevent)
279:             inside = inside or patch_inside
280:             cattr["bbox_patch"] = patch_cattr
281: 
282:         return inside, cattr
283: 
284:     def _get_xy_display(self):
285:         'get the (possibly unit converted) transformed x, y in display coords'
286:         x, y = self.get_unitless_position()
287:         return self.get_transform().transform_point((x, y))
288: 
289:     def _get_multialignment(self):
290:         if self._multialignment is not None:
291:             return self._multialignment
292:         else:
293:             return self._horizontalalignment
294: 
295:     def get_rotation(self):
296:         'return the text angle as float in degrees'
297:         return get_rotation(self._rotation)  # string_or_number -> number
298: 
299:     def set_rotation_mode(self, m):
300:         '''
301:         set text rotation mode. If "anchor", the un-rotated text
302:         will first aligned according to their *ha* and
303:         *va*, and then will be rotated with the alignement
304:         reference point as a origin. If None (default), the text will be
305:         rotated first then will be aligned.
306:         '''
307:         if m is None or m in ["anchor", "default"]:
308:             self._rotation_mode = m
309:         else:
310:             raise ValueError("Unknown rotation_mode : %s" % repr(m))
311:         self.stale = True
312: 
313:     def get_rotation_mode(self):
314:         "get text rotation mode"
315:         return self._rotation_mode
316: 
317:     def update_from(self, other):
318:         'Copy properties from other to self'
319:         Artist.update_from(self, other)
320:         self._color = other._color
321:         self._multialignment = other._multialignment
322:         self._verticalalignment = other._verticalalignment
323:         self._horizontalalignment = other._horizontalalignment
324:         self._fontproperties = other._fontproperties.copy()
325:         self._rotation = other._rotation
326:         self._picker = other._picker
327:         self._linespacing = other._linespacing
328:         self.stale = True
329: 
330:     def _get_layout(self, renderer):
331:         '''
332:         return the extent (bbox) of the text together with
333:         multiple-alignment information. Note that it returns an extent
334:         of a rotated text when necessary.
335:         '''
336:         key = self.get_prop_tup(renderer=renderer)
337:         if key in self._cached:
338:             return self._cached[key]
339: 
340:         horizLayout = []
341: 
342:         thisx, thisy = 0.0, 0.0
343:         xmin, ymin = 0.0, 0.0
344:         width, height = 0.0, 0.0
345:         lines = self.get_text().split('\n')
346: 
347:         whs = np.zeros((len(lines), 2))
348:         horizLayout = np.zeros((len(lines), 4))
349: 
350:         # Find full vertical extent of font,
351:         # including ascenders and descenders:
352:         tmp, lp_h, lp_bl = renderer.get_text_width_height_descent('lp',
353:                                                          self._fontproperties,
354:                                                          ismath=False)
355:         offsety = (lp_h - lp_bl) * self._linespacing
356: 
357:         baseline = 0
358:         for i, line in enumerate(lines):
359:             clean_line, ismath = self.is_math_text(line, self.get_usetex())
360:             if clean_line:
361:                 w, h, d = renderer.get_text_width_height_descent(clean_line,
362:                                                         self._fontproperties,
363:                                                         ismath=ismath)
364:             else:
365:                 w, h, d = 0, 0, 0
366: 
367:             # For multiline text, increase the line spacing when the
368:             # text net-height(excluding baseline) is larger than that
369:             # of a "l" (e.g., use of superscripts), which seems
370:             # what TeX does.
371:             h = max(h, lp_h)
372:             d = max(d, lp_bl)
373: 
374:             whs[i] = w, h
375: 
376:             baseline = (h - d) - thisy
377:             thisy -= max(offsety, (h - d) * self._linespacing)
378:             horizLayout[i] = thisx, thisy, w, h
379:             thisy -= d
380:             width = max(width, w)
381:             descent = d
382: 
383:         ymin = horizLayout[-1][1]
384:         ymax = horizLayout[0][1] + horizLayout[0][3]
385:         height = ymax - ymin
386:         xmax = xmin + width
387: 
388:         # get the rotation matrix
389:         M = Affine2D().rotate_deg(self.get_rotation())
390: 
391:         offsetLayout = np.zeros((len(lines), 2))
392:         offsetLayout[:] = horizLayout[:, 0:2]
393:         # now offset the individual text lines within the box
394:         if len(lines) > 1:  # do the multiline aligment
395:             malign = self._get_multialignment()
396:             if malign == 'center':
397:                 offsetLayout[:, 0] += width / 2.0 - horizLayout[:, 2] / 2.0
398:             elif malign == 'right':
399:                 offsetLayout[:, 0] += width - horizLayout[:, 2]
400: 
401:         # the corners of the unrotated bounding box
402:         cornersHoriz = np.array(
403:             [(xmin, ymin), (xmin, ymax), (xmax, ymax), (xmax, ymin)], float)
404:         cornersHoriz[:, 1] -= descent
405: 
406:         # now rotate the bbox
407:         cornersRotated = M.transform(cornersHoriz)
408: 
409:         txs = cornersRotated[:, 0]
410:         tys = cornersRotated[:, 1]
411: 
412:         # compute the bounds of the rotated box
413:         xmin, xmax = txs.min(), txs.max()
414:         ymin, ymax = tys.min(), tys.max()
415:         width = xmax - xmin
416:         height = ymax - ymin
417: 
418:         # Now move the box to the target position offset the display
419:         # bbox by alignment
420:         halign = self._horizontalalignment
421:         valign = self._verticalalignment
422: 
423:         rotation_mode = self.get_rotation_mode()
424:         if rotation_mode != "anchor":
425:             # compute the text location in display coords and the offsets
426:             # necessary to align the bbox with that location
427:             if halign == 'center':
428:                 offsetx = (xmin + width / 2.0)
429:             elif halign == 'right':
430:                 offsetx = (xmin + width)
431:             else:
432:                 offsetx = xmin
433: 
434:             if valign == 'center':
435:                 offsety = (ymin + height / 2.0)
436:             elif valign == 'top':
437:                 offsety = (ymin + height)
438:             elif valign == 'baseline':
439:                 offsety = (ymin + height) - baseline
440:             elif valign == 'center_baseline':
441:                 offsety = ymin + height - baseline / 2.0
442:             else:
443:                 offsety = ymin
444:         else:
445:             xmin1, ymin1 = cornersHoriz[0]
446:             xmax1, ymax1 = cornersHoriz[2]
447: 
448:             if halign == 'center':
449:                 offsetx = (xmin1 + xmax1) / 2.0
450:             elif halign == 'right':
451:                 offsetx = xmax1
452:             else:
453:                 offsetx = xmin1
454: 
455:             if valign == 'center':
456:                 offsety = (ymin1 + ymax1) / 2.0
457:             elif valign == 'top':
458:                 offsety = ymax1
459:             elif valign == 'baseline':
460:                 offsety = ymax1 - baseline
461:             elif valign == 'center_baseline':
462:                 offsety = (ymin1 + ymax1 - baseline) / 2.0
463:             else:
464:                 offsety = ymin1
465: 
466:             offsetx, offsety = M.transform_point((offsetx, offsety))
467: 
468:         xmin -= offsetx
469:         ymin -= offsety
470: 
471:         bbox = Bbox.from_bounds(xmin, ymin, width, height)
472: 
473:         # now rotate the positions around the first x,y position
474:         xys = M.transform(offsetLayout)
475:         xys -= (offsetx, offsety)
476: 
477:         xs, ys = xys[:, 0], xys[:, 1]
478: 
479:         ret = bbox, list(zip(lines, whs, xs, ys)), descent
480:         self._cached[key] = ret
481:         return ret
482: 
483:     def set_bbox(self, rectprops):
484:         '''
485:         Draw a bounding box around self.  rectprops are any settable
486:         properties for a FancyBboxPatch, e.g., facecolor='red', alpha=0.5.
487: 
488:           t.set_bbox(dict(facecolor='red', alpha=0.5))
489: 
490:         The default boxstyle is 'square'. The mutation
491:         scale of the FancyBboxPatch is set to the fontsize.
492: 
493:         ACCEPTS: FancyBboxPatch prop dict
494:         '''
495: 
496:         if rectprops is not None:
497:             props = rectprops.copy()
498:             boxstyle = props.pop("boxstyle", None)
499:             pad = props.pop("pad", None)
500:             if boxstyle is None:
501:                 boxstyle = "square"
502:                 if pad is None:
503:                     pad = 4  # points
504:                 pad /= self.get_size()  # to fraction of font size
505:             else:
506:                 if pad is None:
507:                     pad = 0.3
508: 
509:             # boxstyle could be a callable or a string
510:             if (isinstance(boxstyle, six.string_types)
511:                     and "pad" not in boxstyle):
512:                 boxstyle += ",pad=%0.2f" % pad
513: 
514:             bbox_transmuter = props.pop("bbox_transmuter", None)
515: 
516:             self._bbox_patch = FancyBboxPatch(
517:                                     (0., 0.),
518:                                     1., 1.,
519:                                     boxstyle=boxstyle,
520:                                     bbox_transmuter=bbox_transmuter,
521:                                     transform=mtransforms.IdentityTransform(),
522:                                     **props)
523:         else:
524:             self._bbox_patch = None
525: 
526:         self._update_clip_properties()
527: 
528:     def get_bbox_patch(self):
529:         '''
530:         Return the bbox Patch object. Returns None if the
531:         FancyBboxPatch is not made.
532:         '''
533:         return self._bbox_patch
534: 
535:     def update_bbox_position_size(self, renderer):
536:         '''
537:         Update the location and the size of the bbox. This method
538:         should be used when the position and size of the bbox needs to
539:         be updated before actually drawing the bbox.
540:         '''
541: 
542:         if self._bbox_patch:
543: 
544:             trans = self.get_transform()
545: 
546:             # don't use self.get_unitless_position here, which refers to text
547:             # position in Text, and dash position in TextWithDash:
548:             posx = float(self.convert_xunits(self._x))
549:             posy = float(self.convert_yunits(self._y))
550: 
551:             posx, posy = trans.transform_point((posx, posy))
552: 
553:             x_box, y_box, w_box, h_box = _get_textbox(self, renderer)
554:             self._bbox_patch.set_bounds(0., 0., w_box, h_box)
555:             theta = np.deg2rad(self.get_rotation())
556:             tr = mtransforms.Affine2D().rotate(theta)
557:             tr = tr.translate(posx + x_box, posy + y_box)
558:             self._bbox_patch.set_transform(tr)
559:             fontsize_in_pixel = renderer.points_to_pixels(self.get_size())
560:             self._bbox_patch.set_mutation_scale(fontsize_in_pixel)
561: 
562:     def _draw_bbox(self, renderer, posx, posy):
563: 
564:         ''' Update the location and the size of the bbox
565:         (FancyBboxPatch), and draw
566:         '''
567: 
568:         x_box, y_box, w_box, h_box = _get_textbox(self, renderer)
569:         self._bbox_patch.set_bounds(0., 0., w_box, h_box)
570:         theta = np.deg2rad(self.get_rotation())
571:         tr = mtransforms.Affine2D().rotate(theta)
572:         tr = tr.translate(posx + x_box, posy + y_box)
573:         self._bbox_patch.set_transform(tr)
574:         fontsize_in_pixel = renderer.points_to_pixels(self.get_size())
575:         self._bbox_patch.set_mutation_scale(fontsize_in_pixel)
576:         self._bbox_patch.draw(renderer)
577: 
578:     def _update_clip_properties(self):
579:         clipprops = dict(clip_box=self.clipbox,
580:                          clip_path=self._clippath,
581:                          clip_on=self._clipon)
582: 
583:         if self._bbox_patch:
584:             bbox = self._bbox_patch.update(clipprops)
585: 
586:     def set_clip_box(self, clipbox):
587:         '''
588:         Set the artist's clip :class:`~matplotlib.transforms.Bbox`.
589: 
590:         ACCEPTS: a :class:`matplotlib.transforms.Bbox` instance
591:         '''
592:         super(Text, self).set_clip_box(clipbox)
593:         self._update_clip_properties()
594: 
595:     def set_clip_path(self, path, transform=None):
596:         '''
597:         Set the artist's clip path, which may be:
598: 
599:           * a :class:`~matplotlib.patches.Patch` (or subclass) instance
600: 
601:           * a :class:`~matplotlib.path.Path` instance, in which case
602:              an optional :class:`~matplotlib.transforms.Transform`
603:              instance may be provided, which will be applied to the
604:              path before using it for clipping.
605: 
606:           * *None*, to remove the clipping path
607: 
608:         For efficiency, if the path happens to be an axis-aligned
609:         rectangle, this method will set the clipping box to the
610:         corresponding rectangle and set the clipping path to *None*.
611: 
612:         ACCEPTS: [ (:class:`~matplotlib.path.Path`,
613:         :class:`~matplotlib.transforms.Transform`) |
614:         :class:`~matplotlib.patches.Patch` | None ]
615:         '''
616:         super(Text, self).set_clip_path(path, transform)
617:         self._update_clip_properties()
618: 
619:     def set_clip_on(self, b):
620:         '''
621:         Set whether artist uses clipping.
622: 
623:         When False artists will be visible out side of the axes which
624:         can lead to unexpected results.
625: 
626:         ACCEPTS: [True | False]
627:         '''
628:         super(Text, self).set_clip_on(b)
629:         self._update_clip_properties()
630: 
631:     def get_wrap(self):
632:         '''
633:         Returns the wrapping state for the text.
634:         '''
635:         return self._wrap
636: 
637:     def set_wrap(self, wrap):
638:         '''
639:         Sets the wrapping state for the text.
640:         '''
641:         self._wrap = wrap
642: 
643:     def _get_wrap_line_width(self):
644:         '''
645:         Returns the maximum line width for wrapping text based on the
646:         current orientation.
647:         '''
648:         x0, y0 = self.get_transform().transform(self.get_position())
649:         figure_box = self.get_figure().get_window_extent()
650: 
651:         # Calculate available width based on text alignment
652:         alignment = self.get_horizontalalignment()
653:         self.set_rotation_mode('anchor')
654:         rotation = self.get_rotation()
655: 
656:         left = self._get_dist_to_box(rotation, x0, y0, figure_box)
657:         right = self._get_dist_to_box(
658:             (180 + rotation) % 360,
659:             x0,
660:             y0,
661:             figure_box)
662: 
663:         if alignment == 'left':
664:             line_width = left
665:         elif alignment == 'right':
666:             line_width = right
667:         else:
668:             line_width = 2 * min(left, right)
669: 
670:         return line_width
671: 
672:     def _get_dist_to_box(self, rotation, x0, y0, figure_box):
673:         '''
674:         Returns the distance from the given points, to the boundaries
675:         of a rotated box in pixels.
676:         '''
677:         if rotation > 270:
678:             quad = rotation - 270
679:             h1 = y0 / math.cos(math.radians(quad))
680:             h2 = (figure_box.x1 - x0) / math.cos(math.radians(90 - quad))
681:         elif rotation > 180:
682:             quad = rotation - 180
683:             h1 = x0 / math.cos(math.radians(quad))
684:             h2 = y0 / math.cos(math.radians(90 - quad))
685:         elif rotation > 90:
686:             quad = rotation - 90
687:             h1 = (figure_box.y1 - y0) / math.cos(math.radians(quad))
688:             h2 = x0 / math.cos(math.radians(90 - quad))
689:         else:
690:             h1 = (figure_box.x1 - x0) / math.cos(math.radians(rotation))
691:             h2 = (figure_box.y1 - y0) / math.cos(math.radians(90 - rotation))
692: 
693:         return min(h1, h2)
694: 
695:     def _get_rendered_text_width(self, text):
696:         '''
697:         Returns the width of a given text string, in pixels.
698:         '''
699:         w, h, d = self._renderer.get_text_width_height_descent(
700:             text,
701:             self.get_fontproperties(),
702:             False)
703:         return math.ceil(w)
704: 
705:     def _get_wrapped_text(self):
706:         '''
707:         Return a copy of the text with new lines added, so that
708:         the text is wrapped relative to the parent figure.
709:         '''
710:         # Not fit to handle breaking up latex syntax correctly, so
711:         # ignore latex for now.
712:         if self.get_usetex():
713:             return self.get_text()
714: 
715:         # Build the line incrementally, for a more accurate measure of length
716:         line_width = self._get_wrap_line_width()
717:         wrapped_str = ""
718:         line = ""
719: 
720:         for word in self.get_text().split(' '):
721:             # New lines in the user's test need to force a split, so that it's
722:             # not using the longest current line width in the line being built
723:             sub_words = word.split('\n')
724:             for i in range(len(sub_words)):
725:                 current_width = self._get_rendered_text_width(
726:                     line + ' ' + sub_words[i])
727: 
728:                 # Split long lines, and each newline found in the current word
729:                 if current_width > line_width or i > 0:
730:                     wrapped_str += line + '\n'
731:                     line = ""
732: 
733:                 if line == "":
734:                     line = sub_words[i]
735:                 else:
736:                     line += ' ' + sub_words[i]
737: 
738:         return wrapped_str + line
739: 
740:     @allow_rasterization
741:     def draw(self, renderer):
742:         '''
743:         Draws the :class:`Text` object to the given *renderer*.
744:         '''
745:         if renderer is not None:
746:             self._renderer = renderer
747:         if not self.get_visible():
748:             return
749:         if self.get_text() == '':
750:             return
751: 
752:         renderer.open_group('text', self.get_gid())
753: 
754:         with _wrap_text(self) as textobj:
755:             bbox, info, descent = textobj._get_layout(renderer)
756:             trans = textobj.get_transform()
757: 
758:             # don't use textobj.get_position here, which refers to text
759:             # position in Text, and dash position in TextWithDash:
760:             posx = float(textobj.convert_xunits(textobj._x))
761:             posy = float(textobj.convert_yunits(textobj._y))
762:             if not np.isfinite(posx) or not np.isfinite(posy):
763:                 raise ValueError("posx and posy should be finite values")
764:             posx, posy = trans.transform_point((posx, posy))
765:             canvasw, canvash = renderer.get_canvas_width_height()
766: 
767:             # draw the FancyBboxPatch
768:             if textobj._bbox_patch:
769:                 textobj._draw_bbox(renderer, posx, posy)
770: 
771:             gc = renderer.new_gc()
772:             gc.set_foreground(textobj.get_color())
773:             gc.set_alpha(textobj.get_alpha())
774:             gc.set_url(textobj._url)
775:             textobj._set_gc_clip(gc)
776: 
777:             angle = textobj.get_rotation()
778: 
779:             for line, wh, x, y in info:
780: 
781:                 mtext = textobj if len(info) == 1 else None
782:                 x = x + posx
783:                 y = y + posy
784:                 if renderer.flipy():
785:                     y = canvash - y
786:                 clean_line, ismath = textobj.is_math_text(line,
787:                                                           self.get_usetex())
788: 
789:                 if textobj.get_path_effects():
790:                     from matplotlib.patheffects import PathEffectRenderer
791:                     textrenderer = PathEffectRenderer(
792:                                         textobj.get_path_effects(), renderer)
793:                 else:
794:                     textrenderer = renderer
795: 
796:                 if textobj.get_usetex():
797:                     textrenderer.draw_tex(gc, x, y, clean_line,
798:                                           textobj._fontproperties, angle,
799:                                           mtext=mtext)
800:                 else:
801:                     textrenderer.draw_text(gc, x, y, clean_line,
802:                                            textobj._fontproperties, angle,
803:                                            ismath=ismath, mtext=mtext)
804: 
805:         gc.restore()
806:         renderer.close_group('text')
807:         self.stale = False
808: 
809:     def get_color(self):
810:         "Return the color of the text"
811:         return self._color
812: 
813:     def get_fontproperties(self):
814:         "Return the :class:`~font_manager.FontProperties` object"
815:         return self._fontproperties
816: 
817:     def get_font_properties(self):
818:         'alias for get_fontproperties'
819:         return self.get_fontproperties()
820: 
821:     def get_family(self):
822:         "Return the list of font families used for font lookup"
823:         return self._fontproperties.get_family()
824: 
825:     def get_fontfamily(self):
826:         'alias for get_family'
827:         return self.get_family()
828: 
829:     def get_name(self):
830:         "Return the font name as string"
831:         return self._fontproperties.get_name()
832: 
833:     def get_style(self):
834:         "Return the font style as string"
835:         return self._fontproperties.get_style()
836: 
837:     def get_size(self):
838:         "Return the font size as integer"
839:         return self._fontproperties.get_size_in_points()
840: 
841:     def get_variant(self):
842:         "Return the font variant as a string"
843:         return self._fontproperties.get_variant()
844: 
845:     def get_fontvariant(self):
846:         'alias for get_variant'
847:         return self.get_variant()
848: 
849:     def get_weight(self):
850:         "Get the font weight as string or number"
851:         return self._fontproperties.get_weight()
852: 
853:     def get_fontname(self):
854:         'alias for get_name'
855:         return self.get_name()
856: 
857:     def get_fontstyle(self):
858:         'alias for get_style'
859:         return self.get_style()
860: 
861:     def get_fontsize(self):
862:         'alias for get_size'
863:         return self.get_size()
864: 
865:     def get_fontweight(self):
866:         'alias for get_weight'
867:         return self.get_weight()
868: 
869:     def get_stretch(self):
870:         'Get the font stretch as a string or number'
871:         return self._fontproperties.get_stretch()
872: 
873:     def get_fontstretch(self):
874:         'alias for get_stretch'
875:         return self.get_stretch()
876: 
877:     def get_ha(self):
878:         'alias for get_horizontalalignment'
879:         return self.get_horizontalalignment()
880: 
881:     def get_horizontalalignment(self):
882:         '''
883:         Return the horizontal alignment as string.  Will be one of
884:         'left', 'center' or 'right'.
885:         '''
886:         return self._horizontalalignment
887: 
888:     def get_unitless_position(self):
889:         "Return the unitless position of the text as a tuple (*x*, *y*)"
890:         # This will get the position with all unit information stripped away.
891:         # This is here for convienience since it is done in several locations.
892:         x = float(self.convert_xunits(self._x))
893:         y = float(self.convert_yunits(self._y))
894:         return x, y
895: 
896:     def get_position(self):
897:         "Return the position of the text as a tuple (*x*, *y*)"
898:         # This should return the same data (possible unitized) as was
899:         # specified with 'set_x' and 'set_y'.
900:         return self._x, self._y
901: 
902:     def get_prop_tup(self, renderer=None):
903:         '''
904:         Return a hashable tuple of properties.
905: 
906:         Not intended to be human readable, but useful for backends who
907:         want to cache derived information about text (e.g., layouts) and
908:         need to know if the text has changed.
909:         '''
910:         x, y = self.get_unitless_position()
911:         renderer = renderer or self._renderer
912:         return (x, y, self.get_text(), self._color,
913:                 self._verticalalignment, self._horizontalalignment,
914:                 hash(self._fontproperties),
915:                 self._rotation, self._rotation_mode,
916:                 self.figure.dpi, weakref.ref(renderer),
917:                 self._linespacing
918:                 )
919: 
920:     def get_text(self):
921:         "Get the text as string"
922:         return self._text
923: 
924:     def get_va(self):
925:         'alias for :meth:`getverticalalignment`'
926:         return self.get_verticalalignment()
927: 
928:     def get_verticalalignment(self):
929:         '''
930:         Return the vertical alignment as string.  Will be one of
931:         'top', 'center', 'bottom' or 'baseline'.
932:         '''
933:         return self._verticalalignment
934: 
935:     def get_window_extent(self, renderer=None, dpi=None):
936:         '''
937:         Return a :class:`~matplotlib.transforms.Bbox` object bounding
938:         the text, in display units.
939: 
940:         In addition to being used internally, this is useful for
941:         specifying clickable regions in a png file on a web page.
942: 
943:         *renderer* defaults to the _renderer attribute of the text
944:         object.  This is not assigned until the first execution of
945:         :meth:`draw`, so you must use this kwarg if you want
946:         to call :meth:`get_window_extent` prior to the first
947:         :meth:`draw`.  For getting web page regions, it is
948:         simpler to call the method after saving the figure.
949: 
950:         *dpi* defaults to self.figure.dpi; the renderer dpi is
951:         irrelevant.  For the web application, if figure.dpi is not
952:         the value used when saving the figure, then the value that
953:         was used must be specified as the *dpi* argument.
954:         '''
955:         #return _unit_box
956:         if not self.get_visible():
957:             return Bbox.unit()
958:         if dpi is not None:
959:             dpi_orig = self.figure.dpi
960:             self.figure.dpi = dpi
961:         if self.get_text() == '':
962:             tx, ty = self._get_xy_display()
963:             return Bbox.from_bounds(tx, ty, 0, 0)
964: 
965:         if renderer is not None:
966:             self._renderer = renderer
967:         if self._renderer is None:
968:             raise RuntimeError('Cannot get window extent w/o renderer')
969: 
970:         bbox, info, descent = self._get_layout(self._renderer)
971:         x, y = self.get_unitless_position()
972:         x, y = self.get_transform().transform_point((x, y))
973:         bbox = bbox.translated(x, y)
974:         if dpi is not None:
975:             self.figure.dpi = dpi_orig
976:         return bbox
977: 
978:     def set_backgroundcolor(self, color):
979:         '''
980:         Set the background color of the text by updating the bbox.
981: 
982:         .. seealso::
983: 
984:             :meth:`set_bbox`
985:                To change the position of the bounding box.
986: 
987:         ACCEPTS: any matplotlib color
988:         '''
989:         if self._bbox_patch is None:
990:             self.set_bbox(dict(facecolor=color, edgecolor=color))
991:         else:
992:             self._bbox_patch.update(dict(facecolor=color))
993: 
994:         self._update_clip_properties()
995:         self.stale = True
996: 
997:     def set_color(self, color):
998:         '''
999:         Set the foreground color of the text
1000: 
1001:         ACCEPTS: any matplotlib color
1002:         '''
1003:         # Make sure it is hashable, or get_prop_tup will fail.
1004:         try:
1005:             hash(color)
1006:         except TypeError:
1007:             color = tuple(color)
1008:         self._color = color
1009:         self.stale = True
1010: 
1011:     def set_ha(self, align):
1012:         'alias for set_horizontalalignment'
1013:         self.set_horizontalalignment(align)
1014: 
1015:     def set_horizontalalignment(self, align):
1016:         '''
1017:         Set the horizontal alignment to one of
1018: 
1019:         ACCEPTS: [ 'center' | 'right' | 'left' ]
1020:         '''
1021:         legal = ('center', 'right', 'left')
1022:         if align not in legal:
1023:             raise ValueError('Horizontal alignment must be one of %s' %
1024:                              str(legal))
1025:         self._horizontalalignment = align
1026:         self.stale = True
1027: 
1028:     def set_ma(self, align):
1029:         'alias for set_verticalalignment'
1030:         self.set_multialignment(align)
1031: 
1032:     def set_multialignment(self, align):
1033:         '''
1034:         Set the alignment for multiple lines layout.  The layout of the
1035:         bounding box of all the lines is determined bu the horizontalalignment
1036:         and verticalalignment properties, but the multiline text within that
1037:         box can be
1038: 
1039:         ACCEPTS: ['left' | 'right' | 'center' ]
1040:         '''
1041:         legal = ('center', 'right', 'left')
1042:         if align not in legal:
1043:             raise ValueError('Horizontal alignment must be one of %s' %
1044:                              str(legal))
1045:         self._multialignment = align
1046:         self.stale = True
1047: 
1048:     def set_linespacing(self, spacing):
1049:         '''
1050:         Set the line spacing as a multiple of the font size.
1051:         Default is 1.2.
1052: 
1053:         ACCEPTS: float (multiple of font size)
1054:         '''
1055:         self._linespacing = spacing
1056:         self.stale = True
1057: 
1058:     def set_family(self, fontname):
1059:         '''
1060:         Set the font family.  May be either a single string, or a list
1061:         of strings in decreasing priority.  Each string may be either
1062:         a real font name or a generic font class name.  If the latter,
1063:         the specific font names will be looked up in the
1064:         :file:`matplotlibrc` file.
1065: 
1066:         ACCEPTS: [FONTNAME | 'serif' | 'sans-serif' | 'cursive' | 'fantasy' |
1067:                   'monospace' ]
1068:         '''
1069:         self._fontproperties.set_family(fontname)
1070:         self.stale = True
1071: 
1072:     def set_variant(self, variant):
1073:         '''
1074:         Set the font variant, either 'normal' or 'small-caps'.
1075: 
1076:         ACCEPTS: [ 'normal' | 'small-caps' ]
1077:         '''
1078:         self._fontproperties.set_variant(variant)
1079:         self.stale = True
1080: 
1081:     def set_fontvariant(self, variant):
1082:         'alias for set_variant'
1083:         return self.set_variant(variant)
1084: 
1085:     def set_name(self, fontname):
1086:         '''alias for set_family'''
1087:         return self.set_family(fontname)
1088: 
1089:     def set_fontname(self, fontname):
1090:         '''alias for set_family'''
1091:         self.set_family(fontname)
1092: 
1093:     def set_style(self, fontstyle):
1094:         '''
1095:         Set the font style.
1096: 
1097:         ACCEPTS: [ 'normal' | 'italic' | 'oblique']
1098:         '''
1099:         self._fontproperties.set_style(fontstyle)
1100:         self.stale = True
1101: 
1102:     def set_fontstyle(self, fontstyle):
1103:         'alias for set_style'
1104:         return self.set_style(fontstyle)
1105: 
1106:     def set_size(self, fontsize):
1107:         '''
1108:         Set the font size.  May be either a size string, relative to
1109:         the default font size, or an absolute font size in points.
1110: 
1111:         ACCEPTS: [size in points | 'xx-small' | 'x-small' | 'small' |
1112:                   'medium' | 'large' | 'x-large' | 'xx-large' ]
1113:         '''
1114:         self._fontproperties.set_size(fontsize)
1115:         self.stale = True
1116: 
1117:     def set_fontsize(self, fontsize):
1118:         'alias for set_size'
1119:         return self.set_size(fontsize)
1120: 
1121:     def set_weight(self, weight):
1122:         '''
1123:         Set the font weight.
1124: 
1125:         ACCEPTS: [a numeric value in range 0-1000 | 'ultralight' | 'light' |
1126:                   'normal' | 'regular' | 'book' | 'medium' | 'roman' |
1127:                   'semibold' | 'demibold' | 'demi' | 'bold' | 'heavy' |
1128:                   'extra bold' | 'black' ]
1129:         '''
1130:         self._fontproperties.set_weight(weight)
1131:         self.stale = True
1132: 
1133:     def set_fontweight(self, weight):
1134:         'alias for set_weight'
1135:         return self.set_weight(weight)
1136: 
1137:     def set_stretch(self, stretch):
1138:         '''
1139:         Set the font stretch (horizontal condensation or expansion).
1140: 
1141:         ACCEPTS: [a numeric value in range 0-1000 | 'ultra-condensed' |
1142:                   'extra-condensed' | 'condensed' | 'semi-condensed' |
1143:                   'normal' | 'semi-expanded' | 'expanded' | 'extra-expanded' |
1144:                   'ultra-expanded' ]
1145:         '''
1146:         self._fontproperties.set_stretch(stretch)
1147:         self.stale = True
1148: 
1149:     def set_fontstretch(self, stretch):
1150:         'alias for set_stretch'
1151:         return self.set_stretch(stretch)
1152: 
1153:     def set_position(self, xy):
1154:         '''
1155:         Set the (*x*, *y*) position of the text
1156: 
1157:         ACCEPTS: (x,y)
1158:         '''
1159:         self.set_x(xy[0])
1160:         self.set_y(xy[1])
1161: 
1162:     def set_x(self, x):
1163:         '''
1164:         Set the *x* position of the text
1165: 
1166:         ACCEPTS: float
1167:         '''
1168:         self._x = x
1169:         self.stale = True
1170: 
1171:     def set_y(self, y):
1172:         '''
1173:         Set the *y* position of the text
1174: 
1175:         ACCEPTS: float
1176:         '''
1177:         self._y = y
1178:         self.stale = True
1179: 
1180:     def set_rotation(self, s):
1181:         '''
1182:         Set the rotation of the text
1183: 
1184:         ACCEPTS: [ angle in degrees | 'vertical' | 'horizontal' ]
1185:         '''
1186:         self._rotation = s
1187:         self.stale = True
1188: 
1189:     def set_va(self, align):
1190:         'alias for set_verticalalignment'
1191:         self.set_verticalalignment(align)
1192: 
1193:     def set_verticalalignment(self, align):
1194:         '''
1195:         Set the vertical alignment
1196: 
1197:         ACCEPTS: [ 'center' | 'top' | 'bottom' | 'baseline' ]
1198:         '''
1199:         legal = ('top', 'bottom', 'center', 'baseline')
1200:         if align not in legal:
1201:             raise ValueError('Vertical alignment must be one of %s' %
1202:                              str(legal))
1203: 
1204:         self._verticalalignment = align
1205:         self.stale = True
1206: 
1207:     def set_text(self, s):
1208:         '''
1209:         Set the text string *s*
1210: 
1211:         It may contain newlines (``\\n``) or math in LaTeX syntax.
1212: 
1213:         ACCEPTS: string or anything printable with '%s' conversion.
1214:         '''
1215:         self._text = '%s' % (s,)
1216:         self.stale = True
1217: 
1218:     @staticmethod
1219:     def is_math_text(s, usetex=None):
1220:         '''
1221:         Returns a cleaned string and a boolean flag.
1222:         The flag indicates if the given string *s* contains any mathtext,
1223:         determined by counting unescaped dollar signs. If no mathtext
1224:         is present, the cleaned string has its dollar signs unescaped.
1225:         If usetex is on, the flag always has the value "TeX".
1226:         '''
1227:         # Did we find an even number of non-escaped dollar signs?
1228:         # If so, treat is as math text.
1229:         if usetex is None:
1230:             usetex = rcParams['text.usetex']
1231:         if usetex:
1232:             if s == ' ':
1233:                 s = r'\ '
1234:             return s, 'TeX'
1235: 
1236:         if cbook.is_math_text(s):
1237:             return s, True
1238:         else:
1239:             return s.replace(r'\$', '$'), False
1240: 
1241:     def set_fontproperties(self, fp):
1242:         '''
1243:         Set the font properties that control the text.  *fp* must be a
1244:         :class:`matplotlib.font_manager.FontProperties` object.
1245: 
1246:         ACCEPTS: a :class:`matplotlib.font_manager.FontProperties` instance
1247:         '''
1248:         if isinstance(fp, six.string_types):
1249:             fp = FontProperties(fp)
1250:         self._fontproperties = fp.copy()
1251:         self.stale = True
1252: 
1253:     def set_font_properties(self, fp):
1254:         'alias for set_fontproperties'
1255:         self.set_fontproperties(fp)
1256: 
1257:     def set_usetex(self, usetex):
1258:         '''
1259:         Set this `Text` object to render using TeX (or not).
1260: 
1261:         If `None` is given, the option will be reset to use the value of
1262:         `rcParams['text.usetex']`
1263:         '''
1264:         if usetex is None:
1265:             self._usetex = rcParams['text.usetex']
1266:         else:
1267:             self._usetex = bool(usetex)
1268:         self.stale = True
1269: 
1270:     def get_usetex(self):
1271:         '''
1272:         Return whether this `Text` object will render using TeX.
1273: 
1274:         If the user has not manually set this value, it will default to
1275:         the value of `rcParams['text.usetex']`
1276:         '''
1277:         if self._usetex is None:
1278:             return rcParams['text.usetex']
1279:         else:
1280:             return self._usetex
1281: 
1282: docstring.interpd.update(Text=artist.kwdoc(Text))
1283: docstring.dedent_interpd(Text.__init__)
1284: 
1285: 
1286: class TextWithDash(Text):
1287:     '''
1288:     This is basically a :class:`~matplotlib.text.Text` with a dash
1289:     (drawn with a :class:`~matplotlib.lines.Line2D`) before/after
1290:     it. It is intended to be a drop-in replacement for
1291:     :class:`~matplotlib.text.Text`, and should behave identically to
1292:     it when *dashlength* = 0.0.
1293: 
1294:     The dash always comes between the point specified by
1295:     :meth:`~matplotlib.text.Text.set_position` and the text. When a
1296:     dash exists, the text alignment arguments (*horizontalalignment*,
1297:     *verticalalignment*) are ignored.
1298: 
1299:     *dashlength* is the length of the dash in canvas units.
1300:     (default = 0.0).
1301: 
1302:     *dashdirection* is one of 0 or 1, where 0 draws the dash after the
1303:     text and 1 before.  (default = 0).
1304: 
1305:     *dashrotation* specifies the rotation of the dash, and should
1306:     generally stay *None*. In this case
1307:     :meth:`~matplotlib.text.TextWithDash.get_dashrotation` returns
1308:     :meth:`~matplotlib.text.Text.get_rotation`.  (i.e., the dash takes
1309:     its rotation from the text's rotation). Because the text center is
1310:     projected onto the dash, major deviations in the rotation cause
1311:     what may be considered visually unappealing results.
1312:     (default = *None*)
1313: 
1314:     *dashpad* is a padding length to add (or subtract) space
1315:     between the text and the dash, in canvas units.
1316:     (default = 3)
1317: 
1318:     *dashpush* "pushes" the dash and text away from the point
1319:     specified by :meth:`~matplotlib.text.Text.set_position` by the
1320:     amount in canvas units.  (default = 0)
1321: 
1322:     .. note::
1323: 
1324:         The alignment of the two objects is based on the bounding box
1325:         of the :class:`~matplotlib.text.Text`, as obtained by
1326:         :meth:`~matplotlib.artist.Artist.get_window_extent`.  This, in
1327:         turn, appears to depend on the font metrics as given by the
1328:         rendering backend. Hence the quality of the "centering" of the
1329:         label text with respect to the dash varies depending on the
1330:         backend used.
1331: 
1332:     .. note::
1333: 
1334:         I'm not sure that I got the
1335:         :meth:`~matplotlib.text.TextWithDash.get_window_extent` right,
1336:         or whether that's sufficient for providing the object bounding
1337:         box.
1338: 
1339:     '''
1340:     __name__ = 'textwithdash'
1341: 
1342:     def __str__(self):
1343:         return "TextWithDash(%g,%g,%s)" % (self._x, self._y, repr(self._text))
1344: 
1345:     def __init__(self,
1346:                  x=0, y=0, text='',
1347:                  color=None,          # defaults to rc params
1348:                  verticalalignment='center',
1349:                  horizontalalignment='center',
1350:                  multialignment=None,
1351:                  fontproperties=None,  # defaults to FontProperties()
1352:                  rotation=None,
1353:                  linespacing=None,
1354:                  dashlength=0.0,
1355:                  dashdirection=0,
1356:                  dashrotation=None,
1357:                  dashpad=3,
1358:                  dashpush=0,
1359:                  ):
1360: 
1361:         Text.__init__(self, x=x, y=y, text=text, color=color,
1362:                       verticalalignment=verticalalignment,
1363:                       horizontalalignment=horizontalalignment,
1364:                       multialignment=multialignment,
1365:                       fontproperties=fontproperties,
1366:                       rotation=rotation,
1367:                       linespacing=linespacing)
1368: 
1369:         # The position (x,y) values for text and dashline
1370:         # are bogus as given in the instantiation; they will
1371:         # be set correctly by update_coords() in draw()
1372: 
1373:         self.dashline = Line2D(xdata=(x, x),
1374:                                ydata=(y, y),
1375:                                color='k',
1376:                                linestyle='-')
1377: 
1378:         self._dashx = float(x)
1379:         self._dashy = float(y)
1380:         self._dashlength = dashlength
1381:         self._dashdirection = dashdirection
1382:         self._dashrotation = dashrotation
1383:         self._dashpad = dashpad
1384:         self._dashpush = dashpush
1385: 
1386:         #self.set_bbox(dict(pad=0))
1387: 
1388:     def get_unitless_position(self):
1389:         "Return the unitless position of the text as a tuple (*x*, *y*)"
1390:         # This will get the position with all unit information stripped away.
1391:         # This is here for convienience since it is done in several locations.
1392:         x = float(self.convert_xunits(self._dashx))
1393:         y = float(self.convert_yunits(self._dashy))
1394:         return x, y
1395: 
1396:     def get_position(self):
1397:         "Return the position of the text as a tuple (*x*, *y*)"
1398:         # This should return the same data (possibly unitized) as was
1399:         # specified with set_x and set_y
1400:         return self._dashx, self._dashy
1401: 
1402:     def get_prop_tup(self, renderer=None):
1403:         '''
1404:         Return a hashable tuple of properties.
1405: 
1406:         Not intended to be human readable, but useful for backends who
1407:         want to cache derived information about text (e.g., layouts) and
1408:         need to know if the text has changed.
1409:         '''
1410:         props = [p for p in Text.get_prop_tup(self, renderer=renderer)]
1411:         props.extend([self._x, self._y, self._dashlength,
1412:                       self._dashdirection, self._dashrotation, self._dashpad,
1413:                       self._dashpush])
1414:         return tuple(props)
1415: 
1416:     def draw(self, renderer):
1417:         '''
1418:         Draw the :class:`TextWithDash` object to the given *renderer*.
1419:         '''
1420:         self.update_coords(renderer)
1421:         Text.draw(self, renderer)
1422:         if self.get_dashlength() > 0.0:
1423:             self.dashline.draw(renderer)
1424:         self.stale = False
1425: 
1426:     def update_coords(self, renderer):
1427:         '''
1428:         Computes the actual *x*, *y* coordinates for text based on the
1429:         input *x*, *y* and the *dashlength*. Since the rotation is
1430:         with respect to the actual canvas's coordinates we need to map
1431:         back and forth.
1432:         '''
1433:         dashx, dashy = self.get_unitless_position()
1434:         dashlength = self.get_dashlength()
1435:         # Shortcircuit this process if we don't have a dash
1436:         if dashlength == 0.0:
1437:             self._x, self._y = dashx, dashy
1438:             return
1439: 
1440:         dashrotation = self.get_dashrotation()
1441:         dashdirection = self.get_dashdirection()
1442:         dashpad = self.get_dashpad()
1443:         dashpush = self.get_dashpush()
1444: 
1445:         angle = get_rotation(dashrotation)
1446:         theta = np.pi * (angle / 180.0 + dashdirection - 1)
1447:         cos_theta, sin_theta = np.cos(theta), np.sin(theta)
1448: 
1449:         transform = self.get_transform()
1450: 
1451:         # Compute the dash end points
1452:         # The 'c' prefix is for canvas coordinates
1453:         cxy = transform.transform_point((dashx, dashy))
1454:         cd = np.array([cos_theta, sin_theta])
1455:         c1 = cxy + dashpush * cd
1456:         c2 = cxy + (dashpush + dashlength) * cd
1457: 
1458:         inverse = transform.inverted()
1459:         (x1, y1) = inverse.transform_point(tuple(c1))
1460:         (x2, y2) = inverse.transform_point(tuple(c2))
1461:         self.dashline.set_data((x1, x2), (y1, y2))
1462: 
1463:         # We now need to extend this vector out to
1464:         # the center of the text area.
1465:         # The basic problem here is that we're "rotating"
1466:         # two separate objects but want it to appear as
1467:         # if they're rotated together.
1468:         # This is made non-trivial because of the
1469:         # interaction between text rotation and alignment -
1470:         # text alignment is based on the bbox after rotation.
1471:         # We reset/force both alignments to 'center'
1472:         # so we can do something relatively reasonable.
1473:         # There's probably a better way to do this by
1474:         # embedding all this in the object's transformations,
1475:         # but I don't grok the transformation stuff
1476:         # well enough yet.
1477:         we = Text.get_window_extent(self, renderer=renderer)
1478:         w, h = we.width, we.height
1479:         # Watch for zeros
1480:         if sin_theta == 0.0:
1481:             dx = w
1482:             dy = 0.0
1483:         elif cos_theta == 0.0:
1484:             dx = 0.0
1485:             dy = h
1486:         else:
1487:             tan_theta = sin_theta / cos_theta
1488:             dx = w
1489:             dy = w * tan_theta
1490:             if dy > h or dy < -h:
1491:                 dy = h
1492:                 dx = h / tan_theta
1493:         cwd = np.array([dx, dy]) / 2
1494:         cwd *= 1 + dashpad / np.sqrt(np.dot(cwd, cwd))
1495:         cw = c2 + (dashdirection * 2 - 1) * cwd
1496: 
1497:         newx, newy = inverse.transform_point(tuple(cw))
1498:         self._x, self._y = newx, newy
1499: 
1500:         # Now set the window extent
1501:         # I'm not at all sure this is the right way to do this.
1502:         we = Text.get_window_extent(self, renderer=renderer)
1503:         self._twd_window_extent = we.frozen()
1504:         self._twd_window_extent.update_from_data_xy(np.array([c1]), False)
1505: 
1506:         # Finally, make text align center
1507:         Text.set_horizontalalignment(self, 'center')
1508:         Text.set_verticalalignment(self, 'center')
1509: 
1510:     def get_window_extent(self, renderer=None):
1511:         '''
1512:         Return a :class:`~matplotlib.transforms.Bbox` object bounding
1513:         the text, in display units.
1514: 
1515:         In addition to being used internally, this is useful for
1516:         specifying clickable regions in a png file on a web page.
1517: 
1518:         *renderer* defaults to the _renderer attribute of the text
1519:         object.  This is not assigned until the first execution of
1520:         :meth:`draw`, so you must use this kwarg if you want
1521:         to call :meth:`get_window_extent` prior to the first
1522:         :meth:`draw`.  For getting web page regions, it is
1523:         simpler to call the method after saving the figure.
1524:         '''
1525:         self.update_coords(renderer)
1526:         if self.get_dashlength() == 0.0:
1527:             return Text.get_window_extent(self, renderer=renderer)
1528:         else:
1529:             return self._twd_window_extent
1530: 
1531:     def get_dashlength(self):
1532:         '''
1533:         Get the length of the dash.
1534:         '''
1535:         return self._dashlength
1536: 
1537:     def set_dashlength(self, dl):
1538:         '''
1539:         Set the length of the dash.
1540: 
1541:         ACCEPTS: float (canvas units)
1542:         '''
1543:         self._dashlength = dl
1544:         self.stale = True
1545: 
1546:     def get_dashdirection(self):
1547:         '''
1548:         Get the direction dash.  1 is before the text and 0 is after.
1549:         '''
1550:         return self._dashdirection
1551: 
1552:     def set_dashdirection(self, dd):
1553:         '''
1554:         Set the direction of the dash following the text.
1555:         1 is before the text and 0 is after. The default
1556:         is 0, which is what you'd want for the typical
1557:         case of ticks below and on the left of the figure.
1558: 
1559:         ACCEPTS: int (1 is before, 0 is after)
1560:         '''
1561:         self._dashdirection = dd
1562:         self.stale = True
1563: 
1564:     def get_dashrotation(self):
1565:         '''
1566:         Get the rotation of the dash in degrees.
1567:         '''
1568:         if self._dashrotation is None:
1569:             return self.get_rotation()
1570:         else:
1571:             return self._dashrotation
1572: 
1573:     def set_dashrotation(self, dr):
1574:         '''
1575:         Set the rotation of the dash, in degrees
1576: 
1577:         ACCEPTS: float (degrees)
1578:         '''
1579:         self._dashrotation = dr
1580:         self.stale = True
1581: 
1582:     def get_dashpad(self):
1583:         '''
1584:         Get the extra spacing between the dash and the text, in canvas units.
1585:         '''
1586:         return self._dashpad
1587: 
1588:     def set_dashpad(self, dp):
1589:         '''
1590:         Set the "pad" of the TextWithDash, which is the extra spacing
1591:         between the dash and the text, in canvas units.
1592: 
1593:         ACCEPTS: float (canvas units)
1594:         '''
1595:         self._dashpad = dp
1596:         self.stale = True
1597: 
1598:     def get_dashpush(self):
1599:         '''
1600:         Get the extra spacing between the dash and the specified text
1601:         position, in canvas units.
1602:         '''
1603:         return self._dashpush
1604: 
1605:     def set_dashpush(self, dp):
1606:         '''
1607:         Set the "push" of the TextWithDash, which
1608:         is the extra spacing between the beginning
1609:         of the dash and the specified position.
1610: 
1611:         ACCEPTS: float (canvas units)
1612:         '''
1613:         self._dashpush = dp
1614:         self.stale = True
1615: 
1616:     def set_position(self, xy):
1617:         '''
1618:         Set the (*x*, *y*) position of the :class:`TextWithDash`.
1619: 
1620:         ACCEPTS: (x, y)
1621:         '''
1622:         self.set_x(xy[0])
1623:         self.set_y(xy[1])
1624: 
1625:     def set_x(self, x):
1626:         '''
1627:         Set the *x* position of the :class:`TextWithDash`.
1628: 
1629:         ACCEPTS: float
1630:         '''
1631:         self._dashx = float(x)
1632:         self.stale = True
1633: 
1634:     def set_y(self, y):
1635:         '''
1636:         Set the *y* position of the :class:`TextWithDash`.
1637: 
1638:         ACCEPTS: float
1639:         '''
1640:         self._dashy = float(y)
1641:         self.stale = True
1642: 
1643:     def set_transform(self, t):
1644:         '''
1645:         Set the :class:`matplotlib.transforms.Transform` instance used
1646:         by this artist.
1647: 
1648:         ACCEPTS: a :class:`matplotlib.transforms.Transform` instance
1649:         '''
1650:         Text.set_transform(self, t)
1651:         self.dashline.set_transform(t)
1652:         self.stale = True
1653: 
1654:     def get_figure(self):
1655:         'return the figure instance the artist belongs to'
1656:         return self.figure
1657: 
1658:     def set_figure(self, fig):
1659:         '''
1660:         Set the figure instance the artist belong to.
1661: 
1662:         ACCEPTS: a :class:`matplotlib.figure.Figure` instance
1663:         '''
1664:         Text.set_figure(self, fig)
1665:         self.dashline.set_figure(fig)
1666: 
1667: docstring.interpd.update(TextWithDash=artist.kwdoc(TextWithDash))
1668: 
1669: 
1670: class OffsetFrom(object):
1671:     'Callable helper class for working with `Annotation`'
1672:     def __init__(self, artist, ref_coord, unit="points"):
1673:         '''
1674:         Parameters
1675:         ----------
1676:         artist : `Artist`, `BboxBase`, or `Transform`
1677:             The object to compute the offset from.
1678: 
1679:         ref_coord : length 2 sequence
1680:             If `artist` is an `Artist` or `BboxBase`, this values is
1681:             the location to of the offset origin in fractions of the
1682:             `artist` bounding box.
1683: 
1684:             If `artist` is a transform, the offset origin is the
1685:             transform applied to this value.
1686: 
1687:         unit : {'points, 'pixels'}
1688:             The screen units to use (pixels or points) for the offset
1689:             input.
1690: 
1691:         '''
1692:         self._artist = artist
1693:         self._ref_coord = ref_coord
1694:         self.set_unit(unit)
1695: 
1696:     def set_unit(self, unit):
1697:         '''
1698:         The unit for input to the transform used by ``__call__``
1699: 
1700:         Parameters
1701:         ----------
1702:         unit : {'points', 'pixels'}
1703:         '''
1704:         if unit not in ["points", "pixels"]:
1705:             raise ValueError("'unit' must be one of [ 'points' | 'pixels' ]")
1706:         self._unit = unit
1707: 
1708:     def get_unit(self):
1709:         'The unit for input to the transform used by ``__call__``'
1710:         return self._unit
1711: 
1712:     def _get_scale(self, renderer):
1713:         unit = self.get_unit()
1714:         if unit == "pixels":
1715:             return 1.
1716:         else:
1717:             return renderer.points_to_pixels(1.)
1718: 
1719:     def __call__(self, renderer):
1720:         '''
1721:         Return the offset transform.
1722: 
1723:         Parameters
1724:         ----------
1725:         renderer : `RendererBase`
1726:             The renderer to use to compute the offset
1727: 
1728:         Returns
1729:         -------
1730:         transform : `Transform`
1731:             Maps (x, y) in pixel or point units to screen units
1732:             relative to the given artist.
1733:         '''
1734:         if isinstance(self._artist, Artist):
1735:             bbox = self._artist.get_window_extent(renderer)
1736:             l, b, w, h = bbox.bounds
1737:             xf, yf = self._ref_coord
1738:             x, y = l + w * xf, b + h * yf
1739:         elif isinstance(self._artist, BboxBase):
1740:             l, b, w, h = self._artist.bounds
1741:             xf, yf = self._ref_coord
1742:             x, y = l + w * xf, b + h * yf
1743:         elif isinstance(self._artist, Transform):
1744:             x, y = self._artist.transform_point(self._ref_coord)
1745:         else:
1746:             raise RuntimeError("unknown type")
1747: 
1748:         sc = self._get_scale(renderer)
1749:         tr = Affine2D().scale(sc, sc).translate(x, y)
1750: 
1751:         return tr
1752: 
1753: 
1754: class _AnnotationBase(object):
1755:     def __init__(self,
1756:                  xy,
1757:                  xycoords='data',
1758:                  annotation_clip=None):
1759: 
1760:         self.xy = xy
1761:         self.xycoords = xycoords
1762:         self.set_annotation_clip(annotation_clip)
1763: 
1764:         self._draggable = None
1765: 
1766:     def _get_xy(self, renderer, x, y, s):
1767:         if isinstance(s, tuple):
1768:             s1, s2 = s
1769:         else:
1770:             s1, s2 = s, s
1771: 
1772:         if s1 == 'data':
1773:             x = float(self.convert_xunits(x))
1774:         if s2 == 'data':
1775:             y = float(self.convert_yunits(y))
1776: 
1777:         tr = self._get_xy_transform(renderer, s)
1778:         x1, y1 = tr.transform_point((x, y))
1779:         return x1, y1
1780: 
1781:     def _get_xy_transform(self, renderer, s):
1782: 
1783:         if isinstance(s, tuple):
1784:             s1, s2 = s
1785:             from matplotlib.transforms import blended_transform_factory
1786:             tr1 = self._get_xy_transform(renderer, s1)
1787:             tr2 = self._get_xy_transform(renderer, s2)
1788:             tr = blended_transform_factory(tr1, tr2)
1789:             return tr
1790:         elif callable(s):
1791:             tr = s(renderer)
1792:             if isinstance(tr, BboxBase):
1793:                 return BboxTransformTo(tr)
1794:             elif isinstance(tr, Transform):
1795:                 return tr
1796:             else:
1797:                 raise RuntimeError("unknown return type ...")
1798:         elif isinstance(s, Artist):
1799:             bbox = s.get_window_extent(renderer)
1800:             return BboxTransformTo(bbox)
1801:         elif isinstance(s, BboxBase):
1802:             return BboxTransformTo(s)
1803:         elif isinstance(s, Transform):
1804:             return s
1805:         elif not isinstance(s, six.string_types):
1806:             raise RuntimeError("unknown coordinate type : %s" % (s,))
1807: 
1808:         if s == 'data':
1809:             return self.axes.transData
1810:         elif s == 'polar':
1811:             from matplotlib.projections import PolarAxes
1812:             tr = PolarAxes.PolarTransform()
1813:             trans = tr + self.axes.transData
1814:             return trans
1815: 
1816:         s_ = s.split()
1817:         if len(s_) != 2:
1818:             raise ValueError("%s is not a recognized coordinate" % s)
1819: 
1820:         bbox0, xy0 = None, None
1821: 
1822:         bbox_name, unit = s_
1823:         # if unit is offset-like
1824:         if bbox_name == "figure":
1825:             bbox0 = self.figure.bbox
1826:         elif bbox_name == "axes":
1827:             bbox0 = self.axes.bbox
1828:         # elif bbox_name == "bbox":
1829:         #     if bbox is None:
1830:         #         raise RuntimeError("bbox is specified as a coordinate but "
1831:         #                            "never set")
1832:         #     bbox0 = self._get_bbox(renderer, bbox)
1833: 
1834:         if bbox0 is not None:
1835:             xy0 = bbox0.bounds[:2]
1836:         elif bbox_name == "offset":
1837:             xy0 = self._get_ref_xy(renderer)
1838: 
1839:         if xy0 is not None:
1840:             # reference x, y in display coordinate
1841:             ref_x, ref_y = xy0
1842:             from matplotlib.transforms import Affine2D
1843:             if unit == "points":
1844:                 # dots per points
1845:                 dpp = self.figure.get_dpi() / 72.
1846:                 tr = Affine2D().scale(dpp, dpp)
1847:             elif unit == "pixels":
1848:                 tr = Affine2D()
1849:             elif unit == "fontsize":
1850:                 fontsize = self.get_size()
1851:                 dpp = fontsize * self.figure.get_dpi() / 72.
1852:                 tr = Affine2D().scale(dpp, dpp)
1853:             elif unit == "fraction":
1854:                 w, h = bbox0.bounds[2:]
1855:                 tr = Affine2D().scale(w, h)
1856:             else:
1857:                 raise ValueError("%s is not a recognized coordinate" % s)
1858: 
1859:             return tr.translate(ref_x, ref_y)
1860: 
1861:         else:
1862:             raise ValueError("%s is not a recognized coordinate" % s)
1863: 
1864:     def _get_ref_xy(self, renderer):
1865:         '''
1866:         return x, y (in display coordinate) that is to be used for a reference
1867:         of any offset coordinate
1868:         '''
1869: 
1870:         if isinstance(self.xycoords, tuple):
1871:             s1, s2 = self.xycoords
1872:             if ((isinstance(s1, six.string_types)
1873:                  and s1.split()[0] == "offset")
1874:                     or (isinstance(s2, six.string_types)
1875:                         and s2.split()[0] == "offset")):
1876:                 raise ValueError("xycoords should not be an offset coordinate")
1877:             x, y = self.xy
1878:             x1, y1 = self._get_xy(renderer, x, y, s1)
1879:             x2, y2 = self._get_xy(renderer, x, y, s2)
1880:             return x1, y2
1881:         elif (isinstance(self.xycoords, six.string_types) and
1882:               self.xycoords.split()[0] == "offset"):
1883:             raise ValueError("xycoords should not be an offset coordinate")
1884:         else:
1885:             x, y = self.xy
1886:             return self._get_xy(renderer, x, y, self.xycoords)
1887:         #raise RuntimeError("must be defined by the derived class")
1888: 
1889:     # def _get_bbox(self, renderer):
1890:     #     if hasattr(bbox, "bounds"):
1891:     #         return bbox
1892:     #     elif hasattr(bbox, "get_window_extent"):
1893:     #         bbox = bbox.get_window_extent()
1894:     #         return bbox
1895:     #     else:
1896:     #         raise ValueError("A bbox instance is expected but got %s" %
1897:     #                          str(bbox))
1898: 
1899:     def set_annotation_clip(self, b):
1900:         '''
1901:         set *annotation_clip* attribute.
1902: 
1903:           * True: the annotation will only be drawn when self.xy is inside
1904:                   the axes.
1905:           * False: the annotation will always be drawn regardless of its
1906:                    position.
1907:           * None: the self.xy will be checked only if *xycoords* is "data"
1908:         '''
1909:         self._annotation_clip = b
1910: 
1911:     def get_annotation_clip(self):
1912:         '''
1913:         Return *annotation_clip* attribute.
1914:         See :meth:`set_annotation_clip` for the meaning of return values.
1915:         '''
1916:         return self._annotation_clip
1917: 
1918:     def _get_position_xy(self, renderer):
1919:         "Return the pixel position of the annotated point."
1920:         x, y = self.xy
1921:         return self._get_xy(renderer, x, y, self.xycoords)
1922: 
1923:     def _check_xy(self, renderer, xy_pixel):
1924:         '''
1925:         given the xy pixel coordinate, check if the annotation need to
1926:         be drawn.
1927:         '''
1928: 
1929:         b = self.get_annotation_clip()
1930: 
1931:         if b or (b is None and self.xycoords == "data"):
1932:             # check if self.xy is inside the axes.
1933:             if not self.axes.contains_point(xy_pixel):
1934:                 return False
1935: 
1936:         return True
1937: 
1938:     def draggable(self, state=None, use_blit=False):
1939:         '''
1940:         Set the draggable state -- if state is
1941: 
1942:           * None : toggle the current state
1943: 
1944:           * True : turn draggable on
1945: 
1946:           * False : turn draggable off
1947: 
1948:         If draggable is on, you can drag the annotation on the canvas with
1949:         the mouse.  The DraggableAnnotation helper instance is returned if
1950:         draggable is on.
1951:         '''
1952:         from matplotlib.offsetbox import DraggableAnnotation
1953:         is_draggable = self._draggable is not None
1954: 
1955:         # if state is None we'll toggle
1956:         if state is None:
1957:             state = not is_draggable
1958: 
1959:         if state:
1960:             if self._draggable is None:
1961:                 self._draggable = DraggableAnnotation(self, use_blit)
1962:         else:
1963:             if self._draggable is not None:
1964:                 self._draggable.disconnect()
1965:             self._draggable = None
1966: 
1967:         return self._draggable
1968: 
1969: 
1970: class Annotation(Text, _AnnotationBase):
1971:     def __str__(self):
1972:         return "Annotation(%g,%g,%s)" % (self.xy[0],
1973:                                          self.xy[1],
1974:                                          repr(self._text))
1975: 
1976:     @docstring.dedent_interpd
1977:     def __init__(self, s, xy,
1978:                  xytext=None,
1979:                  xycoords='data',
1980:                  textcoords=None,
1981:                  arrowprops=None,
1982:                  annotation_clip=None,
1983:                  **kwargs):
1984:         '''
1985:         Annotate the point ``xy`` with text ``s``.
1986: 
1987:         Additional kwargs are passed to `~matplotlib.text.Text`.
1988: 
1989:         Parameters
1990:         ----------
1991: 
1992:         s : str
1993:             The text of the annotation
1994: 
1995:         xy : iterable
1996:             Length 2 sequence specifying the *(x,y)* point to annotate
1997: 
1998:         xytext : iterable, optional
1999:             Length 2 sequence specifying the *(x,y)* to place the text
2000:             at.  If None, defaults to ``xy``.
2001: 
2002:         xycoords : str, Artist, Transform, callable or tuple, optional
2003: 
2004:             The coordinate system that ``xy`` is given in.
2005: 
2006:             For a `str` the allowed values are:
2007: 
2008:             =================   ===============================================
2009:             Property            Description
2010:             =================   ===============================================
2011:             'figure points'     points from the lower left of the figure
2012:             'figure pixels'     pixels from the lower left of the figure
2013:             'figure fraction'   fraction of figure from lower left
2014:             'axes points'       points from lower left corner of axes
2015:             'axes pixels'       pixels from lower left corner of axes
2016:             'axes fraction'     fraction of axes from lower left
2017:             'data'              use the coordinate system of the object being
2018:                                 annotated (default)
2019:             'polar'             *(theta,r)* if not native 'data' coordinates
2020:             =================   ===============================================
2021: 
2022:             If a `~matplotlib.artist.Artist` object is passed in the units are
2023:             fraction if it's bounding box.
2024: 
2025:             If a `~matplotlib.transforms.Transform` object is passed
2026:             in use that to transform ``xy`` to screen coordinates
2027: 
2028:             If a callable it must take a
2029:             `~matplotlib.backend_bases.RendererBase` object as input
2030:             and return a `~matplotlib.transforms.Transform` or
2031:             `~matplotlib.transforms.Bbox` object
2032: 
2033:             If a `tuple` must be length 2 tuple of str, `Artist`,
2034:             `Transform` or callable objects.  The first transform is
2035:             used for the *x* coordinate and the second for *y*.
2036: 
2037:             See :ref:`plotting-guide-annotation` for more details.
2038: 
2039:             Defaults to ``'data'``
2040: 
2041:         textcoords : str, `Artist`, `Transform`, callable or tuple, optional
2042:             The coordinate system that ``xytext`` is given, which
2043:             may be different than the coordinate system used for
2044:             ``xy``.
2045: 
2046:             All ``xycoords`` values are valid as well as the following
2047:             strings:
2048: 
2049:             =================   =========================================
2050:             Property            Description
2051:             =================   =========================================
2052:             'offset points'     offset (in points) from the *xy* value
2053:             'offset pixels'     offset (in pixels) from the *xy* value
2054:             =================   =========================================
2055: 
2056:             defaults to the input of ``xycoords``
2057: 
2058:         arrowprops : dict, optional
2059:             If not None, properties used to draw a
2060:             `~matplotlib.patches.FancyArrowPatch` arrow between ``xy`` and
2061:             ``xytext``.
2062: 
2063:             If `arrowprops` does not contain the key ``'arrowstyle'`` the
2064:             allowed keys are:
2065: 
2066:             ==========   ======================================================
2067:             Key          Description
2068:             ==========   ======================================================
2069:             width        the width of the arrow in points
2070:             headwidth    the width of the base of the arrow head in points
2071:             headlength   the length of the arrow head in points
2072:             shrink       fraction of total length to 'shrink' from both ends
2073:             ?            any key to :class:`matplotlib.patches.FancyArrowPatch`
2074:             ==========   ======================================================
2075: 
2076:             If the `arrowprops` contains the key ``'arrowstyle'`` the
2077:             above keys are forbidden.  The allowed values of
2078:             ``'arrowstyle'`` are:
2079: 
2080:             ============   =============================================
2081:             Name           Attrs
2082:             ============   =============================================
2083:             ``'-'``        None
2084:             ``'->'``       head_length=0.4,head_width=0.2
2085:             ``'-['``       widthB=1.0,lengthB=0.2,angleB=None
2086:             ``'|-|'``      widthA=1.0,widthB=1.0
2087:             ``'-|>'``      head_length=0.4,head_width=0.2
2088:             ``'<-'``       head_length=0.4,head_width=0.2
2089:             ``'<->'``      head_length=0.4,head_width=0.2
2090:             ``'<|-'``      head_length=0.4,head_width=0.2
2091:             ``'<|-|>'``    head_length=0.4,head_width=0.2
2092:             ``'fancy'``    head_length=0.4,head_width=0.4,tail_width=0.4
2093:             ``'simple'``   head_length=0.5,head_width=0.5,tail_width=0.2
2094:             ``'wedge'``    tail_width=0.3,shrink_factor=0.5
2095:             ============   =============================================
2096: 
2097:             Valid keys for `~matplotlib.patches.FancyArrowPatch` are:
2098: 
2099:             ===============  ==================================================
2100:             Key              Description
2101:             ===============  ==================================================
2102:             arrowstyle       the arrow style
2103:             connectionstyle  the connection style
2104:             relpos           default is (0.5, 0.5)
2105:             patchA           default is bounding box of the text
2106:             patchB           default is None
2107:             shrinkA          default is 2 points
2108:             shrinkB          default is 2 points
2109:             mutation_scale   default is text size (in points)
2110:             mutation_aspect  default is 1.
2111:             ?                any key for :class:`matplotlib.patches.PathPatch`
2112:             ===============  ==================================================
2113: 
2114:             Defaults to None
2115: 
2116:         annotation_clip : bool, optional
2117:             Controls the visibility of the annotation when it goes
2118:             outside the axes area.
2119: 
2120:             If `True`, the annotation will only be drawn when the
2121:             ``xy`` is inside the axes. If `False`, the annotation will
2122:             always be drawn regardless of its position.
2123: 
2124:             The default is `None`, which behave as `True` only if
2125:             *xycoords* is "data".
2126: 
2127:         Returns
2128:         -------
2129:         Annotation
2130: 
2131:         '''
2132: 
2133:         _AnnotationBase.__init__(self,
2134:                                  xy,
2135:                                  xycoords=xycoords,
2136:                                  annotation_clip=annotation_clip)
2137:         # warn about wonky input data
2138:         if (xytext is None and
2139:                 textcoords is not None and
2140:                 textcoords != xycoords):
2141:             warnings.warn("You have used the `textcoords` kwarg, but not "
2142:                           "the `xytext` kwarg.  This can lead to surprising "
2143:                           "results.")
2144: 
2145:         # clean up textcoords and assign default
2146:         if textcoords is None:
2147:             textcoords = self.xycoords
2148:         self._textcoords = textcoords
2149: 
2150:         # cleanup xytext defaults
2151:         if xytext is None:
2152:             xytext = self.xy
2153:         x, y = xytext
2154: 
2155:         Text.__init__(self, x, y, s, **kwargs)
2156: 
2157:         self.arrowprops = arrowprops
2158: 
2159:         self.arrow = None
2160: 
2161:         if arrowprops is not None:
2162:             if "arrowstyle" in arrowprops:
2163:                 arrowprops = self.arrowprops.copy()
2164:                 self._arrow_relpos = arrowprops.pop("relpos", (0.5, 0.5))
2165:             else:
2166:                 # modified YAArrow API to be used with FancyArrowPatch
2167:                 shapekeys = ('width', 'headwidth', 'headlength',
2168:                              'shrink', 'frac')
2169:                 arrowprops = dict()
2170:                 for key, val in self.arrowprops.items():
2171:                     if key not in shapekeys:
2172:                         arrowprops[key] = val  # basic Patch properties
2173:             self.arrow_patch = FancyArrowPatch((0, 0), (1, 1),
2174:                                                **arrowprops)
2175:         else:
2176:             self.arrow_patch = None
2177: 
2178:     def contains(self, event):
2179:         contains, tinfo = Text.contains(self, event)
2180:         if self.arrow is not None:
2181:             in_arrow, _ = self.arrow.contains(event)
2182:             contains = contains or in_arrow
2183:         if self.arrow_patch is not None:
2184:             in_patch, _ = self.arrow_patch.contains(event)
2185:             contains = contains or in_patch
2186: 
2187:         return contains, tinfo
2188: 
2189:     @property
2190:     def xyann(self):
2191:         return self.get_position()
2192: 
2193:     @xyann.setter
2194:     def xyann(self, xytext):
2195:         self.set_position(xytext)
2196: 
2197:     @property
2198:     def anncoords(self):
2199:         return self._textcoords
2200: 
2201:     @anncoords.setter
2202:     def anncoords(self, coords):
2203:         self._textcoords = coords
2204: 
2205:     def set_figure(self, fig):
2206: 
2207:         if self.arrow is not None:
2208:             self.arrow.set_figure(fig)
2209:         if self.arrow_patch is not None:
2210:             self.arrow_patch.set_figure(fig)
2211:         Artist.set_figure(self, fig)
2212: 
2213:     def update_positions(self, renderer):
2214:         '''"Update the pixel positions of the annotated point and the
2215:         text.
2216:         '''
2217:         xy_pixel = self._get_position_xy(renderer)
2218:         self._update_position_xytext(renderer, xy_pixel)
2219: 
2220:     def _update_position_xytext(self, renderer, xy_pixel):
2221:         '''Update the pixel positions of the annotation text and the arrow
2222:         patch.
2223:         '''
2224:         # generate transformation,
2225:         self.set_transform(self._get_xy_transform(renderer, self.anncoords))
2226: 
2227:         ox0, oy0 = self._get_xy_display()
2228:         ox1, oy1 = xy_pixel
2229: 
2230:         if self.arrowprops is not None:
2231:             x0, y0 = xy_pixel
2232:             l, b, w, h = Text.get_window_extent(self, renderer).bounds
2233:             r = l + w
2234:             t = b + h
2235:             xc = 0.5 * (l + r)
2236:             yc = 0.5 * (b + t)
2237: 
2238:             d = self.arrowprops.copy()
2239:             ms = d.pop("mutation_scale", self.get_size())
2240:             self.arrow_patch.set_mutation_scale(ms)
2241: 
2242:             if "arrowstyle" not in d:
2243:                 # Approximately simulate the YAArrow.
2244:                 # Pop its kwargs:
2245:                 shrink = d.pop('shrink', 0.0)
2246:                 width = d.pop('width', 4)
2247:                 headwidth = d.pop('headwidth', 12)
2248:                 # Ignore frac--it is useless.
2249:                 frac = d.pop('frac', None)
2250:                 if frac is not None:
2251:                     warnings.warn(
2252:                         "'frac' option in 'arrowprops' is no longer supported;"
2253:                         " use 'headlength' to set the head length in points.")
2254:                 headlength = d.pop('headlength', 12)
2255: 
2256:                 # NB: ms is in pts
2257:                 stylekw = dict(head_length=headlength / ms,
2258:                                head_width=headwidth / ms,
2259:                                tail_width=width / ms)
2260: 
2261:                 self.arrow_patch.set_arrowstyle('simple', **stylekw)
2262: 
2263:                 # using YAArrow style:
2264:                 # pick the x,y corner of the text bbox closest to point
2265:                 # annotated
2266:                 xpos = ((l, 0), (xc, 0.5), (r, 1))
2267:                 ypos = ((b, 0), (yc, 0.5), (t, 1))
2268: 
2269:                 _, (x, relposx) = min((abs(val[0] - x0), val) for val in xpos)
2270:                 _, (y, relposy) = min((abs(val[0] - y0), val) for val in ypos)
2271: 
2272:                 self._arrow_relpos = (relposx, relposy)
2273: 
2274:                 r = np.hypot((y - y0), (x - x0))
2275:                 shrink_pts = shrink * r / renderer.points_to_pixels(1)
2276:                 self.arrow_patch.shrinkA = shrink_pts
2277:                 self.arrow_patch.shrinkB = shrink_pts
2278: 
2279:             # adjust the starting point of the arrow relative to
2280:             # the textbox.
2281:             # TODO : Rotation needs to be accounted.
2282:             relpos = self._arrow_relpos
2283:             bbox = Text.get_window_extent(self, renderer)
2284:             ox0 = bbox.x0 + bbox.width * relpos[0]
2285:             oy0 = bbox.y0 + bbox.height * relpos[1]
2286: 
2287:             # The arrow will be drawn from (ox0, oy0) to (ox1,
2288:             # oy1). It will be first clipped by patchA and patchB.
2289:             # Then it will be shrunk by shirnkA and shrinkB
2290:             # (in points). If patch A is not set, self.bbox_patch
2291:             # is used.
2292: 
2293:             self.arrow_patch.set_positions((ox0, oy0), (ox1, oy1))
2294: 
2295:             if "patchA" in d:
2296:                 self.arrow_patch.set_patchA(d.pop("patchA"))
2297:             else:
2298:                 if self._bbox_patch:
2299:                     self.arrow_patch.set_patchA(self._bbox_patch)
2300:                 else:
2301:                     pad = renderer.points_to_pixels(4)
2302:                     if self.get_text() == "":
2303:                         self.arrow_patch.set_patchA(None)
2304:                         return
2305: 
2306:                     bbox = Text.get_window_extent(self, renderer)
2307:                     l, b, w, h = bbox.bounds
2308:                     l -= pad / 2.
2309:                     b -= pad / 2.
2310:                     w += pad
2311:                     h += pad
2312:                     r = Rectangle(xy=(l, b),
2313:                                   width=w,
2314:                                   height=h,
2315:                                   )
2316:                     r.set_transform(mtransforms.IdentityTransform())
2317:                     r.set_clip_on(False)
2318: 
2319:                     self.arrow_patch.set_patchA(r)
2320: 
2321:     @allow_rasterization
2322:     def draw(self, renderer):
2323:         '''
2324:         Draw the :class:`Annotation` object to the given *renderer*.
2325:         '''
2326: 
2327:         if renderer is not None:
2328:             self._renderer = renderer
2329:         if not self.get_visible():
2330:             return
2331: 
2332:         xy_pixel = self._get_position_xy(renderer)
2333:         if not self._check_xy(renderer, xy_pixel):
2334:             return
2335: 
2336:         self._update_position_xytext(renderer, xy_pixel)
2337:         self.update_bbox_position_size(renderer)
2338: 
2339:         if self.arrow_patch is not None:   # FancyArrowPatch
2340:             if self.arrow_patch.figure is None and self.figure is not None:
2341:                 self.arrow_patch.figure = self.figure
2342:             self.arrow_patch.draw(renderer)
2343: 
2344:         # Draw text, including FancyBboxPatch, after FancyArrowPatch.
2345:         # Otherwise, a wedge arrowstyle can land partly on top of the Bbox.
2346:         Text.draw(self, renderer)
2347: 
2348:     def get_window_extent(self, renderer=None):
2349:         '''
2350:         Return a :class:`~matplotlib.transforms.Bbox` object bounding
2351:         the text and arrow annotation, in display units.
2352: 
2353:         *renderer* defaults to the _renderer attribute of the text
2354:         object.  This is not assigned until the first execution of
2355:         :meth:`draw`, so you must use this kwarg if you want
2356:         to call :meth:`get_window_extent` prior to the first
2357:         :meth:`draw`.  For getting web page regions, it is
2358:         simpler to call the method after saving the figure. The
2359:         *dpi* used defaults to self.figure.dpi; the renderer dpi is
2360:         irrelevant.
2361: 
2362:         '''
2363:         if not self.get_visible():
2364:             return Bbox.unit()
2365:         arrow = self.arrow
2366:         arrow_patch = self.arrow_patch
2367: 
2368:         text_bbox = Text.get_window_extent(self, renderer=renderer)
2369:         bboxes = [text_bbox]
2370: 
2371:         if self.arrow is not None:
2372:             bboxes.append(arrow.get_window_extent(renderer=renderer))
2373:         elif self.arrow_patch is not None:
2374:             bboxes.append(arrow_patch.get_window_extent(renderer=renderer))
2375: 
2376:         return Bbox.union(bboxes)
2377: 
2378: 
2379: docstring.interpd.update(Annotation=Annotation.__init__.__doc__)
2380: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

unicode_139221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3, (-1)), 'unicode', u'\nClasses for including text in a figure.\n')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 7, 0))

# 'import six' statement (line 7)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_139222 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'six')

if (type(import_139222) is not StypyTypeError):

    if (import_139222 != 'pyd_module'):
        __import__(import_139222)
        sys_modules_139223 = sys.modules[import_139222]
        import_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'six', sys_modules_139223.module_type_store, module_type_store)
    else:
        import six

        import_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'six', six, module_type_store)

else:
    # Assigning a type to the variable 'six' (line 7)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7, 0), 'six', import_139222)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 8, 0))

# 'from six.moves import zip' statement (line 8)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_139224 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'six.moves')

if (type(import_139224) is not StypyTypeError):

    if (import_139224 != 'pyd_module'):
        __import__(import_139224)
        sys_modules_139225 = sys.modules[import_139224]
        import_from_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'six.moves', sys_modules_139225.module_type_store, module_type_store, ['zip'])
        nest_module(stypy.reporting.localization.Localization(__file__, 8, 0), __file__, sys_modules_139225, sys_modules_139225.module_type_store, module_type_store)
    else:
        from six.moves import zip

        import_from_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'six.moves', None, module_type_store, ['zip'], [zip])

else:
    # Assigning a type to the variable 'six.moves' (line 8)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 8, 0), 'six.moves', import_139224)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 10, 0))

# 'import math' statement (line 10)
import math

import_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'math', math, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 11, 0))

# 'import warnings' statement (line 11)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 12, 0))

# 'import weakref' statement (line 12)
import weakref

import_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'weakref', weakref, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 14, 0))

# 'import contextlib' statement (line 14)
import contextlib

import_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'contextlib', contextlib, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 16, 0))

# 'import numpy' statement (line 16)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_139226 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'numpy')

if (type(import_139226) is not StypyTypeError):

    if (import_139226 != 'pyd_module'):
        __import__(import_139226)
        sys_modules_139227 = sys.modules[import_139226]
        import_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'np', sys_modules_139227.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 16)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 16, 0), 'numpy', import_139226)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 18, 0))

# 'from matplotlib import cbook' statement (line 18)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_139228 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'matplotlib')

if (type(import_139228) is not StypyTypeError):

    if (import_139228 != 'pyd_module'):
        __import__(import_139228)
        sys_modules_139229 = sys.modules[import_139228]
        import_from_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'matplotlib', sys_modules_139229.module_type_store, module_type_store, ['cbook'])
        nest_module(stypy.reporting.localization.Localization(__file__, 18, 0), __file__, sys_modules_139229, sys_modules_139229.module_type_store, module_type_store)
    else:
        from matplotlib import cbook

        import_from_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'matplotlib', None, module_type_store, ['cbook'], [cbook])

else:
    # Assigning a type to the variable 'matplotlib' (line 18)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 18, 0), 'matplotlib', import_139228)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 19, 0))

# 'from matplotlib import rcParams' statement (line 19)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_139230 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'matplotlib')

if (type(import_139230) is not StypyTypeError):

    if (import_139230 != 'pyd_module'):
        __import__(import_139230)
        sys_modules_139231 = sys.modules[import_139230]
        import_from_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'matplotlib', sys_modules_139231.module_type_store, module_type_store, ['rcParams'])
        nest_module(stypy.reporting.localization.Localization(__file__, 19, 0), __file__, sys_modules_139231, sys_modules_139231.module_type_store, module_type_store)
    else:
        from matplotlib import rcParams

        import_from_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'matplotlib', None, module_type_store, ['rcParams'], [rcParams])

else:
    # Assigning a type to the variable 'matplotlib' (line 19)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 19, 0), 'matplotlib', import_139230)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 20, 0))

# 'import matplotlib.artist' statement (line 20)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_139232 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'matplotlib.artist')

if (type(import_139232) is not StypyTypeError):

    if (import_139232 != 'pyd_module'):
        __import__(import_139232)
        sys_modules_139233 = sys.modules[import_139232]
        import_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'artist', sys_modules_139233.module_type_store, module_type_store)
    else:
        import matplotlib.artist as artist

        import_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'artist', matplotlib.artist, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.artist' (line 20)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 20, 0), 'matplotlib.artist', import_139232)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 21, 0))

# 'from matplotlib.artist import Artist' statement (line 21)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_139234 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'matplotlib.artist')

if (type(import_139234) is not StypyTypeError):

    if (import_139234 != 'pyd_module'):
        __import__(import_139234)
        sys_modules_139235 = sys.modules[import_139234]
        import_from_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'matplotlib.artist', sys_modules_139235.module_type_store, module_type_store, ['Artist'])
        nest_module(stypy.reporting.localization.Localization(__file__, 21, 0), __file__, sys_modules_139235, sys_modules_139235.module_type_store, module_type_store)
    else:
        from matplotlib.artist import Artist

        import_from_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'matplotlib.artist', None, module_type_store, ['Artist'], [Artist])

else:
    # Assigning a type to the variable 'matplotlib.artist' (line 21)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 21, 0), 'matplotlib.artist', import_139234)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 22, 0))

# 'from matplotlib.cbook import maxdict' statement (line 22)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_139236 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'matplotlib.cbook')

if (type(import_139236) is not StypyTypeError):

    if (import_139236 != 'pyd_module'):
        __import__(import_139236)
        sys_modules_139237 = sys.modules[import_139236]
        import_from_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'matplotlib.cbook', sys_modules_139237.module_type_store, module_type_store, ['maxdict'])
        nest_module(stypy.reporting.localization.Localization(__file__, 22, 0), __file__, sys_modules_139237, sys_modules_139237.module_type_store, module_type_store)
    else:
        from matplotlib.cbook import maxdict

        import_from_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'matplotlib.cbook', None, module_type_store, ['maxdict'], [maxdict])

else:
    # Assigning a type to the variable 'matplotlib.cbook' (line 22)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 22, 0), 'matplotlib.cbook', import_139236)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 23, 0))

# 'from matplotlib import docstring' statement (line 23)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_139238 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'matplotlib')

if (type(import_139238) is not StypyTypeError):

    if (import_139238 != 'pyd_module'):
        __import__(import_139238)
        sys_modules_139239 = sys.modules[import_139238]
        import_from_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'matplotlib', sys_modules_139239.module_type_store, module_type_store, ['docstring'])
        nest_module(stypy.reporting.localization.Localization(__file__, 23, 0), __file__, sys_modules_139239, sys_modules_139239.module_type_store, module_type_store)
    else:
        from matplotlib import docstring

        import_from_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'matplotlib', None, module_type_store, ['docstring'], [docstring])

else:
    # Assigning a type to the variable 'matplotlib' (line 23)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 23, 0), 'matplotlib', import_139238)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 24, 0))

# 'from matplotlib.font_manager import FontProperties' statement (line 24)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_139240 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib.font_manager')

if (type(import_139240) is not StypyTypeError):

    if (import_139240 != 'pyd_module'):
        __import__(import_139240)
        sys_modules_139241 = sys.modules[import_139240]
        import_from_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib.font_manager', sys_modules_139241.module_type_store, module_type_store, ['FontProperties'])
        nest_module(stypy.reporting.localization.Localization(__file__, 24, 0), __file__, sys_modules_139241, sys_modules_139241.module_type_store, module_type_store)
    else:
        from matplotlib.font_manager import FontProperties

        import_from_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib.font_manager', None, module_type_store, ['FontProperties'], [FontProperties])

else:
    # Assigning a type to the variable 'matplotlib.font_manager' (line 24)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib.font_manager', import_139240)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 25, 0))

# 'from matplotlib.patches import FancyBboxPatch' statement (line 25)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_139242 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'matplotlib.patches')

if (type(import_139242) is not StypyTypeError):

    if (import_139242 != 'pyd_module'):
        __import__(import_139242)
        sys_modules_139243 = sys.modules[import_139242]
        import_from_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'matplotlib.patches', sys_modules_139243.module_type_store, module_type_store, ['FancyBboxPatch'])
        nest_module(stypy.reporting.localization.Localization(__file__, 25, 0), __file__, sys_modules_139243, sys_modules_139243.module_type_store, module_type_store)
    else:
        from matplotlib.patches import FancyBboxPatch

        import_from_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'matplotlib.patches', None, module_type_store, ['FancyBboxPatch'], [FancyBboxPatch])

else:
    # Assigning a type to the variable 'matplotlib.patches' (line 25)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 25, 0), 'matplotlib.patches', import_139242)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 26, 0))

# 'from matplotlib.patches import FancyArrowPatch, Rectangle' statement (line 26)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_139244 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'matplotlib.patches')

if (type(import_139244) is not StypyTypeError):

    if (import_139244 != 'pyd_module'):
        __import__(import_139244)
        sys_modules_139245 = sys.modules[import_139244]
        import_from_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'matplotlib.patches', sys_modules_139245.module_type_store, module_type_store, ['FancyArrowPatch', 'Rectangle'])
        nest_module(stypy.reporting.localization.Localization(__file__, 26, 0), __file__, sys_modules_139245, sys_modules_139245.module_type_store, module_type_store)
    else:
        from matplotlib.patches import FancyArrowPatch, Rectangle

        import_from_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'matplotlib.patches', None, module_type_store, ['FancyArrowPatch', 'Rectangle'], [FancyArrowPatch, Rectangle])

else:
    # Assigning a type to the variable 'matplotlib.patches' (line 26)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 26, 0), 'matplotlib.patches', import_139244)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 27, 0))

# 'import matplotlib.transforms' statement (line 27)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_139246 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'matplotlib.transforms')

if (type(import_139246) is not StypyTypeError):

    if (import_139246 != 'pyd_module'):
        __import__(import_139246)
        sys_modules_139247 = sys.modules[import_139246]
        import_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'mtransforms', sys_modules_139247.module_type_store, module_type_store)
    else:
        import matplotlib.transforms as mtransforms

        import_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'mtransforms', matplotlib.transforms, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.transforms' (line 27)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 27, 0), 'matplotlib.transforms', import_139246)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 28, 0))

# 'from matplotlib.transforms import Affine2D, Bbox, Transform' statement (line 28)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_139248 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'matplotlib.transforms')

if (type(import_139248) is not StypyTypeError):

    if (import_139248 != 'pyd_module'):
        __import__(import_139248)
        sys_modules_139249 = sys.modules[import_139248]
        import_from_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'matplotlib.transforms', sys_modules_139249.module_type_store, module_type_store, ['Affine2D', 'Bbox', 'Transform'])
        nest_module(stypy.reporting.localization.Localization(__file__, 28, 0), __file__, sys_modules_139249, sys_modules_139249.module_type_store, module_type_store)
    else:
        from matplotlib.transforms import Affine2D, Bbox, Transform

        import_from_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'matplotlib.transforms', None, module_type_store, ['Affine2D', 'Bbox', 'Transform'], [Affine2D, Bbox, Transform])

else:
    # Assigning a type to the variable 'matplotlib.transforms' (line 28)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 28, 0), 'matplotlib.transforms', import_139248)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 29, 0))

# 'from matplotlib.transforms import BboxBase, BboxTransformTo' statement (line 29)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_139250 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'matplotlib.transforms')

if (type(import_139250) is not StypyTypeError):

    if (import_139250 != 'pyd_module'):
        __import__(import_139250)
        sys_modules_139251 = sys.modules[import_139250]
        import_from_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'matplotlib.transforms', sys_modules_139251.module_type_store, module_type_store, ['BboxBase', 'BboxTransformTo'])
        nest_module(stypy.reporting.localization.Localization(__file__, 29, 0), __file__, sys_modules_139251, sys_modules_139251.module_type_store, module_type_store)
    else:
        from matplotlib.transforms import BboxBase, BboxTransformTo

        import_from_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'matplotlib.transforms', None, module_type_store, ['BboxBase', 'BboxTransformTo'], [BboxBase, BboxTransformTo])

else:
    # Assigning a type to the variable 'matplotlib.transforms' (line 29)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 29, 0), 'matplotlib.transforms', import_139250)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 30, 0))

# 'from matplotlib.lines import Line2D' statement (line 30)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_139252 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'matplotlib.lines')

if (type(import_139252) is not StypyTypeError):

    if (import_139252 != 'pyd_module'):
        __import__(import_139252)
        sys_modules_139253 = sys.modules[import_139252]
        import_from_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'matplotlib.lines', sys_modules_139253.module_type_store, module_type_store, ['Line2D'])
        nest_module(stypy.reporting.localization.Localization(__file__, 30, 0), __file__, sys_modules_139253, sys_modules_139253.module_type_store, module_type_store)
    else:
        from matplotlib.lines import Line2D

        import_from_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'matplotlib.lines', None, module_type_store, ['Line2D'], [Line2D])

else:
    # Assigning a type to the variable 'matplotlib.lines' (line 30)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 30, 0), 'matplotlib.lines', import_139252)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 31, 0))

# 'from matplotlib.path import Path' statement (line 31)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_139254 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'matplotlib.path')

if (type(import_139254) is not StypyTypeError):

    if (import_139254 != 'pyd_module'):
        __import__(import_139254)
        sys_modules_139255 = sys.modules[import_139254]
        import_from_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'matplotlib.path', sys_modules_139255.module_type_store, module_type_store, ['Path'])
        nest_module(stypy.reporting.localization.Localization(__file__, 31, 0), __file__, sys_modules_139255, sys_modules_139255.module_type_store, module_type_store)
    else:
        from matplotlib.path import Path

        import_from_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'matplotlib.path', None, module_type_store, ['Path'], [Path])

else:
    # Assigning a type to the variable 'matplotlib.path' (line 31)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 31, 0), 'matplotlib.path', import_139254)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 32, 0))

# 'from matplotlib.artist import allow_rasterization' statement (line 32)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_139256 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib.artist')

if (type(import_139256) is not StypyTypeError):

    if (import_139256 != 'pyd_module'):
        __import__(import_139256)
        sys_modules_139257 = sys.modules[import_139256]
        import_from_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib.artist', sys_modules_139257.module_type_store, module_type_store, ['allow_rasterization'])
        nest_module(stypy.reporting.localization.Localization(__file__, 32, 0), __file__, sys_modules_139257, sys_modules_139257.module_type_store, module_type_store)
    else:
        from matplotlib.artist import allow_rasterization

        import_from_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib.artist', None, module_type_store, ['allow_rasterization'], [allow_rasterization])

else:
    # Assigning a type to the variable 'matplotlib.artist' (line 32)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib.artist', import_139256)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 34, 0))

# 'from matplotlib.textpath import TextPath' statement (line 34)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_139258 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 34, 0), 'matplotlib.textpath')

if (type(import_139258) is not StypyTypeError):

    if (import_139258 != 'pyd_module'):
        __import__(import_139258)
        sys_modules_139259 = sys.modules[import_139258]
        import_from_module(stypy.reporting.localization.Localization(__file__, 34, 0), 'matplotlib.textpath', sys_modules_139259.module_type_store, module_type_store, ['TextPath'])
        nest_module(stypy.reporting.localization.Localization(__file__, 34, 0), __file__, sys_modules_139259, sys_modules_139259.module_type_store, module_type_store)
    else:
        from matplotlib.textpath import TextPath

        import_from_module(stypy.reporting.localization.Localization(__file__, 34, 0), 'matplotlib.textpath', None, module_type_store, ['TextPath'], [TextPath])

else:
    # Assigning a type to the variable 'matplotlib.textpath' (line 34)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 34, 0), 'matplotlib.textpath', import_139258)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')


@norecursion
def _process_text_args(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 37)
    None_139260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 37, 42), 'None')
    defaults = [None_139260]
    # Create a new context for function '_process_text_args'
    module_type_store = module_type_store.open_function_context('_process_text_args', 37, 0, False)
    
    # Passed parameters checking function
    _process_text_args.stypy_localization = localization
    _process_text_args.stypy_type_of_self = None
    _process_text_args.stypy_type_store = module_type_store
    _process_text_args.stypy_function_name = '_process_text_args'
    _process_text_args.stypy_param_names_list = ['override', 'fontdict']
    _process_text_args.stypy_varargs_param_name = None
    _process_text_args.stypy_kwargs_param_name = 'kwargs'
    _process_text_args.stypy_call_defaults = defaults
    _process_text_args.stypy_call_varargs = varargs
    _process_text_args.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_process_text_args', ['override', 'fontdict'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_process_text_args', localization, ['override', 'fontdict'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_process_text_args(...)' code ##################

    unicode_139261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 38, 4), 'unicode', u"Return an override dict.  See :func:`~pyplot.text' docstring for info")
    
    # Type idiom detected: calculating its left and rigth part (line 40)
    # Getting the type of 'fontdict' (line 40)
    fontdict_139262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 4), 'fontdict')
    # Getting the type of 'None' (line 40)
    None_139263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 23), 'None')
    
    (may_be_139264, more_types_in_union_139265) = may_not_be_none(fontdict_139262, None_139263)

    if may_be_139264:

        if more_types_in_union_139265:
            # Runtime conditional SSA (line 40)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to update(...): (line 41)
        # Processing the call arguments (line 41)
        # Getting the type of 'fontdict' (line 41)
        fontdict_139268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 41, 24), 'fontdict', False)
        # Processing the call keyword arguments (line 41)
        kwargs_139269 = {}
        # Getting the type of 'override' (line 41)
        override_139266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 41, 8), 'override', False)
        # Obtaining the member 'update' of a type (line 41)
        update_139267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 41, 8), override_139266, 'update')
        # Calling update(args, kwargs) (line 41)
        update_call_result_139270 = invoke(stypy.reporting.localization.Localization(__file__, 41, 8), update_139267, *[fontdict_139268], **kwargs_139269)
        

        if more_types_in_union_139265:
            # SSA join for if statement (line 40)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Call to update(...): (line 43)
    # Processing the call arguments (line 43)
    # Getting the type of 'kwargs' (line 43)
    kwargs_139273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 43, 20), 'kwargs', False)
    # Processing the call keyword arguments (line 43)
    kwargs_139274 = {}
    # Getting the type of 'override' (line 43)
    override_139271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 43, 4), 'override', False)
    # Obtaining the member 'update' of a type (line 43)
    update_139272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 43, 4), override_139271, 'update')
    # Calling update(args, kwargs) (line 43)
    update_call_result_139275 = invoke(stypy.reporting.localization.Localization(__file__, 43, 4), update_139272, *[kwargs_139273], **kwargs_139274)
    
    # Getting the type of 'override' (line 44)
    override_139276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 44, 11), 'override')
    # Assigning a type to the variable 'stypy_return_type' (line 44)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 44, 4), 'stypy_return_type', override_139276)
    
    # ################# End of '_process_text_args(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_process_text_args' in the type store
    # Getting the type of 'stypy_return_type' (line 37)
    stypy_return_type_139277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 37, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_139277)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_process_text_args'
    return stypy_return_type_139277

# Assigning a type to the variable '_process_text_args' (line 37)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 37, 0), '_process_text_args', _process_text_args)

@norecursion
def _wrap_text(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_wrap_text'
    module_type_store = module_type_store.open_function_context('_wrap_text', 47, 0, False)
    
    # Passed parameters checking function
    _wrap_text.stypy_localization = localization
    _wrap_text.stypy_type_of_self = None
    _wrap_text.stypy_type_store = module_type_store
    _wrap_text.stypy_function_name = '_wrap_text'
    _wrap_text.stypy_param_names_list = ['textobj']
    _wrap_text.stypy_varargs_param_name = None
    _wrap_text.stypy_kwargs_param_name = None
    _wrap_text.stypy_call_defaults = defaults
    _wrap_text.stypy_call_varargs = varargs
    _wrap_text.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_wrap_text', ['textobj'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_wrap_text', localization, ['textobj'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_wrap_text(...)' code ##################

    unicode_139278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 51, (-1)), 'unicode', u'\n    Temporarily inserts newlines to the text if the wrap option is enabled.\n    ')
    
    
    # Call to get_wrap(...): (line 52)
    # Processing the call keyword arguments (line 52)
    kwargs_139281 = {}
    # Getting the type of 'textobj' (line 52)
    textobj_139279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 52, 7), 'textobj', False)
    # Obtaining the member 'get_wrap' of a type (line 52)
    get_wrap_139280 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 52, 7), textobj_139279, 'get_wrap')
    # Calling get_wrap(args, kwargs) (line 52)
    get_wrap_call_result_139282 = invoke(stypy.reporting.localization.Localization(__file__, 52, 7), get_wrap_139280, *[], **kwargs_139281)
    
    # Testing the type of an if condition (line 52)
    if_condition_139283 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 52, 4), get_wrap_call_result_139282)
    # Assigning a type to the variable 'if_condition_139283' (line 52)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 52, 4), 'if_condition_139283', if_condition_139283)
    # SSA begins for if statement (line 52)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 53):
    
    # Assigning a Call to a Name (line 53):
    
    # Assigning a Call to a Name (line 53):
    
    # Call to get_text(...): (line 53)
    # Processing the call keyword arguments (line 53)
    kwargs_139286 = {}
    # Getting the type of 'textobj' (line 53)
    textobj_139284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 53, 19), 'textobj', False)
    # Obtaining the member 'get_text' of a type (line 53)
    get_text_139285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 53, 19), textobj_139284, 'get_text')
    # Calling get_text(args, kwargs) (line 53)
    get_text_call_result_139287 = invoke(stypy.reporting.localization.Localization(__file__, 53, 19), get_text_139285, *[], **kwargs_139286)
    
    # Assigning a type to the variable 'old_text' (line 53)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 53, 8), 'old_text', get_text_call_result_139287)
    
    # Try-finally block (line 54)
    
    # Call to set_text(...): (line 55)
    # Processing the call arguments (line 55)
    
    # Call to _get_wrapped_text(...): (line 55)
    # Processing the call keyword arguments (line 55)
    kwargs_139292 = {}
    # Getting the type of 'textobj' (line 55)
    textobj_139290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 55, 29), 'textobj', False)
    # Obtaining the member '_get_wrapped_text' of a type (line 55)
    _get_wrapped_text_139291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 55, 29), textobj_139290, '_get_wrapped_text')
    # Calling _get_wrapped_text(args, kwargs) (line 55)
    _get_wrapped_text_call_result_139293 = invoke(stypy.reporting.localization.Localization(__file__, 55, 29), _get_wrapped_text_139291, *[], **kwargs_139292)
    
    # Processing the call keyword arguments (line 55)
    kwargs_139294 = {}
    # Getting the type of 'textobj' (line 55)
    textobj_139288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 55, 12), 'textobj', False)
    # Obtaining the member 'set_text' of a type (line 55)
    set_text_139289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 55, 12), textobj_139288, 'set_text')
    # Calling set_text(args, kwargs) (line 55)
    set_text_call_result_139295 = invoke(stypy.reporting.localization.Localization(__file__, 55, 12), set_text_139289, *[_get_wrapped_text_call_result_139293], **kwargs_139294)
    
    # Creating a generator
    # Getting the type of 'textobj' (line 56)
    textobj_139296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 56, 18), 'textobj')
    GeneratorType_139297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 56, 12), 'GeneratorType')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 56, 12), GeneratorType_139297, textobj_139296)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 56, 12), 'stypy_return_type', GeneratorType_139297)
    
    # finally branch of the try-finally block (line 54)
    
    # Call to set_text(...): (line 58)
    # Processing the call arguments (line 58)
    # Getting the type of 'old_text' (line 58)
    old_text_139300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 58, 29), 'old_text', False)
    # Processing the call keyword arguments (line 58)
    kwargs_139301 = {}
    # Getting the type of 'textobj' (line 58)
    textobj_139298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 58, 12), 'textobj', False)
    # Obtaining the member 'set_text' of a type (line 58)
    set_text_139299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 58, 12), textobj_139298, 'set_text')
    # Calling set_text(args, kwargs) (line 58)
    set_text_call_result_139302 = invoke(stypy.reporting.localization.Localization(__file__, 58, 12), set_text_139299, *[old_text_139300], **kwargs_139301)
    
    
    # SSA branch for the else part of an if statement (line 52)
    module_type_store.open_ssa_branch('else')
    # Creating a generator
    # Getting the type of 'textobj' (line 60)
    textobj_139303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 60, 14), 'textobj')
    GeneratorType_139304 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 60, 8), 'GeneratorType')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 60, 8), GeneratorType_139304, textobj_139303)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 60, 8), 'stypy_return_type', GeneratorType_139304)
    # SSA join for if statement (line 52)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_wrap_text(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_wrap_text' in the type store
    # Getting the type of 'stypy_return_type' (line 47)
    stypy_return_type_139305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 47, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_139305)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_wrap_text'
    return stypy_return_type_139305

# Assigning a type to the variable '_wrap_text' (line 47)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 47, 0), '_wrap_text', _wrap_text)

@norecursion
def get_rotation(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_rotation'
    module_type_store = module_type_store.open_function_context('get_rotation', 64, 0, False)
    
    # Passed parameters checking function
    get_rotation.stypy_localization = localization
    get_rotation.stypy_type_of_self = None
    get_rotation.stypy_type_store = module_type_store
    get_rotation.stypy_function_name = 'get_rotation'
    get_rotation.stypy_param_names_list = ['rotation']
    get_rotation.stypy_varargs_param_name = None
    get_rotation.stypy_kwargs_param_name = None
    get_rotation.stypy_call_defaults = defaults
    get_rotation.stypy_call_varargs = varargs
    get_rotation.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_rotation', ['rotation'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_rotation', localization, ['rotation'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_rotation(...)' code ##################

    unicode_139306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 70, (-1)), 'unicode', u"\n    Return the text angle as float. The returned\n    angle is between 0 and 360 deg.\n\n    *rotation* may be 'horizontal', 'vertical', or a numeric value in degrees.\n    ")
    
    
    # SSA begins for try-except statement (line 71)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 72):
    
    # Assigning a Call to a Name (line 72):
    
    # Assigning a Call to a Name (line 72):
    
    # Call to float(...): (line 72)
    # Processing the call arguments (line 72)
    # Getting the type of 'rotation' (line 72)
    rotation_139308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 72, 22), 'rotation', False)
    # Processing the call keyword arguments (line 72)
    kwargs_139309 = {}
    # Getting the type of 'float' (line 72)
    float_139307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 72, 16), 'float', False)
    # Calling float(args, kwargs) (line 72)
    float_call_result_139310 = invoke(stypy.reporting.localization.Localization(__file__, 72, 16), float_139307, *[rotation_139308], **kwargs_139309)
    
    # Assigning a type to the variable 'angle' (line 72)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 72, 8), 'angle', float_call_result_139310)
    # SSA branch for the except part of a try statement (line 71)
    # SSA branch for the except 'Tuple' branch of a try statement (line 71)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Call to a Name (line 74):
    
    # Assigning a Call to a Name (line 74):
    
    # Assigning a Call to a Name (line 74):
    
    # Call to isinstance(...): (line 74)
    # Processing the call arguments (line 74)
    # Getting the type of 'rotation' (line 74)
    rotation_139312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 74, 30), 'rotation', False)
    # Getting the type of 'six' (line 74)
    six_139313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 74, 40), 'six', False)
    # Obtaining the member 'string_types' of a type (line 74)
    string_types_139314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 74, 40), six_139313, 'string_types')
    # Processing the call keyword arguments (line 74)
    kwargs_139315 = {}
    # Getting the type of 'isinstance' (line 74)
    isinstance_139311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 74, 19), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 74)
    isinstance_call_result_139316 = invoke(stypy.reporting.localization.Localization(__file__, 74, 19), isinstance_139311, *[rotation_139312, string_types_139314], **kwargs_139315)
    
    # Assigning a type to the variable 'isString' (line 74)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 74, 8), 'isString', isinstance_call_result_139316)
    
    
    # Evaluating a boolean operation
    
    # Evaluating a boolean operation
    # Getting the type of 'isString' (line 75)
    isString_139317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 13), 'isString')
    
    # Getting the type of 'rotation' (line 75)
    rotation_139318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 26), 'rotation')
    unicode_139319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 75, 38), 'unicode', u'horizontal')
    # Applying the binary operator '==' (line 75)
    result_eq_139320 = python_operator(stypy.reporting.localization.Localization(__file__, 75, 26), '==', rotation_139318, unicode_139319)
    
    # Applying the binary operator 'and' (line 75)
    result_and_keyword_139321 = python_operator(stypy.reporting.localization.Localization(__file__, 75, 13), 'and', isString_139317, result_eq_139320)
    
    
    # Getting the type of 'rotation' (line 75)
    rotation_139322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 55), 'rotation')
    # Getting the type of 'None' (line 75)
    None_139323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 67), 'None')
    # Applying the binary operator 'is' (line 75)
    result_is__139324 = python_operator(stypy.reporting.localization.Localization(__file__, 75, 55), 'is', rotation_139322, None_139323)
    
    # Applying the binary operator 'or' (line 75)
    result_or_keyword_139325 = python_operator(stypy.reporting.localization.Localization(__file__, 75, 12), 'or', result_and_keyword_139321, result_is__139324)
    
    # Testing the type of an if condition (line 75)
    if_condition_139326 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 75, 8), result_or_keyword_139325)
    # Assigning a type to the variable 'if_condition_139326' (line 75)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 75, 8), 'if_condition_139326', if_condition_139326)
    # SSA begins for if statement (line 75)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 76):
    
    # Assigning a Num to a Name (line 76):
    
    # Assigning a Num to a Name (line 76):
    float_139327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 76, 20), 'float')
    # Assigning a type to the variable 'angle' (line 76)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 76, 12), 'angle', float_139327)
    # SSA branch for the else part of an if statement (line 75)
    module_type_store.open_ssa_branch('else')
    
    
    # Evaluating a boolean operation
    # Getting the type of 'isString' (line 77)
    isString_139328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 77, 14), 'isString')
    
    # Getting the type of 'rotation' (line 77)
    rotation_139329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 77, 27), 'rotation')
    unicode_139330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 77, 39), 'unicode', u'vertical')
    # Applying the binary operator '==' (line 77)
    result_eq_139331 = python_operator(stypy.reporting.localization.Localization(__file__, 77, 27), '==', rotation_139329, unicode_139330)
    
    # Applying the binary operator 'and' (line 77)
    result_and_keyword_139332 = python_operator(stypy.reporting.localization.Localization(__file__, 77, 14), 'and', isString_139328, result_eq_139331)
    
    # Testing the type of an if condition (line 77)
    if_condition_139333 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 77, 13), result_and_keyword_139332)
    # Assigning a type to the variable 'if_condition_139333' (line 77)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 77, 13), 'if_condition_139333', if_condition_139333)
    # SSA begins for if statement (line 77)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 78):
    
    # Assigning a Num to a Name (line 78):
    
    # Assigning a Num to a Name (line 78):
    float_139334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 78, 20), 'float')
    # Assigning a type to the variable 'angle' (line 78)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 78, 12), 'angle', float_139334)
    # SSA branch for the else part of an if statement (line 77)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 80)
    # Processing the call arguments (line 80)
    
    # Call to format(...): (line 80)
    # Processing the call arguments (line 80)
    # Getting the type of 'rotation' (line 82)
    rotation_139338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 82, 43), 'rotation', False)
    # Processing the call keyword arguments (line 80)
    kwargs_139339 = {}
    unicode_139336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 80, 29), 'unicode', u"rotation is {0} expected either 'horizontal' 'vertical', numeric value orNone")
    # Obtaining the member 'format' of a type (line 80)
    format_139337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 80, 29), unicode_139336, 'format')
    # Calling format(args, kwargs) (line 80)
    format_call_result_139340 = invoke(stypy.reporting.localization.Localization(__file__, 80, 29), format_139337, *[rotation_139338], **kwargs_139339)
    
    # Processing the call keyword arguments (line 80)
    kwargs_139341 = {}
    # Getting the type of 'ValueError' (line 80)
    ValueError_139335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 80, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 80)
    ValueError_call_result_139342 = invoke(stypy.reporting.localization.Localization(__file__, 80, 18), ValueError_139335, *[format_call_result_139340], **kwargs_139341)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 80, 12), ValueError_call_result_139342, 'raise parameter', BaseException)
    # SSA join for if statement (line 77)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 75)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for try-except statement (line 71)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'angle' (line 84)
    angle_139343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 84, 11), 'angle')
    int_139344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 84, 19), 'int')
    # Applying the binary operator '%' (line 84)
    result_mod_139345 = python_operator(stypy.reporting.localization.Localization(__file__, 84, 11), '%', angle_139343, int_139344)
    
    # Assigning a type to the variable 'stypy_return_type' (line 84)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 84, 4), 'stypy_return_type', result_mod_139345)
    
    # ################# End of 'get_rotation(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_rotation' in the type store
    # Getting the type of 'stypy_return_type' (line 64)
    stypy_return_type_139346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 64, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_139346)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_rotation'
    return stypy_return_type_139346

# Assigning a type to the variable 'get_rotation' (line 64)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 64, 0), 'get_rotation', get_rotation)

# Call to update(...): (line 88)
# Processing the call keyword arguments (line 88)
unicode_139350 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 134, (-1)), 'unicode', u"\n    ========================== ================================================\n    Property                   Value\n    ========================== ================================================\n    alpha                      float or None\n    animated                   [True | False]\n    backgroundcolor            any matplotlib color\n    bbox                       rectangle prop dict plus key 'pad' which is a\n                               pad in points; if a boxstyle is supplied as\n                               a string, then pad is instead a fraction\n                               of the font size\n    clip_box                   a matplotlib.transform.Bbox instance\n    clip_on                    [True | False]\n    color                      any matplotlib color\n    family                     ['serif' | 'sans-serif' | 'cursive' |\n                                'fantasy' | 'monospace']\n    figure                     a matplotlib.figure.Figure instance\n    fontproperties             a matplotlib.font_manager.FontProperties\n                               instance\n    horizontalalignment or ha  ['center' | 'right' | 'left']\n    label                      any string\n    linespacing                float\n    lod                        [True | False]\n    multialignment             ['left' | 'right' | 'center' ]\n    name or fontname           string e.g.,\n                               ['Sans' | 'Courier' | 'Helvetica' ...]\n    position                   (x,y)\n    rotation                   [ angle in degrees 'vertical' | 'horizontal'\n    rotation_mode              [ None | 'anchor']\n    size or fontsize           [size in points | relative size e.g., 'smaller',\n                                                                  'x-large']\n    style or fontstyle         [ 'normal' | 'italic' | 'oblique']\n    text                       string\n    transform                  a matplotlib.transform transformation instance\n    usetex                     [True | False | None]\n    variant                    ['normal' | 'small-caps']\n    verticalalignment or va    ['center' | 'top' | 'bottom' | 'baseline' |\n                                'center_baseline' ]\n    visible                    [True | False]\n    weight or fontweight       ['normal' | 'bold' | 'heavy' | 'light' |\n                                'ultrabold' | 'ultralight']\n    wrap                       [True | False]\n    x                          float\n    y                          float\n    zorder                     any number\n    ========================== ===============================================\n    ")
keyword_139351 = unicode_139350
kwargs_139352 = {'Text': keyword_139351}
# Getting the type of 'docstring' (line 88)
docstring_139347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 88, 0), 'docstring', False)
# Obtaining the member 'interpd' of a type (line 88)
interpd_139348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 88, 0), docstring_139347, 'interpd')
# Obtaining the member 'update' of a type (line 88)
update_139349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 88, 0), interpd_139348, 'update')
# Calling update(args, kwargs) (line 88)
update_call_result_139353 = invoke(stypy.reporting.localization.Localization(__file__, 88, 0), update_139349, *[], **kwargs_139352)


@norecursion
def _get_textbox(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_get_textbox'
    module_type_store = module_type_store.open_function_context('_get_textbox', 143, 0, False)
    
    # Passed parameters checking function
    _get_textbox.stypy_localization = localization
    _get_textbox.stypy_type_of_self = None
    _get_textbox.stypy_type_store = module_type_store
    _get_textbox.stypy_function_name = '_get_textbox'
    _get_textbox.stypy_param_names_list = ['text', 'renderer']
    _get_textbox.stypy_varargs_param_name = None
    _get_textbox.stypy_kwargs_param_name = None
    _get_textbox.stypy_call_defaults = defaults
    _get_textbox.stypy_call_varargs = varargs
    _get_textbox.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_get_textbox', ['text', 'renderer'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_get_textbox', localization, ['text', 'renderer'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_get_textbox(...)' code ##################

    unicode_139354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 148, (-1)), 'unicode', u'\n    Calculate the bounding box of the text. Unlike\n    :meth:`matplotlib.text.Text.get_extents` method, The bbox size of\n    the text before the rotation is calculated.\n    ')
    
    # Assigning a List to a Name (line 150):
    
    # Assigning a List to a Name (line 150):
    
    # Assigning a List to a Name (line 150):
    
    # Obtaining an instance of the builtin type 'list' (line 150)
    list_139355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 150, 19), 'list')
    # Adding type elements to the builtin type 'list' instance (line 150)
    
    # Assigning a type to the variable 'projected_xs' (line 150)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 150, 4), 'projected_xs', list_139355)
    
    # Assigning a List to a Name (line 151):
    
    # Assigning a List to a Name (line 151):
    
    # Assigning a List to a Name (line 151):
    
    # Obtaining an instance of the builtin type 'list' (line 151)
    list_139356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 151, 19), 'list')
    # Adding type elements to the builtin type 'list' instance (line 151)
    
    # Assigning a type to the variable 'projected_ys' (line 151)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 151, 4), 'projected_ys', list_139356)
    
    # Assigning a Call to a Name (line 153):
    
    # Assigning a Call to a Name (line 153):
    
    # Assigning a Call to a Name (line 153):
    
    # Call to deg2rad(...): (line 153)
    # Processing the call arguments (line 153)
    
    # Call to get_rotation(...): (line 153)
    # Processing the call keyword arguments (line 153)
    kwargs_139361 = {}
    # Getting the type of 'text' (line 153)
    text_139359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 23), 'text', False)
    # Obtaining the member 'get_rotation' of a type (line 153)
    get_rotation_139360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 153, 23), text_139359, 'get_rotation')
    # Calling get_rotation(args, kwargs) (line 153)
    get_rotation_call_result_139362 = invoke(stypy.reporting.localization.Localization(__file__, 153, 23), get_rotation_139360, *[], **kwargs_139361)
    
    # Processing the call keyword arguments (line 153)
    kwargs_139363 = {}
    # Getting the type of 'np' (line 153)
    np_139357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 12), 'np', False)
    # Obtaining the member 'deg2rad' of a type (line 153)
    deg2rad_139358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 153, 12), np_139357, 'deg2rad')
    # Calling deg2rad(args, kwargs) (line 153)
    deg2rad_call_result_139364 = invoke(stypy.reporting.localization.Localization(__file__, 153, 12), deg2rad_139358, *[get_rotation_call_result_139362], **kwargs_139363)
    
    # Assigning a type to the variable 'theta' (line 153)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 153, 4), 'theta', deg2rad_call_result_139364)
    
    # Assigning a Call to a Name (line 154):
    
    # Assigning a Call to a Name (line 154):
    
    # Assigning a Call to a Name (line 154):
    
    # Call to rotate(...): (line 154)
    # Processing the call arguments (line 154)
    
    # Getting the type of 'theta' (line 154)
    theta_139370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 40), 'theta', False)
    # Applying the 'usub' unary operator (line 154)
    result___neg___139371 = python_operator(stypy.reporting.localization.Localization(__file__, 154, 39), 'usub', theta_139370)
    
    # Processing the call keyword arguments (line 154)
    kwargs_139372 = {}
    
    # Call to Affine2D(...): (line 154)
    # Processing the call keyword arguments (line 154)
    kwargs_139367 = {}
    # Getting the type of 'mtransforms' (line 154)
    mtransforms_139365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 9), 'mtransforms', False)
    # Obtaining the member 'Affine2D' of a type (line 154)
    Affine2D_139366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 154, 9), mtransforms_139365, 'Affine2D')
    # Calling Affine2D(args, kwargs) (line 154)
    Affine2D_call_result_139368 = invoke(stypy.reporting.localization.Localization(__file__, 154, 9), Affine2D_139366, *[], **kwargs_139367)
    
    # Obtaining the member 'rotate' of a type (line 154)
    rotate_139369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 154, 9), Affine2D_call_result_139368, 'rotate')
    # Calling rotate(args, kwargs) (line 154)
    rotate_call_result_139373 = invoke(stypy.reporting.localization.Localization(__file__, 154, 9), rotate_139369, *[result___neg___139371], **kwargs_139372)
    
    # Assigning a type to the variable 'tr' (line 154)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 154, 4), 'tr', rotate_call_result_139373)
    
    # Assigning a Call to a Tuple (line 156):
    
    # Assigning a Call to a Name:
    
    # Assigning a Call to a Name:
    
    # Call to _get_layout(...): (line 156)
    # Processing the call arguments (line 156)
    # Getting the type of 'renderer' (line 156)
    renderer_139376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 35), 'renderer', False)
    # Processing the call keyword arguments (line 156)
    kwargs_139377 = {}
    # Getting the type of 'text' (line 156)
    text_139374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 18), 'text', False)
    # Obtaining the member '_get_layout' of a type (line 156)
    _get_layout_139375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 156, 18), text_139374, '_get_layout')
    # Calling _get_layout(args, kwargs) (line 156)
    _get_layout_call_result_139378 = invoke(stypy.reporting.localization.Localization(__file__, 156, 18), _get_layout_139375, *[renderer_139376], **kwargs_139377)
    
    # Assigning a type to the variable 'call_assignment_138999' (line 156)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 156, 4), 'call_assignment_138999', _get_layout_call_result_139378)
    
    # Assigning a Call to a Name (line 156):
    
    # Assigning a Call to a Name (line 156):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_139381 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 156, 4), 'int')
    # Processing the call keyword arguments
    kwargs_139382 = {}
    # Getting the type of 'call_assignment_138999' (line 156)
    call_assignment_138999_139379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 4), 'call_assignment_138999', False)
    # Obtaining the member '__getitem__' of a type (line 156)
    getitem___139380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 156, 4), call_assignment_138999_139379, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_139383 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___139380, *[int_139381], **kwargs_139382)
    
    # Assigning a type to the variable 'call_assignment_139000' (line 156)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 156, 4), 'call_assignment_139000', getitem___call_result_139383)
    
    # Assigning a Name to a Name (line 156):
    
    # Assigning a Name to a Name (line 156):
    # Getting the type of 'call_assignment_139000' (line 156)
    call_assignment_139000_139384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 4), 'call_assignment_139000')
    # Assigning a type to the variable '_' (line 156)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 156, 4), '_', call_assignment_139000_139384)
    
    # Assigning a Call to a Name (line 156):
    
    # Assigning a Call to a Name (line 156):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_139387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 156, 4), 'int')
    # Processing the call keyword arguments
    kwargs_139388 = {}
    # Getting the type of 'call_assignment_138999' (line 156)
    call_assignment_138999_139385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 4), 'call_assignment_138999', False)
    # Obtaining the member '__getitem__' of a type (line 156)
    getitem___139386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 156, 4), call_assignment_138999_139385, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_139389 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___139386, *[int_139387], **kwargs_139388)
    
    # Assigning a type to the variable 'call_assignment_139001' (line 156)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 156, 4), 'call_assignment_139001', getitem___call_result_139389)
    
    # Assigning a Name to a Name (line 156):
    
    # Assigning a Name to a Name (line 156):
    # Getting the type of 'call_assignment_139001' (line 156)
    call_assignment_139001_139390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 4), 'call_assignment_139001')
    # Assigning a type to the variable 'parts' (line 156)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 156, 7), 'parts', call_assignment_139001_139390)
    
    # Assigning a Call to a Name (line 156):
    
    # Assigning a Call to a Name (line 156):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_139393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 156, 4), 'int')
    # Processing the call keyword arguments
    kwargs_139394 = {}
    # Getting the type of 'call_assignment_138999' (line 156)
    call_assignment_138999_139391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 4), 'call_assignment_138999', False)
    # Obtaining the member '__getitem__' of a type (line 156)
    getitem___139392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 156, 4), call_assignment_138999_139391, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_139395 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___139392, *[int_139393], **kwargs_139394)
    
    # Assigning a type to the variable 'call_assignment_139002' (line 156)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 156, 4), 'call_assignment_139002', getitem___call_result_139395)
    
    # Assigning a Name to a Name (line 156):
    
    # Assigning a Name to a Name (line 156):
    # Getting the type of 'call_assignment_139002' (line 156)
    call_assignment_139002_139396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 4), 'call_assignment_139002')
    # Assigning a type to the variable 'd' (line 156)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 156, 14), 'd', call_assignment_139002_139396)
    
    # Getting the type of 'parts' (line 158)
    parts_139397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 23), 'parts')
    # Testing the type of a for loop iterable (line 158)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 158, 4), parts_139397)
    # Getting the type of the for loop variable (line 158)
    for_loop_var_139398 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 158, 4), parts_139397)
    # Assigning a type to the variable 't' (line 158)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 158, 4), 't', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 158, 4), for_loop_var_139398))
    # Assigning a type to the variable 'wh' (line 158)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 158, 4), 'wh', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 158, 4), for_loop_var_139398))
    # Assigning a type to the variable 'x' (line 158)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 158, 4), 'x', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 158, 4), for_loop_var_139398))
    # Assigning a type to the variable 'y' (line 158)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 158, 4), 'y', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 158, 4), for_loop_var_139398))
    # SSA begins for a for statement (line 158)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Name to a Tuple (line 159):
    
    # Assigning a Subscript to a Name (line 159):
    
    # Assigning a Subscript to a Name (line 159):
    
    # Obtaining the type of the subscript
    int_139399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 159, 8), 'int')
    # Getting the type of 'wh' (line 159)
    wh_139400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 15), 'wh')
    # Obtaining the member '__getitem__' of a type (line 159)
    getitem___139401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 159, 8), wh_139400, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 159)
    subscript_call_result_139402 = invoke(stypy.reporting.localization.Localization(__file__, 159, 8), getitem___139401, int_139399)
    
    # Assigning a type to the variable 'tuple_var_assignment_139003' (line 159)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 159, 8), 'tuple_var_assignment_139003', subscript_call_result_139402)
    
    # Assigning a Subscript to a Name (line 159):
    
    # Assigning a Subscript to a Name (line 159):
    
    # Obtaining the type of the subscript
    int_139403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 159, 8), 'int')
    # Getting the type of 'wh' (line 159)
    wh_139404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 15), 'wh')
    # Obtaining the member '__getitem__' of a type (line 159)
    getitem___139405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 159, 8), wh_139404, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 159)
    subscript_call_result_139406 = invoke(stypy.reporting.localization.Localization(__file__, 159, 8), getitem___139405, int_139403)
    
    # Assigning a type to the variable 'tuple_var_assignment_139004' (line 159)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 159, 8), 'tuple_var_assignment_139004', subscript_call_result_139406)
    
    # Assigning a Name to a Name (line 159):
    
    # Assigning a Name to a Name (line 159):
    # Getting the type of 'tuple_var_assignment_139003' (line 159)
    tuple_var_assignment_139003_139407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 8), 'tuple_var_assignment_139003')
    # Assigning a type to the variable 'w' (line 159)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 159, 8), 'w', tuple_var_assignment_139003_139407)
    
    # Assigning a Name to a Name (line 159):
    
    # Assigning a Name to a Name (line 159):
    # Getting the type of 'tuple_var_assignment_139004' (line 159)
    tuple_var_assignment_139004_139408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 8), 'tuple_var_assignment_139004')
    # Assigning a type to the variable 'h' (line 159)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 159, 11), 'h', tuple_var_assignment_139004_139408)
    
    # Assigning a Call to a Tuple (line 161):
    
    # Assigning a Call to a Name:
    
    # Assigning a Call to a Name:
    
    # Call to transform_point(...): (line 161)
    # Processing the call arguments (line 161)
    
    # Obtaining an instance of the builtin type 'tuple' (line 161)
    tuple_139411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 161, 39), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 161)
    # Adding element type (line 161)
    # Getting the type of 'x' (line 161)
    x_139412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 39), 'x', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 161, 39), tuple_139411, x_139412)
    # Adding element type (line 161)
    # Getting the type of 'y' (line 161)
    y_139413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 42), 'y', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 161, 39), tuple_139411, y_139413)
    
    # Processing the call keyword arguments (line 161)
    kwargs_139414 = {}
    # Getting the type of 'tr' (line 161)
    tr_139409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 19), 'tr', False)
    # Obtaining the member 'transform_point' of a type (line 161)
    transform_point_139410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 161, 19), tr_139409, 'transform_point')
    # Calling transform_point(args, kwargs) (line 161)
    transform_point_call_result_139415 = invoke(stypy.reporting.localization.Localization(__file__, 161, 19), transform_point_139410, *[tuple_139411], **kwargs_139414)
    
    # Assigning a type to the variable 'call_assignment_139005' (line 161)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 161, 8), 'call_assignment_139005', transform_point_call_result_139415)
    
    # Assigning a Call to a Name (line 161):
    
    # Assigning a Call to a Name (line 161):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_139418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 161, 8), 'int')
    # Processing the call keyword arguments
    kwargs_139419 = {}
    # Getting the type of 'call_assignment_139005' (line 161)
    call_assignment_139005_139416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 8), 'call_assignment_139005', False)
    # Obtaining the member '__getitem__' of a type (line 161)
    getitem___139417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 161, 8), call_assignment_139005_139416, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_139420 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___139417, *[int_139418], **kwargs_139419)
    
    # Assigning a type to the variable 'call_assignment_139006' (line 161)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 161, 8), 'call_assignment_139006', getitem___call_result_139420)
    
    # Assigning a Name to a Name (line 161):
    
    # Assigning a Name to a Name (line 161):
    # Getting the type of 'call_assignment_139006' (line 161)
    call_assignment_139006_139421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 8), 'call_assignment_139006')
    # Assigning a type to the variable 'xt1' (line 161)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 161, 8), 'xt1', call_assignment_139006_139421)
    
    # Assigning a Call to a Name (line 161):
    
    # Assigning a Call to a Name (line 161):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_139424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 161, 8), 'int')
    # Processing the call keyword arguments
    kwargs_139425 = {}
    # Getting the type of 'call_assignment_139005' (line 161)
    call_assignment_139005_139422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 8), 'call_assignment_139005', False)
    # Obtaining the member '__getitem__' of a type (line 161)
    getitem___139423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 161, 8), call_assignment_139005_139422, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_139426 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___139423, *[int_139424], **kwargs_139425)
    
    # Assigning a type to the variable 'call_assignment_139007' (line 161)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 161, 8), 'call_assignment_139007', getitem___call_result_139426)
    
    # Assigning a Name to a Name (line 161):
    
    # Assigning a Name to a Name (line 161):
    # Getting the type of 'call_assignment_139007' (line 161)
    call_assignment_139007_139427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 8), 'call_assignment_139007')
    # Assigning a type to the variable 'yt1' (line 161)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 161, 13), 'yt1', call_assignment_139007_139427)
    
    # Getting the type of 'yt1' (line 162)
    yt1_139428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 8), 'yt1')
    # Getting the type of 'd' (line 162)
    d_139429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 15), 'd')
    # Applying the binary operator '-=' (line 162)
    result_isub_139430 = python_operator(stypy.reporting.localization.Localization(__file__, 162, 8), '-=', yt1_139428, d_139429)
    # Assigning a type to the variable 'yt1' (line 162)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 162, 8), 'yt1', result_isub_139430)
    
    
    # Assigning a Tuple to a Tuple (line 163):
    
    # Assigning a BinOp to a Name (line 163):
    
    # Assigning a BinOp to a Name (line 163):
    # Getting the type of 'xt1' (line 163)
    xt1_139431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 19), 'xt1')
    # Getting the type of 'w' (line 163)
    w_139432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 25), 'w')
    # Applying the binary operator '+' (line 163)
    result_add_139433 = python_operator(stypy.reporting.localization.Localization(__file__, 163, 19), '+', xt1_139431, w_139432)
    
    # Assigning a type to the variable 'tuple_assignment_139008' (line 163)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 163, 8), 'tuple_assignment_139008', result_add_139433)
    
    # Assigning a BinOp to a Name (line 163):
    
    # Assigning a BinOp to a Name (line 163):
    # Getting the type of 'yt1' (line 163)
    yt1_139434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 28), 'yt1')
    # Getting the type of 'h' (line 163)
    h_139435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 34), 'h')
    # Applying the binary operator '+' (line 163)
    result_add_139436 = python_operator(stypy.reporting.localization.Localization(__file__, 163, 28), '+', yt1_139434, h_139435)
    
    # Assigning a type to the variable 'tuple_assignment_139009' (line 163)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 163, 8), 'tuple_assignment_139009', result_add_139436)
    
    # Assigning a Name to a Name (line 163):
    
    # Assigning a Name to a Name (line 163):
    # Getting the type of 'tuple_assignment_139008' (line 163)
    tuple_assignment_139008_139437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 8), 'tuple_assignment_139008')
    # Assigning a type to the variable 'xt2' (line 163)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 163, 8), 'xt2', tuple_assignment_139008_139437)
    
    # Assigning a Name to a Name (line 163):
    
    # Assigning a Name to a Name (line 163):
    # Getting the type of 'tuple_assignment_139009' (line 163)
    tuple_assignment_139009_139438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 8), 'tuple_assignment_139009')
    # Assigning a type to the variable 'yt2' (line 163)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 163, 13), 'yt2', tuple_assignment_139009_139438)
    
    # Call to extend(...): (line 165)
    # Processing the call arguments (line 165)
    
    # Obtaining an instance of the builtin type 'list' (line 165)
    list_139441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 165, 28), 'list')
    # Adding type elements to the builtin type 'list' instance (line 165)
    # Adding element type (line 165)
    # Getting the type of 'xt1' (line 165)
    xt1_139442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 29), 'xt1', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 165, 28), list_139441, xt1_139442)
    # Adding element type (line 165)
    # Getting the type of 'xt2' (line 165)
    xt2_139443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 34), 'xt2', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 165, 28), list_139441, xt2_139443)
    
    # Processing the call keyword arguments (line 165)
    kwargs_139444 = {}
    # Getting the type of 'projected_xs' (line 165)
    projected_xs_139439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 8), 'projected_xs', False)
    # Obtaining the member 'extend' of a type (line 165)
    extend_139440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 165, 8), projected_xs_139439, 'extend')
    # Calling extend(args, kwargs) (line 165)
    extend_call_result_139445 = invoke(stypy.reporting.localization.Localization(__file__, 165, 8), extend_139440, *[list_139441], **kwargs_139444)
    
    
    # Call to extend(...): (line 166)
    # Processing the call arguments (line 166)
    
    # Obtaining an instance of the builtin type 'list' (line 166)
    list_139448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 166, 28), 'list')
    # Adding type elements to the builtin type 'list' instance (line 166)
    # Adding element type (line 166)
    # Getting the type of 'yt1' (line 166)
    yt1_139449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 29), 'yt1', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 166, 28), list_139448, yt1_139449)
    # Adding element type (line 166)
    # Getting the type of 'yt2' (line 166)
    yt2_139450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 34), 'yt2', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 166, 28), list_139448, yt2_139450)
    
    # Processing the call keyword arguments (line 166)
    kwargs_139451 = {}
    # Getting the type of 'projected_ys' (line 166)
    projected_ys_139446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 8), 'projected_ys', False)
    # Obtaining the member 'extend' of a type (line 166)
    extend_139447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 166, 8), projected_ys_139446, 'extend')
    # Calling extend(args, kwargs) (line 166)
    extend_call_result_139452 = invoke(stypy.reporting.localization.Localization(__file__, 166, 8), extend_139447, *[list_139448], **kwargs_139451)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Tuple to a Tuple (line 168):
    
    # Assigning a Call to a Name (line 168):
    
    # Assigning a Call to a Name (line 168):
    
    # Call to min(...): (line 168)
    # Processing the call arguments (line 168)
    # Getting the type of 'projected_xs' (line 168)
    projected_xs_139454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 25), 'projected_xs', False)
    # Processing the call keyword arguments (line 168)
    kwargs_139455 = {}
    # Getting the type of 'min' (line 168)
    min_139453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 21), 'min', False)
    # Calling min(args, kwargs) (line 168)
    min_call_result_139456 = invoke(stypy.reporting.localization.Localization(__file__, 168, 21), min_139453, *[projected_xs_139454], **kwargs_139455)
    
    # Assigning a type to the variable 'tuple_assignment_139010' (line 168)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 168, 4), 'tuple_assignment_139010', min_call_result_139456)
    
    # Assigning a Call to a Name (line 168):
    
    # Assigning a Call to a Name (line 168):
    
    # Call to min(...): (line 168)
    # Processing the call arguments (line 168)
    # Getting the type of 'projected_ys' (line 168)
    projected_ys_139458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 44), 'projected_ys', False)
    # Processing the call keyword arguments (line 168)
    kwargs_139459 = {}
    # Getting the type of 'min' (line 168)
    min_139457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 40), 'min', False)
    # Calling min(args, kwargs) (line 168)
    min_call_result_139460 = invoke(stypy.reporting.localization.Localization(__file__, 168, 40), min_139457, *[projected_ys_139458], **kwargs_139459)
    
    # Assigning a type to the variable 'tuple_assignment_139011' (line 168)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 168, 4), 'tuple_assignment_139011', min_call_result_139460)
    
    # Assigning a Name to a Name (line 168):
    
    # Assigning a Name to a Name (line 168):
    # Getting the type of 'tuple_assignment_139010' (line 168)
    tuple_assignment_139010_139461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 4), 'tuple_assignment_139010')
    # Assigning a type to the variable 'xt_box' (line 168)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 168, 4), 'xt_box', tuple_assignment_139010_139461)
    
    # Assigning a Name to a Name (line 168):
    
    # Assigning a Name to a Name (line 168):
    # Getting the type of 'tuple_assignment_139011' (line 168)
    tuple_assignment_139011_139462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 4), 'tuple_assignment_139011')
    # Assigning a type to the variable 'yt_box' (line 168)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 168, 12), 'yt_box', tuple_assignment_139011_139462)
    
    # Assigning a Tuple to a Tuple (line 169):
    
    # Assigning a BinOp to a Name (line 169):
    
    # Assigning a BinOp to a Name (line 169):
    
    # Call to max(...): (line 169)
    # Processing the call arguments (line 169)
    # Getting the type of 'projected_xs' (line 169)
    projected_xs_139464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 23), 'projected_xs', False)
    # Processing the call keyword arguments (line 169)
    kwargs_139465 = {}
    # Getting the type of 'max' (line 169)
    max_139463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 19), 'max', False)
    # Calling max(args, kwargs) (line 169)
    max_call_result_139466 = invoke(stypy.reporting.localization.Localization(__file__, 169, 19), max_139463, *[projected_xs_139464], **kwargs_139465)
    
    # Getting the type of 'xt_box' (line 169)
    xt_box_139467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 39), 'xt_box')
    # Applying the binary operator '-' (line 169)
    result_sub_139468 = python_operator(stypy.reporting.localization.Localization(__file__, 169, 19), '-', max_call_result_139466, xt_box_139467)
    
    # Assigning a type to the variable 'tuple_assignment_139012' (line 169)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 169, 4), 'tuple_assignment_139012', result_sub_139468)
    
    # Assigning a BinOp to a Name (line 169):
    
    # Assigning a BinOp to a Name (line 169):
    
    # Call to max(...): (line 169)
    # Processing the call arguments (line 169)
    # Getting the type of 'projected_ys' (line 169)
    projected_ys_139470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 51), 'projected_ys', False)
    # Processing the call keyword arguments (line 169)
    kwargs_139471 = {}
    # Getting the type of 'max' (line 169)
    max_139469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 47), 'max', False)
    # Calling max(args, kwargs) (line 169)
    max_call_result_139472 = invoke(stypy.reporting.localization.Localization(__file__, 169, 47), max_139469, *[projected_ys_139470], **kwargs_139471)
    
    # Getting the type of 'yt_box' (line 169)
    yt_box_139473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 67), 'yt_box')
    # Applying the binary operator '-' (line 169)
    result_sub_139474 = python_operator(stypy.reporting.localization.Localization(__file__, 169, 47), '-', max_call_result_139472, yt_box_139473)
    
    # Assigning a type to the variable 'tuple_assignment_139013' (line 169)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 169, 4), 'tuple_assignment_139013', result_sub_139474)
    
    # Assigning a Name to a Name (line 169):
    
    # Assigning a Name to a Name (line 169):
    # Getting the type of 'tuple_assignment_139012' (line 169)
    tuple_assignment_139012_139475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 4), 'tuple_assignment_139012')
    # Assigning a type to the variable 'w_box' (line 169)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 169, 4), 'w_box', tuple_assignment_139012_139475)
    
    # Assigning a Name to a Name (line 169):
    
    # Assigning a Name to a Name (line 169):
    # Getting the type of 'tuple_assignment_139013' (line 169)
    tuple_assignment_139013_139476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 4), 'tuple_assignment_139013')
    # Assigning a type to the variable 'h_box' (line 169)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 169, 11), 'h_box', tuple_assignment_139013_139476)
    
    # Assigning a Call to a Name (line 171):
    
    # Assigning a Call to a Name (line 171):
    
    # Assigning a Call to a Name (line 171):
    
    # Call to rotate(...): (line 171)
    # Processing the call arguments (line 171)
    # Getting the type of 'theta' (line 171)
    theta_139482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 39), 'theta', False)
    # Processing the call keyword arguments (line 171)
    kwargs_139483 = {}
    
    # Call to Affine2D(...): (line 171)
    # Processing the call keyword arguments (line 171)
    kwargs_139479 = {}
    # Getting the type of 'mtransforms' (line 171)
    mtransforms_139477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 9), 'mtransforms', False)
    # Obtaining the member 'Affine2D' of a type (line 171)
    Affine2D_139478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 171, 9), mtransforms_139477, 'Affine2D')
    # Calling Affine2D(args, kwargs) (line 171)
    Affine2D_call_result_139480 = invoke(stypy.reporting.localization.Localization(__file__, 171, 9), Affine2D_139478, *[], **kwargs_139479)
    
    # Obtaining the member 'rotate' of a type (line 171)
    rotate_139481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 171, 9), Affine2D_call_result_139480, 'rotate')
    # Calling rotate(args, kwargs) (line 171)
    rotate_call_result_139484 = invoke(stypy.reporting.localization.Localization(__file__, 171, 9), rotate_139481, *[theta_139482], **kwargs_139483)
    
    # Assigning a type to the variable 'tr' (line 171)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 171, 4), 'tr', rotate_call_result_139484)
    
    # Assigning a Call to a Tuple (line 173):
    
    # Assigning a Call to a Name:
    
    # Assigning a Call to a Name:
    
    # Call to transform_point(...): (line 173)
    # Processing the call arguments (line 173)
    
    # Obtaining an instance of the builtin type 'tuple' (line 173)
    tuple_139487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 173, 39), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 173)
    # Adding element type (line 173)
    # Getting the type of 'xt_box' (line 173)
    xt_box_139488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 39), 'xt_box', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 173, 39), tuple_139487, xt_box_139488)
    # Adding element type (line 173)
    # Getting the type of 'yt_box' (line 173)
    yt_box_139489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 47), 'yt_box', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 173, 39), tuple_139487, yt_box_139489)
    
    # Processing the call keyword arguments (line 173)
    kwargs_139490 = {}
    # Getting the type of 'tr' (line 173)
    tr_139485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 19), 'tr', False)
    # Obtaining the member 'transform_point' of a type (line 173)
    transform_point_139486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 173, 19), tr_139485, 'transform_point')
    # Calling transform_point(args, kwargs) (line 173)
    transform_point_call_result_139491 = invoke(stypy.reporting.localization.Localization(__file__, 173, 19), transform_point_139486, *[tuple_139487], **kwargs_139490)
    
    # Assigning a type to the variable 'call_assignment_139014' (line 173)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 173, 4), 'call_assignment_139014', transform_point_call_result_139491)
    
    # Assigning a Call to a Name (line 173):
    
    # Assigning a Call to a Name (line 173):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_139494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 173, 4), 'int')
    # Processing the call keyword arguments
    kwargs_139495 = {}
    # Getting the type of 'call_assignment_139014' (line 173)
    call_assignment_139014_139492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 4), 'call_assignment_139014', False)
    # Obtaining the member '__getitem__' of a type (line 173)
    getitem___139493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 173, 4), call_assignment_139014_139492, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_139496 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___139493, *[int_139494], **kwargs_139495)
    
    # Assigning a type to the variable 'call_assignment_139015' (line 173)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 173, 4), 'call_assignment_139015', getitem___call_result_139496)
    
    # Assigning a Name to a Name (line 173):
    
    # Assigning a Name to a Name (line 173):
    # Getting the type of 'call_assignment_139015' (line 173)
    call_assignment_139015_139497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 4), 'call_assignment_139015')
    # Assigning a type to the variable 'x_box' (line 173)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 173, 4), 'x_box', call_assignment_139015_139497)
    
    # Assigning a Call to a Name (line 173):
    
    # Assigning a Call to a Name (line 173):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_139500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 173, 4), 'int')
    # Processing the call keyword arguments
    kwargs_139501 = {}
    # Getting the type of 'call_assignment_139014' (line 173)
    call_assignment_139014_139498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 4), 'call_assignment_139014', False)
    # Obtaining the member '__getitem__' of a type (line 173)
    getitem___139499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 173, 4), call_assignment_139014_139498, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_139502 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___139499, *[int_139500], **kwargs_139501)
    
    # Assigning a type to the variable 'call_assignment_139016' (line 173)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 173, 4), 'call_assignment_139016', getitem___call_result_139502)
    
    # Assigning a Name to a Name (line 173):
    
    # Assigning a Name to a Name (line 173):
    # Getting the type of 'call_assignment_139016' (line 173)
    call_assignment_139016_139503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 4), 'call_assignment_139016')
    # Assigning a type to the variable 'y_box' (line 173)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 173, 11), 'y_box', call_assignment_139016_139503)
    
    # Obtaining an instance of the builtin type 'tuple' (line 175)
    tuple_139504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 175, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 175)
    # Adding element type (line 175)
    # Getting the type of 'x_box' (line 175)
    x_box_139505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 11), 'x_box')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 175, 11), tuple_139504, x_box_139505)
    # Adding element type (line 175)
    # Getting the type of 'y_box' (line 175)
    y_box_139506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 18), 'y_box')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 175, 11), tuple_139504, y_box_139506)
    # Adding element type (line 175)
    # Getting the type of 'w_box' (line 175)
    w_box_139507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 25), 'w_box')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 175, 11), tuple_139504, w_box_139507)
    # Adding element type (line 175)
    # Getting the type of 'h_box' (line 175)
    h_box_139508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 32), 'h_box')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 175, 11), tuple_139504, h_box_139508)
    
    # Assigning a type to the variable 'stypy_return_type' (line 175)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 175, 4), 'stypy_return_type', tuple_139504)
    
    # ################# End of '_get_textbox(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_get_textbox' in the type store
    # Getting the type of 'stypy_return_type' (line 143)
    stypy_return_type_139509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_139509)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_get_textbox'
    return stypy_return_type_139509

# Assigning a type to the variable '_get_textbox' (line 143)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 143, 0), '_get_textbox', _get_textbox)
# Declaration of the 'Text' class
# Getting the type of 'Artist' (line 178)
Artist_139510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 11), 'Artist')

class Text(Artist_139510, ):
    unicode_139511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 181, (-1)), 'unicode', u'\n    Handle storing and drawing of text in window or data coordinates.\n    ')
    
    # Assigning a Num to a Name (line 182):
    
    # Assigning a Num to a Name (line 182):
    
    # Assigning a Call to a Name (line 183):
    
    # Assigning a Call to a Name (line 183):

    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 185, 4, False)
        # Assigning a type to the variable 'self' (line 186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 186, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        Text.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.stypy__repr__.__dict__.__setitem__('stypy_function_name', 'Text.stypy__repr__')
        Text.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        Text.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        unicode_139512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 186, 15), 'unicode', u'Text(%g,%g,%s)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 186)
        tuple_139513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 186, 35), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 186)
        # Adding element type (line 186)
        # Getting the type of 'self' (line 186)
        self_139514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 35), 'self')
        # Obtaining the member '_x' of a type (line 186)
        _x_139515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 186, 35), self_139514, '_x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 186, 35), tuple_139513, _x_139515)
        # Adding element type (line 186)
        # Getting the type of 'self' (line 186)
        self_139516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 44), 'self')
        # Obtaining the member '_y' of a type (line 186)
        _y_139517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 186, 44), self_139516, '_y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 186, 35), tuple_139513, _y_139517)
        # Adding element type (line 186)
        
        # Call to repr(...): (line 186)
        # Processing the call arguments (line 186)
        # Getting the type of 'self' (line 186)
        self_139519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 58), 'self', False)
        # Obtaining the member '_text' of a type (line 186)
        _text_139520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 186, 58), self_139519, '_text')
        # Processing the call keyword arguments (line 186)
        kwargs_139521 = {}
        # Getting the type of 'repr' (line 186)
        repr_139518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 53), 'repr', False)
        # Calling repr(args, kwargs) (line 186)
        repr_call_result_139522 = invoke(stypy.reporting.localization.Localization(__file__, 186, 53), repr_139518, *[_text_139520], **kwargs_139521)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 186, 35), tuple_139513, repr_call_result_139522)
        
        # Applying the binary operator '%' (line 186)
        result_mod_139523 = python_operator(stypy.reporting.localization.Localization(__file__, 186, 15), '%', unicode_139512, tuple_139513)
        
        # Assigning a type to the variable 'stypy_return_type' (line 186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 186, 8), 'stypy_return_type', result_mod_139523)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 185)
        stypy_return_type_139524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_139524)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_139524


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_139525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 19), 'int')
        int_139526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 24), 'int')
        unicode_139527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 32), 'unicode', u'')
        # Getting the type of 'None' (line 190)
        None_139528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 23), 'None')
        unicode_139529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, 35), 'unicode', u'baseline')
        unicode_139530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 192, 37), 'unicode', u'left')
        # Getting the type of 'None' (line 193)
        None_139531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 32), 'None')
        # Getting the type of 'None' (line 194)
        None_139532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 32), 'None')
        # Getting the type of 'None' (line 195)
        None_139533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 26), 'None')
        # Getting the type of 'None' (line 196)
        None_139534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 29), 'None')
        # Getting the type of 'None' (line 197)
        None_139535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 31), 'None')
        # Getting the type of 'None' (line 198)
        None_139536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 24), 'None')
        # Getting the type of 'False' (line 199)
        False_139537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 199, 22), 'False')
        defaults = [int_139525, int_139526, unicode_139527, None_139528, unicode_139529, unicode_139530, None_139531, None_139532, None_139533, None_139534, None_139535, None_139536, False_139537]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 188, 4, False)
        # Assigning a type to the variable 'self' (line 189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 189, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.__init__', ['x', 'y', 'text', 'color', 'verticalalignment', 'horizontalalignment', 'multialignment', 'fontproperties', 'rotation', 'linespacing', 'rotation_mode', 'usetex', 'wrap'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['x', 'y', 'text', 'color', 'verticalalignment', 'horizontalalignment', 'multialignment', 'fontproperties', 'rotation', 'linespacing', 'rotation_mode', 'usetex', 'wrap'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_139538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 208, (-1)), 'unicode', u'\n        Create a :class:`~matplotlib.text.Text` instance at *x*, *y*\n        with string *text*.\n\n        Valid kwargs are\n        %(Text)s\n        ')
        
        # Call to __init__(...): (line 210)
        # Processing the call arguments (line 210)
        # Getting the type of 'self' (line 210)
        self_139541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 24), 'self', False)
        # Processing the call keyword arguments (line 210)
        kwargs_139542 = {}
        # Getting the type of 'Artist' (line 210)
        Artist_139539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 8), 'Artist', False)
        # Obtaining the member '__init__' of a type (line 210)
        init___139540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 210, 8), Artist_139539, '__init__')
        # Calling __init__(args, kwargs) (line 210)
        init___call_result_139543 = invoke(stypy.reporting.localization.Localization(__file__, 210, 8), init___139540, *[self_139541], **kwargs_139542)
        
        
        # Assigning a Tuple to a Tuple (line 211):
        
        # Assigning a Name to a Name (line 211):
        
        # Assigning a Name to a Name (line 211):
        # Getting the type of 'x' (line 211)
        x_139544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 27), 'x')
        # Assigning a type to the variable 'tuple_assignment_139017' (line 211)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 211, 8), 'tuple_assignment_139017', x_139544)
        
        # Assigning a Name to a Name (line 211):
        
        # Assigning a Name to a Name (line 211):
        # Getting the type of 'y' (line 211)
        y_139545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 30), 'y')
        # Assigning a type to the variable 'tuple_assignment_139018' (line 211)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 211, 8), 'tuple_assignment_139018', y_139545)
        
        # Assigning a Name to a Attribute (line 211):
        
        # Assigning a Name to a Attribute (line 211):
        # Getting the type of 'tuple_assignment_139017' (line 211)
        tuple_assignment_139017_139546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 8), 'tuple_assignment_139017')
        # Getting the type of 'self' (line 211)
        self_139547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 8), 'self')
        # Setting the type of the member '_x' of a type (line 211)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 211, 8), self_139547, '_x', tuple_assignment_139017_139546)
        
        # Assigning a Name to a Attribute (line 211):
        
        # Assigning a Name to a Attribute (line 211):
        # Getting the type of 'tuple_assignment_139018' (line 211)
        tuple_assignment_139018_139548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 8), 'tuple_assignment_139018')
        # Getting the type of 'self' (line 211)
        self_139549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 17), 'self')
        # Setting the type of the member '_y' of a type (line 211)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 211, 17), self_139549, '_y', tuple_assignment_139018_139548)
        
        # Type idiom detected: calculating its left and rigth part (line 213)
        # Getting the type of 'color' (line 213)
        color_139550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 11), 'color')
        # Getting the type of 'None' (line 213)
        None_139551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 20), 'None')
        
        (may_be_139552, more_types_in_union_139553) = may_be_none(color_139550, None_139551)

        if may_be_139552:

            if more_types_in_union_139553:
                # Runtime conditional SSA (line 213)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 214):
            
            # Assigning a Subscript to a Name (line 214):
            
            # Assigning a Subscript to a Name (line 214):
            
            # Obtaining the type of the subscript
            unicode_139554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 214, 29), 'unicode', u'text.color')
            # Getting the type of 'rcParams' (line 214)
            rcParams_139555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 20), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 214)
            getitem___139556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 214, 20), rcParams_139555, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 214)
            subscript_call_result_139557 = invoke(stypy.reporting.localization.Localization(__file__, 214, 20), getitem___139556, unicode_139554)
            
            # Assigning a type to the variable 'color' (line 214)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 214, 12), 'color', subscript_call_result_139557)

            if more_types_in_union_139553:
                # SSA join for if statement (line 213)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 215)
        # Getting the type of 'fontproperties' (line 215)
        fontproperties_139558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 11), 'fontproperties')
        # Getting the type of 'None' (line 215)
        None_139559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 29), 'None')
        
        (may_be_139560, more_types_in_union_139561) = may_be_none(fontproperties_139558, None_139559)

        if may_be_139560:

            if more_types_in_union_139561:
                # Runtime conditional SSA (line 215)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 216):
            
            # Assigning a Call to a Name (line 216):
            
            # Assigning a Call to a Name (line 216):
            
            # Call to FontProperties(...): (line 216)
            # Processing the call keyword arguments (line 216)
            kwargs_139563 = {}
            # Getting the type of 'FontProperties' (line 216)
            FontProperties_139562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 29), 'FontProperties', False)
            # Calling FontProperties(args, kwargs) (line 216)
            FontProperties_call_result_139564 = invoke(stypy.reporting.localization.Localization(__file__, 216, 29), FontProperties_139562, *[], **kwargs_139563)
            
            # Assigning a type to the variable 'fontproperties' (line 216)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 216, 12), 'fontproperties', FontProperties_call_result_139564)

            if more_types_in_union_139561:
                # Runtime conditional SSA for else branch (line 215)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_139560) or more_types_in_union_139561):
            
            
            # Call to isinstance(...): (line 217)
            # Processing the call arguments (line 217)
            # Getting the type of 'fontproperties' (line 217)
            fontproperties_139566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 24), 'fontproperties', False)
            # Getting the type of 'six' (line 217)
            six_139567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 40), 'six', False)
            # Obtaining the member 'string_types' of a type (line 217)
            string_types_139568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 40), six_139567, 'string_types')
            # Processing the call keyword arguments (line 217)
            kwargs_139569 = {}
            # Getting the type of 'isinstance' (line 217)
            isinstance_139565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 13), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 217)
            isinstance_call_result_139570 = invoke(stypy.reporting.localization.Localization(__file__, 217, 13), isinstance_139565, *[fontproperties_139566, string_types_139568], **kwargs_139569)
            
            # Testing the type of an if condition (line 217)
            if_condition_139571 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 217, 13), isinstance_call_result_139570)
            # Assigning a type to the variable 'if_condition_139571' (line 217)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 217, 13), 'if_condition_139571', if_condition_139571)
            # SSA begins for if statement (line 217)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 218):
            
            # Assigning a Call to a Name (line 218):
            
            # Assigning a Call to a Name (line 218):
            
            # Call to FontProperties(...): (line 218)
            # Processing the call arguments (line 218)
            # Getting the type of 'fontproperties' (line 218)
            fontproperties_139573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 44), 'fontproperties', False)
            # Processing the call keyword arguments (line 218)
            kwargs_139574 = {}
            # Getting the type of 'FontProperties' (line 218)
            FontProperties_139572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 29), 'FontProperties', False)
            # Calling FontProperties(args, kwargs) (line 218)
            FontProperties_call_result_139575 = invoke(stypy.reporting.localization.Localization(__file__, 218, 29), FontProperties_139572, *[fontproperties_139573], **kwargs_139574)
            
            # Assigning a type to the variable 'fontproperties' (line 218)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 218, 12), 'fontproperties', FontProperties_call_result_139575)
            # SSA join for if statement (line 217)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_139560 and more_types_in_union_139561):
                # SSA join for if statement (line 215)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to set_text(...): (line 220)
        # Processing the call arguments (line 220)
        # Getting the type of 'text' (line 220)
        text_139578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 22), 'text', False)
        # Processing the call keyword arguments (line 220)
        kwargs_139579 = {}
        # Getting the type of 'self' (line 220)
        self_139576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 8), 'self', False)
        # Obtaining the member 'set_text' of a type (line 220)
        set_text_139577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 220, 8), self_139576, 'set_text')
        # Calling set_text(args, kwargs) (line 220)
        set_text_call_result_139580 = invoke(stypy.reporting.localization.Localization(__file__, 220, 8), set_text_139577, *[text_139578], **kwargs_139579)
        
        
        # Call to set_color(...): (line 221)
        # Processing the call arguments (line 221)
        # Getting the type of 'color' (line 221)
        color_139583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 23), 'color', False)
        # Processing the call keyword arguments (line 221)
        kwargs_139584 = {}
        # Getting the type of 'self' (line 221)
        self_139581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 8), 'self', False)
        # Obtaining the member 'set_color' of a type (line 221)
        set_color_139582 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 8), self_139581, 'set_color')
        # Calling set_color(args, kwargs) (line 221)
        set_color_call_result_139585 = invoke(stypy.reporting.localization.Localization(__file__, 221, 8), set_color_139582, *[color_139583], **kwargs_139584)
        
        
        # Call to set_usetex(...): (line 222)
        # Processing the call arguments (line 222)
        # Getting the type of 'usetex' (line 222)
        usetex_139588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 24), 'usetex', False)
        # Processing the call keyword arguments (line 222)
        kwargs_139589 = {}
        # Getting the type of 'self' (line 222)
        self_139586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 8), 'self', False)
        # Obtaining the member 'set_usetex' of a type (line 222)
        set_usetex_139587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 222, 8), self_139586, 'set_usetex')
        # Calling set_usetex(args, kwargs) (line 222)
        set_usetex_call_result_139590 = invoke(stypy.reporting.localization.Localization(__file__, 222, 8), set_usetex_139587, *[usetex_139588], **kwargs_139589)
        
        
        # Call to set_wrap(...): (line 223)
        # Processing the call arguments (line 223)
        # Getting the type of 'wrap' (line 223)
        wrap_139593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 22), 'wrap', False)
        # Processing the call keyword arguments (line 223)
        kwargs_139594 = {}
        # Getting the type of 'self' (line 223)
        self_139591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 8), 'self', False)
        # Obtaining the member 'set_wrap' of a type (line 223)
        set_wrap_139592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 223, 8), self_139591, 'set_wrap')
        # Calling set_wrap(args, kwargs) (line 223)
        set_wrap_call_result_139595 = invoke(stypy.reporting.localization.Localization(__file__, 223, 8), set_wrap_139592, *[wrap_139593], **kwargs_139594)
        
        
        # Assigning a Name to a Attribute (line 224):
        
        # Assigning a Name to a Attribute (line 224):
        
        # Assigning a Name to a Attribute (line 224):
        # Getting the type of 'verticalalignment' (line 224)
        verticalalignment_139596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 34), 'verticalalignment')
        # Getting the type of 'self' (line 224)
        self_139597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 8), 'self')
        # Setting the type of the member '_verticalalignment' of a type (line 224)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 224, 8), self_139597, '_verticalalignment', verticalalignment_139596)
        
        # Assigning a Name to a Attribute (line 225):
        
        # Assigning a Name to a Attribute (line 225):
        
        # Assigning a Name to a Attribute (line 225):
        # Getting the type of 'horizontalalignment' (line 225)
        horizontalalignment_139598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 36), 'horizontalalignment')
        # Getting the type of 'self' (line 225)
        self_139599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 8), 'self')
        # Setting the type of the member '_horizontalalignment' of a type (line 225)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 225, 8), self_139599, '_horizontalalignment', horizontalalignment_139598)
        
        # Assigning a Name to a Attribute (line 226):
        
        # Assigning a Name to a Attribute (line 226):
        
        # Assigning a Name to a Attribute (line 226):
        # Getting the type of 'multialignment' (line 226)
        multialignment_139600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 31), 'multialignment')
        # Getting the type of 'self' (line 226)
        self_139601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 8), 'self')
        # Setting the type of the member '_multialignment' of a type (line 226)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 226, 8), self_139601, '_multialignment', multialignment_139600)
        
        # Assigning a Name to a Attribute (line 227):
        
        # Assigning a Name to a Attribute (line 227):
        
        # Assigning a Name to a Attribute (line 227):
        # Getting the type of 'rotation' (line 227)
        rotation_139602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 25), 'rotation')
        # Getting the type of 'self' (line 227)
        self_139603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 8), 'self')
        # Setting the type of the member '_rotation' of a type (line 227)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 227, 8), self_139603, '_rotation', rotation_139602)
        
        # Assigning a Name to a Attribute (line 228):
        
        # Assigning a Name to a Attribute (line 228):
        
        # Assigning a Name to a Attribute (line 228):
        # Getting the type of 'fontproperties' (line 228)
        fontproperties_139604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 31), 'fontproperties')
        # Getting the type of 'self' (line 228)
        self_139605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 8), 'self')
        # Setting the type of the member '_fontproperties' of a type (line 228)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 228, 8), self_139605, '_fontproperties', fontproperties_139604)
        
        # Assigning a Name to a Attribute (line 229):
        
        # Assigning a Name to a Attribute (line 229):
        
        # Assigning a Name to a Attribute (line 229):
        # Getting the type of 'None' (line 229)
        None_139606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 27), 'None')
        # Getting the type of 'self' (line 229)
        self_139607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 8), 'self')
        # Setting the type of the member '_bbox_patch' of a type (line 229)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 229, 8), self_139607, '_bbox_patch', None_139606)
        
        # Assigning a Name to a Attribute (line 230):
        
        # Assigning a Name to a Attribute (line 230):
        
        # Assigning a Name to a Attribute (line 230):
        # Getting the type of 'None' (line 230)
        None_139608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 25), 'None')
        # Getting the type of 'self' (line 230)
        self_139609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 8), 'self')
        # Setting the type of the member '_renderer' of a type (line 230)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 230, 8), self_139609, '_renderer', None_139608)
        
        # Type idiom detected: calculating its left and rigth part (line 231)
        # Getting the type of 'linespacing' (line 231)
        linespacing_139610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 11), 'linespacing')
        # Getting the type of 'None' (line 231)
        None_139611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 26), 'None')
        
        (may_be_139612, more_types_in_union_139613) = may_be_none(linespacing_139610, None_139611)

        if may_be_139612:

            if more_types_in_union_139613:
                # Runtime conditional SSA (line 231)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Num to a Name (line 232):
            
            # Assigning a Num to a Name (line 232):
            
            # Assigning a Num to a Name (line 232):
            float_139614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 232, 26), 'float')
            # Assigning a type to the variable 'linespacing' (line 232)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 232, 12), 'linespacing', float_139614)

            if more_types_in_union_139613:
                # SSA join for if statement (line 231)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 233):
        
        # Assigning a Name to a Attribute (line 233):
        
        # Assigning a Name to a Attribute (line 233):
        # Getting the type of 'linespacing' (line 233)
        linespacing_139615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 28), 'linespacing')
        # Getting the type of 'self' (line 233)
        self_139616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 8), 'self')
        # Setting the type of the member '_linespacing' of a type (line 233)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 233, 8), self_139616, '_linespacing', linespacing_139615)
        
        # Call to set_rotation_mode(...): (line 234)
        # Processing the call arguments (line 234)
        # Getting the type of 'rotation_mode' (line 234)
        rotation_mode_139619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 234, 31), 'rotation_mode', False)
        # Processing the call keyword arguments (line 234)
        kwargs_139620 = {}
        # Getting the type of 'self' (line 234)
        self_139617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 234, 8), 'self', False)
        # Obtaining the member 'set_rotation_mode' of a type (line 234)
        set_rotation_mode_139618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 234, 8), self_139617, 'set_rotation_mode')
        # Calling set_rotation_mode(args, kwargs) (line 234)
        set_rotation_mode_call_result_139621 = invoke(stypy.reporting.localization.Localization(__file__, 234, 8), set_rotation_mode_139618, *[rotation_mode_139619], **kwargs_139620)
        
        
        # Call to update(...): (line 235)
        # Processing the call arguments (line 235)
        # Getting the type of 'kwargs' (line 235)
        kwargs_139624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 20), 'kwargs', False)
        # Processing the call keyword arguments (line 235)
        kwargs_139625 = {}
        # Getting the type of 'self' (line 235)
        self_139622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 8), 'self', False)
        # Obtaining the member 'update' of a type (line 235)
        update_139623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 235, 8), self_139622, 'update')
        # Calling update(args, kwargs) (line 235)
        update_call_result_139626 = invoke(stypy.reporting.localization.Localization(__file__, 235, 8), update_139623, *[kwargs_139624], **kwargs_139625)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def update(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'update'
        module_type_store = module_type_store.open_function_context('update', 237, 4, False)
        # Assigning a type to the variable 'self' (line 238)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 238, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.update.__dict__.__setitem__('stypy_localization', localization)
        Text.update.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.update.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.update.__dict__.__setitem__('stypy_function_name', 'Text.update')
        Text.update.__dict__.__setitem__('stypy_param_names_list', ['kwargs'])
        Text.update.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.update.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.update.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.update.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.update.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.update.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.update', ['kwargs'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update', localization, ['kwargs'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update(...)' code ##################

        unicode_139627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 240, (-1)), 'unicode', u'\n        Update properties from a dictionary.\n        ')
        
        # Assigning a Call to a Name (line 242):
        
        # Assigning a Call to a Name (line 242):
        
        # Assigning a Call to a Name (line 242):
        
        # Call to object(...): (line 242)
        # Processing the call keyword arguments (line 242)
        kwargs_139629 = {}
        # Getting the type of 'object' (line 242)
        object_139628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 19), 'object', False)
        # Calling object(args, kwargs) (line 242)
        object_call_result_139630 = invoke(stypy.reporting.localization.Localization(__file__, 242, 19), object_139628, *[], **kwargs_139629)
        
        # Assigning a type to the variable 'sentinel' (line 242)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 242, 8), 'sentinel', object_call_result_139630)
        
        # Assigning a Call to a Name (line 243):
        
        # Assigning a Call to a Name (line 243):
        
        # Assigning a Call to a Name (line 243):
        
        # Call to pop(...): (line 243)
        # Processing the call arguments (line 243)
        unicode_139633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 243, 26), 'unicode', u'bbox')
        # Getting the type of 'sentinel' (line 243)
        sentinel_139634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 34), 'sentinel', False)
        # Processing the call keyword arguments (line 243)
        kwargs_139635 = {}
        # Getting the type of 'kwargs' (line 243)
        kwargs_139631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 15), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 243)
        pop_139632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 243, 15), kwargs_139631, 'pop')
        # Calling pop(args, kwargs) (line 243)
        pop_call_result_139636 = invoke(stypy.reporting.localization.Localization(__file__, 243, 15), pop_139632, *[unicode_139633, sentinel_139634], **kwargs_139635)
        
        # Assigning a type to the variable 'bbox' (line 243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 243, 8), 'bbox', pop_call_result_139636)
        
        # Call to update(...): (line 244)
        # Processing the call arguments (line 244)
        # Getting the type of 'kwargs' (line 244)
        kwargs_139643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 33), 'kwargs', False)
        # Processing the call keyword arguments (line 244)
        kwargs_139644 = {}
        
        # Call to super(...): (line 244)
        # Processing the call arguments (line 244)
        # Getting the type of 'Text' (line 244)
        Text_139638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 14), 'Text', False)
        # Getting the type of 'self' (line 244)
        self_139639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 20), 'self', False)
        # Processing the call keyword arguments (line 244)
        kwargs_139640 = {}
        # Getting the type of 'super' (line 244)
        super_139637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 8), 'super', False)
        # Calling super(args, kwargs) (line 244)
        super_call_result_139641 = invoke(stypy.reporting.localization.Localization(__file__, 244, 8), super_139637, *[Text_139638, self_139639], **kwargs_139640)
        
        # Obtaining the member 'update' of a type (line 244)
        update_139642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 244, 8), super_call_result_139641, 'update')
        # Calling update(args, kwargs) (line 244)
        update_call_result_139645 = invoke(stypy.reporting.localization.Localization(__file__, 244, 8), update_139642, *[kwargs_139643], **kwargs_139644)
        
        
        
        # Getting the type of 'bbox' (line 245)
        bbox_139646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 11), 'bbox')
        # Getting the type of 'sentinel' (line 245)
        sentinel_139647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 23), 'sentinel')
        # Applying the binary operator 'isnot' (line 245)
        result_is_not_139648 = python_operator(stypy.reporting.localization.Localization(__file__, 245, 11), 'isnot', bbox_139646, sentinel_139647)
        
        # Testing the type of an if condition (line 245)
        if_condition_139649 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 245, 8), result_is_not_139648)
        # Assigning a type to the variable 'if_condition_139649' (line 245)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 245, 8), 'if_condition_139649', if_condition_139649)
        # SSA begins for if statement (line 245)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_bbox(...): (line 246)
        # Processing the call arguments (line 246)
        # Getting the type of 'bbox' (line 246)
        bbox_139652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 26), 'bbox', False)
        # Processing the call keyword arguments (line 246)
        kwargs_139653 = {}
        # Getting the type of 'self' (line 246)
        self_139650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 12), 'self', False)
        # Obtaining the member 'set_bbox' of a type (line 246)
        set_bbox_139651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 246, 12), self_139650, 'set_bbox')
        # Calling set_bbox(args, kwargs) (line 246)
        set_bbox_call_result_139654 = invoke(stypy.reporting.localization.Localization(__file__, 246, 12), set_bbox_139651, *[bbox_139652], **kwargs_139653)
        
        # SSA join for if statement (line 245)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'update(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update' in the type store
        # Getting the type of 'stypy_return_type' (line 237)
        stypy_return_type_139655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_139655)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update'
        return stypy_return_type_139655


    @norecursion
    def __getstate__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__getstate__'
        module_type_store = module_type_store.open_function_context('__getstate__', 248, 4, False)
        # Assigning a type to the variable 'self' (line 249)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 249, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.__getstate__.__dict__.__setitem__('stypy_localization', localization)
        Text.__getstate__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.__getstate__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.__getstate__.__dict__.__setitem__('stypy_function_name', 'Text.__getstate__')
        Text.__getstate__.__dict__.__setitem__('stypy_param_names_list', [])
        Text.__getstate__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.__getstate__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.__getstate__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.__getstate__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.__getstate__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.__getstate__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.__getstate__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__getstate__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__getstate__(...)' code ##################

        
        # Assigning a Call to a Name (line 249):
        
        # Assigning a Call to a Name (line 249):
        
        # Assigning a Call to a Name (line 249):
        
        # Call to __getstate__(...): (line 249)
        # Processing the call keyword arguments (line 249)
        kwargs_139662 = {}
        
        # Call to super(...): (line 249)
        # Processing the call arguments (line 249)
        # Getting the type of 'Text' (line 249)
        Text_139657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 18), 'Text', False)
        # Getting the type of 'self' (line 249)
        self_139658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 24), 'self', False)
        # Processing the call keyword arguments (line 249)
        kwargs_139659 = {}
        # Getting the type of 'super' (line 249)
        super_139656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 12), 'super', False)
        # Calling super(args, kwargs) (line 249)
        super_call_result_139660 = invoke(stypy.reporting.localization.Localization(__file__, 249, 12), super_139656, *[Text_139657, self_139658], **kwargs_139659)
        
        # Obtaining the member '__getstate__' of a type (line 249)
        getstate___139661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 249, 12), super_call_result_139660, '__getstate__')
        # Calling __getstate__(args, kwargs) (line 249)
        getstate___call_result_139663 = invoke(stypy.reporting.localization.Localization(__file__, 249, 12), getstate___139661, *[], **kwargs_139662)
        
        # Assigning a type to the variable 'd' (line 249)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 249, 8), 'd', getstate___call_result_139663)
        
        # Assigning a Name to a Subscript (line 251):
        
        # Assigning a Name to a Subscript (line 251):
        
        # Assigning a Name to a Subscript (line 251):
        # Getting the type of 'None' (line 251)
        None_139664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 25), 'None')
        # Getting the type of 'd' (line 251)
        d_139665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 8), 'd')
        unicode_139666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 251, 10), 'unicode', u'_renderer')
        # Storing an element on a container (line 251)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 251, 8), d_139665, (unicode_139666, None_139664))
        # Getting the type of 'd' (line 252)
        d_139667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 15), 'd')
        # Assigning a type to the variable 'stypy_return_type' (line 252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 252, 8), 'stypy_return_type', d_139667)
        
        # ################# End of '__getstate__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__getstate__' in the type store
        # Getting the type of 'stypy_return_type' (line 248)
        stypy_return_type_139668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_139668)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__getstate__'
        return stypy_return_type_139668


    @norecursion
    def contains(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'contains'
        module_type_store = module_type_store.open_function_context('contains', 254, 4, False)
        # Assigning a type to the variable 'self' (line 255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 255, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.contains.__dict__.__setitem__('stypy_localization', localization)
        Text.contains.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.contains.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.contains.__dict__.__setitem__('stypy_function_name', 'Text.contains')
        Text.contains.__dict__.__setitem__('stypy_param_names_list', ['mouseevent'])
        Text.contains.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.contains.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.contains.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.contains.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.contains.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.contains.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.contains', ['mouseevent'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'contains', localization, ['mouseevent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'contains(...)' code ##################

        unicode_139669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 261, (-1)), 'unicode', u'Test whether the mouse event occurred in the patch.\n\n        In the case of text, a hit is true anywhere in the\n        axis-aligned bounding-box containing the text.\n\n        Returns True or False.\n        ')
        
        
        # Call to callable(...): (line 262)
        # Processing the call arguments (line 262)
        # Getting the type of 'self' (line 262)
        self_139671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 262, 20), 'self', False)
        # Obtaining the member '_contains' of a type (line 262)
        _contains_139672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 262, 20), self_139671, '_contains')
        # Processing the call keyword arguments (line 262)
        kwargs_139673 = {}
        # Getting the type of 'callable' (line 262)
        callable_139670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 262, 11), 'callable', False)
        # Calling callable(args, kwargs) (line 262)
        callable_call_result_139674 = invoke(stypy.reporting.localization.Localization(__file__, 262, 11), callable_139670, *[_contains_139672], **kwargs_139673)
        
        # Testing the type of an if condition (line 262)
        if_condition_139675 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 262, 8), callable_call_result_139674)
        # Assigning a type to the variable 'if_condition_139675' (line 262)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 262, 8), 'if_condition_139675', if_condition_139675)
        # SSA begins for if statement (line 262)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _contains(...): (line 263)
        # Processing the call arguments (line 263)
        # Getting the type of 'self' (line 263)
        self_139678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 34), 'self', False)
        # Getting the type of 'mouseevent' (line 263)
        mouseevent_139679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 40), 'mouseevent', False)
        # Processing the call keyword arguments (line 263)
        kwargs_139680 = {}
        # Getting the type of 'self' (line 263)
        self_139676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 19), 'self', False)
        # Obtaining the member '_contains' of a type (line 263)
        _contains_139677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 263, 19), self_139676, '_contains')
        # Calling _contains(args, kwargs) (line 263)
        _contains_call_result_139681 = invoke(stypy.reporting.localization.Localization(__file__, 263, 19), _contains_139677, *[self_139678, mouseevent_139679], **kwargs_139680)
        
        # Assigning a type to the variable 'stypy_return_type' (line 263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 263, 12), 'stypy_return_type', _contains_call_result_139681)
        # SSA join for if statement (line 262)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        
        # Call to get_visible(...): (line 265)
        # Processing the call keyword arguments (line 265)
        kwargs_139684 = {}
        # Getting the type of 'self' (line 265)
        self_139682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 15), 'self', False)
        # Obtaining the member 'get_visible' of a type (line 265)
        get_visible_139683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 265, 15), self_139682, 'get_visible')
        # Calling get_visible(args, kwargs) (line 265)
        get_visible_call_result_139685 = invoke(stypy.reporting.localization.Localization(__file__, 265, 15), get_visible_139683, *[], **kwargs_139684)
        
        # Applying the 'not' unary operator (line 265)
        result_not__139686 = python_operator(stypy.reporting.localization.Localization(__file__, 265, 11), 'not', get_visible_call_result_139685)
        
        
        # Getting the type of 'self' (line 265)
        self_139687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 37), 'self')
        # Obtaining the member '_renderer' of a type (line 265)
        _renderer_139688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 265, 37), self_139687, '_renderer')
        # Getting the type of 'None' (line 265)
        None_139689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 55), 'None')
        # Applying the binary operator 'is' (line 265)
        result_is__139690 = python_operator(stypy.reporting.localization.Localization(__file__, 265, 37), 'is', _renderer_139688, None_139689)
        
        # Applying the binary operator 'or' (line 265)
        result_or_keyword_139691 = python_operator(stypy.reporting.localization.Localization(__file__, 265, 11), 'or', result_not__139686, result_is__139690)
        
        # Testing the type of an if condition (line 265)
        if_condition_139692 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 265, 8), result_or_keyword_139691)
        # Assigning a type to the variable 'if_condition_139692' (line 265)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 265, 8), 'if_condition_139692', if_condition_139692)
        # SSA begins for if statement (line 265)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 266)
        tuple_139693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 266, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 266)
        # Adding element type (line 266)
        # Getting the type of 'False' (line 266)
        False_139694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 266, 19), 'False')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 266, 19), tuple_139693, False_139694)
        # Adding element type (line 266)
        
        # Obtaining an instance of the builtin type 'dict' (line 266)
        dict_139695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 266, 26), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 266)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 266, 19), tuple_139693, dict_139695)
        
        # Assigning a type to the variable 'stypy_return_type' (line 266)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 266, 12), 'stypy_return_type', tuple_139693)
        # SSA join for if statement (line 265)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Tuple (line 268):
        
        # Assigning a Subscript to a Name (line 268):
        
        # Assigning a Subscript to a Name (line 268):
        
        # Obtaining the type of the subscript
        int_139696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 268, 8), 'int')
        
        # Call to get_window_extent(...): (line 268)
        # Processing the call keyword arguments (line 268)
        kwargs_139699 = {}
        # Getting the type of 'self' (line 268)
        self_139697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 21), 'self', False)
        # Obtaining the member 'get_window_extent' of a type (line 268)
        get_window_extent_139698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 268, 21), self_139697, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 268)
        get_window_extent_call_result_139700 = invoke(stypy.reporting.localization.Localization(__file__, 268, 21), get_window_extent_139698, *[], **kwargs_139699)
        
        # Obtaining the member 'bounds' of a type (line 268)
        bounds_139701 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 268, 21), get_window_extent_call_result_139700, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 268)
        getitem___139702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 268, 8), bounds_139701, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 268)
        subscript_call_result_139703 = invoke(stypy.reporting.localization.Localization(__file__, 268, 8), getitem___139702, int_139696)
        
        # Assigning a type to the variable 'tuple_var_assignment_139019' (line 268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 268, 8), 'tuple_var_assignment_139019', subscript_call_result_139703)
        
        # Assigning a Subscript to a Name (line 268):
        
        # Assigning a Subscript to a Name (line 268):
        
        # Obtaining the type of the subscript
        int_139704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 268, 8), 'int')
        
        # Call to get_window_extent(...): (line 268)
        # Processing the call keyword arguments (line 268)
        kwargs_139707 = {}
        # Getting the type of 'self' (line 268)
        self_139705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 21), 'self', False)
        # Obtaining the member 'get_window_extent' of a type (line 268)
        get_window_extent_139706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 268, 21), self_139705, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 268)
        get_window_extent_call_result_139708 = invoke(stypy.reporting.localization.Localization(__file__, 268, 21), get_window_extent_139706, *[], **kwargs_139707)
        
        # Obtaining the member 'bounds' of a type (line 268)
        bounds_139709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 268, 21), get_window_extent_call_result_139708, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 268)
        getitem___139710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 268, 8), bounds_139709, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 268)
        subscript_call_result_139711 = invoke(stypy.reporting.localization.Localization(__file__, 268, 8), getitem___139710, int_139704)
        
        # Assigning a type to the variable 'tuple_var_assignment_139020' (line 268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 268, 8), 'tuple_var_assignment_139020', subscript_call_result_139711)
        
        # Assigning a Subscript to a Name (line 268):
        
        # Assigning a Subscript to a Name (line 268):
        
        # Obtaining the type of the subscript
        int_139712 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 268, 8), 'int')
        
        # Call to get_window_extent(...): (line 268)
        # Processing the call keyword arguments (line 268)
        kwargs_139715 = {}
        # Getting the type of 'self' (line 268)
        self_139713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 21), 'self', False)
        # Obtaining the member 'get_window_extent' of a type (line 268)
        get_window_extent_139714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 268, 21), self_139713, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 268)
        get_window_extent_call_result_139716 = invoke(stypy.reporting.localization.Localization(__file__, 268, 21), get_window_extent_139714, *[], **kwargs_139715)
        
        # Obtaining the member 'bounds' of a type (line 268)
        bounds_139717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 268, 21), get_window_extent_call_result_139716, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 268)
        getitem___139718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 268, 8), bounds_139717, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 268)
        subscript_call_result_139719 = invoke(stypy.reporting.localization.Localization(__file__, 268, 8), getitem___139718, int_139712)
        
        # Assigning a type to the variable 'tuple_var_assignment_139021' (line 268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 268, 8), 'tuple_var_assignment_139021', subscript_call_result_139719)
        
        # Assigning a Subscript to a Name (line 268):
        
        # Assigning a Subscript to a Name (line 268):
        
        # Obtaining the type of the subscript
        int_139720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 268, 8), 'int')
        
        # Call to get_window_extent(...): (line 268)
        # Processing the call keyword arguments (line 268)
        kwargs_139723 = {}
        # Getting the type of 'self' (line 268)
        self_139721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 21), 'self', False)
        # Obtaining the member 'get_window_extent' of a type (line 268)
        get_window_extent_139722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 268, 21), self_139721, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 268)
        get_window_extent_call_result_139724 = invoke(stypy.reporting.localization.Localization(__file__, 268, 21), get_window_extent_139722, *[], **kwargs_139723)
        
        # Obtaining the member 'bounds' of a type (line 268)
        bounds_139725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 268, 21), get_window_extent_call_result_139724, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 268)
        getitem___139726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 268, 8), bounds_139725, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 268)
        subscript_call_result_139727 = invoke(stypy.reporting.localization.Localization(__file__, 268, 8), getitem___139726, int_139720)
        
        # Assigning a type to the variable 'tuple_var_assignment_139022' (line 268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 268, 8), 'tuple_var_assignment_139022', subscript_call_result_139727)
        
        # Assigning a Name to a Name (line 268):
        
        # Assigning a Name to a Name (line 268):
        # Getting the type of 'tuple_var_assignment_139019' (line 268)
        tuple_var_assignment_139019_139728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 8), 'tuple_var_assignment_139019')
        # Assigning a type to the variable 'l' (line 268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 268, 8), 'l', tuple_var_assignment_139019_139728)
        
        # Assigning a Name to a Name (line 268):
        
        # Assigning a Name to a Name (line 268):
        # Getting the type of 'tuple_var_assignment_139020' (line 268)
        tuple_var_assignment_139020_139729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 8), 'tuple_var_assignment_139020')
        # Assigning a type to the variable 'b' (line 268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 268, 11), 'b', tuple_var_assignment_139020_139729)
        
        # Assigning a Name to a Name (line 268):
        
        # Assigning a Name to a Name (line 268):
        # Getting the type of 'tuple_var_assignment_139021' (line 268)
        tuple_var_assignment_139021_139730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 8), 'tuple_var_assignment_139021')
        # Assigning a type to the variable 'w' (line 268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 268, 14), 'w', tuple_var_assignment_139021_139730)
        
        # Assigning a Name to a Name (line 268):
        
        # Assigning a Name to a Name (line 268):
        # Getting the type of 'tuple_var_assignment_139022' (line 268)
        tuple_var_assignment_139022_139731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 8), 'tuple_var_assignment_139022')
        # Assigning a type to the variable 'h' (line 268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 268, 17), 'h', tuple_var_assignment_139022_139731)
        
        # Assigning a Tuple to a Tuple (line 269):
        
        # Assigning a BinOp to a Name (line 269):
        
        # Assigning a BinOp to a Name (line 269):
        # Getting the type of 'l' (line 269)
        l_139732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 15), 'l')
        # Getting the type of 'w' (line 269)
        w_139733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 19), 'w')
        # Applying the binary operator '+' (line 269)
        result_add_139734 = python_operator(stypy.reporting.localization.Localization(__file__, 269, 15), '+', l_139732, w_139733)
        
        # Assigning a type to the variable 'tuple_assignment_139023' (line 269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 269, 8), 'tuple_assignment_139023', result_add_139734)
        
        # Assigning a BinOp to a Name (line 269):
        
        # Assigning a BinOp to a Name (line 269):
        # Getting the type of 'b' (line 269)
        b_139735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 22), 'b')
        # Getting the type of 'h' (line 269)
        h_139736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 26), 'h')
        # Applying the binary operator '+' (line 269)
        result_add_139737 = python_operator(stypy.reporting.localization.Localization(__file__, 269, 22), '+', b_139735, h_139736)
        
        # Assigning a type to the variable 'tuple_assignment_139024' (line 269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 269, 8), 'tuple_assignment_139024', result_add_139737)
        
        # Assigning a Name to a Name (line 269):
        
        # Assigning a Name to a Name (line 269):
        # Getting the type of 'tuple_assignment_139023' (line 269)
        tuple_assignment_139023_139738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 8), 'tuple_assignment_139023')
        # Assigning a type to the variable 'r' (line 269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 269, 8), 'r', tuple_assignment_139023_139738)
        
        # Assigning a Name to a Name (line 269):
        
        # Assigning a Name to a Name (line 269):
        # Getting the type of 'tuple_assignment_139024' (line 269)
        tuple_assignment_139024_139739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 8), 'tuple_assignment_139024')
        # Assigning a type to the variable 't' (line 269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 269, 11), 't', tuple_assignment_139024_139739)
        
        # Assigning a Tuple to a Tuple (line 271):
        
        # Assigning a Attribute to a Name (line 271):
        
        # Assigning a Attribute to a Name (line 271):
        # Getting the type of 'mouseevent' (line 271)
        mouseevent_139740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 15), 'mouseevent')
        # Obtaining the member 'x' of a type (line 271)
        x_139741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 271, 15), mouseevent_139740, 'x')
        # Assigning a type to the variable 'tuple_assignment_139025' (line 271)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 271, 8), 'tuple_assignment_139025', x_139741)
        
        # Assigning a Attribute to a Name (line 271):
        
        # Assigning a Attribute to a Name (line 271):
        # Getting the type of 'mouseevent' (line 271)
        mouseevent_139742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 29), 'mouseevent')
        # Obtaining the member 'y' of a type (line 271)
        y_139743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 271, 29), mouseevent_139742, 'y')
        # Assigning a type to the variable 'tuple_assignment_139026' (line 271)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 271, 8), 'tuple_assignment_139026', y_139743)
        
        # Assigning a Name to a Name (line 271):
        
        # Assigning a Name to a Name (line 271):
        # Getting the type of 'tuple_assignment_139025' (line 271)
        tuple_assignment_139025_139744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 8), 'tuple_assignment_139025')
        # Assigning a type to the variable 'x' (line 271)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 271, 8), 'x', tuple_assignment_139025_139744)
        
        # Assigning a Name to a Name (line 271):
        
        # Assigning a Name to a Name (line 271):
        # Getting the type of 'tuple_assignment_139026' (line 271)
        tuple_assignment_139026_139745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 8), 'tuple_assignment_139026')
        # Assigning a type to the variable 'y' (line 271)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 271, 11), 'y', tuple_assignment_139026_139745)
        
        # Assigning a BoolOp to a Name (line 272):
        
        # Assigning a BoolOp to a Name (line 272):
        
        # Assigning a BoolOp to a Name (line 272):
        
        # Evaluating a boolean operation
        
        # Getting the type of 'l' (line 272)
        l_139746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 18), 'l')
        # Getting the type of 'x' (line 272)
        x_139747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 23), 'x')
        # Applying the binary operator '<=' (line 272)
        result_le_139748 = python_operator(stypy.reporting.localization.Localization(__file__, 272, 18), '<=', l_139746, x_139747)
        # Getting the type of 'r' (line 272)
        r_139749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 28), 'r')
        # Applying the binary operator '<=' (line 272)
        result_le_139750 = python_operator(stypy.reporting.localization.Localization(__file__, 272, 18), '<=', x_139747, r_139749)
        # Applying the binary operator '&' (line 272)
        result_and__139751 = python_operator(stypy.reporting.localization.Localization(__file__, 272, 18), '&', result_le_139748, result_le_139750)
        
        
        # Getting the type of 'b' (line 272)
        b_139752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 34), 'b')
        # Getting the type of 'y' (line 272)
        y_139753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 39), 'y')
        # Applying the binary operator '<=' (line 272)
        result_le_139754 = python_operator(stypy.reporting.localization.Localization(__file__, 272, 34), '<=', b_139752, y_139753)
        # Getting the type of 't' (line 272)
        t_139755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 44), 't')
        # Applying the binary operator '<=' (line 272)
        result_le_139756 = python_operator(stypy.reporting.localization.Localization(__file__, 272, 34), '<=', y_139753, t_139755)
        # Applying the binary operator '&' (line 272)
        result_and__139757 = python_operator(stypy.reporting.localization.Localization(__file__, 272, 34), '&', result_le_139754, result_le_139756)
        
        # Applying the binary operator 'and' (line 272)
        result_and_keyword_139758 = python_operator(stypy.reporting.localization.Localization(__file__, 272, 18), 'and', result_and__139751, result_and__139757)
        
        # Assigning a type to the variable 'inside' (line 272)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 272, 8), 'inside', result_and_keyword_139758)
        
        # Assigning a Dict to a Name (line 273):
        
        # Assigning a Dict to a Name (line 273):
        
        # Assigning a Dict to a Name (line 273):
        
        # Obtaining an instance of the builtin type 'dict' (line 273)
        dict_139759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 273, 16), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 273)
        
        # Assigning a type to the variable 'cattr' (line 273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 273, 8), 'cattr', dict_139759)
        
        # Getting the type of 'self' (line 277)
        self_139760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 11), 'self')
        # Obtaining the member '_bbox_patch' of a type (line 277)
        _bbox_patch_139761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 277, 11), self_139760, '_bbox_patch')
        # Testing the type of an if condition (line 277)
        if_condition_139762 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 277, 8), _bbox_patch_139761)
        # Assigning a type to the variable 'if_condition_139762' (line 277)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 277, 8), 'if_condition_139762', if_condition_139762)
        # SSA begins for if statement (line 277)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 278):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to contains(...): (line 278)
        # Processing the call arguments (line 278)
        # Getting the type of 'mouseevent' (line 278)
        mouseevent_139766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 66), 'mouseevent', False)
        # Processing the call keyword arguments (line 278)
        kwargs_139767 = {}
        # Getting the type of 'self' (line 278)
        self_139763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 40), 'self', False)
        # Obtaining the member '_bbox_patch' of a type (line 278)
        _bbox_patch_139764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 278, 40), self_139763, '_bbox_patch')
        # Obtaining the member 'contains' of a type (line 278)
        contains_139765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 278, 40), _bbox_patch_139764, 'contains')
        # Calling contains(args, kwargs) (line 278)
        contains_call_result_139768 = invoke(stypy.reporting.localization.Localization(__file__, 278, 40), contains_139765, *[mouseevent_139766], **kwargs_139767)
        
        # Assigning a type to the variable 'call_assignment_139027' (line 278)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 278, 12), 'call_assignment_139027', contains_call_result_139768)
        
        # Assigning a Call to a Name (line 278):
        
        # Assigning a Call to a Name (line 278):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_139771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 278, 12), 'int')
        # Processing the call keyword arguments
        kwargs_139772 = {}
        # Getting the type of 'call_assignment_139027' (line 278)
        call_assignment_139027_139769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 12), 'call_assignment_139027', False)
        # Obtaining the member '__getitem__' of a type (line 278)
        getitem___139770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 278, 12), call_assignment_139027_139769, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_139773 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___139770, *[int_139771], **kwargs_139772)
        
        # Assigning a type to the variable 'call_assignment_139028' (line 278)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 278, 12), 'call_assignment_139028', getitem___call_result_139773)
        
        # Assigning a Name to a Name (line 278):
        
        # Assigning a Name to a Name (line 278):
        # Getting the type of 'call_assignment_139028' (line 278)
        call_assignment_139028_139774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 12), 'call_assignment_139028')
        # Assigning a type to the variable 'patch_inside' (line 278)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 278, 12), 'patch_inside', call_assignment_139028_139774)
        
        # Assigning a Call to a Name (line 278):
        
        # Assigning a Call to a Name (line 278):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_139777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 278, 12), 'int')
        # Processing the call keyword arguments
        kwargs_139778 = {}
        # Getting the type of 'call_assignment_139027' (line 278)
        call_assignment_139027_139775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 12), 'call_assignment_139027', False)
        # Obtaining the member '__getitem__' of a type (line 278)
        getitem___139776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 278, 12), call_assignment_139027_139775, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_139779 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___139776, *[int_139777], **kwargs_139778)
        
        # Assigning a type to the variable 'call_assignment_139029' (line 278)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 278, 12), 'call_assignment_139029', getitem___call_result_139779)
        
        # Assigning a Name to a Name (line 278):
        
        # Assigning a Name to a Name (line 278):
        # Getting the type of 'call_assignment_139029' (line 278)
        call_assignment_139029_139780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 12), 'call_assignment_139029')
        # Assigning a type to the variable 'patch_cattr' (line 278)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 278, 26), 'patch_cattr', call_assignment_139029_139780)
        
        # Assigning a BoolOp to a Name (line 279):
        
        # Assigning a BoolOp to a Name (line 279):
        
        # Assigning a BoolOp to a Name (line 279):
        
        # Evaluating a boolean operation
        # Getting the type of 'inside' (line 279)
        inside_139781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 21), 'inside')
        # Getting the type of 'patch_inside' (line 279)
        patch_inside_139782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 31), 'patch_inside')
        # Applying the binary operator 'or' (line 279)
        result_or_keyword_139783 = python_operator(stypy.reporting.localization.Localization(__file__, 279, 21), 'or', inside_139781, patch_inside_139782)
        
        # Assigning a type to the variable 'inside' (line 279)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 279, 12), 'inside', result_or_keyword_139783)
        
        # Assigning a Name to a Subscript (line 280):
        
        # Assigning a Name to a Subscript (line 280):
        
        # Assigning a Name to a Subscript (line 280):
        # Getting the type of 'patch_cattr' (line 280)
        patch_cattr_139784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 34), 'patch_cattr')
        # Getting the type of 'cattr' (line 280)
        cattr_139785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 12), 'cattr')
        unicode_139786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 280, 18), 'unicode', u'bbox_patch')
        # Storing an element on a container (line 280)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 280, 12), cattr_139785, (unicode_139786, patch_cattr_139784))
        # SSA join for if statement (line 277)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 282)
        tuple_139787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 282, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 282)
        # Adding element type (line 282)
        # Getting the type of 'inside' (line 282)
        inside_139788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 15), 'inside')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 282, 15), tuple_139787, inside_139788)
        # Adding element type (line 282)
        # Getting the type of 'cattr' (line 282)
        cattr_139789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 23), 'cattr')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 282, 15), tuple_139787, cattr_139789)
        
        # Assigning a type to the variable 'stypy_return_type' (line 282)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 282, 8), 'stypy_return_type', tuple_139787)
        
        # ################# End of 'contains(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'contains' in the type store
        # Getting the type of 'stypy_return_type' (line 254)
        stypy_return_type_139790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_139790)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'contains'
        return stypy_return_type_139790


    @norecursion
    def _get_xy_display(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_xy_display'
        module_type_store = module_type_store.open_function_context('_get_xy_display', 284, 4, False)
        # Assigning a type to the variable 'self' (line 285)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 285, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text._get_xy_display.__dict__.__setitem__('stypy_localization', localization)
        Text._get_xy_display.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text._get_xy_display.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text._get_xy_display.__dict__.__setitem__('stypy_function_name', 'Text._get_xy_display')
        Text._get_xy_display.__dict__.__setitem__('stypy_param_names_list', [])
        Text._get_xy_display.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text._get_xy_display.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text._get_xy_display.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text._get_xy_display.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text._get_xy_display.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text._get_xy_display.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text._get_xy_display', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_xy_display', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_xy_display(...)' code ##################

        unicode_139791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 285, 8), 'unicode', u'get the (possibly unit converted) transformed x, y in display coords')
        
        # Assigning a Call to a Tuple (line 286):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to get_unitless_position(...): (line 286)
        # Processing the call keyword arguments (line 286)
        kwargs_139794 = {}
        # Getting the type of 'self' (line 286)
        self_139792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 15), 'self', False)
        # Obtaining the member 'get_unitless_position' of a type (line 286)
        get_unitless_position_139793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 286, 15), self_139792, 'get_unitless_position')
        # Calling get_unitless_position(args, kwargs) (line 286)
        get_unitless_position_call_result_139795 = invoke(stypy.reporting.localization.Localization(__file__, 286, 15), get_unitless_position_139793, *[], **kwargs_139794)
        
        # Assigning a type to the variable 'call_assignment_139030' (line 286)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 286, 8), 'call_assignment_139030', get_unitless_position_call_result_139795)
        
        # Assigning a Call to a Name (line 286):
        
        # Assigning a Call to a Name (line 286):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_139798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 286, 8), 'int')
        # Processing the call keyword arguments
        kwargs_139799 = {}
        # Getting the type of 'call_assignment_139030' (line 286)
        call_assignment_139030_139796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 8), 'call_assignment_139030', False)
        # Obtaining the member '__getitem__' of a type (line 286)
        getitem___139797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 286, 8), call_assignment_139030_139796, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_139800 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___139797, *[int_139798], **kwargs_139799)
        
        # Assigning a type to the variable 'call_assignment_139031' (line 286)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 286, 8), 'call_assignment_139031', getitem___call_result_139800)
        
        # Assigning a Name to a Name (line 286):
        
        # Assigning a Name to a Name (line 286):
        # Getting the type of 'call_assignment_139031' (line 286)
        call_assignment_139031_139801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 8), 'call_assignment_139031')
        # Assigning a type to the variable 'x' (line 286)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 286, 8), 'x', call_assignment_139031_139801)
        
        # Assigning a Call to a Name (line 286):
        
        # Assigning a Call to a Name (line 286):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_139804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 286, 8), 'int')
        # Processing the call keyword arguments
        kwargs_139805 = {}
        # Getting the type of 'call_assignment_139030' (line 286)
        call_assignment_139030_139802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 8), 'call_assignment_139030', False)
        # Obtaining the member '__getitem__' of a type (line 286)
        getitem___139803 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 286, 8), call_assignment_139030_139802, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_139806 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___139803, *[int_139804], **kwargs_139805)
        
        # Assigning a type to the variable 'call_assignment_139032' (line 286)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 286, 8), 'call_assignment_139032', getitem___call_result_139806)
        
        # Assigning a Name to a Name (line 286):
        
        # Assigning a Name to a Name (line 286):
        # Getting the type of 'call_assignment_139032' (line 286)
        call_assignment_139032_139807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 8), 'call_assignment_139032')
        # Assigning a type to the variable 'y' (line 286)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 286, 11), 'y', call_assignment_139032_139807)
        
        # Call to transform_point(...): (line 287)
        # Processing the call arguments (line 287)
        
        # Obtaining an instance of the builtin type 'tuple' (line 287)
        tuple_139813 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 287, 53), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 287)
        # Adding element type (line 287)
        # Getting the type of 'x' (line 287)
        x_139814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 53), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 287, 53), tuple_139813, x_139814)
        # Adding element type (line 287)
        # Getting the type of 'y' (line 287)
        y_139815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 56), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 287, 53), tuple_139813, y_139815)
        
        # Processing the call keyword arguments (line 287)
        kwargs_139816 = {}
        
        # Call to get_transform(...): (line 287)
        # Processing the call keyword arguments (line 287)
        kwargs_139810 = {}
        # Getting the type of 'self' (line 287)
        self_139808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 15), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 287)
        get_transform_139809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 287, 15), self_139808, 'get_transform')
        # Calling get_transform(args, kwargs) (line 287)
        get_transform_call_result_139811 = invoke(stypy.reporting.localization.Localization(__file__, 287, 15), get_transform_139809, *[], **kwargs_139810)
        
        # Obtaining the member 'transform_point' of a type (line 287)
        transform_point_139812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 287, 15), get_transform_call_result_139811, 'transform_point')
        # Calling transform_point(args, kwargs) (line 287)
        transform_point_call_result_139817 = invoke(stypy.reporting.localization.Localization(__file__, 287, 15), transform_point_139812, *[tuple_139813], **kwargs_139816)
        
        # Assigning a type to the variable 'stypy_return_type' (line 287)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 287, 8), 'stypy_return_type', transform_point_call_result_139817)
        
        # ################# End of '_get_xy_display(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_xy_display' in the type store
        # Getting the type of 'stypy_return_type' (line 284)
        stypy_return_type_139818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_139818)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_xy_display'
        return stypy_return_type_139818


    @norecursion
    def _get_multialignment(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_multialignment'
        module_type_store = module_type_store.open_function_context('_get_multialignment', 289, 4, False)
        # Assigning a type to the variable 'self' (line 290)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 290, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text._get_multialignment.__dict__.__setitem__('stypy_localization', localization)
        Text._get_multialignment.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text._get_multialignment.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text._get_multialignment.__dict__.__setitem__('stypy_function_name', 'Text._get_multialignment')
        Text._get_multialignment.__dict__.__setitem__('stypy_param_names_list', [])
        Text._get_multialignment.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text._get_multialignment.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text._get_multialignment.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text._get_multialignment.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text._get_multialignment.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text._get_multialignment.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text._get_multialignment', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_multialignment', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_multialignment(...)' code ##################

        
        
        # Getting the type of 'self' (line 290)
        self_139819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 11), 'self')
        # Obtaining the member '_multialignment' of a type (line 290)
        _multialignment_139820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 290, 11), self_139819, '_multialignment')
        # Getting the type of 'None' (line 290)
        None_139821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 39), 'None')
        # Applying the binary operator 'isnot' (line 290)
        result_is_not_139822 = python_operator(stypy.reporting.localization.Localization(__file__, 290, 11), 'isnot', _multialignment_139820, None_139821)
        
        # Testing the type of an if condition (line 290)
        if_condition_139823 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 290, 8), result_is_not_139822)
        # Assigning a type to the variable 'if_condition_139823' (line 290)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 290, 8), 'if_condition_139823', if_condition_139823)
        # SSA begins for if statement (line 290)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 291)
        self_139824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 19), 'self')
        # Obtaining the member '_multialignment' of a type (line 291)
        _multialignment_139825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 291, 19), self_139824, '_multialignment')
        # Assigning a type to the variable 'stypy_return_type' (line 291)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 291, 12), 'stypy_return_type', _multialignment_139825)
        # SSA branch for the else part of an if statement (line 290)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'self' (line 293)
        self_139826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 19), 'self')
        # Obtaining the member '_horizontalalignment' of a type (line 293)
        _horizontalalignment_139827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 293, 19), self_139826, '_horizontalalignment')
        # Assigning a type to the variable 'stypy_return_type' (line 293)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 293, 12), 'stypy_return_type', _horizontalalignment_139827)
        # SSA join for if statement (line 290)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_get_multialignment(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_multialignment' in the type store
        # Getting the type of 'stypy_return_type' (line 289)
        stypy_return_type_139828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_139828)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_multialignment'
        return stypy_return_type_139828


    @norecursion
    def get_rotation(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_rotation'
        module_type_store = module_type_store.open_function_context('get_rotation', 295, 4, False)
        # Assigning a type to the variable 'self' (line 296)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 296, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.get_rotation.__dict__.__setitem__('stypy_localization', localization)
        Text.get_rotation.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.get_rotation.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.get_rotation.__dict__.__setitem__('stypy_function_name', 'Text.get_rotation')
        Text.get_rotation.__dict__.__setitem__('stypy_param_names_list', [])
        Text.get_rotation.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.get_rotation.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.get_rotation.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.get_rotation.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.get_rotation.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.get_rotation.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.get_rotation', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_rotation', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_rotation(...)' code ##################

        unicode_139829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 296, 8), 'unicode', u'return the text angle as float in degrees')
        
        # Call to get_rotation(...): (line 297)
        # Processing the call arguments (line 297)
        # Getting the type of 'self' (line 297)
        self_139831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 28), 'self', False)
        # Obtaining the member '_rotation' of a type (line 297)
        _rotation_139832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 297, 28), self_139831, '_rotation')
        # Processing the call keyword arguments (line 297)
        kwargs_139833 = {}
        # Getting the type of 'get_rotation' (line 297)
        get_rotation_139830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 15), 'get_rotation', False)
        # Calling get_rotation(args, kwargs) (line 297)
        get_rotation_call_result_139834 = invoke(stypy.reporting.localization.Localization(__file__, 297, 15), get_rotation_139830, *[_rotation_139832], **kwargs_139833)
        
        # Assigning a type to the variable 'stypy_return_type' (line 297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 297, 8), 'stypy_return_type', get_rotation_call_result_139834)
        
        # ################# End of 'get_rotation(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_rotation' in the type store
        # Getting the type of 'stypy_return_type' (line 295)
        stypy_return_type_139835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_139835)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_rotation'
        return stypy_return_type_139835


    @norecursion
    def set_rotation_mode(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_rotation_mode'
        module_type_store = module_type_store.open_function_context('set_rotation_mode', 299, 4, False)
        # Assigning a type to the variable 'self' (line 300)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 300, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_rotation_mode.__dict__.__setitem__('stypy_localization', localization)
        Text.set_rotation_mode.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_rotation_mode.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_rotation_mode.__dict__.__setitem__('stypy_function_name', 'Text.set_rotation_mode')
        Text.set_rotation_mode.__dict__.__setitem__('stypy_param_names_list', ['m'])
        Text.set_rotation_mode.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_rotation_mode.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_rotation_mode.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_rotation_mode.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_rotation_mode.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_rotation_mode.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_rotation_mode', ['m'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_rotation_mode', localization, ['m'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_rotation_mode(...)' code ##################

        unicode_139836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 306, (-1)), 'unicode', u'\n        set text rotation mode. If "anchor", the un-rotated text\n        will first aligned according to their *ha* and\n        *va*, and then will be rotated with the alignement\n        reference point as a origin. If None (default), the text will be\n        rotated first then will be aligned.\n        ')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'm' (line 307)
        m_139837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 11), 'm')
        # Getting the type of 'None' (line 307)
        None_139838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 16), 'None')
        # Applying the binary operator 'is' (line 307)
        result_is__139839 = python_operator(stypy.reporting.localization.Localization(__file__, 307, 11), 'is', m_139837, None_139838)
        
        
        # Getting the type of 'm' (line 307)
        m_139840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 24), 'm')
        
        # Obtaining an instance of the builtin type 'list' (line 307)
        list_139841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 307, 29), 'list')
        # Adding type elements to the builtin type 'list' instance (line 307)
        # Adding element type (line 307)
        unicode_139842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 307, 30), 'unicode', u'anchor')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 307, 29), list_139841, unicode_139842)
        # Adding element type (line 307)
        unicode_139843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 307, 40), 'unicode', u'default')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 307, 29), list_139841, unicode_139843)
        
        # Applying the binary operator 'in' (line 307)
        result_contains_139844 = python_operator(stypy.reporting.localization.Localization(__file__, 307, 24), 'in', m_139840, list_139841)
        
        # Applying the binary operator 'or' (line 307)
        result_or_keyword_139845 = python_operator(stypy.reporting.localization.Localization(__file__, 307, 11), 'or', result_is__139839, result_contains_139844)
        
        # Testing the type of an if condition (line 307)
        if_condition_139846 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 307, 8), result_or_keyword_139845)
        # Assigning a type to the variable 'if_condition_139846' (line 307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 307, 8), 'if_condition_139846', if_condition_139846)
        # SSA begins for if statement (line 307)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 308):
        
        # Assigning a Name to a Attribute (line 308):
        
        # Assigning a Name to a Attribute (line 308):
        # Getting the type of 'm' (line 308)
        m_139847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 34), 'm')
        # Getting the type of 'self' (line 308)
        self_139848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 12), 'self')
        # Setting the type of the member '_rotation_mode' of a type (line 308)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 308, 12), self_139848, '_rotation_mode', m_139847)
        # SSA branch for the else part of an if statement (line 307)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 310)
        # Processing the call arguments (line 310)
        unicode_139850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 310, 29), 'unicode', u'Unknown rotation_mode : %s')
        
        # Call to repr(...): (line 310)
        # Processing the call arguments (line 310)
        # Getting the type of 'm' (line 310)
        m_139852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 65), 'm', False)
        # Processing the call keyword arguments (line 310)
        kwargs_139853 = {}
        # Getting the type of 'repr' (line 310)
        repr_139851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 60), 'repr', False)
        # Calling repr(args, kwargs) (line 310)
        repr_call_result_139854 = invoke(stypy.reporting.localization.Localization(__file__, 310, 60), repr_139851, *[m_139852], **kwargs_139853)
        
        # Applying the binary operator '%' (line 310)
        result_mod_139855 = python_operator(stypy.reporting.localization.Localization(__file__, 310, 29), '%', unicode_139850, repr_call_result_139854)
        
        # Processing the call keyword arguments (line 310)
        kwargs_139856 = {}
        # Getting the type of 'ValueError' (line 310)
        ValueError_139849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 310)
        ValueError_call_result_139857 = invoke(stypy.reporting.localization.Localization(__file__, 310, 18), ValueError_139849, *[result_mod_139855], **kwargs_139856)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 310, 12), ValueError_call_result_139857, 'raise parameter', BaseException)
        # SSA join for if statement (line 307)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 311):
        
        # Assigning a Name to a Attribute (line 311):
        
        # Assigning a Name to a Attribute (line 311):
        # Getting the type of 'True' (line 311)
        True_139858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 21), 'True')
        # Getting the type of 'self' (line 311)
        self_139859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 311)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 311, 8), self_139859, 'stale', True_139858)
        
        # ################# End of 'set_rotation_mode(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_rotation_mode' in the type store
        # Getting the type of 'stypy_return_type' (line 299)
        stypy_return_type_139860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_139860)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_rotation_mode'
        return stypy_return_type_139860


    @norecursion
    def get_rotation_mode(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_rotation_mode'
        module_type_store = module_type_store.open_function_context('get_rotation_mode', 313, 4, False)
        # Assigning a type to the variable 'self' (line 314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 314, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.get_rotation_mode.__dict__.__setitem__('stypy_localization', localization)
        Text.get_rotation_mode.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.get_rotation_mode.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.get_rotation_mode.__dict__.__setitem__('stypy_function_name', 'Text.get_rotation_mode')
        Text.get_rotation_mode.__dict__.__setitem__('stypy_param_names_list', [])
        Text.get_rotation_mode.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.get_rotation_mode.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.get_rotation_mode.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.get_rotation_mode.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.get_rotation_mode.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.get_rotation_mode.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.get_rotation_mode', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_rotation_mode', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_rotation_mode(...)' code ##################

        unicode_139861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 314, 8), 'unicode', u'get text rotation mode')
        # Getting the type of 'self' (line 315)
        self_139862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 15), 'self')
        # Obtaining the member '_rotation_mode' of a type (line 315)
        _rotation_mode_139863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 315, 15), self_139862, '_rotation_mode')
        # Assigning a type to the variable 'stypy_return_type' (line 315)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 315, 8), 'stypy_return_type', _rotation_mode_139863)
        
        # ################# End of 'get_rotation_mode(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_rotation_mode' in the type store
        # Getting the type of 'stypy_return_type' (line 313)
        stypy_return_type_139864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_139864)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_rotation_mode'
        return stypy_return_type_139864


    @norecursion
    def update_from(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'update_from'
        module_type_store = module_type_store.open_function_context('update_from', 317, 4, False)
        # Assigning a type to the variable 'self' (line 318)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 318, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.update_from.__dict__.__setitem__('stypy_localization', localization)
        Text.update_from.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.update_from.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.update_from.__dict__.__setitem__('stypy_function_name', 'Text.update_from')
        Text.update_from.__dict__.__setitem__('stypy_param_names_list', ['other'])
        Text.update_from.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.update_from.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.update_from.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.update_from.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.update_from.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.update_from.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.update_from', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update_from', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update_from(...)' code ##################

        unicode_139865 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 318, 8), 'unicode', u'Copy properties from other to self')
        
        # Call to update_from(...): (line 319)
        # Processing the call arguments (line 319)
        # Getting the type of 'self' (line 319)
        self_139868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 27), 'self', False)
        # Getting the type of 'other' (line 319)
        other_139869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 33), 'other', False)
        # Processing the call keyword arguments (line 319)
        kwargs_139870 = {}
        # Getting the type of 'Artist' (line 319)
        Artist_139866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 8), 'Artist', False)
        # Obtaining the member 'update_from' of a type (line 319)
        update_from_139867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 319, 8), Artist_139866, 'update_from')
        # Calling update_from(args, kwargs) (line 319)
        update_from_call_result_139871 = invoke(stypy.reporting.localization.Localization(__file__, 319, 8), update_from_139867, *[self_139868, other_139869], **kwargs_139870)
        
        
        # Assigning a Attribute to a Attribute (line 320):
        
        # Assigning a Attribute to a Attribute (line 320):
        
        # Assigning a Attribute to a Attribute (line 320):
        # Getting the type of 'other' (line 320)
        other_139872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 22), 'other')
        # Obtaining the member '_color' of a type (line 320)
        _color_139873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 320, 22), other_139872, '_color')
        # Getting the type of 'self' (line 320)
        self_139874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 8), 'self')
        # Setting the type of the member '_color' of a type (line 320)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 320, 8), self_139874, '_color', _color_139873)
        
        # Assigning a Attribute to a Attribute (line 321):
        
        # Assigning a Attribute to a Attribute (line 321):
        
        # Assigning a Attribute to a Attribute (line 321):
        # Getting the type of 'other' (line 321)
        other_139875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 31), 'other')
        # Obtaining the member '_multialignment' of a type (line 321)
        _multialignment_139876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 321, 31), other_139875, '_multialignment')
        # Getting the type of 'self' (line 321)
        self_139877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 8), 'self')
        # Setting the type of the member '_multialignment' of a type (line 321)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 321, 8), self_139877, '_multialignment', _multialignment_139876)
        
        # Assigning a Attribute to a Attribute (line 322):
        
        # Assigning a Attribute to a Attribute (line 322):
        
        # Assigning a Attribute to a Attribute (line 322):
        # Getting the type of 'other' (line 322)
        other_139878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 34), 'other')
        # Obtaining the member '_verticalalignment' of a type (line 322)
        _verticalalignment_139879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 322, 34), other_139878, '_verticalalignment')
        # Getting the type of 'self' (line 322)
        self_139880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 8), 'self')
        # Setting the type of the member '_verticalalignment' of a type (line 322)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 322, 8), self_139880, '_verticalalignment', _verticalalignment_139879)
        
        # Assigning a Attribute to a Attribute (line 323):
        
        # Assigning a Attribute to a Attribute (line 323):
        
        # Assigning a Attribute to a Attribute (line 323):
        # Getting the type of 'other' (line 323)
        other_139881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 36), 'other')
        # Obtaining the member '_horizontalalignment' of a type (line 323)
        _horizontalalignment_139882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 36), other_139881, '_horizontalalignment')
        # Getting the type of 'self' (line 323)
        self_139883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 8), 'self')
        # Setting the type of the member '_horizontalalignment' of a type (line 323)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 8), self_139883, '_horizontalalignment', _horizontalalignment_139882)
        
        # Assigning a Call to a Attribute (line 324):
        
        # Assigning a Call to a Attribute (line 324):
        
        # Assigning a Call to a Attribute (line 324):
        
        # Call to copy(...): (line 324)
        # Processing the call keyword arguments (line 324)
        kwargs_139887 = {}
        # Getting the type of 'other' (line 324)
        other_139884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 31), 'other', False)
        # Obtaining the member '_fontproperties' of a type (line 324)
        _fontproperties_139885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 324, 31), other_139884, '_fontproperties')
        # Obtaining the member 'copy' of a type (line 324)
        copy_139886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 324, 31), _fontproperties_139885, 'copy')
        # Calling copy(args, kwargs) (line 324)
        copy_call_result_139888 = invoke(stypy.reporting.localization.Localization(__file__, 324, 31), copy_139886, *[], **kwargs_139887)
        
        # Getting the type of 'self' (line 324)
        self_139889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 8), 'self')
        # Setting the type of the member '_fontproperties' of a type (line 324)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 324, 8), self_139889, '_fontproperties', copy_call_result_139888)
        
        # Assigning a Attribute to a Attribute (line 325):
        
        # Assigning a Attribute to a Attribute (line 325):
        
        # Assigning a Attribute to a Attribute (line 325):
        # Getting the type of 'other' (line 325)
        other_139890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 25), 'other')
        # Obtaining the member '_rotation' of a type (line 325)
        _rotation_139891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 325, 25), other_139890, '_rotation')
        # Getting the type of 'self' (line 325)
        self_139892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 8), 'self')
        # Setting the type of the member '_rotation' of a type (line 325)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 325, 8), self_139892, '_rotation', _rotation_139891)
        
        # Assigning a Attribute to a Attribute (line 326):
        
        # Assigning a Attribute to a Attribute (line 326):
        
        # Assigning a Attribute to a Attribute (line 326):
        # Getting the type of 'other' (line 326)
        other_139893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 23), 'other')
        # Obtaining the member '_picker' of a type (line 326)
        _picker_139894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 326, 23), other_139893, '_picker')
        # Getting the type of 'self' (line 326)
        self_139895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 8), 'self')
        # Setting the type of the member '_picker' of a type (line 326)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 326, 8), self_139895, '_picker', _picker_139894)
        
        # Assigning a Attribute to a Attribute (line 327):
        
        # Assigning a Attribute to a Attribute (line 327):
        
        # Assigning a Attribute to a Attribute (line 327):
        # Getting the type of 'other' (line 327)
        other_139896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 28), 'other')
        # Obtaining the member '_linespacing' of a type (line 327)
        _linespacing_139897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 327, 28), other_139896, '_linespacing')
        # Getting the type of 'self' (line 327)
        self_139898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 8), 'self')
        # Setting the type of the member '_linespacing' of a type (line 327)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 327, 8), self_139898, '_linespacing', _linespacing_139897)
        
        # Assigning a Name to a Attribute (line 328):
        
        # Assigning a Name to a Attribute (line 328):
        
        # Assigning a Name to a Attribute (line 328):
        # Getting the type of 'True' (line 328)
        True_139899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 21), 'True')
        # Getting the type of 'self' (line 328)
        self_139900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 328)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 328, 8), self_139900, 'stale', True_139899)
        
        # ################# End of 'update_from(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update_from' in the type store
        # Getting the type of 'stypy_return_type' (line 317)
        stypy_return_type_139901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_139901)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update_from'
        return stypy_return_type_139901


    @norecursion
    def _get_layout(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_layout'
        module_type_store = module_type_store.open_function_context('_get_layout', 330, 4, False)
        # Assigning a type to the variable 'self' (line 331)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 331, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text._get_layout.__dict__.__setitem__('stypy_localization', localization)
        Text._get_layout.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text._get_layout.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text._get_layout.__dict__.__setitem__('stypy_function_name', 'Text._get_layout')
        Text._get_layout.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        Text._get_layout.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text._get_layout.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text._get_layout.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text._get_layout.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text._get_layout.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text._get_layout.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text._get_layout', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_layout', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_layout(...)' code ##################

        unicode_139902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 335, (-1)), 'unicode', u'\n        return the extent (bbox) of the text together with\n        multiple-alignment information. Note that it returns an extent\n        of a rotated text when necessary.\n        ')
        
        # Assigning a Call to a Name (line 336):
        
        # Assigning a Call to a Name (line 336):
        
        # Assigning a Call to a Name (line 336):
        
        # Call to get_prop_tup(...): (line 336)
        # Processing the call keyword arguments (line 336)
        # Getting the type of 'renderer' (line 336)
        renderer_139905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 41), 'renderer', False)
        keyword_139906 = renderer_139905
        kwargs_139907 = {'renderer': keyword_139906}
        # Getting the type of 'self' (line 336)
        self_139903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 14), 'self', False)
        # Obtaining the member 'get_prop_tup' of a type (line 336)
        get_prop_tup_139904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 336, 14), self_139903, 'get_prop_tup')
        # Calling get_prop_tup(args, kwargs) (line 336)
        get_prop_tup_call_result_139908 = invoke(stypy.reporting.localization.Localization(__file__, 336, 14), get_prop_tup_139904, *[], **kwargs_139907)
        
        # Assigning a type to the variable 'key' (line 336)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 336, 8), 'key', get_prop_tup_call_result_139908)
        
        
        # Getting the type of 'key' (line 337)
        key_139909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 11), 'key')
        # Getting the type of 'self' (line 337)
        self_139910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 18), 'self')
        # Obtaining the member '_cached' of a type (line 337)
        _cached_139911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 337, 18), self_139910, '_cached')
        # Applying the binary operator 'in' (line 337)
        result_contains_139912 = python_operator(stypy.reporting.localization.Localization(__file__, 337, 11), 'in', key_139909, _cached_139911)
        
        # Testing the type of an if condition (line 337)
        if_condition_139913 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 337, 8), result_contains_139912)
        # Assigning a type to the variable 'if_condition_139913' (line 337)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 337, 8), 'if_condition_139913', if_condition_139913)
        # SSA begins for if statement (line 337)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining the type of the subscript
        # Getting the type of 'key' (line 338)
        key_139914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 32), 'key')
        # Getting the type of 'self' (line 338)
        self_139915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 19), 'self')
        # Obtaining the member '_cached' of a type (line 338)
        _cached_139916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 338, 19), self_139915, '_cached')
        # Obtaining the member '__getitem__' of a type (line 338)
        getitem___139917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 338, 19), _cached_139916, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 338)
        subscript_call_result_139918 = invoke(stypy.reporting.localization.Localization(__file__, 338, 19), getitem___139917, key_139914)
        
        # Assigning a type to the variable 'stypy_return_type' (line 338)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 338, 12), 'stypy_return_type', subscript_call_result_139918)
        # SSA join for if statement (line 337)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a List to a Name (line 340):
        
        # Assigning a List to a Name (line 340):
        
        # Assigning a List to a Name (line 340):
        
        # Obtaining an instance of the builtin type 'list' (line 340)
        list_139919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 340, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 340)
        
        # Assigning a type to the variable 'horizLayout' (line 340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 340, 8), 'horizLayout', list_139919)
        
        # Assigning a Tuple to a Tuple (line 342):
        
        # Assigning a Num to a Name (line 342):
        
        # Assigning a Num to a Name (line 342):
        float_139920 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 342, 23), 'float')
        # Assigning a type to the variable 'tuple_assignment_139033' (line 342)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 342, 8), 'tuple_assignment_139033', float_139920)
        
        # Assigning a Num to a Name (line 342):
        
        # Assigning a Num to a Name (line 342):
        float_139921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 342, 28), 'float')
        # Assigning a type to the variable 'tuple_assignment_139034' (line 342)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 342, 8), 'tuple_assignment_139034', float_139921)
        
        # Assigning a Name to a Name (line 342):
        
        # Assigning a Name to a Name (line 342):
        # Getting the type of 'tuple_assignment_139033' (line 342)
        tuple_assignment_139033_139922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 8), 'tuple_assignment_139033')
        # Assigning a type to the variable 'thisx' (line 342)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 342, 8), 'thisx', tuple_assignment_139033_139922)
        
        # Assigning a Name to a Name (line 342):
        
        # Assigning a Name to a Name (line 342):
        # Getting the type of 'tuple_assignment_139034' (line 342)
        tuple_assignment_139034_139923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 8), 'tuple_assignment_139034')
        # Assigning a type to the variable 'thisy' (line 342)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 342, 15), 'thisy', tuple_assignment_139034_139923)
        
        # Assigning a Tuple to a Tuple (line 343):
        
        # Assigning a Num to a Name (line 343):
        
        # Assigning a Num to a Name (line 343):
        float_139924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 343, 21), 'float')
        # Assigning a type to the variable 'tuple_assignment_139035' (line 343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 343, 8), 'tuple_assignment_139035', float_139924)
        
        # Assigning a Num to a Name (line 343):
        
        # Assigning a Num to a Name (line 343):
        float_139925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 343, 26), 'float')
        # Assigning a type to the variable 'tuple_assignment_139036' (line 343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 343, 8), 'tuple_assignment_139036', float_139925)
        
        # Assigning a Name to a Name (line 343):
        
        # Assigning a Name to a Name (line 343):
        # Getting the type of 'tuple_assignment_139035' (line 343)
        tuple_assignment_139035_139926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 8), 'tuple_assignment_139035')
        # Assigning a type to the variable 'xmin' (line 343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 343, 8), 'xmin', tuple_assignment_139035_139926)
        
        # Assigning a Name to a Name (line 343):
        
        # Assigning a Name to a Name (line 343):
        # Getting the type of 'tuple_assignment_139036' (line 343)
        tuple_assignment_139036_139927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 8), 'tuple_assignment_139036')
        # Assigning a type to the variable 'ymin' (line 343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 343, 14), 'ymin', tuple_assignment_139036_139927)
        
        # Assigning a Tuple to a Tuple (line 344):
        
        # Assigning a Num to a Name (line 344):
        
        # Assigning a Num to a Name (line 344):
        float_139928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 344, 24), 'float')
        # Assigning a type to the variable 'tuple_assignment_139037' (line 344)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 344, 8), 'tuple_assignment_139037', float_139928)
        
        # Assigning a Num to a Name (line 344):
        
        # Assigning a Num to a Name (line 344):
        float_139929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 344, 29), 'float')
        # Assigning a type to the variable 'tuple_assignment_139038' (line 344)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 344, 8), 'tuple_assignment_139038', float_139929)
        
        # Assigning a Name to a Name (line 344):
        
        # Assigning a Name to a Name (line 344):
        # Getting the type of 'tuple_assignment_139037' (line 344)
        tuple_assignment_139037_139930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 8), 'tuple_assignment_139037')
        # Assigning a type to the variable 'width' (line 344)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 344, 8), 'width', tuple_assignment_139037_139930)
        
        # Assigning a Name to a Name (line 344):
        
        # Assigning a Name to a Name (line 344):
        # Getting the type of 'tuple_assignment_139038' (line 344)
        tuple_assignment_139038_139931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 8), 'tuple_assignment_139038')
        # Assigning a type to the variable 'height' (line 344)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 344, 15), 'height', tuple_assignment_139038_139931)
        
        # Assigning a Call to a Name (line 345):
        
        # Assigning a Call to a Name (line 345):
        
        # Assigning a Call to a Name (line 345):
        
        # Call to split(...): (line 345)
        # Processing the call arguments (line 345)
        unicode_139937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 345, 38), 'unicode', u'\n')
        # Processing the call keyword arguments (line 345)
        kwargs_139938 = {}
        
        # Call to get_text(...): (line 345)
        # Processing the call keyword arguments (line 345)
        kwargs_139934 = {}
        # Getting the type of 'self' (line 345)
        self_139932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 16), 'self', False)
        # Obtaining the member 'get_text' of a type (line 345)
        get_text_139933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 345, 16), self_139932, 'get_text')
        # Calling get_text(args, kwargs) (line 345)
        get_text_call_result_139935 = invoke(stypy.reporting.localization.Localization(__file__, 345, 16), get_text_139933, *[], **kwargs_139934)
        
        # Obtaining the member 'split' of a type (line 345)
        split_139936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 345, 16), get_text_call_result_139935, 'split')
        # Calling split(args, kwargs) (line 345)
        split_call_result_139939 = invoke(stypy.reporting.localization.Localization(__file__, 345, 16), split_139936, *[unicode_139937], **kwargs_139938)
        
        # Assigning a type to the variable 'lines' (line 345)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 345, 8), 'lines', split_call_result_139939)
        
        # Assigning a Call to a Name (line 347):
        
        # Assigning a Call to a Name (line 347):
        
        # Assigning a Call to a Name (line 347):
        
        # Call to zeros(...): (line 347)
        # Processing the call arguments (line 347)
        
        # Obtaining an instance of the builtin type 'tuple' (line 347)
        tuple_139942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 347, 24), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 347)
        # Adding element type (line 347)
        
        # Call to len(...): (line 347)
        # Processing the call arguments (line 347)
        # Getting the type of 'lines' (line 347)
        lines_139944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 28), 'lines', False)
        # Processing the call keyword arguments (line 347)
        kwargs_139945 = {}
        # Getting the type of 'len' (line 347)
        len_139943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 24), 'len', False)
        # Calling len(args, kwargs) (line 347)
        len_call_result_139946 = invoke(stypy.reporting.localization.Localization(__file__, 347, 24), len_139943, *[lines_139944], **kwargs_139945)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 347, 24), tuple_139942, len_call_result_139946)
        # Adding element type (line 347)
        int_139947 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 347, 36), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 347, 24), tuple_139942, int_139947)
        
        # Processing the call keyword arguments (line 347)
        kwargs_139948 = {}
        # Getting the type of 'np' (line 347)
        np_139940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 14), 'np', False)
        # Obtaining the member 'zeros' of a type (line 347)
        zeros_139941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 347, 14), np_139940, 'zeros')
        # Calling zeros(args, kwargs) (line 347)
        zeros_call_result_139949 = invoke(stypy.reporting.localization.Localization(__file__, 347, 14), zeros_139941, *[tuple_139942], **kwargs_139948)
        
        # Assigning a type to the variable 'whs' (line 347)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 347, 8), 'whs', zeros_call_result_139949)
        
        # Assigning a Call to a Name (line 348):
        
        # Assigning a Call to a Name (line 348):
        
        # Assigning a Call to a Name (line 348):
        
        # Call to zeros(...): (line 348)
        # Processing the call arguments (line 348)
        
        # Obtaining an instance of the builtin type 'tuple' (line 348)
        tuple_139952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 348, 32), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 348)
        # Adding element type (line 348)
        
        # Call to len(...): (line 348)
        # Processing the call arguments (line 348)
        # Getting the type of 'lines' (line 348)
        lines_139954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 36), 'lines', False)
        # Processing the call keyword arguments (line 348)
        kwargs_139955 = {}
        # Getting the type of 'len' (line 348)
        len_139953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 32), 'len', False)
        # Calling len(args, kwargs) (line 348)
        len_call_result_139956 = invoke(stypy.reporting.localization.Localization(__file__, 348, 32), len_139953, *[lines_139954], **kwargs_139955)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 348, 32), tuple_139952, len_call_result_139956)
        # Adding element type (line 348)
        int_139957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 348, 44), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 348, 32), tuple_139952, int_139957)
        
        # Processing the call keyword arguments (line 348)
        kwargs_139958 = {}
        # Getting the type of 'np' (line 348)
        np_139950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 22), 'np', False)
        # Obtaining the member 'zeros' of a type (line 348)
        zeros_139951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 348, 22), np_139950, 'zeros')
        # Calling zeros(args, kwargs) (line 348)
        zeros_call_result_139959 = invoke(stypy.reporting.localization.Localization(__file__, 348, 22), zeros_139951, *[tuple_139952], **kwargs_139958)
        
        # Assigning a type to the variable 'horizLayout' (line 348)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 348, 8), 'horizLayout', zeros_call_result_139959)
        
        # Assigning a Call to a Tuple (line 352):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to get_text_width_height_descent(...): (line 352)
        # Processing the call arguments (line 352)
        unicode_139962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 352, 66), 'unicode', u'lp')
        # Getting the type of 'self' (line 353)
        self_139963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 57), 'self', False)
        # Obtaining the member '_fontproperties' of a type (line 353)
        _fontproperties_139964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 353, 57), self_139963, '_fontproperties')
        # Processing the call keyword arguments (line 352)
        # Getting the type of 'False' (line 354)
        False_139965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 64), 'False', False)
        keyword_139966 = False_139965
        kwargs_139967 = {'ismath': keyword_139966}
        # Getting the type of 'renderer' (line 352)
        renderer_139960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 27), 'renderer', False)
        # Obtaining the member 'get_text_width_height_descent' of a type (line 352)
        get_text_width_height_descent_139961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 27), renderer_139960, 'get_text_width_height_descent')
        # Calling get_text_width_height_descent(args, kwargs) (line 352)
        get_text_width_height_descent_call_result_139968 = invoke(stypy.reporting.localization.Localization(__file__, 352, 27), get_text_width_height_descent_139961, *[unicode_139962, _fontproperties_139964], **kwargs_139967)
        
        # Assigning a type to the variable 'call_assignment_139039' (line 352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'call_assignment_139039', get_text_width_height_descent_call_result_139968)
        
        # Assigning a Call to a Name (line 352):
        
        # Assigning a Call to a Name (line 352):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_139971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 352, 8), 'int')
        # Processing the call keyword arguments
        kwargs_139972 = {}
        # Getting the type of 'call_assignment_139039' (line 352)
        call_assignment_139039_139969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'call_assignment_139039', False)
        # Obtaining the member '__getitem__' of a type (line 352)
        getitem___139970 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 8), call_assignment_139039_139969, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_139973 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___139970, *[int_139971], **kwargs_139972)
        
        # Assigning a type to the variable 'call_assignment_139040' (line 352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'call_assignment_139040', getitem___call_result_139973)
        
        # Assigning a Name to a Name (line 352):
        
        # Assigning a Name to a Name (line 352):
        # Getting the type of 'call_assignment_139040' (line 352)
        call_assignment_139040_139974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'call_assignment_139040')
        # Assigning a type to the variable 'tmp' (line 352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'tmp', call_assignment_139040_139974)
        
        # Assigning a Call to a Name (line 352):
        
        # Assigning a Call to a Name (line 352):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_139977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 352, 8), 'int')
        # Processing the call keyword arguments
        kwargs_139978 = {}
        # Getting the type of 'call_assignment_139039' (line 352)
        call_assignment_139039_139975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'call_assignment_139039', False)
        # Obtaining the member '__getitem__' of a type (line 352)
        getitem___139976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 8), call_assignment_139039_139975, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_139979 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___139976, *[int_139977], **kwargs_139978)
        
        # Assigning a type to the variable 'call_assignment_139041' (line 352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'call_assignment_139041', getitem___call_result_139979)
        
        # Assigning a Name to a Name (line 352):
        
        # Assigning a Name to a Name (line 352):
        # Getting the type of 'call_assignment_139041' (line 352)
        call_assignment_139041_139980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'call_assignment_139041')
        # Assigning a type to the variable 'lp_h' (line 352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 352, 13), 'lp_h', call_assignment_139041_139980)
        
        # Assigning a Call to a Name (line 352):
        
        # Assigning a Call to a Name (line 352):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_139983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 352, 8), 'int')
        # Processing the call keyword arguments
        kwargs_139984 = {}
        # Getting the type of 'call_assignment_139039' (line 352)
        call_assignment_139039_139981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'call_assignment_139039', False)
        # Obtaining the member '__getitem__' of a type (line 352)
        getitem___139982 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 8), call_assignment_139039_139981, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_139985 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___139982, *[int_139983], **kwargs_139984)
        
        # Assigning a type to the variable 'call_assignment_139042' (line 352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'call_assignment_139042', getitem___call_result_139985)
        
        # Assigning a Name to a Name (line 352):
        
        # Assigning a Name to a Name (line 352):
        # Getting the type of 'call_assignment_139042' (line 352)
        call_assignment_139042_139986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'call_assignment_139042')
        # Assigning a type to the variable 'lp_bl' (line 352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 352, 19), 'lp_bl', call_assignment_139042_139986)
        
        # Assigning a BinOp to a Name (line 355):
        
        # Assigning a BinOp to a Name (line 355):
        
        # Assigning a BinOp to a Name (line 355):
        # Getting the type of 'lp_h' (line 355)
        lp_h_139987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 19), 'lp_h')
        # Getting the type of 'lp_bl' (line 355)
        lp_bl_139988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 26), 'lp_bl')
        # Applying the binary operator '-' (line 355)
        result_sub_139989 = python_operator(stypy.reporting.localization.Localization(__file__, 355, 19), '-', lp_h_139987, lp_bl_139988)
        
        # Getting the type of 'self' (line 355)
        self_139990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 35), 'self')
        # Obtaining the member '_linespacing' of a type (line 355)
        _linespacing_139991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 355, 35), self_139990, '_linespacing')
        # Applying the binary operator '*' (line 355)
        result_mul_139992 = python_operator(stypy.reporting.localization.Localization(__file__, 355, 18), '*', result_sub_139989, _linespacing_139991)
        
        # Assigning a type to the variable 'offsety' (line 355)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 355, 8), 'offsety', result_mul_139992)
        
        # Assigning a Num to a Name (line 357):
        
        # Assigning a Num to a Name (line 357):
        
        # Assigning a Num to a Name (line 357):
        int_139993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 357, 19), 'int')
        # Assigning a type to the variable 'baseline' (line 357)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 357, 8), 'baseline', int_139993)
        
        
        # Call to enumerate(...): (line 358)
        # Processing the call arguments (line 358)
        # Getting the type of 'lines' (line 358)
        lines_139995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 358, 33), 'lines', False)
        # Processing the call keyword arguments (line 358)
        kwargs_139996 = {}
        # Getting the type of 'enumerate' (line 358)
        enumerate_139994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 358, 23), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 358)
        enumerate_call_result_139997 = invoke(stypy.reporting.localization.Localization(__file__, 358, 23), enumerate_139994, *[lines_139995], **kwargs_139996)
        
        # Testing the type of a for loop iterable (line 358)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 358, 8), enumerate_call_result_139997)
        # Getting the type of the for loop variable (line 358)
        for_loop_var_139998 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 358, 8), enumerate_call_result_139997)
        # Assigning a type to the variable 'i' (line 358)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 358, 8), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 358, 8), for_loop_var_139998))
        # Assigning a type to the variable 'line' (line 358)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 358, 8), 'line', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 358, 8), for_loop_var_139998))
        # SSA begins for a for statement (line 358)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Tuple (line 359):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to is_math_text(...): (line 359)
        # Processing the call arguments (line 359)
        # Getting the type of 'line' (line 359)
        line_140001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 51), 'line', False)
        
        # Call to get_usetex(...): (line 359)
        # Processing the call keyword arguments (line 359)
        kwargs_140004 = {}
        # Getting the type of 'self' (line 359)
        self_140002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 57), 'self', False)
        # Obtaining the member 'get_usetex' of a type (line 359)
        get_usetex_140003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 359, 57), self_140002, 'get_usetex')
        # Calling get_usetex(args, kwargs) (line 359)
        get_usetex_call_result_140005 = invoke(stypy.reporting.localization.Localization(__file__, 359, 57), get_usetex_140003, *[], **kwargs_140004)
        
        # Processing the call keyword arguments (line 359)
        kwargs_140006 = {}
        # Getting the type of 'self' (line 359)
        self_139999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 33), 'self', False)
        # Obtaining the member 'is_math_text' of a type (line 359)
        is_math_text_140000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 359, 33), self_139999, 'is_math_text')
        # Calling is_math_text(args, kwargs) (line 359)
        is_math_text_call_result_140007 = invoke(stypy.reporting.localization.Localization(__file__, 359, 33), is_math_text_140000, *[line_140001, get_usetex_call_result_140005], **kwargs_140006)
        
        # Assigning a type to the variable 'call_assignment_139043' (line 359)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 359, 12), 'call_assignment_139043', is_math_text_call_result_140007)
        
        # Assigning a Call to a Name (line 359):
        
        # Assigning a Call to a Name (line 359):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_140010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 359, 12), 'int')
        # Processing the call keyword arguments
        kwargs_140011 = {}
        # Getting the type of 'call_assignment_139043' (line 359)
        call_assignment_139043_140008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 12), 'call_assignment_139043', False)
        # Obtaining the member '__getitem__' of a type (line 359)
        getitem___140009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 359, 12), call_assignment_139043_140008, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_140012 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___140009, *[int_140010], **kwargs_140011)
        
        # Assigning a type to the variable 'call_assignment_139044' (line 359)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 359, 12), 'call_assignment_139044', getitem___call_result_140012)
        
        # Assigning a Name to a Name (line 359):
        
        # Assigning a Name to a Name (line 359):
        # Getting the type of 'call_assignment_139044' (line 359)
        call_assignment_139044_140013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 12), 'call_assignment_139044')
        # Assigning a type to the variable 'clean_line' (line 359)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 359, 12), 'clean_line', call_assignment_139044_140013)
        
        # Assigning a Call to a Name (line 359):
        
        # Assigning a Call to a Name (line 359):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_140016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 359, 12), 'int')
        # Processing the call keyword arguments
        kwargs_140017 = {}
        # Getting the type of 'call_assignment_139043' (line 359)
        call_assignment_139043_140014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 12), 'call_assignment_139043', False)
        # Obtaining the member '__getitem__' of a type (line 359)
        getitem___140015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 359, 12), call_assignment_139043_140014, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_140018 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___140015, *[int_140016], **kwargs_140017)
        
        # Assigning a type to the variable 'call_assignment_139045' (line 359)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 359, 12), 'call_assignment_139045', getitem___call_result_140018)
        
        # Assigning a Name to a Name (line 359):
        
        # Assigning a Name to a Name (line 359):
        # Getting the type of 'call_assignment_139045' (line 359)
        call_assignment_139045_140019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 12), 'call_assignment_139045')
        # Assigning a type to the variable 'ismath' (line 359)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 359, 24), 'ismath', call_assignment_139045_140019)
        
        # Getting the type of 'clean_line' (line 360)
        clean_line_140020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 15), 'clean_line')
        # Testing the type of an if condition (line 360)
        if_condition_140021 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 360, 12), clean_line_140020)
        # Assigning a type to the variable 'if_condition_140021' (line 360)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 360, 12), 'if_condition_140021', if_condition_140021)
        # SSA begins for if statement (line 360)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 361):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to get_text_width_height_descent(...): (line 361)
        # Processing the call arguments (line 361)
        # Getting the type of 'clean_line' (line 361)
        clean_line_140024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 65), 'clean_line', False)
        # Getting the type of 'self' (line 362)
        self_140025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 56), 'self', False)
        # Obtaining the member '_fontproperties' of a type (line 362)
        _fontproperties_140026 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 362, 56), self_140025, '_fontproperties')
        # Processing the call keyword arguments (line 361)
        # Getting the type of 'ismath' (line 363)
        ismath_140027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 63), 'ismath', False)
        keyword_140028 = ismath_140027
        kwargs_140029 = {'ismath': keyword_140028}
        # Getting the type of 'renderer' (line 361)
        renderer_140022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 26), 'renderer', False)
        # Obtaining the member 'get_text_width_height_descent' of a type (line 361)
        get_text_width_height_descent_140023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 26), renderer_140022, 'get_text_width_height_descent')
        # Calling get_text_width_height_descent(args, kwargs) (line 361)
        get_text_width_height_descent_call_result_140030 = invoke(stypy.reporting.localization.Localization(__file__, 361, 26), get_text_width_height_descent_140023, *[clean_line_140024, _fontproperties_140026], **kwargs_140029)
        
        # Assigning a type to the variable 'call_assignment_139046' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 16), 'call_assignment_139046', get_text_width_height_descent_call_result_140030)
        
        # Assigning a Call to a Name (line 361):
        
        # Assigning a Call to a Name (line 361):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_140033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 361, 16), 'int')
        # Processing the call keyword arguments
        kwargs_140034 = {}
        # Getting the type of 'call_assignment_139046' (line 361)
        call_assignment_139046_140031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 16), 'call_assignment_139046', False)
        # Obtaining the member '__getitem__' of a type (line 361)
        getitem___140032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 16), call_assignment_139046_140031, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_140035 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___140032, *[int_140033], **kwargs_140034)
        
        # Assigning a type to the variable 'call_assignment_139047' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 16), 'call_assignment_139047', getitem___call_result_140035)
        
        # Assigning a Name to a Name (line 361):
        
        # Assigning a Name to a Name (line 361):
        # Getting the type of 'call_assignment_139047' (line 361)
        call_assignment_139047_140036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 16), 'call_assignment_139047')
        # Assigning a type to the variable 'w' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 16), 'w', call_assignment_139047_140036)
        
        # Assigning a Call to a Name (line 361):
        
        # Assigning a Call to a Name (line 361):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_140039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 361, 16), 'int')
        # Processing the call keyword arguments
        kwargs_140040 = {}
        # Getting the type of 'call_assignment_139046' (line 361)
        call_assignment_139046_140037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 16), 'call_assignment_139046', False)
        # Obtaining the member '__getitem__' of a type (line 361)
        getitem___140038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 16), call_assignment_139046_140037, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_140041 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___140038, *[int_140039], **kwargs_140040)
        
        # Assigning a type to the variable 'call_assignment_139048' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 16), 'call_assignment_139048', getitem___call_result_140041)
        
        # Assigning a Name to a Name (line 361):
        
        # Assigning a Name to a Name (line 361):
        # Getting the type of 'call_assignment_139048' (line 361)
        call_assignment_139048_140042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 16), 'call_assignment_139048')
        # Assigning a type to the variable 'h' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 19), 'h', call_assignment_139048_140042)
        
        # Assigning a Call to a Name (line 361):
        
        # Assigning a Call to a Name (line 361):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_140045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 361, 16), 'int')
        # Processing the call keyword arguments
        kwargs_140046 = {}
        # Getting the type of 'call_assignment_139046' (line 361)
        call_assignment_139046_140043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 16), 'call_assignment_139046', False)
        # Obtaining the member '__getitem__' of a type (line 361)
        getitem___140044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 16), call_assignment_139046_140043, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_140047 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___140044, *[int_140045], **kwargs_140046)
        
        # Assigning a type to the variable 'call_assignment_139049' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 16), 'call_assignment_139049', getitem___call_result_140047)
        
        # Assigning a Name to a Name (line 361):
        
        # Assigning a Name to a Name (line 361):
        # Getting the type of 'call_assignment_139049' (line 361)
        call_assignment_139049_140048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 16), 'call_assignment_139049')
        # Assigning a type to the variable 'd' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 22), 'd', call_assignment_139049_140048)
        # SSA branch for the else part of an if statement (line 360)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Tuple to a Tuple (line 365):
        
        # Assigning a Num to a Name (line 365):
        
        # Assigning a Num to a Name (line 365):
        int_140049 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 365, 26), 'int')
        # Assigning a type to the variable 'tuple_assignment_139050' (line 365)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 365, 16), 'tuple_assignment_139050', int_140049)
        
        # Assigning a Num to a Name (line 365):
        
        # Assigning a Num to a Name (line 365):
        int_140050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 365, 29), 'int')
        # Assigning a type to the variable 'tuple_assignment_139051' (line 365)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 365, 16), 'tuple_assignment_139051', int_140050)
        
        # Assigning a Num to a Name (line 365):
        
        # Assigning a Num to a Name (line 365):
        int_140051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 365, 32), 'int')
        # Assigning a type to the variable 'tuple_assignment_139052' (line 365)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 365, 16), 'tuple_assignment_139052', int_140051)
        
        # Assigning a Name to a Name (line 365):
        
        # Assigning a Name to a Name (line 365):
        # Getting the type of 'tuple_assignment_139050' (line 365)
        tuple_assignment_139050_140052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 16), 'tuple_assignment_139050')
        # Assigning a type to the variable 'w' (line 365)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 365, 16), 'w', tuple_assignment_139050_140052)
        
        # Assigning a Name to a Name (line 365):
        
        # Assigning a Name to a Name (line 365):
        # Getting the type of 'tuple_assignment_139051' (line 365)
        tuple_assignment_139051_140053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 16), 'tuple_assignment_139051')
        # Assigning a type to the variable 'h' (line 365)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 365, 19), 'h', tuple_assignment_139051_140053)
        
        # Assigning a Name to a Name (line 365):
        
        # Assigning a Name to a Name (line 365):
        # Getting the type of 'tuple_assignment_139052' (line 365)
        tuple_assignment_139052_140054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 16), 'tuple_assignment_139052')
        # Assigning a type to the variable 'd' (line 365)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 365, 22), 'd', tuple_assignment_139052_140054)
        # SSA join for if statement (line 360)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 371):
        
        # Assigning a Call to a Name (line 371):
        
        # Assigning a Call to a Name (line 371):
        
        # Call to max(...): (line 371)
        # Processing the call arguments (line 371)
        # Getting the type of 'h' (line 371)
        h_140056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 20), 'h', False)
        # Getting the type of 'lp_h' (line 371)
        lp_h_140057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 23), 'lp_h', False)
        # Processing the call keyword arguments (line 371)
        kwargs_140058 = {}
        # Getting the type of 'max' (line 371)
        max_140055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 16), 'max', False)
        # Calling max(args, kwargs) (line 371)
        max_call_result_140059 = invoke(stypy.reporting.localization.Localization(__file__, 371, 16), max_140055, *[h_140056, lp_h_140057], **kwargs_140058)
        
        # Assigning a type to the variable 'h' (line 371)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 371, 12), 'h', max_call_result_140059)
        
        # Assigning a Call to a Name (line 372):
        
        # Assigning a Call to a Name (line 372):
        
        # Assigning a Call to a Name (line 372):
        
        # Call to max(...): (line 372)
        # Processing the call arguments (line 372)
        # Getting the type of 'd' (line 372)
        d_140061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 20), 'd', False)
        # Getting the type of 'lp_bl' (line 372)
        lp_bl_140062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 23), 'lp_bl', False)
        # Processing the call keyword arguments (line 372)
        kwargs_140063 = {}
        # Getting the type of 'max' (line 372)
        max_140060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 16), 'max', False)
        # Calling max(args, kwargs) (line 372)
        max_call_result_140064 = invoke(stypy.reporting.localization.Localization(__file__, 372, 16), max_140060, *[d_140061, lp_bl_140062], **kwargs_140063)
        
        # Assigning a type to the variable 'd' (line 372)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 372, 12), 'd', max_call_result_140064)
        
        # Assigning a Tuple to a Subscript (line 374):
        
        # Assigning a Tuple to a Subscript (line 374):
        
        # Assigning a Tuple to a Subscript (line 374):
        
        # Obtaining an instance of the builtin type 'tuple' (line 374)
        tuple_140065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 374, 21), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 374)
        # Adding element type (line 374)
        # Getting the type of 'w' (line 374)
        w_140066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 21), 'w')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 374, 21), tuple_140065, w_140066)
        # Adding element type (line 374)
        # Getting the type of 'h' (line 374)
        h_140067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 24), 'h')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 374, 21), tuple_140065, h_140067)
        
        # Getting the type of 'whs' (line 374)
        whs_140068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 12), 'whs')
        # Getting the type of 'i' (line 374)
        i_140069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 16), 'i')
        # Storing an element on a container (line 374)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 374, 12), whs_140068, (i_140069, tuple_140065))
        
        # Assigning a BinOp to a Name (line 376):
        
        # Assigning a BinOp to a Name (line 376):
        
        # Assigning a BinOp to a Name (line 376):
        # Getting the type of 'h' (line 376)
        h_140070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 24), 'h')
        # Getting the type of 'd' (line 376)
        d_140071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 28), 'd')
        # Applying the binary operator '-' (line 376)
        result_sub_140072 = python_operator(stypy.reporting.localization.Localization(__file__, 376, 24), '-', h_140070, d_140071)
        
        # Getting the type of 'thisy' (line 376)
        thisy_140073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 33), 'thisy')
        # Applying the binary operator '-' (line 376)
        result_sub_140074 = python_operator(stypy.reporting.localization.Localization(__file__, 376, 23), '-', result_sub_140072, thisy_140073)
        
        # Assigning a type to the variable 'baseline' (line 376)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 376, 12), 'baseline', result_sub_140074)
        
        # Getting the type of 'thisy' (line 377)
        thisy_140075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 12), 'thisy')
        
        # Call to max(...): (line 377)
        # Processing the call arguments (line 377)
        # Getting the type of 'offsety' (line 377)
        offsety_140077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 25), 'offsety', False)
        # Getting the type of 'h' (line 377)
        h_140078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 35), 'h', False)
        # Getting the type of 'd' (line 377)
        d_140079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 39), 'd', False)
        # Applying the binary operator '-' (line 377)
        result_sub_140080 = python_operator(stypy.reporting.localization.Localization(__file__, 377, 35), '-', h_140078, d_140079)
        
        # Getting the type of 'self' (line 377)
        self_140081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 44), 'self', False)
        # Obtaining the member '_linespacing' of a type (line 377)
        _linespacing_140082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 377, 44), self_140081, '_linespacing')
        # Applying the binary operator '*' (line 377)
        result_mul_140083 = python_operator(stypy.reporting.localization.Localization(__file__, 377, 34), '*', result_sub_140080, _linespacing_140082)
        
        # Processing the call keyword arguments (line 377)
        kwargs_140084 = {}
        # Getting the type of 'max' (line 377)
        max_140076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 21), 'max', False)
        # Calling max(args, kwargs) (line 377)
        max_call_result_140085 = invoke(stypy.reporting.localization.Localization(__file__, 377, 21), max_140076, *[offsety_140077, result_mul_140083], **kwargs_140084)
        
        # Applying the binary operator '-=' (line 377)
        result_isub_140086 = python_operator(stypy.reporting.localization.Localization(__file__, 377, 12), '-=', thisy_140075, max_call_result_140085)
        # Assigning a type to the variable 'thisy' (line 377)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 377, 12), 'thisy', result_isub_140086)
        
        
        # Assigning a Tuple to a Subscript (line 378):
        
        # Assigning a Tuple to a Subscript (line 378):
        
        # Assigning a Tuple to a Subscript (line 378):
        
        # Obtaining an instance of the builtin type 'tuple' (line 378)
        tuple_140087 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 378, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 378)
        # Adding element type (line 378)
        # Getting the type of 'thisx' (line 378)
        thisx_140088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 29), 'thisx')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 378, 29), tuple_140087, thisx_140088)
        # Adding element type (line 378)
        # Getting the type of 'thisy' (line 378)
        thisy_140089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 36), 'thisy')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 378, 29), tuple_140087, thisy_140089)
        # Adding element type (line 378)
        # Getting the type of 'w' (line 378)
        w_140090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 43), 'w')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 378, 29), tuple_140087, w_140090)
        # Adding element type (line 378)
        # Getting the type of 'h' (line 378)
        h_140091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 46), 'h')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 378, 29), tuple_140087, h_140091)
        
        # Getting the type of 'horizLayout' (line 378)
        horizLayout_140092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 12), 'horizLayout')
        # Getting the type of 'i' (line 378)
        i_140093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 24), 'i')
        # Storing an element on a container (line 378)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 378, 12), horizLayout_140092, (i_140093, tuple_140087))
        
        # Getting the type of 'thisy' (line 379)
        thisy_140094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 12), 'thisy')
        # Getting the type of 'd' (line 379)
        d_140095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 21), 'd')
        # Applying the binary operator '-=' (line 379)
        result_isub_140096 = python_operator(stypy.reporting.localization.Localization(__file__, 379, 12), '-=', thisy_140094, d_140095)
        # Assigning a type to the variable 'thisy' (line 379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 379, 12), 'thisy', result_isub_140096)
        
        
        # Assigning a Call to a Name (line 380):
        
        # Assigning a Call to a Name (line 380):
        
        # Assigning a Call to a Name (line 380):
        
        # Call to max(...): (line 380)
        # Processing the call arguments (line 380)
        # Getting the type of 'width' (line 380)
        width_140098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 24), 'width', False)
        # Getting the type of 'w' (line 380)
        w_140099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 31), 'w', False)
        # Processing the call keyword arguments (line 380)
        kwargs_140100 = {}
        # Getting the type of 'max' (line 380)
        max_140097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 20), 'max', False)
        # Calling max(args, kwargs) (line 380)
        max_call_result_140101 = invoke(stypy.reporting.localization.Localization(__file__, 380, 20), max_140097, *[width_140098, w_140099], **kwargs_140100)
        
        # Assigning a type to the variable 'width' (line 380)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 380, 12), 'width', max_call_result_140101)
        
        # Assigning a Name to a Name (line 381):
        
        # Assigning a Name to a Name (line 381):
        
        # Assigning a Name to a Name (line 381):
        # Getting the type of 'd' (line 381)
        d_140102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 22), 'd')
        # Assigning a type to the variable 'descent' (line 381)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 381, 12), 'descent', d_140102)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Subscript to a Name (line 383):
        
        # Assigning a Subscript to a Name (line 383):
        
        # Assigning a Subscript to a Name (line 383):
        
        # Obtaining the type of the subscript
        int_140103 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 383, 31), 'int')
        
        # Obtaining the type of the subscript
        int_140104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 383, 27), 'int')
        # Getting the type of 'horizLayout' (line 383)
        horizLayout_140105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 15), 'horizLayout')
        # Obtaining the member '__getitem__' of a type (line 383)
        getitem___140106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 383, 15), horizLayout_140105, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 383)
        subscript_call_result_140107 = invoke(stypy.reporting.localization.Localization(__file__, 383, 15), getitem___140106, int_140104)
        
        # Obtaining the member '__getitem__' of a type (line 383)
        getitem___140108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 383, 15), subscript_call_result_140107, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 383)
        subscript_call_result_140109 = invoke(stypy.reporting.localization.Localization(__file__, 383, 15), getitem___140108, int_140103)
        
        # Assigning a type to the variable 'ymin' (line 383)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 383, 8), 'ymin', subscript_call_result_140109)
        
        # Assigning a BinOp to a Name (line 384):
        
        # Assigning a BinOp to a Name (line 384):
        
        # Assigning a BinOp to a Name (line 384):
        
        # Obtaining the type of the subscript
        int_140110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 384, 30), 'int')
        
        # Obtaining the type of the subscript
        int_140111 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 384, 27), 'int')
        # Getting the type of 'horizLayout' (line 384)
        horizLayout_140112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 15), 'horizLayout')
        # Obtaining the member '__getitem__' of a type (line 384)
        getitem___140113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 384, 15), horizLayout_140112, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 384)
        subscript_call_result_140114 = invoke(stypy.reporting.localization.Localization(__file__, 384, 15), getitem___140113, int_140111)
        
        # Obtaining the member '__getitem__' of a type (line 384)
        getitem___140115 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 384, 15), subscript_call_result_140114, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 384)
        subscript_call_result_140116 = invoke(stypy.reporting.localization.Localization(__file__, 384, 15), getitem___140115, int_140110)
        
        
        # Obtaining the type of the subscript
        int_140117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 384, 50), 'int')
        
        # Obtaining the type of the subscript
        int_140118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 384, 47), 'int')
        # Getting the type of 'horizLayout' (line 384)
        horizLayout_140119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 35), 'horizLayout')
        # Obtaining the member '__getitem__' of a type (line 384)
        getitem___140120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 384, 35), horizLayout_140119, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 384)
        subscript_call_result_140121 = invoke(stypy.reporting.localization.Localization(__file__, 384, 35), getitem___140120, int_140118)
        
        # Obtaining the member '__getitem__' of a type (line 384)
        getitem___140122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 384, 35), subscript_call_result_140121, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 384)
        subscript_call_result_140123 = invoke(stypy.reporting.localization.Localization(__file__, 384, 35), getitem___140122, int_140117)
        
        # Applying the binary operator '+' (line 384)
        result_add_140124 = python_operator(stypy.reporting.localization.Localization(__file__, 384, 15), '+', subscript_call_result_140116, subscript_call_result_140123)
        
        # Assigning a type to the variable 'ymax' (line 384)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 384, 8), 'ymax', result_add_140124)
        
        # Assigning a BinOp to a Name (line 385):
        
        # Assigning a BinOp to a Name (line 385):
        
        # Assigning a BinOp to a Name (line 385):
        # Getting the type of 'ymax' (line 385)
        ymax_140125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 17), 'ymax')
        # Getting the type of 'ymin' (line 385)
        ymin_140126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 24), 'ymin')
        # Applying the binary operator '-' (line 385)
        result_sub_140127 = python_operator(stypy.reporting.localization.Localization(__file__, 385, 17), '-', ymax_140125, ymin_140126)
        
        # Assigning a type to the variable 'height' (line 385)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 385, 8), 'height', result_sub_140127)
        
        # Assigning a BinOp to a Name (line 386):
        
        # Assigning a BinOp to a Name (line 386):
        
        # Assigning a BinOp to a Name (line 386):
        # Getting the type of 'xmin' (line 386)
        xmin_140128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 15), 'xmin')
        # Getting the type of 'width' (line 386)
        width_140129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 22), 'width')
        # Applying the binary operator '+' (line 386)
        result_add_140130 = python_operator(stypy.reporting.localization.Localization(__file__, 386, 15), '+', xmin_140128, width_140129)
        
        # Assigning a type to the variable 'xmax' (line 386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 8), 'xmax', result_add_140130)
        
        # Assigning a Call to a Name (line 389):
        
        # Assigning a Call to a Name (line 389):
        
        # Assigning a Call to a Name (line 389):
        
        # Call to rotate_deg(...): (line 389)
        # Processing the call arguments (line 389)
        
        # Call to get_rotation(...): (line 389)
        # Processing the call keyword arguments (line 389)
        kwargs_140137 = {}
        # Getting the type of 'self' (line 389)
        self_140135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 34), 'self', False)
        # Obtaining the member 'get_rotation' of a type (line 389)
        get_rotation_140136 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 389, 34), self_140135, 'get_rotation')
        # Calling get_rotation(args, kwargs) (line 389)
        get_rotation_call_result_140138 = invoke(stypy.reporting.localization.Localization(__file__, 389, 34), get_rotation_140136, *[], **kwargs_140137)
        
        # Processing the call keyword arguments (line 389)
        kwargs_140139 = {}
        
        # Call to Affine2D(...): (line 389)
        # Processing the call keyword arguments (line 389)
        kwargs_140132 = {}
        # Getting the type of 'Affine2D' (line 389)
        Affine2D_140131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 12), 'Affine2D', False)
        # Calling Affine2D(args, kwargs) (line 389)
        Affine2D_call_result_140133 = invoke(stypy.reporting.localization.Localization(__file__, 389, 12), Affine2D_140131, *[], **kwargs_140132)
        
        # Obtaining the member 'rotate_deg' of a type (line 389)
        rotate_deg_140134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 389, 12), Affine2D_call_result_140133, 'rotate_deg')
        # Calling rotate_deg(args, kwargs) (line 389)
        rotate_deg_call_result_140140 = invoke(stypy.reporting.localization.Localization(__file__, 389, 12), rotate_deg_140134, *[get_rotation_call_result_140138], **kwargs_140139)
        
        # Assigning a type to the variable 'M' (line 389)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 8), 'M', rotate_deg_call_result_140140)
        
        # Assigning a Call to a Name (line 391):
        
        # Assigning a Call to a Name (line 391):
        
        # Assigning a Call to a Name (line 391):
        
        # Call to zeros(...): (line 391)
        # Processing the call arguments (line 391)
        
        # Obtaining an instance of the builtin type 'tuple' (line 391)
        tuple_140143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 391, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 391)
        # Adding element type (line 391)
        
        # Call to len(...): (line 391)
        # Processing the call arguments (line 391)
        # Getting the type of 'lines' (line 391)
        lines_140145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 37), 'lines', False)
        # Processing the call keyword arguments (line 391)
        kwargs_140146 = {}
        # Getting the type of 'len' (line 391)
        len_140144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 33), 'len', False)
        # Calling len(args, kwargs) (line 391)
        len_call_result_140147 = invoke(stypy.reporting.localization.Localization(__file__, 391, 33), len_140144, *[lines_140145], **kwargs_140146)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 391, 33), tuple_140143, len_call_result_140147)
        # Adding element type (line 391)
        int_140148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 391, 45), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 391, 33), tuple_140143, int_140148)
        
        # Processing the call keyword arguments (line 391)
        kwargs_140149 = {}
        # Getting the type of 'np' (line 391)
        np_140141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 23), 'np', False)
        # Obtaining the member 'zeros' of a type (line 391)
        zeros_140142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 391, 23), np_140141, 'zeros')
        # Calling zeros(args, kwargs) (line 391)
        zeros_call_result_140150 = invoke(stypy.reporting.localization.Localization(__file__, 391, 23), zeros_140142, *[tuple_140143], **kwargs_140149)
        
        # Assigning a type to the variable 'offsetLayout' (line 391)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 391, 8), 'offsetLayout', zeros_call_result_140150)
        
        # Assigning a Subscript to a Subscript (line 392):
        
        # Assigning a Subscript to a Subscript (line 392):
        
        # Assigning a Subscript to a Subscript (line 392):
        
        # Obtaining the type of the subscript
        slice_140151 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 392, 26), None, None, None)
        int_140152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 392, 41), 'int')
        int_140153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 392, 43), 'int')
        slice_140154 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 392, 26), int_140152, int_140153, None)
        # Getting the type of 'horizLayout' (line 392)
        horizLayout_140155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 26), 'horizLayout')
        # Obtaining the member '__getitem__' of a type (line 392)
        getitem___140156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 392, 26), horizLayout_140155, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 392)
        subscript_call_result_140157 = invoke(stypy.reporting.localization.Localization(__file__, 392, 26), getitem___140156, (slice_140151, slice_140154))
        
        # Getting the type of 'offsetLayout' (line 392)
        offsetLayout_140158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 8), 'offsetLayout')
        slice_140159 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 392, 8), None, None, None)
        # Storing an element on a container (line 392)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 392, 8), offsetLayout_140158, (slice_140159, subscript_call_result_140157))
        
        
        
        # Call to len(...): (line 394)
        # Processing the call arguments (line 394)
        # Getting the type of 'lines' (line 394)
        lines_140161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 15), 'lines', False)
        # Processing the call keyword arguments (line 394)
        kwargs_140162 = {}
        # Getting the type of 'len' (line 394)
        len_140160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 11), 'len', False)
        # Calling len(args, kwargs) (line 394)
        len_call_result_140163 = invoke(stypy.reporting.localization.Localization(__file__, 394, 11), len_140160, *[lines_140161], **kwargs_140162)
        
        int_140164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 394, 24), 'int')
        # Applying the binary operator '>' (line 394)
        result_gt_140165 = python_operator(stypy.reporting.localization.Localization(__file__, 394, 11), '>', len_call_result_140163, int_140164)
        
        # Testing the type of an if condition (line 394)
        if_condition_140166 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 394, 8), result_gt_140165)
        # Assigning a type to the variable 'if_condition_140166' (line 394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 394, 8), 'if_condition_140166', if_condition_140166)
        # SSA begins for if statement (line 394)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 395):
        
        # Assigning a Call to a Name (line 395):
        
        # Assigning a Call to a Name (line 395):
        
        # Call to _get_multialignment(...): (line 395)
        # Processing the call keyword arguments (line 395)
        kwargs_140169 = {}
        # Getting the type of 'self' (line 395)
        self_140167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 21), 'self', False)
        # Obtaining the member '_get_multialignment' of a type (line 395)
        _get_multialignment_140168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 395, 21), self_140167, '_get_multialignment')
        # Calling _get_multialignment(args, kwargs) (line 395)
        _get_multialignment_call_result_140170 = invoke(stypy.reporting.localization.Localization(__file__, 395, 21), _get_multialignment_140168, *[], **kwargs_140169)
        
        # Assigning a type to the variable 'malign' (line 395)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 395, 12), 'malign', _get_multialignment_call_result_140170)
        
        
        # Getting the type of 'malign' (line 396)
        malign_140171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 15), 'malign')
        unicode_140172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 396, 25), 'unicode', u'center')
        # Applying the binary operator '==' (line 396)
        result_eq_140173 = python_operator(stypy.reporting.localization.Localization(__file__, 396, 15), '==', malign_140171, unicode_140172)
        
        # Testing the type of an if condition (line 396)
        if_condition_140174 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 396, 12), result_eq_140173)
        # Assigning a type to the variable 'if_condition_140174' (line 396)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 396, 12), 'if_condition_140174', if_condition_140174)
        # SSA begins for if statement (line 396)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'offsetLayout' (line 397)
        offsetLayout_140175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 16), 'offsetLayout')
        
        # Obtaining the type of the subscript
        slice_140176 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 397, 16), None, None, None)
        int_140177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 397, 32), 'int')
        # Getting the type of 'offsetLayout' (line 397)
        offsetLayout_140178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 16), 'offsetLayout')
        # Obtaining the member '__getitem__' of a type (line 397)
        getitem___140179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 397, 16), offsetLayout_140178, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 397)
        subscript_call_result_140180 = invoke(stypy.reporting.localization.Localization(__file__, 397, 16), getitem___140179, (slice_140176, int_140177))
        
        # Getting the type of 'width' (line 397)
        width_140181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 38), 'width')
        float_140182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 397, 46), 'float')
        # Applying the binary operator 'div' (line 397)
        result_div_140183 = python_operator(stypy.reporting.localization.Localization(__file__, 397, 38), 'div', width_140181, float_140182)
        
        
        # Obtaining the type of the subscript
        slice_140184 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 397, 52), None, None, None)
        int_140185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 397, 67), 'int')
        # Getting the type of 'horizLayout' (line 397)
        horizLayout_140186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 52), 'horizLayout')
        # Obtaining the member '__getitem__' of a type (line 397)
        getitem___140187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 397, 52), horizLayout_140186, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 397)
        subscript_call_result_140188 = invoke(stypy.reporting.localization.Localization(__file__, 397, 52), getitem___140187, (slice_140184, int_140185))
        
        float_140189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 397, 72), 'float')
        # Applying the binary operator 'div' (line 397)
        result_div_140190 = python_operator(stypy.reporting.localization.Localization(__file__, 397, 52), 'div', subscript_call_result_140188, float_140189)
        
        # Applying the binary operator '-' (line 397)
        result_sub_140191 = python_operator(stypy.reporting.localization.Localization(__file__, 397, 38), '-', result_div_140183, result_div_140190)
        
        # Applying the binary operator '+=' (line 397)
        result_iadd_140192 = python_operator(stypy.reporting.localization.Localization(__file__, 397, 16), '+=', subscript_call_result_140180, result_sub_140191)
        # Getting the type of 'offsetLayout' (line 397)
        offsetLayout_140193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 16), 'offsetLayout')
        slice_140194 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 397, 16), None, None, None)
        int_140195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 397, 32), 'int')
        # Storing an element on a container (line 397)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 397, 16), offsetLayout_140193, ((slice_140194, int_140195), result_iadd_140192))
        
        # SSA branch for the else part of an if statement (line 396)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'malign' (line 398)
        malign_140196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 17), 'malign')
        unicode_140197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 398, 27), 'unicode', u'right')
        # Applying the binary operator '==' (line 398)
        result_eq_140198 = python_operator(stypy.reporting.localization.Localization(__file__, 398, 17), '==', malign_140196, unicode_140197)
        
        # Testing the type of an if condition (line 398)
        if_condition_140199 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 398, 17), result_eq_140198)
        # Assigning a type to the variable 'if_condition_140199' (line 398)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 398, 17), 'if_condition_140199', if_condition_140199)
        # SSA begins for if statement (line 398)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'offsetLayout' (line 399)
        offsetLayout_140200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 16), 'offsetLayout')
        
        # Obtaining the type of the subscript
        slice_140201 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 399, 16), None, None, None)
        int_140202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 399, 32), 'int')
        # Getting the type of 'offsetLayout' (line 399)
        offsetLayout_140203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 16), 'offsetLayout')
        # Obtaining the member '__getitem__' of a type (line 399)
        getitem___140204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 399, 16), offsetLayout_140203, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 399)
        subscript_call_result_140205 = invoke(stypy.reporting.localization.Localization(__file__, 399, 16), getitem___140204, (slice_140201, int_140202))
        
        # Getting the type of 'width' (line 399)
        width_140206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 38), 'width')
        
        # Obtaining the type of the subscript
        slice_140207 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 399, 46), None, None, None)
        int_140208 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 399, 61), 'int')
        # Getting the type of 'horizLayout' (line 399)
        horizLayout_140209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 46), 'horizLayout')
        # Obtaining the member '__getitem__' of a type (line 399)
        getitem___140210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 399, 46), horizLayout_140209, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 399)
        subscript_call_result_140211 = invoke(stypy.reporting.localization.Localization(__file__, 399, 46), getitem___140210, (slice_140207, int_140208))
        
        # Applying the binary operator '-' (line 399)
        result_sub_140212 = python_operator(stypy.reporting.localization.Localization(__file__, 399, 38), '-', width_140206, subscript_call_result_140211)
        
        # Applying the binary operator '+=' (line 399)
        result_iadd_140213 = python_operator(stypy.reporting.localization.Localization(__file__, 399, 16), '+=', subscript_call_result_140205, result_sub_140212)
        # Getting the type of 'offsetLayout' (line 399)
        offsetLayout_140214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 16), 'offsetLayout')
        slice_140215 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 399, 16), None, None, None)
        int_140216 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 399, 32), 'int')
        # Storing an element on a container (line 399)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 399, 16), offsetLayout_140214, ((slice_140215, int_140216), result_iadd_140213))
        
        # SSA join for if statement (line 398)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 396)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 394)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 402):
        
        # Assigning a Call to a Name (line 402):
        
        # Assigning a Call to a Name (line 402):
        
        # Call to array(...): (line 402)
        # Processing the call arguments (line 402)
        
        # Obtaining an instance of the builtin type 'list' (line 403)
        list_140219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 403, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 403)
        # Adding element type (line 403)
        
        # Obtaining an instance of the builtin type 'tuple' (line 403)
        tuple_140220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 403, 14), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 403)
        # Adding element type (line 403)
        # Getting the type of 'xmin' (line 403)
        xmin_140221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 14), 'xmin', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 403, 14), tuple_140220, xmin_140221)
        # Adding element type (line 403)
        # Getting the type of 'ymin' (line 403)
        ymin_140222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 20), 'ymin', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 403, 14), tuple_140220, ymin_140222)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 403, 12), list_140219, tuple_140220)
        # Adding element type (line 403)
        
        # Obtaining an instance of the builtin type 'tuple' (line 403)
        tuple_140223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 403, 28), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 403)
        # Adding element type (line 403)
        # Getting the type of 'xmin' (line 403)
        xmin_140224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 28), 'xmin', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 403, 28), tuple_140223, xmin_140224)
        # Adding element type (line 403)
        # Getting the type of 'ymax' (line 403)
        ymax_140225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 34), 'ymax', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 403, 28), tuple_140223, ymax_140225)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 403, 12), list_140219, tuple_140223)
        # Adding element type (line 403)
        
        # Obtaining an instance of the builtin type 'tuple' (line 403)
        tuple_140226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 403, 42), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 403)
        # Adding element type (line 403)
        # Getting the type of 'xmax' (line 403)
        xmax_140227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 42), 'xmax', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 403, 42), tuple_140226, xmax_140227)
        # Adding element type (line 403)
        # Getting the type of 'ymax' (line 403)
        ymax_140228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 48), 'ymax', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 403, 42), tuple_140226, ymax_140228)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 403, 12), list_140219, tuple_140226)
        # Adding element type (line 403)
        
        # Obtaining an instance of the builtin type 'tuple' (line 403)
        tuple_140229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 403, 56), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 403)
        # Adding element type (line 403)
        # Getting the type of 'xmax' (line 403)
        xmax_140230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 56), 'xmax', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 403, 56), tuple_140229, xmax_140230)
        # Adding element type (line 403)
        # Getting the type of 'ymin' (line 403)
        ymin_140231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 62), 'ymin', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 403, 56), tuple_140229, ymin_140231)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 403, 12), list_140219, tuple_140229)
        
        # Getting the type of 'float' (line 403)
        float_140232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 70), 'float', False)
        # Processing the call keyword arguments (line 402)
        kwargs_140233 = {}
        # Getting the type of 'np' (line 402)
        np_140217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 23), 'np', False)
        # Obtaining the member 'array' of a type (line 402)
        array_140218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 402, 23), np_140217, 'array')
        # Calling array(args, kwargs) (line 402)
        array_call_result_140234 = invoke(stypy.reporting.localization.Localization(__file__, 402, 23), array_140218, *[list_140219, float_140232], **kwargs_140233)
        
        # Assigning a type to the variable 'cornersHoriz' (line 402)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 402, 8), 'cornersHoriz', array_call_result_140234)
        
        # Getting the type of 'cornersHoriz' (line 404)
        cornersHoriz_140235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 8), 'cornersHoriz')
        
        # Obtaining the type of the subscript
        slice_140236 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 404, 8), None, None, None)
        int_140237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 404, 24), 'int')
        # Getting the type of 'cornersHoriz' (line 404)
        cornersHoriz_140238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 8), 'cornersHoriz')
        # Obtaining the member '__getitem__' of a type (line 404)
        getitem___140239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 404, 8), cornersHoriz_140238, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 404)
        subscript_call_result_140240 = invoke(stypy.reporting.localization.Localization(__file__, 404, 8), getitem___140239, (slice_140236, int_140237))
        
        # Getting the type of 'descent' (line 404)
        descent_140241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 30), 'descent')
        # Applying the binary operator '-=' (line 404)
        result_isub_140242 = python_operator(stypy.reporting.localization.Localization(__file__, 404, 8), '-=', subscript_call_result_140240, descent_140241)
        # Getting the type of 'cornersHoriz' (line 404)
        cornersHoriz_140243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 8), 'cornersHoriz')
        slice_140244 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 404, 8), None, None, None)
        int_140245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 404, 24), 'int')
        # Storing an element on a container (line 404)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 404, 8), cornersHoriz_140243, ((slice_140244, int_140245), result_isub_140242))
        
        
        # Assigning a Call to a Name (line 407):
        
        # Assigning a Call to a Name (line 407):
        
        # Assigning a Call to a Name (line 407):
        
        # Call to transform(...): (line 407)
        # Processing the call arguments (line 407)
        # Getting the type of 'cornersHoriz' (line 407)
        cornersHoriz_140248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 407, 37), 'cornersHoriz', False)
        # Processing the call keyword arguments (line 407)
        kwargs_140249 = {}
        # Getting the type of 'M' (line 407)
        M_140246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 407, 25), 'M', False)
        # Obtaining the member 'transform' of a type (line 407)
        transform_140247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 407, 25), M_140246, 'transform')
        # Calling transform(args, kwargs) (line 407)
        transform_call_result_140250 = invoke(stypy.reporting.localization.Localization(__file__, 407, 25), transform_140247, *[cornersHoriz_140248], **kwargs_140249)
        
        # Assigning a type to the variable 'cornersRotated' (line 407)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 407, 8), 'cornersRotated', transform_call_result_140250)
        
        # Assigning a Subscript to a Name (line 409):
        
        # Assigning a Subscript to a Name (line 409):
        
        # Assigning a Subscript to a Name (line 409):
        
        # Obtaining the type of the subscript
        slice_140251 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 409, 14), None, None, None)
        int_140252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 409, 32), 'int')
        # Getting the type of 'cornersRotated' (line 409)
        cornersRotated_140253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 14), 'cornersRotated')
        # Obtaining the member '__getitem__' of a type (line 409)
        getitem___140254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 409, 14), cornersRotated_140253, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 409)
        subscript_call_result_140255 = invoke(stypy.reporting.localization.Localization(__file__, 409, 14), getitem___140254, (slice_140251, int_140252))
        
        # Assigning a type to the variable 'txs' (line 409)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 409, 8), 'txs', subscript_call_result_140255)
        
        # Assigning a Subscript to a Name (line 410):
        
        # Assigning a Subscript to a Name (line 410):
        
        # Assigning a Subscript to a Name (line 410):
        
        # Obtaining the type of the subscript
        slice_140256 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 410, 14), None, None, None)
        int_140257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 410, 32), 'int')
        # Getting the type of 'cornersRotated' (line 410)
        cornersRotated_140258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 14), 'cornersRotated')
        # Obtaining the member '__getitem__' of a type (line 410)
        getitem___140259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 14), cornersRotated_140258, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 410)
        subscript_call_result_140260 = invoke(stypy.reporting.localization.Localization(__file__, 410, 14), getitem___140259, (slice_140256, int_140257))
        
        # Assigning a type to the variable 'tys' (line 410)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 410, 8), 'tys', subscript_call_result_140260)
        
        # Assigning a Tuple to a Tuple (line 413):
        
        # Assigning a Call to a Name (line 413):
        
        # Assigning a Call to a Name (line 413):
        
        # Call to min(...): (line 413)
        # Processing the call keyword arguments (line 413)
        kwargs_140263 = {}
        # Getting the type of 'txs' (line 413)
        txs_140261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 21), 'txs', False)
        # Obtaining the member 'min' of a type (line 413)
        min_140262 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 413, 21), txs_140261, 'min')
        # Calling min(args, kwargs) (line 413)
        min_call_result_140264 = invoke(stypy.reporting.localization.Localization(__file__, 413, 21), min_140262, *[], **kwargs_140263)
        
        # Assigning a type to the variable 'tuple_assignment_139053' (line 413)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 413, 8), 'tuple_assignment_139053', min_call_result_140264)
        
        # Assigning a Call to a Name (line 413):
        
        # Assigning a Call to a Name (line 413):
        
        # Call to max(...): (line 413)
        # Processing the call keyword arguments (line 413)
        kwargs_140267 = {}
        # Getting the type of 'txs' (line 413)
        txs_140265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 32), 'txs', False)
        # Obtaining the member 'max' of a type (line 413)
        max_140266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 413, 32), txs_140265, 'max')
        # Calling max(args, kwargs) (line 413)
        max_call_result_140268 = invoke(stypy.reporting.localization.Localization(__file__, 413, 32), max_140266, *[], **kwargs_140267)
        
        # Assigning a type to the variable 'tuple_assignment_139054' (line 413)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 413, 8), 'tuple_assignment_139054', max_call_result_140268)
        
        # Assigning a Name to a Name (line 413):
        
        # Assigning a Name to a Name (line 413):
        # Getting the type of 'tuple_assignment_139053' (line 413)
        tuple_assignment_139053_140269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 8), 'tuple_assignment_139053')
        # Assigning a type to the variable 'xmin' (line 413)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 413, 8), 'xmin', tuple_assignment_139053_140269)
        
        # Assigning a Name to a Name (line 413):
        
        # Assigning a Name to a Name (line 413):
        # Getting the type of 'tuple_assignment_139054' (line 413)
        tuple_assignment_139054_140270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 8), 'tuple_assignment_139054')
        # Assigning a type to the variable 'xmax' (line 413)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 413, 14), 'xmax', tuple_assignment_139054_140270)
        
        # Assigning a Tuple to a Tuple (line 414):
        
        # Assigning a Call to a Name (line 414):
        
        # Assigning a Call to a Name (line 414):
        
        # Call to min(...): (line 414)
        # Processing the call keyword arguments (line 414)
        kwargs_140273 = {}
        # Getting the type of 'tys' (line 414)
        tys_140271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 21), 'tys', False)
        # Obtaining the member 'min' of a type (line 414)
        min_140272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 414, 21), tys_140271, 'min')
        # Calling min(args, kwargs) (line 414)
        min_call_result_140274 = invoke(stypy.reporting.localization.Localization(__file__, 414, 21), min_140272, *[], **kwargs_140273)
        
        # Assigning a type to the variable 'tuple_assignment_139055' (line 414)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 414, 8), 'tuple_assignment_139055', min_call_result_140274)
        
        # Assigning a Call to a Name (line 414):
        
        # Assigning a Call to a Name (line 414):
        
        # Call to max(...): (line 414)
        # Processing the call keyword arguments (line 414)
        kwargs_140277 = {}
        # Getting the type of 'tys' (line 414)
        tys_140275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 32), 'tys', False)
        # Obtaining the member 'max' of a type (line 414)
        max_140276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 414, 32), tys_140275, 'max')
        # Calling max(args, kwargs) (line 414)
        max_call_result_140278 = invoke(stypy.reporting.localization.Localization(__file__, 414, 32), max_140276, *[], **kwargs_140277)
        
        # Assigning a type to the variable 'tuple_assignment_139056' (line 414)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 414, 8), 'tuple_assignment_139056', max_call_result_140278)
        
        # Assigning a Name to a Name (line 414):
        
        # Assigning a Name to a Name (line 414):
        # Getting the type of 'tuple_assignment_139055' (line 414)
        tuple_assignment_139055_140279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 8), 'tuple_assignment_139055')
        # Assigning a type to the variable 'ymin' (line 414)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 414, 8), 'ymin', tuple_assignment_139055_140279)
        
        # Assigning a Name to a Name (line 414):
        
        # Assigning a Name to a Name (line 414):
        # Getting the type of 'tuple_assignment_139056' (line 414)
        tuple_assignment_139056_140280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 8), 'tuple_assignment_139056')
        # Assigning a type to the variable 'ymax' (line 414)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 414, 14), 'ymax', tuple_assignment_139056_140280)
        
        # Assigning a BinOp to a Name (line 415):
        
        # Assigning a BinOp to a Name (line 415):
        
        # Assigning a BinOp to a Name (line 415):
        # Getting the type of 'xmax' (line 415)
        xmax_140281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 16), 'xmax')
        # Getting the type of 'xmin' (line 415)
        xmin_140282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 23), 'xmin')
        # Applying the binary operator '-' (line 415)
        result_sub_140283 = python_operator(stypy.reporting.localization.Localization(__file__, 415, 16), '-', xmax_140281, xmin_140282)
        
        # Assigning a type to the variable 'width' (line 415)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 415, 8), 'width', result_sub_140283)
        
        # Assigning a BinOp to a Name (line 416):
        
        # Assigning a BinOp to a Name (line 416):
        
        # Assigning a BinOp to a Name (line 416):
        # Getting the type of 'ymax' (line 416)
        ymax_140284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 17), 'ymax')
        # Getting the type of 'ymin' (line 416)
        ymin_140285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 24), 'ymin')
        # Applying the binary operator '-' (line 416)
        result_sub_140286 = python_operator(stypy.reporting.localization.Localization(__file__, 416, 17), '-', ymax_140284, ymin_140285)
        
        # Assigning a type to the variable 'height' (line 416)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 416, 8), 'height', result_sub_140286)
        
        # Assigning a Attribute to a Name (line 420):
        
        # Assigning a Attribute to a Name (line 420):
        
        # Assigning a Attribute to a Name (line 420):
        # Getting the type of 'self' (line 420)
        self_140287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 17), 'self')
        # Obtaining the member '_horizontalalignment' of a type (line 420)
        _horizontalalignment_140288 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 420, 17), self_140287, '_horizontalalignment')
        # Assigning a type to the variable 'halign' (line 420)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 420, 8), 'halign', _horizontalalignment_140288)
        
        # Assigning a Attribute to a Name (line 421):
        
        # Assigning a Attribute to a Name (line 421):
        
        # Assigning a Attribute to a Name (line 421):
        # Getting the type of 'self' (line 421)
        self_140289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 17), 'self')
        # Obtaining the member '_verticalalignment' of a type (line 421)
        _verticalalignment_140290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 421, 17), self_140289, '_verticalalignment')
        # Assigning a type to the variable 'valign' (line 421)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 421, 8), 'valign', _verticalalignment_140290)
        
        # Assigning a Call to a Name (line 423):
        
        # Assigning a Call to a Name (line 423):
        
        # Assigning a Call to a Name (line 423):
        
        # Call to get_rotation_mode(...): (line 423)
        # Processing the call keyword arguments (line 423)
        kwargs_140293 = {}
        # Getting the type of 'self' (line 423)
        self_140291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 24), 'self', False)
        # Obtaining the member 'get_rotation_mode' of a type (line 423)
        get_rotation_mode_140292 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 423, 24), self_140291, 'get_rotation_mode')
        # Calling get_rotation_mode(args, kwargs) (line 423)
        get_rotation_mode_call_result_140294 = invoke(stypy.reporting.localization.Localization(__file__, 423, 24), get_rotation_mode_140292, *[], **kwargs_140293)
        
        # Assigning a type to the variable 'rotation_mode' (line 423)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 423, 8), 'rotation_mode', get_rotation_mode_call_result_140294)
        
        
        # Getting the type of 'rotation_mode' (line 424)
        rotation_mode_140295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 11), 'rotation_mode')
        unicode_140296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 424, 28), 'unicode', u'anchor')
        # Applying the binary operator '!=' (line 424)
        result_ne_140297 = python_operator(stypy.reporting.localization.Localization(__file__, 424, 11), '!=', rotation_mode_140295, unicode_140296)
        
        # Testing the type of an if condition (line 424)
        if_condition_140298 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 424, 8), result_ne_140297)
        # Assigning a type to the variable 'if_condition_140298' (line 424)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 424, 8), 'if_condition_140298', if_condition_140298)
        # SSA begins for if statement (line 424)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'halign' (line 427)
        halign_140299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 15), 'halign')
        unicode_140300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 427, 25), 'unicode', u'center')
        # Applying the binary operator '==' (line 427)
        result_eq_140301 = python_operator(stypy.reporting.localization.Localization(__file__, 427, 15), '==', halign_140299, unicode_140300)
        
        # Testing the type of an if condition (line 427)
        if_condition_140302 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 427, 12), result_eq_140301)
        # Assigning a type to the variable 'if_condition_140302' (line 427)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 427, 12), 'if_condition_140302', if_condition_140302)
        # SSA begins for if statement (line 427)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 428):
        
        # Assigning a BinOp to a Name (line 428):
        
        # Assigning a BinOp to a Name (line 428):
        # Getting the type of 'xmin' (line 428)
        xmin_140303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 27), 'xmin')
        # Getting the type of 'width' (line 428)
        width_140304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 34), 'width')
        float_140305 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 428, 42), 'float')
        # Applying the binary operator 'div' (line 428)
        result_div_140306 = python_operator(stypy.reporting.localization.Localization(__file__, 428, 34), 'div', width_140304, float_140305)
        
        # Applying the binary operator '+' (line 428)
        result_add_140307 = python_operator(stypy.reporting.localization.Localization(__file__, 428, 27), '+', xmin_140303, result_div_140306)
        
        # Assigning a type to the variable 'offsetx' (line 428)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 428, 16), 'offsetx', result_add_140307)
        # SSA branch for the else part of an if statement (line 427)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'halign' (line 429)
        halign_140308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 17), 'halign')
        unicode_140309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 429, 27), 'unicode', u'right')
        # Applying the binary operator '==' (line 429)
        result_eq_140310 = python_operator(stypy.reporting.localization.Localization(__file__, 429, 17), '==', halign_140308, unicode_140309)
        
        # Testing the type of an if condition (line 429)
        if_condition_140311 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 429, 17), result_eq_140310)
        # Assigning a type to the variable 'if_condition_140311' (line 429)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 429, 17), 'if_condition_140311', if_condition_140311)
        # SSA begins for if statement (line 429)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 430):
        
        # Assigning a BinOp to a Name (line 430):
        
        # Assigning a BinOp to a Name (line 430):
        # Getting the type of 'xmin' (line 430)
        xmin_140312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 27), 'xmin')
        # Getting the type of 'width' (line 430)
        width_140313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 34), 'width')
        # Applying the binary operator '+' (line 430)
        result_add_140314 = python_operator(stypy.reporting.localization.Localization(__file__, 430, 27), '+', xmin_140312, width_140313)
        
        # Assigning a type to the variable 'offsetx' (line 430)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 430, 16), 'offsetx', result_add_140314)
        # SSA branch for the else part of an if statement (line 429)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 432):
        
        # Assigning a Name to a Name (line 432):
        
        # Assigning a Name to a Name (line 432):
        # Getting the type of 'xmin' (line 432)
        xmin_140315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 26), 'xmin')
        # Assigning a type to the variable 'offsetx' (line 432)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 432, 16), 'offsetx', xmin_140315)
        # SSA join for if statement (line 429)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 427)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'valign' (line 434)
        valign_140316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 15), 'valign')
        unicode_140317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 434, 25), 'unicode', u'center')
        # Applying the binary operator '==' (line 434)
        result_eq_140318 = python_operator(stypy.reporting.localization.Localization(__file__, 434, 15), '==', valign_140316, unicode_140317)
        
        # Testing the type of an if condition (line 434)
        if_condition_140319 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 434, 12), result_eq_140318)
        # Assigning a type to the variable 'if_condition_140319' (line 434)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 434, 12), 'if_condition_140319', if_condition_140319)
        # SSA begins for if statement (line 434)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 435):
        
        # Assigning a BinOp to a Name (line 435):
        
        # Assigning a BinOp to a Name (line 435):
        # Getting the type of 'ymin' (line 435)
        ymin_140320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 27), 'ymin')
        # Getting the type of 'height' (line 435)
        height_140321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 34), 'height')
        float_140322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 435, 43), 'float')
        # Applying the binary operator 'div' (line 435)
        result_div_140323 = python_operator(stypy.reporting.localization.Localization(__file__, 435, 34), 'div', height_140321, float_140322)
        
        # Applying the binary operator '+' (line 435)
        result_add_140324 = python_operator(stypy.reporting.localization.Localization(__file__, 435, 27), '+', ymin_140320, result_div_140323)
        
        # Assigning a type to the variable 'offsety' (line 435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 16), 'offsety', result_add_140324)
        # SSA branch for the else part of an if statement (line 434)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'valign' (line 436)
        valign_140325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 17), 'valign')
        unicode_140326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 436, 27), 'unicode', u'top')
        # Applying the binary operator '==' (line 436)
        result_eq_140327 = python_operator(stypy.reporting.localization.Localization(__file__, 436, 17), '==', valign_140325, unicode_140326)
        
        # Testing the type of an if condition (line 436)
        if_condition_140328 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 436, 17), result_eq_140327)
        # Assigning a type to the variable 'if_condition_140328' (line 436)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 436, 17), 'if_condition_140328', if_condition_140328)
        # SSA begins for if statement (line 436)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 437):
        
        # Assigning a BinOp to a Name (line 437):
        
        # Assigning a BinOp to a Name (line 437):
        # Getting the type of 'ymin' (line 437)
        ymin_140329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 437, 27), 'ymin')
        # Getting the type of 'height' (line 437)
        height_140330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 437, 34), 'height')
        # Applying the binary operator '+' (line 437)
        result_add_140331 = python_operator(stypy.reporting.localization.Localization(__file__, 437, 27), '+', ymin_140329, height_140330)
        
        # Assigning a type to the variable 'offsety' (line 437)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 437, 16), 'offsety', result_add_140331)
        # SSA branch for the else part of an if statement (line 436)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'valign' (line 438)
        valign_140332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 17), 'valign')
        unicode_140333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 438, 27), 'unicode', u'baseline')
        # Applying the binary operator '==' (line 438)
        result_eq_140334 = python_operator(stypy.reporting.localization.Localization(__file__, 438, 17), '==', valign_140332, unicode_140333)
        
        # Testing the type of an if condition (line 438)
        if_condition_140335 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 438, 17), result_eq_140334)
        # Assigning a type to the variable 'if_condition_140335' (line 438)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 438, 17), 'if_condition_140335', if_condition_140335)
        # SSA begins for if statement (line 438)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 439):
        
        # Assigning a BinOp to a Name (line 439):
        
        # Assigning a BinOp to a Name (line 439):
        # Getting the type of 'ymin' (line 439)
        ymin_140336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 27), 'ymin')
        # Getting the type of 'height' (line 439)
        height_140337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 34), 'height')
        # Applying the binary operator '+' (line 439)
        result_add_140338 = python_operator(stypy.reporting.localization.Localization(__file__, 439, 27), '+', ymin_140336, height_140337)
        
        # Getting the type of 'baseline' (line 439)
        baseline_140339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 44), 'baseline')
        # Applying the binary operator '-' (line 439)
        result_sub_140340 = python_operator(stypy.reporting.localization.Localization(__file__, 439, 26), '-', result_add_140338, baseline_140339)
        
        # Assigning a type to the variable 'offsety' (line 439)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 439, 16), 'offsety', result_sub_140340)
        # SSA branch for the else part of an if statement (line 438)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'valign' (line 440)
        valign_140341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 17), 'valign')
        unicode_140342 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 440, 27), 'unicode', u'center_baseline')
        # Applying the binary operator '==' (line 440)
        result_eq_140343 = python_operator(stypy.reporting.localization.Localization(__file__, 440, 17), '==', valign_140341, unicode_140342)
        
        # Testing the type of an if condition (line 440)
        if_condition_140344 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 440, 17), result_eq_140343)
        # Assigning a type to the variable 'if_condition_140344' (line 440)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 440, 17), 'if_condition_140344', if_condition_140344)
        # SSA begins for if statement (line 440)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 441):
        
        # Assigning a BinOp to a Name (line 441):
        
        # Assigning a BinOp to a Name (line 441):
        # Getting the type of 'ymin' (line 441)
        ymin_140345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 26), 'ymin')
        # Getting the type of 'height' (line 441)
        height_140346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 33), 'height')
        # Applying the binary operator '+' (line 441)
        result_add_140347 = python_operator(stypy.reporting.localization.Localization(__file__, 441, 26), '+', ymin_140345, height_140346)
        
        # Getting the type of 'baseline' (line 441)
        baseline_140348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 42), 'baseline')
        float_140349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 441, 53), 'float')
        # Applying the binary operator 'div' (line 441)
        result_div_140350 = python_operator(stypy.reporting.localization.Localization(__file__, 441, 42), 'div', baseline_140348, float_140349)
        
        # Applying the binary operator '-' (line 441)
        result_sub_140351 = python_operator(stypy.reporting.localization.Localization(__file__, 441, 40), '-', result_add_140347, result_div_140350)
        
        # Assigning a type to the variable 'offsety' (line 441)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 441, 16), 'offsety', result_sub_140351)
        # SSA branch for the else part of an if statement (line 440)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 443):
        
        # Assigning a Name to a Name (line 443):
        
        # Assigning a Name to a Name (line 443):
        # Getting the type of 'ymin' (line 443)
        ymin_140352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 26), 'ymin')
        # Assigning a type to the variable 'offsety' (line 443)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 443, 16), 'offsety', ymin_140352)
        # SSA join for if statement (line 440)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 438)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 436)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 434)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 424)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Subscript to a Tuple (line 445):
        
        # Assigning a Subscript to a Name (line 445):
        
        # Assigning a Subscript to a Name (line 445):
        
        # Obtaining the type of the subscript
        int_140353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 445, 12), 'int')
        
        # Obtaining the type of the subscript
        int_140354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 445, 40), 'int')
        # Getting the type of 'cornersHoriz' (line 445)
        cornersHoriz_140355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 27), 'cornersHoriz')
        # Obtaining the member '__getitem__' of a type (line 445)
        getitem___140356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 27), cornersHoriz_140355, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 445)
        subscript_call_result_140357 = invoke(stypy.reporting.localization.Localization(__file__, 445, 27), getitem___140356, int_140354)
        
        # Obtaining the member '__getitem__' of a type (line 445)
        getitem___140358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 12), subscript_call_result_140357, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 445)
        subscript_call_result_140359 = invoke(stypy.reporting.localization.Localization(__file__, 445, 12), getitem___140358, int_140353)
        
        # Assigning a type to the variable 'tuple_var_assignment_139057' (line 445)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 445, 12), 'tuple_var_assignment_139057', subscript_call_result_140359)
        
        # Assigning a Subscript to a Name (line 445):
        
        # Assigning a Subscript to a Name (line 445):
        
        # Obtaining the type of the subscript
        int_140360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 445, 12), 'int')
        
        # Obtaining the type of the subscript
        int_140361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 445, 40), 'int')
        # Getting the type of 'cornersHoriz' (line 445)
        cornersHoriz_140362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 27), 'cornersHoriz')
        # Obtaining the member '__getitem__' of a type (line 445)
        getitem___140363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 27), cornersHoriz_140362, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 445)
        subscript_call_result_140364 = invoke(stypy.reporting.localization.Localization(__file__, 445, 27), getitem___140363, int_140361)
        
        # Obtaining the member '__getitem__' of a type (line 445)
        getitem___140365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 12), subscript_call_result_140364, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 445)
        subscript_call_result_140366 = invoke(stypy.reporting.localization.Localization(__file__, 445, 12), getitem___140365, int_140360)
        
        # Assigning a type to the variable 'tuple_var_assignment_139058' (line 445)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 445, 12), 'tuple_var_assignment_139058', subscript_call_result_140366)
        
        # Assigning a Name to a Name (line 445):
        
        # Assigning a Name to a Name (line 445):
        # Getting the type of 'tuple_var_assignment_139057' (line 445)
        tuple_var_assignment_139057_140367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 12), 'tuple_var_assignment_139057')
        # Assigning a type to the variable 'xmin1' (line 445)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 445, 12), 'xmin1', tuple_var_assignment_139057_140367)
        
        # Assigning a Name to a Name (line 445):
        
        # Assigning a Name to a Name (line 445):
        # Getting the type of 'tuple_var_assignment_139058' (line 445)
        tuple_var_assignment_139058_140368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 12), 'tuple_var_assignment_139058')
        # Assigning a type to the variable 'ymin1' (line 445)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 445, 19), 'ymin1', tuple_var_assignment_139058_140368)
        
        # Assigning a Subscript to a Tuple (line 446):
        
        # Assigning a Subscript to a Name (line 446):
        
        # Assigning a Subscript to a Name (line 446):
        
        # Obtaining the type of the subscript
        int_140369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 446, 12), 'int')
        
        # Obtaining the type of the subscript
        int_140370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 446, 40), 'int')
        # Getting the type of 'cornersHoriz' (line 446)
        cornersHoriz_140371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 27), 'cornersHoriz')
        # Obtaining the member '__getitem__' of a type (line 446)
        getitem___140372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 446, 27), cornersHoriz_140371, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 446)
        subscript_call_result_140373 = invoke(stypy.reporting.localization.Localization(__file__, 446, 27), getitem___140372, int_140370)
        
        # Obtaining the member '__getitem__' of a type (line 446)
        getitem___140374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 446, 12), subscript_call_result_140373, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 446)
        subscript_call_result_140375 = invoke(stypy.reporting.localization.Localization(__file__, 446, 12), getitem___140374, int_140369)
        
        # Assigning a type to the variable 'tuple_var_assignment_139059' (line 446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 446, 12), 'tuple_var_assignment_139059', subscript_call_result_140375)
        
        # Assigning a Subscript to a Name (line 446):
        
        # Assigning a Subscript to a Name (line 446):
        
        # Obtaining the type of the subscript
        int_140376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 446, 12), 'int')
        
        # Obtaining the type of the subscript
        int_140377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 446, 40), 'int')
        # Getting the type of 'cornersHoriz' (line 446)
        cornersHoriz_140378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 27), 'cornersHoriz')
        # Obtaining the member '__getitem__' of a type (line 446)
        getitem___140379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 446, 27), cornersHoriz_140378, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 446)
        subscript_call_result_140380 = invoke(stypy.reporting.localization.Localization(__file__, 446, 27), getitem___140379, int_140377)
        
        # Obtaining the member '__getitem__' of a type (line 446)
        getitem___140381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 446, 12), subscript_call_result_140380, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 446)
        subscript_call_result_140382 = invoke(stypy.reporting.localization.Localization(__file__, 446, 12), getitem___140381, int_140376)
        
        # Assigning a type to the variable 'tuple_var_assignment_139060' (line 446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 446, 12), 'tuple_var_assignment_139060', subscript_call_result_140382)
        
        # Assigning a Name to a Name (line 446):
        
        # Assigning a Name to a Name (line 446):
        # Getting the type of 'tuple_var_assignment_139059' (line 446)
        tuple_var_assignment_139059_140383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 12), 'tuple_var_assignment_139059')
        # Assigning a type to the variable 'xmax1' (line 446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 446, 12), 'xmax1', tuple_var_assignment_139059_140383)
        
        # Assigning a Name to a Name (line 446):
        
        # Assigning a Name to a Name (line 446):
        # Getting the type of 'tuple_var_assignment_139060' (line 446)
        tuple_var_assignment_139060_140384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 12), 'tuple_var_assignment_139060')
        # Assigning a type to the variable 'ymax1' (line 446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 446, 19), 'ymax1', tuple_var_assignment_139060_140384)
        
        
        # Getting the type of 'halign' (line 448)
        halign_140385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 15), 'halign')
        unicode_140386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 448, 25), 'unicode', u'center')
        # Applying the binary operator '==' (line 448)
        result_eq_140387 = python_operator(stypy.reporting.localization.Localization(__file__, 448, 15), '==', halign_140385, unicode_140386)
        
        # Testing the type of an if condition (line 448)
        if_condition_140388 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 448, 12), result_eq_140387)
        # Assigning a type to the variable 'if_condition_140388' (line 448)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 448, 12), 'if_condition_140388', if_condition_140388)
        # SSA begins for if statement (line 448)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 449):
        
        # Assigning a BinOp to a Name (line 449):
        
        # Assigning a BinOp to a Name (line 449):
        # Getting the type of 'xmin1' (line 449)
        xmin1_140389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 27), 'xmin1')
        # Getting the type of 'xmax1' (line 449)
        xmax1_140390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 35), 'xmax1')
        # Applying the binary operator '+' (line 449)
        result_add_140391 = python_operator(stypy.reporting.localization.Localization(__file__, 449, 27), '+', xmin1_140389, xmax1_140390)
        
        float_140392 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 449, 44), 'float')
        # Applying the binary operator 'div' (line 449)
        result_div_140393 = python_operator(stypy.reporting.localization.Localization(__file__, 449, 26), 'div', result_add_140391, float_140392)
        
        # Assigning a type to the variable 'offsetx' (line 449)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 449, 16), 'offsetx', result_div_140393)
        # SSA branch for the else part of an if statement (line 448)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'halign' (line 450)
        halign_140394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 17), 'halign')
        unicode_140395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 450, 27), 'unicode', u'right')
        # Applying the binary operator '==' (line 450)
        result_eq_140396 = python_operator(stypy.reporting.localization.Localization(__file__, 450, 17), '==', halign_140394, unicode_140395)
        
        # Testing the type of an if condition (line 450)
        if_condition_140397 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 450, 17), result_eq_140396)
        # Assigning a type to the variable 'if_condition_140397' (line 450)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 450, 17), 'if_condition_140397', if_condition_140397)
        # SSA begins for if statement (line 450)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 451):
        
        # Assigning a Name to a Name (line 451):
        
        # Assigning a Name to a Name (line 451):
        # Getting the type of 'xmax1' (line 451)
        xmax1_140398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 451, 26), 'xmax1')
        # Assigning a type to the variable 'offsetx' (line 451)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 451, 16), 'offsetx', xmax1_140398)
        # SSA branch for the else part of an if statement (line 450)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 453):
        
        # Assigning a Name to a Name (line 453):
        
        # Assigning a Name to a Name (line 453):
        # Getting the type of 'xmin1' (line 453)
        xmin1_140399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 453, 26), 'xmin1')
        # Assigning a type to the variable 'offsetx' (line 453)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 453, 16), 'offsetx', xmin1_140399)
        # SSA join for if statement (line 450)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 448)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'valign' (line 455)
        valign_140400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 15), 'valign')
        unicode_140401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 455, 25), 'unicode', u'center')
        # Applying the binary operator '==' (line 455)
        result_eq_140402 = python_operator(stypy.reporting.localization.Localization(__file__, 455, 15), '==', valign_140400, unicode_140401)
        
        # Testing the type of an if condition (line 455)
        if_condition_140403 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 455, 12), result_eq_140402)
        # Assigning a type to the variable 'if_condition_140403' (line 455)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 455, 12), 'if_condition_140403', if_condition_140403)
        # SSA begins for if statement (line 455)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 456):
        
        # Assigning a BinOp to a Name (line 456):
        
        # Assigning a BinOp to a Name (line 456):
        # Getting the type of 'ymin1' (line 456)
        ymin1_140404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 27), 'ymin1')
        # Getting the type of 'ymax1' (line 456)
        ymax1_140405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 35), 'ymax1')
        # Applying the binary operator '+' (line 456)
        result_add_140406 = python_operator(stypy.reporting.localization.Localization(__file__, 456, 27), '+', ymin1_140404, ymax1_140405)
        
        float_140407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 456, 44), 'float')
        # Applying the binary operator 'div' (line 456)
        result_div_140408 = python_operator(stypy.reporting.localization.Localization(__file__, 456, 26), 'div', result_add_140406, float_140407)
        
        # Assigning a type to the variable 'offsety' (line 456)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 456, 16), 'offsety', result_div_140408)
        # SSA branch for the else part of an if statement (line 455)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'valign' (line 457)
        valign_140409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 457, 17), 'valign')
        unicode_140410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 457, 27), 'unicode', u'top')
        # Applying the binary operator '==' (line 457)
        result_eq_140411 = python_operator(stypy.reporting.localization.Localization(__file__, 457, 17), '==', valign_140409, unicode_140410)
        
        # Testing the type of an if condition (line 457)
        if_condition_140412 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 457, 17), result_eq_140411)
        # Assigning a type to the variable 'if_condition_140412' (line 457)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 457, 17), 'if_condition_140412', if_condition_140412)
        # SSA begins for if statement (line 457)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 458):
        
        # Assigning a Name to a Name (line 458):
        
        # Assigning a Name to a Name (line 458):
        # Getting the type of 'ymax1' (line 458)
        ymax1_140413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 26), 'ymax1')
        # Assigning a type to the variable 'offsety' (line 458)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 458, 16), 'offsety', ymax1_140413)
        # SSA branch for the else part of an if statement (line 457)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'valign' (line 459)
        valign_140414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 17), 'valign')
        unicode_140415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 459, 27), 'unicode', u'baseline')
        # Applying the binary operator '==' (line 459)
        result_eq_140416 = python_operator(stypy.reporting.localization.Localization(__file__, 459, 17), '==', valign_140414, unicode_140415)
        
        # Testing the type of an if condition (line 459)
        if_condition_140417 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 459, 17), result_eq_140416)
        # Assigning a type to the variable 'if_condition_140417' (line 459)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 459, 17), 'if_condition_140417', if_condition_140417)
        # SSA begins for if statement (line 459)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 460):
        
        # Assigning a BinOp to a Name (line 460):
        
        # Assigning a BinOp to a Name (line 460):
        # Getting the type of 'ymax1' (line 460)
        ymax1_140418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 26), 'ymax1')
        # Getting the type of 'baseline' (line 460)
        baseline_140419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 34), 'baseline')
        # Applying the binary operator '-' (line 460)
        result_sub_140420 = python_operator(stypy.reporting.localization.Localization(__file__, 460, 26), '-', ymax1_140418, baseline_140419)
        
        # Assigning a type to the variable 'offsety' (line 460)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 460, 16), 'offsety', result_sub_140420)
        # SSA branch for the else part of an if statement (line 459)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'valign' (line 461)
        valign_140421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 17), 'valign')
        unicode_140422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 461, 27), 'unicode', u'center_baseline')
        # Applying the binary operator '==' (line 461)
        result_eq_140423 = python_operator(stypy.reporting.localization.Localization(__file__, 461, 17), '==', valign_140421, unicode_140422)
        
        # Testing the type of an if condition (line 461)
        if_condition_140424 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 461, 17), result_eq_140423)
        # Assigning a type to the variable 'if_condition_140424' (line 461)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 461, 17), 'if_condition_140424', if_condition_140424)
        # SSA begins for if statement (line 461)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 462):
        
        # Assigning a BinOp to a Name (line 462):
        
        # Assigning a BinOp to a Name (line 462):
        # Getting the type of 'ymin1' (line 462)
        ymin1_140425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 27), 'ymin1')
        # Getting the type of 'ymax1' (line 462)
        ymax1_140426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 35), 'ymax1')
        # Applying the binary operator '+' (line 462)
        result_add_140427 = python_operator(stypy.reporting.localization.Localization(__file__, 462, 27), '+', ymin1_140425, ymax1_140426)
        
        # Getting the type of 'baseline' (line 462)
        baseline_140428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 43), 'baseline')
        # Applying the binary operator '-' (line 462)
        result_sub_140429 = python_operator(stypy.reporting.localization.Localization(__file__, 462, 41), '-', result_add_140427, baseline_140428)
        
        float_140430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 462, 55), 'float')
        # Applying the binary operator 'div' (line 462)
        result_div_140431 = python_operator(stypy.reporting.localization.Localization(__file__, 462, 26), 'div', result_sub_140429, float_140430)
        
        # Assigning a type to the variable 'offsety' (line 462)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 462, 16), 'offsety', result_div_140431)
        # SSA branch for the else part of an if statement (line 461)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 464):
        
        # Assigning a Name to a Name (line 464):
        
        # Assigning a Name to a Name (line 464):
        # Getting the type of 'ymin1' (line 464)
        ymin1_140432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 26), 'ymin1')
        # Assigning a type to the variable 'offsety' (line 464)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 464, 16), 'offsety', ymin1_140432)
        # SSA join for if statement (line 461)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 459)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 457)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 455)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 466):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to transform_point(...): (line 466)
        # Processing the call arguments (line 466)
        
        # Obtaining an instance of the builtin type 'tuple' (line 466)
        tuple_140435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 466, 50), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 466)
        # Adding element type (line 466)
        # Getting the type of 'offsetx' (line 466)
        offsetx_140436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 50), 'offsetx', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 466, 50), tuple_140435, offsetx_140436)
        # Adding element type (line 466)
        # Getting the type of 'offsety' (line 466)
        offsety_140437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 59), 'offsety', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 466, 50), tuple_140435, offsety_140437)
        
        # Processing the call keyword arguments (line 466)
        kwargs_140438 = {}
        # Getting the type of 'M' (line 466)
        M_140433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 31), 'M', False)
        # Obtaining the member 'transform_point' of a type (line 466)
        transform_point_140434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 31), M_140433, 'transform_point')
        # Calling transform_point(args, kwargs) (line 466)
        transform_point_call_result_140439 = invoke(stypy.reporting.localization.Localization(__file__, 466, 31), transform_point_140434, *[tuple_140435], **kwargs_140438)
        
        # Assigning a type to the variable 'call_assignment_139061' (line 466)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 466, 12), 'call_assignment_139061', transform_point_call_result_140439)
        
        # Assigning a Call to a Name (line 466):
        
        # Assigning a Call to a Name (line 466):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_140442 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 466, 12), 'int')
        # Processing the call keyword arguments
        kwargs_140443 = {}
        # Getting the type of 'call_assignment_139061' (line 466)
        call_assignment_139061_140440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 12), 'call_assignment_139061', False)
        # Obtaining the member '__getitem__' of a type (line 466)
        getitem___140441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 12), call_assignment_139061_140440, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_140444 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___140441, *[int_140442], **kwargs_140443)
        
        # Assigning a type to the variable 'call_assignment_139062' (line 466)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 466, 12), 'call_assignment_139062', getitem___call_result_140444)
        
        # Assigning a Name to a Name (line 466):
        
        # Assigning a Name to a Name (line 466):
        # Getting the type of 'call_assignment_139062' (line 466)
        call_assignment_139062_140445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 12), 'call_assignment_139062')
        # Assigning a type to the variable 'offsetx' (line 466)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 466, 12), 'offsetx', call_assignment_139062_140445)
        
        # Assigning a Call to a Name (line 466):
        
        # Assigning a Call to a Name (line 466):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_140448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 466, 12), 'int')
        # Processing the call keyword arguments
        kwargs_140449 = {}
        # Getting the type of 'call_assignment_139061' (line 466)
        call_assignment_139061_140446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 12), 'call_assignment_139061', False)
        # Obtaining the member '__getitem__' of a type (line 466)
        getitem___140447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 12), call_assignment_139061_140446, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_140450 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___140447, *[int_140448], **kwargs_140449)
        
        # Assigning a type to the variable 'call_assignment_139063' (line 466)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 466, 12), 'call_assignment_139063', getitem___call_result_140450)
        
        # Assigning a Name to a Name (line 466):
        
        # Assigning a Name to a Name (line 466):
        # Getting the type of 'call_assignment_139063' (line 466)
        call_assignment_139063_140451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 12), 'call_assignment_139063')
        # Assigning a type to the variable 'offsety' (line 466)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 466, 21), 'offsety', call_assignment_139063_140451)
        # SSA join for if statement (line 424)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'xmin' (line 468)
        xmin_140452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 8), 'xmin')
        # Getting the type of 'offsetx' (line 468)
        offsetx_140453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 16), 'offsetx')
        # Applying the binary operator '-=' (line 468)
        result_isub_140454 = python_operator(stypy.reporting.localization.Localization(__file__, 468, 8), '-=', xmin_140452, offsetx_140453)
        # Assigning a type to the variable 'xmin' (line 468)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 468, 8), 'xmin', result_isub_140454)
        
        
        # Getting the type of 'ymin' (line 469)
        ymin_140455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 8), 'ymin')
        # Getting the type of 'offsety' (line 469)
        offsety_140456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 16), 'offsety')
        # Applying the binary operator '-=' (line 469)
        result_isub_140457 = python_operator(stypy.reporting.localization.Localization(__file__, 469, 8), '-=', ymin_140455, offsety_140456)
        # Assigning a type to the variable 'ymin' (line 469)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 469, 8), 'ymin', result_isub_140457)
        
        
        # Assigning a Call to a Name (line 471):
        
        # Assigning a Call to a Name (line 471):
        
        # Assigning a Call to a Name (line 471):
        
        # Call to from_bounds(...): (line 471)
        # Processing the call arguments (line 471)
        # Getting the type of 'xmin' (line 471)
        xmin_140460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 32), 'xmin', False)
        # Getting the type of 'ymin' (line 471)
        ymin_140461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 38), 'ymin', False)
        # Getting the type of 'width' (line 471)
        width_140462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 44), 'width', False)
        # Getting the type of 'height' (line 471)
        height_140463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 51), 'height', False)
        # Processing the call keyword arguments (line 471)
        kwargs_140464 = {}
        # Getting the type of 'Bbox' (line 471)
        Bbox_140458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 15), 'Bbox', False)
        # Obtaining the member 'from_bounds' of a type (line 471)
        from_bounds_140459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 471, 15), Bbox_140458, 'from_bounds')
        # Calling from_bounds(args, kwargs) (line 471)
        from_bounds_call_result_140465 = invoke(stypy.reporting.localization.Localization(__file__, 471, 15), from_bounds_140459, *[xmin_140460, ymin_140461, width_140462, height_140463], **kwargs_140464)
        
        # Assigning a type to the variable 'bbox' (line 471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 471, 8), 'bbox', from_bounds_call_result_140465)
        
        # Assigning a Call to a Name (line 474):
        
        # Assigning a Call to a Name (line 474):
        
        # Assigning a Call to a Name (line 474):
        
        # Call to transform(...): (line 474)
        # Processing the call arguments (line 474)
        # Getting the type of 'offsetLayout' (line 474)
        offsetLayout_140468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 26), 'offsetLayout', False)
        # Processing the call keyword arguments (line 474)
        kwargs_140469 = {}
        # Getting the type of 'M' (line 474)
        M_140466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 14), 'M', False)
        # Obtaining the member 'transform' of a type (line 474)
        transform_140467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 14), M_140466, 'transform')
        # Calling transform(args, kwargs) (line 474)
        transform_call_result_140470 = invoke(stypy.reporting.localization.Localization(__file__, 474, 14), transform_140467, *[offsetLayout_140468], **kwargs_140469)
        
        # Assigning a type to the variable 'xys' (line 474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 8), 'xys', transform_call_result_140470)
        
        # Getting the type of 'xys' (line 475)
        xys_140471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 8), 'xys')
        
        # Obtaining an instance of the builtin type 'tuple' (line 475)
        tuple_140472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 475, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 475)
        # Adding element type (line 475)
        # Getting the type of 'offsetx' (line 475)
        offsetx_140473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 16), 'offsetx')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 475, 16), tuple_140472, offsetx_140473)
        # Adding element type (line 475)
        # Getting the type of 'offsety' (line 475)
        offsety_140474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 25), 'offsety')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 475, 16), tuple_140472, offsety_140474)
        
        # Applying the binary operator '-=' (line 475)
        result_isub_140475 = python_operator(stypy.reporting.localization.Localization(__file__, 475, 8), '-=', xys_140471, tuple_140472)
        # Assigning a type to the variable 'xys' (line 475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 475, 8), 'xys', result_isub_140475)
        
        
        # Assigning a Tuple to a Tuple (line 477):
        
        # Assigning a Subscript to a Name (line 477):
        
        # Assigning a Subscript to a Name (line 477):
        
        # Obtaining the type of the subscript
        slice_140476 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 477, 17), None, None, None)
        int_140477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 477, 24), 'int')
        # Getting the type of 'xys' (line 477)
        xys_140478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 17), 'xys')
        # Obtaining the member '__getitem__' of a type (line 477)
        getitem___140479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 477, 17), xys_140478, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 477)
        subscript_call_result_140480 = invoke(stypy.reporting.localization.Localization(__file__, 477, 17), getitem___140479, (slice_140476, int_140477))
        
        # Assigning a type to the variable 'tuple_assignment_139064' (line 477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 8), 'tuple_assignment_139064', subscript_call_result_140480)
        
        # Assigning a Subscript to a Name (line 477):
        
        # Assigning a Subscript to a Name (line 477):
        
        # Obtaining the type of the subscript
        slice_140481 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 477, 28), None, None, None)
        int_140482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 477, 35), 'int')
        # Getting the type of 'xys' (line 477)
        xys_140483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 28), 'xys')
        # Obtaining the member '__getitem__' of a type (line 477)
        getitem___140484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 477, 28), xys_140483, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 477)
        subscript_call_result_140485 = invoke(stypy.reporting.localization.Localization(__file__, 477, 28), getitem___140484, (slice_140481, int_140482))
        
        # Assigning a type to the variable 'tuple_assignment_139065' (line 477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 8), 'tuple_assignment_139065', subscript_call_result_140485)
        
        # Assigning a Name to a Name (line 477):
        
        # Assigning a Name to a Name (line 477):
        # Getting the type of 'tuple_assignment_139064' (line 477)
        tuple_assignment_139064_140486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 8), 'tuple_assignment_139064')
        # Assigning a type to the variable 'xs' (line 477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 8), 'xs', tuple_assignment_139064_140486)
        
        # Assigning a Name to a Name (line 477):
        
        # Assigning a Name to a Name (line 477):
        # Getting the type of 'tuple_assignment_139065' (line 477)
        tuple_assignment_139065_140487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 8), 'tuple_assignment_139065')
        # Assigning a type to the variable 'ys' (line 477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 12), 'ys', tuple_assignment_139065_140487)
        
        # Assigning a Tuple to a Name (line 479):
        
        # Assigning a Tuple to a Name (line 479):
        
        # Assigning a Tuple to a Name (line 479):
        
        # Obtaining an instance of the builtin type 'tuple' (line 479)
        tuple_140488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 479, 14), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 479)
        # Adding element type (line 479)
        # Getting the type of 'bbox' (line 479)
        bbox_140489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 14), 'bbox')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 479, 14), tuple_140488, bbox_140489)
        # Adding element type (line 479)
        
        # Call to list(...): (line 479)
        # Processing the call arguments (line 479)
        
        # Call to zip(...): (line 479)
        # Processing the call arguments (line 479)
        # Getting the type of 'lines' (line 479)
        lines_140492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 29), 'lines', False)
        # Getting the type of 'whs' (line 479)
        whs_140493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 36), 'whs', False)
        # Getting the type of 'xs' (line 479)
        xs_140494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 41), 'xs', False)
        # Getting the type of 'ys' (line 479)
        ys_140495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 45), 'ys', False)
        # Processing the call keyword arguments (line 479)
        kwargs_140496 = {}
        # Getting the type of 'zip' (line 479)
        zip_140491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 25), 'zip', False)
        # Calling zip(args, kwargs) (line 479)
        zip_call_result_140497 = invoke(stypy.reporting.localization.Localization(__file__, 479, 25), zip_140491, *[lines_140492, whs_140493, xs_140494, ys_140495], **kwargs_140496)
        
        # Processing the call keyword arguments (line 479)
        kwargs_140498 = {}
        # Getting the type of 'list' (line 479)
        list_140490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 20), 'list', False)
        # Calling list(args, kwargs) (line 479)
        list_call_result_140499 = invoke(stypy.reporting.localization.Localization(__file__, 479, 20), list_140490, *[zip_call_result_140497], **kwargs_140498)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 479, 14), tuple_140488, list_call_result_140499)
        # Adding element type (line 479)
        # Getting the type of 'descent' (line 479)
        descent_140500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 51), 'descent')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 479, 14), tuple_140488, descent_140500)
        
        # Assigning a type to the variable 'ret' (line 479)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 479, 8), 'ret', tuple_140488)
        
        # Assigning a Name to a Subscript (line 480):
        
        # Assigning a Name to a Subscript (line 480):
        
        # Assigning a Name to a Subscript (line 480):
        # Getting the type of 'ret' (line 480)
        ret_140501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 28), 'ret')
        # Getting the type of 'self' (line 480)
        self_140502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 8), 'self')
        # Obtaining the member '_cached' of a type (line 480)
        _cached_140503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 480, 8), self_140502, '_cached')
        # Getting the type of 'key' (line 480)
        key_140504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 21), 'key')
        # Storing an element on a container (line 480)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 480, 8), _cached_140503, (key_140504, ret_140501))
        # Getting the type of 'ret' (line 481)
        ret_140505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 15), 'ret')
        # Assigning a type to the variable 'stypy_return_type' (line 481)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 481, 8), 'stypy_return_type', ret_140505)
        
        # ################# End of '_get_layout(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_layout' in the type store
        # Getting the type of 'stypy_return_type' (line 330)
        stypy_return_type_140506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_140506)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_layout'
        return stypy_return_type_140506


    @norecursion
    def set_bbox(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_bbox'
        module_type_store = module_type_store.open_function_context('set_bbox', 483, 4, False)
        # Assigning a type to the variable 'self' (line 484)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 484, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_bbox.__dict__.__setitem__('stypy_localization', localization)
        Text.set_bbox.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_bbox.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_bbox.__dict__.__setitem__('stypy_function_name', 'Text.set_bbox')
        Text.set_bbox.__dict__.__setitem__('stypy_param_names_list', ['rectprops'])
        Text.set_bbox.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_bbox.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_bbox.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_bbox.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_bbox.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_bbox.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_bbox', ['rectprops'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_bbox', localization, ['rectprops'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_bbox(...)' code ##################

        unicode_140507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 494, (-1)), 'unicode', u"\n        Draw a bounding box around self.  rectprops are any settable\n        properties for a FancyBboxPatch, e.g., facecolor='red', alpha=0.5.\n\n          t.set_bbox(dict(facecolor='red', alpha=0.5))\n\n        The default boxstyle is 'square'. The mutation\n        scale of the FancyBboxPatch is set to the fontsize.\n\n        ACCEPTS: FancyBboxPatch prop dict\n        ")
        
        # Type idiom detected: calculating its left and rigth part (line 496)
        # Getting the type of 'rectprops' (line 496)
        rectprops_140508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 8), 'rectprops')
        # Getting the type of 'None' (line 496)
        None_140509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 28), 'None')
        
        (may_be_140510, more_types_in_union_140511) = may_not_be_none(rectprops_140508, None_140509)

        if may_be_140510:

            if more_types_in_union_140511:
                # Runtime conditional SSA (line 496)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 497):
            
            # Assigning a Call to a Name (line 497):
            
            # Assigning a Call to a Name (line 497):
            
            # Call to copy(...): (line 497)
            # Processing the call keyword arguments (line 497)
            kwargs_140514 = {}
            # Getting the type of 'rectprops' (line 497)
            rectprops_140512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 20), 'rectprops', False)
            # Obtaining the member 'copy' of a type (line 497)
            copy_140513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 497, 20), rectprops_140512, 'copy')
            # Calling copy(args, kwargs) (line 497)
            copy_call_result_140515 = invoke(stypy.reporting.localization.Localization(__file__, 497, 20), copy_140513, *[], **kwargs_140514)
            
            # Assigning a type to the variable 'props' (line 497)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 12), 'props', copy_call_result_140515)
            
            # Assigning a Call to a Name (line 498):
            
            # Assigning a Call to a Name (line 498):
            
            # Assigning a Call to a Name (line 498):
            
            # Call to pop(...): (line 498)
            # Processing the call arguments (line 498)
            unicode_140518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 498, 33), 'unicode', u'boxstyle')
            # Getting the type of 'None' (line 498)
            None_140519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 45), 'None', False)
            # Processing the call keyword arguments (line 498)
            kwargs_140520 = {}
            # Getting the type of 'props' (line 498)
            props_140516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 23), 'props', False)
            # Obtaining the member 'pop' of a type (line 498)
            pop_140517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 498, 23), props_140516, 'pop')
            # Calling pop(args, kwargs) (line 498)
            pop_call_result_140521 = invoke(stypy.reporting.localization.Localization(__file__, 498, 23), pop_140517, *[unicode_140518, None_140519], **kwargs_140520)
            
            # Assigning a type to the variable 'boxstyle' (line 498)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 498, 12), 'boxstyle', pop_call_result_140521)
            
            # Assigning a Call to a Name (line 499):
            
            # Assigning a Call to a Name (line 499):
            
            # Assigning a Call to a Name (line 499):
            
            # Call to pop(...): (line 499)
            # Processing the call arguments (line 499)
            unicode_140524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 499, 28), 'unicode', u'pad')
            # Getting the type of 'None' (line 499)
            None_140525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 35), 'None', False)
            # Processing the call keyword arguments (line 499)
            kwargs_140526 = {}
            # Getting the type of 'props' (line 499)
            props_140522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 18), 'props', False)
            # Obtaining the member 'pop' of a type (line 499)
            pop_140523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 499, 18), props_140522, 'pop')
            # Calling pop(args, kwargs) (line 499)
            pop_call_result_140527 = invoke(stypy.reporting.localization.Localization(__file__, 499, 18), pop_140523, *[unicode_140524, None_140525], **kwargs_140526)
            
            # Assigning a type to the variable 'pad' (line 499)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 499, 12), 'pad', pop_call_result_140527)
            
            # Type idiom detected: calculating its left and rigth part (line 500)
            # Getting the type of 'boxstyle' (line 500)
            boxstyle_140528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 15), 'boxstyle')
            # Getting the type of 'None' (line 500)
            None_140529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 27), 'None')
            
            (may_be_140530, more_types_in_union_140531) = may_be_none(boxstyle_140528, None_140529)

            if may_be_140530:

                if more_types_in_union_140531:
                    # Runtime conditional SSA (line 500)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Assigning a Str to a Name (line 501):
                
                # Assigning a Str to a Name (line 501):
                
                # Assigning a Str to a Name (line 501):
                unicode_140532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 501, 27), 'unicode', u'square')
                # Assigning a type to the variable 'boxstyle' (line 501)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 501, 16), 'boxstyle', unicode_140532)
                
                # Type idiom detected: calculating its left and rigth part (line 502)
                # Getting the type of 'pad' (line 502)
                pad_140533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 19), 'pad')
                # Getting the type of 'None' (line 502)
                None_140534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 26), 'None')
                
                (may_be_140535, more_types_in_union_140536) = may_be_none(pad_140533, None_140534)

                if may_be_140535:

                    if more_types_in_union_140536:
                        # Runtime conditional SSA (line 502)
                        module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                    else:
                        module_type_store = module_type_store

                    
                    # Assigning a Num to a Name (line 503):
                    
                    # Assigning a Num to a Name (line 503):
                    
                    # Assigning a Num to a Name (line 503):
                    int_140537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 503, 26), 'int')
                    # Assigning a type to the variable 'pad' (line 503)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 503, 20), 'pad', int_140537)

                    if more_types_in_union_140536:
                        # SSA join for if statement (line 502)
                        module_type_store = module_type_store.join_ssa_context()


                
                
                # Getting the type of 'pad' (line 504)
                pad_140538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 16), 'pad')
                
                # Call to get_size(...): (line 504)
                # Processing the call keyword arguments (line 504)
                kwargs_140541 = {}
                # Getting the type of 'self' (line 504)
                self_140539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 23), 'self', False)
                # Obtaining the member 'get_size' of a type (line 504)
                get_size_140540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 504, 23), self_140539, 'get_size')
                # Calling get_size(args, kwargs) (line 504)
                get_size_call_result_140542 = invoke(stypy.reporting.localization.Localization(__file__, 504, 23), get_size_140540, *[], **kwargs_140541)
                
                # Applying the binary operator 'div=' (line 504)
                result_div_140543 = python_operator(stypy.reporting.localization.Localization(__file__, 504, 16), 'div=', pad_140538, get_size_call_result_140542)
                # Assigning a type to the variable 'pad' (line 504)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 504, 16), 'pad', result_div_140543)
                

                if more_types_in_union_140531:
                    # Runtime conditional SSA for else branch (line 500)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_140530) or more_types_in_union_140531):
                
                # Type idiom detected: calculating its left and rigth part (line 506)
                # Getting the type of 'pad' (line 506)
                pad_140544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 19), 'pad')
                # Getting the type of 'None' (line 506)
                None_140545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 26), 'None')
                
                (may_be_140546, more_types_in_union_140547) = may_be_none(pad_140544, None_140545)

                if may_be_140546:

                    if more_types_in_union_140547:
                        # Runtime conditional SSA (line 506)
                        module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                    else:
                        module_type_store = module_type_store

                    
                    # Assigning a Num to a Name (line 507):
                    
                    # Assigning a Num to a Name (line 507):
                    
                    # Assigning a Num to a Name (line 507):
                    float_140548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 507, 26), 'float')
                    # Assigning a type to the variable 'pad' (line 507)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 507, 20), 'pad', float_140548)

                    if more_types_in_union_140547:
                        # SSA join for if statement (line 506)
                        module_type_store = module_type_store.join_ssa_context()


                

                if (may_be_140530 and more_types_in_union_140531):
                    # SSA join for if statement (line 500)
                    module_type_store = module_type_store.join_ssa_context()


            
            
            
            # Evaluating a boolean operation
            
            # Call to isinstance(...): (line 510)
            # Processing the call arguments (line 510)
            # Getting the type of 'boxstyle' (line 510)
            boxstyle_140550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 27), 'boxstyle', False)
            # Getting the type of 'six' (line 510)
            six_140551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 37), 'six', False)
            # Obtaining the member 'string_types' of a type (line 510)
            string_types_140552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 510, 37), six_140551, 'string_types')
            # Processing the call keyword arguments (line 510)
            kwargs_140553 = {}
            # Getting the type of 'isinstance' (line 510)
            isinstance_140549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 16), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 510)
            isinstance_call_result_140554 = invoke(stypy.reporting.localization.Localization(__file__, 510, 16), isinstance_140549, *[boxstyle_140550, string_types_140552], **kwargs_140553)
            
            
            unicode_140555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 511, 24), 'unicode', u'pad')
            # Getting the type of 'boxstyle' (line 511)
            boxstyle_140556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 37), 'boxstyle')
            # Applying the binary operator 'notin' (line 511)
            result_contains_140557 = python_operator(stypy.reporting.localization.Localization(__file__, 511, 24), 'notin', unicode_140555, boxstyle_140556)
            
            # Applying the binary operator 'and' (line 510)
            result_and_keyword_140558 = python_operator(stypy.reporting.localization.Localization(__file__, 510, 16), 'and', isinstance_call_result_140554, result_contains_140557)
            
            # Testing the type of an if condition (line 510)
            if_condition_140559 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 510, 12), result_and_keyword_140558)
            # Assigning a type to the variable 'if_condition_140559' (line 510)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 510, 12), 'if_condition_140559', if_condition_140559)
            # SSA begins for if statement (line 510)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Getting the type of 'boxstyle' (line 512)
            boxstyle_140560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 16), 'boxstyle')
            unicode_140561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 512, 28), 'unicode', u',pad=%0.2f')
            # Getting the type of 'pad' (line 512)
            pad_140562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 43), 'pad')
            # Applying the binary operator '%' (line 512)
            result_mod_140563 = python_operator(stypy.reporting.localization.Localization(__file__, 512, 28), '%', unicode_140561, pad_140562)
            
            # Applying the binary operator '+=' (line 512)
            result_iadd_140564 = python_operator(stypy.reporting.localization.Localization(__file__, 512, 16), '+=', boxstyle_140560, result_mod_140563)
            # Assigning a type to the variable 'boxstyle' (line 512)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 512, 16), 'boxstyle', result_iadd_140564)
            
            # SSA join for if statement (line 510)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Name (line 514):
            
            # Assigning a Call to a Name (line 514):
            
            # Assigning a Call to a Name (line 514):
            
            # Call to pop(...): (line 514)
            # Processing the call arguments (line 514)
            unicode_140567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 514, 40), 'unicode', u'bbox_transmuter')
            # Getting the type of 'None' (line 514)
            None_140568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 59), 'None', False)
            # Processing the call keyword arguments (line 514)
            kwargs_140569 = {}
            # Getting the type of 'props' (line 514)
            props_140565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 30), 'props', False)
            # Obtaining the member 'pop' of a type (line 514)
            pop_140566 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 514, 30), props_140565, 'pop')
            # Calling pop(args, kwargs) (line 514)
            pop_call_result_140570 = invoke(stypy.reporting.localization.Localization(__file__, 514, 30), pop_140566, *[unicode_140567, None_140568], **kwargs_140569)
            
            # Assigning a type to the variable 'bbox_transmuter' (line 514)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 514, 12), 'bbox_transmuter', pop_call_result_140570)
            
            # Assigning a Call to a Attribute (line 516):
            
            # Assigning a Call to a Attribute (line 516):
            
            # Assigning a Call to a Attribute (line 516):
            
            # Call to FancyBboxPatch(...): (line 516)
            # Processing the call arguments (line 516)
            
            # Obtaining an instance of the builtin type 'tuple' (line 517)
            tuple_140572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 517, 37), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 517)
            # Adding element type (line 517)
            float_140573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 517, 37), 'float')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 517, 37), tuple_140572, float_140573)
            # Adding element type (line 517)
            float_140574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 517, 41), 'float')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 517, 37), tuple_140572, float_140574)
            
            float_140575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 518, 36), 'float')
            float_140576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 518, 40), 'float')
            # Processing the call keyword arguments (line 516)
            # Getting the type of 'boxstyle' (line 519)
            boxstyle_140577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 45), 'boxstyle', False)
            keyword_140578 = boxstyle_140577
            # Getting the type of 'bbox_transmuter' (line 520)
            bbox_transmuter_140579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 52), 'bbox_transmuter', False)
            keyword_140580 = bbox_transmuter_140579
            
            # Call to IdentityTransform(...): (line 521)
            # Processing the call keyword arguments (line 521)
            kwargs_140583 = {}
            # Getting the type of 'mtransforms' (line 521)
            mtransforms_140581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 46), 'mtransforms', False)
            # Obtaining the member 'IdentityTransform' of a type (line 521)
            IdentityTransform_140582 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 521, 46), mtransforms_140581, 'IdentityTransform')
            # Calling IdentityTransform(args, kwargs) (line 521)
            IdentityTransform_call_result_140584 = invoke(stypy.reporting.localization.Localization(__file__, 521, 46), IdentityTransform_140582, *[], **kwargs_140583)
            
            keyword_140585 = IdentityTransform_call_result_140584
            # Getting the type of 'props' (line 522)
            props_140586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 38), 'props', False)
            kwargs_140587 = {'bbox_transmuter': keyword_140580, 'transform': keyword_140585, 'boxstyle': keyword_140578, 'props_140586': props_140586}
            # Getting the type of 'FancyBboxPatch' (line 516)
            FancyBboxPatch_140571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 31), 'FancyBboxPatch', False)
            # Calling FancyBboxPatch(args, kwargs) (line 516)
            FancyBboxPatch_call_result_140588 = invoke(stypy.reporting.localization.Localization(__file__, 516, 31), FancyBboxPatch_140571, *[tuple_140572, float_140575, float_140576], **kwargs_140587)
            
            # Getting the type of 'self' (line 516)
            self_140589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 12), 'self')
            # Setting the type of the member '_bbox_patch' of a type (line 516)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 516, 12), self_140589, '_bbox_patch', FancyBboxPatch_call_result_140588)

            if more_types_in_union_140511:
                # Runtime conditional SSA for else branch (line 496)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_140510) or more_types_in_union_140511):
            
            # Assigning a Name to a Attribute (line 524):
            
            # Assigning a Name to a Attribute (line 524):
            
            # Assigning a Name to a Attribute (line 524):
            # Getting the type of 'None' (line 524)
            None_140590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 31), 'None')
            # Getting the type of 'self' (line 524)
            self_140591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 12), 'self')
            # Setting the type of the member '_bbox_patch' of a type (line 524)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 524, 12), self_140591, '_bbox_patch', None_140590)

            if (may_be_140510 and more_types_in_union_140511):
                # SSA join for if statement (line 496)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to _update_clip_properties(...): (line 526)
        # Processing the call keyword arguments (line 526)
        kwargs_140594 = {}
        # Getting the type of 'self' (line 526)
        self_140592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 8), 'self', False)
        # Obtaining the member '_update_clip_properties' of a type (line 526)
        _update_clip_properties_140593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 526, 8), self_140592, '_update_clip_properties')
        # Calling _update_clip_properties(args, kwargs) (line 526)
        _update_clip_properties_call_result_140595 = invoke(stypy.reporting.localization.Localization(__file__, 526, 8), _update_clip_properties_140593, *[], **kwargs_140594)
        
        
        # ################# End of 'set_bbox(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_bbox' in the type store
        # Getting the type of 'stypy_return_type' (line 483)
        stypy_return_type_140596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_140596)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_bbox'
        return stypy_return_type_140596


    @norecursion
    def get_bbox_patch(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_bbox_patch'
        module_type_store = module_type_store.open_function_context('get_bbox_patch', 528, 4, False)
        # Assigning a type to the variable 'self' (line 529)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 529, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.get_bbox_patch.__dict__.__setitem__('stypy_localization', localization)
        Text.get_bbox_patch.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.get_bbox_patch.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.get_bbox_patch.__dict__.__setitem__('stypy_function_name', 'Text.get_bbox_patch')
        Text.get_bbox_patch.__dict__.__setitem__('stypy_param_names_list', [])
        Text.get_bbox_patch.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.get_bbox_patch.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.get_bbox_patch.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.get_bbox_patch.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.get_bbox_patch.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.get_bbox_patch.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.get_bbox_patch', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_bbox_patch', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_bbox_patch(...)' code ##################

        unicode_140597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 532, (-1)), 'unicode', u'\n        Return the bbox Patch object. Returns None if the\n        FancyBboxPatch is not made.\n        ')
        # Getting the type of 'self' (line 533)
        self_140598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 15), 'self')
        # Obtaining the member '_bbox_patch' of a type (line 533)
        _bbox_patch_140599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 533, 15), self_140598, '_bbox_patch')
        # Assigning a type to the variable 'stypy_return_type' (line 533)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 533, 8), 'stypy_return_type', _bbox_patch_140599)
        
        # ################# End of 'get_bbox_patch(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_bbox_patch' in the type store
        # Getting the type of 'stypy_return_type' (line 528)
        stypy_return_type_140600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_140600)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_bbox_patch'
        return stypy_return_type_140600


    @norecursion
    def update_bbox_position_size(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'update_bbox_position_size'
        module_type_store = module_type_store.open_function_context('update_bbox_position_size', 535, 4, False)
        # Assigning a type to the variable 'self' (line 536)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 536, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.update_bbox_position_size.__dict__.__setitem__('stypy_localization', localization)
        Text.update_bbox_position_size.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.update_bbox_position_size.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.update_bbox_position_size.__dict__.__setitem__('stypy_function_name', 'Text.update_bbox_position_size')
        Text.update_bbox_position_size.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        Text.update_bbox_position_size.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.update_bbox_position_size.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.update_bbox_position_size.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.update_bbox_position_size.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.update_bbox_position_size.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.update_bbox_position_size.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.update_bbox_position_size', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update_bbox_position_size', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update_bbox_position_size(...)' code ##################

        unicode_140601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 540, (-1)), 'unicode', u'\n        Update the location and the size of the bbox. This method\n        should be used when the position and size of the bbox needs to\n        be updated before actually drawing the bbox.\n        ')
        
        # Getting the type of 'self' (line 542)
        self_140602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 11), 'self')
        # Obtaining the member '_bbox_patch' of a type (line 542)
        _bbox_patch_140603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 542, 11), self_140602, '_bbox_patch')
        # Testing the type of an if condition (line 542)
        if_condition_140604 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 542, 8), _bbox_patch_140603)
        # Assigning a type to the variable 'if_condition_140604' (line 542)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 542, 8), 'if_condition_140604', if_condition_140604)
        # SSA begins for if statement (line 542)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 544):
        
        # Assigning a Call to a Name (line 544):
        
        # Assigning a Call to a Name (line 544):
        
        # Call to get_transform(...): (line 544)
        # Processing the call keyword arguments (line 544)
        kwargs_140607 = {}
        # Getting the type of 'self' (line 544)
        self_140605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 20), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 544)
        get_transform_140606 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 544, 20), self_140605, 'get_transform')
        # Calling get_transform(args, kwargs) (line 544)
        get_transform_call_result_140608 = invoke(stypy.reporting.localization.Localization(__file__, 544, 20), get_transform_140606, *[], **kwargs_140607)
        
        # Assigning a type to the variable 'trans' (line 544)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 544, 12), 'trans', get_transform_call_result_140608)
        
        # Assigning a Call to a Name (line 548):
        
        # Assigning a Call to a Name (line 548):
        
        # Assigning a Call to a Name (line 548):
        
        # Call to float(...): (line 548)
        # Processing the call arguments (line 548)
        
        # Call to convert_xunits(...): (line 548)
        # Processing the call arguments (line 548)
        # Getting the type of 'self' (line 548)
        self_140612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 45), 'self', False)
        # Obtaining the member '_x' of a type (line 548)
        _x_140613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 548, 45), self_140612, '_x')
        # Processing the call keyword arguments (line 548)
        kwargs_140614 = {}
        # Getting the type of 'self' (line 548)
        self_140610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 25), 'self', False)
        # Obtaining the member 'convert_xunits' of a type (line 548)
        convert_xunits_140611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 548, 25), self_140610, 'convert_xunits')
        # Calling convert_xunits(args, kwargs) (line 548)
        convert_xunits_call_result_140615 = invoke(stypy.reporting.localization.Localization(__file__, 548, 25), convert_xunits_140611, *[_x_140613], **kwargs_140614)
        
        # Processing the call keyword arguments (line 548)
        kwargs_140616 = {}
        # Getting the type of 'float' (line 548)
        float_140609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 19), 'float', False)
        # Calling float(args, kwargs) (line 548)
        float_call_result_140617 = invoke(stypy.reporting.localization.Localization(__file__, 548, 19), float_140609, *[convert_xunits_call_result_140615], **kwargs_140616)
        
        # Assigning a type to the variable 'posx' (line 548)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 548, 12), 'posx', float_call_result_140617)
        
        # Assigning a Call to a Name (line 549):
        
        # Assigning a Call to a Name (line 549):
        
        # Assigning a Call to a Name (line 549):
        
        # Call to float(...): (line 549)
        # Processing the call arguments (line 549)
        
        # Call to convert_yunits(...): (line 549)
        # Processing the call arguments (line 549)
        # Getting the type of 'self' (line 549)
        self_140621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 45), 'self', False)
        # Obtaining the member '_y' of a type (line 549)
        _y_140622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 549, 45), self_140621, '_y')
        # Processing the call keyword arguments (line 549)
        kwargs_140623 = {}
        # Getting the type of 'self' (line 549)
        self_140619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 25), 'self', False)
        # Obtaining the member 'convert_yunits' of a type (line 549)
        convert_yunits_140620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 549, 25), self_140619, 'convert_yunits')
        # Calling convert_yunits(args, kwargs) (line 549)
        convert_yunits_call_result_140624 = invoke(stypy.reporting.localization.Localization(__file__, 549, 25), convert_yunits_140620, *[_y_140622], **kwargs_140623)
        
        # Processing the call keyword arguments (line 549)
        kwargs_140625 = {}
        # Getting the type of 'float' (line 549)
        float_140618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 19), 'float', False)
        # Calling float(args, kwargs) (line 549)
        float_call_result_140626 = invoke(stypy.reporting.localization.Localization(__file__, 549, 19), float_140618, *[convert_yunits_call_result_140624], **kwargs_140625)
        
        # Assigning a type to the variable 'posy' (line 549)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 549, 12), 'posy', float_call_result_140626)
        
        # Assigning a Call to a Tuple (line 551):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to transform_point(...): (line 551)
        # Processing the call arguments (line 551)
        
        # Obtaining an instance of the builtin type 'tuple' (line 551)
        tuple_140629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 551, 48), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 551)
        # Adding element type (line 551)
        # Getting the type of 'posx' (line 551)
        posx_140630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 48), 'posx', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 551, 48), tuple_140629, posx_140630)
        # Adding element type (line 551)
        # Getting the type of 'posy' (line 551)
        posy_140631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 54), 'posy', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 551, 48), tuple_140629, posy_140631)
        
        # Processing the call keyword arguments (line 551)
        kwargs_140632 = {}
        # Getting the type of 'trans' (line 551)
        trans_140627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 25), 'trans', False)
        # Obtaining the member 'transform_point' of a type (line 551)
        transform_point_140628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 551, 25), trans_140627, 'transform_point')
        # Calling transform_point(args, kwargs) (line 551)
        transform_point_call_result_140633 = invoke(stypy.reporting.localization.Localization(__file__, 551, 25), transform_point_140628, *[tuple_140629], **kwargs_140632)
        
        # Assigning a type to the variable 'call_assignment_139066' (line 551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 551, 12), 'call_assignment_139066', transform_point_call_result_140633)
        
        # Assigning a Call to a Name (line 551):
        
        # Assigning a Call to a Name (line 551):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_140636 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 551, 12), 'int')
        # Processing the call keyword arguments
        kwargs_140637 = {}
        # Getting the type of 'call_assignment_139066' (line 551)
        call_assignment_139066_140634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 12), 'call_assignment_139066', False)
        # Obtaining the member '__getitem__' of a type (line 551)
        getitem___140635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 551, 12), call_assignment_139066_140634, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_140638 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___140635, *[int_140636], **kwargs_140637)
        
        # Assigning a type to the variable 'call_assignment_139067' (line 551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 551, 12), 'call_assignment_139067', getitem___call_result_140638)
        
        # Assigning a Name to a Name (line 551):
        
        # Assigning a Name to a Name (line 551):
        # Getting the type of 'call_assignment_139067' (line 551)
        call_assignment_139067_140639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 12), 'call_assignment_139067')
        # Assigning a type to the variable 'posx' (line 551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 551, 12), 'posx', call_assignment_139067_140639)
        
        # Assigning a Call to a Name (line 551):
        
        # Assigning a Call to a Name (line 551):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_140642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 551, 12), 'int')
        # Processing the call keyword arguments
        kwargs_140643 = {}
        # Getting the type of 'call_assignment_139066' (line 551)
        call_assignment_139066_140640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 12), 'call_assignment_139066', False)
        # Obtaining the member '__getitem__' of a type (line 551)
        getitem___140641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 551, 12), call_assignment_139066_140640, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_140644 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___140641, *[int_140642], **kwargs_140643)
        
        # Assigning a type to the variable 'call_assignment_139068' (line 551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 551, 12), 'call_assignment_139068', getitem___call_result_140644)
        
        # Assigning a Name to a Name (line 551):
        
        # Assigning a Name to a Name (line 551):
        # Getting the type of 'call_assignment_139068' (line 551)
        call_assignment_139068_140645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 12), 'call_assignment_139068')
        # Assigning a type to the variable 'posy' (line 551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 551, 18), 'posy', call_assignment_139068_140645)
        
        # Assigning a Call to a Tuple (line 553):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to _get_textbox(...): (line 553)
        # Processing the call arguments (line 553)
        # Getting the type of 'self' (line 553)
        self_140647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 54), 'self', False)
        # Getting the type of 'renderer' (line 553)
        renderer_140648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 60), 'renderer', False)
        # Processing the call keyword arguments (line 553)
        kwargs_140649 = {}
        # Getting the type of '_get_textbox' (line 553)
        _get_textbox_140646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 41), '_get_textbox', False)
        # Calling _get_textbox(args, kwargs) (line 553)
        _get_textbox_call_result_140650 = invoke(stypy.reporting.localization.Localization(__file__, 553, 41), _get_textbox_140646, *[self_140647, renderer_140648], **kwargs_140649)
        
        # Assigning a type to the variable 'call_assignment_139069' (line 553)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 553, 12), 'call_assignment_139069', _get_textbox_call_result_140650)
        
        # Assigning a Call to a Name (line 553):
        
        # Assigning a Call to a Name (line 553):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_140653 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 553, 12), 'int')
        # Processing the call keyword arguments
        kwargs_140654 = {}
        # Getting the type of 'call_assignment_139069' (line 553)
        call_assignment_139069_140651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 12), 'call_assignment_139069', False)
        # Obtaining the member '__getitem__' of a type (line 553)
        getitem___140652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 12), call_assignment_139069_140651, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_140655 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___140652, *[int_140653], **kwargs_140654)
        
        # Assigning a type to the variable 'call_assignment_139070' (line 553)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 553, 12), 'call_assignment_139070', getitem___call_result_140655)
        
        # Assigning a Name to a Name (line 553):
        
        # Assigning a Name to a Name (line 553):
        # Getting the type of 'call_assignment_139070' (line 553)
        call_assignment_139070_140656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 12), 'call_assignment_139070')
        # Assigning a type to the variable 'x_box' (line 553)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 553, 12), 'x_box', call_assignment_139070_140656)
        
        # Assigning a Call to a Name (line 553):
        
        # Assigning a Call to a Name (line 553):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_140659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 553, 12), 'int')
        # Processing the call keyword arguments
        kwargs_140660 = {}
        # Getting the type of 'call_assignment_139069' (line 553)
        call_assignment_139069_140657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 12), 'call_assignment_139069', False)
        # Obtaining the member '__getitem__' of a type (line 553)
        getitem___140658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 12), call_assignment_139069_140657, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_140661 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___140658, *[int_140659], **kwargs_140660)
        
        # Assigning a type to the variable 'call_assignment_139071' (line 553)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 553, 12), 'call_assignment_139071', getitem___call_result_140661)
        
        # Assigning a Name to a Name (line 553):
        
        # Assigning a Name to a Name (line 553):
        # Getting the type of 'call_assignment_139071' (line 553)
        call_assignment_139071_140662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 12), 'call_assignment_139071')
        # Assigning a type to the variable 'y_box' (line 553)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 553, 19), 'y_box', call_assignment_139071_140662)
        
        # Assigning a Call to a Name (line 553):
        
        # Assigning a Call to a Name (line 553):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_140665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 553, 12), 'int')
        # Processing the call keyword arguments
        kwargs_140666 = {}
        # Getting the type of 'call_assignment_139069' (line 553)
        call_assignment_139069_140663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 12), 'call_assignment_139069', False)
        # Obtaining the member '__getitem__' of a type (line 553)
        getitem___140664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 12), call_assignment_139069_140663, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_140667 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___140664, *[int_140665], **kwargs_140666)
        
        # Assigning a type to the variable 'call_assignment_139072' (line 553)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 553, 12), 'call_assignment_139072', getitem___call_result_140667)
        
        # Assigning a Name to a Name (line 553):
        
        # Assigning a Name to a Name (line 553):
        # Getting the type of 'call_assignment_139072' (line 553)
        call_assignment_139072_140668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 12), 'call_assignment_139072')
        # Assigning a type to the variable 'w_box' (line 553)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 553, 26), 'w_box', call_assignment_139072_140668)
        
        # Assigning a Call to a Name (line 553):
        
        # Assigning a Call to a Name (line 553):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_140671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 553, 12), 'int')
        # Processing the call keyword arguments
        kwargs_140672 = {}
        # Getting the type of 'call_assignment_139069' (line 553)
        call_assignment_139069_140669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 12), 'call_assignment_139069', False)
        # Obtaining the member '__getitem__' of a type (line 553)
        getitem___140670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 12), call_assignment_139069_140669, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_140673 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___140670, *[int_140671], **kwargs_140672)
        
        # Assigning a type to the variable 'call_assignment_139073' (line 553)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 553, 12), 'call_assignment_139073', getitem___call_result_140673)
        
        # Assigning a Name to a Name (line 553):
        
        # Assigning a Name to a Name (line 553):
        # Getting the type of 'call_assignment_139073' (line 553)
        call_assignment_139073_140674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 12), 'call_assignment_139073')
        # Assigning a type to the variable 'h_box' (line 553)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 553, 33), 'h_box', call_assignment_139073_140674)
        
        # Call to set_bounds(...): (line 554)
        # Processing the call arguments (line 554)
        float_140678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 554, 40), 'float')
        float_140679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 554, 44), 'float')
        # Getting the type of 'w_box' (line 554)
        w_box_140680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 48), 'w_box', False)
        # Getting the type of 'h_box' (line 554)
        h_box_140681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 55), 'h_box', False)
        # Processing the call keyword arguments (line 554)
        kwargs_140682 = {}
        # Getting the type of 'self' (line 554)
        self_140675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 12), 'self', False)
        # Obtaining the member '_bbox_patch' of a type (line 554)
        _bbox_patch_140676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 554, 12), self_140675, '_bbox_patch')
        # Obtaining the member 'set_bounds' of a type (line 554)
        set_bounds_140677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 554, 12), _bbox_patch_140676, 'set_bounds')
        # Calling set_bounds(args, kwargs) (line 554)
        set_bounds_call_result_140683 = invoke(stypy.reporting.localization.Localization(__file__, 554, 12), set_bounds_140677, *[float_140678, float_140679, w_box_140680, h_box_140681], **kwargs_140682)
        
        
        # Assigning a Call to a Name (line 555):
        
        # Assigning a Call to a Name (line 555):
        
        # Assigning a Call to a Name (line 555):
        
        # Call to deg2rad(...): (line 555)
        # Processing the call arguments (line 555)
        
        # Call to get_rotation(...): (line 555)
        # Processing the call keyword arguments (line 555)
        kwargs_140688 = {}
        # Getting the type of 'self' (line 555)
        self_140686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 31), 'self', False)
        # Obtaining the member 'get_rotation' of a type (line 555)
        get_rotation_140687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 555, 31), self_140686, 'get_rotation')
        # Calling get_rotation(args, kwargs) (line 555)
        get_rotation_call_result_140689 = invoke(stypy.reporting.localization.Localization(__file__, 555, 31), get_rotation_140687, *[], **kwargs_140688)
        
        # Processing the call keyword arguments (line 555)
        kwargs_140690 = {}
        # Getting the type of 'np' (line 555)
        np_140684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 20), 'np', False)
        # Obtaining the member 'deg2rad' of a type (line 555)
        deg2rad_140685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 555, 20), np_140684, 'deg2rad')
        # Calling deg2rad(args, kwargs) (line 555)
        deg2rad_call_result_140691 = invoke(stypy.reporting.localization.Localization(__file__, 555, 20), deg2rad_140685, *[get_rotation_call_result_140689], **kwargs_140690)
        
        # Assigning a type to the variable 'theta' (line 555)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 555, 12), 'theta', deg2rad_call_result_140691)
        
        # Assigning a Call to a Name (line 556):
        
        # Assigning a Call to a Name (line 556):
        
        # Assigning a Call to a Name (line 556):
        
        # Call to rotate(...): (line 556)
        # Processing the call arguments (line 556)
        # Getting the type of 'theta' (line 556)
        theta_140697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 47), 'theta', False)
        # Processing the call keyword arguments (line 556)
        kwargs_140698 = {}
        
        # Call to Affine2D(...): (line 556)
        # Processing the call keyword arguments (line 556)
        kwargs_140694 = {}
        # Getting the type of 'mtransforms' (line 556)
        mtransforms_140692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 17), 'mtransforms', False)
        # Obtaining the member 'Affine2D' of a type (line 556)
        Affine2D_140693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 556, 17), mtransforms_140692, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 556)
        Affine2D_call_result_140695 = invoke(stypy.reporting.localization.Localization(__file__, 556, 17), Affine2D_140693, *[], **kwargs_140694)
        
        # Obtaining the member 'rotate' of a type (line 556)
        rotate_140696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 556, 17), Affine2D_call_result_140695, 'rotate')
        # Calling rotate(args, kwargs) (line 556)
        rotate_call_result_140699 = invoke(stypy.reporting.localization.Localization(__file__, 556, 17), rotate_140696, *[theta_140697], **kwargs_140698)
        
        # Assigning a type to the variable 'tr' (line 556)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 556, 12), 'tr', rotate_call_result_140699)
        
        # Assigning a Call to a Name (line 557):
        
        # Assigning a Call to a Name (line 557):
        
        # Assigning a Call to a Name (line 557):
        
        # Call to translate(...): (line 557)
        # Processing the call arguments (line 557)
        # Getting the type of 'posx' (line 557)
        posx_140702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 30), 'posx', False)
        # Getting the type of 'x_box' (line 557)
        x_box_140703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 37), 'x_box', False)
        # Applying the binary operator '+' (line 557)
        result_add_140704 = python_operator(stypy.reporting.localization.Localization(__file__, 557, 30), '+', posx_140702, x_box_140703)
        
        # Getting the type of 'posy' (line 557)
        posy_140705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 44), 'posy', False)
        # Getting the type of 'y_box' (line 557)
        y_box_140706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 51), 'y_box', False)
        # Applying the binary operator '+' (line 557)
        result_add_140707 = python_operator(stypy.reporting.localization.Localization(__file__, 557, 44), '+', posy_140705, y_box_140706)
        
        # Processing the call keyword arguments (line 557)
        kwargs_140708 = {}
        # Getting the type of 'tr' (line 557)
        tr_140700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 17), 'tr', False)
        # Obtaining the member 'translate' of a type (line 557)
        translate_140701 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 557, 17), tr_140700, 'translate')
        # Calling translate(args, kwargs) (line 557)
        translate_call_result_140709 = invoke(stypy.reporting.localization.Localization(__file__, 557, 17), translate_140701, *[result_add_140704, result_add_140707], **kwargs_140708)
        
        # Assigning a type to the variable 'tr' (line 557)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 557, 12), 'tr', translate_call_result_140709)
        
        # Call to set_transform(...): (line 558)
        # Processing the call arguments (line 558)
        # Getting the type of 'tr' (line 558)
        tr_140713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 43), 'tr', False)
        # Processing the call keyword arguments (line 558)
        kwargs_140714 = {}
        # Getting the type of 'self' (line 558)
        self_140710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 12), 'self', False)
        # Obtaining the member '_bbox_patch' of a type (line 558)
        _bbox_patch_140711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 558, 12), self_140710, '_bbox_patch')
        # Obtaining the member 'set_transform' of a type (line 558)
        set_transform_140712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 558, 12), _bbox_patch_140711, 'set_transform')
        # Calling set_transform(args, kwargs) (line 558)
        set_transform_call_result_140715 = invoke(stypy.reporting.localization.Localization(__file__, 558, 12), set_transform_140712, *[tr_140713], **kwargs_140714)
        
        
        # Assigning a Call to a Name (line 559):
        
        # Assigning a Call to a Name (line 559):
        
        # Assigning a Call to a Name (line 559):
        
        # Call to points_to_pixels(...): (line 559)
        # Processing the call arguments (line 559)
        
        # Call to get_size(...): (line 559)
        # Processing the call keyword arguments (line 559)
        kwargs_140720 = {}
        # Getting the type of 'self' (line 559)
        self_140718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 58), 'self', False)
        # Obtaining the member 'get_size' of a type (line 559)
        get_size_140719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 559, 58), self_140718, 'get_size')
        # Calling get_size(args, kwargs) (line 559)
        get_size_call_result_140721 = invoke(stypy.reporting.localization.Localization(__file__, 559, 58), get_size_140719, *[], **kwargs_140720)
        
        # Processing the call keyword arguments (line 559)
        kwargs_140722 = {}
        # Getting the type of 'renderer' (line 559)
        renderer_140716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 32), 'renderer', False)
        # Obtaining the member 'points_to_pixels' of a type (line 559)
        points_to_pixels_140717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 559, 32), renderer_140716, 'points_to_pixels')
        # Calling points_to_pixels(args, kwargs) (line 559)
        points_to_pixels_call_result_140723 = invoke(stypy.reporting.localization.Localization(__file__, 559, 32), points_to_pixels_140717, *[get_size_call_result_140721], **kwargs_140722)
        
        # Assigning a type to the variable 'fontsize_in_pixel' (line 559)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 559, 12), 'fontsize_in_pixel', points_to_pixels_call_result_140723)
        
        # Call to set_mutation_scale(...): (line 560)
        # Processing the call arguments (line 560)
        # Getting the type of 'fontsize_in_pixel' (line 560)
        fontsize_in_pixel_140727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 48), 'fontsize_in_pixel', False)
        # Processing the call keyword arguments (line 560)
        kwargs_140728 = {}
        # Getting the type of 'self' (line 560)
        self_140724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 12), 'self', False)
        # Obtaining the member '_bbox_patch' of a type (line 560)
        _bbox_patch_140725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 12), self_140724, '_bbox_patch')
        # Obtaining the member 'set_mutation_scale' of a type (line 560)
        set_mutation_scale_140726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 12), _bbox_patch_140725, 'set_mutation_scale')
        # Calling set_mutation_scale(args, kwargs) (line 560)
        set_mutation_scale_call_result_140729 = invoke(stypy.reporting.localization.Localization(__file__, 560, 12), set_mutation_scale_140726, *[fontsize_in_pixel_140727], **kwargs_140728)
        
        # SSA join for if statement (line 542)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'update_bbox_position_size(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update_bbox_position_size' in the type store
        # Getting the type of 'stypy_return_type' (line 535)
        stypy_return_type_140730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_140730)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update_bbox_position_size'
        return stypy_return_type_140730


    @norecursion
    def _draw_bbox(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_draw_bbox'
        module_type_store = module_type_store.open_function_context('_draw_bbox', 562, 4, False)
        # Assigning a type to the variable 'self' (line 563)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 563, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text._draw_bbox.__dict__.__setitem__('stypy_localization', localization)
        Text._draw_bbox.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text._draw_bbox.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text._draw_bbox.__dict__.__setitem__('stypy_function_name', 'Text._draw_bbox')
        Text._draw_bbox.__dict__.__setitem__('stypy_param_names_list', ['renderer', 'posx', 'posy'])
        Text._draw_bbox.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text._draw_bbox.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text._draw_bbox.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text._draw_bbox.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text._draw_bbox.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text._draw_bbox.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text._draw_bbox', ['renderer', 'posx', 'posy'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_draw_bbox', localization, ['renderer', 'posx', 'posy'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_draw_bbox(...)' code ##################

        unicode_140731 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 566, (-1)), 'unicode', u' Update the location and the size of the bbox\n        (FancyBboxPatch), and draw\n        ')
        
        # Assigning a Call to a Tuple (line 568):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to _get_textbox(...): (line 568)
        # Processing the call arguments (line 568)
        # Getting the type of 'self' (line 568)
        self_140733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 50), 'self', False)
        # Getting the type of 'renderer' (line 568)
        renderer_140734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 56), 'renderer', False)
        # Processing the call keyword arguments (line 568)
        kwargs_140735 = {}
        # Getting the type of '_get_textbox' (line 568)
        _get_textbox_140732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 37), '_get_textbox', False)
        # Calling _get_textbox(args, kwargs) (line 568)
        _get_textbox_call_result_140736 = invoke(stypy.reporting.localization.Localization(__file__, 568, 37), _get_textbox_140732, *[self_140733, renderer_140734], **kwargs_140735)
        
        # Assigning a type to the variable 'call_assignment_139074' (line 568)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 568, 8), 'call_assignment_139074', _get_textbox_call_result_140736)
        
        # Assigning a Call to a Name (line 568):
        
        # Assigning a Call to a Name (line 568):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_140739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 568, 8), 'int')
        # Processing the call keyword arguments
        kwargs_140740 = {}
        # Getting the type of 'call_assignment_139074' (line 568)
        call_assignment_139074_140737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 8), 'call_assignment_139074', False)
        # Obtaining the member '__getitem__' of a type (line 568)
        getitem___140738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 568, 8), call_assignment_139074_140737, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_140741 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___140738, *[int_140739], **kwargs_140740)
        
        # Assigning a type to the variable 'call_assignment_139075' (line 568)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 568, 8), 'call_assignment_139075', getitem___call_result_140741)
        
        # Assigning a Name to a Name (line 568):
        
        # Assigning a Name to a Name (line 568):
        # Getting the type of 'call_assignment_139075' (line 568)
        call_assignment_139075_140742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 8), 'call_assignment_139075')
        # Assigning a type to the variable 'x_box' (line 568)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 568, 8), 'x_box', call_assignment_139075_140742)
        
        # Assigning a Call to a Name (line 568):
        
        # Assigning a Call to a Name (line 568):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_140745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 568, 8), 'int')
        # Processing the call keyword arguments
        kwargs_140746 = {}
        # Getting the type of 'call_assignment_139074' (line 568)
        call_assignment_139074_140743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 8), 'call_assignment_139074', False)
        # Obtaining the member '__getitem__' of a type (line 568)
        getitem___140744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 568, 8), call_assignment_139074_140743, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_140747 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___140744, *[int_140745], **kwargs_140746)
        
        # Assigning a type to the variable 'call_assignment_139076' (line 568)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 568, 8), 'call_assignment_139076', getitem___call_result_140747)
        
        # Assigning a Name to a Name (line 568):
        
        # Assigning a Name to a Name (line 568):
        # Getting the type of 'call_assignment_139076' (line 568)
        call_assignment_139076_140748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 8), 'call_assignment_139076')
        # Assigning a type to the variable 'y_box' (line 568)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 568, 15), 'y_box', call_assignment_139076_140748)
        
        # Assigning a Call to a Name (line 568):
        
        # Assigning a Call to a Name (line 568):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_140751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 568, 8), 'int')
        # Processing the call keyword arguments
        kwargs_140752 = {}
        # Getting the type of 'call_assignment_139074' (line 568)
        call_assignment_139074_140749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 8), 'call_assignment_139074', False)
        # Obtaining the member '__getitem__' of a type (line 568)
        getitem___140750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 568, 8), call_assignment_139074_140749, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_140753 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___140750, *[int_140751], **kwargs_140752)
        
        # Assigning a type to the variable 'call_assignment_139077' (line 568)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 568, 8), 'call_assignment_139077', getitem___call_result_140753)
        
        # Assigning a Name to a Name (line 568):
        
        # Assigning a Name to a Name (line 568):
        # Getting the type of 'call_assignment_139077' (line 568)
        call_assignment_139077_140754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 8), 'call_assignment_139077')
        # Assigning a type to the variable 'w_box' (line 568)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 568, 22), 'w_box', call_assignment_139077_140754)
        
        # Assigning a Call to a Name (line 568):
        
        # Assigning a Call to a Name (line 568):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_140757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 568, 8), 'int')
        # Processing the call keyword arguments
        kwargs_140758 = {}
        # Getting the type of 'call_assignment_139074' (line 568)
        call_assignment_139074_140755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 8), 'call_assignment_139074', False)
        # Obtaining the member '__getitem__' of a type (line 568)
        getitem___140756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 568, 8), call_assignment_139074_140755, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_140759 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___140756, *[int_140757], **kwargs_140758)
        
        # Assigning a type to the variable 'call_assignment_139078' (line 568)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 568, 8), 'call_assignment_139078', getitem___call_result_140759)
        
        # Assigning a Name to a Name (line 568):
        
        # Assigning a Name to a Name (line 568):
        # Getting the type of 'call_assignment_139078' (line 568)
        call_assignment_139078_140760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 8), 'call_assignment_139078')
        # Assigning a type to the variable 'h_box' (line 568)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 568, 29), 'h_box', call_assignment_139078_140760)
        
        # Call to set_bounds(...): (line 569)
        # Processing the call arguments (line 569)
        float_140764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 569, 36), 'float')
        float_140765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 569, 40), 'float')
        # Getting the type of 'w_box' (line 569)
        w_box_140766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 44), 'w_box', False)
        # Getting the type of 'h_box' (line 569)
        h_box_140767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 51), 'h_box', False)
        # Processing the call keyword arguments (line 569)
        kwargs_140768 = {}
        # Getting the type of 'self' (line 569)
        self_140761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 8), 'self', False)
        # Obtaining the member '_bbox_patch' of a type (line 569)
        _bbox_patch_140762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 569, 8), self_140761, '_bbox_patch')
        # Obtaining the member 'set_bounds' of a type (line 569)
        set_bounds_140763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 569, 8), _bbox_patch_140762, 'set_bounds')
        # Calling set_bounds(args, kwargs) (line 569)
        set_bounds_call_result_140769 = invoke(stypy.reporting.localization.Localization(__file__, 569, 8), set_bounds_140763, *[float_140764, float_140765, w_box_140766, h_box_140767], **kwargs_140768)
        
        
        # Assigning a Call to a Name (line 570):
        
        # Assigning a Call to a Name (line 570):
        
        # Assigning a Call to a Name (line 570):
        
        # Call to deg2rad(...): (line 570)
        # Processing the call arguments (line 570)
        
        # Call to get_rotation(...): (line 570)
        # Processing the call keyword arguments (line 570)
        kwargs_140774 = {}
        # Getting the type of 'self' (line 570)
        self_140772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 27), 'self', False)
        # Obtaining the member 'get_rotation' of a type (line 570)
        get_rotation_140773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 570, 27), self_140772, 'get_rotation')
        # Calling get_rotation(args, kwargs) (line 570)
        get_rotation_call_result_140775 = invoke(stypy.reporting.localization.Localization(__file__, 570, 27), get_rotation_140773, *[], **kwargs_140774)
        
        # Processing the call keyword arguments (line 570)
        kwargs_140776 = {}
        # Getting the type of 'np' (line 570)
        np_140770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 16), 'np', False)
        # Obtaining the member 'deg2rad' of a type (line 570)
        deg2rad_140771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 570, 16), np_140770, 'deg2rad')
        # Calling deg2rad(args, kwargs) (line 570)
        deg2rad_call_result_140777 = invoke(stypy.reporting.localization.Localization(__file__, 570, 16), deg2rad_140771, *[get_rotation_call_result_140775], **kwargs_140776)
        
        # Assigning a type to the variable 'theta' (line 570)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 570, 8), 'theta', deg2rad_call_result_140777)
        
        # Assigning a Call to a Name (line 571):
        
        # Assigning a Call to a Name (line 571):
        
        # Assigning a Call to a Name (line 571):
        
        # Call to rotate(...): (line 571)
        # Processing the call arguments (line 571)
        # Getting the type of 'theta' (line 571)
        theta_140783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 43), 'theta', False)
        # Processing the call keyword arguments (line 571)
        kwargs_140784 = {}
        
        # Call to Affine2D(...): (line 571)
        # Processing the call keyword arguments (line 571)
        kwargs_140780 = {}
        # Getting the type of 'mtransforms' (line 571)
        mtransforms_140778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 13), 'mtransforms', False)
        # Obtaining the member 'Affine2D' of a type (line 571)
        Affine2D_140779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 571, 13), mtransforms_140778, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 571)
        Affine2D_call_result_140781 = invoke(stypy.reporting.localization.Localization(__file__, 571, 13), Affine2D_140779, *[], **kwargs_140780)
        
        # Obtaining the member 'rotate' of a type (line 571)
        rotate_140782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 571, 13), Affine2D_call_result_140781, 'rotate')
        # Calling rotate(args, kwargs) (line 571)
        rotate_call_result_140785 = invoke(stypy.reporting.localization.Localization(__file__, 571, 13), rotate_140782, *[theta_140783], **kwargs_140784)
        
        # Assigning a type to the variable 'tr' (line 571)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 571, 8), 'tr', rotate_call_result_140785)
        
        # Assigning a Call to a Name (line 572):
        
        # Assigning a Call to a Name (line 572):
        
        # Assigning a Call to a Name (line 572):
        
        # Call to translate(...): (line 572)
        # Processing the call arguments (line 572)
        # Getting the type of 'posx' (line 572)
        posx_140788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 26), 'posx', False)
        # Getting the type of 'x_box' (line 572)
        x_box_140789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 33), 'x_box', False)
        # Applying the binary operator '+' (line 572)
        result_add_140790 = python_operator(stypy.reporting.localization.Localization(__file__, 572, 26), '+', posx_140788, x_box_140789)
        
        # Getting the type of 'posy' (line 572)
        posy_140791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 40), 'posy', False)
        # Getting the type of 'y_box' (line 572)
        y_box_140792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 47), 'y_box', False)
        # Applying the binary operator '+' (line 572)
        result_add_140793 = python_operator(stypy.reporting.localization.Localization(__file__, 572, 40), '+', posy_140791, y_box_140792)
        
        # Processing the call keyword arguments (line 572)
        kwargs_140794 = {}
        # Getting the type of 'tr' (line 572)
        tr_140786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 13), 'tr', False)
        # Obtaining the member 'translate' of a type (line 572)
        translate_140787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 572, 13), tr_140786, 'translate')
        # Calling translate(args, kwargs) (line 572)
        translate_call_result_140795 = invoke(stypy.reporting.localization.Localization(__file__, 572, 13), translate_140787, *[result_add_140790, result_add_140793], **kwargs_140794)
        
        # Assigning a type to the variable 'tr' (line 572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 572, 8), 'tr', translate_call_result_140795)
        
        # Call to set_transform(...): (line 573)
        # Processing the call arguments (line 573)
        # Getting the type of 'tr' (line 573)
        tr_140799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 39), 'tr', False)
        # Processing the call keyword arguments (line 573)
        kwargs_140800 = {}
        # Getting the type of 'self' (line 573)
        self_140796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 8), 'self', False)
        # Obtaining the member '_bbox_patch' of a type (line 573)
        _bbox_patch_140797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 573, 8), self_140796, '_bbox_patch')
        # Obtaining the member 'set_transform' of a type (line 573)
        set_transform_140798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 573, 8), _bbox_patch_140797, 'set_transform')
        # Calling set_transform(args, kwargs) (line 573)
        set_transform_call_result_140801 = invoke(stypy.reporting.localization.Localization(__file__, 573, 8), set_transform_140798, *[tr_140799], **kwargs_140800)
        
        
        # Assigning a Call to a Name (line 574):
        
        # Assigning a Call to a Name (line 574):
        
        # Assigning a Call to a Name (line 574):
        
        # Call to points_to_pixels(...): (line 574)
        # Processing the call arguments (line 574)
        
        # Call to get_size(...): (line 574)
        # Processing the call keyword arguments (line 574)
        kwargs_140806 = {}
        # Getting the type of 'self' (line 574)
        self_140804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 54), 'self', False)
        # Obtaining the member 'get_size' of a type (line 574)
        get_size_140805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 574, 54), self_140804, 'get_size')
        # Calling get_size(args, kwargs) (line 574)
        get_size_call_result_140807 = invoke(stypy.reporting.localization.Localization(__file__, 574, 54), get_size_140805, *[], **kwargs_140806)
        
        # Processing the call keyword arguments (line 574)
        kwargs_140808 = {}
        # Getting the type of 'renderer' (line 574)
        renderer_140802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 28), 'renderer', False)
        # Obtaining the member 'points_to_pixels' of a type (line 574)
        points_to_pixels_140803 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 574, 28), renderer_140802, 'points_to_pixels')
        # Calling points_to_pixels(args, kwargs) (line 574)
        points_to_pixels_call_result_140809 = invoke(stypy.reporting.localization.Localization(__file__, 574, 28), points_to_pixels_140803, *[get_size_call_result_140807], **kwargs_140808)
        
        # Assigning a type to the variable 'fontsize_in_pixel' (line 574)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 574, 8), 'fontsize_in_pixel', points_to_pixels_call_result_140809)
        
        # Call to set_mutation_scale(...): (line 575)
        # Processing the call arguments (line 575)
        # Getting the type of 'fontsize_in_pixel' (line 575)
        fontsize_in_pixel_140813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 44), 'fontsize_in_pixel', False)
        # Processing the call keyword arguments (line 575)
        kwargs_140814 = {}
        # Getting the type of 'self' (line 575)
        self_140810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 8), 'self', False)
        # Obtaining the member '_bbox_patch' of a type (line 575)
        _bbox_patch_140811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 575, 8), self_140810, '_bbox_patch')
        # Obtaining the member 'set_mutation_scale' of a type (line 575)
        set_mutation_scale_140812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 575, 8), _bbox_patch_140811, 'set_mutation_scale')
        # Calling set_mutation_scale(args, kwargs) (line 575)
        set_mutation_scale_call_result_140815 = invoke(stypy.reporting.localization.Localization(__file__, 575, 8), set_mutation_scale_140812, *[fontsize_in_pixel_140813], **kwargs_140814)
        
        
        # Call to draw(...): (line 576)
        # Processing the call arguments (line 576)
        # Getting the type of 'renderer' (line 576)
        renderer_140819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 30), 'renderer', False)
        # Processing the call keyword arguments (line 576)
        kwargs_140820 = {}
        # Getting the type of 'self' (line 576)
        self_140816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 8), 'self', False)
        # Obtaining the member '_bbox_patch' of a type (line 576)
        _bbox_patch_140817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 576, 8), self_140816, '_bbox_patch')
        # Obtaining the member 'draw' of a type (line 576)
        draw_140818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 576, 8), _bbox_patch_140817, 'draw')
        # Calling draw(args, kwargs) (line 576)
        draw_call_result_140821 = invoke(stypy.reporting.localization.Localization(__file__, 576, 8), draw_140818, *[renderer_140819], **kwargs_140820)
        
        
        # ################# End of '_draw_bbox(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_draw_bbox' in the type store
        # Getting the type of 'stypy_return_type' (line 562)
        stypy_return_type_140822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_140822)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_draw_bbox'
        return stypy_return_type_140822


    @norecursion
    def _update_clip_properties(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update_clip_properties'
        module_type_store = module_type_store.open_function_context('_update_clip_properties', 578, 4, False)
        # Assigning a type to the variable 'self' (line 579)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 579, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text._update_clip_properties.__dict__.__setitem__('stypy_localization', localization)
        Text._update_clip_properties.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text._update_clip_properties.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text._update_clip_properties.__dict__.__setitem__('stypy_function_name', 'Text._update_clip_properties')
        Text._update_clip_properties.__dict__.__setitem__('stypy_param_names_list', [])
        Text._update_clip_properties.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text._update_clip_properties.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text._update_clip_properties.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text._update_clip_properties.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text._update_clip_properties.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text._update_clip_properties.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text._update_clip_properties', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update_clip_properties', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update_clip_properties(...)' code ##################

        
        # Assigning a Call to a Name (line 579):
        
        # Assigning a Call to a Name (line 579):
        
        # Assigning a Call to a Name (line 579):
        
        # Call to dict(...): (line 579)
        # Processing the call keyword arguments (line 579)
        # Getting the type of 'self' (line 579)
        self_140824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 34), 'self', False)
        # Obtaining the member 'clipbox' of a type (line 579)
        clipbox_140825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 579, 34), self_140824, 'clipbox')
        keyword_140826 = clipbox_140825
        # Getting the type of 'self' (line 580)
        self_140827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 35), 'self', False)
        # Obtaining the member '_clippath' of a type (line 580)
        _clippath_140828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 580, 35), self_140827, '_clippath')
        keyword_140829 = _clippath_140828
        # Getting the type of 'self' (line 581)
        self_140830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 33), 'self', False)
        # Obtaining the member '_clipon' of a type (line 581)
        _clipon_140831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 581, 33), self_140830, '_clipon')
        keyword_140832 = _clipon_140831
        kwargs_140833 = {'clip_box': keyword_140826, 'clip_path': keyword_140829, 'clip_on': keyword_140832}
        # Getting the type of 'dict' (line 579)
        dict_140823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 20), 'dict', False)
        # Calling dict(args, kwargs) (line 579)
        dict_call_result_140834 = invoke(stypy.reporting.localization.Localization(__file__, 579, 20), dict_140823, *[], **kwargs_140833)
        
        # Assigning a type to the variable 'clipprops' (line 579)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 579, 8), 'clipprops', dict_call_result_140834)
        
        # Getting the type of 'self' (line 583)
        self_140835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 11), 'self')
        # Obtaining the member '_bbox_patch' of a type (line 583)
        _bbox_patch_140836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 583, 11), self_140835, '_bbox_patch')
        # Testing the type of an if condition (line 583)
        if_condition_140837 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 583, 8), _bbox_patch_140836)
        # Assigning a type to the variable 'if_condition_140837' (line 583)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 583, 8), 'if_condition_140837', if_condition_140837)
        # SSA begins for if statement (line 583)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 584):
        
        # Assigning a Call to a Name (line 584):
        
        # Assigning a Call to a Name (line 584):
        
        # Call to update(...): (line 584)
        # Processing the call arguments (line 584)
        # Getting the type of 'clipprops' (line 584)
        clipprops_140841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 43), 'clipprops', False)
        # Processing the call keyword arguments (line 584)
        kwargs_140842 = {}
        # Getting the type of 'self' (line 584)
        self_140838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 19), 'self', False)
        # Obtaining the member '_bbox_patch' of a type (line 584)
        _bbox_patch_140839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 584, 19), self_140838, '_bbox_patch')
        # Obtaining the member 'update' of a type (line 584)
        update_140840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 584, 19), _bbox_patch_140839, 'update')
        # Calling update(args, kwargs) (line 584)
        update_call_result_140843 = invoke(stypy.reporting.localization.Localization(__file__, 584, 19), update_140840, *[clipprops_140841], **kwargs_140842)
        
        # Assigning a type to the variable 'bbox' (line 584)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 584, 12), 'bbox', update_call_result_140843)
        # SSA join for if statement (line 583)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_update_clip_properties(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update_clip_properties' in the type store
        # Getting the type of 'stypy_return_type' (line 578)
        stypy_return_type_140844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_140844)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update_clip_properties'
        return stypy_return_type_140844


    @norecursion
    def set_clip_box(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_clip_box'
        module_type_store = module_type_store.open_function_context('set_clip_box', 586, 4, False)
        # Assigning a type to the variable 'self' (line 587)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 587, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_clip_box.__dict__.__setitem__('stypy_localization', localization)
        Text.set_clip_box.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_clip_box.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_clip_box.__dict__.__setitem__('stypy_function_name', 'Text.set_clip_box')
        Text.set_clip_box.__dict__.__setitem__('stypy_param_names_list', ['clipbox'])
        Text.set_clip_box.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_clip_box.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_clip_box.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_clip_box.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_clip_box.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_clip_box.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_clip_box', ['clipbox'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_clip_box', localization, ['clipbox'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_clip_box(...)' code ##################

        unicode_140845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 591, (-1)), 'unicode', u"\n        Set the artist's clip :class:`~matplotlib.transforms.Bbox`.\n\n        ACCEPTS: a :class:`matplotlib.transforms.Bbox` instance\n        ")
        
        # Call to set_clip_box(...): (line 592)
        # Processing the call arguments (line 592)
        # Getting the type of 'clipbox' (line 592)
        clipbox_140852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 39), 'clipbox', False)
        # Processing the call keyword arguments (line 592)
        kwargs_140853 = {}
        
        # Call to super(...): (line 592)
        # Processing the call arguments (line 592)
        # Getting the type of 'Text' (line 592)
        Text_140847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 14), 'Text', False)
        # Getting the type of 'self' (line 592)
        self_140848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 20), 'self', False)
        # Processing the call keyword arguments (line 592)
        kwargs_140849 = {}
        # Getting the type of 'super' (line 592)
        super_140846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 8), 'super', False)
        # Calling super(args, kwargs) (line 592)
        super_call_result_140850 = invoke(stypy.reporting.localization.Localization(__file__, 592, 8), super_140846, *[Text_140847, self_140848], **kwargs_140849)
        
        # Obtaining the member 'set_clip_box' of a type (line 592)
        set_clip_box_140851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 592, 8), super_call_result_140850, 'set_clip_box')
        # Calling set_clip_box(args, kwargs) (line 592)
        set_clip_box_call_result_140854 = invoke(stypy.reporting.localization.Localization(__file__, 592, 8), set_clip_box_140851, *[clipbox_140852], **kwargs_140853)
        
        
        # Call to _update_clip_properties(...): (line 593)
        # Processing the call keyword arguments (line 593)
        kwargs_140857 = {}
        # Getting the type of 'self' (line 593)
        self_140855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 8), 'self', False)
        # Obtaining the member '_update_clip_properties' of a type (line 593)
        _update_clip_properties_140856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 593, 8), self_140855, '_update_clip_properties')
        # Calling _update_clip_properties(args, kwargs) (line 593)
        _update_clip_properties_call_result_140858 = invoke(stypy.reporting.localization.Localization(__file__, 593, 8), _update_clip_properties_140856, *[], **kwargs_140857)
        
        
        # ################# End of 'set_clip_box(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_clip_box' in the type store
        # Getting the type of 'stypy_return_type' (line 586)
        stypy_return_type_140859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_140859)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_clip_box'
        return stypy_return_type_140859


    @norecursion
    def set_clip_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 595)
        None_140860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 44), 'None')
        defaults = [None_140860]
        # Create a new context for function 'set_clip_path'
        module_type_store = module_type_store.open_function_context('set_clip_path', 595, 4, False)
        # Assigning a type to the variable 'self' (line 596)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 596, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_clip_path.__dict__.__setitem__('stypy_localization', localization)
        Text.set_clip_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_clip_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_clip_path.__dict__.__setitem__('stypy_function_name', 'Text.set_clip_path')
        Text.set_clip_path.__dict__.__setitem__('stypy_param_names_list', ['path', 'transform'])
        Text.set_clip_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_clip_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_clip_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_clip_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_clip_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_clip_path.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_clip_path', ['path', 'transform'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_clip_path', localization, ['path', 'transform'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_clip_path(...)' code ##################

        unicode_140861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 615, (-1)), 'unicode', u"\n        Set the artist's clip path, which may be:\n\n          * a :class:`~matplotlib.patches.Patch` (or subclass) instance\n\n          * a :class:`~matplotlib.path.Path` instance, in which case\n             an optional :class:`~matplotlib.transforms.Transform`\n             instance may be provided, which will be applied to the\n             path before using it for clipping.\n\n          * *None*, to remove the clipping path\n\n        For efficiency, if the path happens to be an axis-aligned\n        rectangle, this method will set the clipping box to the\n        corresponding rectangle and set the clipping path to *None*.\n\n        ACCEPTS: [ (:class:`~matplotlib.path.Path`,\n        :class:`~matplotlib.transforms.Transform`) |\n        :class:`~matplotlib.patches.Patch` | None ]\n        ")
        
        # Call to set_clip_path(...): (line 616)
        # Processing the call arguments (line 616)
        # Getting the type of 'path' (line 616)
        path_140868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 40), 'path', False)
        # Getting the type of 'transform' (line 616)
        transform_140869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 46), 'transform', False)
        # Processing the call keyword arguments (line 616)
        kwargs_140870 = {}
        
        # Call to super(...): (line 616)
        # Processing the call arguments (line 616)
        # Getting the type of 'Text' (line 616)
        Text_140863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 14), 'Text', False)
        # Getting the type of 'self' (line 616)
        self_140864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 20), 'self', False)
        # Processing the call keyword arguments (line 616)
        kwargs_140865 = {}
        # Getting the type of 'super' (line 616)
        super_140862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 8), 'super', False)
        # Calling super(args, kwargs) (line 616)
        super_call_result_140866 = invoke(stypy.reporting.localization.Localization(__file__, 616, 8), super_140862, *[Text_140863, self_140864], **kwargs_140865)
        
        # Obtaining the member 'set_clip_path' of a type (line 616)
        set_clip_path_140867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 8), super_call_result_140866, 'set_clip_path')
        # Calling set_clip_path(args, kwargs) (line 616)
        set_clip_path_call_result_140871 = invoke(stypy.reporting.localization.Localization(__file__, 616, 8), set_clip_path_140867, *[path_140868, transform_140869], **kwargs_140870)
        
        
        # Call to _update_clip_properties(...): (line 617)
        # Processing the call keyword arguments (line 617)
        kwargs_140874 = {}
        # Getting the type of 'self' (line 617)
        self_140872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 8), 'self', False)
        # Obtaining the member '_update_clip_properties' of a type (line 617)
        _update_clip_properties_140873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 617, 8), self_140872, '_update_clip_properties')
        # Calling _update_clip_properties(args, kwargs) (line 617)
        _update_clip_properties_call_result_140875 = invoke(stypy.reporting.localization.Localization(__file__, 617, 8), _update_clip_properties_140873, *[], **kwargs_140874)
        
        
        # ################# End of 'set_clip_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_clip_path' in the type store
        # Getting the type of 'stypy_return_type' (line 595)
        stypy_return_type_140876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_140876)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_clip_path'
        return stypy_return_type_140876


    @norecursion
    def set_clip_on(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_clip_on'
        module_type_store = module_type_store.open_function_context('set_clip_on', 619, 4, False)
        # Assigning a type to the variable 'self' (line 620)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 620, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_clip_on.__dict__.__setitem__('stypy_localization', localization)
        Text.set_clip_on.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_clip_on.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_clip_on.__dict__.__setitem__('stypy_function_name', 'Text.set_clip_on')
        Text.set_clip_on.__dict__.__setitem__('stypy_param_names_list', ['b'])
        Text.set_clip_on.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_clip_on.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_clip_on.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_clip_on.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_clip_on.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_clip_on.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_clip_on', ['b'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_clip_on', localization, ['b'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_clip_on(...)' code ##################

        unicode_140877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 627, (-1)), 'unicode', u'\n        Set whether artist uses clipping.\n\n        When False artists will be visible out side of the axes which\n        can lead to unexpected results.\n\n        ACCEPTS: [True | False]\n        ')
        
        # Call to set_clip_on(...): (line 628)
        # Processing the call arguments (line 628)
        # Getting the type of 'b' (line 628)
        b_140884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 38), 'b', False)
        # Processing the call keyword arguments (line 628)
        kwargs_140885 = {}
        
        # Call to super(...): (line 628)
        # Processing the call arguments (line 628)
        # Getting the type of 'Text' (line 628)
        Text_140879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 14), 'Text', False)
        # Getting the type of 'self' (line 628)
        self_140880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 20), 'self', False)
        # Processing the call keyword arguments (line 628)
        kwargs_140881 = {}
        # Getting the type of 'super' (line 628)
        super_140878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 8), 'super', False)
        # Calling super(args, kwargs) (line 628)
        super_call_result_140882 = invoke(stypy.reporting.localization.Localization(__file__, 628, 8), super_140878, *[Text_140879, self_140880], **kwargs_140881)
        
        # Obtaining the member 'set_clip_on' of a type (line 628)
        set_clip_on_140883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 8), super_call_result_140882, 'set_clip_on')
        # Calling set_clip_on(args, kwargs) (line 628)
        set_clip_on_call_result_140886 = invoke(stypy.reporting.localization.Localization(__file__, 628, 8), set_clip_on_140883, *[b_140884], **kwargs_140885)
        
        
        # Call to _update_clip_properties(...): (line 629)
        # Processing the call keyword arguments (line 629)
        kwargs_140889 = {}
        # Getting the type of 'self' (line 629)
        self_140887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 8), 'self', False)
        # Obtaining the member '_update_clip_properties' of a type (line 629)
        _update_clip_properties_140888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 629, 8), self_140887, '_update_clip_properties')
        # Calling _update_clip_properties(args, kwargs) (line 629)
        _update_clip_properties_call_result_140890 = invoke(stypy.reporting.localization.Localization(__file__, 629, 8), _update_clip_properties_140888, *[], **kwargs_140889)
        
        
        # ################# End of 'set_clip_on(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_clip_on' in the type store
        # Getting the type of 'stypy_return_type' (line 619)
        stypy_return_type_140891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_140891)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_clip_on'
        return stypy_return_type_140891


    @norecursion
    def get_wrap(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_wrap'
        module_type_store = module_type_store.open_function_context('get_wrap', 631, 4, False)
        # Assigning a type to the variable 'self' (line 632)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 632, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.get_wrap.__dict__.__setitem__('stypy_localization', localization)
        Text.get_wrap.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.get_wrap.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.get_wrap.__dict__.__setitem__('stypy_function_name', 'Text.get_wrap')
        Text.get_wrap.__dict__.__setitem__('stypy_param_names_list', [])
        Text.get_wrap.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.get_wrap.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.get_wrap.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.get_wrap.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.get_wrap.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.get_wrap.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.get_wrap', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_wrap', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_wrap(...)' code ##################

        unicode_140892 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 634, (-1)), 'unicode', u'\n        Returns the wrapping state for the text.\n        ')
        # Getting the type of 'self' (line 635)
        self_140893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 15), 'self')
        # Obtaining the member '_wrap' of a type (line 635)
        _wrap_140894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 635, 15), self_140893, '_wrap')
        # Assigning a type to the variable 'stypy_return_type' (line 635)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 635, 8), 'stypy_return_type', _wrap_140894)
        
        # ################# End of 'get_wrap(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_wrap' in the type store
        # Getting the type of 'stypy_return_type' (line 631)
        stypy_return_type_140895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_140895)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_wrap'
        return stypy_return_type_140895


    @norecursion
    def set_wrap(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_wrap'
        module_type_store = module_type_store.open_function_context('set_wrap', 637, 4, False)
        # Assigning a type to the variable 'self' (line 638)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 638, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_wrap.__dict__.__setitem__('stypy_localization', localization)
        Text.set_wrap.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_wrap.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_wrap.__dict__.__setitem__('stypy_function_name', 'Text.set_wrap')
        Text.set_wrap.__dict__.__setitem__('stypy_param_names_list', ['wrap'])
        Text.set_wrap.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_wrap.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_wrap.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_wrap.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_wrap.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_wrap.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_wrap', ['wrap'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_wrap', localization, ['wrap'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_wrap(...)' code ##################

        unicode_140896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 640, (-1)), 'unicode', u'\n        Sets the wrapping state for the text.\n        ')
        
        # Assigning a Name to a Attribute (line 641):
        
        # Assigning a Name to a Attribute (line 641):
        
        # Assigning a Name to a Attribute (line 641):
        # Getting the type of 'wrap' (line 641)
        wrap_140897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 21), 'wrap')
        # Getting the type of 'self' (line 641)
        self_140898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 8), 'self')
        # Setting the type of the member '_wrap' of a type (line 641)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 641, 8), self_140898, '_wrap', wrap_140897)
        
        # ################# End of 'set_wrap(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_wrap' in the type store
        # Getting the type of 'stypy_return_type' (line 637)
        stypy_return_type_140899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_140899)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_wrap'
        return stypy_return_type_140899


    @norecursion
    def _get_wrap_line_width(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_wrap_line_width'
        module_type_store = module_type_store.open_function_context('_get_wrap_line_width', 643, 4, False)
        # Assigning a type to the variable 'self' (line 644)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 644, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text._get_wrap_line_width.__dict__.__setitem__('stypy_localization', localization)
        Text._get_wrap_line_width.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text._get_wrap_line_width.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text._get_wrap_line_width.__dict__.__setitem__('stypy_function_name', 'Text._get_wrap_line_width')
        Text._get_wrap_line_width.__dict__.__setitem__('stypy_param_names_list', [])
        Text._get_wrap_line_width.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text._get_wrap_line_width.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text._get_wrap_line_width.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text._get_wrap_line_width.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text._get_wrap_line_width.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text._get_wrap_line_width.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text._get_wrap_line_width', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_wrap_line_width', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_wrap_line_width(...)' code ##################

        unicode_140900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 647, (-1)), 'unicode', u'\n        Returns the maximum line width for wrapping text based on the\n        current orientation.\n        ')
        
        # Assigning a Call to a Tuple (line 648):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to transform(...): (line 648)
        # Processing the call arguments (line 648)
        
        # Call to get_position(...): (line 648)
        # Processing the call keyword arguments (line 648)
        kwargs_140908 = {}
        # Getting the type of 'self' (line 648)
        self_140906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 48), 'self', False)
        # Obtaining the member 'get_position' of a type (line 648)
        get_position_140907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 648, 48), self_140906, 'get_position')
        # Calling get_position(args, kwargs) (line 648)
        get_position_call_result_140909 = invoke(stypy.reporting.localization.Localization(__file__, 648, 48), get_position_140907, *[], **kwargs_140908)
        
        # Processing the call keyword arguments (line 648)
        kwargs_140910 = {}
        
        # Call to get_transform(...): (line 648)
        # Processing the call keyword arguments (line 648)
        kwargs_140903 = {}
        # Getting the type of 'self' (line 648)
        self_140901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 17), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 648)
        get_transform_140902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 648, 17), self_140901, 'get_transform')
        # Calling get_transform(args, kwargs) (line 648)
        get_transform_call_result_140904 = invoke(stypy.reporting.localization.Localization(__file__, 648, 17), get_transform_140902, *[], **kwargs_140903)
        
        # Obtaining the member 'transform' of a type (line 648)
        transform_140905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 648, 17), get_transform_call_result_140904, 'transform')
        # Calling transform(args, kwargs) (line 648)
        transform_call_result_140911 = invoke(stypy.reporting.localization.Localization(__file__, 648, 17), transform_140905, *[get_position_call_result_140909], **kwargs_140910)
        
        # Assigning a type to the variable 'call_assignment_139079' (line 648)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 8), 'call_assignment_139079', transform_call_result_140911)
        
        # Assigning a Call to a Name (line 648):
        
        # Assigning a Call to a Name (line 648):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_140914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 648, 8), 'int')
        # Processing the call keyword arguments
        kwargs_140915 = {}
        # Getting the type of 'call_assignment_139079' (line 648)
        call_assignment_139079_140912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 8), 'call_assignment_139079', False)
        # Obtaining the member '__getitem__' of a type (line 648)
        getitem___140913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 648, 8), call_assignment_139079_140912, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_140916 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___140913, *[int_140914], **kwargs_140915)
        
        # Assigning a type to the variable 'call_assignment_139080' (line 648)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 8), 'call_assignment_139080', getitem___call_result_140916)
        
        # Assigning a Name to a Name (line 648):
        
        # Assigning a Name to a Name (line 648):
        # Getting the type of 'call_assignment_139080' (line 648)
        call_assignment_139080_140917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 8), 'call_assignment_139080')
        # Assigning a type to the variable 'x0' (line 648)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 8), 'x0', call_assignment_139080_140917)
        
        # Assigning a Call to a Name (line 648):
        
        # Assigning a Call to a Name (line 648):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_140920 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 648, 8), 'int')
        # Processing the call keyword arguments
        kwargs_140921 = {}
        # Getting the type of 'call_assignment_139079' (line 648)
        call_assignment_139079_140918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 8), 'call_assignment_139079', False)
        # Obtaining the member '__getitem__' of a type (line 648)
        getitem___140919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 648, 8), call_assignment_139079_140918, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_140922 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___140919, *[int_140920], **kwargs_140921)
        
        # Assigning a type to the variable 'call_assignment_139081' (line 648)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 8), 'call_assignment_139081', getitem___call_result_140922)
        
        # Assigning a Name to a Name (line 648):
        
        # Assigning a Name to a Name (line 648):
        # Getting the type of 'call_assignment_139081' (line 648)
        call_assignment_139081_140923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 8), 'call_assignment_139081')
        # Assigning a type to the variable 'y0' (line 648)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 12), 'y0', call_assignment_139081_140923)
        
        # Assigning a Call to a Name (line 649):
        
        # Assigning a Call to a Name (line 649):
        
        # Assigning a Call to a Name (line 649):
        
        # Call to get_window_extent(...): (line 649)
        # Processing the call keyword arguments (line 649)
        kwargs_140929 = {}
        
        # Call to get_figure(...): (line 649)
        # Processing the call keyword arguments (line 649)
        kwargs_140926 = {}
        # Getting the type of 'self' (line 649)
        self_140924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 21), 'self', False)
        # Obtaining the member 'get_figure' of a type (line 649)
        get_figure_140925 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 649, 21), self_140924, 'get_figure')
        # Calling get_figure(args, kwargs) (line 649)
        get_figure_call_result_140927 = invoke(stypy.reporting.localization.Localization(__file__, 649, 21), get_figure_140925, *[], **kwargs_140926)
        
        # Obtaining the member 'get_window_extent' of a type (line 649)
        get_window_extent_140928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 649, 21), get_figure_call_result_140927, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 649)
        get_window_extent_call_result_140930 = invoke(stypy.reporting.localization.Localization(__file__, 649, 21), get_window_extent_140928, *[], **kwargs_140929)
        
        # Assigning a type to the variable 'figure_box' (line 649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 649, 8), 'figure_box', get_window_extent_call_result_140930)
        
        # Assigning a Call to a Name (line 652):
        
        # Assigning a Call to a Name (line 652):
        
        # Assigning a Call to a Name (line 652):
        
        # Call to get_horizontalalignment(...): (line 652)
        # Processing the call keyword arguments (line 652)
        kwargs_140933 = {}
        # Getting the type of 'self' (line 652)
        self_140931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 20), 'self', False)
        # Obtaining the member 'get_horizontalalignment' of a type (line 652)
        get_horizontalalignment_140932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 652, 20), self_140931, 'get_horizontalalignment')
        # Calling get_horizontalalignment(args, kwargs) (line 652)
        get_horizontalalignment_call_result_140934 = invoke(stypy.reporting.localization.Localization(__file__, 652, 20), get_horizontalalignment_140932, *[], **kwargs_140933)
        
        # Assigning a type to the variable 'alignment' (line 652)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 652, 8), 'alignment', get_horizontalalignment_call_result_140934)
        
        # Call to set_rotation_mode(...): (line 653)
        # Processing the call arguments (line 653)
        unicode_140937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 653, 31), 'unicode', u'anchor')
        # Processing the call keyword arguments (line 653)
        kwargs_140938 = {}
        # Getting the type of 'self' (line 653)
        self_140935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 653, 8), 'self', False)
        # Obtaining the member 'set_rotation_mode' of a type (line 653)
        set_rotation_mode_140936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 653, 8), self_140935, 'set_rotation_mode')
        # Calling set_rotation_mode(args, kwargs) (line 653)
        set_rotation_mode_call_result_140939 = invoke(stypy.reporting.localization.Localization(__file__, 653, 8), set_rotation_mode_140936, *[unicode_140937], **kwargs_140938)
        
        
        # Assigning a Call to a Name (line 654):
        
        # Assigning a Call to a Name (line 654):
        
        # Assigning a Call to a Name (line 654):
        
        # Call to get_rotation(...): (line 654)
        # Processing the call keyword arguments (line 654)
        kwargs_140942 = {}
        # Getting the type of 'self' (line 654)
        self_140940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 19), 'self', False)
        # Obtaining the member 'get_rotation' of a type (line 654)
        get_rotation_140941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 654, 19), self_140940, 'get_rotation')
        # Calling get_rotation(args, kwargs) (line 654)
        get_rotation_call_result_140943 = invoke(stypy.reporting.localization.Localization(__file__, 654, 19), get_rotation_140941, *[], **kwargs_140942)
        
        # Assigning a type to the variable 'rotation' (line 654)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 654, 8), 'rotation', get_rotation_call_result_140943)
        
        # Assigning a Call to a Name (line 656):
        
        # Assigning a Call to a Name (line 656):
        
        # Assigning a Call to a Name (line 656):
        
        # Call to _get_dist_to_box(...): (line 656)
        # Processing the call arguments (line 656)
        # Getting the type of 'rotation' (line 656)
        rotation_140946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 37), 'rotation', False)
        # Getting the type of 'x0' (line 656)
        x0_140947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 47), 'x0', False)
        # Getting the type of 'y0' (line 656)
        y0_140948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 51), 'y0', False)
        # Getting the type of 'figure_box' (line 656)
        figure_box_140949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 55), 'figure_box', False)
        # Processing the call keyword arguments (line 656)
        kwargs_140950 = {}
        # Getting the type of 'self' (line 656)
        self_140944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 15), 'self', False)
        # Obtaining the member '_get_dist_to_box' of a type (line 656)
        _get_dist_to_box_140945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 656, 15), self_140944, '_get_dist_to_box')
        # Calling _get_dist_to_box(args, kwargs) (line 656)
        _get_dist_to_box_call_result_140951 = invoke(stypy.reporting.localization.Localization(__file__, 656, 15), _get_dist_to_box_140945, *[rotation_140946, x0_140947, y0_140948, figure_box_140949], **kwargs_140950)
        
        # Assigning a type to the variable 'left' (line 656)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 656, 8), 'left', _get_dist_to_box_call_result_140951)
        
        # Assigning a Call to a Name (line 657):
        
        # Assigning a Call to a Name (line 657):
        
        # Assigning a Call to a Name (line 657):
        
        # Call to _get_dist_to_box(...): (line 657)
        # Processing the call arguments (line 657)
        int_140954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 658, 13), 'int')
        # Getting the type of 'rotation' (line 658)
        rotation_140955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 19), 'rotation', False)
        # Applying the binary operator '+' (line 658)
        result_add_140956 = python_operator(stypy.reporting.localization.Localization(__file__, 658, 13), '+', int_140954, rotation_140955)
        
        int_140957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 658, 31), 'int')
        # Applying the binary operator '%' (line 658)
        result_mod_140958 = python_operator(stypy.reporting.localization.Localization(__file__, 658, 12), '%', result_add_140956, int_140957)
        
        # Getting the type of 'x0' (line 659)
        x0_140959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 12), 'x0', False)
        # Getting the type of 'y0' (line 660)
        y0_140960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 12), 'y0', False)
        # Getting the type of 'figure_box' (line 661)
        figure_box_140961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 12), 'figure_box', False)
        # Processing the call keyword arguments (line 657)
        kwargs_140962 = {}
        # Getting the type of 'self' (line 657)
        self_140952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 16), 'self', False)
        # Obtaining the member '_get_dist_to_box' of a type (line 657)
        _get_dist_to_box_140953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 657, 16), self_140952, '_get_dist_to_box')
        # Calling _get_dist_to_box(args, kwargs) (line 657)
        _get_dist_to_box_call_result_140963 = invoke(stypy.reporting.localization.Localization(__file__, 657, 16), _get_dist_to_box_140953, *[result_mod_140958, x0_140959, y0_140960, figure_box_140961], **kwargs_140962)
        
        # Assigning a type to the variable 'right' (line 657)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 657, 8), 'right', _get_dist_to_box_call_result_140963)
        
        
        # Getting the type of 'alignment' (line 663)
        alignment_140964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 11), 'alignment')
        unicode_140965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 663, 24), 'unicode', u'left')
        # Applying the binary operator '==' (line 663)
        result_eq_140966 = python_operator(stypy.reporting.localization.Localization(__file__, 663, 11), '==', alignment_140964, unicode_140965)
        
        # Testing the type of an if condition (line 663)
        if_condition_140967 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 663, 8), result_eq_140966)
        # Assigning a type to the variable 'if_condition_140967' (line 663)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 663, 8), 'if_condition_140967', if_condition_140967)
        # SSA begins for if statement (line 663)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 664):
        
        # Assigning a Name to a Name (line 664):
        
        # Assigning a Name to a Name (line 664):
        # Getting the type of 'left' (line 664)
        left_140968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 25), 'left')
        # Assigning a type to the variable 'line_width' (line 664)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 664, 12), 'line_width', left_140968)
        # SSA branch for the else part of an if statement (line 663)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'alignment' (line 665)
        alignment_140969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 13), 'alignment')
        unicode_140970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 665, 26), 'unicode', u'right')
        # Applying the binary operator '==' (line 665)
        result_eq_140971 = python_operator(stypy.reporting.localization.Localization(__file__, 665, 13), '==', alignment_140969, unicode_140970)
        
        # Testing the type of an if condition (line 665)
        if_condition_140972 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 665, 13), result_eq_140971)
        # Assigning a type to the variable 'if_condition_140972' (line 665)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 665, 13), 'if_condition_140972', if_condition_140972)
        # SSA begins for if statement (line 665)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 666):
        
        # Assigning a Name to a Name (line 666):
        
        # Assigning a Name to a Name (line 666):
        # Getting the type of 'right' (line 666)
        right_140973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 25), 'right')
        # Assigning a type to the variable 'line_width' (line 666)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 666, 12), 'line_width', right_140973)
        # SSA branch for the else part of an if statement (line 665)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 668):
        
        # Assigning a BinOp to a Name (line 668):
        
        # Assigning a BinOp to a Name (line 668):
        int_140974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 668, 25), 'int')
        
        # Call to min(...): (line 668)
        # Processing the call arguments (line 668)
        # Getting the type of 'left' (line 668)
        left_140976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 33), 'left', False)
        # Getting the type of 'right' (line 668)
        right_140977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 39), 'right', False)
        # Processing the call keyword arguments (line 668)
        kwargs_140978 = {}
        # Getting the type of 'min' (line 668)
        min_140975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 29), 'min', False)
        # Calling min(args, kwargs) (line 668)
        min_call_result_140979 = invoke(stypy.reporting.localization.Localization(__file__, 668, 29), min_140975, *[left_140976, right_140977], **kwargs_140978)
        
        # Applying the binary operator '*' (line 668)
        result_mul_140980 = python_operator(stypy.reporting.localization.Localization(__file__, 668, 25), '*', int_140974, min_call_result_140979)
        
        # Assigning a type to the variable 'line_width' (line 668)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 668, 12), 'line_width', result_mul_140980)
        # SSA join for if statement (line 665)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 663)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'line_width' (line 670)
        line_width_140981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 15), 'line_width')
        # Assigning a type to the variable 'stypy_return_type' (line 670)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 670, 8), 'stypy_return_type', line_width_140981)
        
        # ################# End of '_get_wrap_line_width(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_wrap_line_width' in the type store
        # Getting the type of 'stypy_return_type' (line 643)
        stypy_return_type_140982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_140982)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_wrap_line_width'
        return stypy_return_type_140982


    @norecursion
    def _get_dist_to_box(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_dist_to_box'
        module_type_store = module_type_store.open_function_context('_get_dist_to_box', 672, 4, False)
        # Assigning a type to the variable 'self' (line 673)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 673, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text._get_dist_to_box.__dict__.__setitem__('stypy_localization', localization)
        Text._get_dist_to_box.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text._get_dist_to_box.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text._get_dist_to_box.__dict__.__setitem__('stypy_function_name', 'Text._get_dist_to_box')
        Text._get_dist_to_box.__dict__.__setitem__('stypy_param_names_list', ['rotation', 'x0', 'y0', 'figure_box'])
        Text._get_dist_to_box.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text._get_dist_to_box.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text._get_dist_to_box.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text._get_dist_to_box.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text._get_dist_to_box.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text._get_dist_to_box.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text._get_dist_to_box', ['rotation', 'x0', 'y0', 'figure_box'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_dist_to_box', localization, ['rotation', 'x0', 'y0', 'figure_box'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_dist_to_box(...)' code ##################

        unicode_140983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 676, (-1)), 'unicode', u'\n        Returns the distance from the given points, to the boundaries\n        of a rotated box in pixels.\n        ')
        
        
        # Getting the type of 'rotation' (line 677)
        rotation_140984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 677, 11), 'rotation')
        int_140985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 677, 22), 'int')
        # Applying the binary operator '>' (line 677)
        result_gt_140986 = python_operator(stypy.reporting.localization.Localization(__file__, 677, 11), '>', rotation_140984, int_140985)
        
        # Testing the type of an if condition (line 677)
        if_condition_140987 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 677, 8), result_gt_140986)
        # Assigning a type to the variable 'if_condition_140987' (line 677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 677, 8), 'if_condition_140987', if_condition_140987)
        # SSA begins for if statement (line 677)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 678):
        
        # Assigning a BinOp to a Name (line 678):
        
        # Assigning a BinOp to a Name (line 678):
        # Getting the type of 'rotation' (line 678)
        rotation_140988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 19), 'rotation')
        int_140989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 678, 30), 'int')
        # Applying the binary operator '-' (line 678)
        result_sub_140990 = python_operator(stypy.reporting.localization.Localization(__file__, 678, 19), '-', rotation_140988, int_140989)
        
        # Assigning a type to the variable 'quad' (line 678)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 678, 12), 'quad', result_sub_140990)
        
        # Assigning a BinOp to a Name (line 679):
        
        # Assigning a BinOp to a Name (line 679):
        
        # Assigning a BinOp to a Name (line 679):
        # Getting the type of 'y0' (line 679)
        y0_140991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 17), 'y0')
        
        # Call to cos(...): (line 679)
        # Processing the call arguments (line 679)
        
        # Call to radians(...): (line 679)
        # Processing the call arguments (line 679)
        # Getting the type of 'quad' (line 679)
        quad_140996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 44), 'quad', False)
        # Processing the call keyword arguments (line 679)
        kwargs_140997 = {}
        # Getting the type of 'math' (line 679)
        math_140994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 31), 'math', False)
        # Obtaining the member 'radians' of a type (line 679)
        radians_140995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 679, 31), math_140994, 'radians')
        # Calling radians(args, kwargs) (line 679)
        radians_call_result_140998 = invoke(stypy.reporting.localization.Localization(__file__, 679, 31), radians_140995, *[quad_140996], **kwargs_140997)
        
        # Processing the call keyword arguments (line 679)
        kwargs_140999 = {}
        # Getting the type of 'math' (line 679)
        math_140992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 22), 'math', False)
        # Obtaining the member 'cos' of a type (line 679)
        cos_140993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 679, 22), math_140992, 'cos')
        # Calling cos(args, kwargs) (line 679)
        cos_call_result_141000 = invoke(stypy.reporting.localization.Localization(__file__, 679, 22), cos_140993, *[radians_call_result_140998], **kwargs_140999)
        
        # Applying the binary operator 'div' (line 679)
        result_div_141001 = python_operator(stypy.reporting.localization.Localization(__file__, 679, 17), 'div', y0_140991, cos_call_result_141000)
        
        # Assigning a type to the variable 'h1' (line 679)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 679, 12), 'h1', result_div_141001)
        
        # Assigning a BinOp to a Name (line 680):
        
        # Assigning a BinOp to a Name (line 680):
        
        # Assigning a BinOp to a Name (line 680):
        # Getting the type of 'figure_box' (line 680)
        figure_box_141002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 18), 'figure_box')
        # Obtaining the member 'x1' of a type (line 680)
        x1_141003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 18), figure_box_141002, 'x1')
        # Getting the type of 'x0' (line 680)
        x0_141004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 34), 'x0')
        # Applying the binary operator '-' (line 680)
        result_sub_141005 = python_operator(stypy.reporting.localization.Localization(__file__, 680, 18), '-', x1_141003, x0_141004)
        
        
        # Call to cos(...): (line 680)
        # Processing the call arguments (line 680)
        
        # Call to radians(...): (line 680)
        # Processing the call arguments (line 680)
        int_141010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 680, 62), 'int')
        # Getting the type of 'quad' (line 680)
        quad_141011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 67), 'quad', False)
        # Applying the binary operator '-' (line 680)
        result_sub_141012 = python_operator(stypy.reporting.localization.Localization(__file__, 680, 62), '-', int_141010, quad_141011)
        
        # Processing the call keyword arguments (line 680)
        kwargs_141013 = {}
        # Getting the type of 'math' (line 680)
        math_141008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 49), 'math', False)
        # Obtaining the member 'radians' of a type (line 680)
        radians_141009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 49), math_141008, 'radians')
        # Calling radians(args, kwargs) (line 680)
        radians_call_result_141014 = invoke(stypy.reporting.localization.Localization(__file__, 680, 49), radians_141009, *[result_sub_141012], **kwargs_141013)
        
        # Processing the call keyword arguments (line 680)
        kwargs_141015 = {}
        # Getting the type of 'math' (line 680)
        math_141006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 40), 'math', False)
        # Obtaining the member 'cos' of a type (line 680)
        cos_141007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 40), math_141006, 'cos')
        # Calling cos(args, kwargs) (line 680)
        cos_call_result_141016 = invoke(stypy.reporting.localization.Localization(__file__, 680, 40), cos_141007, *[radians_call_result_141014], **kwargs_141015)
        
        # Applying the binary operator 'div' (line 680)
        result_div_141017 = python_operator(stypy.reporting.localization.Localization(__file__, 680, 17), 'div', result_sub_141005, cos_call_result_141016)
        
        # Assigning a type to the variable 'h2' (line 680)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 680, 12), 'h2', result_div_141017)
        # SSA branch for the else part of an if statement (line 677)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'rotation' (line 681)
        rotation_141018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 13), 'rotation')
        int_141019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 681, 24), 'int')
        # Applying the binary operator '>' (line 681)
        result_gt_141020 = python_operator(stypy.reporting.localization.Localization(__file__, 681, 13), '>', rotation_141018, int_141019)
        
        # Testing the type of an if condition (line 681)
        if_condition_141021 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 681, 13), result_gt_141020)
        # Assigning a type to the variable 'if_condition_141021' (line 681)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 681, 13), 'if_condition_141021', if_condition_141021)
        # SSA begins for if statement (line 681)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 682):
        
        # Assigning a BinOp to a Name (line 682):
        
        # Assigning a BinOp to a Name (line 682):
        # Getting the type of 'rotation' (line 682)
        rotation_141022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 19), 'rotation')
        int_141023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 682, 30), 'int')
        # Applying the binary operator '-' (line 682)
        result_sub_141024 = python_operator(stypy.reporting.localization.Localization(__file__, 682, 19), '-', rotation_141022, int_141023)
        
        # Assigning a type to the variable 'quad' (line 682)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 682, 12), 'quad', result_sub_141024)
        
        # Assigning a BinOp to a Name (line 683):
        
        # Assigning a BinOp to a Name (line 683):
        
        # Assigning a BinOp to a Name (line 683):
        # Getting the type of 'x0' (line 683)
        x0_141025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 683, 17), 'x0')
        
        # Call to cos(...): (line 683)
        # Processing the call arguments (line 683)
        
        # Call to radians(...): (line 683)
        # Processing the call arguments (line 683)
        # Getting the type of 'quad' (line 683)
        quad_141030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 683, 44), 'quad', False)
        # Processing the call keyword arguments (line 683)
        kwargs_141031 = {}
        # Getting the type of 'math' (line 683)
        math_141028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 683, 31), 'math', False)
        # Obtaining the member 'radians' of a type (line 683)
        radians_141029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 683, 31), math_141028, 'radians')
        # Calling radians(args, kwargs) (line 683)
        radians_call_result_141032 = invoke(stypy.reporting.localization.Localization(__file__, 683, 31), radians_141029, *[quad_141030], **kwargs_141031)
        
        # Processing the call keyword arguments (line 683)
        kwargs_141033 = {}
        # Getting the type of 'math' (line 683)
        math_141026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 683, 22), 'math', False)
        # Obtaining the member 'cos' of a type (line 683)
        cos_141027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 683, 22), math_141026, 'cos')
        # Calling cos(args, kwargs) (line 683)
        cos_call_result_141034 = invoke(stypy.reporting.localization.Localization(__file__, 683, 22), cos_141027, *[radians_call_result_141032], **kwargs_141033)
        
        # Applying the binary operator 'div' (line 683)
        result_div_141035 = python_operator(stypy.reporting.localization.Localization(__file__, 683, 17), 'div', x0_141025, cos_call_result_141034)
        
        # Assigning a type to the variable 'h1' (line 683)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 683, 12), 'h1', result_div_141035)
        
        # Assigning a BinOp to a Name (line 684):
        
        # Assigning a BinOp to a Name (line 684):
        
        # Assigning a BinOp to a Name (line 684):
        # Getting the type of 'y0' (line 684)
        y0_141036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 17), 'y0')
        
        # Call to cos(...): (line 684)
        # Processing the call arguments (line 684)
        
        # Call to radians(...): (line 684)
        # Processing the call arguments (line 684)
        int_141041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 684, 44), 'int')
        # Getting the type of 'quad' (line 684)
        quad_141042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 49), 'quad', False)
        # Applying the binary operator '-' (line 684)
        result_sub_141043 = python_operator(stypy.reporting.localization.Localization(__file__, 684, 44), '-', int_141041, quad_141042)
        
        # Processing the call keyword arguments (line 684)
        kwargs_141044 = {}
        # Getting the type of 'math' (line 684)
        math_141039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 31), 'math', False)
        # Obtaining the member 'radians' of a type (line 684)
        radians_141040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 684, 31), math_141039, 'radians')
        # Calling radians(args, kwargs) (line 684)
        radians_call_result_141045 = invoke(stypy.reporting.localization.Localization(__file__, 684, 31), radians_141040, *[result_sub_141043], **kwargs_141044)
        
        # Processing the call keyword arguments (line 684)
        kwargs_141046 = {}
        # Getting the type of 'math' (line 684)
        math_141037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 22), 'math', False)
        # Obtaining the member 'cos' of a type (line 684)
        cos_141038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 684, 22), math_141037, 'cos')
        # Calling cos(args, kwargs) (line 684)
        cos_call_result_141047 = invoke(stypy.reporting.localization.Localization(__file__, 684, 22), cos_141038, *[radians_call_result_141045], **kwargs_141046)
        
        # Applying the binary operator 'div' (line 684)
        result_div_141048 = python_operator(stypy.reporting.localization.Localization(__file__, 684, 17), 'div', y0_141036, cos_call_result_141047)
        
        # Assigning a type to the variable 'h2' (line 684)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 684, 12), 'h2', result_div_141048)
        # SSA branch for the else part of an if statement (line 681)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'rotation' (line 685)
        rotation_141049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 13), 'rotation')
        int_141050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 685, 24), 'int')
        # Applying the binary operator '>' (line 685)
        result_gt_141051 = python_operator(stypy.reporting.localization.Localization(__file__, 685, 13), '>', rotation_141049, int_141050)
        
        # Testing the type of an if condition (line 685)
        if_condition_141052 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 685, 13), result_gt_141051)
        # Assigning a type to the variable 'if_condition_141052' (line 685)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 685, 13), 'if_condition_141052', if_condition_141052)
        # SSA begins for if statement (line 685)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 686):
        
        # Assigning a BinOp to a Name (line 686):
        
        # Assigning a BinOp to a Name (line 686):
        # Getting the type of 'rotation' (line 686)
        rotation_141053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 686, 19), 'rotation')
        int_141054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 686, 30), 'int')
        # Applying the binary operator '-' (line 686)
        result_sub_141055 = python_operator(stypy.reporting.localization.Localization(__file__, 686, 19), '-', rotation_141053, int_141054)
        
        # Assigning a type to the variable 'quad' (line 686)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 686, 12), 'quad', result_sub_141055)
        
        # Assigning a BinOp to a Name (line 687):
        
        # Assigning a BinOp to a Name (line 687):
        
        # Assigning a BinOp to a Name (line 687):
        # Getting the type of 'figure_box' (line 687)
        figure_box_141056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 18), 'figure_box')
        # Obtaining the member 'y1' of a type (line 687)
        y1_141057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 687, 18), figure_box_141056, 'y1')
        # Getting the type of 'y0' (line 687)
        y0_141058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 34), 'y0')
        # Applying the binary operator '-' (line 687)
        result_sub_141059 = python_operator(stypy.reporting.localization.Localization(__file__, 687, 18), '-', y1_141057, y0_141058)
        
        
        # Call to cos(...): (line 687)
        # Processing the call arguments (line 687)
        
        # Call to radians(...): (line 687)
        # Processing the call arguments (line 687)
        # Getting the type of 'quad' (line 687)
        quad_141064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 62), 'quad', False)
        # Processing the call keyword arguments (line 687)
        kwargs_141065 = {}
        # Getting the type of 'math' (line 687)
        math_141062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 49), 'math', False)
        # Obtaining the member 'radians' of a type (line 687)
        radians_141063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 687, 49), math_141062, 'radians')
        # Calling radians(args, kwargs) (line 687)
        radians_call_result_141066 = invoke(stypy.reporting.localization.Localization(__file__, 687, 49), radians_141063, *[quad_141064], **kwargs_141065)
        
        # Processing the call keyword arguments (line 687)
        kwargs_141067 = {}
        # Getting the type of 'math' (line 687)
        math_141060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 40), 'math', False)
        # Obtaining the member 'cos' of a type (line 687)
        cos_141061 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 687, 40), math_141060, 'cos')
        # Calling cos(args, kwargs) (line 687)
        cos_call_result_141068 = invoke(stypy.reporting.localization.Localization(__file__, 687, 40), cos_141061, *[radians_call_result_141066], **kwargs_141067)
        
        # Applying the binary operator 'div' (line 687)
        result_div_141069 = python_operator(stypy.reporting.localization.Localization(__file__, 687, 17), 'div', result_sub_141059, cos_call_result_141068)
        
        # Assigning a type to the variable 'h1' (line 687)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 687, 12), 'h1', result_div_141069)
        
        # Assigning a BinOp to a Name (line 688):
        
        # Assigning a BinOp to a Name (line 688):
        
        # Assigning a BinOp to a Name (line 688):
        # Getting the type of 'x0' (line 688)
        x0_141070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 17), 'x0')
        
        # Call to cos(...): (line 688)
        # Processing the call arguments (line 688)
        
        # Call to radians(...): (line 688)
        # Processing the call arguments (line 688)
        int_141075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 688, 44), 'int')
        # Getting the type of 'quad' (line 688)
        quad_141076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 49), 'quad', False)
        # Applying the binary operator '-' (line 688)
        result_sub_141077 = python_operator(stypy.reporting.localization.Localization(__file__, 688, 44), '-', int_141075, quad_141076)
        
        # Processing the call keyword arguments (line 688)
        kwargs_141078 = {}
        # Getting the type of 'math' (line 688)
        math_141073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 31), 'math', False)
        # Obtaining the member 'radians' of a type (line 688)
        radians_141074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 688, 31), math_141073, 'radians')
        # Calling radians(args, kwargs) (line 688)
        radians_call_result_141079 = invoke(stypy.reporting.localization.Localization(__file__, 688, 31), radians_141074, *[result_sub_141077], **kwargs_141078)
        
        # Processing the call keyword arguments (line 688)
        kwargs_141080 = {}
        # Getting the type of 'math' (line 688)
        math_141071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 22), 'math', False)
        # Obtaining the member 'cos' of a type (line 688)
        cos_141072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 688, 22), math_141071, 'cos')
        # Calling cos(args, kwargs) (line 688)
        cos_call_result_141081 = invoke(stypy.reporting.localization.Localization(__file__, 688, 22), cos_141072, *[radians_call_result_141079], **kwargs_141080)
        
        # Applying the binary operator 'div' (line 688)
        result_div_141082 = python_operator(stypy.reporting.localization.Localization(__file__, 688, 17), 'div', x0_141070, cos_call_result_141081)
        
        # Assigning a type to the variable 'h2' (line 688)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 688, 12), 'h2', result_div_141082)
        # SSA branch for the else part of an if statement (line 685)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 690):
        
        # Assigning a BinOp to a Name (line 690):
        
        # Assigning a BinOp to a Name (line 690):
        # Getting the type of 'figure_box' (line 690)
        figure_box_141083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 18), 'figure_box')
        # Obtaining the member 'x1' of a type (line 690)
        x1_141084 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 690, 18), figure_box_141083, 'x1')
        # Getting the type of 'x0' (line 690)
        x0_141085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 34), 'x0')
        # Applying the binary operator '-' (line 690)
        result_sub_141086 = python_operator(stypy.reporting.localization.Localization(__file__, 690, 18), '-', x1_141084, x0_141085)
        
        
        # Call to cos(...): (line 690)
        # Processing the call arguments (line 690)
        
        # Call to radians(...): (line 690)
        # Processing the call arguments (line 690)
        # Getting the type of 'rotation' (line 690)
        rotation_141091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 62), 'rotation', False)
        # Processing the call keyword arguments (line 690)
        kwargs_141092 = {}
        # Getting the type of 'math' (line 690)
        math_141089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 49), 'math', False)
        # Obtaining the member 'radians' of a type (line 690)
        radians_141090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 690, 49), math_141089, 'radians')
        # Calling radians(args, kwargs) (line 690)
        radians_call_result_141093 = invoke(stypy.reporting.localization.Localization(__file__, 690, 49), radians_141090, *[rotation_141091], **kwargs_141092)
        
        # Processing the call keyword arguments (line 690)
        kwargs_141094 = {}
        # Getting the type of 'math' (line 690)
        math_141087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 40), 'math', False)
        # Obtaining the member 'cos' of a type (line 690)
        cos_141088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 690, 40), math_141087, 'cos')
        # Calling cos(args, kwargs) (line 690)
        cos_call_result_141095 = invoke(stypy.reporting.localization.Localization(__file__, 690, 40), cos_141088, *[radians_call_result_141093], **kwargs_141094)
        
        # Applying the binary operator 'div' (line 690)
        result_div_141096 = python_operator(stypy.reporting.localization.Localization(__file__, 690, 17), 'div', result_sub_141086, cos_call_result_141095)
        
        # Assigning a type to the variable 'h1' (line 690)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 690, 12), 'h1', result_div_141096)
        
        # Assigning a BinOp to a Name (line 691):
        
        # Assigning a BinOp to a Name (line 691):
        
        # Assigning a BinOp to a Name (line 691):
        # Getting the type of 'figure_box' (line 691)
        figure_box_141097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 18), 'figure_box')
        # Obtaining the member 'y1' of a type (line 691)
        y1_141098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 691, 18), figure_box_141097, 'y1')
        # Getting the type of 'y0' (line 691)
        y0_141099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 34), 'y0')
        # Applying the binary operator '-' (line 691)
        result_sub_141100 = python_operator(stypy.reporting.localization.Localization(__file__, 691, 18), '-', y1_141098, y0_141099)
        
        
        # Call to cos(...): (line 691)
        # Processing the call arguments (line 691)
        
        # Call to radians(...): (line 691)
        # Processing the call arguments (line 691)
        int_141105 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 691, 62), 'int')
        # Getting the type of 'rotation' (line 691)
        rotation_141106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 67), 'rotation', False)
        # Applying the binary operator '-' (line 691)
        result_sub_141107 = python_operator(stypy.reporting.localization.Localization(__file__, 691, 62), '-', int_141105, rotation_141106)
        
        # Processing the call keyword arguments (line 691)
        kwargs_141108 = {}
        # Getting the type of 'math' (line 691)
        math_141103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 49), 'math', False)
        # Obtaining the member 'radians' of a type (line 691)
        radians_141104 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 691, 49), math_141103, 'radians')
        # Calling radians(args, kwargs) (line 691)
        radians_call_result_141109 = invoke(stypy.reporting.localization.Localization(__file__, 691, 49), radians_141104, *[result_sub_141107], **kwargs_141108)
        
        # Processing the call keyword arguments (line 691)
        kwargs_141110 = {}
        # Getting the type of 'math' (line 691)
        math_141101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 40), 'math', False)
        # Obtaining the member 'cos' of a type (line 691)
        cos_141102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 691, 40), math_141101, 'cos')
        # Calling cos(args, kwargs) (line 691)
        cos_call_result_141111 = invoke(stypy.reporting.localization.Localization(__file__, 691, 40), cos_141102, *[radians_call_result_141109], **kwargs_141110)
        
        # Applying the binary operator 'div' (line 691)
        result_div_141112 = python_operator(stypy.reporting.localization.Localization(__file__, 691, 17), 'div', result_sub_141100, cos_call_result_141111)
        
        # Assigning a type to the variable 'h2' (line 691)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 691, 12), 'h2', result_div_141112)
        # SSA join for if statement (line 685)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 681)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 677)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to min(...): (line 693)
        # Processing the call arguments (line 693)
        # Getting the type of 'h1' (line 693)
        h1_141114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 19), 'h1', False)
        # Getting the type of 'h2' (line 693)
        h2_141115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 23), 'h2', False)
        # Processing the call keyword arguments (line 693)
        kwargs_141116 = {}
        # Getting the type of 'min' (line 693)
        min_141113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 15), 'min', False)
        # Calling min(args, kwargs) (line 693)
        min_call_result_141117 = invoke(stypy.reporting.localization.Localization(__file__, 693, 15), min_141113, *[h1_141114, h2_141115], **kwargs_141116)
        
        # Assigning a type to the variable 'stypy_return_type' (line 693)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 693, 8), 'stypy_return_type', min_call_result_141117)
        
        # ################# End of '_get_dist_to_box(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_dist_to_box' in the type store
        # Getting the type of 'stypy_return_type' (line 672)
        stypy_return_type_141118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141118)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_dist_to_box'
        return stypy_return_type_141118


    @norecursion
    def _get_rendered_text_width(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_rendered_text_width'
        module_type_store = module_type_store.open_function_context('_get_rendered_text_width', 695, 4, False)
        # Assigning a type to the variable 'self' (line 696)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 696, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text._get_rendered_text_width.__dict__.__setitem__('stypy_localization', localization)
        Text._get_rendered_text_width.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text._get_rendered_text_width.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text._get_rendered_text_width.__dict__.__setitem__('stypy_function_name', 'Text._get_rendered_text_width')
        Text._get_rendered_text_width.__dict__.__setitem__('stypy_param_names_list', ['text'])
        Text._get_rendered_text_width.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text._get_rendered_text_width.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text._get_rendered_text_width.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text._get_rendered_text_width.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text._get_rendered_text_width.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text._get_rendered_text_width.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text._get_rendered_text_width', ['text'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_rendered_text_width', localization, ['text'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_rendered_text_width(...)' code ##################

        unicode_141119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 698, (-1)), 'unicode', u'\n        Returns the width of a given text string, in pixels.\n        ')
        
        # Assigning a Call to a Tuple (line 699):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to get_text_width_height_descent(...): (line 699)
        # Processing the call arguments (line 699)
        # Getting the type of 'text' (line 700)
        text_141123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 12), 'text', False)
        
        # Call to get_fontproperties(...): (line 701)
        # Processing the call keyword arguments (line 701)
        kwargs_141126 = {}
        # Getting the type of 'self' (line 701)
        self_141124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 12), 'self', False)
        # Obtaining the member 'get_fontproperties' of a type (line 701)
        get_fontproperties_141125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 701, 12), self_141124, 'get_fontproperties')
        # Calling get_fontproperties(args, kwargs) (line 701)
        get_fontproperties_call_result_141127 = invoke(stypy.reporting.localization.Localization(__file__, 701, 12), get_fontproperties_141125, *[], **kwargs_141126)
        
        # Getting the type of 'False' (line 702)
        False_141128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 702, 12), 'False', False)
        # Processing the call keyword arguments (line 699)
        kwargs_141129 = {}
        # Getting the type of 'self' (line 699)
        self_141120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 18), 'self', False)
        # Obtaining the member '_renderer' of a type (line 699)
        _renderer_141121 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 699, 18), self_141120, '_renderer')
        # Obtaining the member 'get_text_width_height_descent' of a type (line 699)
        get_text_width_height_descent_141122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 699, 18), _renderer_141121, 'get_text_width_height_descent')
        # Calling get_text_width_height_descent(args, kwargs) (line 699)
        get_text_width_height_descent_call_result_141130 = invoke(stypy.reporting.localization.Localization(__file__, 699, 18), get_text_width_height_descent_141122, *[text_141123, get_fontproperties_call_result_141127, False_141128], **kwargs_141129)
        
        # Assigning a type to the variable 'call_assignment_139082' (line 699)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 699, 8), 'call_assignment_139082', get_text_width_height_descent_call_result_141130)
        
        # Assigning a Call to a Name (line 699):
        
        # Assigning a Call to a Name (line 699):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_141133 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 699, 8), 'int')
        # Processing the call keyword arguments
        kwargs_141134 = {}
        # Getting the type of 'call_assignment_139082' (line 699)
        call_assignment_139082_141131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 8), 'call_assignment_139082', False)
        # Obtaining the member '__getitem__' of a type (line 699)
        getitem___141132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 699, 8), call_assignment_139082_141131, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_141135 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___141132, *[int_141133], **kwargs_141134)
        
        # Assigning a type to the variable 'call_assignment_139083' (line 699)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 699, 8), 'call_assignment_139083', getitem___call_result_141135)
        
        # Assigning a Name to a Name (line 699):
        
        # Assigning a Name to a Name (line 699):
        # Getting the type of 'call_assignment_139083' (line 699)
        call_assignment_139083_141136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 8), 'call_assignment_139083')
        # Assigning a type to the variable 'w' (line 699)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 699, 8), 'w', call_assignment_139083_141136)
        
        # Assigning a Call to a Name (line 699):
        
        # Assigning a Call to a Name (line 699):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_141139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 699, 8), 'int')
        # Processing the call keyword arguments
        kwargs_141140 = {}
        # Getting the type of 'call_assignment_139082' (line 699)
        call_assignment_139082_141137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 8), 'call_assignment_139082', False)
        # Obtaining the member '__getitem__' of a type (line 699)
        getitem___141138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 699, 8), call_assignment_139082_141137, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_141141 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___141138, *[int_141139], **kwargs_141140)
        
        # Assigning a type to the variable 'call_assignment_139084' (line 699)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 699, 8), 'call_assignment_139084', getitem___call_result_141141)
        
        # Assigning a Name to a Name (line 699):
        
        # Assigning a Name to a Name (line 699):
        # Getting the type of 'call_assignment_139084' (line 699)
        call_assignment_139084_141142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 8), 'call_assignment_139084')
        # Assigning a type to the variable 'h' (line 699)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 699, 11), 'h', call_assignment_139084_141142)
        
        # Assigning a Call to a Name (line 699):
        
        # Assigning a Call to a Name (line 699):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_141145 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 699, 8), 'int')
        # Processing the call keyword arguments
        kwargs_141146 = {}
        # Getting the type of 'call_assignment_139082' (line 699)
        call_assignment_139082_141143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 8), 'call_assignment_139082', False)
        # Obtaining the member '__getitem__' of a type (line 699)
        getitem___141144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 699, 8), call_assignment_139082_141143, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_141147 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___141144, *[int_141145], **kwargs_141146)
        
        # Assigning a type to the variable 'call_assignment_139085' (line 699)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 699, 8), 'call_assignment_139085', getitem___call_result_141147)
        
        # Assigning a Name to a Name (line 699):
        
        # Assigning a Name to a Name (line 699):
        # Getting the type of 'call_assignment_139085' (line 699)
        call_assignment_139085_141148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 8), 'call_assignment_139085')
        # Assigning a type to the variable 'd' (line 699)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 699, 14), 'd', call_assignment_139085_141148)
        
        # Call to ceil(...): (line 703)
        # Processing the call arguments (line 703)
        # Getting the type of 'w' (line 703)
        w_141151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 25), 'w', False)
        # Processing the call keyword arguments (line 703)
        kwargs_141152 = {}
        # Getting the type of 'math' (line 703)
        math_141149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 15), 'math', False)
        # Obtaining the member 'ceil' of a type (line 703)
        ceil_141150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 15), math_141149, 'ceil')
        # Calling ceil(args, kwargs) (line 703)
        ceil_call_result_141153 = invoke(stypy.reporting.localization.Localization(__file__, 703, 15), ceil_141150, *[w_141151], **kwargs_141152)
        
        # Assigning a type to the variable 'stypy_return_type' (line 703)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 8), 'stypy_return_type', ceil_call_result_141153)
        
        # ################# End of '_get_rendered_text_width(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_rendered_text_width' in the type store
        # Getting the type of 'stypy_return_type' (line 695)
        stypy_return_type_141154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141154)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_rendered_text_width'
        return stypy_return_type_141154


    @norecursion
    def _get_wrapped_text(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_wrapped_text'
        module_type_store = module_type_store.open_function_context('_get_wrapped_text', 705, 4, False)
        # Assigning a type to the variable 'self' (line 706)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 706, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text._get_wrapped_text.__dict__.__setitem__('stypy_localization', localization)
        Text._get_wrapped_text.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text._get_wrapped_text.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text._get_wrapped_text.__dict__.__setitem__('stypy_function_name', 'Text._get_wrapped_text')
        Text._get_wrapped_text.__dict__.__setitem__('stypy_param_names_list', [])
        Text._get_wrapped_text.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text._get_wrapped_text.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text._get_wrapped_text.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text._get_wrapped_text.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text._get_wrapped_text.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text._get_wrapped_text.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text._get_wrapped_text', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_wrapped_text', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_wrapped_text(...)' code ##################

        unicode_141155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 709, (-1)), 'unicode', u'\n        Return a copy of the text with new lines added, so that\n        the text is wrapped relative to the parent figure.\n        ')
        
        
        # Call to get_usetex(...): (line 712)
        # Processing the call keyword arguments (line 712)
        kwargs_141158 = {}
        # Getting the type of 'self' (line 712)
        self_141156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 11), 'self', False)
        # Obtaining the member 'get_usetex' of a type (line 712)
        get_usetex_141157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 712, 11), self_141156, 'get_usetex')
        # Calling get_usetex(args, kwargs) (line 712)
        get_usetex_call_result_141159 = invoke(stypy.reporting.localization.Localization(__file__, 712, 11), get_usetex_141157, *[], **kwargs_141158)
        
        # Testing the type of an if condition (line 712)
        if_condition_141160 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 712, 8), get_usetex_call_result_141159)
        # Assigning a type to the variable 'if_condition_141160' (line 712)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 712, 8), 'if_condition_141160', if_condition_141160)
        # SSA begins for if statement (line 712)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to get_text(...): (line 713)
        # Processing the call keyword arguments (line 713)
        kwargs_141163 = {}
        # Getting the type of 'self' (line 713)
        self_141161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 19), 'self', False)
        # Obtaining the member 'get_text' of a type (line 713)
        get_text_141162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 713, 19), self_141161, 'get_text')
        # Calling get_text(args, kwargs) (line 713)
        get_text_call_result_141164 = invoke(stypy.reporting.localization.Localization(__file__, 713, 19), get_text_141162, *[], **kwargs_141163)
        
        # Assigning a type to the variable 'stypy_return_type' (line 713)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 713, 12), 'stypy_return_type', get_text_call_result_141164)
        # SSA join for if statement (line 712)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 716):
        
        # Assigning a Call to a Name (line 716):
        
        # Assigning a Call to a Name (line 716):
        
        # Call to _get_wrap_line_width(...): (line 716)
        # Processing the call keyword arguments (line 716)
        kwargs_141167 = {}
        # Getting the type of 'self' (line 716)
        self_141165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 21), 'self', False)
        # Obtaining the member '_get_wrap_line_width' of a type (line 716)
        _get_wrap_line_width_141166 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 716, 21), self_141165, '_get_wrap_line_width')
        # Calling _get_wrap_line_width(args, kwargs) (line 716)
        _get_wrap_line_width_call_result_141168 = invoke(stypy.reporting.localization.Localization(__file__, 716, 21), _get_wrap_line_width_141166, *[], **kwargs_141167)
        
        # Assigning a type to the variable 'line_width' (line 716)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 716, 8), 'line_width', _get_wrap_line_width_call_result_141168)
        
        # Assigning a Str to a Name (line 717):
        
        # Assigning a Str to a Name (line 717):
        
        # Assigning a Str to a Name (line 717):
        unicode_141169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 717, 22), 'unicode', u'')
        # Assigning a type to the variable 'wrapped_str' (line 717)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 717, 8), 'wrapped_str', unicode_141169)
        
        # Assigning a Str to a Name (line 718):
        
        # Assigning a Str to a Name (line 718):
        
        # Assigning a Str to a Name (line 718):
        unicode_141170 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 718, 15), 'unicode', u'')
        # Assigning a type to the variable 'line' (line 718)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 718, 8), 'line', unicode_141170)
        
        
        # Call to split(...): (line 720)
        # Processing the call arguments (line 720)
        unicode_141176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 720, 42), 'unicode', u' ')
        # Processing the call keyword arguments (line 720)
        kwargs_141177 = {}
        
        # Call to get_text(...): (line 720)
        # Processing the call keyword arguments (line 720)
        kwargs_141173 = {}
        # Getting the type of 'self' (line 720)
        self_141171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 720, 20), 'self', False)
        # Obtaining the member 'get_text' of a type (line 720)
        get_text_141172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 720, 20), self_141171, 'get_text')
        # Calling get_text(args, kwargs) (line 720)
        get_text_call_result_141174 = invoke(stypy.reporting.localization.Localization(__file__, 720, 20), get_text_141172, *[], **kwargs_141173)
        
        # Obtaining the member 'split' of a type (line 720)
        split_141175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 720, 20), get_text_call_result_141174, 'split')
        # Calling split(args, kwargs) (line 720)
        split_call_result_141178 = invoke(stypy.reporting.localization.Localization(__file__, 720, 20), split_141175, *[unicode_141176], **kwargs_141177)
        
        # Testing the type of a for loop iterable (line 720)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 720, 8), split_call_result_141178)
        # Getting the type of the for loop variable (line 720)
        for_loop_var_141179 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 720, 8), split_call_result_141178)
        # Assigning a type to the variable 'word' (line 720)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 720, 8), 'word', for_loop_var_141179)
        # SSA begins for a for statement (line 720)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 723):
        
        # Assigning a Call to a Name (line 723):
        
        # Assigning a Call to a Name (line 723):
        
        # Call to split(...): (line 723)
        # Processing the call arguments (line 723)
        unicode_141182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 723, 35), 'unicode', u'\n')
        # Processing the call keyword arguments (line 723)
        kwargs_141183 = {}
        # Getting the type of 'word' (line 723)
        word_141180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 24), 'word', False)
        # Obtaining the member 'split' of a type (line 723)
        split_141181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 723, 24), word_141180, 'split')
        # Calling split(args, kwargs) (line 723)
        split_call_result_141184 = invoke(stypy.reporting.localization.Localization(__file__, 723, 24), split_141181, *[unicode_141182], **kwargs_141183)
        
        # Assigning a type to the variable 'sub_words' (line 723)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 723, 12), 'sub_words', split_call_result_141184)
        
        
        # Call to range(...): (line 724)
        # Processing the call arguments (line 724)
        
        # Call to len(...): (line 724)
        # Processing the call arguments (line 724)
        # Getting the type of 'sub_words' (line 724)
        sub_words_141187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 31), 'sub_words', False)
        # Processing the call keyword arguments (line 724)
        kwargs_141188 = {}
        # Getting the type of 'len' (line 724)
        len_141186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 27), 'len', False)
        # Calling len(args, kwargs) (line 724)
        len_call_result_141189 = invoke(stypy.reporting.localization.Localization(__file__, 724, 27), len_141186, *[sub_words_141187], **kwargs_141188)
        
        # Processing the call keyword arguments (line 724)
        kwargs_141190 = {}
        # Getting the type of 'range' (line 724)
        range_141185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 21), 'range', False)
        # Calling range(args, kwargs) (line 724)
        range_call_result_141191 = invoke(stypy.reporting.localization.Localization(__file__, 724, 21), range_141185, *[len_call_result_141189], **kwargs_141190)
        
        # Testing the type of a for loop iterable (line 724)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 724, 12), range_call_result_141191)
        # Getting the type of the for loop variable (line 724)
        for_loop_var_141192 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 724, 12), range_call_result_141191)
        # Assigning a type to the variable 'i' (line 724)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 724, 12), 'i', for_loop_var_141192)
        # SSA begins for a for statement (line 724)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 725):
        
        # Assigning a Call to a Name (line 725):
        
        # Assigning a Call to a Name (line 725):
        
        # Call to _get_rendered_text_width(...): (line 725)
        # Processing the call arguments (line 725)
        # Getting the type of 'line' (line 726)
        line_141195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 20), 'line', False)
        unicode_141196 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 726, 27), 'unicode', u' ')
        # Applying the binary operator '+' (line 726)
        result_add_141197 = python_operator(stypy.reporting.localization.Localization(__file__, 726, 20), '+', line_141195, unicode_141196)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 726)
        i_141198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 43), 'i', False)
        # Getting the type of 'sub_words' (line 726)
        sub_words_141199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 33), 'sub_words', False)
        # Obtaining the member '__getitem__' of a type (line 726)
        getitem___141200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 726, 33), sub_words_141199, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 726)
        subscript_call_result_141201 = invoke(stypy.reporting.localization.Localization(__file__, 726, 33), getitem___141200, i_141198)
        
        # Applying the binary operator '+' (line 726)
        result_add_141202 = python_operator(stypy.reporting.localization.Localization(__file__, 726, 31), '+', result_add_141197, subscript_call_result_141201)
        
        # Processing the call keyword arguments (line 725)
        kwargs_141203 = {}
        # Getting the type of 'self' (line 725)
        self_141193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 32), 'self', False)
        # Obtaining the member '_get_rendered_text_width' of a type (line 725)
        _get_rendered_text_width_141194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 32), self_141193, '_get_rendered_text_width')
        # Calling _get_rendered_text_width(args, kwargs) (line 725)
        _get_rendered_text_width_call_result_141204 = invoke(stypy.reporting.localization.Localization(__file__, 725, 32), _get_rendered_text_width_141194, *[result_add_141202], **kwargs_141203)
        
        # Assigning a type to the variable 'current_width' (line 725)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 725, 16), 'current_width', _get_rendered_text_width_call_result_141204)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'current_width' (line 729)
        current_width_141205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 19), 'current_width')
        # Getting the type of 'line_width' (line 729)
        line_width_141206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 35), 'line_width')
        # Applying the binary operator '>' (line 729)
        result_gt_141207 = python_operator(stypy.reporting.localization.Localization(__file__, 729, 19), '>', current_width_141205, line_width_141206)
        
        
        # Getting the type of 'i' (line 729)
        i_141208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 49), 'i')
        int_141209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 729, 53), 'int')
        # Applying the binary operator '>' (line 729)
        result_gt_141210 = python_operator(stypy.reporting.localization.Localization(__file__, 729, 49), '>', i_141208, int_141209)
        
        # Applying the binary operator 'or' (line 729)
        result_or_keyword_141211 = python_operator(stypy.reporting.localization.Localization(__file__, 729, 19), 'or', result_gt_141207, result_gt_141210)
        
        # Testing the type of an if condition (line 729)
        if_condition_141212 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 729, 16), result_or_keyword_141211)
        # Assigning a type to the variable 'if_condition_141212' (line 729)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 729, 16), 'if_condition_141212', if_condition_141212)
        # SSA begins for if statement (line 729)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'wrapped_str' (line 730)
        wrapped_str_141213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 20), 'wrapped_str')
        # Getting the type of 'line' (line 730)
        line_141214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 35), 'line')
        unicode_141215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 730, 42), 'unicode', u'\n')
        # Applying the binary operator '+' (line 730)
        result_add_141216 = python_operator(stypy.reporting.localization.Localization(__file__, 730, 35), '+', line_141214, unicode_141215)
        
        # Applying the binary operator '+=' (line 730)
        result_iadd_141217 = python_operator(stypy.reporting.localization.Localization(__file__, 730, 20), '+=', wrapped_str_141213, result_add_141216)
        # Assigning a type to the variable 'wrapped_str' (line 730)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 730, 20), 'wrapped_str', result_iadd_141217)
        
        
        # Assigning a Str to a Name (line 731):
        
        # Assigning a Str to a Name (line 731):
        
        # Assigning a Str to a Name (line 731):
        unicode_141218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 731, 27), 'unicode', u'')
        # Assigning a type to the variable 'line' (line 731)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 731, 20), 'line', unicode_141218)
        # SSA join for if statement (line 729)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'line' (line 733)
        line_141219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 19), 'line')
        unicode_141220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 733, 27), 'unicode', u'')
        # Applying the binary operator '==' (line 733)
        result_eq_141221 = python_operator(stypy.reporting.localization.Localization(__file__, 733, 19), '==', line_141219, unicode_141220)
        
        # Testing the type of an if condition (line 733)
        if_condition_141222 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 733, 16), result_eq_141221)
        # Assigning a type to the variable 'if_condition_141222' (line 733)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 733, 16), 'if_condition_141222', if_condition_141222)
        # SSA begins for if statement (line 733)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 734):
        
        # Assigning a Subscript to a Name (line 734):
        
        # Assigning a Subscript to a Name (line 734):
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 734)
        i_141223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 37), 'i')
        # Getting the type of 'sub_words' (line 734)
        sub_words_141224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 27), 'sub_words')
        # Obtaining the member '__getitem__' of a type (line 734)
        getitem___141225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 27), sub_words_141224, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 734)
        subscript_call_result_141226 = invoke(stypy.reporting.localization.Localization(__file__, 734, 27), getitem___141225, i_141223)
        
        # Assigning a type to the variable 'line' (line 734)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 734, 20), 'line', subscript_call_result_141226)
        # SSA branch for the else part of an if statement (line 733)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'line' (line 736)
        line_141227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 20), 'line')
        unicode_141228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 736, 28), 'unicode', u' ')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 736)
        i_141229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 44), 'i')
        # Getting the type of 'sub_words' (line 736)
        sub_words_141230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 34), 'sub_words')
        # Obtaining the member '__getitem__' of a type (line 736)
        getitem___141231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 736, 34), sub_words_141230, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 736)
        subscript_call_result_141232 = invoke(stypy.reporting.localization.Localization(__file__, 736, 34), getitem___141231, i_141229)
        
        # Applying the binary operator '+' (line 736)
        result_add_141233 = python_operator(stypy.reporting.localization.Localization(__file__, 736, 28), '+', unicode_141228, subscript_call_result_141232)
        
        # Applying the binary operator '+=' (line 736)
        result_iadd_141234 = python_operator(stypy.reporting.localization.Localization(__file__, 736, 20), '+=', line_141227, result_add_141233)
        # Assigning a type to the variable 'line' (line 736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 736, 20), 'line', result_iadd_141234)
        
        # SSA join for if statement (line 733)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'wrapped_str' (line 738)
        wrapped_str_141235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 15), 'wrapped_str')
        # Getting the type of 'line' (line 738)
        line_141236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 29), 'line')
        # Applying the binary operator '+' (line 738)
        result_add_141237 = python_operator(stypy.reporting.localization.Localization(__file__, 738, 15), '+', wrapped_str_141235, line_141236)
        
        # Assigning a type to the variable 'stypy_return_type' (line 738)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 738, 8), 'stypy_return_type', result_add_141237)
        
        # ################# End of '_get_wrapped_text(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_wrapped_text' in the type store
        # Getting the type of 'stypy_return_type' (line 705)
        stypy_return_type_141238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141238)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_wrapped_text'
        return stypy_return_type_141238


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 740, 4, False)
        # Assigning a type to the variable 'self' (line 741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 741, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.draw.__dict__.__setitem__('stypy_localization', localization)
        Text.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.draw.__dict__.__setitem__('stypy_function_name', 'Text.draw')
        Text.draw.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        Text.draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.draw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.draw', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        unicode_141239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 744, (-1)), 'unicode', u'\n        Draws the :class:`Text` object to the given *renderer*.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 745)
        # Getting the type of 'renderer' (line 745)
        renderer_141240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 8), 'renderer')
        # Getting the type of 'None' (line 745)
        None_141241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 27), 'None')
        
        (may_be_141242, more_types_in_union_141243) = may_not_be_none(renderer_141240, None_141241)

        if may_be_141242:

            if more_types_in_union_141243:
                # Runtime conditional SSA (line 745)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 746):
            
            # Assigning a Name to a Attribute (line 746):
            
            # Assigning a Name to a Attribute (line 746):
            # Getting the type of 'renderer' (line 746)
            renderer_141244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 29), 'renderer')
            # Getting the type of 'self' (line 746)
            self_141245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 12), 'self')
            # Setting the type of the member '_renderer' of a type (line 746)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 746, 12), self_141245, '_renderer', renderer_141244)

            if more_types_in_union_141243:
                # SSA join for if statement (line 745)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        
        # Call to get_visible(...): (line 747)
        # Processing the call keyword arguments (line 747)
        kwargs_141248 = {}
        # Getting the type of 'self' (line 747)
        self_141246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 15), 'self', False)
        # Obtaining the member 'get_visible' of a type (line 747)
        get_visible_141247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 747, 15), self_141246, 'get_visible')
        # Calling get_visible(args, kwargs) (line 747)
        get_visible_call_result_141249 = invoke(stypy.reporting.localization.Localization(__file__, 747, 15), get_visible_141247, *[], **kwargs_141248)
        
        # Applying the 'not' unary operator (line 747)
        result_not__141250 = python_operator(stypy.reporting.localization.Localization(__file__, 747, 11), 'not', get_visible_call_result_141249)
        
        # Testing the type of an if condition (line 747)
        if_condition_141251 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 747, 8), result_not__141250)
        # Assigning a type to the variable 'if_condition_141251' (line 747)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 747, 8), 'if_condition_141251', if_condition_141251)
        # SSA begins for if statement (line 747)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 748)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 748, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 747)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to get_text(...): (line 749)
        # Processing the call keyword arguments (line 749)
        kwargs_141254 = {}
        # Getting the type of 'self' (line 749)
        self_141252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 749, 11), 'self', False)
        # Obtaining the member 'get_text' of a type (line 749)
        get_text_141253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 749, 11), self_141252, 'get_text')
        # Calling get_text(args, kwargs) (line 749)
        get_text_call_result_141255 = invoke(stypy.reporting.localization.Localization(__file__, 749, 11), get_text_141253, *[], **kwargs_141254)
        
        unicode_141256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 749, 30), 'unicode', u'')
        # Applying the binary operator '==' (line 749)
        result_eq_141257 = python_operator(stypy.reporting.localization.Localization(__file__, 749, 11), '==', get_text_call_result_141255, unicode_141256)
        
        # Testing the type of an if condition (line 749)
        if_condition_141258 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 749, 8), result_eq_141257)
        # Assigning a type to the variable 'if_condition_141258' (line 749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 749, 8), 'if_condition_141258', if_condition_141258)
        # SSA begins for if statement (line 749)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 750)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 750, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 749)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to open_group(...): (line 752)
        # Processing the call arguments (line 752)
        unicode_141261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 752, 28), 'unicode', u'text')
        
        # Call to get_gid(...): (line 752)
        # Processing the call keyword arguments (line 752)
        kwargs_141264 = {}
        # Getting the type of 'self' (line 752)
        self_141262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 36), 'self', False)
        # Obtaining the member 'get_gid' of a type (line 752)
        get_gid_141263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 752, 36), self_141262, 'get_gid')
        # Calling get_gid(args, kwargs) (line 752)
        get_gid_call_result_141265 = invoke(stypy.reporting.localization.Localization(__file__, 752, 36), get_gid_141263, *[], **kwargs_141264)
        
        # Processing the call keyword arguments (line 752)
        kwargs_141266 = {}
        # Getting the type of 'renderer' (line 752)
        renderer_141259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 8), 'renderer', False)
        # Obtaining the member 'open_group' of a type (line 752)
        open_group_141260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 752, 8), renderer_141259, 'open_group')
        # Calling open_group(args, kwargs) (line 752)
        open_group_call_result_141267 = invoke(stypy.reporting.localization.Localization(__file__, 752, 8), open_group_141260, *[unicode_141261, get_gid_call_result_141265], **kwargs_141266)
        
        
        # Call to _wrap_text(...): (line 754)
        # Processing the call arguments (line 754)
        # Getting the type of 'self' (line 754)
        self_141269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 24), 'self', False)
        # Processing the call keyword arguments (line 754)
        kwargs_141270 = {}
        # Getting the type of '_wrap_text' (line 754)
        _wrap_text_141268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 13), '_wrap_text', False)
        # Calling _wrap_text(args, kwargs) (line 754)
        _wrap_text_call_result_141271 = invoke(stypy.reporting.localization.Localization(__file__, 754, 13), _wrap_text_141268, *[self_141269], **kwargs_141270)
        
        with_141272 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 754, 13), _wrap_text_call_result_141271, 'with parameter', '__enter__', '__exit__')

        if with_141272:
            # Calling the __enter__ method to initiate a with section
            # Obtaining the member '__enter__' of a type (line 754)
            enter___141273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 754, 13), _wrap_text_call_result_141271, '__enter__')
            with_enter_141274 = invoke(stypy.reporting.localization.Localization(__file__, 754, 13), enter___141273)
            # Assigning a type to the variable 'textobj' (line 754)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 754, 13), 'textobj', with_enter_141274)
            
            # Assigning a Call to a Tuple (line 755):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to _get_layout(...): (line 755)
            # Processing the call arguments (line 755)
            # Getting the type of 'renderer' (line 755)
            renderer_141277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 54), 'renderer', False)
            # Processing the call keyword arguments (line 755)
            kwargs_141278 = {}
            # Getting the type of 'textobj' (line 755)
            textobj_141275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 34), 'textobj', False)
            # Obtaining the member '_get_layout' of a type (line 755)
            _get_layout_141276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 755, 34), textobj_141275, '_get_layout')
            # Calling _get_layout(args, kwargs) (line 755)
            _get_layout_call_result_141279 = invoke(stypy.reporting.localization.Localization(__file__, 755, 34), _get_layout_141276, *[renderer_141277], **kwargs_141278)
            
            # Assigning a type to the variable 'call_assignment_139086' (line 755)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 755, 12), 'call_assignment_139086', _get_layout_call_result_141279)
            
            # Assigning a Call to a Name (line 755):
            
            # Assigning a Call to a Name (line 755):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_141282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 755, 12), 'int')
            # Processing the call keyword arguments
            kwargs_141283 = {}
            # Getting the type of 'call_assignment_139086' (line 755)
            call_assignment_139086_141280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 12), 'call_assignment_139086', False)
            # Obtaining the member '__getitem__' of a type (line 755)
            getitem___141281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 755, 12), call_assignment_139086_141280, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_141284 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___141281, *[int_141282], **kwargs_141283)
            
            # Assigning a type to the variable 'call_assignment_139087' (line 755)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 755, 12), 'call_assignment_139087', getitem___call_result_141284)
            
            # Assigning a Name to a Name (line 755):
            
            # Assigning a Name to a Name (line 755):
            # Getting the type of 'call_assignment_139087' (line 755)
            call_assignment_139087_141285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 12), 'call_assignment_139087')
            # Assigning a type to the variable 'bbox' (line 755)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 755, 12), 'bbox', call_assignment_139087_141285)
            
            # Assigning a Call to a Name (line 755):
            
            # Assigning a Call to a Name (line 755):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_141288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 755, 12), 'int')
            # Processing the call keyword arguments
            kwargs_141289 = {}
            # Getting the type of 'call_assignment_139086' (line 755)
            call_assignment_139086_141286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 12), 'call_assignment_139086', False)
            # Obtaining the member '__getitem__' of a type (line 755)
            getitem___141287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 755, 12), call_assignment_139086_141286, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_141290 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___141287, *[int_141288], **kwargs_141289)
            
            # Assigning a type to the variable 'call_assignment_139088' (line 755)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 755, 12), 'call_assignment_139088', getitem___call_result_141290)
            
            # Assigning a Name to a Name (line 755):
            
            # Assigning a Name to a Name (line 755):
            # Getting the type of 'call_assignment_139088' (line 755)
            call_assignment_139088_141291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 12), 'call_assignment_139088')
            # Assigning a type to the variable 'info' (line 755)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 755, 18), 'info', call_assignment_139088_141291)
            
            # Assigning a Call to a Name (line 755):
            
            # Assigning a Call to a Name (line 755):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_141294 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 755, 12), 'int')
            # Processing the call keyword arguments
            kwargs_141295 = {}
            # Getting the type of 'call_assignment_139086' (line 755)
            call_assignment_139086_141292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 12), 'call_assignment_139086', False)
            # Obtaining the member '__getitem__' of a type (line 755)
            getitem___141293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 755, 12), call_assignment_139086_141292, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_141296 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___141293, *[int_141294], **kwargs_141295)
            
            # Assigning a type to the variable 'call_assignment_139089' (line 755)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 755, 12), 'call_assignment_139089', getitem___call_result_141296)
            
            # Assigning a Name to a Name (line 755):
            
            # Assigning a Name to a Name (line 755):
            # Getting the type of 'call_assignment_139089' (line 755)
            call_assignment_139089_141297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 12), 'call_assignment_139089')
            # Assigning a type to the variable 'descent' (line 755)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 755, 24), 'descent', call_assignment_139089_141297)
            
            # Assigning a Call to a Name (line 756):
            
            # Assigning a Call to a Name (line 756):
            
            # Assigning a Call to a Name (line 756):
            
            # Call to get_transform(...): (line 756)
            # Processing the call keyword arguments (line 756)
            kwargs_141300 = {}
            # Getting the type of 'textobj' (line 756)
            textobj_141298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 20), 'textobj', False)
            # Obtaining the member 'get_transform' of a type (line 756)
            get_transform_141299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 20), textobj_141298, 'get_transform')
            # Calling get_transform(args, kwargs) (line 756)
            get_transform_call_result_141301 = invoke(stypy.reporting.localization.Localization(__file__, 756, 20), get_transform_141299, *[], **kwargs_141300)
            
            # Assigning a type to the variable 'trans' (line 756)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 756, 12), 'trans', get_transform_call_result_141301)
            
            # Assigning a Call to a Name (line 760):
            
            # Assigning a Call to a Name (line 760):
            
            # Assigning a Call to a Name (line 760):
            
            # Call to float(...): (line 760)
            # Processing the call arguments (line 760)
            
            # Call to convert_xunits(...): (line 760)
            # Processing the call arguments (line 760)
            # Getting the type of 'textobj' (line 760)
            textobj_141305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 48), 'textobj', False)
            # Obtaining the member '_x' of a type (line 760)
            _x_141306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 760, 48), textobj_141305, '_x')
            # Processing the call keyword arguments (line 760)
            kwargs_141307 = {}
            # Getting the type of 'textobj' (line 760)
            textobj_141303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 25), 'textobj', False)
            # Obtaining the member 'convert_xunits' of a type (line 760)
            convert_xunits_141304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 760, 25), textobj_141303, 'convert_xunits')
            # Calling convert_xunits(args, kwargs) (line 760)
            convert_xunits_call_result_141308 = invoke(stypy.reporting.localization.Localization(__file__, 760, 25), convert_xunits_141304, *[_x_141306], **kwargs_141307)
            
            # Processing the call keyword arguments (line 760)
            kwargs_141309 = {}
            # Getting the type of 'float' (line 760)
            float_141302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 19), 'float', False)
            # Calling float(args, kwargs) (line 760)
            float_call_result_141310 = invoke(stypy.reporting.localization.Localization(__file__, 760, 19), float_141302, *[convert_xunits_call_result_141308], **kwargs_141309)
            
            # Assigning a type to the variable 'posx' (line 760)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 760, 12), 'posx', float_call_result_141310)
            
            # Assigning a Call to a Name (line 761):
            
            # Assigning a Call to a Name (line 761):
            
            # Assigning a Call to a Name (line 761):
            
            # Call to float(...): (line 761)
            # Processing the call arguments (line 761)
            
            # Call to convert_yunits(...): (line 761)
            # Processing the call arguments (line 761)
            # Getting the type of 'textobj' (line 761)
            textobj_141314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 48), 'textobj', False)
            # Obtaining the member '_y' of a type (line 761)
            _y_141315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 761, 48), textobj_141314, '_y')
            # Processing the call keyword arguments (line 761)
            kwargs_141316 = {}
            # Getting the type of 'textobj' (line 761)
            textobj_141312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 25), 'textobj', False)
            # Obtaining the member 'convert_yunits' of a type (line 761)
            convert_yunits_141313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 761, 25), textobj_141312, 'convert_yunits')
            # Calling convert_yunits(args, kwargs) (line 761)
            convert_yunits_call_result_141317 = invoke(stypy.reporting.localization.Localization(__file__, 761, 25), convert_yunits_141313, *[_y_141315], **kwargs_141316)
            
            # Processing the call keyword arguments (line 761)
            kwargs_141318 = {}
            # Getting the type of 'float' (line 761)
            float_141311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 19), 'float', False)
            # Calling float(args, kwargs) (line 761)
            float_call_result_141319 = invoke(stypy.reporting.localization.Localization(__file__, 761, 19), float_141311, *[convert_yunits_call_result_141317], **kwargs_141318)
            
            # Assigning a type to the variable 'posy' (line 761)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 761, 12), 'posy', float_call_result_141319)
            
            
            # Evaluating a boolean operation
            
            
            # Call to isfinite(...): (line 762)
            # Processing the call arguments (line 762)
            # Getting the type of 'posx' (line 762)
            posx_141322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 31), 'posx', False)
            # Processing the call keyword arguments (line 762)
            kwargs_141323 = {}
            # Getting the type of 'np' (line 762)
            np_141320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 19), 'np', False)
            # Obtaining the member 'isfinite' of a type (line 762)
            isfinite_141321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 762, 19), np_141320, 'isfinite')
            # Calling isfinite(args, kwargs) (line 762)
            isfinite_call_result_141324 = invoke(stypy.reporting.localization.Localization(__file__, 762, 19), isfinite_141321, *[posx_141322], **kwargs_141323)
            
            # Applying the 'not' unary operator (line 762)
            result_not__141325 = python_operator(stypy.reporting.localization.Localization(__file__, 762, 15), 'not', isfinite_call_result_141324)
            
            
            
            # Call to isfinite(...): (line 762)
            # Processing the call arguments (line 762)
            # Getting the type of 'posy' (line 762)
            posy_141328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 56), 'posy', False)
            # Processing the call keyword arguments (line 762)
            kwargs_141329 = {}
            # Getting the type of 'np' (line 762)
            np_141326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 44), 'np', False)
            # Obtaining the member 'isfinite' of a type (line 762)
            isfinite_141327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 762, 44), np_141326, 'isfinite')
            # Calling isfinite(args, kwargs) (line 762)
            isfinite_call_result_141330 = invoke(stypy.reporting.localization.Localization(__file__, 762, 44), isfinite_141327, *[posy_141328], **kwargs_141329)
            
            # Applying the 'not' unary operator (line 762)
            result_not__141331 = python_operator(stypy.reporting.localization.Localization(__file__, 762, 40), 'not', isfinite_call_result_141330)
            
            # Applying the binary operator 'or' (line 762)
            result_or_keyword_141332 = python_operator(stypy.reporting.localization.Localization(__file__, 762, 15), 'or', result_not__141325, result_not__141331)
            
            # Testing the type of an if condition (line 762)
            if_condition_141333 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 762, 12), result_or_keyword_141332)
            # Assigning a type to the variable 'if_condition_141333' (line 762)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 762, 12), 'if_condition_141333', if_condition_141333)
            # SSA begins for if statement (line 762)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to ValueError(...): (line 763)
            # Processing the call arguments (line 763)
            unicode_141335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 763, 33), 'unicode', u'posx and posy should be finite values')
            # Processing the call keyword arguments (line 763)
            kwargs_141336 = {}
            # Getting the type of 'ValueError' (line 763)
            ValueError_141334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 22), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 763)
            ValueError_call_result_141337 = invoke(stypy.reporting.localization.Localization(__file__, 763, 22), ValueError_141334, *[unicode_141335], **kwargs_141336)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 763, 16), ValueError_call_result_141337, 'raise parameter', BaseException)
            # SSA join for if statement (line 762)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Tuple (line 764):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to transform_point(...): (line 764)
            # Processing the call arguments (line 764)
            
            # Obtaining an instance of the builtin type 'tuple' (line 764)
            tuple_141340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 764, 48), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 764)
            # Adding element type (line 764)
            # Getting the type of 'posx' (line 764)
            posx_141341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 48), 'posx', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 764, 48), tuple_141340, posx_141341)
            # Adding element type (line 764)
            # Getting the type of 'posy' (line 764)
            posy_141342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 54), 'posy', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 764, 48), tuple_141340, posy_141342)
            
            # Processing the call keyword arguments (line 764)
            kwargs_141343 = {}
            # Getting the type of 'trans' (line 764)
            trans_141338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 25), 'trans', False)
            # Obtaining the member 'transform_point' of a type (line 764)
            transform_point_141339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 764, 25), trans_141338, 'transform_point')
            # Calling transform_point(args, kwargs) (line 764)
            transform_point_call_result_141344 = invoke(stypy.reporting.localization.Localization(__file__, 764, 25), transform_point_141339, *[tuple_141340], **kwargs_141343)
            
            # Assigning a type to the variable 'call_assignment_139090' (line 764)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 764, 12), 'call_assignment_139090', transform_point_call_result_141344)
            
            # Assigning a Call to a Name (line 764):
            
            # Assigning a Call to a Name (line 764):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_141347 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 764, 12), 'int')
            # Processing the call keyword arguments
            kwargs_141348 = {}
            # Getting the type of 'call_assignment_139090' (line 764)
            call_assignment_139090_141345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 12), 'call_assignment_139090', False)
            # Obtaining the member '__getitem__' of a type (line 764)
            getitem___141346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 764, 12), call_assignment_139090_141345, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_141349 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___141346, *[int_141347], **kwargs_141348)
            
            # Assigning a type to the variable 'call_assignment_139091' (line 764)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 764, 12), 'call_assignment_139091', getitem___call_result_141349)
            
            # Assigning a Name to a Name (line 764):
            
            # Assigning a Name to a Name (line 764):
            # Getting the type of 'call_assignment_139091' (line 764)
            call_assignment_139091_141350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 12), 'call_assignment_139091')
            # Assigning a type to the variable 'posx' (line 764)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 764, 12), 'posx', call_assignment_139091_141350)
            
            # Assigning a Call to a Name (line 764):
            
            # Assigning a Call to a Name (line 764):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_141353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 764, 12), 'int')
            # Processing the call keyword arguments
            kwargs_141354 = {}
            # Getting the type of 'call_assignment_139090' (line 764)
            call_assignment_139090_141351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 12), 'call_assignment_139090', False)
            # Obtaining the member '__getitem__' of a type (line 764)
            getitem___141352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 764, 12), call_assignment_139090_141351, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_141355 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___141352, *[int_141353], **kwargs_141354)
            
            # Assigning a type to the variable 'call_assignment_139092' (line 764)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 764, 12), 'call_assignment_139092', getitem___call_result_141355)
            
            # Assigning a Name to a Name (line 764):
            
            # Assigning a Name to a Name (line 764):
            # Getting the type of 'call_assignment_139092' (line 764)
            call_assignment_139092_141356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 12), 'call_assignment_139092')
            # Assigning a type to the variable 'posy' (line 764)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 764, 18), 'posy', call_assignment_139092_141356)
            
            # Assigning a Call to a Tuple (line 765):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to get_canvas_width_height(...): (line 765)
            # Processing the call keyword arguments (line 765)
            kwargs_141359 = {}
            # Getting the type of 'renderer' (line 765)
            renderer_141357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 31), 'renderer', False)
            # Obtaining the member 'get_canvas_width_height' of a type (line 765)
            get_canvas_width_height_141358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 765, 31), renderer_141357, 'get_canvas_width_height')
            # Calling get_canvas_width_height(args, kwargs) (line 765)
            get_canvas_width_height_call_result_141360 = invoke(stypy.reporting.localization.Localization(__file__, 765, 31), get_canvas_width_height_141358, *[], **kwargs_141359)
            
            # Assigning a type to the variable 'call_assignment_139093' (line 765)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 765, 12), 'call_assignment_139093', get_canvas_width_height_call_result_141360)
            
            # Assigning a Call to a Name (line 765):
            
            # Assigning a Call to a Name (line 765):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_141363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 765, 12), 'int')
            # Processing the call keyword arguments
            kwargs_141364 = {}
            # Getting the type of 'call_assignment_139093' (line 765)
            call_assignment_139093_141361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 12), 'call_assignment_139093', False)
            # Obtaining the member '__getitem__' of a type (line 765)
            getitem___141362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 765, 12), call_assignment_139093_141361, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_141365 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___141362, *[int_141363], **kwargs_141364)
            
            # Assigning a type to the variable 'call_assignment_139094' (line 765)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 765, 12), 'call_assignment_139094', getitem___call_result_141365)
            
            # Assigning a Name to a Name (line 765):
            
            # Assigning a Name to a Name (line 765):
            # Getting the type of 'call_assignment_139094' (line 765)
            call_assignment_139094_141366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 12), 'call_assignment_139094')
            # Assigning a type to the variable 'canvasw' (line 765)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 765, 12), 'canvasw', call_assignment_139094_141366)
            
            # Assigning a Call to a Name (line 765):
            
            # Assigning a Call to a Name (line 765):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_141369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 765, 12), 'int')
            # Processing the call keyword arguments
            kwargs_141370 = {}
            # Getting the type of 'call_assignment_139093' (line 765)
            call_assignment_139093_141367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 12), 'call_assignment_139093', False)
            # Obtaining the member '__getitem__' of a type (line 765)
            getitem___141368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 765, 12), call_assignment_139093_141367, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_141371 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___141368, *[int_141369], **kwargs_141370)
            
            # Assigning a type to the variable 'call_assignment_139095' (line 765)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 765, 12), 'call_assignment_139095', getitem___call_result_141371)
            
            # Assigning a Name to a Name (line 765):
            
            # Assigning a Name to a Name (line 765):
            # Getting the type of 'call_assignment_139095' (line 765)
            call_assignment_139095_141372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 12), 'call_assignment_139095')
            # Assigning a type to the variable 'canvash' (line 765)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 765, 21), 'canvash', call_assignment_139095_141372)
            
            # Getting the type of 'textobj' (line 768)
            textobj_141373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 15), 'textobj')
            # Obtaining the member '_bbox_patch' of a type (line 768)
            _bbox_patch_141374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 15), textobj_141373, '_bbox_patch')
            # Testing the type of an if condition (line 768)
            if_condition_141375 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 768, 12), _bbox_patch_141374)
            # Assigning a type to the variable 'if_condition_141375' (line 768)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 12), 'if_condition_141375', if_condition_141375)
            # SSA begins for if statement (line 768)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to _draw_bbox(...): (line 769)
            # Processing the call arguments (line 769)
            # Getting the type of 'renderer' (line 769)
            renderer_141378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 35), 'renderer', False)
            # Getting the type of 'posx' (line 769)
            posx_141379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 45), 'posx', False)
            # Getting the type of 'posy' (line 769)
            posy_141380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 51), 'posy', False)
            # Processing the call keyword arguments (line 769)
            kwargs_141381 = {}
            # Getting the type of 'textobj' (line 769)
            textobj_141376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 16), 'textobj', False)
            # Obtaining the member '_draw_bbox' of a type (line 769)
            _draw_bbox_141377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 769, 16), textobj_141376, '_draw_bbox')
            # Calling _draw_bbox(args, kwargs) (line 769)
            _draw_bbox_call_result_141382 = invoke(stypy.reporting.localization.Localization(__file__, 769, 16), _draw_bbox_141377, *[renderer_141378, posx_141379, posy_141380], **kwargs_141381)
            
            # SSA join for if statement (line 768)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Name (line 771):
            
            # Assigning a Call to a Name (line 771):
            
            # Assigning a Call to a Name (line 771):
            
            # Call to new_gc(...): (line 771)
            # Processing the call keyword arguments (line 771)
            kwargs_141385 = {}
            # Getting the type of 'renderer' (line 771)
            renderer_141383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 17), 'renderer', False)
            # Obtaining the member 'new_gc' of a type (line 771)
            new_gc_141384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 771, 17), renderer_141383, 'new_gc')
            # Calling new_gc(args, kwargs) (line 771)
            new_gc_call_result_141386 = invoke(stypy.reporting.localization.Localization(__file__, 771, 17), new_gc_141384, *[], **kwargs_141385)
            
            # Assigning a type to the variable 'gc' (line 771)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 771, 12), 'gc', new_gc_call_result_141386)
            
            # Call to set_foreground(...): (line 772)
            # Processing the call arguments (line 772)
            
            # Call to get_color(...): (line 772)
            # Processing the call keyword arguments (line 772)
            kwargs_141391 = {}
            # Getting the type of 'textobj' (line 772)
            textobj_141389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 30), 'textobj', False)
            # Obtaining the member 'get_color' of a type (line 772)
            get_color_141390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 772, 30), textobj_141389, 'get_color')
            # Calling get_color(args, kwargs) (line 772)
            get_color_call_result_141392 = invoke(stypy.reporting.localization.Localization(__file__, 772, 30), get_color_141390, *[], **kwargs_141391)
            
            # Processing the call keyword arguments (line 772)
            kwargs_141393 = {}
            # Getting the type of 'gc' (line 772)
            gc_141387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 12), 'gc', False)
            # Obtaining the member 'set_foreground' of a type (line 772)
            set_foreground_141388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 772, 12), gc_141387, 'set_foreground')
            # Calling set_foreground(args, kwargs) (line 772)
            set_foreground_call_result_141394 = invoke(stypy.reporting.localization.Localization(__file__, 772, 12), set_foreground_141388, *[get_color_call_result_141392], **kwargs_141393)
            
            
            # Call to set_alpha(...): (line 773)
            # Processing the call arguments (line 773)
            
            # Call to get_alpha(...): (line 773)
            # Processing the call keyword arguments (line 773)
            kwargs_141399 = {}
            # Getting the type of 'textobj' (line 773)
            textobj_141397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 25), 'textobj', False)
            # Obtaining the member 'get_alpha' of a type (line 773)
            get_alpha_141398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 773, 25), textobj_141397, 'get_alpha')
            # Calling get_alpha(args, kwargs) (line 773)
            get_alpha_call_result_141400 = invoke(stypy.reporting.localization.Localization(__file__, 773, 25), get_alpha_141398, *[], **kwargs_141399)
            
            # Processing the call keyword arguments (line 773)
            kwargs_141401 = {}
            # Getting the type of 'gc' (line 773)
            gc_141395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 12), 'gc', False)
            # Obtaining the member 'set_alpha' of a type (line 773)
            set_alpha_141396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 773, 12), gc_141395, 'set_alpha')
            # Calling set_alpha(args, kwargs) (line 773)
            set_alpha_call_result_141402 = invoke(stypy.reporting.localization.Localization(__file__, 773, 12), set_alpha_141396, *[get_alpha_call_result_141400], **kwargs_141401)
            
            
            # Call to set_url(...): (line 774)
            # Processing the call arguments (line 774)
            # Getting the type of 'textobj' (line 774)
            textobj_141405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 23), 'textobj', False)
            # Obtaining the member '_url' of a type (line 774)
            _url_141406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 774, 23), textobj_141405, '_url')
            # Processing the call keyword arguments (line 774)
            kwargs_141407 = {}
            # Getting the type of 'gc' (line 774)
            gc_141403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 12), 'gc', False)
            # Obtaining the member 'set_url' of a type (line 774)
            set_url_141404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 774, 12), gc_141403, 'set_url')
            # Calling set_url(args, kwargs) (line 774)
            set_url_call_result_141408 = invoke(stypy.reporting.localization.Localization(__file__, 774, 12), set_url_141404, *[_url_141406], **kwargs_141407)
            
            
            # Call to _set_gc_clip(...): (line 775)
            # Processing the call arguments (line 775)
            # Getting the type of 'gc' (line 775)
            gc_141411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 33), 'gc', False)
            # Processing the call keyword arguments (line 775)
            kwargs_141412 = {}
            # Getting the type of 'textobj' (line 775)
            textobj_141409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 12), 'textobj', False)
            # Obtaining the member '_set_gc_clip' of a type (line 775)
            _set_gc_clip_141410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 775, 12), textobj_141409, '_set_gc_clip')
            # Calling _set_gc_clip(args, kwargs) (line 775)
            _set_gc_clip_call_result_141413 = invoke(stypy.reporting.localization.Localization(__file__, 775, 12), _set_gc_clip_141410, *[gc_141411], **kwargs_141412)
            
            
            # Assigning a Call to a Name (line 777):
            
            # Assigning a Call to a Name (line 777):
            
            # Assigning a Call to a Name (line 777):
            
            # Call to get_rotation(...): (line 777)
            # Processing the call keyword arguments (line 777)
            kwargs_141416 = {}
            # Getting the type of 'textobj' (line 777)
            textobj_141414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 20), 'textobj', False)
            # Obtaining the member 'get_rotation' of a type (line 777)
            get_rotation_141415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 777, 20), textobj_141414, 'get_rotation')
            # Calling get_rotation(args, kwargs) (line 777)
            get_rotation_call_result_141417 = invoke(stypy.reporting.localization.Localization(__file__, 777, 20), get_rotation_141415, *[], **kwargs_141416)
            
            # Assigning a type to the variable 'angle' (line 777)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 777, 12), 'angle', get_rotation_call_result_141417)
            
            # Getting the type of 'info' (line 779)
            info_141418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 34), 'info')
            # Testing the type of a for loop iterable (line 779)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 779, 12), info_141418)
            # Getting the type of the for loop variable (line 779)
            for_loop_var_141419 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 779, 12), info_141418)
            # Assigning a type to the variable 'line' (line 779)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 779, 12), 'line', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 779, 12), for_loop_var_141419))
            # Assigning a type to the variable 'wh' (line 779)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 779, 12), 'wh', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 779, 12), for_loop_var_141419))
            # Assigning a type to the variable 'x' (line 779)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 779, 12), 'x', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 779, 12), for_loop_var_141419))
            # Assigning a type to the variable 'y' (line 779)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 779, 12), 'y', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 779, 12), for_loop_var_141419))
            # SSA begins for a for statement (line 779)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            # Assigning a IfExp to a Name (line 781):
            
            # Assigning a IfExp to a Name (line 781):
            
            # Assigning a IfExp to a Name (line 781):
            
            
            
            # Call to len(...): (line 781)
            # Processing the call arguments (line 781)
            # Getting the type of 'info' (line 781)
            info_141421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 39), 'info', False)
            # Processing the call keyword arguments (line 781)
            kwargs_141422 = {}
            # Getting the type of 'len' (line 781)
            len_141420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 35), 'len', False)
            # Calling len(args, kwargs) (line 781)
            len_call_result_141423 = invoke(stypy.reporting.localization.Localization(__file__, 781, 35), len_141420, *[info_141421], **kwargs_141422)
            
            int_141424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 781, 48), 'int')
            # Applying the binary operator '==' (line 781)
            result_eq_141425 = python_operator(stypy.reporting.localization.Localization(__file__, 781, 35), '==', len_call_result_141423, int_141424)
            
            # Testing the type of an if expression (line 781)
            is_suitable_condition(stypy.reporting.localization.Localization(__file__, 781, 24), result_eq_141425)
            # SSA begins for if expression (line 781)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
            # Getting the type of 'textobj' (line 781)
            textobj_141426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 24), 'textobj')
            # SSA branch for the else part of an if expression (line 781)
            module_type_store.open_ssa_branch('if expression else')
            # Getting the type of 'None' (line 781)
            None_141427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 55), 'None')
            # SSA join for if expression (line 781)
            module_type_store = module_type_store.join_ssa_context()
            if_exp_141428 = union_type.UnionType.add(textobj_141426, None_141427)
            
            # Assigning a type to the variable 'mtext' (line 781)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 781, 16), 'mtext', if_exp_141428)
            
            # Assigning a BinOp to a Name (line 782):
            
            # Assigning a BinOp to a Name (line 782):
            
            # Assigning a BinOp to a Name (line 782):
            # Getting the type of 'x' (line 782)
            x_141429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 20), 'x')
            # Getting the type of 'posx' (line 782)
            posx_141430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 24), 'posx')
            # Applying the binary operator '+' (line 782)
            result_add_141431 = python_operator(stypy.reporting.localization.Localization(__file__, 782, 20), '+', x_141429, posx_141430)
            
            # Assigning a type to the variable 'x' (line 782)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 782, 16), 'x', result_add_141431)
            
            # Assigning a BinOp to a Name (line 783):
            
            # Assigning a BinOp to a Name (line 783):
            
            # Assigning a BinOp to a Name (line 783):
            # Getting the type of 'y' (line 783)
            y_141432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 20), 'y')
            # Getting the type of 'posy' (line 783)
            posy_141433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 24), 'posy')
            # Applying the binary operator '+' (line 783)
            result_add_141434 = python_operator(stypy.reporting.localization.Localization(__file__, 783, 20), '+', y_141432, posy_141433)
            
            # Assigning a type to the variable 'y' (line 783)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 783, 16), 'y', result_add_141434)
            
            
            # Call to flipy(...): (line 784)
            # Processing the call keyword arguments (line 784)
            kwargs_141437 = {}
            # Getting the type of 'renderer' (line 784)
            renderer_141435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 784, 19), 'renderer', False)
            # Obtaining the member 'flipy' of a type (line 784)
            flipy_141436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 784, 19), renderer_141435, 'flipy')
            # Calling flipy(args, kwargs) (line 784)
            flipy_call_result_141438 = invoke(stypy.reporting.localization.Localization(__file__, 784, 19), flipy_141436, *[], **kwargs_141437)
            
            # Testing the type of an if condition (line 784)
            if_condition_141439 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 784, 16), flipy_call_result_141438)
            # Assigning a type to the variable 'if_condition_141439' (line 784)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 784, 16), 'if_condition_141439', if_condition_141439)
            # SSA begins for if statement (line 784)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a BinOp to a Name (line 785):
            
            # Assigning a BinOp to a Name (line 785):
            
            # Assigning a BinOp to a Name (line 785):
            # Getting the type of 'canvash' (line 785)
            canvash_141440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 24), 'canvash')
            # Getting the type of 'y' (line 785)
            y_141441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 34), 'y')
            # Applying the binary operator '-' (line 785)
            result_sub_141442 = python_operator(stypy.reporting.localization.Localization(__file__, 785, 24), '-', canvash_141440, y_141441)
            
            # Assigning a type to the variable 'y' (line 785)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 785, 20), 'y', result_sub_141442)
            # SSA join for if statement (line 784)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Tuple (line 786):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to is_math_text(...): (line 786)
            # Processing the call arguments (line 786)
            # Getting the type of 'line' (line 786)
            line_141445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 58), 'line', False)
            
            # Call to get_usetex(...): (line 787)
            # Processing the call keyword arguments (line 787)
            kwargs_141448 = {}
            # Getting the type of 'self' (line 787)
            self_141446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 58), 'self', False)
            # Obtaining the member 'get_usetex' of a type (line 787)
            get_usetex_141447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 787, 58), self_141446, 'get_usetex')
            # Calling get_usetex(args, kwargs) (line 787)
            get_usetex_call_result_141449 = invoke(stypy.reporting.localization.Localization(__file__, 787, 58), get_usetex_141447, *[], **kwargs_141448)
            
            # Processing the call keyword arguments (line 786)
            kwargs_141450 = {}
            # Getting the type of 'textobj' (line 786)
            textobj_141443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 37), 'textobj', False)
            # Obtaining the member 'is_math_text' of a type (line 786)
            is_math_text_141444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 786, 37), textobj_141443, 'is_math_text')
            # Calling is_math_text(args, kwargs) (line 786)
            is_math_text_call_result_141451 = invoke(stypy.reporting.localization.Localization(__file__, 786, 37), is_math_text_141444, *[line_141445, get_usetex_call_result_141449], **kwargs_141450)
            
            # Assigning a type to the variable 'call_assignment_139096' (line 786)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 786, 16), 'call_assignment_139096', is_math_text_call_result_141451)
            
            # Assigning a Call to a Name (line 786):
            
            # Assigning a Call to a Name (line 786):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_141454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 786, 16), 'int')
            # Processing the call keyword arguments
            kwargs_141455 = {}
            # Getting the type of 'call_assignment_139096' (line 786)
            call_assignment_139096_141452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 16), 'call_assignment_139096', False)
            # Obtaining the member '__getitem__' of a type (line 786)
            getitem___141453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 786, 16), call_assignment_139096_141452, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_141456 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___141453, *[int_141454], **kwargs_141455)
            
            # Assigning a type to the variable 'call_assignment_139097' (line 786)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 786, 16), 'call_assignment_139097', getitem___call_result_141456)
            
            # Assigning a Name to a Name (line 786):
            
            # Assigning a Name to a Name (line 786):
            # Getting the type of 'call_assignment_139097' (line 786)
            call_assignment_139097_141457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 16), 'call_assignment_139097')
            # Assigning a type to the variable 'clean_line' (line 786)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 786, 16), 'clean_line', call_assignment_139097_141457)
            
            # Assigning a Call to a Name (line 786):
            
            # Assigning a Call to a Name (line 786):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_141460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 786, 16), 'int')
            # Processing the call keyword arguments
            kwargs_141461 = {}
            # Getting the type of 'call_assignment_139096' (line 786)
            call_assignment_139096_141458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 16), 'call_assignment_139096', False)
            # Obtaining the member '__getitem__' of a type (line 786)
            getitem___141459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 786, 16), call_assignment_139096_141458, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_141462 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___141459, *[int_141460], **kwargs_141461)
            
            # Assigning a type to the variable 'call_assignment_139098' (line 786)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 786, 16), 'call_assignment_139098', getitem___call_result_141462)
            
            # Assigning a Name to a Name (line 786):
            
            # Assigning a Name to a Name (line 786):
            # Getting the type of 'call_assignment_139098' (line 786)
            call_assignment_139098_141463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 16), 'call_assignment_139098')
            # Assigning a type to the variable 'ismath' (line 786)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 786, 28), 'ismath', call_assignment_139098_141463)
            
            
            # Call to get_path_effects(...): (line 789)
            # Processing the call keyword arguments (line 789)
            kwargs_141466 = {}
            # Getting the type of 'textobj' (line 789)
            textobj_141464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 19), 'textobj', False)
            # Obtaining the member 'get_path_effects' of a type (line 789)
            get_path_effects_141465 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 789, 19), textobj_141464, 'get_path_effects')
            # Calling get_path_effects(args, kwargs) (line 789)
            get_path_effects_call_result_141467 = invoke(stypy.reporting.localization.Localization(__file__, 789, 19), get_path_effects_141465, *[], **kwargs_141466)
            
            # Testing the type of an if condition (line 789)
            if_condition_141468 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 789, 16), get_path_effects_call_result_141467)
            # Assigning a type to the variable 'if_condition_141468' (line 789)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 789, 16), 'if_condition_141468', if_condition_141468)
            # SSA begins for if statement (line 789)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 790, 20))
            
            # 'from matplotlib.patheffects import PathEffectRenderer' statement (line 790)
            update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
            import_141469 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 790, 20), 'matplotlib.patheffects')

            if (type(import_141469) is not StypyTypeError):

                if (import_141469 != 'pyd_module'):
                    __import__(import_141469)
                    sys_modules_141470 = sys.modules[import_141469]
                    import_from_module(stypy.reporting.localization.Localization(__file__, 790, 20), 'matplotlib.patheffects', sys_modules_141470.module_type_store, module_type_store, ['PathEffectRenderer'])
                    nest_module(stypy.reporting.localization.Localization(__file__, 790, 20), __file__, sys_modules_141470, sys_modules_141470.module_type_store, module_type_store)
                else:
                    from matplotlib.patheffects import PathEffectRenderer

                    import_from_module(stypy.reporting.localization.Localization(__file__, 790, 20), 'matplotlib.patheffects', None, module_type_store, ['PathEffectRenderer'], [PathEffectRenderer])

            else:
                # Assigning a type to the variable 'matplotlib.patheffects' (line 790)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 790, 20), 'matplotlib.patheffects', import_141469)

            remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
            
            
            # Assigning a Call to a Name (line 791):
            
            # Assigning a Call to a Name (line 791):
            
            # Assigning a Call to a Name (line 791):
            
            # Call to PathEffectRenderer(...): (line 791)
            # Processing the call arguments (line 791)
            
            # Call to get_path_effects(...): (line 792)
            # Processing the call keyword arguments (line 792)
            kwargs_141474 = {}
            # Getting the type of 'textobj' (line 792)
            textobj_141472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 40), 'textobj', False)
            # Obtaining the member 'get_path_effects' of a type (line 792)
            get_path_effects_141473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 792, 40), textobj_141472, 'get_path_effects')
            # Calling get_path_effects(args, kwargs) (line 792)
            get_path_effects_call_result_141475 = invoke(stypy.reporting.localization.Localization(__file__, 792, 40), get_path_effects_141473, *[], **kwargs_141474)
            
            # Getting the type of 'renderer' (line 792)
            renderer_141476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 68), 'renderer', False)
            # Processing the call keyword arguments (line 791)
            kwargs_141477 = {}
            # Getting the type of 'PathEffectRenderer' (line 791)
            PathEffectRenderer_141471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 35), 'PathEffectRenderer', False)
            # Calling PathEffectRenderer(args, kwargs) (line 791)
            PathEffectRenderer_call_result_141478 = invoke(stypy.reporting.localization.Localization(__file__, 791, 35), PathEffectRenderer_141471, *[get_path_effects_call_result_141475, renderer_141476], **kwargs_141477)
            
            # Assigning a type to the variable 'textrenderer' (line 791)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 791, 20), 'textrenderer', PathEffectRenderer_call_result_141478)
            # SSA branch for the else part of an if statement (line 789)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Name to a Name (line 794):
            
            # Assigning a Name to a Name (line 794):
            
            # Assigning a Name to a Name (line 794):
            # Getting the type of 'renderer' (line 794)
            renderer_141479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 35), 'renderer')
            # Assigning a type to the variable 'textrenderer' (line 794)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 794, 20), 'textrenderer', renderer_141479)
            # SSA join for if statement (line 789)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            # Call to get_usetex(...): (line 796)
            # Processing the call keyword arguments (line 796)
            kwargs_141482 = {}
            # Getting the type of 'textobj' (line 796)
            textobj_141480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 19), 'textobj', False)
            # Obtaining the member 'get_usetex' of a type (line 796)
            get_usetex_141481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 796, 19), textobj_141480, 'get_usetex')
            # Calling get_usetex(args, kwargs) (line 796)
            get_usetex_call_result_141483 = invoke(stypy.reporting.localization.Localization(__file__, 796, 19), get_usetex_141481, *[], **kwargs_141482)
            
            # Testing the type of an if condition (line 796)
            if_condition_141484 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 796, 16), get_usetex_call_result_141483)
            # Assigning a type to the variable 'if_condition_141484' (line 796)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 796, 16), 'if_condition_141484', if_condition_141484)
            # SSA begins for if statement (line 796)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to draw_tex(...): (line 797)
            # Processing the call arguments (line 797)
            # Getting the type of 'gc' (line 797)
            gc_141487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 42), 'gc', False)
            # Getting the type of 'x' (line 797)
            x_141488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 46), 'x', False)
            # Getting the type of 'y' (line 797)
            y_141489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 49), 'y', False)
            # Getting the type of 'clean_line' (line 797)
            clean_line_141490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 52), 'clean_line', False)
            # Getting the type of 'textobj' (line 798)
            textobj_141491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 42), 'textobj', False)
            # Obtaining the member '_fontproperties' of a type (line 798)
            _fontproperties_141492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 798, 42), textobj_141491, '_fontproperties')
            # Getting the type of 'angle' (line 798)
            angle_141493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 67), 'angle', False)
            # Processing the call keyword arguments (line 797)
            # Getting the type of 'mtext' (line 799)
            mtext_141494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 48), 'mtext', False)
            keyword_141495 = mtext_141494
            kwargs_141496 = {'mtext': keyword_141495}
            # Getting the type of 'textrenderer' (line 797)
            textrenderer_141485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 20), 'textrenderer', False)
            # Obtaining the member 'draw_tex' of a type (line 797)
            draw_tex_141486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 20), textrenderer_141485, 'draw_tex')
            # Calling draw_tex(args, kwargs) (line 797)
            draw_tex_call_result_141497 = invoke(stypy.reporting.localization.Localization(__file__, 797, 20), draw_tex_141486, *[gc_141487, x_141488, y_141489, clean_line_141490, _fontproperties_141492, angle_141493], **kwargs_141496)
            
            # SSA branch for the else part of an if statement (line 796)
            module_type_store.open_ssa_branch('else')
            
            # Call to draw_text(...): (line 801)
            # Processing the call arguments (line 801)
            # Getting the type of 'gc' (line 801)
            gc_141500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 43), 'gc', False)
            # Getting the type of 'x' (line 801)
            x_141501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 47), 'x', False)
            # Getting the type of 'y' (line 801)
            y_141502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 50), 'y', False)
            # Getting the type of 'clean_line' (line 801)
            clean_line_141503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 53), 'clean_line', False)
            # Getting the type of 'textobj' (line 802)
            textobj_141504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 43), 'textobj', False)
            # Obtaining the member '_fontproperties' of a type (line 802)
            _fontproperties_141505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 802, 43), textobj_141504, '_fontproperties')
            # Getting the type of 'angle' (line 802)
            angle_141506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 68), 'angle', False)
            # Processing the call keyword arguments (line 801)
            # Getting the type of 'ismath' (line 803)
            ismath_141507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 50), 'ismath', False)
            keyword_141508 = ismath_141507
            # Getting the type of 'mtext' (line 803)
            mtext_141509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 64), 'mtext', False)
            keyword_141510 = mtext_141509
            kwargs_141511 = {'ismath': keyword_141508, 'mtext': keyword_141510}
            # Getting the type of 'textrenderer' (line 801)
            textrenderer_141498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 20), 'textrenderer', False)
            # Obtaining the member 'draw_text' of a type (line 801)
            draw_text_141499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 801, 20), textrenderer_141498, 'draw_text')
            # Calling draw_text(args, kwargs) (line 801)
            draw_text_call_result_141512 = invoke(stypy.reporting.localization.Localization(__file__, 801, 20), draw_text_141499, *[gc_141500, x_141501, y_141502, clean_line_141503, _fontproperties_141505, angle_141506], **kwargs_141511)
            
            # SSA join for if statement (line 796)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            
            # Calling the __exit__ method to finish a with section
            # Obtaining the member '__exit__' of a type (line 754)
            exit___141513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 754, 13), _wrap_text_call_result_141271, '__exit__')
            with_exit_141514 = invoke(stypy.reporting.localization.Localization(__file__, 754, 13), exit___141513, None, None, None)

        
        # Call to restore(...): (line 805)
        # Processing the call keyword arguments (line 805)
        kwargs_141517 = {}
        # Getting the type of 'gc' (line 805)
        gc_141515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 8), 'gc', False)
        # Obtaining the member 'restore' of a type (line 805)
        restore_141516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 805, 8), gc_141515, 'restore')
        # Calling restore(args, kwargs) (line 805)
        restore_call_result_141518 = invoke(stypy.reporting.localization.Localization(__file__, 805, 8), restore_141516, *[], **kwargs_141517)
        
        
        # Call to close_group(...): (line 806)
        # Processing the call arguments (line 806)
        unicode_141521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 806, 29), 'unicode', u'text')
        # Processing the call keyword arguments (line 806)
        kwargs_141522 = {}
        # Getting the type of 'renderer' (line 806)
        renderer_141519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 8), 'renderer', False)
        # Obtaining the member 'close_group' of a type (line 806)
        close_group_141520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 806, 8), renderer_141519, 'close_group')
        # Calling close_group(args, kwargs) (line 806)
        close_group_call_result_141523 = invoke(stypy.reporting.localization.Localization(__file__, 806, 8), close_group_141520, *[unicode_141521], **kwargs_141522)
        
        
        # Assigning a Name to a Attribute (line 807):
        
        # Assigning a Name to a Attribute (line 807):
        
        # Assigning a Name to a Attribute (line 807):
        # Getting the type of 'False' (line 807)
        False_141524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 21), 'False')
        # Getting the type of 'self' (line 807)
        self_141525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 807)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 807, 8), self_141525, 'stale', False_141524)
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 740)
        stypy_return_type_141526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141526)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_141526


    @norecursion
    def get_color(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_color'
        module_type_store = module_type_store.open_function_context('get_color', 809, 4, False)
        # Assigning a type to the variable 'self' (line 810)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 810, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.get_color.__dict__.__setitem__('stypy_localization', localization)
        Text.get_color.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.get_color.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.get_color.__dict__.__setitem__('stypy_function_name', 'Text.get_color')
        Text.get_color.__dict__.__setitem__('stypy_param_names_list', [])
        Text.get_color.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.get_color.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.get_color.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.get_color.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.get_color.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.get_color.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.get_color', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_color', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_color(...)' code ##################

        unicode_141527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 810, 8), 'unicode', u'Return the color of the text')
        # Getting the type of 'self' (line 811)
        self_141528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 15), 'self')
        # Obtaining the member '_color' of a type (line 811)
        _color_141529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 811, 15), self_141528, '_color')
        # Assigning a type to the variable 'stypy_return_type' (line 811)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 811, 8), 'stypy_return_type', _color_141529)
        
        # ################# End of 'get_color(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_color' in the type store
        # Getting the type of 'stypy_return_type' (line 809)
        stypy_return_type_141530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141530)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_color'
        return stypy_return_type_141530


    @norecursion
    def get_fontproperties(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_fontproperties'
        module_type_store = module_type_store.open_function_context('get_fontproperties', 813, 4, False)
        # Assigning a type to the variable 'self' (line 814)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 814, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.get_fontproperties.__dict__.__setitem__('stypy_localization', localization)
        Text.get_fontproperties.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.get_fontproperties.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.get_fontproperties.__dict__.__setitem__('stypy_function_name', 'Text.get_fontproperties')
        Text.get_fontproperties.__dict__.__setitem__('stypy_param_names_list', [])
        Text.get_fontproperties.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.get_fontproperties.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.get_fontproperties.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.get_fontproperties.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.get_fontproperties.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.get_fontproperties.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.get_fontproperties', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_fontproperties', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_fontproperties(...)' code ##################

        unicode_141531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 814, 8), 'unicode', u'Return the :class:`~font_manager.FontProperties` object')
        # Getting the type of 'self' (line 815)
        self_141532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 15), 'self')
        # Obtaining the member '_fontproperties' of a type (line 815)
        _fontproperties_141533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 815, 15), self_141532, '_fontproperties')
        # Assigning a type to the variable 'stypy_return_type' (line 815)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 815, 8), 'stypy_return_type', _fontproperties_141533)
        
        # ################# End of 'get_fontproperties(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_fontproperties' in the type store
        # Getting the type of 'stypy_return_type' (line 813)
        stypy_return_type_141534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141534)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_fontproperties'
        return stypy_return_type_141534


    @norecursion
    def get_font_properties(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_font_properties'
        module_type_store = module_type_store.open_function_context('get_font_properties', 817, 4, False)
        # Assigning a type to the variable 'self' (line 818)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 818, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.get_font_properties.__dict__.__setitem__('stypy_localization', localization)
        Text.get_font_properties.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.get_font_properties.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.get_font_properties.__dict__.__setitem__('stypy_function_name', 'Text.get_font_properties')
        Text.get_font_properties.__dict__.__setitem__('stypy_param_names_list', [])
        Text.get_font_properties.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.get_font_properties.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.get_font_properties.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.get_font_properties.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.get_font_properties.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.get_font_properties.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.get_font_properties', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_font_properties', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_font_properties(...)' code ##################

        unicode_141535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 818, 8), 'unicode', u'alias for get_fontproperties')
        
        # Call to get_fontproperties(...): (line 819)
        # Processing the call keyword arguments (line 819)
        kwargs_141538 = {}
        # Getting the type of 'self' (line 819)
        self_141536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 15), 'self', False)
        # Obtaining the member 'get_fontproperties' of a type (line 819)
        get_fontproperties_141537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 819, 15), self_141536, 'get_fontproperties')
        # Calling get_fontproperties(args, kwargs) (line 819)
        get_fontproperties_call_result_141539 = invoke(stypy.reporting.localization.Localization(__file__, 819, 15), get_fontproperties_141537, *[], **kwargs_141538)
        
        # Assigning a type to the variable 'stypy_return_type' (line 819)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 819, 8), 'stypy_return_type', get_fontproperties_call_result_141539)
        
        # ################# End of 'get_font_properties(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_font_properties' in the type store
        # Getting the type of 'stypy_return_type' (line 817)
        stypy_return_type_141540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141540)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_font_properties'
        return stypy_return_type_141540


    @norecursion
    def get_family(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_family'
        module_type_store = module_type_store.open_function_context('get_family', 821, 4, False)
        # Assigning a type to the variable 'self' (line 822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 822, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.get_family.__dict__.__setitem__('stypy_localization', localization)
        Text.get_family.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.get_family.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.get_family.__dict__.__setitem__('stypy_function_name', 'Text.get_family')
        Text.get_family.__dict__.__setitem__('stypy_param_names_list', [])
        Text.get_family.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.get_family.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.get_family.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.get_family.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.get_family.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.get_family.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.get_family', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_family', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_family(...)' code ##################

        unicode_141541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 822, 8), 'unicode', u'Return the list of font families used for font lookup')
        
        # Call to get_family(...): (line 823)
        # Processing the call keyword arguments (line 823)
        kwargs_141545 = {}
        # Getting the type of 'self' (line 823)
        self_141542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 15), 'self', False)
        # Obtaining the member '_fontproperties' of a type (line 823)
        _fontproperties_141543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 823, 15), self_141542, '_fontproperties')
        # Obtaining the member 'get_family' of a type (line 823)
        get_family_141544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 823, 15), _fontproperties_141543, 'get_family')
        # Calling get_family(args, kwargs) (line 823)
        get_family_call_result_141546 = invoke(stypy.reporting.localization.Localization(__file__, 823, 15), get_family_141544, *[], **kwargs_141545)
        
        # Assigning a type to the variable 'stypy_return_type' (line 823)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 823, 8), 'stypy_return_type', get_family_call_result_141546)
        
        # ################# End of 'get_family(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_family' in the type store
        # Getting the type of 'stypy_return_type' (line 821)
        stypy_return_type_141547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141547)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_family'
        return stypy_return_type_141547


    @norecursion
    def get_fontfamily(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_fontfamily'
        module_type_store = module_type_store.open_function_context('get_fontfamily', 825, 4, False)
        # Assigning a type to the variable 'self' (line 826)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 826, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.get_fontfamily.__dict__.__setitem__('stypy_localization', localization)
        Text.get_fontfamily.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.get_fontfamily.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.get_fontfamily.__dict__.__setitem__('stypy_function_name', 'Text.get_fontfamily')
        Text.get_fontfamily.__dict__.__setitem__('stypy_param_names_list', [])
        Text.get_fontfamily.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.get_fontfamily.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.get_fontfamily.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.get_fontfamily.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.get_fontfamily.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.get_fontfamily.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.get_fontfamily', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_fontfamily', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_fontfamily(...)' code ##################

        unicode_141548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 826, 8), 'unicode', u'alias for get_family')
        
        # Call to get_family(...): (line 827)
        # Processing the call keyword arguments (line 827)
        kwargs_141551 = {}
        # Getting the type of 'self' (line 827)
        self_141549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 15), 'self', False)
        # Obtaining the member 'get_family' of a type (line 827)
        get_family_141550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 827, 15), self_141549, 'get_family')
        # Calling get_family(args, kwargs) (line 827)
        get_family_call_result_141552 = invoke(stypy.reporting.localization.Localization(__file__, 827, 15), get_family_141550, *[], **kwargs_141551)
        
        # Assigning a type to the variable 'stypy_return_type' (line 827)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 827, 8), 'stypy_return_type', get_family_call_result_141552)
        
        # ################# End of 'get_fontfamily(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_fontfamily' in the type store
        # Getting the type of 'stypy_return_type' (line 825)
        stypy_return_type_141553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141553)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_fontfamily'
        return stypy_return_type_141553


    @norecursion
    def get_name(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_name'
        module_type_store = module_type_store.open_function_context('get_name', 829, 4, False)
        # Assigning a type to the variable 'self' (line 830)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 830, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.get_name.__dict__.__setitem__('stypy_localization', localization)
        Text.get_name.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.get_name.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.get_name.__dict__.__setitem__('stypy_function_name', 'Text.get_name')
        Text.get_name.__dict__.__setitem__('stypy_param_names_list', [])
        Text.get_name.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.get_name.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.get_name.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.get_name.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.get_name.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.get_name.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.get_name', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_name', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_name(...)' code ##################

        unicode_141554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 830, 8), 'unicode', u'Return the font name as string')
        
        # Call to get_name(...): (line 831)
        # Processing the call keyword arguments (line 831)
        kwargs_141558 = {}
        # Getting the type of 'self' (line 831)
        self_141555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 831, 15), 'self', False)
        # Obtaining the member '_fontproperties' of a type (line 831)
        _fontproperties_141556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 831, 15), self_141555, '_fontproperties')
        # Obtaining the member 'get_name' of a type (line 831)
        get_name_141557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 831, 15), _fontproperties_141556, 'get_name')
        # Calling get_name(args, kwargs) (line 831)
        get_name_call_result_141559 = invoke(stypy.reporting.localization.Localization(__file__, 831, 15), get_name_141557, *[], **kwargs_141558)
        
        # Assigning a type to the variable 'stypy_return_type' (line 831)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 831, 8), 'stypy_return_type', get_name_call_result_141559)
        
        # ################# End of 'get_name(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_name' in the type store
        # Getting the type of 'stypy_return_type' (line 829)
        stypy_return_type_141560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141560)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_name'
        return stypy_return_type_141560


    @norecursion
    def get_style(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_style'
        module_type_store = module_type_store.open_function_context('get_style', 833, 4, False)
        # Assigning a type to the variable 'self' (line 834)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 834, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.get_style.__dict__.__setitem__('stypy_localization', localization)
        Text.get_style.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.get_style.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.get_style.__dict__.__setitem__('stypy_function_name', 'Text.get_style')
        Text.get_style.__dict__.__setitem__('stypy_param_names_list', [])
        Text.get_style.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.get_style.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.get_style.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.get_style.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.get_style.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.get_style.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.get_style', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_style', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_style(...)' code ##################

        unicode_141561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 834, 8), 'unicode', u'Return the font style as string')
        
        # Call to get_style(...): (line 835)
        # Processing the call keyword arguments (line 835)
        kwargs_141565 = {}
        # Getting the type of 'self' (line 835)
        self_141562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 15), 'self', False)
        # Obtaining the member '_fontproperties' of a type (line 835)
        _fontproperties_141563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 835, 15), self_141562, '_fontproperties')
        # Obtaining the member 'get_style' of a type (line 835)
        get_style_141564 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 835, 15), _fontproperties_141563, 'get_style')
        # Calling get_style(args, kwargs) (line 835)
        get_style_call_result_141566 = invoke(stypy.reporting.localization.Localization(__file__, 835, 15), get_style_141564, *[], **kwargs_141565)
        
        # Assigning a type to the variable 'stypy_return_type' (line 835)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 835, 8), 'stypy_return_type', get_style_call_result_141566)
        
        # ################# End of 'get_style(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_style' in the type store
        # Getting the type of 'stypy_return_type' (line 833)
        stypy_return_type_141567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141567)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_style'
        return stypy_return_type_141567


    @norecursion
    def get_size(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_size'
        module_type_store = module_type_store.open_function_context('get_size', 837, 4, False)
        # Assigning a type to the variable 'self' (line 838)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 838, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.get_size.__dict__.__setitem__('stypy_localization', localization)
        Text.get_size.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.get_size.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.get_size.__dict__.__setitem__('stypy_function_name', 'Text.get_size')
        Text.get_size.__dict__.__setitem__('stypy_param_names_list', [])
        Text.get_size.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.get_size.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.get_size.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.get_size.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.get_size.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.get_size.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.get_size', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_size', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_size(...)' code ##################

        unicode_141568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 838, 8), 'unicode', u'Return the font size as integer')
        
        # Call to get_size_in_points(...): (line 839)
        # Processing the call keyword arguments (line 839)
        kwargs_141572 = {}
        # Getting the type of 'self' (line 839)
        self_141569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 15), 'self', False)
        # Obtaining the member '_fontproperties' of a type (line 839)
        _fontproperties_141570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 839, 15), self_141569, '_fontproperties')
        # Obtaining the member 'get_size_in_points' of a type (line 839)
        get_size_in_points_141571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 839, 15), _fontproperties_141570, 'get_size_in_points')
        # Calling get_size_in_points(args, kwargs) (line 839)
        get_size_in_points_call_result_141573 = invoke(stypy.reporting.localization.Localization(__file__, 839, 15), get_size_in_points_141571, *[], **kwargs_141572)
        
        # Assigning a type to the variable 'stypy_return_type' (line 839)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 839, 8), 'stypy_return_type', get_size_in_points_call_result_141573)
        
        # ################# End of 'get_size(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_size' in the type store
        # Getting the type of 'stypy_return_type' (line 837)
        stypy_return_type_141574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141574)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_size'
        return stypy_return_type_141574


    @norecursion
    def get_variant(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_variant'
        module_type_store = module_type_store.open_function_context('get_variant', 841, 4, False)
        # Assigning a type to the variable 'self' (line 842)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 842, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.get_variant.__dict__.__setitem__('stypy_localization', localization)
        Text.get_variant.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.get_variant.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.get_variant.__dict__.__setitem__('stypy_function_name', 'Text.get_variant')
        Text.get_variant.__dict__.__setitem__('stypy_param_names_list', [])
        Text.get_variant.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.get_variant.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.get_variant.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.get_variant.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.get_variant.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.get_variant.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.get_variant', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_variant', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_variant(...)' code ##################

        unicode_141575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 842, 8), 'unicode', u'Return the font variant as a string')
        
        # Call to get_variant(...): (line 843)
        # Processing the call keyword arguments (line 843)
        kwargs_141579 = {}
        # Getting the type of 'self' (line 843)
        self_141576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 15), 'self', False)
        # Obtaining the member '_fontproperties' of a type (line 843)
        _fontproperties_141577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 843, 15), self_141576, '_fontproperties')
        # Obtaining the member 'get_variant' of a type (line 843)
        get_variant_141578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 843, 15), _fontproperties_141577, 'get_variant')
        # Calling get_variant(args, kwargs) (line 843)
        get_variant_call_result_141580 = invoke(stypy.reporting.localization.Localization(__file__, 843, 15), get_variant_141578, *[], **kwargs_141579)
        
        # Assigning a type to the variable 'stypy_return_type' (line 843)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 843, 8), 'stypy_return_type', get_variant_call_result_141580)
        
        # ################# End of 'get_variant(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_variant' in the type store
        # Getting the type of 'stypy_return_type' (line 841)
        stypy_return_type_141581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141581)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_variant'
        return stypy_return_type_141581


    @norecursion
    def get_fontvariant(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_fontvariant'
        module_type_store = module_type_store.open_function_context('get_fontvariant', 845, 4, False)
        # Assigning a type to the variable 'self' (line 846)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 846, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.get_fontvariant.__dict__.__setitem__('stypy_localization', localization)
        Text.get_fontvariant.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.get_fontvariant.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.get_fontvariant.__dict__.__setitem__('stypy_function_name', 'Text.get_fontvariant')
        Text.get_fontvariant.__dict__.__setitem__('stypy_param_names_list', [])
        Text.get_fontvariant.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.get_fontvariant.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.get_fontvariant.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.get_fontvariant.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.get_fontvariant.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.get_fontvariant.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.get_fontvariant', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_fontvariant', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_fontvariant(...)' code ##################

        unicode_141582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 846, 8), 'unicode', u'alias for get_variant')
        
        # Call to get_variant(...): (line 847)
        # Processing the call keyword arguments (line 847)
        kwargs_141585 = {}
        # Getting the type of 'self' (line 847)
        self_141583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 847, 15), 'self', False)
        # Obtaining the member 'get_variant' of a type (line 847)
        get_variant_141584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 847, 15), self_141583, 'get_variant')
        # Calling get_variant(args, kwargs) (line 847)
        get_variant_call_result_141586 = invoke(stypy.reporting.localization.Localization(__file__, 847, 15), get_variant_141584, *[], **kwargs_141585)
        
        # Assigning a type to the variable 'stypy_return_type' (line 847)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 847, 8), 'stypy_return_type', get_variant_call_result_141586)
        
        # ################# End of 'get_fontvariant(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_fontvariant' in the type store
        # Getting the type of 'stypy_return_type' (line 845)
        stypy_return_type_141587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141587)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_fontvariant'
        return stypy_return_type_141587


    @norecursion
    def get_weight(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_weight'
        module_type_store = module_type_store.open_function_context('get_weight', 849, 4, False)
        # Assigning a type to the variable 'self' (line 850)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 850, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.get_weight.__dict__.__setitem__('stypy_localization', localization)
        Text.get_weight.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.get_weight.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.get_weight.__dict__.__setitem__('stypy_function_name', 'Text.get_weight')
        Text.get_weight.__dict__.__setitem__('stypy_param_names_list', [])
        Text.get_weight.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.get_weight.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.get_weight.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.get_weight.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.get_weight.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.get_weight.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.get_weight', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_weight', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_weight(...)' code ##################

        unicode_141588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 850, 8), 'unicode', u'Get the font weight as string or number')
        
        # Call to get_weight(...): (line 851)
        # Processing the call keyword arguments (line 851)
        kwargs_141592 = {}
        # Getting the type of 'self' (line 851)
        self_141589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 851, 15), 'self', False)
        # Obtaining the member '_fontproperties' of a type (line 851)
        _fontproperties_141590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 851, 15), self_141589, '_fontproperties')
        # Obtaining the member 'get_weight' of a type (line 851)
        get_weight_141591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 851, 15), _fontproperties_141590, 'get_weight')
        # Calling get_weight(args, kwargs) (line 851)
        get_weight_call_result_141593 = invoke(stypy.reporting.localization.Localization(__file__, 851, 15), get_weight_141591, *[], **kwargs_141592)
        
        # Assigning a type to the variable 'stypy_return_type' (line 851)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 851, 8), 'stypy_return_type', get_weight_call_result_141593)
        
        # ################# End of 'get_weight(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_weight' in the type store
        # Getting the type of 'stypy_return_type' (line 849)
        stypy_return_type_141594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141594)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_weight'
        return stypy_return_type_141594


    @norecursion
    def get_fontname(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_fontname'
        module_type_store = module_type_store.open_function_context('get_fontname', 853, 4, False)
        # Assigning a type to the variable 'self' (line 854)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 854, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.get_fontname.__dict__.__setitem__('stypy_localization', localization)
        Text.get_fontname.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.get_fontname.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.get_fontname.__dict__.__setitem__('stypy_function_name', 'Text.get_fontname')
        Text.get_fontname.__dict__.__setitem__('stypy_param_names_list', [])
        Text.get_fontname.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.get_fontname.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.get_fontname.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.get_fontname.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.get_fontname.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.get_fontname.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.get_fontname', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_fontname', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_fontname(...)' code ##################

        unicode_141595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 854, 8), 'unicode', u'alias for get_name')
        
        # Call to get_name(...): (line 855)
        # Processing the call keyword arguments (line 855)
        kwargs_141598 = {}
        # Getting the type of 'self' (line 855)
        self_141596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 15), 'self', False)
        # Obtaining the member 'get_name' of a type (line 855)
        get_name_141597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 855, 15), self_141596, 'get_name')
        # Calling get_name(args, kwargs) (line 855)
        get_name_call_result_141599 = invoke(stypy.reporting.localization.Localization(__file__, 855, 15), get_name_141597, *[], **kwargs_141598)
        
        # Assigning a type to the variable 'stypy_return_type' (line 855)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 855, 8), 'stypy_return_type', get_name_call_result_141599)
        
        # ################# End of 'get_fontname(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_fontname' in the type store
        # Getting the type of 'stypy_return_type' (line 853)
        stypy_return_type_141600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141600)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_fontname'
        return stypy_return_type_141600


    @norecursion
    def get_fontstyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_fontstyle'
        module_type_store = module_type_store.open_function_context('get_fontstyle', 857, 4, False)
        # Assigning a type to the variable 'self' (line 858)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 858, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.get_fontstyle.__dict__.__setitem__('stypy_localization', localization)
        Text.get_fontstyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.get_fontstyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.get_fontstyle.__dict__.__setitem__('stypy_function_name', 'Text.get_fontstyle')
        Text.get_fontstyle.__dict__.__setitem__('stypy_param_names_list', [])
        Text.get_fontstyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.get_fontstyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.get_fontstyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.get_fontstyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.get_fontstyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.get_fontstyle.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.get_fontstyle', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_fontstyle', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_fontstyle(...)' code ##################

        unicode_141601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 858, 8), 'unicode', u'alias for get_style')
        
        # Call to get_style(...): (line 859)
        # Processing the call keyword arguments (line 859)
        kwargs_141604 = {}
        # Getting the type of 'self' (line 859)
        self_141602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 859, 15), 'self', False)
        # Obtaining the member 'get_style' of a type (line 859)
        get_style_141603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 859, 15), self_141602, 'get_style')
        # Calling get_style(args, kwargs) (line 859)
        get_style_call_result_141605 = invoke(stypy.reporting.localization.Localization(__file__, 859, 15), get_style_141603, *[], **kwargs_141604)
        
        # Assigning a type to the variable 'stypy_return_type' (line 859)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 859, 8), 'stypy_return_type', get_style_call_result_141605)
        
        # ################# End of 'get_fontstyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_fontstyle' in the type store
        # Getting the type of 'stypy_return_type' (line 857)
        stypy_return_type_141606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141606)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_fontstyle'
        return stypy_return_type_141606


    @norecursion
    def get_fontsize(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_fontsize'
        module_type_store = module_type_store.open_function_context('get_fontsize', 861, 4, False)
        # Assigning a type to the variable 'self' (line 862)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 862, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.get_fontsize.__dict__.__setitem__('stypy_localization', localization)
        Text.get_fontsize.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.get_fontsize.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.get_fontsize.__dict__.__setitem__('stypy_function_name', 'Text.get_fontsize')
        Text.get_fontsize.__dict__.__setitem__('stypy_param_names_list', [])
        Text.get_fontsize.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.get_fontsize.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.get_fontsize.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.get_fontsize.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.get_fontsize.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.get_fontsize.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.get_fontsize', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_fontsize', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_fontsize(...)' code ##################

        unicode_141607 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 862, 8), 'unicode', u'alias for get_size')
        
        # Call to get_size(...): (line 863)
        # Processing the call keyword arguments (line 863)
        kwargs_141610 = {}
        # Getting the type of 'self' (line 863)
        self_141608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 15), 'self', False)
        # Obtaining the member 'get_size' of a type (line 863)
        get_size_141609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 863, 15), self_141608, 'get_size')
        # Calling get_size(args, kwargs) (line 863)
        get_size_call_result_141611 = invoke(stypy.reporting.localization.Localization(__file__, 863, 15), get_size_141609, *[], **kwargs_141610)
        
        # Assigning a type to the variable 'stypy_return_type' (line 863)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 863, 8), 'stypy_return_type', get_size_call_result_141611)
        
        # ################# End of 'get_fontsize(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_fontsize' in the type store
        # Getting the type of 'stypy_return_type' (line 861)
        stypy_return_type_141612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141612)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_fontsize'
        return stypy_return_type_141612


    @norecursion
    def get_fontweight(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_fontweight'
        module_type_store = module_type_store.open_function_context('get_fontweight', 865, 4, False)
        # Assigning a type to the variable 'self' (line 866)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 866, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.get_fontweight.__dict__.__setitem__('stypy_localization', localization)
        Text.get_fontweight.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.get_fontweight.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.get_fontweight.__dict__.__setitem__('stypy_function_name', 'Text.get_fontweight')
        Text.get_fontweight.__dict__.__setitem__('stypy_param_names_list', [])
        Text.get_fontweight.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.get_fontweight.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.get_fontweight.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.get_fontweight.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.get_fontweight.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.get_fontweight.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.get_fontweight', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_fontweight', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_fontweight(...)' code ##################

        unicode_141613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 866, 8), 'unicode', u'alias for get_weight')
        
        # Call to get_weight(...): (line 867)
        # Processing the call keyword arguments (line 867)
        kwargs_141616 = {}
        # Getting the type of 'self' (line 867)
        self_141614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 15), 'self', False)
        # Obtaining the member 'get_weight' of a type (line 867)
        get_weight_141615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 867, 15), self_141614, 'get_weight')
        # Calling get_weight(args, kwargs) (line 867)
        get_weight_call_result_141617 = invoke(stypy.reporting.localization.Localization(__file__, 867, 15), get_weight_141615, *[], **kwargs_141616)
        
        # Assigning a type to the variable 'stypy_return_type' (line 867)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 867, 8), 'stypy_return_type', get_weight_call_result_141617)
        
        # ################# End of 'get_fontweight(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_fontweight' in the type store
        # Getting the type of 'stypy_return_type' (line 865)
        stypy_return_type_141618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141618)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_fontweight'
        return stypy_return_type_141618


    @norecursion
    def get_stretch(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_stretch'
        module_type_store = module_type_store.open_function_context('get_stretch', 869, 4, False)
        # Assigning a type to the variable 'self' (line 870)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 870, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.get_stretch.__dict__.__setitem__('stypy_localization', localization)
        Text.get_stretch.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.get_stretch.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.get_stretch.__dict__.__setitem__('stypy_function_name', 'Text.get_stretch')
        Text.get_stretch.__dict__.__setitem__('stypy_param_names_list', [])
        Text.get_stretch.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.get_stretch.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.get_stretch.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.get_stretch.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.get_stretch.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.get_stretch.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.get_stretch', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_stretch', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_stretch(...)' code ##################

        unicode_141619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 870, 8), 'unicode', u'Get the font stretch as a string or number')
        
        # Call to get_stretch(...): (line 871)
        # Processing the call keyword arguments (line 871)
        kwargs_141623 = {}
        # Getting the type of 'self' (line 871)
        self_141620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 15), 'self', False)
        # Obtaining the member '_fontproperties' of a type (line 871)
        _fontproperties_141621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 871, 15), self_141620, '_fontproperties')
        # Obtaining the member 'get_stretch' of a type (line 871)
        get_stretch_141622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 871, 15), _fontproperties_141621, 'get_stretch')
        # Calling get_stretch(args, kwargs) (line 871)
        get_stretch_call_result_141624 = invoke(stypy.reporting.localization.Localization(__file__, 871, 15), get_stretch_141622, *[], **kwargs_141623)
        
        # Assigning a type to the variable 'stypy_return_type' (line 871)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 871, 8), 'stypy_return_type', get_stretch_call_result_141624)
        
        # ################# End of 'get_stretch(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_stretch' in the type store
        # Getting the type of 'stypy_return_type' (line 869)
        stypy_return_type_141625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141625)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_stretch'
        return stypy_return_type_141625


    @norecursion
    def get_fontstretch(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_fontstretch'
        module_type_store = module_type_store.open_function_context('get_fontstretch', 873, 4, False)
        # Assigning a type to the variable 'self' (line 874)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 874, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.get_fontstretch.__dict__.__setitem__('stypy_localization', localization)
        Text.get_fontstretch.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.get_fontstretch.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.get_fontstretch.__dict__.__setitem__('stypy_function_name', 'Text.get_fontstretch')
        Text.get_fontstretch.__dict__.__setitem__('stypy_param_names_list', [])
        Text.get_fontstretch.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.get_fontstretch.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.get_fontstretch.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.get_fontstretch.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.get_fontstretch.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.get_fontstretch.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.get_fontstretch', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_fontstretch', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_fontstretch(...)' code ##################

        unicode_141626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 874, 8), 'unicode', u'alias for get_stretch')
        
        # Call to get_stretch(...): (line 875)
        # Processing the call keyword arguments (line 875)
        kwargs_141629 = {}
        # Getting the type of 'self' (line 875)
        self_141627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 15), 'self', False)
        # Obtaining the member 'get_stretch' of a type (line 875)
        get_stretch_141628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 875, 15), self_141627, 'get_stretch')
        # Calling get_stretch(args, kwargs) (line 875)
        get_stretch_call_result_141630 = invoke(stypy.reporting.localization.Localization(__file__, 875, 15), get_stretch_141628, *[], **kwargs_141629)
        
        # Assigning a type to the variable 'stypy_return_type' (line 875)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 875, 8), 'stypy_return_type', get_stretch_call_result_141630)
        
        # ################# End of 'get_fontstretch(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_fontstretch' in the type store
        # Getting the type of 'stypy_return_type' (line 873)
        stypy_return_type_141631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141631)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_fontstretch'
        return stypy_return_type_141631


    @norecursion
    def get_ha(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_ha'
        module_type_store = module_type_store.open_function_context('get_ha', 877, 4, False)
        # Assigning a type to the variable 'self' (line 878)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 878, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.get_ha.__dict__.__setitem__('stypy_localization', localization)
        Text.get_ha.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.get_ha.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.get_ha.__dict__.__setitem__('stypy_function_name', 'Text.get_ha')
        Text.get_ha.__dict__.__setitem__('stypy_param_names_list', [])
        Text.get_ha.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.get_ha.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.get_ha.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.get_ha.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.get_ha.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.get_ha.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.get_ha', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_ha', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_ha(...)' code ##################

        unicode_141632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 878, 8), 'unicode', u'alias for get_horizontalalignment')
        
        # Call to get_horizontalalignment(...): (line 879)
        # Processing the call keyword arguments (line 879)
        kwargs_141635 = {}
        # Getting the type of 'self' (line 879)
        self_141633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 15), 'self', False)
        # Obtaining the member 'get_horizontalalignment' of a type (line 879)
        get_horizontalalignment_141634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 879, 15), self_141633, 'get_horizontalalignment')
        # Calling get_horizontalalignment(args, kwargs) (line 879)
        get_horizontalalignment_call_result_141636 = invoke(stypy.reporting.localization.Localization(__file__, 879, 15), get_horizontalalignment_141634, *[], **kwargs_141635)
        
        # Assigning a type to the variable 'stypy_return_type' (line 879)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 879, 8), 'stypy_return_type', get_horizontalalignment_call_result_141636)
        
        # ################# End of 'get_ha(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_ha' in the type store
        # Getting the type of 'stypy_return_type' (line 877)
        stypy_return_type_141637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141637)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_ha'
        return stypy_return_type_141637


    @norecursion
    def get_horizontalalignment(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_horizontalalignment'
        module_type_store = module_type_store.open_function_context('get_horizontalalignment', 881, 4, False)
        # Assigning a type to the variable 'self' (line 882)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 882, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.get_horizontalalignment.__dict__.__setitem__('stypy_localization', localization)
        Text.get_horizontalalignment.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.get_horizontalalignment.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.get_horizontalalignment.__dict__.__setitem__('stypy_function_name', 'Text.get_horizontalalignment')
        Text.get_horizontalalignment.__dict__.__setitem__('stypy_param_names_list', [])
        Text.get_horizontalalignment.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.get_horizontalalignment.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.get_horizontalalignment.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.get_horizontalalignment.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.get_horizontalalignment.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.get_horizontalalignment.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.get_horizontalalignment', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_horizontalalignment', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_horizontalalignment(...)' code ##################

        unicode_141638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 885, (-1)), 'unicode', u"\n        Return the horizontal alignment as string.  Will be one of\n        'left', 'center' or 'right'.\n        ")
        # Getting the type of 'self' (line 886)
        self_141639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 15), 'self')
        # Obtaining the member '_horizontalalignment' of a type (line 886)
        _horizontalalignment_141640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 886, 15), self_141639, '_horizontalalignment')
        # Assigning a type to the variable 'stypy_return_type' (line 886)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 886, 8), 'stypy_return_type', _horizontalalignment_141640)
        
        # ################# End of 'get_horizontalalignment(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_horizontalalignment' in the type store
        # Getting the type of 'stypy_return_type' (line 881)
        stypy_return_type_141641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141641)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_horizontalalignment'
        return stypy_return_type_141641


    @norecursion
    def get_unitless_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_unitless_position'
        module_type_store = module_type_store.open_function_context('get_unitless_position', 888, 4, False)
        # Assigning a type to the variable 'self' (line 889)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 889, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.get_unitless_position.__dict__.__setitem__('stypy_localization', localization)
        Text.get_unitless_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.get_unitless_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.get_unitless_position.__dict__.__setitem__('stypy_function_name', 'Text.get_unitless_position')
        Text.get_unitless_position.__dict__.__setitem__('stypy_param_names_list', [])
        Text.get_unitless_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.get_unitless_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.get_unitless_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.get_unitless_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.get_unitless_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.get_unitless_position.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.get_unitless_position', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_unitless_position', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_unitless_position(...)' code ##################

        unicode_141642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 889, 8), 'unicode', u'Return the unitless position of the text as a tuple (*x*, *y*)')
        
        # Assigning a Call to a Name (line 892):
        
        # Assigning a Call to a Name (line 892):
        
        # Assigning a Call to a Name (line 892):
        
        # Call to float(...): (line 892)
        # Processing the call arguments (line 892)
        
        # Call to convert_xunits(...): (line 892)
        # Processing the call arguments (line 892)
        # Getting the type of 'self' (line 892)
        self_141646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 38), 'self', False)
        # Obtaining the member '_x' of a type (line 892)
        _x_141647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 892, 38), self_141646, '_x')
        # Processing the call keyword arguments (line 892)
        kwargs_141648 = {}
        # Getting the type of 'self' (line 892)
        self_141644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 18), 'self', False)
        # Obtaining the member 'convert_xunits' of a type (line 892)
        convert_xunits_141645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 892, 18), self_141644, 'convert_xunits')
        # Calling convert_xunits(args, kwargs) (line 892)
        convert_xunits_call_result_141649 = invoke(stypy.reporting.localization.Localization(__file__, 892, 18), convert_xunits_141645, *[_x_141647], **kwargs_141648)
        
        # Processing the call keyword arguments (line 892)
        kwargs_141650 = {}
        # Getting the type of 'float' (line 892)
        float_141643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 12), 'float', False)
        # Calling float(args, kwargs) (line 892)
        float_call_result_141651 = invoke(stypy.reporting.localization.Localization(__file__, 892, 12), float_141643, *[convert_xunits_call_result_141649], **kwargs_141650)
        
        # Assigning a type to the variable 'x' (line 892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 892, 8), 'x', float_call_result_141651)
        
        # Assigning a Call to a Name (line 893):
        
        # Assigning a Call to a Name (line 893):
        
        # Assigning a Call to a Name (line 893):
        
        # Call to float(...): (line 893)
        # Processing the call arguments (line 893)
        
        # Call to convert_yunits(...): (line 893)
        # Processing the call arguments (line 893)
        # Getting the type of 'self' (line 893)
        self_141655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 38), 'self', False)
        # Obtaining the member '_y' of a type (line 893)
        _y_141656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 893, 38), self_141655, '_y')
        # Processing the call keyword arguments (line 893)
        kwargs_141657 = {}
        # Getting the type of 'self' (line 893)
        self_141653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 18), 'self', False)
        # Obtaining the member 'convert_yunits' of a type (line 893)
        convert_yunits_141654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 893, 18), self_141653, 'convert_yunits')
        # Calling convert_yunits(args, kwargs) (line 893)
        convert_yunits_call_result_141658 = invoke(stypy.reporting.localization.Localization(__file__, 893, 18), convert_yunits_141654, *[_y_141656], **kwargs_141657)
        
        # Processing the call keyword arguments (line 893)
        kwargs_141659 = {}
        # Getting the type of 'float' (line 893)
        float_141652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 12), 'float', False)
        # Calling float(args, kwargs) (line 893)
        float_call_result_141660 = invoke(stypy.reporting.localization.Localization(__file__, 893, 12), float_141652, *[convert_yunits_call_result_141658], **kwargs_141659)
        
        # Assigning a type to the variable 'y' (line 893)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 893, 8), 'y', float_call_result_141660)
        
        # Obtaining an instance of the builtin type 'tuple' (line 894)
        tuple_141661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 894, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 894)
        # Adding element type (line 894)
        # Getting the type of 'x' (line 894)
        x_141662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 15), 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 894, 15), tuple_141661, x_141662)
        # Adding element type (line 894)
        # Getting the type of 'y' (line 894)
        y_141663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 18), 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 894, 15), tuple_141661, y_141663)
        
        # Assigning a type to the variable 'stypy_return_type' (line 894)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 894, 8), 'stypy_return_type', tuple_141661)
        
        # ################# End of 'get_unitless_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_unitless_position' in the type store
        # Getting the type of 'stypy_return_type' (line 888)
        stypy_return_type_141664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141664)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_unitless_position'
        return stypy_return_type_141664


    @norecursion
    def get_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_position'
        module_type_store = module_type_store.open_function_context('get_position', 896, 4, False)
        # Assigning a type to the variable 'self' (line 897)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 897, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.get_position.__dict__.__setitem__('stypy_localization', localization)
        Text.get_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.get_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.get_position.__dict__.__setitem__('stypy_function_name', 'Text.get_position')
        Text.get_position.__dict__.__setitem__('stypy_param_names_list', [])
        Text.get_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.get_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.get_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.get_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.get_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.get_position.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.get_position', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_position', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_position(...)' code ##################

        unicode_141665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 897, 8), 'unicode', u'Return the position of the text as a tuple (*x*, *y*)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 900)
        tuple_141666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 900, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 900)
        # Adding element type (line 900)
        # Getting the type of 'self' (line 900)
        self_141667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 15), 'self')
        # Obtaining the member '_x' of a type (line 900)
        _x_141668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 900, 15), self_141667, '_x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 900, 15), tuple_141666, _x_141668)
        # Adding element type (line 900)
        # Getting the type of 'self' (line 900)
        self_141669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 24), 'self')
        # Obtaining the member '_y' of a type (line 900)
        _y_141670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 900, 24), self_141669, '_y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 900, 15), tuple_141666, _y_141670)
        
        # Assigning a type to the variable 'stypy_return_type' (line 900)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 900, 8), 'stypy_return_type', tuple_141666)
        
        # ################# End of 'get_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_position' in the type store
        # Getting the type of 'stypy_return_type' (line 896)
        stypy_return_type_141671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141671)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_position'
        return stypy_return_type_141671


    @norecursion
    def get_prop_tup(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 902)
        None_141672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 36), 'None')
        defaults = [None_141672]
        # Create a new context for function 'get_prop_tup'
        module_type_store = module_type_store.open_function_context('get_prop_tup', 902, 4, False)
        # Assigning a type to the variable 'self' (line 903)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 903, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.get_prop_tup.__dict__.__setitem__('stypy_localization', localization)
        Text.get_prop_tup.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.get_prop_tup.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.get_prop_tup.__dict__.__setitem__('stypy_function_name', 'Text.get_prop_tup')
        Text.get_prop_tup.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        Text.get_prop_tup.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.get_prop_tup.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.get_prop_tup.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.get_prop_tup.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.get_prop_tup.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.get_prop_tup.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.get_prop_tup', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_prop_tup', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_prop_tup(...)' code ##################

        unicode_141673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 909, (-1)), 'unicode', u'\n        Return a hashable tuple of properties.\n\n        Not intended to be human readable, but useful for backends who\n        want to cache derived information about text (e.g., layouts) and\n        need to know if the text has changed.\n        ')
        
        # Assigning a Call to a Tuple (line 910):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to get_unitless_position(...): (line 910)
        # Processing the call keyword arguments (line 910)
        kwargs_141676 = {}
        # Getting the type of 'self' (line 910)
        self_141674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 15), 'self', False)
        # Obtaining the member 'get_unitless_position' of a type (line 910)
        get_unitless_position_141675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 910, 15), self_141674, 'get_unitless_position')
        # Calling get_unitless_position(args, kwargs) (line 910)
        get_unitless_position_call_result_141677 = invoke(stypy.reporting.localization.Localization(__file__, 910, 15), get_unitless_position_141675, *[], **kwargs_141676)
        
        # Assigning a type to the variable 'call_assignment_139099' (line 910)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 910, 8), 'call_assignment_139099', get_unitless_position_call_result_141677)
        
        # Assigning a Call to a Name (line 910):
        
        # Assigning a Call to a Name (line 910):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_141680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 910, 8), 'int')
        # Processing the call keyword arguments
        kwargs_141681 = {}
        # Getting the type of 'call_assignment_139099' (line 910)
        call_assignment_139099_141678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 8), 'call_assignment_139099', False)
        # Obtaining the member '__getitem__' of a type (line 910)
        getitem___141679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 910, 8), call_assignment_139099_141678, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_141682 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___141679, *[int_141680], **kwargs_141681)
        
        # Assigning a type to the variable 'call_assignment_139100' (line 910)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 910, 8), 'call_assignment_139100', getitem___call_result_141682)
        
        # Assigning a Name to a Name (line 910):
        
        # Assigning a Name to a Name (line 910):
        # Getting the type of 'call_assignment_139100' (line 910)
        call_assignment_139100_141683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 8), 'call_assignment_139100')
        # Assigning a type to the variable 'x' (line 910)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 910, 8), 'x', call_assignment_139100_141683)
        
        # Assigning a Call to a Name (line 910):
        
        # Assigning a Call to a Name (line 910):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_141686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 910, 8), 'int')
        # Processing the call keyword arguments
        kwargs_141687 = {}
        # Getting the type of 'call_assignment_139099' (line 910)
        call_assignment_139099_141684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 8), 'call_assignment_139099', False)
        # Obtaining the member '__getitem__' of a type (line 910)
        getitem___141685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 910, 8), call_assignment_139099_141684, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_141688 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___141685, *[int_141686], **kwargs_141687)
        
        # Assigning a type to the variable 'call_assignment_139101' (line 910)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 910, 8), 'call_assignment_139101', getitem___call_result_141688)
        
        # Assigning a Name to a Name (line 910):
        
        # Assigning a Name to a Name (line 910):
        # Getting the type of 'call_assignment_139101' (line 910)
        call_assignment_139101_141689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 8), 'call_assignment_139101')
        # Assigning a type to the variable 'y' (line 910)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 910, 11), 'y', call_assignment_139101_141689)
        
        # Assigning a BoolOp to a Name (line 911):
        
        # Assigning a BoolOp to a Name (line 911):
        
        # Assigning a BoolOp to a Name (line 911):
        
        # Evaluating a boolean operation
        # Getting the type of 'renderer' (line 911)
        renderer_141690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 19), 'renderer')
        # Getting the type of 'self' (line 911)
        self_141691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 31), 'self')
        # Obtaining the member '_renderer' of a type (line 911)
        _renderer_141692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 911, 31), self_141691, '_renderer')
        # Applying the binary operator 'or' (line 911)
        result_or_keyword_141693 = python_operator(stypy.reporting.localization.Localization(__file__, 911, 19), 'or', renderer_141690, _renderer_141692)
        
        # Assigning a type to the variable 'renderer' (line 911)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 911, 8), 'renderer', result_or_keyword_141693)
        
        # Obtaining an instance of the builtin type 'tuple' (line 912)
        tuple_141694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 912, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 912)
        # Adding element type (line 912)
        # Getting the type of 'x' (line 912)
        x_141695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 16), 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 912, 16), tuple_141694, x_141695)
        # Adding element type (line 912)
        # Getting the type of 'y' (line 912)
        y_141696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 19), 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 912, 16), tuple_141694, y_141696)
        # Adding element type (line 912)
        
        # Call to get_text(...): (line 912)
        # Processing the call keyword arguments (line 912)
        kwargs_141699 = {}
        # Getting the type of 'self' (line 912)
        self_141697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 22), 'self', False)
        # Obtaining the member 'get_text' of a type (line 912)
        get_text_141698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 912, 22), self_141697, 'get_text')
        # Calling get_text(args, kwargs) (line 912)
        get_text_call_result_141700 = invoke(stypy.reporting.localization.Localization(__file__, 912, 22), get_text_141698, *[], **kwargs_141699)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 912, 16), tuple_141694, get_text_call_result_141700)
        # Adding element type (line 912)
        # Getting the type of 'self' (line 912)
        self_141701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 39), 'self')
        # Obtaining the member '_color' of a type (line 912)
        _color_141702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 912, 39), self_141701, '_color')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 912, 16), tuple_141694, _color_141702)
        # Adding element type (line 912)
        # Getting the type of 'self' (line 913)
        self_141703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 16), 'self')
        # Obtaining the member '_verticalalignment' of a type (line 913)
        _verticalalignment_141704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 913, 16), self_141703, '_verticalalignment')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 912, 16), tuple_141694, _verticalalignment_141704)
        # Adding element type (line 912)
        # Getting the type of 'self' (line 913)
        self_141705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 41), 'self')
        # Obtaining the member '_horizontalalignment' of a type (line 913)
        _horizontalalignment_141706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 913, 41), self_141705, '_horizontalalignment')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 912, 16), tuple_141694, _horizontalalignment_141706)
        # Adding element type (line 912)
        
        # Call to hash(...): (line 914)
        # Processing the call arguments (line 914)
        # Getting the type of 'self' (line 914)
        self_141708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 21), 'self', False)
        # Obtaining the member '_fontproperties' of a type (line 914)
        _fontproperties_141709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 914, 21), self_141708, '_fontproperties')
        # Processing the call keyword arguments (line 914)
        kwargs_141710 = {}
        # Getting the type of 'hash' (line 914)
        hash_141707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 16), 'hash', False)
        # Calling hash(args, kwargs) (line 914)
        hash_call_result_141711 = invoke(stypy.reporting.localization.Localization(__file__, 914, 16), hash_141707, *[_fontproperties_141709], **kwargs_141710)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 912, 16), tuple_141694, hash_call_result_141711)
        # Adding element type (line 912)
        # Getting the type of 'self' (line 915)
        self_141712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 16), 'self')
        # Obtaining the member '_rotation' of a type (line 915)
        _rotation_141713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 915, 16), self_141712, '_rotation')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 912, 16), tuple_141694, _rotation_141713)
        # Adding element type (line 912)
        # Getting the type of 'self' (line 915)
        self_141714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 32), 'self')
        # Obtaining the member '_rotation_mode' of a type (line 915)
        _rotation_mode_141715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 915, 32), self_141714, '_rotation_mode')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 912, 16), tuple_141694, _rotation_mode_141715)
        # Adding element type (line 912)
        # Getting the type of 'self' (line 916)
        self_141716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 16), 'self')
        # Obtaining the member 'figure' of a type (line 916)
        figure_141717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 916, 16), self_141716, 'figure')
        # Obtaining the member 'dpi' of a type (line 916)
        dpi_141718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 916, 16), figure_141717, 'dpi')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 912, 16), tuple_141694, dpi_141718)
        # Adding element type (line 912)
        
        # Call to ref(...): (line 916)
        # Processing the call arguments (line 916)
        # Getting the type of 'renderer' (line 916)
        renderer_141721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 45), 'renderer', False)
        # Processing the call keyword arguments (line 916)
        kwargs_141722 = {}
        # Getting the type of 'weakref' (line 916)
        weakref_141719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 33), 'weakref', False)
        # Obtaining the member 'ref' of a type (line 916)
        ref_141720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 916, 33), weakref_141719, 'ref')
        # Calling ref(args, kwargs) (line 916)
        ref_call_result_141723 = invoke(stypy.reporting.localization.Localization(__file__, 916, 33), ref_141720, *[renderer_141721], **kwargs_141722)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 912, 16), tuple_141694, ref_call_result_141723)
        # Adding element type (line 912)
        # Getting the type of 'self' (line 917)
        self_141724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 16), 'self')
        # Obtaining the member '_linespacing' of a type (line 917)
        _linespacing_141725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 917, 16), self_141724, '_linespacing')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 912, 16), tuple_141694, _linespacing_141725)
        
        # Assigning a type to the variable 'stypy_return_type' (line 912)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 912, 8), 'stypy_return_type', tuple_141694)
        
        # ################# End of 'get_prop_tup(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_prop_tup' in the type store
        # Getting the type of 'stypy_return_type' (line 902)
        stypy_return_type_141726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141726)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_prop_tup'
        return stypy_return_type_141726


    @norecursion
    def get_text(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_text'
        module_type_store = module_type_store.open_function_context('get_text', 920, 4, False)
        # Assigning a type to the variable 'self' (line 921)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 921, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.get_text.__dict__.__setitem__('stypy_localization', localization)
        Text.get_text.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.get_text.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.get_text.__dict__.__setitem__('stypy_function_name', 'Text.get_text')
        Text.get_text.__dict__.__setitem__('stypy_param_names_list', [])
        Text.get_text.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.get_text.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.get_text.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.get_text.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.get_text.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.get_text.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.get_text', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_text', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_text(...)' code ##################

        unicode_141727 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 921, 8), 'unicode', u'Get the text as string')
        # Getting the type of 'self' (line 922)
        self_141728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 15), 'self')
        # Obtaining the member '_text' of a type (line 922)
        _text_141729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 922, 15), self_141728, '_text')
        # Assigning a type to the variable 'stypy_return_type' (line 922)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 922, 8), 'stypy_return_type', _text_141729)
        
        # ################# End of 'get_text(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_text' in the type store
        # Getting the type of 'stypy_return_type' (line 920)
        stypy_return_type_141730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141730)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_text'
        return stypy_return_type_141730


    @norecursion
    def get_va(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_va'
        module_type_store = module_type_store.open_function_context('get_va', 924, 4, False)
        # Assigning a type to the variable 'self' (line 925)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 925, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.get_va.__dict__.__setitem__('stypy_localization', localization)
        Text.get_va.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.get_va.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.get_va.__dict__.__setitem__('stypy_function_name', 'Text.get_va')
        Text.get_va.__dict__.__setitem__('stypy_param_names_list', [])
        Text.get_va.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.get_va.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.get_va.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.get_va.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.get_va.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.get_va.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.get_va', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_va', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_va(...)' code ##################

        unicode_141731 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 925, 8), 'unicode', u'alias for :meth:`getverticalalignment`')
        
        # Call to get_verticalalignment(...): (line 926)
        # Processing the call keyword arguments (line 926)
        kwargs_141734 = {}
        # Getting the type of 'self' (line 926)
        self_141732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 926, 15), 'self', False)
        # Obtaining the member 'get_verticalalignment' of a type (line 926)
        get_verticalalignment_141733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 926, 15), self_141732, 'get_verticalalignment')
        # Calling get_verticalalignment(args, kwargs) (line 926)
        get_verticalalignment_call_result_141735 = invoke(stypy.reporting.localization.Localization(__file__, 926, 15), get_verticalalignment_141733, *[], **kwargs_141734)
        
        # Assigning a type to the variable 'stypy_return_type' (line 926)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 926, 8), 'stypy_return_type', get_verticalalignment_call_result_141735)
        
        # ################# End of 'get_va(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_va' in the type store
        # Getting the type of 'stypy_return_type' (line 924)
        stypy_return_type_141736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141736)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_va'
        return stypy_return_type_141736


    @norecursion
    def get_verticalalignment(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_verticalalignment'
        module_type_store = module_type_store.open_function_context('get_verticalalignment', 928, 4, False)
        # Assigning a type to the variable 'self' (line 929)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 929, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.get_verticalalignment.__dict__.__setitem__('stypy_localization', localization)
        Text.get_verticalalignment.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.get_verticalalignment.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.get_verticalalignment.__dict__.__setitem__('stypy_function_name', 'Text.get_verticalalignment')
        Text.get_verticalalignment.__dict__.__setitem__('stypy_param_names_list', [])
        Text.get_verticalalignment.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.get_verticalalignment.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.get_verticalalignment.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.get_verticalalignment.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.get_verticalalignment.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.get_verticalalignment.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.get_verticalalignment', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_verticalalignment', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_verticalalignment(...)' code ##################

        unicode_141737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 932, (-1)), 'unicode', u"\n        Return the vertical alignment as string.  Will be one of\n        'top', 'center', 'bottom' or 'baseline'.\n        ")
        # Getting the type of 'self' (line 933)
        self_141738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 15), 'self')
        # Obtaining the member '_verticalalignment' of a type (line 933)
        _verticalalignment_141739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 933, 15), self_141738, '_verticalalignment')
        # Assigning a type to the variable 'stypy_return_type' (line 933)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 933, 8), 'stypy_return_type', _verticalalignment_141739)
        
        # ################# End of 'get_verticalalignment(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_verticalalignment' in the type store
        # Getting the type of 'stypy_return_type' (line 928)
        stypy_return_type_141740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 928, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141740)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_verticalalignment'
        return stypy_return_type_141740


    @norecursion
    def get_window_extent(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 935)
        None_141741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 41), 'None')
        # Getting the type of 'None' (line 935)
        None_141742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 51), 'None')
        defaults = [None_141741, None_141742]
        # Create a new context for function 'get_window_extent'
        module_type_store = module_type_store.open_function_context('get_window_extent', 935, 4, False)
        # Assigning a type to the variable 'self' (line 936)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 936, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.get_window_extent.__dict__.__setitem__('stypy_localization', localization)
        Text.get_window_extent.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.get_window_extent.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.get_window_extent.__dict__.__setitem__('stypy_function_name', 'Text.get_window_extent')
        Text.get_window_extent.__dict__.__setitem__('stypy_param_names_list', ['renderer', 'dpi'])
        Text.get_window_extent.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.get_window_extent.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.get_window_extent.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.get_window_extent.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.get_window_extent.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.get_window_extent.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.get_window_extent', ['renderer', 'dpi'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_window_extent', localization, ['renderer', 'dpi'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_window_extent(...)' code ##################

        unicode_141743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 954, (-1)), 'unicode', u'\n        Return a :class:`~matplotlib.transforms.Bbox` object bounding\n        the text, in display units.\n\n        In addition to being used internally, this is useful for\n        specifying clickable regions in a png file on a web page.\n\n        *renderer* defaults to the _renderer attribute of the text\n        object.  This is not assigned until the first execution of\n        :meth:`draw`, so you must use this kwarg if you want\n        to call :meth:`get_window_extent` prior to the first\n        :meth:`draw`.  For getting web page regions, it is\n        simpler to call the method after saving the figure.\n\n        *dpi* defaults to self.figure.dpi; the renderer dpi is\n        irrelevant.  For the web application, if figure.dpi is not\n        the value used when saving the figure, then the value that\n        was used must be specified as the *dpi* argument.\n        ')
        
        
        
        # Call to get_visible(...): (line 956)
        # Processing the call keyword arguments (line 956)
        kwargs_141746 = {}
        # Getting the type of 'self' (line 956)
        self_141744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 15), 'self', False)
        # Obtaining the member 'get_visible' of a type (line 956)
        get_visible_141745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 956, 15), self_141744, 'get_visible')
        # Calling get_visible(args, kwargs) (line 956)
        get_visible_call_result_141747 = invoke(stypy.reporting.localization.Localization(__file__, 956, 15), get_visible_141745, *[], **kwargs_141746)
        
        # Applying the 'not' unary operator (line 956)
        result_not__141748 = python_operator(stypy.reporting.localization.Localization(__file__, 956, 11), 'not', get_visible_call_result_141747)
        
        # Testing the type of an if condition (line 956)
        if_condition_141749 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 956, 8), result_not__141748)
        # Assigning a type to the variable 'if_condition_141749' (line 956)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 956, 8), 'if_condition_141749', if_condition_141749)
        # SSA begins for if statement (line 956)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to unit(...): (line 957)
        # Processing the call keyword arguments (line 957)
        kwargs_141752 = {}
        # Getting the type of 'Bbox' (line 957)
        Bbox_141750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 19), 'Bbox', False)
        # Obtaining the member 'unit' of a type (line 957)
        unit_141751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 957, 19), Bbox_141750, 'unit')
        # Calling unit(args, kwargs) (line 957)
        unit_call_result_141753 = invoke(stypy.reporting.localization.Localization(__file__, 957, 19), unit_141751, *[], **kwargs_141752)
        
        # Assigning a type to the variable 'stypy_return_type' (line 957)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 957, 12), 'stypy_return_type', unit_call_result_141753)
        # SSA join for if statement (line 956)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 958)
        # Getting the type of 'dpi' (line 958)
        dpi_141754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 8), 'dpi')
        # Getting the type of 'None' (line 958)
        None_141755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 22), 'None')
        
        (may_be_141756, more_types_in_union_141757) = may_not_be_none(dpi_141754, None_141755)

        if may_be_141756:

            if more_types_in_union_141757:
                # Runtime conditional SSA (line 958)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 959):
            
            # Assigning a Attribute to a Name (line 959):
            
            # Assigning a Attribute to a Name (line 959):
            # Getting the type of 'self' (line 959)
            self_141758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 23), 'self')
            # Obtaining the member 'figure' of a type (line 959)
            figure_141759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 959, 23), self_141758, 'figure')
            # Obtaining the member 'dpi' of a type (line 959)
            dpi_141760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 959, 23), figure_141759, 'dpi')
            # Assigning a type to the variable 'dpi_orig' (line 959)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 959, 12), 'dpi_orig', dpi_141760)
            
            # Assigning a Name to a Attribute (line 960):
            
            # Assigning a Name to a Attribute (line 960):
            
            # Assigning a Name to a Attribute (line 960):
            # Getting the type of 'dpi' (line 960)
            dpi_141761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 30), 'dpi')
            # Getting the type of 'self' (line 960)
            self_141762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 12), 'self')
            # Obtaining the member 'figure' of a type (line 960)
            figure_141763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 960, 12), self_141762, 'figure')
            # Setting the type of the member 'dpi' of a type (line 960)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 960, 12), figure_141763, 'dpi', dpi_141761)

            if more_types_in_union_141757:
                # SSA join for if statement (line 958)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        
        # Call to get_text(...): (line 961)
        # Processing the call keyword arguments (line 961)
        kwargs_141766 = {}
        # Getting the type of 'self' (line 961)
        self_141764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 11), 'self', False)
        # Obtaining the member 'get_text' of a type (line 961)
        get_text_141765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 961, 11), self_141764, 'get_text')
        # Calling get_text(args, kwargs) (line 961)
        get_text_call_result_141767 = invoke(stypy.reporting.localization.Localization(__file__, 961, 11), get_text_141765, *[], **kwargs_141766)
        
        unicode_141768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 961, 30), 'unicode', u'')
        # Applying the binary operator '==' (line 961)
        result_eq_141769 = python_operator(stypy.reporting.localization.Localization(__file__, 961, 11), '==', get_text_call_result_141767, unicode_141768)
        
        # Testing the type of an if condition (line 961)
        if_condition_141770 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 961, 8), result_eq_141769)
        # Assigning a type to the variable 'if_condition_141770' (line 961)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 961, 8), 'if_condition_141770', if_condition_141770)
        # SSA begins for if statement (line 961)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 962):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to _get_xy_display(...): (line 962)
        # Processing the call keyword arguments (line 962)
        kwargs_141773 = {}
        # Getting the type of 'self' (line 962)
        self_141771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 21), 'self', False)
        # Obtaining the member '_get_xy_display' of a type (line 962)
        _get_xy_display_141772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 962, 21), self_141771, '_get_xy_display')
        # Calling _get_xy_display(args, kwargs) (line 962)
        _get_xy_display_call_result_141774 = invoke(stypy.reporting.localization.Localization(__file__, 962, 21), _get_xy_display_141772, *[], **kwargs_141773)
        
        # Assigning a type to the variable 'call_assignment_139102' (line 962)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 12), 'call_assignment_139102', _get_xy_display_call_result_141774)
        
        # Assigning a Call to a Name (line 962):
        
        # Assigning a Call to a Name (line 962):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_141777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 962, 12), 'int')
        # Processing the call keyword arguments
        kwargs_141778 = {}
        # Getting the type of 'call_assignment_139102' (line 962)
        call_assignment_139102_141775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 12), 'call_assignment_139102', False)
        # Obtaining the member '__getitem__' of a type (line 962)
        getitem___141776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 962, 12), call_assignment_139102_141775, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_141779 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___141776, *[int_141777], **kwargs_141778)
        
        # Assigning a type to the variable 'call_assignment_139103' (line 962)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 12), 'call_assignment_139103', getitem___call_result_141779)
        
        # Assigning a Name to a Name (line 962):
        
        # Assigning a Name to a Name (line 962):
        # Getting the type of 'call_assignment_139103' (line 962)
        call_assignment_139103_141780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 12), 'call_assignment_139103')
        # Assigning a type to the variable 'tx' (line 962)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 12), 'tx', call_assignment_139103_141780)
        
        # Assigning a Call to a Name (line 962):
        
        # Assigning a Call to a Name (line 962):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_141783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 962, 12), 'int')
        # Processing the call keyword arguments
        kwargs_141784 = {}
        # Getting the type of 'call_assignment_139102' (line 962)
        call_assignment_139102_141781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 12), 'call_assignment_139102', False)
        # Obtaining the member '__getitem__' of a type (line 962)
        getitem___141782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 962, 12), call_assignment_139102_141781, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_141785 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___141782, *[int_141783], **kwargs_141784)
        
        # Assigning a type to the variable 'call_assignment_139104' (line 962)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 12), 'call_assignment_139104', getitem___call_result_141785)
        
        # Assigning a Name to a Name (line 962):
        
        # Assigning a Name to a Name (line 962):
        # Getting the type of 'call_assignment_139104' (line 962)
        call_assignment_139104_141786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 12), 'call_assignment_139104')
        # Assigning a type to the variable 'ty' (line 962)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 16), 'ty', call_assignment_139104_141786)
        
        # Call to from_bounds(...): (line 963)
        # Processing the call arguments (line 963)
        # Getting the type of 'tx' (line 963)
        tx_141789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 36), 'tx', False)
        # Getting the type of 'ty' (line 963)
        ty_141790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 40), 'ty', False)
        int_141791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 963, 44), 'int')
        int_141792 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 963, 47), 'int')
        # Processing the call keyword arguments (line 963)
        kwargs_141793 = {}
        # Getting the type of 'Bbox' (line 963)
        Bbox_141787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 19), 'Bbox', False)
        # Obtaining the member 'from_bounds' of a type (line 963)
        from_bounds_141788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 963, 19), Bbox_141787, 'from_bounds')
        # Calling from_bounds(args, kwargs) (line 963)
        from_bounds_call_result_141794 = invoke(stypy.reporting.localization.Localization(__file__, 963, 19), from_bounds_141788, *[tx_141789, ty_141790, int_141791, int_141792], **kwargs_141793)
        
        # Assigning a type to the variable 'stypy_return_type' (line 963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 963, 12), 'stypy_return_type', from_bounds_call_result_141794)
        # SSA join for if statement (line 961)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 965)
        # Getting the type of 'renderer' (line 965)
        renderer_141795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 8), 'renderer')
        # Getting the type of 'None' (line 965)
        None_141796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 27), 'None')
        
        (may_be_141797, more_types_in_union_141798) = may_not_be_none(renderer_141795, None_141796)

        if may_be_141797:

            if more_types_in_union_141798:
                # Runtime conditional SSA (line 965)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 966):
            
            # Assigning a Name to a Attribute (line 966):
            
            # Assigning a Name to a Attribute (line 966):
            # Getting the type of 'renderer' (line 966)
            renderer_141799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 29), 'renderer')
            # Getting the type of 'self' (line 966)
            self_141800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 12), 'self')
            # Setting the type of the member '_renderer' of a type (line 966)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 966, 12), self_141800, '_renderer', renderer_141799)

            if more_types_in_union_141798:
                # SSA join for if statement (line 965)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 967)
        # Getting the type of 'self' (line 967)
        self_141801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 11), 'self')
        # Obtaining the member '_renderer' of a type (line 967)
        _renderer_141802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 967, 11), self_141801, '_renderer')
        # Getting the type of 'None' (line 967)
        None_141803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 29), 'None')
        
        (may_be_141804, more_types_in_union_141805) = may_be_none(_renderer_141802, None_141803)

        if may_be_141804:

            if more_types_in_union_141805:
                # Runtime conditional SSA (line 967)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to RuntimeError(...): (line 968)
            # Processing the call arguments (line 968)
            unicode_141807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 968, 31), 'unicode', u'Cannot get window extent w/o renderer')
            # Processing the call keyword arguments (line 968)
            kwargs_141808 = {}
            # Getting the type of 'RuntimeError' (line 968)
            RuntimeError_141806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 18), 'RuntimeError', False)
            # Calling RuntimeError(args, kwargs) (line 968)
            RuntimeError_call_result_141809 = invoke(stypy.reporting.localization.Localization(__file__, 968, 18), RuntimeError_141806, *[unicode_141807], **kwargs_141808)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 968, 12), RuntimeError_call_result_141809, 'raise parameter', BaseException)

            if more_types_in_union_141805:
                # SSA join for if statement (line 967)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Tuple (line 970):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to _get_layout(...): (line 970)
        # Processing the call arguments (line 970)
        # Getting the type of 'self' (line 970)
        self_141812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 47), 'self', False)
        # Obtaining the member '_renderer' of a type (line 970)
        _renderer_141813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 970, 47), self_141812, '_renderer')
        # Processing the call keyword arguments (line 970)
        kwargs_141814 = {}
        # Getting the type of 'self' (line 970)
        self_141810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 30), 'self', False)
        # Obtaining the member '_get_layout' of a type (line 970)
        _get_layout_141811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 970, 30), self_141810, '_get_layout')
        # Calling _get_layout(args, kwargs) (line 970)
        _get_layout_call_result_141815 = invoke(stypy.reporting.localization.Localization(__file__, 970, 30), _get_layout_141811, *[_renderer_141813], **kwargs_141814)
        
        # Assigning a type to the variable 'call_assignment_139105' (line 970)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 970, 8), 'call_assignment_139105', _get_layout_call_result_141815)
        
        # Assigning a Call to a Name (line 970):
        
        # Assigning a Call to a Name (line 970):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_141818 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 970, 8), 'int')
        # Processing the call keyword arguments
        kwargs_141819 = {}
        # Getting the type of 'call_assignment_139105' (line 970)
        call_assignment_139105_141816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 8), 'call_assignment_139105', False)
        # Obtaining the member '__getitem__' of a type (line 970)
        getitem___141817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 970, 8), call_assignment_139105_141816, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_141820 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___141817, *[int_141818], **kwargs_141819)
        
        # Assigning a type to the variable 'call_assignment_139106' (line 970)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 970, 8), 'call_assignment_139106', getitem___call_result_141820)
        
        # Assigning a Name to a Name (line 970):
        
        # Assigning a Name to a Name (line 970):
        # Getting the type of 'call_assignment_139106' (line 970)
        call_assignment_139106_141821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 8), 'call_assignment_139106')
        # Assigning a type to the variable 'bbox' (line 970)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 970, 8), 'bbox', call_assignment_139106_141821)
        
        # Assigning a Call to a Name (line 970):
        
        # Assigning a Call to a Name (line 970):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_141824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 970, 8), 'int')
        # Processing the call keyword arguments
        kwargs_141825 = {}
        # Getting the type of 'call_assignment_139105' (line 970)
        call_assignment_139105_141822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 8), 'call_assignment_139105', False)
        # Obtaining the member '__getitem__' of a type (line 970)
        getitem___141823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 970, 8), call_assignment_139105_141822, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_141826 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___141823, *[int_141824], **kwargs_141825)
        
        # Assigning a type to the variable 'call_assignment_139107' (line 970)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 970, 8), 'call_assignment_139107', getitem___call_result_141826)
        
        # Assigning a Name to a Name (line 970):
        
        # Assigning a Name to a Name (line 970):
        # Getting the type of 'call_assignment_139107' (line 970)
        call_assignment_139107_141827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 8), 'call_assignment_139107')
        # Assigning a type to the variable 'info' (line 970)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 970, 14), 'info', call_assignment_139107_141827)
        
        # Assigning a Call to a Name (line 970):
        
        # Assigning a Call to a Name (line 970):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_141830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 970, 8), 'int')
        # Processing the call keyword arguments
        kwargs_141831 = {}
        # Getting the type of 'call_assignment_139105' (line 970)
        call_assignment_139105_141828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 8), 'call_assignment_139105', False)
        # Obtaining the member '__getitem__' of a type (line 970)
        getitem___141829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 970, 8), call_assignment_139105_141828, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_141832 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___141829, *[int_141830], **kwargs_141831)
        
        # Assigning a type to the variable 'call_assignment_139108' (line 970)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 970, 8), 'call_assignment_139108', getitem___call_result_141832)
        
        # Assigning a Name to a Name (line 970):
        
        # Assigning a Name to a Name (line 970):
        # Getting the type of 'call_assignment_139108' (line 970)
        call_assignment_139108_141833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 8), 'call_assignment_139108')
        # Assigning a type to the variable 'descent' (line 970)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 970, 20), 'descent', call_assignment_139108_141833)
        
        # Assigning a Call to a Tuple (line 971):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to get_unitless_position(...): (line 971)
        # Processing the call keyword arguments (line 971)
        kwargs_141836 = {}
        # Getting the type of 'self' (line 971)
        self_141834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 15), 'self', False)
        # Obtaining the member 'get_unitless_position' of a type (line 971)
        get_unitless_position_141835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 971, 15), self_141834, 'get_unitless_position')
        # Calling get_unitless_position(args, kwargs) (line 971)
        get_unitless_position_call_result_141837 = invoke(stypy.reporting.localization.Localization(__file__, 971, 15), get_unitless_position_141835, *[], **kwargs_141836)
        
        # Assigning a type to the variable 'call_assignment_139109' (line 971)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 971, 8), 'call_assignment_139109', get_unitless_position_call_result_141837)
        
        # Assigning a Call to a Name (line 971):
        
        # Assigning a Call to a Name (line 971):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_141840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 971, 8), 'int')
        # Processing the call keyword arguments
        kwargs_141841 = {}
        # Getting the type of 'call_assignment_139109' (line 971)
        call_assignment_139109_141838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 8), 'call_assignment_139109', False)
        # Obtaining the member '__getitem__' of a type (line 971)
        getitem___141839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 971, 8), call_assignment_139109_141838, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_141842 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___141839, *[int_141840], **kwargs_141841)
        
        # Assigning a type to the variable 'call_assignment_139110' (line 971)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 971, 8), 'call_assignment_139110', getitem___call_result_141842)
        
        # Assigning a Name to a Name (line 971):
        
        # Assigning a Name to a Name (line 971):
        # Getting the type of 'call_assignment_139110' (line 971)
        call_assignment_139110_141843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 8), 'call_assignment_139110')
        # Assigning a type to the variable 'x' (line 971)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 971, 8), 'x', call_assignment_139110_141843)
        
        # Assigning a Call to a Name (line 971):
        
        # Assigning a Call to a Name (line 971):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_141846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 971, 8), 'int')
        # Processing the call keyword arguments
        kwargs_141847 = {}
        # Getting the type of 'call_assignment_139109' (line 971)
        call_assignment_139109_141844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 8), 'call_assignment_139109', False)
        # Obtaining the member '__getitem__' of a type (line 971)
        getitem___141845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 971, 8), call_assignment_139109_141844, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_141848 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___141845, *[int_141846], **kwargs_141847)
        
        # Assigning a type to the variable 'call_assignment_139111' (line 971)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 971, 8), 'call_assignment_139111', getitem___call_result_141848)
        
        # Assigning a Name to a Name (line 971):
        
        # Assigning a Name to a Name (line 971):
        # Getting the type of 'call_assignment_139111' (line 971)
        call_assignment_139111_141849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 8), 'call_assignment_139111')
        # Assigning a type to the variable 'y' (line 971)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 971, 11), 'y', call_assignment_139111_141849)
        
        # Assigning a Call to a Tuple (line 972):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to transform_point(...): (line 972)
        # Processing the call arguments (line 972)
        
        # Obtaining an instance of the builtin type 'tuple' (line 972)
        tuple_141855 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 972, 53), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 972)
        # Adding element type (line 972)
        # Getting the type of 'x' (line 972)
        x_141856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 53), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 972, 53), tuple_141855, x_141856)
        # Adding element type (line 972)
        # Getting the type of 'y' (line 972)
        y_141857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 56), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 972, 53), tuple_141855, y_141857)
        
        # Processing the call keyword arguments (line 972)
        kwargs_141858 = {}
        
        # Call to get_transform(...): (line 972)
        # Processing the call keyword arguments (line 972)
        kwargs_141852 = {}
        # Getting the type of 'self' (line 972)
        self_141850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 15), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 972)
        get_transform_141851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 972, 15), self_141850, 'get_transform')
        # Calling get_transform(args, kwargs) (line 972)
        get_transform_call_result_141853 = invoke(stypy.reporting.localization.Localization(__file__, 972, 15), get_transform_141851, *[], **kwargs_141852)
        
        # Obtaining the member 'transform_point' of a type (line 972)
        transform_point_141854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 972, 15), get_transform_call_result_141853, 'transform_point')
        # Calling transform_point(args, kwargs) (line 972)
        transform_point_call_result_141859 = invoke(stypy.reporting.localization.Localization(__file__, 972, 15), transform_point_141854, *[tuple_141855], **kwargs_141858)
        
        # Assigning a type to the variable 'call_assignment_139112' (line 972)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 972, 8), 'call_assignment_139112', transform_point_call_result_141859)
        
        # Assigning a Call to a Name (line 972):
        
        # Assigning a Call to a Name (line 972):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_141862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 972, 8), 'int')
        # Processing the call keyword arguments
        kwargs_141863 = {}
        # Getting the type of 'call_assignment_139112' (line 972)
        call_assignment_139112_141860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 8), 'call_assignment_139112', False)
        # Obtaining the member '__getitem__' of a type (line 972)
        getitem___141861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 972, 8), call_assignment_139112_141860, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_141864 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___141861, *[int_141862], **kwargs_141863)
        
        # Assigning a type to the variable 'call_assignment_139113' (line 972)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 972, 8), 'call_assignment_139113', getitem___call_result_141864)
        
        # Assigning a Name to a Name (line 972):
        
        # Assigning a Name to a Name (line 972):
        # Getting the type of 'call_assignment_139113' (line 972)
        call_assignment_139113_141865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 8), 'call_assignment_139113')
        # Assigning a type to the variable 'x' (line 972)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 972, 8), 'x', call_assignment_139113_141865)
        
        # Assigning a Call to a Name (line 972):
        
        # Assigning a Call to a Name (line 972):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_141868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 972, 8), 'int')
        # Processing the call keyword arguments
        kwargs_141869 = {}
        # Getting the type of 'call_assignment_139112' (line 972)
        call_assignment_139112_141866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 8), 'call_assignment_139112', False)
        # Obtaining the member '__getitem__' of a type (line 972)
        getitem___141867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 972, 8), call_assignment_139112_141866, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_141870 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___141867, *[int_141868], **kwargs_141869)
        
        # Assigning a type to the variable 'call_assignment_139114' (line 972)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 972, 8), 'call_assignment_139114', getitem___call_result_141870)
        
        # Assigning a Name to a Name (line 972):
        
        # Assigning a Name to a Name (line 972):
        # Getting the type of 'call_assignment_139114' (line 972)
        call_assignment_139114_141871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 8), 'call_assignment_139114')
        # Assigning a type to the variable 'y' (line 972)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 972, 11), 'y', call_assignment_139114_141871)
        
        # Assigning a Call to a Name (line 973):
        
        # Assigning a Call to a Name (line 973):
        
        # Assigning a Call to a Name (line 973):
        
        # Call to translated(...): (line 973)
        # Processing the call arguments (line 973)
        # Getting the type of 'x' (line 973)
        x_141874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 31), 'x', False)
        # Getting the type of 'y' (line 973)
        y_141875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 34), 'y', False)
        # Processing the call keyword arguments (line 973)
        kwargs_141876 = {}
        # Getting the type of 'bbox' (line 973)
        bbox_141872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 15), 'bbox', False)
        # Obtaining the member 'translated' of a type (line 973)
        translated_141873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 973, 15), bbox_141872, 'translated')
        # Calling translated(args, kwargs) (line 973)
        translated_call_result_141877 = invoke(stypy.reporting.localization.Localization(__file__, 973, 15), translated_141873, *[x_141874, y_141875], **kwargs_141876)
        
        # Assigning a type to the variable 'bbox' (line 973)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 973, 8), 'bbox', translated_call_result_141877)
        
        # Type idiom detected: calculating its left and rigth part (line 974)
        # Getting the type of 'dpi' (line 974)
        dpi_141878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 8), 'dpi')
        # Getting the type of 'None' (line 974)
        None_141879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 22), 'None')
        
        (may_be_141880, more_types_in_union_141881) = may_not_be_none(dpi_141878, None_141879)

        if may_be_141880:

            if more_types_in_union_141881:
                # Runtime conditional SSA (line 974)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 975):
            
            # Assigning a Name to a Attribute (line 975):
            
            # Assigning a Name to a Attribute (line 975):
            # Getting the type of 'dpi_orig' (line 975)
            dpi_orig_141882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 30), 'dpi_orig')
            # Getting the type of 'self' (line 975)
            self_141883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 12), 'self')
            # Obtaining the member 'figure' of a type (line 975)
            figure_141884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 975, 12), self_141883, 'figure')
            # Setting the type of the member 'dpi' of a type (line 975)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 975, 12), figure_141884, 'dpi', dpi_orig_141882)

            if more_types_in_union_141881:
                # SSA join for if statement (line 974)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'bbox' (line 976)
        bbox_141885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 15), 'bbox')
        # Assigning a type to the variable 'stypy_return_type' (line 976)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 976, 8), 'stypy_return_type', bbox_141885)
        
        # ################# End of 'get_window_extent(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_window_extent' in the type store
        # Getting the type of 'stypy_return_type' (line 935)
        stypy_return_type_141886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141886)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_window_extent'
        return stypy_return_type_141886


    @norecursion
    def set_backgroundcolor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_backgroundcolor'
        module_type_store = module_type_store.open_function_context('set_backgroundcolor', 978, 4, False)
        # Assigning a type to the variable 'self' (line 979)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 979, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_backgroundcolor.__dict__.__setitem__('stypy_localization', localization)
        Text.set_backgroundcolor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_backgroundcolor.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_backgroundcolor.__dict__.__setitem__('stypy_function_name', 'Text.set_backgroundcolor')
        Text.set_backgroundcolor.__dict__.__setitem__('stypy_param_names_list', ['color'])
        Text.set_backgroundcolor.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_backgroundcolor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_backgroundcolor.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_backgroundcolor.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_backgroundcolor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_backgroundcolor.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_backgroundcolor', ['color'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_backgroundcolor', localization, ['color'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_backgroundcolor(...)' code ##################

        unicode_141887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 988, (-1)), 'unicode', u'\n        Set the background color of the text by updating the bbox.\n\n        .. seealso::\n\n            :meth:`set_bbox`\n               To change the position of the bounding box.\n\n        ACCEPTS: any matplotlib color\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 989)
        # Getting the type of 'self' (line 989)
        self_141888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 11), 'self')
        # Obtaining the member '_bbox_patch' of a type (line 989)
        _bbox_patch_141889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 989, 11), self_141888, '_bbox_patch')
        # Getting the type of 'None' (line 989)
        None_141890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 31), 'None')
        
        (may_be_141891, more_types_in_union_141892) = may_be_none(_bbox_patch_141889, None_141890)

        if may_be_141891:

            if more_types_in_union_141892:
                # Runtime conditional SSA (line 989)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to set_bbox(...): (line 990)
            # Processing the call arguments (line 990)
            
            # Call to dict(...): (line 990)
            # Processing the call keyword arguments (line 990)
            # Getting the type of 'color' (line 990)
            color_141896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 41), 'color', False)
            keyword_141897 = color_141896
            # Getting the type of 'color' (line 990)
            color_141898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 58), 'color', False)
            keyword_141899 = color_141898
            kwargs_141900 = {'edgecolor': keyword_141899, 'facecolor': keyword_141897}
            # Getting the type of 'dict' (line 990)
            dict_141895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 26), 'dict', False)
            # Calling dict(args, kwargs) (line 990)
            dict_call_result_141901 = invoke(stypy.reporting.localization.Localization(__file__, 990, 26), dict_141895, *[], **kwargs_141900)
            
            # Processing the call keyword arguments (line 990)
            kwargs_141902 = {}
            # Getting the type of 'self' (line 990)
            self_141893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 12), 'self', False)
            # Obtaining the member 'set_bbox' of a type (line 990)
            set_bbox_141894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 990, 12), self_141893, 'set_bbox')
            # Calling set_bbox(args, kwargs) (line 990)
            set_bbox_call_result_141903 = invoke(stypy.reporting.localization.Localization(__file__, 990, 12), set_bbox_141894, *[dict_call_result_141901], **kwargs_141902)
            

            if more_types_in_union_141892:
                # Runtime conditional SSA for else branch (line 989)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_141891) or more_types_in_union_141892):
            
            # Call to update(...): (line 992)
            # Processing the call arguments (line 992)
            
            # Call to dict(...): (line 992)
            # Processing the call keyword arguments (line 992)
            # Getting the type of 'color' (line 992)
            color_141908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 51), 'color', False)
            keyword_141909 = color_141908
            kwargs_141910 = {'facecolor': keyword_141909}
            # Getting the type of 'dict' (line 992)
            dict_141907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 36), 'dict', False)
            # Calling dict(args, kwargs) (line 992)
            dict_call_result_141911 = invoke(stypy.reporting.localization.Localization(__file__, 992, 36), dict_141907, *[], **kwargs_141910)
            
            # Processing the call keyword arguments (line 992)
            kwargs_141912 = {}
            # Getting the type of 'self' (line 992)
            self_141904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 12), 'self', False)
            # Obtaining the member '_bbox_patch' of a type (line 992)
            _bbox_patch_141905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 992, 12), self_141904, '_bbox_patch')
            # Obtaining the member 'update' of a type (line 992)
            update_141906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 992, 12), _bbox_patch_141905, 'update')
            # Calling update(args, kwargs) (line 992)
            update_call_result_141913 = invoke(stypy.reporting.localization.Localization(__file__, 992, 12), update_141906, *[dict_call_result_141911], **kwargs_141912)
            

            if (may_be_141891 and more_types_in_union_141892):
                # SSA join for if statement (line 989)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to _update_clip_properties(...): (line 994)
        # Processing the call keyword arguments (line 994)
        kwargs_141916 = {}
        # Getting the type of 'self' (line 994)
        self_141914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 8), 'self', False)
        # Obtaining the member '_update_clip_properties' of a type (line 994)
        _update_clip_properties_141915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 8), self_141914, '_update_clip_properties')
        # Calling _update_clip_properties(args, kwargs) (line 994)
        _update_clip_properties_call_result_141917 = invoke(stypy.reporting.localization.Localization(__file__, 994, 8), _update_clip_properties_141915, *[], **kwargs_141916)
        
        
        # Assigning a Name to a Attribute (line 995):
        
        # Assigning a Name to a Attribute (line 995):
        
        # Assigning a Name to a Attribute (line 995):
        # Getting the type of 'True' (line 995)
        True_141918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 21), 'True')
        # Getting the type of 'self' (line 995)
        self_141919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 995)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 995, 8), self_141919, 'stale', True_141918)
        
        # ################# End of 'set_backgroundcolor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_backgroundcolor' in the type store
        # Getting the type of 'stypy_return_type' (line 978)
        stypy_return_type_141920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141920)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_backgroundcolor'
        return stypy_return_type_141920


    @norecursion
    def set_color(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_color'
        module_type_store = module_type_store.open_function_context('set_color', 997, 4, False)
        # Assigning a type to the variable 'self' (line 998)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 998, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_color.__dict__.__setitem__('stypy_localization', localization)
        Text.set_color.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_color.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_color.__dict__.__setitem__('stypy_function_name', 'Text.set_color')
        Text.set_color.__dict__.__setitem__('stypy_param_names_list', ['color'])
        Text.set_color.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_color.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_color.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_color.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_color.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_color.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_color', ['color'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_color', localization, ['color'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_color(...)' code ##################

        unicode_141921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1002, (-1)), 'unicode', u'\n        Set the foreground color of the text\n\n        ACCEPTS: any matplotlib color\n        ')
        
        
        # SSA begins for try-except statement (line 1004)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to hash(...): (line 1005)
        # Processing the call arguments (line 1005)
        # Getting the type of 'color' (line 1005)
        color_141923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 17), 'color', False)
        # Processing the call keyword arguments (line 1005)
        kwargs_141924 = {}
        # Getting the type of 'hash' (line 1005)
        hash_141922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 12), 'hash', False)
        # Calling hash(args, kwargs) (line 1005)
        hash_call_result_141925 = invoke(stypy.reporting.localization.Localization(__file__, 1005, 12), hash_141922, *[color_141923], **kwargs_141924)
        
        # SSA branch for the except part of a try statement (line 1004)
        # SSA branch for the except 'TypeError' branch of a try statement (line 1004)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Call to a Name (line 1007):
        
        # Assigning a Call to a Name (line 1007):
        
        # Assigning a Call to a Name (line 1007):
        
        # Call to tuple(...): (line 1007)
        # Processing the call arguments (line 1007)
        # Getting the type of 'color' (line 1007)
        color_141927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1007, 26), 'color', False)
        # Processing the call keyword arguments (line 1007)
        kwargs_141928 = {}
        # Getting the type of 'tuple' (line 1007)
        tuple_141926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1007, 20), 'tuple', False)
        # Calling tuple(args, kwargs) (line 1007)
        tuple_call_result_141929 = invoke(stypy.reporting.localization.Localization(__file__, 1007, 20), tuple_141926, *[color_141927], **kwargs_141928)
        
        # Assigning a type to the variable 'color' (line 1007)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1007, 12), 'color', tuple_call_result_141929)
        # SSA join for try-except statement (line 1004)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1008):
        
        # Assigning a Name to a Attribute (line 1008):
        
        # Assigning a Name to a Attribute (line 1008):
        # Getting the type of 'color' (line 1008)
        color_141930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 22), 'color')
        # Getting the type of 'self' (line 1008)
        self_141931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 8), 'self')
        # Setting the type of the member '_color' of a type (line 1008)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1008, 8), self_141931, '_color', color_141930)
        
        # Assigning a Name to a Attribute (line 1009):
        
        # Assigning a Name to a Attribute (line 1009):
        
        # Assigning a Name to a Attribute (line 1009):
        # Getting the type of 'True' (line 1009)
        True_141932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 21), 'True')
        # Getting the type of 'self' (line 1009)
        self_141933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1009)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1009, 8), self_141933, 'stale', True_141932)
        
        # ################# End of 'set_color(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_color' in the type store
        # Getting the type of 'stypy_return_type' (line 997)
        stypy_return_type_141934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141934)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_color'
        return stypy_return_type_141934


    @norecursion
    def set_ha(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_ha'
        module_type_store = module_type_store.open_function_context('set_ha', 1011, 4, False)
        # Assigning a type to the variable 'self' (line 1012)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1012, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_ha.__dict__.__setitem__('stypy_localization', localization)
        Text.set_ha.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_ha.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_ha.__dict__.__setitem__('stypy_function_name', 'Text.set_ha')
        Text.set_ha.__dict__.__setitem__('stypy_param_names_list', ['align'])
        Text.set_ha.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_ha.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_ha.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_ha.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_ha.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_ha.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_ha', ['align'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_ha', localization, ['align'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_ha(...)' code ##################

        unicode_141935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1012, 8), 'unicode', u'alias for set_horizontalalignment')
        
        # Call to set_horizontalalignment(...): (line 1013)
        # Processing the call arguments (line 1013)
        # Getting the type of 'align' (line 1013)
        align_141938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 37), 'align', False)
        # Processing the call keyword arguments (line 1013)
        kwargs_141939 = {}
        # Getting the type of 'self' (line 1013)
        self_141936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 8), 'self', False)
        # Obtaining the member 'set_horizontalalignment' of a type (line 1013)
        set_horizontalalignment_141937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1013, 8), self_141936, 'set_horizontalalignment')
        # Calling set_horizontalalignment(args, kwargs) (line 1013)
        set_horizontalalignment_call_result_141940 = invoke(stypy.reporting.localization.Localization(__file__, 1013, 8), set_horizontalalignment_141937, *[align_141938], **kwargs_141939)
        
        
        # ################# End of 'set_ha(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_ha' in the type store
        # Getting the type of 'stypy_return_type' (line 1011)
        stypy_return_type_141941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1011, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141941)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_ha'
        return stypy_return_type_141941


    @norecursion
    def set_horizontalalignment(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_horizontalalignment'
        module_type_store = module_type_store.open_function_context('set_horizontalalignment', 1015, 4, False)
        # Assigning a type to the variable 'self' (line 1016)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1016, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_horizontalalignment.__dict__.__setitem__('stypy_localization', localization)
        Text.set_horizontalalignment.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_horizontalalignment.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_horizontalalignment.__dict__.__setitem__('stypy_function_name', 'Text.set_horizontalalignment')
        Text.set_horizontalalignment.__dict__.__setitem__('stypy_param_names_list', ['align'])
        Text.set_horizontalalignment.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_horizontalalignment.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_horizontalalignment.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_horizontalalignment.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_horizontalalignment.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_horizontalalignment.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_horizontalalignment', ['align'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_horizontalalignment', localization, ['align'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_horizontalalignment(...)' code ##################

        unicode_141942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1020, (-1)), 'unicode', u"\n        Set the horizontal alignment to one of\n\n        ACCEPTS: [ 'center' | 'right' | 'left' ]\n        ")
        
        # Assigning a Tuple to a Name (line 1021):
        
        # Assigning a Tuple to a Name (line 1021):
        
        # Assigning a Tuple to a Name (line 1021):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1021)
        tuple_141943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1021, 17), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1021)
        # Adding element type (line 1021)
        unicode_141944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1021, 17), 'unicode', u'center')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1021, 17), tuple_141943, unicode_141944)
        # Adding element type (line 1021)
        unicode_141945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1021, 27), 'unicode', u'right')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1021, 17), tuple_141943, unicode_141945)
        # Adding element type (line 1021)
        unicode_141946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1021, 36), 'unicode', u'left')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1021, 17), tuple_141943, unicode_141946)
        
        # Assigning a type to the variable 'legal' (line 1021)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1021, 8), 'legal', tuple_141943)
        
        
        # Getting the type of 'align' (line 1022)
        align_141947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 11), 'align')
        # Getting the type of 'legal' (line 1022)
        legal_141948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 24), 'legal')
        # Applying the binary operator 'notin' (line 1022)
        result_contains_141949 = python_operator(stypy.reporting.localization.Localization(__file__, 1022, 11), 'notin', align_141947, legal_141948)
        
        # Testing the type of an if condition (line 1022)
        if_condition_141950 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1022, 8), result_contains_141949)
        # Assigning a type to the variable 'if_condition_141950' (line 1022)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1022, 8), 'if_condition_141950', if_condition_141950)
        # SSA begins for if statement (line 1022)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1023)
        # Processing the call arguments (line 1023)
        unicode_141952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1023, 29), 'unicode', u'Horizontal alignment must be one of %s')
        
        # Call to str(...): (line 1024)
        # Processing the call arguments (line 1024)
        # Getting the type of 'legal' (line 1024)
        legal_141954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1024, 33), 'legal', False)
        # Processing the call keyword arguments (line 1024)
        kwargs_141955 = {}
        # Getting the type of 'str' (line 1024)
        str_141953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1024, 29), 'str', False)
        # Calling str(args, kwargs) (line 1024)
        str_call_result_141956 = invoke(stypy.reporting.localization.Localization(__file__, 1024, 29), str_141953, *[legal_141954], **kwargs_141955)
        
        # Applying the binary operator '%' (line 1023)
        result_mod_141957 = python_operator(stypy.reporting.localization.Localization(__file__, 1023, 29), '%', unicode_141952, str_call_result_141956)
        
        # Processing the call keyword arguments (line 1023)
        kwargs_141958 = {}
        # Getting the type of 'ValueError' (line 1023)
        ValueError_141951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1023)
        ValueError_call_result_141959 = invoke(stypy.reporting.localization.Localization(__file__, 1023, 18), ValueError_141951, *[result_mod_141957], **kwargs_141958)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1023, 12), ValueError_call_result_141959, 'raise parameter', BaseException)
        # SSA join for if statement (line 1022)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1025):
        
        # Assigning a Name to a Attribute (line 1025):
        
        # Assigning a Name to a Attribute (line 1025):
        # Getting the type of 'align' (line 1025)
        align_141960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1025, 36), 'align')
        # Getting the type of 'self' (line 1025)
        self_141961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1025, 8), 'self')
        # Setting the type of the member '_horizontalalignment' of a type (line 1025)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1025, 8), self_141961, '_horizontalalignment', align_141960)
        
        # Assigning a Name to a Attribute (line 1026):
        
        # Assigning a Name to a Attribute (line 1026):
        
        # Assigning a Name to a Attribute (line 1026):
        # Getting the type of 'True' (line 1026)
        True_141962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 21), 'True')
        # Getting the type of 'self' (line 1026)
        self_141963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1026)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1026, 8), self_141963, 'stale', True_141962)
        
        # ################# End of 'set_horizontalalignment(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_horizontalalignment' in the type store
        # Getting the type of 'stypy_return_type' (line 1015)
        stypy_return_type_141964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141964)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_horizontalalignment'
        return stypy_return_type_141964


    @norecursion
    def set_ma(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_ma'
        module_type_store = module_type_store.open_function_context('set_ma', 1028, 4, False)
        # Assigning a type to the variable 'self' (line 1029)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1029, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_ma.__dict__.__setitem__('stypy_localization', localization)
        Text.set_ma.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_ma.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_ma.__dict__.__setitem__('stypy_function_name', 'Text.set_ma')
        Text.set_ma.__dict__.__setitem__('stypy_param_names_list', ['align'])
        Text.set_ma.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_ma.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_ma.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_ma.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_ma.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_ma.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_ma', ['align'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_ma', localization, ['align'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_ma(...)' code ##################

        unicode_141965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1029, 8), 'unicode', u'alias for set_verticalalignment')
        
        # Call to set_multialignment(...): (line 1030)
        # Processing the call arguments (line 1030)
        # Getting the type of 'align' (line 1030)
        align_141968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1030, 32), 'align', False)
        # Processing the call keyword arguments (line 1030)
        kwargs_141969 = {}
        # Getting the type of 'self' (line 1030)
        self_141966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1030, 8), 'self', False)
        # Obtaining the member 'set_multialignment' of a type (line 1030)
        set_multialignment_141967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1030, 8), self_141966, 'set_multialignment')
        # Calling set_multialignment(args, kwargs) (line 1030)
        set_multialignment_call_result_141970 = invoke(stypy.reporting.localization.Localization(__file__, 1030, 8), set_multialignment_141967, *[align_141968], **kwargs_141969)
        
        
        # ################# End of 'set_ma(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_ma' in the type store
        # Getting the type of 'stypy_return_type' (line 1028)
        stypy_return_type_141971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141971)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_ma'
        return stypy_return_type_141971


    @norecursion
    def set_multialignment(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_multialignment'
        module_type_store = module_type_store.open_function_context('set_multialignment', 1032, 4, False)
        # Assigning a type to the variable 'self' (line 1033)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1033, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_multialignment.__dict__.__setitem__('stypy_localization', localization)
        Text.set_multialignment.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_multialignment.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_multialignment.__dict__.__setitem__('stypy_function_name', 'Text.set_multialignment')
        Text.set_multialignment.__dict__.__setitem__('stypy_param_names_list', ['align'])
        Text.set_multialignment.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_multialignment.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_multialignment.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_multialignment.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_multialignment.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_multialignment.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_multialignment', ['align'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_multialignment', localization, ['align'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_multialignment(...)' code ##################

        unicode_141972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1040, (-1)), 'unicode', u"\n        Set the alignment for multiple lines layout.  The layout of the\n        bounding box of all the lines is determined bu the horizontalalignment\n        and verticalalignment properties, but the multiline text within that\n        box can be\n\n        ACCEPTS: ['left' | 'right' | 'center' ]\n        ")
        
        # Assigning a Tuple to a Name (line 1041):
        
        # Assigning a Tuple to a Name (line 1041):
        
        # Assigning a Tuple to a Name (line 1041):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1041)
        tuple_141973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1041, 17), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1041)
        # Adding element type (line 1041)
        unicode_141974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1041, 17), 'unicode', u'center')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1041, 17), tuple_141973, unicode_141974)
        # Adding element type (line 1041)
        unicode_141975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1041, 27), 'unicode', u'right')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1041, 17), tuple_141973, unicode_141975)
        # Adding element type (line 1041)
        unicode_141976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1041, 36), 'unicode', u'left')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1041, 17), tuple_141973, unicode_141976)
        
        # Assigning a type to the variable 'legal' (line 1041)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1041, 8), 'legal', tuple_141973)
        
        
        # Getting the type of 'align' (line 1042)
        align_141977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 11), 'align')
        # Getting the type of 'legal' (line 1042)
        legal_141978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 24), 'legal')
        # Applying the binary operator 'notin' (line 1042)
        result_contains_141979 = python_operator(stypy.reporting.localization.Localization(__file__, 1042, 11), 'notin', align_141977, legal_141978)
        
        # Testing the type of an if condition (line 1042)
        if_condition_141980 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1042, 8), result_contains_141979)
        # Assigning a type to the variable 'if_condition_141980' (line 1042)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1042, 8), 'if_condition_141980', if_condition_141980)
        # SSA begins for if statement (line 1042)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1043)
        # Processing the call arguments (line 1043)
        unicode_141982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1043, 29), 'unicode', u'Horizontal alignment must be one of %s')
        
        # Call to str(...): (line 1044)
        # Processing the call arguments (line 1044)
        # Getting the type of 'legal' (line 1044)
        legal_141984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 33), 'legal', False)
        # Processing the call keyword arguments (line 1044)
        kwargs_141985 = {}
        # Getting the type of 'str' (line 1044)
        str_141983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 29), 'str', False)
        # Calling str(args, kwargs) (line 1044)
        str_call_result_141986 = invoke(stypy.reporting.localization.Localization(__file__, 1044, 29), str_141983, *[legal_141984], **kwargs_141985)
        
        # Applying the binary operator '%' (line 1043)
        result_mod_141987 = python_operator(stypy.reporting.localization.Localization(__file__, 1043, 29), '%', unicode_141982, str_call_result_141986)
        
        # Processing the call keyword arguments (line 1043)
        kwargs_141988 = {}
        # Getting the type of 'ValueError' (line 1043)
        ValueError_141981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1043)
        ValueError_call_result_141989 = invoke(stypy.reporting.localization.Localization(__file__, 1043, 18), ValueError_141981, *[result_mod_141987], **kwargs_141988)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1043, 12), ValueError_call_result_141989, 'raise parameter', BaseException)
        # SSA join for if statement (line 1042)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1045):
        
        # Assigning a Name to a Attribute (line 1045):
        
        # Assigning a Name to a Attribute (line 1045):
        # Getting the type of 'align' (line 1045)
        align_141990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 31), 'align')
        # Getting the type of 'self' (line 1045)
        self_141991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 8), 'self')
        # Setting the type of the member '_multialignment' of a type (line 1045)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1045, 8), self_141991, '_multialignment', align_141990)
        
        # Assigning a Name to a Attribute (line 1046):
        
        # Assigning a Name to a Attribute (line 1046):
        
        # Assigning a Name to a Attribute (line 1046):
        # Getting the type of 'True' (line 1046)
        True_141992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 21), 'True')
        # Getting the type of 'self' (line 1046)
        self_141993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1046)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1046, 8), self_141993, 'stale', True_141992)
        
        # ################# End of 'set_multialignment(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_multialignment' in the type store
        # Getting the type of 'stypy_return_type' (line 1032)
        stypy_return_type_141994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1032, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141994)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_multialignment'
        return stypy_return_type_141994


    @norecursion
    def set_linespacing(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_linespacing'
        module_type_store = module_type_store.open_function_context('set_linespacing', 1048, 4, False)
        # Assigning a type to the variable 'self' (line 1049)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1049, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_linespacing.__dict__.__setitem__('stypy_localization', localization)
        Text.set_linespacing.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_linespacing.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_linespacing.__dict__.__setitem__('stypy_function_name', 'Text.set_linespacing')
        Text.set_linespacing.__dict__.__setitem__('stypy_param_names_list', ['spacing'])
        Text.set_linespacing.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_linespacing.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_linespacing.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_linespacing.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_linespacing.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_linespacing.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_linespacing', ['spacing'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_linespacing', localization, ['spacing'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_linespacing(...)' code ##################

        unicode_141995 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1054, (-1)), 'unicode', u'\n        Set the line spacing as a multiple of the font size.\n        Default is 1.2.\n\n        ACCEPTS: float (multiple of font size)\n        ')
        
        # Assigning a Name to a Attribute (line 1055):
        
        # Assigning a Name to a Attribute (line 1055):
        
        # Assigning a Name to a Attribute (line 1055):
        # Getting the type of 'spacing' (line 1055)
        spacing_141996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 28), 'spacing')
        # Getting the type of 'self' (line 1055)
        self_141997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 8), 'self')
        # Setting the type of the member '_linespacing' of a type (line 1055)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1055, 8), self_141997, '_linespacing', spacing_141996)
        
        # Assigning a Name to a Attribute (line 1056):
        
        # Assigning a Name to a Attribute (line 1056):
        
        # Assigning a Name to a Attribute (line 1056):
        # Getting the type of 'True' (line 1056)
        True_141998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 21), 'True')
        # Getting the type of 'self' (line 1056)
        self_141999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1056)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1056, 8), self_141999, 'stale', True_141998)
        
        # ################# End of 'set_linespacing(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_linespacing' in the type store
        # Getting the type of 'stypy_return_type' (line 1048)
        stypy_return_type_142000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142000)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_linespacing'
        return stypy_return_type_142000


    @norecursion
    def set_family(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_family'
        module_type_store = module_type_store.open_function_context('set_family', 1058, 4, False)
        # Assigning a type to the variable 'self' (line 1059)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1059, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_family.__dict__.__setitem__('stypy_localization', localization)
        Text.set_family.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_family.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_family.__dict__.__setitem__('stypy_function_name', 'Text.set_family')
        Text.set_family.__dict__.__setitem__('stypy_param_names_list', ['fontname'])
        Text.set_family.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_family.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_family.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_family.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_family.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_family.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_family', ['fontname'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_family', localization, ['fontname'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_family(...)' code ##################

        unicode_142001 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1068, (-1)), 'unicode', u"\n        Set the font family.  May be either a single string, or a list\n        of strings in decreasing priority.  Each string may be either\n        a real font name or a generic font class name.  If the latter,\n        the specific font names will be looked up in the\n        :file:`matplotlibrc` file.\n\n        ACCEPTS: [FONTNAME | 'serif' | 'sans-serif' | 'cursive' | 'fantasy' |\n                  'monospace' ]\n        ")
        
        # Call to set_family(...): (line 1069)
        # Processing the call arguments (line 1069)
        # Getting the type of 'fontname' (line 1069)
        fontname_142005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1069, 40), 'fontname', False)
        # Processing the call keyword arguments (line 1069)
        kwargs_142006 = {}
        # Getting the type of 'self' (line 1069)
        self_142002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1069, 8), 'self', False)
        # Obtaining the member '_fontproperties' of a type (line 1069)
        _fontproperties_142003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1069, 8), self_142002, '_fontproperties')
        # Obtaining the member 'set_family' of a type (line 1069)
        set_family_142004 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1069, 8), _fontproperties_142003, 'set_family')
        # Calling set_family(args, kwargs) (line 1069)
        set_family_call_result_142007 = invoke(stypy.reporting.localization.Localization(__file__, 1069, 8), set_family_142004, *[fontname_142005], **kwargs_142006)
        
        
        # Assigning a Name to a Attribute (line 1070):
        
        # Assigning a Name to a Attribute (line 1070):
        
        # Assigning a Name to a Attribute (line 1070):
        # Getting the type of 'True' (line 1070)
        True_142008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 21), 'True')
        # Getting the type of 'self' (line 1070)
        self_142009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1070)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1070, 8), self_142009, 'stale', True_142008)
        
        # ################# End of 'set_family(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_family' in the type store
        # Getting the type of 'stypy_return_type' (line 1058)
        stypy_return_type_142010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142010)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_family'
        return stypy_return_type_142010


    @norecursion
    def set_variant(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_variant'
        module_type_store = module_type_store.open_function_context('set_variant', 1072, 4, False)
        # Assigning a type to the variable 'self' (line 1073)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1073, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_variant.__dict__.__setitem__('stypy_localization', localization)
        Text.set_variant.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_variant.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_variant.__dict__.__setitem__('stypy_function_name', 'Text.set_variant')
        Text.set_variant.__dict__.__setitem__('stypy_param_names_list', ['variant'])
        Text.set_variant.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_variant.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_variant.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_variant.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_variant.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_variant.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_variant', ['variant'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_variant', localization, ['variant'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_variant(...)' code ##################

        unicode_142011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1077, (-1)), 'unicode', u"\n        Set the font variant, either 'normal' or 'small-caps'.\n\n        ACCEPTS: [ 'normal' | 'small-caps' ]\n        ")
        
        # Call to set_variant(...): (line 1078)
        # Processing the call arguments (line 1078)
        # Getting the type of 'variant' (line 1078)
        variant_142015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 41), 'variant', False)
        # Processing the call keyword arguments (line 1078)
        kwargs_142016 = {}
        # Getting the type of 'self' (line 1078)
        self_142012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 8), 'self', False)
        # Obtaining the member '_fontproperties' of a type (line 1078)
        _fontproperties_142013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1078, 8), self_142012, '_fontproperties')
        # Obtaining the member 'set_variant' of a type (line 1078)
        set_variant_142014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1078, 8), _fontproperties_142013, 'set_variant')
        # Calling set_variant(args, kwargs) (line 1078)
        set_variant_call_result_142017 = invoke(stypy.reporting.localization.Localization(__file__, 1078, 8), set_variant_142014, *[variant_142015], **kwargs_142016)
        
        
        # Assigning a Name to a Attribute (line 1079):
        
        # Assigning a Name to a Attribute (line 1079):
        
        # Assigning a Name to a Attribute (line 1079):
        # Getting the type of 'True' (line 1079)
        True_142018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1079, 21), 'True')
        # Getting the type of 'self' (line 1079)
        self_142019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1079, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1079)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1079, 8), self_142019, 'stale', True_142018)
        
        # ################# End of 'set_variant(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_variant' in the type store
        # Getting the type of 'stypy_return_type' (line 1072)
        stypy_return_type_142020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142020)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_variant'
        return stypy_return_type_142020


    @norecursion
    def set_fontvariant(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_fontvariant'
        module_type_store = module_type_store.open_function_context('set_fontvariant', 1081, 4, False)
        # Assigning a type to the variable 'self' (line 1082)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1082, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_fontvariant.__dict__.__setitem__('stypy_localization', localization)
        Text.set_fontvariant.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_fontvariant.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_fontvariant.__dict__.__setitem__('stypy_function_name', 'Text.set_fontvariant')
        Text.set_fontvariant.__dict__.__setitem__('stypy_param_names_list', ['variant'])
        Text.set_fontvariant.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_fontvariant.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_fontvariant.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_fontvariant.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_fontvariant.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_fontvariant.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_fontvariant', ['variant'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_fontvariant', localization, ['variant'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_fontvariant(...)' code ##################

        unicode_142021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1082, 8), 'unicode', u'alias for set_variant')
        
        # Call to set_variant(...): (line 1083)
        # Processing the call arguments (line 1083)
        # Getting the type of 'variant' (line 1083)
        variant_142024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1083, 32), 'variant', False)
        # Processing the call keyword arguments (line 1083)
        kwargs_142025 = {}
        # Getting the type of 'self' (line 1083)
        self_142022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1083, 15), 'self', False)
        # Obtaining the member 'set_variant' of a type (line 1083)
        set_variant_142023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1083, 15), self_142022, 'set_variant')
        # Calling set_variant(args, kwargs) (line 1083)
        set_variant_call_result_142026 = invoke(stypy.reporting.localization.Localization(__file__, 1083, 15), set_variant_142023, *[variant_142024], **kwargs_142025)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1083)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1083, 8), 'stypy_return_type', set_variant_call_result_142026)
        
        # ################# End of 'set_fontvariant(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_fontvariant' in the type store
        # Getting the type of 'stypy_return_type' (line 1081)
        stypy_return_type_142027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1081, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142027)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_fontvariant'
        return stypy_return_type_142027


    @norecursion
    def set_name(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_name'
        module_type_store = module_type_store.open_function_context('set_name', 1085, 4, False)
        # Assigning a type to the variable 'self' (line 1086)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1086, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_name.__dict__.__setitem__('stypy_localization', localization)
        Text.set_name.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_name.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_name.__dict__.__setitem__('stypy_function_name', 'Text.set_name')
        Text.set_name.__dict__.__setitem__('stypy_param_names_list', ['fontname'])
        Text.set_name.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_name.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_name.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_name.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_name.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_name.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_name', ['fontname'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_name', localization, ['fontname'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_name(...)' code ##################

        unicode_142028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1086, 8), 'unicode', u'alias for set_family')
        
        # Call to set_family(...): (line 1087)
        # Processing the call arguments (line 1087)
        # Getting the type of 'fontname' (line 1087)
        fontname_142031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1087, 31), 'fontname', False)
        # Processing the call keyword arguments (line 1087)
        kwargs_142032 = {}
        # Getting the type of 'self' (line 1087)
        self_142029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1087, 15), 'self', False)
        # Obtaining the member 'set_family' of a type (line 1087)
        set_family_142030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1087, 15), self_142029, 'set_family')
        # Calling set_family(args, kwargs) (line 1087)
        set_family_call_result_142033 = invoke(stypy.reporting.localization.Localization(__file__, 1087, 15), set_family_142030, *[fontname_142031], **kwargs_142032)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1087)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1087, 8), 'stypy_return_type', set_family_call_result_142033)
        
        # ################# End of 'set_name(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_name' in the type store
        # Getting the type of 'stypy_return_type' (line 1085)
        stypy_return_type_142034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142034)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_name'
        return stypy_return_type_142034


    @norecursion
    def set_fontname(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_fontname'
        module_type_store = module_type_store.open_function_context('set_fontname', 1089, 4, False)
        # Assigning a type to the variable 'self' (line 1090)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1090, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_fontname.__dict__.__setitem__('stypy_localization', localization)
        Text.set_fontname.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_fontname.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_fontname.__dict__.__setitem__('stypy_function_name', 'Text.set_fontname')
        Text.set_fontname.__dict__.__setitem__('stypy_param_names_list', ['fontname'])
        Text.set_fontname.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_fontname.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_fontname.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_fontname.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_fontname.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_fontname.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_fontname', ['fontname'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_fontname', localization, ['fontname'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_fontname(...)' code ##################

        unicode_142035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1090, 8), 'unicode', u'alias for set_family')
        
        # Call to set_family(...): (line 1091)
        # Processing the call arguments (line 1091)
        # Getting the type of 'fontname' (line 1091)
        fontname_142038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 24), 'fontname', False)
        # Processing the call keyword arguments (line 1091)
        kwargs_142039 = {}
        # Getting the type of 'self' (line 1091)
        self_142036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 8), 'self', False)
        # Obtaining the member 'set_family' of a type (line 1091)
        set_family_142037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1091, 8), self_142036, 'set_family')
        # Calling set_family(args, kwargs) (line 1091)
        set_family_call_result_142040 = invoke(stypy.reporting.localization.Localization(__file__, 1091, 8), set_family_142037, *[fontname_142038], **kwargs_142039)
        
        
        # ################# End of 'set_fontname(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_fontname' in the type store
        # Getting the type of 'stypy_return_type' (line 1089)
        stypy_return_type_142041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142041)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_fontname'
        return stypy_return_type_142041


    @norecursion
    def set_style(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_style'
        module_type_store = module_type_store.open_function_context('set_style', 1093, 4, False)
        # Assigning a type to the variable 'self' (line 1094)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1094, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_style.__dict__.__setitem__('stypy_localization', localization)
        Text.set_style.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_style.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_style.__dict__.__setitem__('stypy_function_name', 'Text.set_style')
        Text.set_style.__dict__.__setitem__('stypy_param_names_list', ['fontstyle'])
        Text.set_style.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_style.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_style.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_style.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_style.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_style.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_style', ['fontstyle'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_style', localization, ['fontstyle'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_style(...)' code ##################

        unicode_142042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1098, (-1)), 'unicode', u"\n        Set the font style.\n\n        ACCEPTS: [ 'normal' | 'italic' | 'oblique']\n        ")
        
        # Call to set_style(...): (line 1099)
        # Processing the call arguments (line 1099)
        # Getting the type of 'fontstyle' (line 1099)
        fontstyle_142046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 39), 'fontstyle', False)
        # Processing the call keyword arguments (line 1099)
        kwargs_142047 = {}
        # Getting the type of 'self' (line 1099)
        self_142043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 8), 'self', False)
        # Obtaining the member '_fontproperties' of a type (line 1099)
        _fontproperties_142044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1099, 8), self_142043, '_fontproperties')
        # Obtaining the member 'set_style' of a type (line 1099)
        set_style_142045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1099, 8), _fontproperties_142044, 'set_style')
        # Calling set_style(args, kwargs) (line 1099)
        set_style_call_result_142048 = invoke(stypy.reporting.localization.Localization(__file__, 1099, 8), set_style_142045, *[fontstyle_142046], **kwargs_142047)
        
        
        # Assigning a Name to a Attribute (line 1100):
        
        # Assigning a Name to a Attribute (line 1100):
        
        # Assigning a Name to a Attribute (line 1100):
        # Getting the type of 'True' (line 1100)
        True_142049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1100, 21), 'True')
        # Getting the type of 'self' (line 1100)
        self_142050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1100, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1100)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1100, 8), self_142050, 'stale', True_142049)
        
        # ################# End of 'set_style(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_style' in the type store
        # Getting the type of 'stypy_return_type' (line 1093)
        stypy_return_type_142051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142051)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_style'
        return stypy_return_type_142051


    @norecursion
    def set_fontstyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_fontstyle'
        module_type_store = module_type_store.open_function_context('set_fontstyle', 1102, 4, False)
        # Assigning a type to the variable 'self' (line 1103)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1103, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_fontstyle.__dict__.__setitem__('stypy_localization', localization)
        Text.set_fontstyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_fontstyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_fontstyle.__dict__.__setitem__('stypy_function_name', 'Text.set_fontstyle')
        Text.set_fontstyle.__dict__.__setitem__('stypy_param_names_list', ['fontstyle'])
        Text.set_fontstyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_fontstyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_fontstyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_fontstyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_fontstyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_fontstyle.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_fontstyle', ['fontstyle'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_fontstyle', localization, ['fontstyle'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_fontstyle(...)' code ##################

        unicode_142052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1103, 8), 'unicode', u'alias for set_style')
        
        # Call to set_style(...): (line 1104)
        # Processing the call arguments (line 1104)
        # Getting the type of 'fontstyle' (line 1104)
        fontstyle_142055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 30), 'fontstyle', False)
        # Processing the call keyword arguments (line 1104)
        kwargs_142056 = {}
        # Getting the type of 'self' (line 1104)
        self_142053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 15), 'self', False)
        # Obtaining the member 'set_style' of a type (line 1104)
        set_style_142054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1104, 15), self_142053, 'set_style')
        # Calling set_style(args, kwargs) (line 1104)
        set_style_call_result_142057 = invoke(stypy.reporting.localization.Localization(__file__, 1104, 15), set_style_142054, *[fontstyle_142055], **kwargs_142056)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1104, 8), 'stypy_return_type', set_style_call_result_142057)
        
        # ################# End of 'set_fontstyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_fontstyle' in the type store
        # Getting the type of 'stypy_return_type' (line 1102)
        stypy_return_type_142058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1102, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142058)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_fontstyle'
        return stypy_return_type_142058


    @norecursion
    def set_size(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_size'
        module_type_store = module_type_store.open_function_context('set_size', 1106, 4, False)
        # Assigning a type to the variable 'self' (line 1107)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1107, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_size.__dict__.__setitem__('stypy_localization', localization)
        Text.set_size.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_size.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_size.__dict__.__setitem__('stypy_function_name', 'Text.set_size')
        Text.set_size.__dict__.__setitem__('stypy_param_names_list', ['fontsize'])
        Text.set_size.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_size.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_size.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_size.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_size.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_size.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_size', ['fontsize'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_size', localization, ['fontsize'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_size(...)' code ##################

        unicode_142059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1113, (-1)), 'unicode', u"\n        Set the font size.  May be either a size string, relative to\n        the default font size, or an absolute font size in points.\n\n        ACCEPTS: [size in points | 'xx-small' | 'x-small' | 'small' |\n                  'medium' | 'large' | 'x-large' | 'xx-large' ]\n        ")
        
        # Call to set_size(...): (line 1114)
        # Processing the call arguments (line 1114)
        # Getting the type of 'fontsize' (line 1114)
        fontsize_142063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 38), 'fontsize', False)
        # Processing the call keyword arguments (line 1114)
        kwargs_142064 = {}
        # Getting the type of 'self' (line 1114)
        self_142060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 8), 'self', False)
        # Obtaining the member '_fontproperties' of a type (line 1114)
        _fontproperties_142061 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1114, 8), self_142060, '_fontproperties')
        # Obtaining the member 'set_size' of a type (line 1114)
        set_size_142062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1114, 8), _fontproperties_142061, 'set_size')
        # Calling set_size(args, kwargs) (line 1114)
        set_size_call_result_142065 = invoke(stypy.reporting.localization.Localization(__file__, 1114, 8), set_size_142062, *[fontsize_142063], **kwargs_142064)
        
        
        # Assigning a Name to a Attribute (line 1115):
        
        # Assigning a Name to a Attribute (line 1115):
        
        # Assigning a Name to a Attribute (line 1115):
        # Getting the type of 'True' (line 1115)
        True_142066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 21), 'True')
        # Getting the type of 'self' (line 1115)
        self_142067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1115)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1115, 8), self_142067, 'stale', True_142066)
        
        # ################# End of 'set_size(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_size' in the type store
        # Getting the type of 'stypy_return_type' (line 1106)
        stypy_return_type_142068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142068)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_size'
        return stypy_return_type_142068


    @norecursion
    def set_fontsize(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_fontsize'
        module_type_store = module_type_store.open_function_context('set_fontsize', 1117, 4, False)
        # Assigning a type to the variable 'self' (line 1118)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1118, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_fontsize.__dict__.__setitem__('stypy_localization', localization)
        Text.set_fontsize.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_fontsize.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_fontsize.__dict__.__setitem__('stypy_function_name', 'Text.set_fontsize')
        Text.set_fontsize.__dict__.__setitem__('stypy_param_names_list', ['fontsize'])
        Text.set_fontsize.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_fontsize.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_fontsize.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_fontsize.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_fontsize.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_fontsize.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_fontsize', ['fontsize'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_fontsize', localization, ['fontsize'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_fontsize(...)' code ##################

        unicode_142069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1118, 8), 'unicode', u'alias for set_size')
        
        # Call to set_size(...): (line 1119)
        # Processing the call arguments (line 1119)
        # Getting the type of 'fontsize' (line 1119)
        fontsize_142072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 29), 'fontsize', False)
        # Processing the call keyword arguments (line 1119)
        kwargs_142073 = {}
        # Getting the type of 'self' (line 1119)
        self_142070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 15), 'self', False)
        # Obtaining the member 'set_size' of a type (line 1119)
        set_size_142071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1119, 15), self_142070, 'set_size')
        # Calling set_size(args, kwargs) (line 1119)
        set_size_call_result_142074 = invoke(stypy.reporting.localization.Localization(__file__, 1119, 15), set_size_142071, *[fontsize_142072], **kwargs_142073)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1119, 8), 'stypy_return_type', set_size_call_result_142074)
        
        # ################# End of 'set_fontsize(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_fontsize' in the type store
        # Getting the type of 'stypy_return_type' (line 1117)
        stypy_return_type_142075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1117, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142075)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_fontsize'
        return stypy_return_type_142075


    @norecursion
    def set_weight(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_weight'
        module_type_store = module_type_store.open_function_context('set_weight', 1121, 4, False)
        # Assigning a type to the variable 'self' (line 1122)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1122, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_weight.__dict__.__setitem__('stypy_localization', localization)
        Text.set_weight.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_weight.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_weight.__dict__.__setitem__('stypy_function_name', 'Text.set_weight')
        Text.set_weight.__dict__.__setitem__('stypy_param_names_list', ['weight'])
        Text.set_weight.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_weight.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_weight.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_weight.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_weight.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_weight.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_weight', ['weight'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_weight', localization, ['weight'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_weight(...)' code ##################

        unicode_142076 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1129, (-1)), 'unicode', u"\n        Set the font weight.\n\n        ACCEPTS: [a numeric value in range 0-1000 | 'ultralight' | 'light' |\n                  'normal' | 'regular' | 'book' | 'medium' | 'roman' |\n                  'semibold' | 'demibold' | 'demi' | 'bold' | 'heavy' |\n                  'extra bold' | 'black' ]\n        ")
        
        # Call to set_weight(...): (line 1130)
        # Processing the call arguments (line 1130)
        # Getting the type of 'weight' (line 1130)
        weight_142080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 40), 'weight', False)
        # Processing the call keyword arguments (line 1130)
        kwargs_142081 = {}
        # Getting the type of 'self' (line 1130)
        self_142077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 8), 'self', False)
        # Obtaining the member '_fontproperties' of a type (line 1130)
        _fontproperties_142078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1130, 8), self_142077, '_fontproperties')
        # Obtaining the member 'set_weight' of a type (line 1130)
        set_weight_142079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1130, 8), _fontproperties_142078, 'set_weight')
        # Calling set_weight(args, kwargs) (line 1130)
        set_weight_call_result_142082 = invoke(stypy.reporting.localization.Localization(__file__, 1130, 8), set_weight_142079, *[weight_142080], **kwargs_142081)
        
        
        # Assigning a Name to a Attribute (line 1131):
        
        # Assigning a Name to a Attribute (line 1131):
        
        # Assigning a Name to a Attribute (line 1131):
        # Getting the type of 'True' (line 1131)
        True_142083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 21), 'True')
        # Getting the type of 'self' (line 1131)
        self_142084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1131)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1131, 8), self_142084, 'stale', True_142083)
        
        # ################# End of 'set_weight(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_weight' in the type store
        # Getting the type of 'stypy_return_type' (line 1121)
        stypy_return_type_142085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1121, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142085)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_weight'
        return stypy_return_type_142085


    @norecursion
    def set_fontweight(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_fontweight'
        module_type_store = module_type_store.open_function_context('set_fontweight', 1133, 4, False)
        # Assigning a type to the variable 'self' (line 1134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1134, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_fontweight.__dict__.__setitem__('stypy_localization', localization)
        Text.set_fontweight.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_fontweight.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_fontweight.__dict__.__setitem__('stypy_function_name', 'Text.set_fontweight')
        Text.set_fontweight.__dict__.__setitem__('stypy_param_names_list', ['weight'])
        Text.set_fontweight.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_fontweight.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_fontweight.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_fontweight.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_fontweight.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_fontweight.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_fontweight', ['weight'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_fontweight', localization, ['weight'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_fontweight(...)' code ##################

        unicode_142086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1134, 8), 'unicode', u'alias for set_weight')
        
        # Call to set_weight(...): (line 1135)
        # Processing the call arguments (line 1135)
        # Getting the type of 'weight' (line 1135)
        weight_142089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 31), 'weight', False)
        # Processing the call keyword arguments (line 1135)
        kwargs_142090 = {}
        # Getting the type of 'self' (line 1135)
        self_142087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 15), 'self', False)
        # Obtaining the member 'set_weight' of a type (line 1135)
        set_weight_142088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1135, 15), self_142087, 'set_weight')
        # Calling set_weight(args, kwargs) (line 1135)
        set_weight_call_result_142091 = invoke(stypy.reporting.localization.Localization(__file__, 1135, 15), set_weight_142088, *[weight_142089], **kwargs_142090)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1135)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1135, 8), 'stypy_return_type', set_weight_call_result_142091)
        
        # ################# End of 'set_fontweight(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_fontweight' in the type store
        # Getting the type of 'stypy_return_type' (line 1133)
        stypy_return_type_142092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142092)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_fontweight'
        return stypy_return_type_142092


    @norecursion
    def set_stretch(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_stretch'
        module_type_store = module_type_store.open_function_context('set_stretch', 1137, 4, False)
        # Assigning a type to the variable 'self' (line 1138)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1138, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_stretch.__dict__.__setitem__('stypy_localization', localization)
        Text.set_stretch.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_stretch.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_stretch.__dict__.__setitem__('stypy_function_name', 'Text.set_stretch')
        Text.set_stretch.__dict__.__setitem__('stypy_param_names_list', ['stretch'])
        Text.set_stretch.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_stretch.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_stretch.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_stretch.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_stretch.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_stretch.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_stretch', ['stretch'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_stretch', localization, ['stretch'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_stretch(...)' code ##################

        unicode_142093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1145, (-1)), 'unicode', u"\n        Set the font stretch (horizontal condensation or expansion).\n\n        ACCEPTS: [a numeric value in range 0-1000 | 'ultra-condensed' |\n                  'extra-condensed' | 'condensed' | 'semi-condensed' |\n                  'normal' | 'semi-expanded' | 'expanded' | 'extra-expanded' |\n                  'ultra-expanded' ]\n        ")
        
        # Call to set_stretch(...): (line 1146)
        # Processing the call arguments (line 1146)
        # Getting the type of 'stretch' (line 1146)
        stretch_142097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 41), 'stretch', False)
        # Processing the call keyword arguments (line 1146)
        kwargs_142098 = {}
        # Getting the type of 'self' (line 1146)
        self_142094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 8), 'self', False)
        # Obtaining the member '_fontproperties' of a type (line 1146)
        _fontproperties_142095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1146, 8), self_142094, '_fontproperties')
        # Obtaining the member 'set_stretch' of a type (line 1146)
        set_stretch_142096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1146, 8), _fontproperties_142095, 'set_stretch')
        # Calling set_stretch(args, kwargs) (line 1146)
        set_stretch_call_result_142099 = invoke(stypy.reporting.localization.Localization(__file__, 1146, 8), set_stretch_142096, *[stretch_142097], **kwargs_142098)
        
        
        # Assigning a Name to a Attribute (line 1147):
        
        # Assigning a Name to a Attribute (line 1147):
        
        # Assigning a Name to a Attribute (line 1147):
        # Getting the type of 'True' (line 1147)
        True_142100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 21), 'True')
        # Getting the type of 'self' (line 1147)
        self_142101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1147)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1147, 8), self_142101, 'stale', True_142100)
        
        # ################# End of 'set_stretch(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_stretch' in the type store
        # Getting the type of 'stypy_return_type' (line 1137)
        stypy_return_type_142102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1137, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142102)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_stretch'
        return stypy_return_type_142102


    @norecursion
    def set_fontstretch(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_fontstretch'
        module_type_store = module_type_store.open_function_context('set_fontstretch', 1149, 4, False)
        # Assigning a type to the variable 'self' (line 1150)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_fontstretch.__dict__.__setitem__('stypy_localization', localization)
        Text.set_fontstretch.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_fontstretch.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_fontstretch.__dict__.__setitem__('stypy_function_name', 'Text.set_fontstretch')
        Text.set_fontstretch.__dict__.__setitem__('stypy_param_names_list', ['stretch'])
        Text.set_fontstretch.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_fontstretch.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_fontstretch.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_fontstretch.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_fontstretch.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_fontstretch.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_fontstretch', ['stretch'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_fontstretch', localization, ['stretch'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_fontstretch(...)' code ##################

        unicode_142103 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1150, 8), 'unicode', u'alias for set_stretch')
        
        # Call to set_stretch(...): (line 1151)
        # Processing the call arguments (line 1151)
        # Getting the type of 'stretch' (line 1151)
        stretch_142106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1151, 32), 'stretch', False)
        # Processing the call keyword arguments (line 1151)
        kwargs_142107 = {}
        # Getting the type of 'self' (line 1151)
        self_142104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1151, 15), 'self', False)
        # Obtaining the member 'set_stretch' of a type (line 1151)
        set_stretch_142105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1151, 15), self_142104, 'set_stretch')
        # Calling set_stretch(args, kwargs) (line 1151)
        set_stretch_call_result_142108 = invoke(stypy.reporting.localization.Localization(__file__, 1151, 15), set_stretch_142105, *[stretch_142106], **kwargs_142107)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1151)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1151, 8), 'stypy_return_type', set_stretch_call_result_142108)
        
        # ################# End of 'set_fontstretch(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_fontstretch' in the type store
        # Getting the type of 'stypy_return_type' (line 1149)
        stypy_return_type_142109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142109)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_fontstretch'
        return stypy_return_type_142109


    @norecursion
    def set_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_position'
        module_type_store = module_type_store.open_function_context('set_position', 1153, 4, False)
        # Assigning a type to the variable 'self' (line 1154)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1154, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_position.__dict__.__setitem__('stypy_localization', localization)
        Text.set_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_position.__dict__.__setitem__('stypy_function_name', 'Text.set_position')
        Text.set_position.__dict__.__setitem__('stypy_param_names_list', ['xy'])
        Text.set_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_position.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_position', ['xy'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_position', localization, ['xy'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_position(...)' code ##################

        unicode_142110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1158, (-1)), 'unicode', u'\n        Set the (*x*, *y*) position of the text\n\n        ACCEPTS: (x,y)\n        ')
        
        # Call to set_x(...): (line 1159)
        # Processing the call arguments (line 1159)
        
        # Obtaining the type of the subscript
        int_142113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1159, 22), 'int')
        # Getting the type of 'xy' (line 1159)
        xy_142114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 19), 'xy', False)
        # Obtaining the member '__getitem__' of a type (line 1159)
        getitem___142115 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1159, 19), xy_142114, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1159)
        subscript_call_result_142116 = invoke(stypy.reporting.localization.Localization(__file__, 1159, 19), getitem___142115, int_142113)
        
        # Processing the call keyword arguments (line 1159)
        kwargs_142117 = {}
        # Getting the type of 'self' (line 1159)
        self_142111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 8), 'self', False)
        # Obtaining the member 'set_x' of a type (line 1159)
        set_x_142112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1159, 8), self_142111, 'set_x')
        # Calling set_x(args, kwargs) (line 1159)
        set_x_call_result_142118 = invoke(stypy.reporting.localization.Localization(__file__, 1159, 8), set_x_142112, *[subscript_call_result_142116], **kwargs_142117)
        
        
        # Call to set_y(...): (line 1160)
        # Processing the call arguments (line 1160)
        
        # Obtaining the type of the subscript
        int_142121 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1160, 22), 'int')
        # Getting the type of 'xy' (line 1160)
        xy_142122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1160, 19), 'xy', False)
        # Obtaining the member '__getitem__' of a type (line 1160)
        getitem___142123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1160, 19), xy_142122, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1160)
        subscript_call_result_142124 = invoke(stypy.reporting.localization.Localization(__file__, 1160, 19), getitem___142123, int_142121)
        
        # Processing the call keyword arguments (line 1160)
        kwargs_142125 = {}
        # Getting the type of 'self' (line 1160)
        self_142119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1160, 8), 'self', False)
        # Obtaining the member 'set_y' of a type (line 1160)
        set_y_142120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1160, 8), self_142119, 'set_y')
        # Calling set_y(args, kwargs) (line 1160)
        set_y_call_result_142126 = invoke(stypy.reporting.localization.Localization(__file__, 1160, 8), set_y_142120, *[subscript_call_result_142124], **kwargs_142125)
        
        
        # ################# End of 'set_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_position' in the type store
        # Getting the type of 'stypy_return_type' (line 1153)
        stypy_return_type_142127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142127)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_position'
        return stypy_return_type_142127


    @norecursion
    def set_x(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_x'
        module_type_store = module_type_store.open_function_context('set_x', 1162, 4, False)
        # Assigning a type to the variable 'self' (line 1163)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1163, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_x.__dict__.__setitem__('stypy_localization', localization)
        Text.set_x.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_x.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_x.__dict__.__setitem__('stypy_function_name', 'Text.set_x')
        Text.set_x.__dict__.__setitem__('stypy_param_names_list', ['x'])
        Text.set_x.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_x.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_x.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_x.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_x.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_x.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_x', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_x', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_x(...)' code ##################

        unicode_142128 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1167, (-1)), 'unicode', u'\n        Set the *x* position of the text\n\n        ACCEPTS: float\n        ')
        
        # Assigning a Name to a Attribute (line 1168):
        
        # Assigning a Name to a Attribute (line 1168):
        
        # Assigning a Name to a Attribute (line 1168):
        # Getting the type of 'x' (line 1168)
        x_142129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 18), 'x')
        # Getting the type of 'self' (line 1168)
        self_142130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 8), 'self')
        # Setting the type of the member '_x' of a type (line 1168)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1168, 8), self_142130, '_x', x_142129)
        
        # Assigning a Name to a Attribute (line 1169):
        
        # Assigning a Name to a Attribute (line 1169):
        
        # Assigning a Name to a Attribute (line 1169):
        # Getting the type of 'True' (line 1169)
        True_142131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 21), 'True')
        # Getting the type of 'self' (line 1169)
        self_142132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1169)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1169, 8), self_142132, 'stale', True_142131)
        
        # ################# End of 'set_x(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_x' in the type store
        # Getting the type of 'stypy_return_type' (line 1162)
        stypy_return_type_142133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1162, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142133)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_x'
        return stypy_return_type_142133


    @norecursion
    def set_y(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_y'
        module_type_store = module_type_store.open_function_context('set_y', 1171, 4, False)
        # Assigning a type to the variable 'self' (line 1172)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1172, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_y.__dict__.__setitem__('stypy_localization', localization)
        Text.set_y.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_y.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_y.__dict__.__setitem__('stypy_function_name', 'Text.set_y')
        Text.set_y.__dict__.__setitem__('stypy_param_names_list', ['y'])
        Text.set_y.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_y.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_y.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_y.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_y.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_y.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_y', ['y'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_y', localization, ['y'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_y(...)' code ##################

        unicode_142134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1176, (-1)), 'unicode', u'\n        Set the *y* position of the text\n\n        ACCEPTS: float\n        ')
        
        # Assigning a Name to a Attribute (line 1177):
        
        # Assigning a Name to a Attribute (line 1177):
        
        # Assigning a Name to a Attribute (line 1177):
        # Getting the type of 'y' (line 1177)
        y_142135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 18), 'y')
        # Getting the type of 'self' (line 1177)
        self_142136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 8), 'self')
        # Setting the type of the member '_y' of a type (line 1177)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1177, 8), self_142136, '_y', y_142135)
        
        # Assigning a Name to a Attribute (line 1178):
        
        # Assigning a Name to a Attribute (line 1178):
        
        # Assigning a Name to a Attribute (line 1178):
        # Getting the type of 'True' (line 1178)
        True_142137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1178, 21), 'True')
        # Getting the type of 'self' (line 1178)
        self_142138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1178, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1178)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1178, 8), self_142138, 'stale', True_142137)
        
        # ################# End of 'set_y(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_y' in the type store
        # Getting the type of 'stypy_return_type' (line 1171)
        stypy_return_type_142139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142139)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_y'
        return stypy_return_type_142139


    @norecursion
    def set_rotation(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_rotation'
        module_type_store = module_type_store.open_function_context('set_rotation', 1180, 4, False)
        # Assigning a type to the variable 'self' (line 1181)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1181, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_rotation.__dict__.__setitem__('stypy_localization', localization)
        Text.set_rotation.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_rotation.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_rotation.__dict__.__setitem__('stypy_function_name', 'Text.set_rotation')
        Text.set_rotation.__dict__.__setitem__('stypy_param_names_list', ['s'])
        Text.set_rotation.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_rotation.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_rotation.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_rotation.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_rotation.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_rotation.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_rotation', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_rotation', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_rotation(...)' code ##################

        unicode_142140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1185, (-1)), 'unicode', u"\n        Set the rotation of the text\n\n        ACCEPTS: [ angle in degrees | 'vertical' | 'horizontal' ]\n        ")
        
        # Assigning a Name to a Attribute (line 1186):
        
        # Assigning a Name to a Attribute (line 1186):
        
        # Assigning a Name to a Attribute (line 1186):
        # Getting the type of 's' (line 1186)
        s_142141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 25), 's')
        # Getting the type of 'self' (line 1186)
        self_142142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 8), 'self')
        # Setting the type of the member '_rotation' of a type (line 1186)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1186, 8), self_142142, '_rotation', s_142141)
        
        # Assigning a Name to a Attribute (line 1187):
        
        # Assigning a Name to a Attribute (line 1187):
        
        # Assigning a Name to a Attribute (line 1187):
        # Getting the type of 'True' (line 1187)
        True_142143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 21), 'True')
        # Getting the type of 'self' (line 1187)
        self_142144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1187)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1187, 8), self_142144, 'stale', True_142143)
        
        # ################# End of 'set_rotation(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_rotation' in the type store
        # Getting the type of 'stypy_return_type' (line 1180)
        stypy_return_type_142145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142145)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_rotation'
        return stypy_return_type_142145


    @norecursion
    def set_va(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_va'
        module_type_store = module_type_store.open_function_context('set_va', 1189, 4, False)
        # Assigning a type to the variable 'self' (line 1190)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1190, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_va.__dict__.__setitem__('stypy_localization', localization)
        Text.set_va.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_va.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_va.__dict__.__setitem__('stypy_function_name', 'Text.set_va')
        Text.set_va.__dict__.__setitem__('stypy_param_names_list', ['align'])
        Text.set_va.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_va.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_va.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_va.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_va.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_va.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_va', ['align'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_va', localization, ['align'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_va(...)' code ##################

        unicode_142146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1190, 8), 'unicode', u'alias for set_verticalalignment')
        
        # Call to set_verticalalignment(...): (line 1191)
        # Processing the call arguments (line 1191)
        # Getting the type of 'align' (line 1191)
        align_142149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 35), 'align', False)
        # Processing the call keyword arguments (line 1191)
        kwargs_142150 = {}
        # Getting the type of 'self' (line 1191)
        self_142147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 8), 'self', False)
        # Obtaining the member 'set_verticalalignment' of a type (line 1191)
        set_verticalalignment_142148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1191, 8), self_142147, 'set_verticalalignment')
        # Calling set_verticalalignment(args, kwargs) (line 1191)
        set_verticalalignment_call_result_142151 = invoke(stypy.reporting.localization.Localization(__file__, 1191, 8), set_verticalalignment_142148, *[align_142149], **kwargs_142150)
        
        
        # ################# End of 'set_va(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_va' in the type store
        # Getting the type of 'stypy_return_type' (line 1189)
        stypy_return_type_142152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142152)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_va'
        return stypy_return_type_142152


    @norecursion
    def set_verticalalignment(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_verticalalignment'
        module_type_store = module_type_store.open_function_context('set_verticalalignment', 1193, 4, False)
        # Assigning a type to the variable 'self' (line 1194)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1194, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_verticalalignment.__dict__.__setitem__('stypy_localization', localization)
        Text.set_verticalalignment.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_verticalalignment.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_verticalalignment.__dict__.__setitem__('stypy_function_name', 'Text.set_verticalalignment')
        Text.set_verticalalignment.__dict__.__setitem__('stypy_param_names_list', ['align'])
        Text.set_verticalalignment.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_verticalalignment.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_verticalalignment.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_verticalalignment.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_verticalalignment.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_verticalalignment.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_verticalalignment', ['align'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_verticalalignment', localization, ['align'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_verticalalignment(...)' code ##################

        unicode_142153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1198, (-1)), 'unicode', u"\n        Set the vertical alignment\n\n        ACCEPTS: [ 'center' | 'top' | 'bottom' | 'baseline' ]\n        ")
        
        # Assigning a Tuple to a Name (line 1199):
        
        # Assigning a Tuple to a Name (line 1199):
        
        # Assigning a Tuple to a Name (line 1199):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1199)
        tuple_142154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1199, 17), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1199)
        # Adding element type (line 1199)
        unicode_142155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1199, 17), 'unicode', u'top')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1199, 17), tuple_142154, unicode_142155)
        # Adding element type (line 1199)
        unicode_142156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1199, 24), 'unicode', u'bottom')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1199, 17), tuple_142154, unicode_142156)
        # Adding element type (line 1199)
        unicode_142157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1199, 34), 'unicode', u'center')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1199, 17), tuple_142154, unicode_142157)
        # Adding element type (line 1199)
        unicode_142158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1199, 44), 'unicode', u'baseline')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1199, 17), tuple_142154, unicode_142158)
        
        # Assigning a type to the variable 'legal' (line 1199)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1199, 8), 'legal', tuple_142154)
        
        
        # Getting the type of 'align' (line 1200)
        align_142159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 11), 'align')
        # Getting the type of 'legal' (line 1200)
        legal_142160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 24), 'legal')
        # Applying the binary operator 'notin' (line 1200)
        result_contains_142161 = python_operator(stypy.reporting.localization.Localization(__file__, 1200, 11), 'notin', align_142159, legal_142160)
        
        # Testing the type of an if condition (line 1200)
        if_condition_142162 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1200, 8), result_contains_142161)
        # Assigning a type to the variable 'if_condition_142162' (line 1200)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1200, 8), 'if_condition_142162', if_condition_142162)
        # SSA begins for if statement (line 1200)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1201)
        # Processing the call arguments (line 1201)
        unicode_142164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1201, 29), 'unicode', u'Vertical alignment must be one of %s')
        
        # Call to str(...): (line 1202)
        # Processing the call arguments (line 1202)
        # Getting the type of 'legal' (line 1202)
        legal_142166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 33), 'legal', False)
        # Processing the call keyword arguments (line 1202)
        kwargs_142167 = {}
        # Getting the type of 'str' (line 1202)
        str_142165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 29), 'str', False)
        # Calling str(args, kwargs) (line 1202)
        str_call_result_142168 = invoke(stypy.reporting.localization.Localization(__file__, 1202, 29), str_142165, *[legal_142166], **kwargs_142167)
        
        # Applying the binary operator '%' (line 1201)
        result_mod_142169 = python_operator(stypy.reporting.localization.Localization(__file__, 1201, 29), '%', unicode_142164, str_call_result_142168)
        
        # Processing the call keyword arguments (line 1201)
        kwargs_142170 = {}
        # Getting the type of 'ValueError' (line 1201)
        ValueError_142163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1201)
        ValueError_call_result_142171 = invoke(stypy.reporting.localization.Localization(__file__, 1201, 18), ValueError_142163, *[result_mod_142169], **kwargs_142170)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1201, 12), ValueError_call_result_142171, 'raise parameter', BaseException)
        # SSA join for if statement (line 1200)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1204):
        
        # Assigning a Name to a Attribute (line 1204):
        
        # Assigning a Name to a Attribute (line 1204):
        # Getting the type of 'align' (line 1204)
        align_142172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 34), 'align')
        # Getting the type of 'self' (line 1204)
        self_142173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 8), 'self')
        # Setting the type of the member '_verticalalignment' of a type (line 1204)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1204, 8), self_142173, '_verticalalignment', align_142172)
        
        # Assigning a Name to a Attribute (line 1205):
        
        # Assigning a Name to a Attribute (line 1205):
        
        # Assigning a Name to a Attribute (line 1205):
        # Getting the type of 'True' (line 1205)
        True_142174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 21), 'True')
        # Getting the type of 'self' (line 1205)
        self_142175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1205)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1205, 8), self_142175, 'stale', True_142174)
        
        # ################# End of 'set_verticalalignment(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_verticalalignment' in the type store
        # Getting the type of 'stypy_return_type' (line 1193)
        stypy_return_type_142176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1193, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142176)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_verticalalignment'
        return stypy_return_type_142176


    @norecursion
    def set_text(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_text'
        module_type_store = module_type_store.open_function_context('set_text', 1207, 4, False)
        # Assigning a type to the variable 'self' (line 1208)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1208, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_text.__dict__.__setitem__('stypy_localization', localization)
        Text.set_text.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_text.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_text.__dict__.__setitem__('stypy_function_name', 'Text.set_text')
        Text.set_text.__dict__.__setitem__('stypy_param_names_list', ['s'])
        Text.set_text.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_text.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_text.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_text.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_text.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_text.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_text', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_text', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_text(...)' code ##################

        unicode_142177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1214, (-1)), 'unicode', u"\n        Set the text string *s*\n\n        It may contain newlines (``\\n``) or math in LaTeX syntax.\n\n        ACCEPTS: string or anything printable with '%s' conversion.\n        ")
        
        # Assigning a BinOp to a Attribute (line 1215):
        
        # Assigning a BinOp to a Attribute (line 1215):
        
        # Assigning a BinOp to a Attribute (line 1215):
        unicode_142178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1215, 21), 'unicode', u'%s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1215)
        tuple_142179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1215, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1215)
        # Adding element type (line 1215)
        # Getting the type of 's' (line 1215)
        s_142180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 29), 's')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1215, 29), tuple_142179, s_142180)
        
        # Applying the binary operator '%' (line 1215)
        result_mod_142181 = python_operator(stypy.reporting.localization.Localization(__file__, 1215, 21), '%', unicode_142178, tuple_142179)
        
        # Getting the type of 'self' (line 1215)
        self_142182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 8), 'self')
        # Setting the type of the member '_text' of a type (line 1215)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1215, 8), self_142182, '_text', result_mod_142181)
        
        # Assigning a Name to a Attribute (line 1216):
        
        # Assigning a Name to a Attribute (line 1216):
        
        # Assigning a Name to a Attribute (line 1216):
        # Getting the type of 'True' (line 1216)
        True_142183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 21), 'True')
        # Getting the type of 'self' (line 1216)
        self_142184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1216)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1216, 8), self_142184, 'stale', True_142183)
        
        # ################# End of 'set_text(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_text' in the type store
        # Getting the type of 'stypy_return_type' (line 1207)
        stypy_return_type_142185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142185)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_text'
        return stypy_return_type_142185


    @staticmethod
    @norecursion
    def is_math_text(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1219)
        None_142186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1219, 31), 'None')
        defaults = [None_142186]
        # Create a new context for function 'is_math_text'
        module_type_store = module_type_store.open_function_context('is_math_text', 1218, 4, False)
        
        # Passed parameters checking function
        Text.is_math_text.__dict__.__setitem__('stypy_localization', localization)
        Text.is_math_text.__dict__.__setitem__('stypy_type_of_self', None)
        Text.is_math_text.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.is_math_text.__dict__.__setitem__('stypy_function_name', 'is_math_text')
        Text.is_math_text.__dict__.__setitem__('stypy_param_names_list', ['s', 'usetex'])
        Text.is_math_text.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.is_math_text.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.is_math_text.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.is_math_text.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.is_math_text.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.is_math_text.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, None, module_type_store, 'is_math_text', ['s', 'usetex'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'is_math_text', localization, ['usetex'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'is_math_text(...)' code ##################

        unicode_142187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1226, (-1)), 'unicode', u'\n        Returns a cleaned string and a boolean flag.\n        The flag indicates if the given string *s* contains any mathtext,\n        determined by counting unescaped dollar signs. If no mathtext\n        is present, the cleaned string has its dollar signs unescaped.\n        If usetex is on, the flag always has the value "TeX".\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1229)
        # Getting the type of 'usetex' (line 1229)
        usetex_142188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 11), 'usetex')
        # Getting the type of 'None' (line 1229)
        None_142189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 21), 'None')
        
        (may_be_142190, more_types_in_union_142191) = may_be_none(usetex_142188, None_142189)

        if may_be_142190:

            if more_types_in_union_142191:
                # Runtime conditional SSA (line 1229)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 1230):
            
            # Assigning a Subscript to a Name (line 1230):
            
            # Assigning a Subscript to a Name (line 1230):
            
            # Obtaining the type of the subscript
            unicode_142192 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1230, 30), 'unicode', u'text.usetex')
            # Getting the type of 'rcParams' (line 1230)
            rcParams_142193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1230, 21), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 1230)
            getitem___142194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1230, 21), rcParams_142193, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1230)
            subscript_call_result_142195 = invoke(stypy.reporting.localization.Localization(__file__, 1230, 21), getitem___142194, unicode_142192)
            
            # Assigning a type to the variable 'usetex' (line 1230)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1230, 12), 'usetex', subscript_call_result_142195)

            if more_types_in_union_142191:
                # SSA join for if statement (line 1229)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Getting the type of 'usetex' (line 1231)
        usetex_142196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 11), 'usetex')
        # Testing the type of an if condition (line 1231)
        if_condition_142197 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1231, 8), usetex_142196)
        # Assigning a type to the variable 'if_condition_142197' (line 1231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1231, 8), 'if_condition_142197', if_condition_142197)
        # SSA begins for if statement (line 1231)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 's' (line 1232)
        s_142198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 15), 's')
        unicode_142199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1232, 20), 'unicode', u' ')
        # Applying the binary operator '==' (line 1232)
        result_eq_142200 = python_operator(stypy.reporting.localization.Localization(__file__, 1232, 15), '==', s_142198, unicode_142199)
        
        # Testing the type of an if condition (line 1232)
        if_condition_142201 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1232, 12), result_eq_142200)
        # Assigning a type to the variable 'if_condition_142201' (line 1232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1232, 12), 'if_condition_142201', if_condition_142201)
        # SSA begins for if statement (line 1232)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 1233):
        
        # Assigning a Str to a Name (line 1233):
        
        # Assigning a Str to a Name (line 1233):
        unicode_142202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1233, 20), 'unicode', u'\\ ')
        # Assigning a type to the variable 's' (line 1233)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1233, 16), 's', unicode_142202)
        # SSA join for if statement (line 1232)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1234)
        tuple_142203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1234, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1234)
        # Adding element type (line 1234)
        # Getting the type of 's' (line 1234)
        s_142204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 19), 's')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1234, 19), tuple_142203, s_142204)
        # Adding element type (line 1234)
        unicode_142205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1234, 22), 'unicode', u'TeX')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1234, 19), tuple_142203, unicode_142205)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1234)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1234, 12), 'stypy_return_type', tuple_142203)
        # SSA join for if statement (line 1231)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to is_math_text(...): (line 1236)
        # Processing the call arguments (line 1236)
        # Getting the type of 's' (line 1236)
        s_142208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 30), 's', False)
        # Processing the call keyword arguments (line 1236)
        kwargs_142209 = {}
        # Getting the type of 'cbook' (line 1236)
        cbook_142206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 11), 'cbook', False)
        # Obtaining the member 'is_math_text' of a type (line 1236)
        is_math_text_142207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1236, 11), cbook_142206, 'is_math_text')
        # Calling is_math_text(args, kwargs) (line 1236)
        is_math_text_call_result_142210 = invoke(stypy.reporting.localization.Localization(__file__, 1236, 11), is_math_text_142207, *[s_142208], **kwargs_142209)
        
        # Testing the type of an if condition (line 1236)
        if_condition_142211 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1236, 8), is_math_text_call_result_142210)
        # Assigning a type to the variable 'if_condition_142211' (line 1236)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1236, 8), 'if_condition_142211', if_condition_142211)
        # SSA begins for if statement (line 1236)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1237)
        tuple_142212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1237, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1237)
        # Adding element type (line 1237)
        # Getting the type of 's' (line 1237)
        s_142213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 19), 's')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1237, 19), tuple_142212, s_142213)
        # Adding element type (line 1237)
        # Getting the type of 'True' (line 1237)
        True_142214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 22), 'True')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1237, 19), tuple_142212, True_142214)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1237)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1237, 12), 'stypy_return_type', tuple_142212)
        # SSA branch for the else part of an if statement (line 1236)
        module_type_store.open_ssa_branch('else')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1239)
        tuple_142215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1239, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1239)
        # Adding element type (line 1239)
        
        # Call to replace(...): (line 1239)
        # Processing the call arguments (line 1239)
        unicode_142218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1239, 29), 'unicode', u'\\$')
        unicode_142219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1239, 36), 'unicode', u'$')
        # Processing the call keyword arguments (line 1239)
        kwargs_142220 = {}
        # Getting the type of 's' (line 1239)
        s_142216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 19), 's', False)
        # Obtaining the member 'replace' of a type (line 1239)
        replace_142217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1239, 19), s_142216, 'replace')
        # Calling replace(args, kwargs) (line 1239)
        replace_call_result_142221 = invoke(stypy.reporting.localization.Localization(__file__, 1239, 19), replace_142217, *[unicode_142218, unicode_142219], **kwargs_142220)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1239, 19), tuple_142215, replace_call_result_142221)
        # Adding element type (line 1239)
        # Getting the type of 'False' (line 1239)
        False_142222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 42), 'False')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1239, 19), tuple_142215, False_142222)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1239)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1239, 12), 'stypy_return_type', tuple_142215)
        # SSA join for if statement (line 1236)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'is_math_text(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'is_math_text' in the type store
        # Getting the type of 'stypy_return_type' (line 1218)
        stypy_return_type_142223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142223)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'is_math_text'
        return stypy_return_type_142223


    @norecursion
    def set_fontproperties(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_fontproperties'
        module_type_store = module_type_store.open_function_context('set_fontproperties', 1241, 4, False)
        # Assigning a type to the variable 'self' (line 1242)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1242, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_fontproperties.__dict__.__setitem__('stypy_localization', localization)
        Text.set_fontproperties.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_fontproperties.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_fontproperties.__dict__.__setitem__('stypy_function_name', 'Text.set_fontproperties')
        Text.set_fontproperties.__dict__.__setitem__('stypy_param_names_list', ['fp'])
        Text.set_fontproperties.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_fontproperties.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_fontproperties.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_fontproperties.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_fontproperties.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_fontproperties.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_fontproperties', ['fp'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_fontproperties', localization, ['fp'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_fontproperties(...)' code ##################

        unicode_142224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1247, (-1)), 'unicode', u'\n        Set the font properties that control the text.  *fp* must be a\n        :class:`matplotlib.font_manager.FontProperties` object.\n\n        ACCEPTS: a :class:`matplotlib.font_manager.FontProperties` instance\n        ')
        
        
        # Call to isinstance(...): (line 1248)
        # Processing the call arguments (line 1248)
        # Getting the type of 'fp' (line 1248)
        fp_142226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 22), 'fp', False)
        # Getting the type of 'six' (line 1248)
        six_142227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 26), 'six', False)
        # Obtaining the member 'string_types' of a type (line 1248)
        string_types_142228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1248, 26), six_142227, 'string_types')
        # Processing the call keyword arguments (line 1248)
        kwargs_142229 = {}
        # Getting the type of 'isinstance' (line 1248)
        isinstance_142225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1248)
        isinstance_call_result_142230 = invoke(stypy.reporting.localization.Localization(__file__, 1248, 11), isinstance_142225, *[fp_142226, string_types_142228], **kwargs_142229)
        
        # Testing the type of an if condition (line 1248)
        if_condition_142231 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1248, 8), isinstance_call_result_142230)
        # Assigning a type to the variable 'if_condition_142231' (line 1248)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1248, 8), 'if_condition_142231', if_condition_142231)
        # SSA begins for if statement (line 1248)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1249):
        
        # Assigning a Call to a Name (line 1249):
        
        # Assigning a Call to a Name (line 1249):
        
        # Call to FontProperties(...): (line 1249)
        # Processing the call arguments (line 1249)
        # Getting the type of 'fp' (line 1249)
        fp_142233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 32), 'fp', False)
        # Processing the call keyword arguments (line 1249)
        kwargs_142234 = {}
        # Getting the type of 'FontProperties' (line 1249)
        FontProperties_142232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 17), 'FontProperties', False)
        # Calling FontProperties(args, kwargs) (line 1249)
        FontProperties_call_result_142235 = invoke(stypy.reporting.localization.Localization(__file__, 1249, 17), FontProperties_142232, *[fp_142233], **kwargs_142234)
        
        # Assigning a type to the variable 'fp' (line 1249)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1249, 12), 'fp', FontProperties_call_result_142235)
        # SSA join for if statement (line 1248)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 1250):
        
        # Assigning a Call to a Attribute (line 1250):
        
        # Assigning a Call to a Attribute (line 1250):
        
        # Call to copy(...): (line 1250)
        # Processing the call keyword arguments (line 1250)
        kwargs_142238 = {}
        # Getting the type of 'fp' (line 1250)
        fp_142236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1250, 31), 'fp', False)
        # Obtaining the member 'copy' of a type (line 1250)
        copy_142237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1250, 31), fp_142236, 'copy')
        # Calling copy(args, kwargs) (line 1250)
        copy_call_result_142239 = invoke(stypy.reporting.localization.Localization(__file__, 1250, 31), copy_142237, *[], **kwargs_142238)
        
        # Getting the type of 'self' (line 1250)
        self_142240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1250, 8), 'self')
        # Setting the type of the member '_fontproperties' of a type (line 1250)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1250, 8), self_142240, '_fontproperties', copy_call_result_142239)
        
        # Assigning a Name to a Attribute (line 1251):
        
        # Assigning a Name to a Attribute (line 1251):
        
        # Assigning a Name to a Attribute (line 1251):
        # Getting the type of 'True' (line 1251)
        True_142241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1251, 21), 'True')
        # Getting the type of 'self' (line 1251)
        self_142242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1251, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1251)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1251, 8), self_142242, 'stale', True_142241)
        
        # ################# End of 'set_fontproperties(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_fontproperties' in the type store
        # Getting the type of 'stypy_return_type' (line 1241)
        stypy_return_type_142243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142243)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_fontproperties'
        return stypy_return_type_142243


    @norecursion
    def set_font_properties(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_font_properties'
        module_type_store = module_type_store.open_function_context('set_font_properties', 1253, 4, False)
        # Assigning a type to the variable 'self' (line 1254)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1254, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_font_properties.__dict__.__setitem__('stypy_localization', localization)
        Text.set_font_properties.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_font_properties.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_font_properties.__dict__.__setitem__('stypy_function_name', 'Text.set_font_properties')
        Text.set_font_properties.__dict__.__setitem__('stypy_param_names_list', ['fp'])
        Text.set_font_properties.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_font_properties.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_font_properties.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_font_properties.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_font_properties.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_font_properties.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_font_properties', ['fp'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_font_properties', localization, ['fp'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_font_properties(...)' code ##################

        unicode_142244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1254, 8), 'unicode', u'alias for set_fontproperties')
        
        # Call to set_fontproperties(...): (line 1255)
        # Processing the call arguments (line 1255)
        # Getting the type of 'fp' (line 1255)
        fp_142247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 32), 'fp', False)
        # Processing the call keyword arguments (line 1255)
        kwargs_142248 = {}
        # Getting the type of 'self' (line 1255)
        self_142245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 8), 'self', False)
        # Obtaining the member 'set_fontproperties' of a type (line 1255)
        set_fontproperties_142246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1255, 8), self_142245, 'set_fontproperties')
        # Calling set_fontproperties(args, kwargs) (line 1255)
        set_fontproperties_call_result_142249 = invoke(stypy.reporting.localization.Localization(__file__, 1255, 8), set_fontproperties_142246, *[fp_142247], **kwargs_142248)
        
        
        # ################# End of 'set_font_properties(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_font_properties' in the type store
        # Getting the type of 'stypy_return_type' (line 1253)
        stypy_return_type_142250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1253, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142250)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_font_properties'
        return stypy_return_type_142250


    @norecursion
    def set_usetex(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_usetex'
        module_type_store = module_type_store.open_function_context('set_usetex', 1257, 4, False)
        # Assigning a type to the variable 'self' (line 1258)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1258, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.set_usetex.__dict__.__setitem__('stypy_localization', localization)
        Text.set_usetex.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.set_usetex.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.set_usetex.__dict__.__setitem__('stypy_function_name', 'Text.set_usetex')
        Text.set_usetex.__dict__.__setitem__('stypy_param_names_list', ['usetex'])
        Text.set_usetex.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.set_usetex.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.set_usetex.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.set_usetex.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.set_usetex.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.set_usetex.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.set_usetex', ['usetex'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_usetex', localization, ['usetex'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_usetex(...)' code ##################

        unicode_142251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1263, (-1)), 'unicode', u"\n        Set this `Text` object to render using TeX (or not).\n\n        If `None` is given, the option will be reset to use the value of\n        `rcParams['text.usetex']`\n        ")
        
        # Type idiom detected: calculating its left and rigth part (line 1264)
        # Getting the type of 'usetex' (line 1264)
        usetex_142252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 11), 'usetex')
        # Getting the type of 'None' (line 1264)
        None_142253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 21), 'None')
        
        (may_be_142254, more_types_in_union_142255) = may_be_none(usetex_142252, None_142253)

        if may_be_142254:

            if more_types_in_union_142255:
                # Runtime conditional SSA (line 1264)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Attribute (line 1265):
            
            # Assigning a Subscript to a Attribute (line 1265):
            
            # Assigning a Subscript to a Attribute (line 1265):
            
            # Obtaining the type of the subscript
            unicode_142256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1265, 36), 'unicode', u'text.usetex')
            # Getting the type of 'rcParams' (line 1265)
            rcParams_142257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1265, 27), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 1265)
            getitem___142258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1265, 27), rcParams_142257, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1265)
            subscript_call_result_142259 = invoke(stypy.reporting.localization.Localization(__file__, 1265, 27), getitem___142258, unicode_142256)
            
            # Getting the type of 'self' (line 1265)
            self_142260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1265, 12), 'self')
            # Setting the type of the member '_usetex' of a type (line 1265)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1265, 12), self_142260, '_usetex', subscript_call_result_142259)

            if more_types_in_union_142255:
                # Runtime conditional SSA for else branch (line 1264)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_142254) or more_types_in_union_142255):
            
            # Assigning a Call to a Attribute (line 1267):
            
            # Assigning a Call to a Attribute (line 1267):
            
            # Assigning a Call to a Attribute (line 1267):
            
            # Call to bool(...): (line 1267)
            # Processing the call arguments (line 1267)
            # Getting the type of 'usetex' (line 1267)
            usetex_142262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1267, 32), 'usetex', False)
            # Processing the call keyword arguments (line 1267)
            kwargs_142263 = {}
            # Getting the type of 'bool' (line 1267)
            bool_142261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1267, 27), 'bool', False)
            # Calling bool(args, kwargs) (line 1267)
            bool_call_result_142264 = invoke(stypy.reporting.localization.Localization(__file__, 1267, 27), bool_142261, *[usetex_142262], **kwargs_142263)
            
            # Getting the type of 'self' (line 1267)
            self_142265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1267, 12), 'self')
            # Setting the type of the member '_usetex' of a type (line 1267)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1267, 12), self_142265, '_usetex', bool_call_result_142264)

            if (may_be_142254 and more_types_in_union_142255):
                # SSA join for if statement (line 1264)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 1268):
        
        # Assigning a Name to a Attribute (line 1268):
        
        # Assigning a Name to a Attribute (line 1268):
        # Getting the type of 'True' (line 1268)
        True_142266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1268, 21), 'True')
        # Getting the type of 'self' (line 1268)
        self_142267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1268, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1268)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1268, 8), self_142267, 'stale', True_142266)
        
        # ################# End of 'set_usetex(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_usetex' in the type store
        # Getting the type of 'stypy_return_type' (line 1257)
        stypy_return_type_142268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142268)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_usetex'
        return stypy_return_type_142268


    @norecursion
    def get_usetex(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_usetex'
        module_type_store = module_type_store.open_function_context('get_usetex', 1270, 4, False)
        # Assigning a type to the variable 'self' (line 1271)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1271, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Text.get_usetex.__dict__.__setitem__('stypy_localization', localization)
        Text.get_usetex.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Text.get_usetex.__dict__.__setitem__('stypy_type_store', module_type_store)
        Text.get_usetex.__dict__.__setitem__('stypy_function_name', 'Text.get_usetex')
        Text.get_usetex.__dict__.__setitem__('stypy_param_names_list', [])
        Text.get_usetex.__dict__.__setitem__('stypy_varargs_param_name', None)
        Text.get_usetex.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Text.get_usetex.__dict__.__setitem__('stypy_call_defaults', defaults)
        Text.get_usetex.__dict__.__setitem__('stypy_call_varargs', varargs)
        Text.get_usetex.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Text.get_usetex.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Text.get_usetex', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_usetex', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_usetex(...)' code ##################

        unicode_142269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1276, (-1)), 'unicode', u"\n        Return whether this `Text` object will render using TeX.\n\n        If the user has not manually set this value, it will default to\n        the value of `rcParams['text.usetex']`\n        ")
        
        # Type idiom detected: calculating its left and rigth part (line 1277)
        # Getting the type of 'self' (line 1277)
        self_142270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 11), 'self')
        # Obtaining the member '_usetex' of a type (line 1277)
        _usetex_142271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1277, 11), self_142270, '_usetex')
        # Getting the type of 'None' (line 1277)
        None_142272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 27), 'None')
        
        (may_be_142273, more_types_in_union_142274) = may_be_none(_usetex_142271, None_142272)

        if may_be_142273:

            if more_types_in_union_142274:
                # Runtime conditional SSA (line 1277)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Obtaining the type of the subscript
            unicode_142275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1278, 28), 'unicode', u'text.usetex')
            # Getting the type of 'rcParams' (line 1278)
            rcParams_142276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1278, 19), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 1278)
            getitem___142277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1278, 19), rcParams_142276, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1278)
            subscript_call_result_142278 = invoke(stypy.reporting.localization.Localization(__file__, 1278, 19), getitem___142277, unicode_142275)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1278)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1278, 12), 'stypy_return_type', subscript_call_result_142278)

            if more_types_in_union_142274:
                # Runtime conditional SSA for else branch (line 1277)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_142273) or more_types_in_union_142274):
            # Getting the type of 'self' (line 1280)
            self_142279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 19), 'self')
            # Obtaining the member '_usetex' of a type (line 1280)
            _usetex_142280 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1280, 19), self_142279, '_usetex')
            # Assigning a type to the variable 'stypy_return_type' (line 1280)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1280, 12), 'stypy_return_type', _usetex_142280)

            if (may_be_142273 and more_types_in_union_142274):
                # SSA join for if statement (line 1277)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'get_usetex(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_usetex' in the type store
        # Getting the type of 'stypy_return_type' (line 1270)
        stypy_return_type_142281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1270, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142281)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_usetex'
        return stypy_return_type_142281


# Assigning a type to the variable 'Text' (line 178)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 178, 0), 'Text', Text)

# Assigning a Num to a Name (line 182):
int_142282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 182, 13), 'int')
# Getting the type of 'Text'
Text_142283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Text')
# Setting the type of the member 'zorder' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Text_142283, 'zorder', int_142282)

# Assigning a Call to a Name (line 183):

# Call to maxdict(...): (line 183)
# Processing the call arguments (line 183)
int_142285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 183, 22), 'int')
# Processing the call keyword arguments (line 183)
kwargs_142286 = {}
# Getting the type of 'maxdict' (line 183)
maxdict_142284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 14), 'maxdict', False)
# Calling maxdict(args, kwargs) (line 183)
maxdict_call_result_142287 = invoke(stypy.reporting.localization.Localization(__file__, 183, 14), maxdict_142284, *[int_142285], **kwargs_142286)

# Getting the type of 'Text'
Text_142288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Text')
# Setting the type of the member '_cached' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Text_142288, '_cached', maxdict_call_result_142287)

# Call to update(...): (line 1282)
# Processing the call keyword arguments (line 1282)

# Call to kwdoc(...): (line 1282)
# Processing the call arguments (line 1282)
# Getting the type of 'Text' (line 1282)
Text_142294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1282, 43), 'Text', False)
# Processing the call keyword arguments (line 1282)
kwargs_142295 = {}
# Getting the type of 'artist' (line 1282)
artist_142292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1282, 30), 'artist', False)
# Obtaining the member 'kwdoc' of a type (line 1282)
kwdoc_142293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1282, 30), artist_142292, 'kwdoc')
# Calling kwdoc(args, kwargs) (line 1282)
kwdoc_call_result_142296 = invoke(stypy.reporting.localization.Localization(__file__, 1282, 30), kwdoc_142293, *[Text_142294], **kwargs_142295)

keyword_142297 = kwdoc_call_result_142296
kwargs_142298 = {'Text': keyword_142297}
# Getting the type of 'docstring' (line 1282)
docstring_142289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1282, 0), 'docstring', False)
# Obtaining the member 'interpd' of a type (line 1282)
interpd_142290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1282, 0), docstring_142289, 'interpd')
# Obtaining the member 'update' of a type (line 1282)
update_142291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1282, 0), interpd_142290, 'update')
# Calling update(args, kwargs) (line 1282)
update_call_result_142299 = invoke(stypy.reporting.localization.Localization(__file__, 1282, 0), update_142291, *[], **kwargs_142298)


# Call to dedent_interpd(...): (line 1283)
# Processing the call arguments (line 1283)
# Getting the type of 'Text' (line 1283)
Text_142302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 25), 'Text', False)
# Obtaining the member '__init__' of a type (line 1283)
init___142303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1283, 25), Text_142302, '__init__')
# Processing the call keyword arguments (line 1283)
kwargs_142304 = {}
# Getting the type of 'docstring' (line 1283)
docstring_142300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 0), 'docstring', False)
# Obtaining the member 'dedent_interpd' of a type (line 1283)
dedent_interpd_142301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1283, 0), docstring_142300, 'dedent_interpd')
# Calling dedent_interpd(args, kwargs) (line 1283)
dedent_interpd_call_result_142305 = invoke(stypy.reporting.localization.Localization(__file__, 1283, 0), dedent_interpd_142301, *[init___142303], **kwargs_142304)

# Declaration of the 'TextWithDash' class
# Getting the type of 'Text' (line 1286)
Text_142306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 19), 'Text')

class TextWithDash(Text_142306, ):
    unicode_142307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1339, (-1)), 'unicode', u'\n    This is basically a :class:`~matplotlib.text.Text` with a dash\n    (drawn with a :class:`~matplotlib.lines.Line2D`) before/after\n    it. It is intended to be a drop-in replacement for\n    :class:`~matplotlib.text.Text`, and should behave identically to\n    it when *dashlength* = 0.0.\n\n    The dash always comes between the point specified by\n    :meth:`~matplotlib.text.Text.set_position` and the text. When a\n    dash exists, the text alignment arguments (*horizontalalignment*,\n    *verticalalignment*) are ignored.\n\n    *dashlength* is the length of the dash in canvas units.\n    (default = 0.0).\n\n    *dashdirection* is one of 0 or 1, where 0 draws the dash after the\n    text and 1 before.  (default = 0).\n\n    *dashrotation* specifies the rotation of the dash, and should\n    generally stay *None*. In this case\n    :meth:`~matplotlib.text.TextWithDash.get_dashrotation` returns\n    :meth:`~matplotlib.text.Text.get_rotation`.  (i.e., the dash takes\n    its rotation from the text\'s rotation). Because the text center is\n    projected onto the dash, major deviations in the rotation cause\n    what may be considered visually unappealing results.\n    (default = *None*)\n\n    *dashpad* is a padding length to add (or subtract) space\n    between the text and the dash, in canvas units.\n    (default = 3)\n\n    *dashpush* "pushes" the dash and text away from the point\n    specified by :meth:`~matplotlib.text.Text.set_position` by the\n    amount in canvas units.  (default = 0)\n\n    .. note::\n\n        The alignment of the two objects is based on the bounding box\n        of the :class:`~matplotlib.text.Text`, as obtained by\n        :meth:`~matplotlib.artist.Artist.get_window_extent`.  This, in\n        turn, appears to depend on the font metrics as given by the\n        rendering backend. Hence the quality of the "centering" of the\n        label text with respect to the dash varies depending on the\n        backend used.\n\n    .. note::\n\n        I\'m not sure that I got the\n        :meth:`~matplotlib.text.TextWithDash.get_window_extent` right,\n        or whether that\'s sufficient for providing the object bounding\n        box.\n\n    ')
    
    # Assigning a Str to a Name (line 1340):
    
    # Assigning a Str to a Name (line 1340):

    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 1342, 4, False)
        # Assigning a type to the variable 'self' (line 1343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1343, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextWithDash.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        TextWithDash.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextWithDash.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextWithDash.stypy__str__.__dict__.__setitem__('stypy_function_name', 'TextWithDash.stypy__str__')
        TextWithDash.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        TextWithDash.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextWithDash.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextWithDash.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextWithDash.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextWithDash.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextWithDash.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextWithDash.stypy__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        unicode_142308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1343, 15), 'unicode', u'TextWithDash(%g,%g,%s)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1343)
        tuple_142309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1343, 43), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1343)
        # Adding element type (line 1343)
        # Getting the type of 'self' (line 1343)
        self_142310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 43), 'self')
        # Obtaining the member '_x' of a type (line 1343)
        _x_142311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1343, 43), self_142310, '_x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1343, 43), tuple_142309, _x_142311)
        # Adding element type (line 1343)
        # Getting the type of 'self' (line 1343)
        self_142312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 52), 'self')
        # Obtaining the member '_y' of a type (line 1343)
        _y_142313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1343, 52), self_142312, '_y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1343, 43), tuple_142309, _y_142313)
        # Adding element type (line 1343)
        
        # Call to repr(...): (line 1343)
        # Processing the call arguments (line 1343)
        # Getting the type of 'self' (line 1343)
        self_142315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 66), 'self', False)
        # Obtaining the member '_text' of a type (line 1343)
        _text_142316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1343, 66), self_142315, '_text')
        # Processing the call keyword arguments (line 1343)
        kwargs_142317 = {}
        # Getting the type of 'repr' (line 1343)
        repr_142314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 61), 'repr', False)
        # Calling repr(args, kwargs) (line 1343)
        repr_call_result_142318 = invoke(stypy.reporting.localization.Localization(__file__, 1343, 61), repr_142314, *[_text_142316], **kwargs_142317)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1343, 43), tuple_142309, repr_call_result_142318)
        
        # Applying the binary operator '%' (line 1343)
        result_mod_142319 = python_operator(stypy.reporting.localization.Localization(__file__, 1343, 15), '%', unicode_142308, tuple_142309)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1343, 8), 'stypy_return_type', result_mod_142319)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 1342)
        stypy_return_type_142320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142320)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_142320


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_142321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1346, 19), 'int')
        int_142322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1346, 24), 'int')
        unicode_142323 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1346, 32), 'unicode', u'')
        # Getting the type of 'None' (line 1347)
        None_142324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 23), 'None')
        unicode_142325 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1348, 35), 'unicode', u'center')
        unicode_142326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1349, 37), 'unicode', u'center')
        # Getting the type of 'None' (line 1350)
        None_142327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 32), 'None')
        # Getting the type of 'None' (line 1351)
        None_142328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 32), 'None')
        # Getting the type of 'None' (line 1352)
        None_142329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 26), 'None')
        # Getting the type of 'None' (line 1353)
        None_142330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1353, 29), 'None')
        float_142331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1354, 28), 'float')
        int_142332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1355, 31), 'int')
        # Getting the type of 'None' (line 1356)
        None_142333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 30), 'None')
        int_142334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1357, 25), 'int')
        int_142335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1358, 26), 'int')
        defaults = [int_142321, int_142322, unicode_142323, None_142324, unicode_142325, unicode_142326, None_142327, None_142328, None_142329, None_142330, float_142331, int_142332, None_142333, int_142334, int_142335]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1345, 4, False)
        # Assigning a type to the variable 'self' (line 1346)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1346, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextWithDash.__init__', ['x', 'y', 'text', 'color', 'verticalalignment', 'horizontalalignment', 'multialignment', 'fontproperties', 'rotation', 'linespacing', 'dashlength', 'dashdirection', 'dashrotation', 'dashpad', 'dashpush'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['x', 'y', 'text', 'color', 'verticalalignment', 'horizontalalignment', 'multialignment', 'fontproperties', 'rotation', 'linespacing', 'dashlength', 'dashdirection', 'dashrotation', 'dashpad', 'dashpush'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1361)
        # Processing the call arguments (line 1361)
        # Getting the type of 'self' (line 1361)
        self_142338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 22), 'self', False)
        # Processing the call keyword arguments (line 1361)
        # Getting the type of 'x' (line 1361)
        x_142339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 30), 'x', False)
        keyword_142340 = x_142339
        # Getting the type of 'y' (line 1361)
        y_142341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 35), 'y', False)
        keyword_142342 = y_142341
        # Getting the type of 'text' (line 1361)
        text_142343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 43), 'text', False)
        keyword_142344 = text_142343
        # Getting the type of 'color' (line 1361)
        color_142345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 55), 'color', False)
        keyword_142346 = color_142345
        # Getting the type of 'verticalalignment' (line 1362)
        verticalalignment_142347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 40), 'verticalalignment', False)
        keyword_142348 = verticalalignment_142347
        # Getting the type of 'horizontalalignment' (line 1363)
        horizontalalignment_142349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 42), 'horizontalalignment', False)
        keyword_142350 = horizontalalignment_142349
        # Getting the type of 'multialignment' (line 1364)
        multialignment_142351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1364, 37), 'multialignment', False)
        keyword_142352 = multialignment_142351
        # Getting the type of 'fontproperties' (line 1365)
        fontproperties_142353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 37), 'fontproperties', False)
        keyword_142354 = fontproperties_142353
        # Getting the type of 'rotation' (line 1366)
        rotation_142355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 31), 'rotation', False)
        keyword_142356 = rotation_142355
        # Getting the type of 'linespacing' (line 1367)
        linespacing_142357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 34), 'linespacing', False)
        keyword_142358 = linespacing_142357
        kwargs_142359 = {'linespacing': keyword_142358, 'color': keyword_142346, 'text': keyword_142344, 'multialignment': keyword_142352, 'fontproperties': keyword_142354, 'verticalalignment': keyword_142348, 'y': keyword_142342, 'x': keyword_142340, 'rotation': keyword_142356, 'horizontalalignment': keyword_142350}
        # Getting the type of 'Text' (line 1361)
        Text_142336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 8), 'Text', False)
        # Obtaining the member '__init__' of a type (line 1361)
        init___142337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1361, 8), Text_142336, '__init__')
        # Calling __init__(args, kwargs) (line 1361)
        init___call_result_142360 = invoke(stypy.reporting.localization.Localization(__file__, 1361, 8), init___142337, *[self_142338], **kwargs_142359)
        
        
        # Assigning a Call to a Attribute (line 1373):
        
        # Assigning a Call to a Attribute (line 1373):
        
        # Assigning a Call to a Attribute (line 1373):
        
        # Call to Line2D(...): (line 1373)
        # Processing the call keyword arguments (line 1373)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1373)
        tuple_142362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1373, 38), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1373)
        # Adding element type (line 1373)
        # Getting the type of 'x' (line 1373)
        x_142363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1373, 38), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1373, 38), tuple_142362, x_142363)
        # Adding element type (line 1373)
        # Getting the type of 'x' (line 1373)
        x_142364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1373, 41), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1373, 38), tuple_142362, x_142364)
        
        keyword_142365 = tuple_142362
        
        # Obtaining an instance of the builtin type 'tuple' (line 1374)
        tuple_142366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1374, 38), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1374)
        # Adding element type (line 1374)
        # Getting the type of 'y' (line 1374)
        y_142367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1374, 38), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1374, 38), tuple_142366, y_142367)
        # Adding element type (line 1374)
        # Getting the type of 'y' (line 1374)
        y_142368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1374, 41), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1374, 38), tuple_142366, y_142368)
        
        keyword_142369 = tuple_142366
        unicode_142370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1375, 37), 'unicode', u'k')
        keyword_142371 = unicode_142370
        unicode_142372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1376, 41), 'unicode', u'-')
        keyword_142373 = unicode_142372
        kwargs_142374 = {'color': keyword_142371, 'linestyle': keyword_142373, 'ydata': keyword_142369, 'xdata': keyword_142365}
        # Getting the type of 'Line2D' (line 1373)
        Line2D_142361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1373, 24), 'Line2D', False)
        # Calling Line2D(args, kwargs) (line 1373)
        Line2D_call_result_142375 = invoke(stypy.reporting.localization.Localization(__file__, 1373, 24), Line2D_142361, *[], **kwargs_142374)
        
        # Getting the type of 'self' (line 1373)
        self_142376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1373, 8), 'self')
        # Setting the type of the member 'dashline' of a type (line 1373)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1373, 8), self_142376, 'dashline', Line2D_call_result_142375)
        
        # Assigning a Call to a Attribute (line 1378):
        
        # Assigning a Call to a Attribute (line 1378):
        
        # Assigning a Call to a Attribute (line 1378):
        
        # Call to float(...): (line 1378)
        # Processing the call arguments (line 1378)
        # Getting the type of 'x' (line 1378)
        x_142378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 28), 'x', False)
        # Processing the call keyword arguments (line 1378)
        kwargs_142379 = {}
        # Getting the type of 'float' (line 1378)
        float_142377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 22), 'float', False)
        # Calling float(args, kwargs) (line 1378)
        float_call_result_142380 = invoke(stypy.reporting.localization.Localization(__file__, 1378, 22), float_142377, *[x_142378], **kwargs_142379)
        
        # Getting the type of 'self' (line 1378)
        self_142381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 8), 'self')
        # Setting the type of the member '_dashx' of a type (line 1378)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1378, 8), self_142381, '_dashx', float_call_result_142380)
        
        # Assigning a Call to a Attribute (line 1379):
        
        # Assigning a Call to a Attribute (line 1379):
        
        # Assigning a Call to a Attribute (line 1379):
        
        # Call to float(...): (line 1379)
        # Processing the call arguments (line 1379)
        # Getting the type of 'y' (line 1379)
        y_142383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 28), 'y', False)
        # Processing the call keyword arguments (line 1379)
        kwargs_142384 = {}
        # Getting the type of 'float' (line 1379)
        float_142382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 22), 'float', False)
        # Calling float(args, kwargs) (line 1379)
        float_call_result_142385 = invoke(stypy.reporting.localization.Localization(__file__, 1379, 22), float_142382, *[y_142383], **kwargs_142384)
        
        # Getting the type of 'self' (line 1379)
        self_142386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 8), 'self')
        # Setting the type of the member '_dashy' of a type (line 1379)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1379, 8), self_142386, '_dashy', float_call_result_142385)
        
        # Assigning a Name to a Attribute (line 1380):
        
        # Assigning a Name to a Attribute (line 1380):
        
        # Assigning a Name to a Attribute (line 1380):
        # Getting the type of 'dashlength' (line 1380)
        dashlength_142387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1380, 27), 'dashlength')
        # Getting the type of 'self' (line 1380)
        self_142388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1380, 8), 'self')
        # Setting the type of the member '_dashlength' of a type (line 1380)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1380, 8), self_142388, '_dashlength', dashlength_142387)
        
        # Assigning a Name to a Attribute (line 1381):
        
        # Assigning a Name to a Attribute (line 1381):
        
        # Assigning a Name to a Attribute (line 1381):
        # Getting the type of 'dashdirection' (line 1381)
        dashdirection_142389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 30), 'dashdirection')
        # Getting the type of 'self' (line 1381)
        self_142390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 8), 'self')
        # Setting the type of the member '_dashdirection' of a type (line 1381)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1381, 8), self_142390, '_dashdirection', dashdirection_142389)
        
        # Assigning a Name to a Attribute (line 1382):
        
        # Assigning a Name to a Attribute (line 1382):
        
        # Assigning a Name to a Attribute (line 1382):
        # Getting the type of 'dashrotation' (line 1382)
        dashrotation_142391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 29), 'dashrotation')
        # Getting the type of 'self' (line 1382)
        self_142392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 8), 'self')
        # Setting the type of the member '_dashrotation' of a type (line 1382)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1382, 8), self_142392, '_dashrotation', dashrotation_142391)
        
        # Assigning a Name to a Attribute (line 1383):
        
        # Assigning a Name to a Attribute (line 1383):
        
        # Assigning a Name to a Attribute (line 1383):
        # Getting the type of 'dashpad' (line 1383)
        dashpad_142393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 24), 'dashpad')
        # Getting the type of 'self' (line 1383)
        self_142394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 8), 'self')
        # Setting the type of the member '_dashpad' of a type (line 1383)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1383, 8), self_142394, '_dashpad', dashpad_142393)
        
        # Assigning a Name to a Attribute (line 1384):
        
        # Assigning a Name to a Attribute (line 1384):
        
        # Assigning a Name to a Attribute (line 1384):
        # Getting the type of 'dashpush' (line 1384)
        dashpush_142395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 25), 'dashpush')
        # Getting the type of 'self' (line 1384)
        self_142396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 8), 'self')
        # Setting the type of the member '_dashpush' of a type (line 1384)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1384, 8), self_142396, '_dashpush', dashpush_142395)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def get_unitless_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_unitless_position'
        module_type_store = module_type_store.open_function_context('get_unitless_position', 1388, 4, False)
        # Assigning a type to the variable 'self' (line 1389)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1389, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextWithDash.get_unitless_position.__dict__.__setitem__('stypy_localization', localization)
        TextWithDash.get_unitless_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextWithDash.get_unitless_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextWithDash.get_unitless_position.__dict__.__setitem__('stypy_function_name', 'TextWithDash.get_unitless_position')
        TextWithDash.get_unitless_position.__dict__.__setitem__('stypy_param_names_list', [])
        TextWithDash.get_unitless_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextWithDash.get_unitless_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextWithDash.get_unitless_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextWithDash.get_unitless_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextWithDash.get_unitless_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextWithDash.get_unitless_position.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextWithDash.get_unitless_position', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_unitless_position', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_unitless_position(...)' code ##################

        unicode_142397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1389, 8), 'unicode', u'Return the unitless position of the text as a tuple (*x*, *y*)')
        
        # Assigning a Call to a Name (line 1392):
        
        # Assigning a Call to a Name (line 1392):
        
        # Assigning a Call to a Name (line 1392):
        
        # Call to float(...): (line 1392)
        # Processing the call arguments (line 1392)
        
        # Call to convert_xunits(...): (line 1392)
        # Processing the call arguments (line 1392)
        # Getting the type of 'self' (line 1392)
        self_142401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 38), 'self', False)
        # Obtaining the member '_dashx' of a type (line 1392)
        _dashx_142402 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1392, 38), self_142401, '_dashx')
        # Processing the call keyword arguments (line 1392)
        kwargs_142403 = {}
        # Getting the type of 'self' (line 1392)
        self_142399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 18), 'self', False)
        # Obtaining the member 'convert_xunits' of a type (line 1392)
        convert_xunits_142400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1392, 18), self_142399, 'convert_xunits')
        # Calling convert_xunits(args, kwargs) (line 1392)
        convert_xunits_call_result_142404 = invoke(stypy.reporting.localization.Localization(__file__, 1392, 18), convert_xunits_142400, *[_dashx_142402], **kwargs_142403)
        
        # Processing the call keyword arguments (line 1392)
        kwargs_142405 = {}
        # Getting the type of 'float' (line 1392)
        float_142398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 12), 'float', False)
        # Calling float(args, kwargs) (line 1392)
        float_call_result_142406 = invoke(stypy.reporting.localization.Localization(__file__, 1392, 12), float_142398, *[convert_xunits_call_result_142404], **kwargs_142405)
        
        # Assigning a type to the variable 'x' (line 1392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1392, 8), 'x', float_call_result_142406)
        
        # Assigning a Call to a Name (line 1393):
        
        # Assigning a Call to a Name (line 1393):
        
        # Assigning a Call to a Name (line 1393):
        
        # Call to float(...): (line 1393)
        # Processing the call arguments (line 1393)
        
        # Call to convert_yunits(...): (line 1393)
        # Processing the call arguments (line 1393)
        # Getting the type of 'self' (line 1393)
        self_142410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 38), 'self', False)
        # Obtaining the member '_dashy' of a type (line 1393)
        _dashy_142411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1393, 38), self_142410, '_dashy')
        # Processing the call keyword arguments (line 1393)
        kwargs_142412 = {}
        # Getting the type of 'self' (line 1393)
        self_142408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 18), 'self', False)
        # Obtaining the member 'convert_yunits' of a type (line 1393)
        convert_yunits_142409 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1393, 18), self_142408, 'convert_yunits')
        # Calling convert_yunits(args, kwargs) (line 1393)
        convert_yunits_call_result_142413 = invoke(stypy.reporting.localization.Localization(__file__, 1393, 18), convert_yunits_142409, *[_dashy_142411], **kwargs_142412)
        
        # Processing the call keyword arguments (line 1393)
        kwargs_142414 = {}
        # Getting the type of 'float' (line 1393)
        float_142407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 12), 'float', False)
        # Calling float(args, kwargs) (line 1393)
        float_call_result_142415 = invoke(stypy.reporting.localization.Localization(__file__, 1393, 12), float_142407, *[convert_yunits_call_result_142413], **kwargs_142414)
        
        # Assigning a type to the variable 'y' (line 1393)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1393, 8), 'y', float_call_result_142415)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1394)
        tuple_142416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1394, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1394)
        # Adding element type (line 1394)
        # Getting the type of 'x' (line 1394)
        x_142417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 15), 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1394, 15), tuple_142416, x_142417)
        # Adding element type (line 1394)
        # Getting the type of 'y' (line 1394)
        y_142418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 18), 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1394, 15), tuple_142416, y_142418)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1394, 8), 'stypy_return_type', tuple_142416)
        
        # ################# End of 'get_unitless_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_unitless_position' in the type store
        # Getting the type of 'stypy_return_type' (line 1388)
        stypy_return_type_142419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142419)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_unitless_position'
        return stypy_return_type_142419


    @norecursion
    def get_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_position'
        module_type_store = module_type_store.open_function_context('get_position', 1396, 4, False)
        # Assigning a type to the variable 'self' (line 1397)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1397, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextWithDash.get_position.__dict__.__setitem__('stypy_localization', localization)
        TextWithDash.get_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextWithDash.get_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextWithDash.get_position.__dict__.__setitem__('stypy_function_name', 'TextWithDash.get_position')
        TextWithDash.get_position.__dict__.__setitem__('stypy_param_names_list', [])
        TextWithDash.get_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextWithDash.get_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextWithDash.get_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextWithDash.get_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextWithDash.get_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextWithDash.get_position.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextWithDash.get_position', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_position', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_position(...)' code ##################

        unicode_142420 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1397, 8), 'unicode', u'Return the position of the text as a tuple (*x*, *y*)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1400)
        tuple_142421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1400)
        # Adding element type (line 1400)
        # Getting the type of 'self' (line 1400)
        self_142422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 15), 'self')
        # Obtaining the member '_dashx' of a type (line 1400)
        _dashx_142423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1400, 15), self_142422, '_dashx')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1400, 15), tuple_142421, _dashx_142423)
        # Adding element type (line 1400)
        # Getting the type of 'self' (line 1400)
        self_142424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 28), 'self')
        # Obtaining the member '_dashy' of a type (line 1400)
        _dashy_142425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1400, 28), self_142424, '_dashy')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1400, 15), tuple_142421, _dashy_142425)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1400)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1400, 8), 'stypy_return_type', tuple_142421)
        
        # ################# End of 'get_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_position' in the type store
        # Getting the type of 'stypy_return_type' (line 1396)
        stypy_return_type_142426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1396, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142426)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_position'
        return stypy_return_type_142426


    @norecursion
    def get_prop_tup(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1402)
        None_142427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1402, 36), 'None')
        defaults = [None_142427]
        # Create a new context for function 'get_prop_tup'
        module_type_store = module_type_store.open_function_context('get_prop_tup', 1402, 4, False)
        # Assigning a type to the variable 'self' (line 1403)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1403, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextWithDash.get_prop_tup.__dict__.__setitem__('stypy_localization', localization)
        TextWithDash.get_prop_tup.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextWithDash.get_prop_tup.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextWithDash.get_prop_tup.__dict__.__setitem__('stypy_function_name', 'TextWithDash.get_prop_tup')
        TextWithDash.get_prop_tup.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        TextWithDash.get_prop_tup.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextWithDash.get_prop_tup.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextWithDash.get_prop_tup.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextWithDash.get_prop_tup.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextWithDash.get_prop_tup.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextWithDash.get_prop_tup.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextWithDash.get_prop_tup', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_prop_tup', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_prop_tup(...)' code ##################

        unicode_142428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1409, (-1)), 'unicode', u'\n        Return a hashable tuple of properties.\n\n        Not intended to be human readable, but useful for backends who\n        want to cache derived information about text (e.g., layouts) and\n        need to know if the text has changed.\n        ')
        
        # Assigning a ListComp to a Name (line 1410):
        
        # Assigning a ListComp to a Name (line 1410):
        
        # Assigning a ListComp to a Name (line 1410):
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to get_prop_tup(...): (line 1410)
        # Processing the call arguments (line 1410)
        # Getting the type of 'self' (line 1410)
        self_142432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1410, 46), 'self', False)
        # Processing the call keyword arguments (line 1410)
        # Getting the type of 'renderer' (line 1410)
        renderer_142433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1410, 61), 'renderer', False)
        keyword_142434 = renderer_142433
        kwargs_142435 = {'renderer': keyword_142434}
        # Getting the type of 'Text' (line 1410)
        Text_142430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1410, 28), 'Text', False)
        # Obtaining the member 'get_prop_tup' of a type (line 1410)
        get_prop_tup_142431 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1410, 28), Text_142430, 'get_prop_tup')
        # Calling get_prop_tup(args, kwargs) (line 1410)
        get_prop_tup_call_result_142436 = invoke(stypy.reporting.localization.Localization(__file__, 1410, 28), get_prop_tup_142431, *[self_142432], **kwargs_142435)
        
        comprehension_142437 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1410, 17), get_prop_tup_call_result_142436)
        # Assigning a type to the variable 'p' (line 1410)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1410, 17), 'p', comprehension_142437)
        # Getting the type of 'p' (line 1410)
        p_142429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1410, 17), 'p')
        list_142438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1410, 17), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1410, 17), list_142438, p_142429)
        # Assigning a type to the variable 'props' (line 1410)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1410, 8), 'props', list_142438)
        
        # Call to extend(...): (line 1411)
        # Processing the call arguments (line 1411)
        
        # Obtaining an instance of the builtin type 'list' (line 1411)
        list_142441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1411, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1411)
        # Adding element type (line 1411)
        # Getting the type of 'self' (line 1411)
        self_142442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 22), 'self', False)
        # Obtaining the member '_x' of a type (line 1411)
        _x_142443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1411, 22), self_142442, '_x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1411, 21), list_142441, _x_142443)
        # Adding element type (line 1411)
        # Getting the type of 'self' (line 1411)
        self_142444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 31), 'self', False)
        # Obtaining the member '_y' of a type (line 1411)
        _y_142445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1411, 31), self_142444, '_y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1411, 21), list_142441, _y_142445)
        # Adding element type (line 1411)
        # Getting the type of 'self' (line 1411)
        self_142446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 40), 'self', False)
        # Obtaining the member '_dashlength' of a type (line 1411)
        _dashlength_142447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1411, 40), self_142446, '_dashlength')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1411, 21), list_142441, _dashlength_142447)
        # Adding element type (line 1411)
        # Getting the type of 'self' (line 1412)
        self_142448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 22), 'self', False)
        # Obtaining the member '_dashdirection' of a type (line 1412)
        _dashdirection_142449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1412, 22), self_142448, '_dashdirection')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1411, 21), list_142441, _dashdirection_142449)
        # Adding element type (line 1411)
        # Getting the type of 'self' (line 1412)
        self_142450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 43), 'self', False)
        # Obtaining the member '_dashrotation' of a type (line 1412)
        _dashrotation_142451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1412, 43), self_142450, '_dashrotation')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1411, 21), list_142441, _dashrotation_142451)
        # Adding element type (line 1411)
        # Getting the type of 'self' (line 1412)
        self_142452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 63), 'self', False)
        # Obtaining the member '_dashpad' of a type (line 1412)
        _dashpad_142453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1412, 63), self_142452, '_dashpad')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1411, 21), list_142441, _dashpad_142453)
        # Adding element type (line 1411)
        # Getting the type of 'self' (line 1413)
        self_142454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 22), 'self', False)
        # Obtaining the member '_dashpush' of a type (line 1413)
        _dashpush_142455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1413, 22), self_142454, '_dashpush')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1411, 21), list_142441, _dashpush_142455)
        
        # Processing the call keyword arguments (line 1411)
        kwargs_142456 = {}
        # Getting the type of 'props' (line 1411)
        props_142439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 8), 'props', False)
        # Obtaining the member 'extend' of a type (line 1411)
        extend_142440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1411, 8), props_142439, 'extend')
        # Calling extend(args, kwargs) (line 1411)
        extend_call_result_142457 = invoke(stypy.reporting.localization.Localization(__file__, 1411, 8), extend_142440, *[list_142441], **kwargs_142456)
        
        
        # Call to tuple(...): (line 1414)
        # Processing the call arguments (line 1414)
        # Getting the type of 'props' (line 1414)
        props_142459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 21), 'props', False)
        # Processing the call keyword arguments (line 1414)
        kwargs_142460 = {}
        # Getting the type of 'tuple' (line 1414)
        tuple_142458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 15), 'tuple', False)
        # Calling tuple(args, kwargs) (line 1414)
        tuple_call_result_142461 = invoke(stypy.reporting.localization.Localization(__file__, 1414, 15), tuple_142458, *[props_142459], **kwargs_142460)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1414)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1414, 8), 'stypy_return_type', tuple_call_result_142461)
        
        # ################# End of 'get_prop_tup(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_prop_tup' in the type store
        # Getting the type of 'stypy_return_type' (line 1402)
        stypy_return_type_142462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1402, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142462)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_prop_tup'
        return stypy_return_type_142462


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 1416, 4, False)
        # Assigning a type to the variable 'self' (line 1417)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1417, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextWithDash.draw.__dict__.__setitem__('stypy_localization', localization)
        TextWithDash.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextWithDash.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextWithDash.draw.__dict__.__setitem__('stypy_function_name', 'TextWithDash.draw')
        TextWithDash.draw.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        TextWithDash.draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextWithDash.draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextWithDash.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextWithDash.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextWithDash.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextWithDash.draw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextWithDash.draw', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        unicode_142463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1419, (-1)), 'unicode', u'\n        Draw the :class:`TextWithDash` object to the given *renderer*.\n        ')
        
        # Call to update_coords(...): (line 1420)
        # Processing the call arguments (line 1420)
        # Getting the type of 'renderer' (line 1420)
        renderer_142466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 27), 'renderer', False)
        # Processing the call keyword arguments (line 1420)
        kwargs_142467 = {}
        # Getting the type of 'self' (line 1420)
        self_142464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 8), 'self', False)
        # Obtaining the member 'update_coords' of a type (line 1420)
        update_coords_142465 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1420, 8), self_142464, 'update_coords')
        # Calling update_coords(args, kwargs) (line 1420)
        update_coords_call_result_142468 = invoke(stypy.reporting.localization.Localization(__file__, 1420, 8), update_coords_142465, *[renderer_142466], **kwargs_142467)
        
        
        # Call to draw(...): (line 1421)
        # Processing the call arguments (line 1421)
        # Getting the type of 'self' (line 1421)
        self_142471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 18), 'self', False)
        # Getting the type of 'renderer' (line 1421)
        renderer_142472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 24), 'renderer', False)
        # Processing the call keyword arguments (line 1421)
        kwargs_142473 = {}
        # Getting the type of 'Text' (line 1421)
        Text_142469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 8), 'Text', False)
        # Obtaining the member 'draw' of a type (line 1421)
        draw_142470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1421, 8), Text_142469, 'draw')
        # Calling draw(args, kwargs) (line 1421)
        draw_call_result_142474 = invoke(stypy.reporting.localization.Localization(__file__, 1421, 8), draw_142470, *[self_142471, renderer_142472], **kwargs_142473)
        
        
        
        
        # Call to get_dashlength(...): (line 1422)
        # Processing the call keyword arguments (line 1422)
        kwargs_142477 = {}
        # Getting the type of 'self' (line 1422)
        self_142475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1422, 11), 'self', False)
        # Obtaining the member 'get_dashlength' of a type (line 1422)
        get_dashlength_142476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1422, 11), self_142475, 'get_dashlength')
        # Calling get_dashlength(args, kwargs) (line 1422)
        get_dashlength_call_result_142478 = invoke(stypy.reporting.localization.Localization(__file__, 1422, 11), get_dashlength_142476, *[], **kwargs_142477)
        
        float_142479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1422, 35), 'float')
        # Applying the binary operator '>' (line 1422)
        result_gt_142480 = python_operator(stypy.reporting.localization.Localization(__file__, 1422, 11), '>', get_dashlength_call_result_142478, float_142479)
        
        # Testing the type of an if condition (line 1422)
        if_condition_142481 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1422, 8), result_gt_142480)
        # Assigning a type to the variable 'if_condition_142481' (line 1422)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1422, 8), 'if_condition_142481', if_condition_142481)
        # SSA begins for if statement (line 1422)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw(...): (line 1423)
        # Processing the call arguments (line 1423)
        # Getting the type of 'renderer' (line 1423)
        renderer_142485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1423, 31), 'renderer', False)
        # Processing the call keyword arguments (line 1423)
        kwargs_142486 = {}
        # Getting the type of 'self' (line 1423)
        self_142482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1423, 12), 'self', False)
        # Obtaining the member 'dashline' of a type (line 1423)
        dashline_142483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1423, 12), self_142482, 'dashline')
        # Obtaining the member 'draw' of a type (line 1423)
        draw_142484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1423, 12), dashline_142483, 'draw')
        # Calling draw(args, kwargs) (line 1423)
        draw_call_result_142487 = invoke(stypy.reporting.localization.Localization(__file__, 1423, 12), draw_142484, *[renderer_142485], **kwargs_142486)
        
        # SSA join for if statement (line 1422)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1424):
        
        # Assigning a Name to a Attribute (line 1424):
        
        # Assigning a Name to a Attribute (line 1424):
        # Getting the type of 'False' (line 1424)
        False_142488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1424, 21), 'False')
        # Getting the type of 'self' (line 1424)
        self_142489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1424, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1424)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1424, 8), self_142489, 'stale', False_142488)
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 1416)
        stypy_return_type_142490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142490)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_142490


    @norecursion
    def update_coords(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'update_coords'
        module_type_store = module_type_store.open_function_context('update_coords', 1426, 4, False)
        # Assigning a type to the variable 'self' (line 1427)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1427, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextWithDash.update_coords.__dict__.__setitem__('stypy_localization', localization)
        TextWithDash.update_coords.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextWithDash.update_coords.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextWithDash.update_coords.__dict__.__setitem__('stypy_function_name', 'TextWithDash.update_coords')
        TextWithDash.update_coords.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        TextWithDash.update_coords.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextWithDash.update_coords.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextWithDash.update_coords.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextWithDash.update_coords.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextWithDash.update_coords.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextWithDash.update_coords.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextWithDash.update_coords', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update_coords', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update_coords(...)' code ##################

        unicode_142491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1432, (-1)), 'unicode', u"\n        Computes the actual *x*, *y* coordinates for text based on the\n        input *x*, *y* and the *dashlength*. Since the rotation is\n        with respect to the actual canvas's coordinates we need to map\n        back and forth.\n        ")
        
        # Assigning a Call to a Tuple (line 1433):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to get_unitless_position(...): (line 1433)
        # Processing the call keyword arguments (line 1433)
        kwargs_142494 = {}
        # Getting the type of 'self' (line 1433)
        self_142492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1433, 23), 'self', False)
        # Obtaining the member 'get_unitless_position' of a type (line 1433)
        get_unitless_position_142493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1433, 23), self_142492, 'get_unitless_position')
        # Calling get_unitless_position(args, kwargs) (line 1433)
        get_unitless_position_call_result_142495 = invoke(stypy.reporting.localization.Localization(__file__, 1433, 23), get_unitless_position_142493, *[], **kwargs_142494)
        
        # Assigning a type to the variable 'call_assignment_139115' (line 1433)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1433, 8), 'call_assignment_139115', get_unitless_position_call_result_142495)
        
        # Assigning a Call to a Name (line 1433):
        
        # Assigning a Call to a Name (line 1433):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_142498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1433, 8), 'int')
        # Processing the call keyword arguments
        kwargs_142499 = {}
        # Getting the type of 'call_assignment_139115' (line 1433)
        call_assignment_139115_142496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1433, 8), 'call_assignment_139115', False)
        # Obtaining the member '__getitem__' of a type (line 1433)
        getitem___142497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1433, 8), call_assignment_139115_142496, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_142500 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___142497, *[int_142498], **kwargs_142499)
        
        # Assigning a type to the variable 'call_assignment_139116' (line 1433)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1433, 8), 'call_assignment_139116', getitem___call_result_142500)
        
        # Assigning a Name to a Name (line 1433):
        
        # Assigning a Name to a Name (line 1433):
        # Getting the type of 'call_assignment_139116' (line 1433)
        call_assignment_139116_142501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1433, 8), 'call_assignment_139116')
        # Assigning a type to the variable 'dashx' (line 1433)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1433, 8), 'dashx', call_assignment_139116_142501)
        
        # Assigning a Call to a Name (line 1433):
        
        # Assigning a Call to a Name (line 1433):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_142504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1433, 8), 'int')
        # Processing the call keyword arguments
        kwargs_142505 = {}
        # Getting the type of 'call_assignment_139115' (line 1433)
        call_assignment_139115_142502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1433, 8), 'call_assignment_139115', False)
        # Obtaining the member '__getitem__' of a type (line 1433)
        getitem___142503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1433, 8), call_assignment_139115_142502, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_142506 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___142503, *[int_142504], **kwargs_142505)
        
        # Assigning a type to the variable 'call_assignment_139117' (line 1433)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1433, 8), 'call_assignment_139117', getitem___call_result_142506)
        
        # Assigning a Name to a Name (line 1433):
        
        # Assigning a Name to a Name (line 1433):
        # Getting the type of 'call_assignment_139117' (line 1433)
        call_assignment_139117_142507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1433, 8), 'call_assignment_139117')
        # Assigning a type to the variable 'dashy' (line 1433)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1433, 15), 'dashy', call_assignment_139117_142507)
        
        # Assigning a Call to a Name (line 1434):
        
        # Assigning a Call to a Name (line 1434):
        
        # Assigning a Call to a Name (line 1434):
        
        # Call to get_dashlength(...): (line 1434)
        # Processing the call keyword arguments (line 1434)
        kwargs_142510 = {}
        # Getting the type of 'self' (line 1434)
        self_142508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 21), 'self', False)
        # Obtaining the member 'get_dashlength' of a type (line 1434)
        get_dashlength_142509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1434, 21), self_142508, 'get_dashlength')
        # Calling get_dashlength(args, kwargs) (line 1434)
        get_dashlength_call_result_142511 = invoke(stypy.reporting.localization.Localization(__file__, 1434, 21), get_dashlength_142509, *[], **kwargs_142510)
        
        # Assigning a type to the variable 'dashlength' (line 1434)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1434, 8), 'dashlength', get_dashlength_call_result_142511)
        
        
        # Getting the type of 'dashlength' (line 1436)
        dashlength_142512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1436, 11), 'dashlength')
        float_142513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1436, 25), 'float')
        # Applying the binary operator '==' (line 1436)
        result_eq_142514 = python_operator(stypy.reporting.localization.Localization(__file__, 1436, 11), '==', dashlength_142512, float_142513)
        
        # Testing the type of an if condition (line 1436)
        if_condition_142515 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1436, 8), result_eq_142514)
        # Assigning a type to the variable 'if_condition_142515' (line 1436)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1436, 8), 'if_condition_142515', if_condition_142515)
        # SSA begins for if statement (line 1436)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 1437):
        
        # Assigning a Name to a Name (line 1437):
        
        # Assigning a Name to a Name (line 1437):
        # Getting the type of 'dashx' (line 1437)
        dashx_142516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 31), 'dashx')
        # Assigning a type to the variable 'tuple_assignment_139118' (line 1437)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1437, 12), 'tuple_assignment_139118', dashx_142516)
        
        # Assigning a Name to a Name (line 1437):
        
        # Assigning a Name to a Name (line 1437):
        # Getting the type of 'dashy' (line 1437)
        dashy_142517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 38), 'dashy')
        # Assigning a type to the variable 'tuple_assignment_139119' (line 1437)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1437, 12), 'tuple_assignment_139119', dashy_142517)
        
        # Assigning a Name to a Attribute (line 1437):
        
        # Assigning a Name to a Attribute (line 1437):
        # Getting the type of 'tuple_assignment_139118' (line 1437)
        tuple_assignment_139118_142518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 12), 'tuple_assignment_139118')
        # Getting the type of 'self' (line 1437)
        self_142519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 12), 'self')
        # Setting the type of the member '_x' of a type (line 1437)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1437, 12), self_142519, '_x', tuple_assignment_139118_142518)
        
        # Assigning a Name to a Attribute (line 1437):
        
        # Assigning a Name to a Attribute (line 1437):
        # Getting the type of 'tuple_assignment_139119' (line 1437)
        tuple_assignment_139119_142520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 12), 'tuple_assignment_139119')
        # Getting the type of 'self' (line 1437)
        self_142521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 21), 'self')
        # Setting the type of the member '_y' of a type (line 1437)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1437, 21), self_142521, '_y', tuple_assignment_139119_142520)
        # Assigning a type to the variable 'stypy_return_type' (line 1438)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1438, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1436)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1440):
        
        # Assigning a Call to a Name (line 1440):
        
        # Assigning a Call to a Name (line 1440):
        
        # Call to get_dashrotation(...): (line 1440)
        # Processing the call keyword arguments (line 1440)
        kwargs_142524 = {}
        # Getting the type of 'self' (line 1440)
        self_142522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 23), 'self', False)
        # Obtaining the member 'get_dashrotation' of a type (line 1440)
        get_dashrotation_142523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1440, 23), self_142522, 'get_dashrotation')
        # Calling get_dashrotation(args, kwargs) (line 1440)
        get_dashrotation_call_result_142525 = invoke(stypy.reporting.localization.Localization(__file__, 1440, 23), get_dashrotation_142523, *[], **kwargs_142524)
        
        # Assigning a type to the variable 'dashrotation' (line 1440)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1440, 8), 'dashrotation', get_dashrotation_call_result_142525)
        
        # Assigning a Call to a Name (line 1441):
        
        # Assigning a Call to a Name (line 1441):
        
        # Assigning a Call to a Name (line 1441):
        
        # Call to get_dashdirection(...): (line 1441)
        # Processing the call keyword arguments (line 1441)
        kwargs_142528 = {}
        # Getting the type of 'self' (line 1441)
        self_142526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 24), 'self', False)
        # Obtaining the member 'get_dashdirection' of a type (line 1441)
        get_dashdirection_142527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1441, 24), self_142526, 'get_dashdirection')
        # Calling get_dashdirection(args, kwargs) (line 1441)
        get_dashdirection_call_result_142529 = invoke(stypy.reporting.localization.Localization(__file__, 1441, 24), get_dashdirection_142527, *[], **kwargs_142528)
        
        # Assigning a type to the variable 'dashdirection' (line 1441)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1441, 8), 'dashdirection', get_dashdirection_call_result_142529)
        
        # Assigning a Call to a Name (line 1442):
        
        # Assigning a Call to a Name (line 1442):
        
        # Assigning a Call to a Name (line 1442):
        
        # Call to get_dashpad(...): (line 1442)
        # Processing the call keyword arguments (line 1442)
        kwargs_142532 = {}
        # Getting the type of 'self' (line 1442)
        self_142530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 18), 'self', False)
        # Obtaining the member 'get_dashpad' of a type (line 1442)
        get_dashpad_142531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1442, 18), self_142530, 'get_dashpad')
        # Calling get_dashpad(args, kwargs) (line 1442)
        get_dashpad_call_result_142533 = invoke(stypy.reporting.localization.Localization(__file__, 1442, 18), get_dashpad_142531, *[], **kwargs_142532)
        
        # Assigning a type to the variable 'dashpad' (line 1442)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1442, 8), 'dashpad', get_dashpad_call_result_142533)
        
        # Assigning a Call to a Name (line 1443):
        
        # Assigning a Call to a Name (line 1443):
        
        # Assigning a Call to a Name (line 1443):
        
        # Call to get_dashpush(...): (line 1443)
        # Processing the call keyword arguments (line 1443)
        kwargs_142536 = {}
        # Getting the type of 'self' (line 1443)
        self_142534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1443, 19), 'self', False)
        # Obtaining the member 'get_dashpush' of a type (line 1443)
        get_dashpush_142535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1443, 19), self_142534, 'get_dashpush')
        # Calling get_dashpush(args, kwargs) (line 1443)
        get_dashpush_call_result_142537 = invoke(stypy.reporting.localization.Localization(__file__, 1443, 19), get_dashpush_142535, *[], **kwargs_142536)
        
        # Assigning a type to the variable 'dashpush' (line 1443)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1443, 8), 'dashpush', get_dashpush_call_result_142537)
        
        # Assigning a Call to a Name (line 1445):
        
        # Assigning a Call to a Name (line 1445):
        
        # Assigning a Call to a Name (line 1445):
        
        # Call to get_rotation(...): (line 1445)
        # Processing the call arguments (line 1445)
        # Getting the type of 'dashrotation' (line 1445)
        dashrotation_142539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1445, 29), 'dashrotation', False)
        # Processing the call keyword arguments (line 1445)
        kwargs_142540 = {}
        # Getting the type of 'get_rotation' (line 1445)
        get_rotation_142538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1445, 16), 'get_rotation', False)
        # Calling get_rotation(args, kwargs) (line 1445)
        get_rotation_call_result_142541 = invoke(stypy.reporting.localization.Localization(__file__, 1445, 16), get_rotation_142538, *[dashrotation_142539], **kwargs_142540)
        
        # Assigning a type to the variable 'angle' (line 1445)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1445, 8), 'angle', get_rotation_call_result_142541)
        
        # Assigning a BinOp to a Name (line 1446):
        
        # Assigning a BinOp to a Name (line 1446):
        
        # Assigning a BinOp to a Name (line 1446):
        # Getting the type of 'np' (line 1446)
        np_142542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 16), 'np')
        # Obtaining the member 'pi' of a type (line 1446)
        pi_142543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1446, 16), np_142542, 'pi')
        # Getting the type of 'angle' (line 1446)
        angle_142544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 25), 'angle')
        float_142545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1446, 33), 'float')
        # Applying the binary operator 'div' (line 1446)
        result_div_142546 = python_operator(stypy.reporting.localization.Localization(__file__, 1446, 25), 'div', angle_142544, float_142545)
        
        # Getting the type of 'dashdirection' (line 1446)
        dashdirection_142547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 41), 'dashdirection')
        # Applying the binary operator '+' (line 1446)
        result_add_142548 = python_operator(stypy.reporting.localization.Localization(__file__, 1446, 25), '+', result_div_142546, dashdirection_142547)
        
        int_142549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1446, 57), 'int')
        # Applying the binary operator '-' (line 1446)
        result_sub_142550 = python_operator(stypy.reporting.localization.Localization(__file__, 1446, 55), '-', result_add_142548, int_142549)
        
        # Applying the binary operator '*' (line 1446)
        result_mul_142551 = python_operator(stypy.reporting.localization.Localization(__file__, 1446, 16), '*', pi_142543, result_sub_142550)
        
        # Assigning a type to the variable 'theta' (line 1446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1446, 8), 'theta', result_mul_142551)
        
        # Assigning a Tuple to a Tuple (line 1447):
        
        # Assigning a Call to a Name (line 1447):
        
        # Assigning a Call to a Name (line 1447):
        
        # Call to cos(...): (line 1447)
        # Processing the call arguments (line 1447)
        # Getting the type of 'theta' (line 1447)
        theta_142554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 38), 'theta', False)
        # Processing the call keyword arguments (line 1447)
        kwargs_142555 = {}
        # Getting the type of 'np' (line 1447)
        np_142552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 31), 'np', False)
        # Obtaining the member 'cos' of a type (line 1447)
        cos_142553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1447, 31), np_142552, 'cos')
        # Calling cos(args, kwargs) (line 1447)
        cos_call_result_142556 = invoke(stypy.reporting.localization.Localization(__file__, 1447, 31), cos_142553, *[theta_142554], **kwargs_142555)
        
        # Assigning a type to the variable 'tuple_assignment_139120' (line 1447)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1447, 8), 'tuple_assignment_139120', cos_call_result_142556)
        
        # Assigning a Call to a Name (line 1447):
        
        # Assigning a Call to a Name (line 1447):
        
        # Call to sin(...): (line 1447)
        # Processing the call arguments (line 1447)
        # Getting the type of 'theta' (line 1447)
        theta_142559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 53), 'theta', False)
        # Processing the call keyword arguments (line 1447)
        kwargs_142560 = {}
        # Getting the type of 'np' (line 1447)
        np_142557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 46), 'np', False)
        # Obtaining the member 'sin' of a type (line 1447)
        sin_142558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1447, 46), np_142557, 'sin')
        # Calling sin(args, kwargs) (line 1447)
        sin_call_result_142561 = invoke(stypy.reporting.localization.Localization(__file__, 1447, 46), sin_142558, *[theta_142559], **kwargs_142560)
        
        # Assigning a type to the variable 'tuple_assignment_139121' (line 1447)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1447, 8), 'tuple_assignment_139121', sin_call_result_142561)
        
        # Assigning a Name to a Name (line 1447):
        
        # Assigning a Name to a Name (line 1447):
        # Getting the type of 'tuple_assignment_139120' (line 1447)
        tuple_assignment_139120_142562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 8), 'tuple_assignment_139120')
        # Assigning a type to the variable 'cos_theta' (line 1447)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1447, 8), 'cos_theta', tuple_assignment_139120_142562)
        
        # Assigning a Name to a Name (line 1447):
        
        # Assigning a Name to a Name (line 1447):
        # Getting the type of 'tuple_assignment_139121' (line 1447)
        tuple_assignment_139121_142563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 8), 'tuple_assignment_139121')
        # Assigning a type to the variable 'sin_theta' (line 1447)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1447, 19), 'sin_theta', tuple_assignment_139121_142563)
        
        # Assigning a Call to a Name (line 1449):
        
        # Assigning a Call to a Name (line 1449):
        
        # Assigning a Call to a Name (line 1449):
        
        # Call to get_transform(...): (line 1449)
        # Processing the call keyword arguments (line 1449)
        kwargs_142566 = {}
        # Getting the type of 'self' (line 1449)
        self_142564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 20), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 1449)
        get_transform_142565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1449, 20), self_142564, 'get_transform')
        # Calling get_transform(args, kwargs) (line 1449)
        get_transform_call_result_142567 = invoke(stypy.reporting.localization.Localization(__file__, 1449, 20), get_transform_142565, *[], **kwargs_142566)
        
        # Assigning a type to the variable 'transform' (line 1449)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1449, 8), 'transform', get_transform_call_result_142567)
        
        # Assigning a Call to a Name (line 1453):
        
        # Assigning a Call to a Name (line 1453):
        
        # Assigning a Call to a Name (line 1453):
        
        # Call to transform_point(...): (line 1453)
        # Processing the call arguments (line 1453)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1453)
        tuple_142570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1453, 41), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1453)
        # Adding element type (line 1453)
        # Getting the type of 'dashx' (line 1453)
        dashx_142571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 41), 'dashx', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1453, 41), tuple_142570, dashx_142571)
        # Adding element type (line 1453)
        # Getting the type of 'dashy' (line 1453)
        dashy_142572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 48), 'dashy', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1453, 41), tuple_142570, dashy_142572)
        
        # Processing the call keyword arguments (line 1453)
        kwargs_142573 = {}
        # Getting the type of 'transform' (line 1453)
        transform_142568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 14), 'transform', False)
        # Obtaining the member 'transform_point' of a type (line 1453)
        transform_point_142569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1453, 14), transform_142568, 'transform_point')
        # Calling transform_point(args, kwargs) (line 1453)
        transform_point_call_result_142574 = invoke(stypy.reporting.localization.Localization(__file__, 1453, 14), transform_point_142569, *[tuple_142570], **kwargs_142573)
        
        # Assigning a type to the variable 'cxy' (line 1453)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1453, 8), 'cxy', transform_point_call_result_142574)
        
        # Assigning a Call to a Name (line 1454):
        
        # Assigning a Call to a Name (line 1454):
        
        # Assigning a Call to a Name (line 1454):
        
        # Call to array(...): (line 1454)
        # Processing the call arguments (line 1454)
        
        # Obtaining an instance of the builtin type 'list' (line 1454)
        list_142577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1454, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1454)
        # Adding element type (line 1454)
        # Getting the type of 'cos_theta' (line 1454)
        cos_theta_142578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1454, 23), 'cos_theta', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1454, 22), list_142577, cos_theta_142578)
        # Adding element type (line 1454)
        # Getting the type of 'sin_theta' (line 1454)
        sin_theta_142579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1454, 34), 'sin_theta', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1454, 22), list_142577, sin_theta_142579)
        
        # Processing the call keyword arguments (line 1454)
        kwargs_142580 = {}
        # Getting the type of 'np' (line 1454)
        np_142575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1454, 13), 'np', False)
        # Obtaining the member 'array' of a type (line 1454)
        array_142576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1454, 13), np_142575, 'array')
        # Calling array(args, kwargs) (line 1454)
        array_call_result_142581 = invoke(stypy.reporting.localization.Localization(__file__, 1454, 13), array_142576, *[list_142577], **kwargs_142580)
        
        # Assigning a type to the variable 'cd' (line 1454)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1454, 8), 'cd', array_call_result_142581)
        
        # Assigning a BinOp to a Name (line 1455):
        
        # Assigning a BinOp to a Name (line 1455):
        
        # Assigning a BinOp to a Name (line 1455):
        # Getting the type of 'cxy' (line 1455)
        cxy_142582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 13), 'cxy')
        # Getting the type of 'dashpush' (line 1455)
        dashpush_142583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 19), 'dashpush')
        # Getting the type of 'cd' (line 1455)
        cd_142584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 30), 'cd')
        # Applying the binary operator '*' (line 1455)
        result_mul_142585 = python_operator(stypy.reporting.localization.Localization(__file__, 1455, 19), '*', dashpush_142583, cd_142584)
        
        # Applying the binary operator '+' (line 1455)
        result_add_142586 = python_operator(stypy.reporting.localization.Localization(__file__, 1455, 13), '+', cxy_142582, result_mul_142585)
        
        # Assigning a type to the variable 'c1' (line 1455)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1455, 8), 'c1', result_add_142586)
        
        # Assigning a BinOp to a Name (line 1456):
        
        # Assigning a BinOp to a Name (line 1456):
        
        # Assigning a BinOp to a Name (line 1456):
        # Getting the type of 'cxy' (line 1456)
        cxy_142587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 13), 'cxy')
        # Getting the type of 'dashpush' (line 1456)
        dashpush_142588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 20), 'dashpush')
        # Getting the type of 'dashlength' (line 1456)
        dashlength_142589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 31), 'dashlength')
        # Applying the binary operator '+' (line 1456)
        result_add_142590 = python_operator(stypy.reporting.localization.Localization(__file__, 1456, 20), '+', dashpush_142588, dashlength_142589)
        
        # Getting the type of 'cd' (line 1456)
        cd_142591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 45), 'cd')
        # Applying the binary operator '*' (line 1456)
        result_mul_142592 = python_operator(stypy.reporting.localization.Localization(__file__, 1456, 19), '*', result_add_142590, cd_142591)
        
        # Applying the binary operator '+' (line 1456)
        result_add_142593 = python_operator(stypy.reporting.localization.Localization(__file__, 1456, 13), '+', cxy_142587, result_mul_142592)
        
        # Assigning a type to the variable 'c2' (line 1456)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1456, 8), 'c2', result_add_142593)
        
        # Assigning a Call to a Name (line 1458):
        
        # Assigning a Call to a Name (line 1458):
        
        # Assigning a Call to a Name (line 1458):
        
        # Call to inverted(...): (line 1458)
        # Processing the call keyword arguments (line 1458)
        kwargs_142596 = {}
        # Getting the type of 'transform' (line 1458)
        transform_142594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 18), 'transform', False)
        # Obtaining the member 'inverted' of a type (line 1458)
        inverted_142595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1458, 18), transform_142594, 'inverted')
        # Calling inverted(args, kwargs) (line 1458)
        inverted_call_result_142597 = invoke(stypy.reporting.localization.Localization(__file__, 1458, 18), inverted_142595, *[], **kwargs_142596)
        
        # Assigning a type to the variable 'inverse' (line 1458)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1458, 8), 'inverse', inverted_call_result_142597)
        
        # Assigning a Call to a Tuple (line 1459):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to transform_point(...): (line 1459)
        # Processing the call arguments (line 1459)
        
        # Call to tuple(...): (line 1459)
        # Processing the call arguments (line 1459)
        # Getting the type of 'c1' (line 1459)
        c1_142601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 49), 'c1', False)
        # Processing the call keyword arguments (line 1459)
        kwargs_142602 = {}
        # Getting the type of 'tuple' (line 1459)
        tuple_142600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 43), 'tuple', False)
        # Calling tuple(args, kwargs) (line 1459)
        tuple_call_result_142603 = invoke(stypy.reporting.localization.Localization(__file__, 1459, 43), tuple_142600, *[c1_142601], **kwargs_142602)
        
        # Processing the call keyword arguments (line 1459)
        kwargs_142604 = {}
        # Getting the type of 'inverse' (line 1459)
        inverse_142598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 19), 'inverse', False)
        # Obtaining the member 'transform_point' of a type (line 1459)
        transform_point_142599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1459, 19), inverse_142598, 'transform_point')
        # Calling transform_point(args, kwargs) (line 1459)
        transform_point_call_result_142605 = invoke(stypy.reporting.localization.Localization(__file__, 1459, 19), transform_point_142599, *[tuple_call_result_142603], **kwargs_142604)
        
        # Assigning a type to the variable 'call_assignment_139122' (line 1459)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1459, 8), 'call_assignment_139122', transform_point_call_result_142605)
        
        # Assigning a Call to a Name (line 1459):
        
        # Assigning a Call to a Name (line 1459):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_142608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1459, 8), 'int')
        # Processing the call keyword arguments
        kwargs_142609 = {}
        # Getting the type of 'call_assignment_139122' (line 1459)
        call_assignment_139122_142606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 8), 'call_assignment_139122', False)
        # Obtaining the member '__getitem__' of a type (line 1459)
        getitem___142607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1459, 8), call_assignment_139122_142606, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_142610 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___142607, *[int_142608], **kwargs_142609)
        
        # Assigning a type to the variable 'call_assignment_139123' (line 1459)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1459, 8), 'call_assignment_139123', getitem___call_result_142610)
        
        # Assigning a Name to a Name (line 1459):
        
        # Assigning a Name to a Name (line 1459):
        # Getting the type of 'call_assignment_139123' (line 1459)
        call_assignment_139123_142611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 8), 'call_assignment_139123')
        # Assigning a type to the variable 'x1' (line 1459)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1459, 9), 'x1', call_assignment_139123_142611)
        
        # Assigning a Call to a Name (line 1459):
        
        # Assigning a Call to a Name (line 1459):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_142614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1459, 8), 'int')
        # Processing the call keyword arguments
        kwargs_142615 = {}
        # Getting the type of 'call_assignment_139122' (line 1459)
        call_assignment_139122_142612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 8), 'call_assignment_139122', False)
        # Obtaining the member '__getitem__' of a type (line 1459)
        getitem___142613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1459, 8), call_assignment_139122_142612, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_142616 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___142613, *[int_142614], **kwargs_142615)
        
        # Assigning a type to the variable 'call_assignment_139124' (line 1459)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1459, 8), 'call_assignment_139124', getitem___call_result_142616)
        
        # Assigning a Name to a Name (line 1459):
        
        # Assigning a Name to a Name (line 1459):
        # Getting the type of 'call_assignment_139124' (line 1459)
        call_assignment_139124_142617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 8), 'call_assignment_139124')
        # Assigning a type to the variable 'y1' (line 1459)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1459, 13), 'y1', call_assignment_139124_142617)
        
        # Assigning a Call to a Tuple (line 1460):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to transform_point(...): (line 1460)
        # Processing the call arguments (line 1460)
        
        # Call to tuple(...): (line 1460)
        # Processing the call arguments (line 1460)
        # Getting the type of 'c2' (line 1460)
        c2_142621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 49), 'c2', False)
        # Processing the call keyword arguments (line 1460)
        kwargs_142622 = {}
        # Getting the type of 'tuple' (line 1460)
        tuple_142620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 43), 'tuple', False)
        # Calling tuple(args, kwargs) (line 1460)
        tuple_call_result_142623 = invoke(stypy.reporting.localization.Localization(__file__, 1460, 43), tuple_142620, *[c2_142621], **kwargs_142622)
        
        # Processing the call keyword arguments (line 1460)
        kwargs_142624 = {}
        # Getting the type of 'inverse' (line 1460)
        inverse_142618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 19), 'inverse', False)
        # Obtaining the member 'transform_point' of a type (line 1460)
        transform_point_142619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1460, 19), inverse_142618, 'transform_point')
        # Calling transform_point(args, kwargs) (line 1460)
        transform_point_call_result_142625 = invoke(stypy.reporting.localization.Localization(__file__, 1460, 19), transform_point_142619, *[tuple_call_result_142623], **kwargs_142624)
        
        # Assigning a type to the variable 'call_assignment_139125' (line 1460)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1460, 8), 'call_assignment_139125', transform_point_call_result_142625)
        
        # Assigning a Call to a Name (line 1460):
        
        # Assigning a Call to a Name (line 1460):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_142628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1460, 8), 'int')
        # Processing the call keyword arguments
        kwargs_142629 = {}
        # Getting the type of 'call_assignment_139125' (line 1460)
        call_assignment_139125_142626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 8), 'call_assignment_139125', False)
        # Obtaining the member '__getitem__' of a type (line 1460)
        getitem___142627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1460, 8), call_assignment_139125_142626, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_142630 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___142627, *[int_142628], **kwargs_142629)
        
        # Assigning a type to the variable 'call_assignment_139126' (line 1460)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1460, 8), 'call_assignment_139126', getitem___call_result_142630)
        
        # Assigning a Name to a Name (line 1460):
        
        # Assigning a Name to a Name (line 1460):
        # Getting the type of 'call_assignment_139126' (line 1460)
        call_assignment_139126_142631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 8), 'call_assignment_139126')
        # Assigning a type to the variable 'x2' (line 1460)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1460, 9), 'x2', call_assignment_139126_142631)
        
        # Assigning a Call to a Name (line 1460):
        
        # Assigning a Call to a Name (line 1460):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_142634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1460, 8), 'int')
        # Processing the call keyword arguments
        kwargs_142635 = {}
        # Getting the type of 'call_assignment_139125' (line 1460)
        call_assignment_139125_142632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 8), 'call_assignment_139125', False)
        # Obtaining the member '__getitem__' of a type (line 1460)
        getitem___142633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1460, 8), call_assignment_139125_142632, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_142636 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___142633, *[int_142634], **kwargs_142635)
        
        # Assigning a type to the variable 'call_assignment_139127' (line 1460)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1460, 8), 'call_assignment_139127', getitem___call_result_142636)
        
        # Assigning a Name to a Name (line 1460):
        
        # Assigning a Name to a Name (line 1460):
        # Getting the type of 'call_assignment_139127' (line 1460)
        call_assignment_139127_142637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 8), 'call_assignment_139127')
        # Assigning a type to the variable 'y2' (line 1460)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1460, 13), 'y2', call_assignment_139127_142637)
        
        # Call to set_data(...): (line 1461)
        # Processing the call arguments (line 1461)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1461)
        tuple_142641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1461, 32), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1461)
        # Adding element type (line 1461)
        # Getting the type of 'x1' (line 1461)
        x1_142642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 32), 'x1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1461, 32), tuple_142641, x1_142642)
        # Adding element type (line 1461)
        # Getting the type of 'x2' (line 1461)
        x2_142643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 36), 'x2', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1461, 32), tuple_142641, x2_142643)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1461)
        tuple_142644 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1461, 42), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1461)
        # Adding element type (line 1461)
        # Getting the type of 'y1' (line 1461)
        y1_142645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 42), 'y1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1461, 42), tuple_142644, y1_142645)
        # Adding element type (line 1461)
        # Getting the type of 'y2' (line 1461)
        y2_142646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 46), 'y2', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1461, 42), tuple_142644, y2_142646)
        
        # Processing the call keyword arguments (line 1461)
        kwargs_142647 = {}
        # Getting the type of 'self' (line 1461)
        self_142638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 8), 'self', False)
        # Obtaining the member 'dashline' of a type (line 1461)
        dashline_142639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1461, 8), self_142638, 'dashline')
        # Obtaining the member 'set_data' of a type (line 1461)
        set_data_142640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1461, 8), dashline_142639, 'set_data')
        # Calling set_data(args, kwargs) (line 1461)
        set_data_call_result_142648 = invoke(stypy.reporting.localization.Localization(__file__, 1461, 8), set_data_142640, *[tuple_142641, tuple_142644], **kwargs_142647)
        
        
        # Assigning a Call to a Name (line 1477):
        
        # Assigning a Call to a Name (line 1477):
        
        # Assigning a Call to a Name (line 1477):
        
        # Call to get_window_extent(...): (line 1477)
        # Processing the call arguments (line 1477)
        # Getting the type of 'self' (line 1477)
        self_142651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 36), 'self', False)
        # Processing the call keyword arguments (line 1477)
        # Getting the type of 'renderer' (line 1477)
        renderer_142652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 51), 'renderer', False)
        keyword_142653 = renderer_142652
        kwargs_142654 = {'renderer': keyword_142653}
        # Getting the type of 'Text' (line 1477)
        Text_142649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 13), 'Text', False)
        # Obtaining the member 'get_window_extent' of a type (line 1477)
        get_window_extent_142650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1477, 13), Text_142649, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 1477)
        get_window_extent_call_result_142655 = invoke(stypy.reporting.localization.Localization(__file__, 1477, 13), get_window_extent_142650, *[self_142651], **kwargs_142654)
        
        # Assigning a type to the variable 'we' (line 1477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1477, 8), 'we', get_window_extent_call_result_142655)
        
        # Assigning a Tuple to a Tuple (line 1478):
        
        # Assigning a Attribute to a Name (line 1478):
        
        # Assigning a Attribute to a Name (line 1478):
        # Getting the type of 'we' (line 1478)
        we_142656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 15), 'we')
        # Obtaining the member 'width' of a type (line 1478)
        width_142657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1478, 15), we_142656, 'width')
        # Assigning a type to the variable 'tuple_assignment_139128' (line 1478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1478, 8), 'tuple_assignment_139128', width_142657)
        
        # Assigning a Attribute to a Name (line 1478):
        
        # Assigning a Attribute to a Name (line 1478):
        # Getting the type of 'we' (line 1478)
        we_142658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 25), 'we')
        # Obtaining the member 'height' of a type (line 1478)
        height_142659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1478, 25), we_142658, 'height')
        # Assigning a type to the variable 'tuple_assignment_139129' (line 1478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1478, 8), 'tuple_assignment_139129', height_142659)
        
        # Assigning a Name to a Name (line 1478):
        
        # Assigning a Name to a Name (line 1478):
        # Getting the type of 'tuple_assignment_139128' (line 1478)
        tuple_assignment_139128_142660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 8), 'tuple_assignment_139128')
        # Assigning a type to the variable 'w' (line 1478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1478, 8), 'w', tuple_assignment_139128_142660)
        
        # Assigning a Name to a Name (line 1478):
        
        # Assigning a Name to a Name (line 1478):
        # Getting the type of 'tuple_assignment_139129' (line 1478)
        tuple_assignment_139129_142661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 8), 'tuple_assignment_139129')
        # Assigning a type to the variable 'h' (line 1478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1478, 11), 'h', tuple_assignment_139129_142661)
        
        
        # Getting the type of 'sin_theta' (line 1480)
        sin_theta_142662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1480, 11), 'sin_theta')
        float_142663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1480, 24), 'float')
        # Applying the binary operator '==' (line 1480)
        result_eq_142664 = python_operator(stypy.reporting.localization.Localization(__file__, 1480, 11), '==', sin_theta_142662, float_142663)
        
        # Testing the type of an if condition (line 1480)
        if_condition_142665 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1480, 8), result_eq_142664)
        # Assigning a type to the variable 'if_condition_142665' (line 1480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1480, 8), 'if_condition_142665', if_condition_142665)
        # SSA begins for if statement (line 1480)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1481):
        
        # Assigning a Name to a Name (line 1481):
        
        # Assigning a Name to a Name (line 1481):
        # Getting the type of 'w' (line 1481)
        w_142666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 17), 'w')
        # Assigning a type to the variable 'dx' (line 1481)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1481, 12), 'dx', w_142666)
        
        # Assigning a Num to a Name (line 1482):
        
        # Assigning a Num to a Name (line 1482):
        
        # Assigning a Num to a Name (line 1482):
        float_142667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1482, 17), 'float')
        # Assigning a type to the variable 'dy' (line 1482)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1482, 12), 'dy', float_142667)
        # SSA branch for the else part of an if statement (line 1480)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'cos_theta' (line 1483)
        cos_theta_142668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 13), 'cos_theta')
        float_142669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1483, 26), 'float')
        # Applying the binary operator '==' (line 1483)
        result_eq_142670 = python_operator(stypy.reporting.localization.Localization(__file__, 1483, 13), '==', cos_theta_142668, float_142669)
        
        # Testing the type of an if condition (line 1483)
        if_condition_142671 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1483, 13), result_eq_142670)
        # Assigning a type to the variable 'if_condition_142671' (line 1483)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1483, 13), 'if_condition_142671', if_condition_142671)
        # SSA begins for if statement (line 1483)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 1484):
        
        # Assigning a Num to a Name (line 1484):
        
        # Assigning a Num to a Name (line 1484):
        float_142672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1484, 17), 'float')
        # Assigning a type to the variable 'dx' (line 1484)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1484, 12), 'dx', float_142672)
        
        # Assigning a Name to a Name (line 1485):
        
        # Assigning a Name to a Name (line 1485):
        
        # Assigning a Name to a Name (line 1485):
        # Getting the type of 'h' (line 1485)
        h_142673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 17), 'h')
        # Assigning a type to the variable 'dy' (line 1485)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1485, 12), 'dy', h_142673)
        # SSA branch for the else part of an if statement (line 1483)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 1487):
        
        # Assigning a BinOp to a Name (line 1487):
        
        # Assigning a BinOp to a Name (line 1487):
        # Getting the type of 'sin_theta' (line 1487)
        sin_theta_142674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1487, 24), 'sin_theta')
        # Getting the type of 'cos_theta' (line 1487)
        cos_theta_142675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1487, 36), 'cos_theta')
        # Applying the binary operator 'div' (line 1487)
        result_div_142676 = python_operator(stypy.reporting.localization.Localization(__file__, 1487, 24), 'div', sin_theta_142674, cos_theta_142675)
        
        # Assigning a type to the variable 'tan_theta' (line 1487)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1487, 12), 'tan_theta', result_div_142676)
        
        # Assigning a Name to a Name (line 1488):
        
        # Assigning a Name to a Name (line 1488):
        
        # Assigning a Name to a Name (line 1488):
        # Getting the type of 'w' (line 1488)
        w_142677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1488, 17), 'w')
        # Assigning a type to the variable 'dx' (line 1488)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1488, 12), 'dx', w_142677)
        
        # Assigning a BinOp to a Name (line 1489):
        
        # Assigning a BinOp to a Name (line 1489):
        
        # Assigning a BinOp to a Name (line 1489):
        # Getting the type of 'w' (line 1489)
        w_142678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 17), 'w')
        # Getting the type of 'tan_theta' (line 1489)
        tan_theta_142679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 21), 'tan_theta')
        # Applying the binary operator '*' (line 1489)
        result_mul_142680 = python_operator(stypy.reporting.localization.Localization(__file__, 1489, 17), '*', w_142678, tan_theta_142679)
        
        # Assigning a type to the variable 'dy' (line 1489)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1489, 12), 'dy', result_mul_142680)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'dy' (line 1490)
        dy_142681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1490, 15), 'dy')
        # Getting the type of 'h' (line 1490)
        h_142682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1490, 20), 'h')
        # Applying the binary operator '>' (line 1490)
        result_gt_142683 = python_operator(stypy.reporting.localization.Localization(__file__, 1490, 15), '>', dy_142681, h_142682)
        
        
        # Getting the type of 'dy' (line 1490)
        dy_142684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1490, 25), 'dy')
        
        # Getting the type of 'h' (line 1490)
        h_142685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1490, 31), 'h')
        # Applying the 'usub' unary operator (line 1490)
        result___neg___142686 = python_operator(stypy.reporting.localization.Localization(__file__, 1490, 30), 'usub', h_142685)
        
        # Applying the binary operator '<' (line 1490)
        result_lt_142687 = python_operator(stypy.reporting.localization.Localization(__file__, 1490, 25), '<', dy_142684, result___neg___142686)
        
        # Applying the binary operator 'or' (line 1490)
        result_or_keyword_142688 = python_operator(stypy.reporting.localization.Localization(__file__, 1490, 15), 'or', result_gt_142683, result_lt_142687)
        
        # Testing the type of an if condition (line 1490)
        if_condition_142689 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1490, 12), result_or_keyword_142688)
        # Assigning a type to the variable 'if_condition_142689' (line 1490)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1490, 12), 'if_condition_142689', if_condition_142689)
        # SSA begins for if statement (line 1490)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1491):
        
        # Assigning a Name to a Name (line 1491):
        
        # Assigning a Name to a Name (line 1491):
        # Getting the type of 'h' (line 1491)
        h_142690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 21), 'h')
        # Assigning a type to the variable 'dy' (line 1491)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1491, 16), 'dy', h_142690)
        
        # Assigning a BinOp to a Name (line 1492):
        
        # Assigning a BinOp to a Name (line 1492):
        
        # Assigning a BinOp to a Name (line 1492):
        # Getting the type of 'h' (line 1492)
        h_142691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 21), 'h')
        # Getting the type of 'tan_theta' (line 1492)
        tan_theta_142692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 25), 'tan_theta')
        # Applying the binary operator 'div' (line 1492)
        result_div_142693 = python_operator(stypy.reporting.localization.Localization(__file__, 1492, 21), 'div', h_142691, tan_theta_142692)
        
        # Assigning a type to the variable 'dx' (line 1492)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1492, 16), 'dx', result_div_142693)
        # SSA join for if statement (line 1490)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1483)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1480)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 1493):
        
        # Assigning a BinOp to a Name (line 1493):
        
        # Assigning a BinOp to a Name (line 1493):
        
        # Call to array(...): (line 1493)
        # Processing the call arguments (line 1493)
        
        # Obtaining an instance of the builtin type 'list' (line 1493)
        list_142696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1493, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1493)
        # Adding element type (line 1493)
        # Getting the type of 'dx' (line 1493)
        dx_142697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 24), 'dx', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1493, 23), list_142696, dx_142697)
        # Adding element type (line 1493)
        # Getting the type of 'dy' (line 1493)
        dy_142698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 28), 'dy', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1493, 23), list_142696, dy_142698)
        
        # Processing the call keyword arguments (line 1493)
        kwargs_142699 = {}
        # Getting the type of 'np' (line 1493)
        np_142694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 14), 'np', False)
        # Obtaining the member 'array' of a type (line 1493)
        array_142695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1493, 14), np_142694, 'array')
        # Calling array(args, kwargs) (line 1493)
        array_call_result_142700 = invoke(stypy.reporting.localization.Localization(__file__, 1493, 14), array_142695, *[list_142696], **kwargs_142699)
        
        int_142701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1493, 35), 'int')
        # Applying the binary operator 'div' (line 1493)
        result_div_142702 = python_operator(stypy.reporting.localization.Localization(__file__, 1493, 14), 'div', array_call_result_142700, int_142701)
        
        # Assigning a type to the variable 'cwd' (line 1493)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1493, 8), 'cwd', result_div_142702)
        
        # Getting the type of 'cwd' (line 1494)
        cwd_142703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 8), 'cwd')
        int_142704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1494, 15), 'int')
        # Getting the type of 'dashpad' (line 1494)
        dashpad_142705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 19), 'dashpad')
        
        # Call to sqrt(...): (line 1494)
        # Processing the call arguments (line 1494)
        
        # Call to dot(...): (line 1494)
        # Processing the call arguments (line 1494)
        # Getting the type of 'cwd' (line 1494)
        cwd_142710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 44), 'cwd', False)
        # Getting the type of 'cwd' (line 1494)
        cwd_142711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 49), 'cwd', False)
        # Processing the call keyword arguments (line 1494)
        kwargs_142712 = {}
        # Getting the type of 'np' (line 1494)
        np_142708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 37), 'np', False)
        # Obtaining the member 'dot' of a type (line 1494)
        dot_142709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1494, 37), np_142708, 'dot')
        # Calling dot(args, kwargs) (line 1494)
        dot_call_result_142713 = invoke(stypy.reporting.localization.Localization(__file__, 1494, 37), dot_142709, *[cwd_142710, cwd_142711], **kwargs_142712)
        
        # Processing the call keyword arguments (line 1494)
        kwargs_142714 = {}
        # Getting the type of 'np' (line 1494)
        np_142706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 29), 'np', False)
        # Obtaining the member 'sqrt' of a type (line 1494)
        sqrt_142707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1494, 29), np_142706, 'sqrt')
        # Calling sqrt(args, kwargs) (line 1494)
        sqrt_call_result_142715 = invoke(stypy.reporting.localization.Localization(__file__, 1494, 29), sqrt_142707, *[dot_call_result_142713], **kwargs_142714)
        
        # Applying the binary operator 'div' (line 1494)
        result_div_142716 = python_operator(stypy.reporting.localization.Localization(__file__, 1494, 19), 'div', dashpad_142705, sqrt_call_result_142715)
        
        # Applying the binary operator '+' (line 1494)
        result_add_142717 = python_operator(stypy.reporting.localization.Localization(__file__, 1494, 15), '+', int_142704, result_div_142716)
        
        # Applying the binary operator '*=' (line 1494)
        result_imul_142718 = python_operator(stypy.reporting.localization.Localization(__file__, 1494, 8), '*=', cwd_142703, result_add_142717)
        # Assigning a type to the variable 'cwd' (line 1494)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1494, 8), 'cwd', result_imul_142718)
        
        
        # Assigning a BinOp to a Name (line 1495):
        
        # Assigning a BinOp to a Name (line 1495):
        
        # Assigning a BinOp to a Name (line 1495):
        # Getting the type of 'c2' (line 1495)
        c2_142719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1495, 13), 'c2')
        # Getting the type of 'dashdirection' (line 1495)
        dashdirection_142720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1495, 19), 'dashdirection')
        int_142721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1495, 35), 'int')
        # Applying the binary operator '*' (line 1495)
        result_mul_142722 = python_operator(stypy.reporting.localization.Localization(__file__, 1495, 19), '*', dashdirection_142720, int_142721)
        
        int_142723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1495, 39), 'int')
        # Applying the binary operator '-' (line 1495)
        result_sub_142724 = python_operator(stypy.reporting.localization.Localization(__file__, 1495, 19), '-', result_mul_142722, int_142723)
        
        # Getting the type of 'cwd' (line 1495)
        cwd_142725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1495, 44), 'cwd')
        # Applying the binary operator '*' (line 1495)
        result_mul_142726 = python_operator(stypy.reporting.localization.Localization(__file__, 1495, 18), '*', result_sub_142724, cwd_142725)
        
        # Applying the binary operator '+' (line 1495)
        result_add_142727 = python_operator(stypy.reporting.localization.Localization(__file__, 1495, 13), '+', c2_142719, result_mul_142726)
        
        # Assigning a type to the variable 'cw' (line 1495)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1495, 8), 'cw', result_add_142727)
        
        # Assigning a Call to a Tuple (line 1497):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to transform_point(...): (line 1497)
        # Processing the call arguments (line 1497)
        
        # Call to tuple(...): (line 1497)
        # Processing the call arguments (line 1497)
        # Getting the type of 'cw' (line 1497)
        cw_142731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 51), 'cw', False)
        # Processing the call keyword arguments (line 1497)
        kwargs_142732 = {}
        # Getting the type of 'tuple' (line 1497)
        tuple_142730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 45), 'tuple', False)
        # Calling tuple(args, kwargs) (line 1497)
        tuple_call_result_142733 = invoke(stypy.reporting.localization.Localization(__file__, 1497, 45), tuple_142730, *[cw_142731], **kwargs_142732)
        
        # Processing the call keyword arguments (line 1497)
        kwargs_142734 = {}
        # Getting the type of 'inverse' (line 1497)
        inverse_142728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 21), 'inverse', False)
        # Obtaining the member 'transform_point' of a type (line 1497)
        transform_point_142729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1497, 21), inverse_142728, 'transform_point')
        # Calling transform_point(args, kwargs) (line 1497)
        transform_point_call_result_142735 = invoke(stypy.reporting.localization.Localization(__file__, 1497, 21), transform_point_142729, *[tuple_call_result_142733], **kwargs_142734)
        
        # Assigning a type to the variable 'call_assignment_139130' (line 1497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1497, 8), 'call_assignment_139130', transform_point_call_result_142735)
        
        # Assigning a Call to a Name (line 1497):
        
        # Assigning a Call to a Name (line 1497):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_142738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1497, 8), 'int')
        # Processing the call keyword arguments
        kwargs_142739 = {}
        # Getting the type of 'call_assignment_139130' (line 1497)
        call_assignment_139130_142736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 8), 'call_assignment_139130', False)
        # Obtaining the member '__getitem__' of a type (line 1497)
        getitem___142737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1497, 8), call_assignment_139130_142736, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_142740 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___142737, *[int_142738], **kwargs_142739)
        
        # Assigning a type to the variable 'call_assignment_139131' (line 1497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1497, 8), 'call_assignment_139131', getitem___call_result_142740)
        
        # Assigning a Name to a Name (line 1497):
        
        # Assigning a Name to a Name (line 1497):
        # Getting the type of 'call_assignment_139131' (line 1497)
        call_assignment_139131_142741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 8), 'call_assignment_139131')
        # Assigning a type to the variable 'newx' (line 1497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1497, 8), 'newx', call_assignment_139131_142741)
        
        # Assigning a Call to a Name (line 1497):
        
        # Assigning a Call to a Name (line 1497):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_142744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1497, 8), 'int')
        # Processing the call keyword arguments
        kwargs_142745 = {}
        # Getting the type of 'call_assignment_139130' (line 1497)
        call_assignment_139130_142742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 8), 'call_assignment_139130', False)
        # Obtaining the member '__getitem__' of a type (line 1497)
        getitem___142743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1497, 8), call_assignment_139130_142742, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_142746 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___142743, *[int_142744], **kwargs_142745)
        
        # Assigning a type to the variable 'call_assignment_139132' (line 1497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1497, 8), 'call_assignment_139132', getitem___call_result_142746)
        
        # Assigning a Name to a Name (line 1497):
        
        # Assigning a Name to a Name (line 1497):
        # Getting the type of 'call_assignment_139132' (line 1497)
        call_assignment_139132_142747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 8), 'call_assignment_139132')
        # Assigning a type to the variable 'newy' (line 1497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1497, 14), 'newy', call_assignment_139132_142747)
        
        # Assigning a Tuple to a Tuple (line 1498):
        
        # Assigning a Name to a Name (line 1498):
        
        # Assigning a Name to a Name (line 1498):
        # Getting the type of 'newx' (line 1498)
        newx_142748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 27), 'newx')
        # Assigning a type to the variable 'tuple_assignment_139133' (line 1498)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1498, 8), 'tuple_assignment_139133', newx_142748)
        
        # Assigning a Name to a Name (line 1498):
        
        # Assigning a Name to a Name (line 1498):
        # Getting the type of 'newy' (line 1498)
        newy_142749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 33), 'newy')
        # Assigning a type to the variable 'tuple_assignment_139134' (line 1498)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1498, 8), 'tuple_assignment_139134', newy_142749)
        
        # Assigning a Name to a Attribute (line 1498):
        
        # Assigning a Name to a Attribute (line 1498):
        # Getting the type of 'tuple_assignment_139133' (line 1498)
        tuple_assignment_139133_142750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 8), 'tuple_assignment_139133')
        # Getting the type of 'self' (line 1498)
        self_142751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 8), 'self')
        # Setting the type of the member '_x' of a type (line 1498)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1498, 8), self_142751, '_x', tuple_assignment_139133_142750)
        
        # Assigning a Name to a Attribute (line 1498):
        
        # Assigning a Name to a Attribute (line 1498):
        # Getting the type of 'tuple_assignment_139134' (line 1498)
        tuple_assignment_139134_142752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 8), 'tuple_assignment_139134')
        # Getting the type of 'self' (line 1498)
        self_142753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 17), 'self')
        # Setting the type of the member '_y' of a type (line 1498)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1498, 17), self_142753, '_y', tuple_assignment_139134_142752)
        
        # Assigning a Call to a Name (line 1502):
        
        # Assigning a Call to a Name (line 1502):
        
        # Assigning a Call to a Name (line 1502):
        
        # Call to get_window_extent(...): (line 1502)
        # Processing the call arguments (line 1502)
        # Getting the type of 'self' (line 1502)
        self_142756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 36), 'self', False)
        # Processing the call keyword arguments (line 1502)
        # Getting the type of 'renderer' (line 1502)
        renderer_142757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 51), 'renderer', False)
        keyword_142758 = renderer_142757
        kwargs_142759 = {'renderer': keyword_142758}
        # Getting the type of 'Text' (line 1502)
        Text_142754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 13), 'Text', False)
        # Obtaining the member 'get_window_extent' of a type (line 1502)
        get_window_extent_142755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1502, 13), Text_142754, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 1502)
        get_window_extent_call_result_142760 = invoke(stypy.reporting.localization.Localization(__file__, 1502, 13), get_window_extent_142755, *[self_142756], **kwargs_142759)
        
        # Assigning a type to the variable 'we' (line 1502)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1502, 8), 'we', get_window_extent_call_result_142760)
        
        # Assigning a Call to a Attribute (line 1503):
        
        # Assigning a Call to a Attribute (line 1503):
        
        # Assigning a Call to a Attribute (line 1503):
        
        # Call to frozen(...): (line 1503)
        # Processing the call keyword arguments (line 1503)
        kwargs_142763 = {}
        # Getting the type of 'we' (line 1503)
        we_142761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 34), 'we', False)
        # Obtaining the member 'frozen' of a type (line 1503)
        frozen_142762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1503, 34), we_142761, 'frozen')
        # Calling frozen(args, kwargs) (line 1503)
        frozen_call_result_142764 = invoke(stypy.reporting.localization.Localization(__file__, 1503, 34), frozen_142762, *[], **kwargs_142763)
        
        # Getting the type of 'self' (line 1503)
        self_142765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 8), 'self')
        # Setting the type of the member '_twd_window_extent' of a type (line 1503)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1503, 8), self_142765, '_twd_window_extent', frozen_call_result_142764)
        
        # Call to update_from_data_xy(...): (line 1504)
        # Processing the call arguments (line 1504)
        
        # Call to array(...): (line 1504)
        # Processing the call arguments (line 1504)
        
        # Obtaining an instance of the builtin type 'list' (line 1504)
        list_142771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1504, 61), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1504)
        # Adding element type (line 1504)
        # Getting the type of 'c1' (line 1504)
        c1_142772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1504, 62), 'c1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1504, 61), list_142771, c1_142772)
        
        # Processing the call keyword arguments (line 1504)
        kwargs_142773 = {}
        # Getting the type of 'np' (line 1504)
        np_142769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1504, 52), 'np', False)
        # Obtaining the member 'array' of a type (line 1504)
        array_142770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1504, 52), np_142769, 'array')
        # Calling array(args, kwargs) (line 1504)
        array_call_result_142774 = invoke(stypy.reporting.localization.Localization(__file__, 1504, 52), array_142770, *[list_142771], **kwargs_142773)
        
        # Getting the type of 'False' (line 1504)
        False_142775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1504, 68), 'False', False)
        # Processing the call keyword arguments (line 1504)
        kwargs_142776 = {}
        # Getting the type of 'self' (line 1504)
        self_142766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1504, 8), 'self', False)
        # Obtaining the member '_twd_window_extent' of a type (line 1504)
        _twd_window_extent_142767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1504, 8), self_142766, '_twd_window_extent')
        # Obtaining the member 'update_from_data_xy' of a type (line 1504)
        update_from_data_xy_142768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1504, 8), _twd_window_extent_142767, 'update_from_data_xy')
        # Calling update_from_data_xy(args, kwargs) (line 1504)
        update_from_data_xy_call_result_142777 = invoke(stypy.reporting.localization.Localization(__file__, 1504, 8), update_from_data_xy_142768, *[array_call_result_142774, False_142775], **kwargs_142776)
        
        
        # Call to set_horizontalalignment(...): (line 1507)
        # Processing the call arguments (line 1507)
        # Getting the type of 'self' (line 1507)
        self_142780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 37), 'self', False)
        unicode_142781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1507, 43), 'unicode', u'center')
        # Processing the call keyword arguments (line 1507)
        kwargs_142782 = {}
        # Getting the type of 'Text' (line 1507)
        Text_142778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 8), 'Text', False)
        # Obtaining the member 'set_horizontalalignment' of a type (line 1507)
        set_horizontalalignment_142779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1507, 8), Text_142778, 'set_horizontalalignment')
        # Calling set_horizontalalignment(args, kwargs) (line 1507)
        set_horizontalalignment_call_result_142783 = invoke(stypy.reporting.localization.Localization(__file__, 1507, 8), set_horizontalalignment_142779, *[self_142780, unicode_142781], **kwargs_142782)
        
        
        # Call to set_verticalalignment(...): (line 1508)
        # Processing the call arguments (line 1508)
        # Getting the type of 'self' (line 1508)
        self_142786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1508, 35), 'self', False)
        unicode_142787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1508, 41), 'unicode', u'center')
        # Processing the call keyword arguments (line 1508)
        kwargs_142788 = {}
        # Getting the type of 'Text' (line 1508)
        Text_142784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1508, 8), 'Text', False)
        # Obtaining the member 'set_verticalalignment' of a type (line 1508)
        set_verticalalignment_142785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1508, 8), Text_142784, 'set_verticalalignment')
        # Calling set_verticalalignment(args, kwargs) (line 1508)
        set_verticalalignment_call_result_142789 = invoke(stypy.reporting.localization.Localization(__file__, 1508, 8), set_verticalalignment_142785, *[self_142786, unicode_142787], **kwargs_142788)
        
        
        # ################# End of 'update_coords(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update_coords' in the type store
        # Getting the type of 'stypy_return_type' (line 1426)
        stypy_return_type_142790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142790)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update_coords'
        return stypy_return_type_142790


    @norecursion
    def get_window_extent(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1510)
        None_142791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1510, 41), 'None')
        defaults = [None_142791]
        # Create a new context for function 'get_window_extent'
        module_type_store = module_type_store.open_function_context('get_window_extent', 1510, 4, False)
        # Assigning a type to the variable 'self' (line 1511)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1511, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextWithDash.get_window_extent.__dict__.__setitem__('stypy_localization', localization)
        TextWithDash.get_window_extent.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextWithDash.get_window_extent.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextWithDash.get_window_extent.__dict__.__setitem__('stypy_function_name', 'TextWithDash.get_window_extent')
        TextWithDash.get_window_extent.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        TextWithDash.get_window_extent.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextWithDash.get_window_extent.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextWithDash.get_window_extent.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextWithDash.get_window_extent.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextWithDash.get_window_extent.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextWithDash.get_window_extent.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextWithDash.get_window_extent', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_window_extent', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_window_extent(...)' code ##################

        unicode_142792 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1524, (-1)), 'unicode', u'\n        Return a :class:`~matplotlib.transforms.Bbox` object bounding\n        the text, in display units.\n\n        In addition to being used internally, this is useful for\n        specifying clickable regions in a png file on a web page.\n\n        *renderer* defaults to the _renderer attribute of the text\n        object.  This is not assigned until the first execution of\n        :meth:`draw`, so you must use this kwarg if you want\n        to call :meth:`get_window_extent` prior to the first\n        :meth:`draw`.  For getting web page regions, it is\n        simpler to call the method after saving the figure.\n        ')
        
        # Call to update_coords(...): (line 1525)
        # Processing the call arguments (line 1525)
        # Getting the type of 'renderer' (line 1525)
        renderer_142795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 27), 'renderer', False)
        # Processing the call keyword arguments (line 1525)
        kwargs_142796 = {}
        # Getting the type of 'self' (line 1525)
        self_142793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 8), 'self', False)
        # Obtaining the member 'update_coords' of a type (line 1525)
        update_coords_142794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1525, 8), self_142793, 'update_coords')
        # Calling update_coords(args, kwargs) (line 1525)
        update_coords_call_result_142797 = invoke(stypy.reporting.localization.Localization(__file__, 1525, 8), update_coords_142794, *[renderer_142795], **kwargs_142796)
        
        
        
        
        # Call to get_dashlength(...): (line 1526)
        # Processing the call keyword arguments (line 1526)
        kwargs_142800 = {}
        # Getting the type of 'self' (line 1526)
        self_142798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 11), 'self', False)
        # Obtaining the member 'get_dashlength' of a type (line 1526)
        get_dashlength_142799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1526, 11), self_142798, 'get_dashlength')
        # Calling get_dashlength(args, kwargs) (line 1526)
        get_dashlength_call_result_142801 = invoke(stypy.reporting.localization.Localization(__file__, 1526, 11), get_dashlength_142799, *[], **kwargs_142800)
        
        float_142802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1526, 36), 'float')
        # Applying the binary operator '==' (line 1526)
        result_eq_142803 = python_operator(stypy.reporting.localization.Localization(__file__, 1526, 11), '==', get_dashlength_call_result_142801, float_142802)
        
        # Testing the type of an if condition (line 1526)
        if_condition_142804 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1526, 8), result_eq_142803)
        # Assigning a type to the variable 'if_condition_142804' (line 1526)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1526, 8), 'if_condition_142804', if_condition_142804)
        # SSA begins for if statement (line 1526)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to get_window_extent(...): (line 1527)
        # Processing the call arguments (line 1527)
        # Getting the type of 'self' (line 1527)
        self_142807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 42), 'self', False)
        # Processing the call keyword arguments (line 1527)
        # Getting the type of 'renderer' (line 1527)
        renderer_142808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 57), 'renderer', False)
        keyword_142809 = renderer_142808
        kwargs_142810 = {'renderer': keyword_142809}
        # Getting the type of 'Text' (line 1527)
        Text_142805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 19), 'Text', False)
        # Obtaining the member 'get_window_extent' of a type (line 1527)
        get_window_extent_142806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1527, 19), Text_142805, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 1527)
        get_window_extent_call_result_142811 = invoke(stypy.reporting.localization.Localization(__file__, 1527, 19), get_window_extent_142806, *[self_142807], **kwargs_142810)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1527)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1527, 12), 'stypy_return_type', get_window_extent_call_result_142811)
        # SSA branch for the else part of an if statement (line 1526)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'self' (line 1529)
        self_142812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 19), 'self')
        # Obtaining the member '_twd_window_extent' of a type (line 1529)
        _twd_window_extent_142813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1529, 19), self_142812, '_twd_window_extent')
        # Assigning a type to the variable 'stypy_return_type' (line 1529)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1529, 12), 'stypy_return_type', _twd_window_extent_142813)
        # SSA join for if statement (line 1526)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'get_window_extent(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_window_extent' in the type store
        # Getting the type of 'stypy_return_type' (line 1510)
        stypy_return_type_142814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1510, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142814)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_window_extent'
        return stypy_return_type_142814


    @norecursion
    def get_dashlength(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_dashlength'
        module_type_store = module_type_store.open_function_context('get_dashlength', 1531, 4, False)
        # Assigning a type to the variable 'self' (line 1532)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1532, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextWithDash.get_dashlength.__dict__.__setitem__('stypy_localization', localization)
        TextWithDash.get_dashlength.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextWithDash.get_dashlength.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextWithDash.get_dashlength.__dict__.__setitem__('stypy_function_name', 'TextWithDash.get_dashlength')
        TextWithDash.get_dashlength.__dict__.__setitem__('stypy_param_names_list', [])
        TextWithDash.get_dashlength.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextWithDash.get_dashlength.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextWithDash.get_dashlength.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextWithDash.get_dashlength.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextWithDash.get_dashlength.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextWithDash.get_dashlength.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextWithDash.get_dashlength', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_dashlength', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_dashlength(...)' code ##################

        unicode_142815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1534, (-1)), 'unicode', u'\n        Get the length of the dash.\n        ')
        # Getting the type of 'self' (line 1535)
        self_142816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 15), 'self')
        # Obtaining the member '_dashlength' of a type (line 1535)
        _dashlength_142817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1535, 15), self_142816, '_dashlength')
        # Assigning a type to the variable 'stypy_return_type' (line 1535)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1535, 8), 'stypy_return_type', _dashlength_142817)
        
        # ################# End of 'get_dashlength(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_dashlength' in the type store
        # Getting the type of 'stypy_return_type' (line 1531)
        stypy_return_type_142818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142818)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_dashlength'
        return stypy_return_type_142818


    @norecursion
    def set_dashlength(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_dashlength'
        module_type_store = module_type_store.open_function_context('set_dashlength', 1537, 4, False)
        # Assigning a type to the variable 'self' (line 1538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1538, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextWithDash.set_dashlength.__dict__.__setitem__('stypy_localization', localization)
        TextWithDash.set_dashlength.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextWithDash.set_dashlength.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextWithDash.set_dashlength.__dict__.__setitem__('stypy_function_name', 'TextWithDash.set_dashlength')
        TextWithDash.set_dashlength.__dict__.__setitem__('stypy_param_names_list', ['dl'])
        TextWithDash.set_dashlength.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextWithDash.set_dashlength.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextWithDash.set_dashlength.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextWithDash.set_dashlength.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextWithDash.set_dashlength.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextWithDash.set_dashlength.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextWithDash.set_dashlength', ['dl'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_dashlength', localization, ['dl'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_dashlength(...)' code ##################

        unicode_142819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1542, (-1)), 'unicode', u'\n        Set the length of the dash.\n\n        ACCEPTS: float (canvas units)\n        ')
        
        # Assigning a Name to a Attribute (line 1543):
        
        # Assigning a Name to a Attribute (line 1543):
        
        # Assigning a Name to a Attribute (line 1543):
        # Getting the type of 'dl' (line 1543)
        dl_142820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 27), 'dl')
        # Getting the type of 'self' (line 1543)
        self_142821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 8), 'self')
        # Setting the type of the member '_dashlength' of a type (line 1543)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1543, 8), self_142821, '_dashlength', dl_142820)
        
        # Assigning a Name to a Attribute (line 1544):
        
        # Assigning a Name to a Attribute (line 1544):
        
        # Assigning a Name to a Attribute (line 1544):
        # Getting the type of 'True' (line 1544)
        True_142822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1544, 21), 'True')
        # Getting the type of 'self' (line 1544)
        self_142823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1544, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1544)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1544, 8), self_142823, 'stale', True_142822)
        
        # ################# End of 'set_dashlength(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_dashlength' in the type store
        # Getting the type of 'stypy_return_type' (line 1537)
        stypy_return_type_142824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142824)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_dashlength'
        return stypy_return_type_142824


    @norecursion
    def get_dashdirection(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_dashdirection'
        module_type_store = module_type_store.open_function_context('get_dashdirection', 1546, 4, False)
        # Assigning a type to the variable 'self' (line 1547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1547, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextWithDash.get_dashdirection.__dict__.__setitem__('stypy_localization', localization)
        TextWithDash.get_dashdirection.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextWithDash.get_dashdirection.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextWithDash.get_dashdirection.__dict__.__setitem__('stypy_function_name', 'TextWithDash.get_dashdirection')
        TextWithDash.get_dashdirection.__dict__.__setitem__('stypy_param_names_list', [])
        TextWithDash.get_dashdirection.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextWithDash.get_dashdirection.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextWithDash.get_dashdirection.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextWithDash.get_dashdirection.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextWithDash.get_dashdirection.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextWithDash.get_dashdirection.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextWithDash.get_dashdirection', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_dashdirection', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_dashdirection(...)' code ##################

        unicode_142825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1549, (-1)), 'unicode', u'\n        Get the direction dash.  1 is before the text and 0 is after.\n        ')
        # Getting the type of 'self' (line 1550)
        self_142826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 15), 'self')
        # Obtaining the member '_dashdirection' of a type (line 1550)
        _dashdirection_142827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1550, 15), self_142826, '_dashdirection')
        # Assigning a type to the variable 'stypy_return_type' (line 1550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1550, 8), 'stypy_return_type', _dashdirection_142827)
        
        # ################# End of 'get_dashdirection(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_dashdirection' in the type store
        # Getting the type of 'stypy_return_type' (line 1546)
        stypy_return_type_142828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142828)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_dashdirection'
        return stypy_return_type_142828


    @norecursion
    def set_dashdirection(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_dashdirection'
        module_type_store = module_type_store.open_function_context('set_dashdirection', 1552, 4, False)
        # Assigning a type to the variable 'self' (line 1553)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1553, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextWithDash.set_dashdirection.__dict__.__setitem__('stypy_localization', localization)
        TextWithDash.set_dashdirection.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextWithDash.set_dashdirection.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextWithDash.set_dashdirection.__dict__.__setitem__('stypy_function_name', 'TextWithDash.set_dashdirection')
        TextWithDash.set_dashdirection.__dict__.__setitem__('stypy_param_names_list', ['dd'])
        TextWithDash.set_dashdirection.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextWithDash.set_dashdirection.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextWithDash.set_dashdirection.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextWithDash.set_dashdirection.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextWithDash.set_dashdirection.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextWithDash.set_dashdirection.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextWithDash.set_dashdirection', ['dd'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_dashdirection', localization, ['dd'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_dashdirection(...)' code ##################

        unicode_142829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1560, (-1)), 'unicode', u"\n        Set the direction of the dash following the text.\n        1 is before the text and 0 is after. The default\n        is 0, which is what you'd want for the typical\n        case of ticks below and on the left of the figure.\n\n        ACCEPTS: int (1 is before, 0 is after)\n        ")
        
        # Assigning a Name to a Attribute (line 1561):
        
        # Assigning a Name to a Attribute (line 1561):
        
        # Assigning a Name to a Attribute (line 1561):
        # Getting the type of 'dd' (line 1561)
        dd_142830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 30), 'dd')
        # Getting the type of 'self' (line 1561)
        self_142831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 8), 'self')
        # Setting the type of the member '_dashdirection' of a type (line 1561)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1561, 8), self_142831, '_dashdirection', dd_142830)
        
        # Assigning a Name to a Attribute (line 1562):
        
        # Assigning a Name to a Attribute (line 1562):
        
        # Assigning a Name to a Attribute (line 1562):
        # Getting the type of 'True' (line 1562)
        True_142832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1562, 21), 'True')
        # Getting the type of 'self' (line 1562)
        self_142833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1562, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1562)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1562, 8), self_142833, 'stale', True_142832)
        
        # ################# End of 'set_dashdirection(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_dashdirection' in the type store
        # Getting the type of 'stypy_return_type' (line 1552)
        stypy_return_type_142834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1552, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142834)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_dashdirection'
        return stypy_return_type_142834


    @norecursion
    def get_dashrotation(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_dashrotation'
        module_type_store = module_type_store.open_function_context('get_dashrotation', 1564, 4, False)
        # Assigning a type to the variable 'self' (line 1565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1565, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextWithDash.get_dashrotation.__dict__.__setitem__('stypy_localization', localization)
        TextWithDash.get_dashrotation.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextWithDash.get_dashrotation.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextWithDash.get_dashrotation.__dict__.__setitem__('stypy_function_name', 'TextWithDash.get_dashrotation')
        TextWithDash.get_dashrotation.__dict__.__setitem__('stypy_param_names_list', [])
        TextWithDash.get_dashrotation.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextWithDash.get_dashrotation.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextWithDash.get_dashrotation.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextWithDash.get_dashrotation.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextWithDash.get_dashrotation.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextWithDash.get_dashrotation.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextWithDash.get_dashrotation', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_dashrotation', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_dashrotation(...)' code ##################

        unicode_142835 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1567, (-1)), 'unicode', u'\n        Get the rotation of the dash in degrees.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1568)
        # Getting the type of 'self' (line 1568)
        self_142836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1568, 11), 'self')
        # Obtaining the member '_dashrotation' of a type (line 1568)
        _dashrotation_142837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1568, 11), self_142836, '_dashrotation')
        # Getting the type of 'None' (line 1568)
        None_142838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1568, 33), 'None')
        
        (may_be_142839, more_types_in_union_142840) = may_be_none(_dashrotation_142837, None_142838)

        if may_be_142839:

            if more_types_in_union_142840:
                # Runtime conditional SSA (line 1568)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to get_rotation(...): (line 1569)
            # Processing the call keyword arguments (line 1569)
            kwargs_142843 = {}
            # Getting the type of 'self' (line 1569)
            self_142841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1569, 19), 'self', False)
            # Obtaining the member 'get_rotation' of a type (line 1569)
            get_rotation_142842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1569, 19), self_142841, 'get_rotation')
            # Calling get_rotation(args, kwargs) (line 1569)
            get_rotation_call_result_142844 = invoke(stypy.reporting.localization.Localization(__file__, 1569, 19), get_rotation_142842, *[], **kwargs_142843)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1569)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1569, 12), 'stypy_return_type', get_rotation_call_result_142844)

            if more_types_in_union_142840:
                # Runtime conditional SSA for else branch (line 1568)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_142839) or more_types_in_union_142840):
            # Getting the type of 'self' (line 1571)
            self_142845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 19), 'self')
            # Obtaining the member '_dashrotation' of a type (line 1571)
            _dashrotation_142846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1571, 19), self_142845, '_dashrotation')
            # Assigning a type to the variable 'stypy_return_type' (line 1571)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1571, 12), 'stypy_return_type', _dashrotation_142846)

            if (may_be_142839 and more_types_in_union_142840):
                # SSA join for if statement (line 1568)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'get_dashrotation(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_dashrotation' in the type store
        # Getting the type of 'stypy_return_type' (line 1564)
        stypy_return_type_142847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1564, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142847)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_dashrotation'
        return stypy_return_type_142847


    @norecursion
    def set_dashrotation(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_dashrotation'
        module_type_store = module_type_store.open_function_context('set_dashrotation', 1573, 4, False)
        # Assigning a type to the variable 'self' (line 1574)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1574, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextWithDash.set_dashrotation.__dict__.__setitem__('stypy_localization', localization)
        TextWithDash.set_dashrotation.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextWithDash.set_dashrotation.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextWithDash.set_dashrotation.__dict__.__setitem__('stypy_function_name', 'TextWithDash.set_dashrotation')
        TextWithDash.set_dashrotation.__dict__.__setitem__('stypy_param_names_list', ['dr'])
        TextWithDash.set_dashrotation.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextWithDash.set_dashrotation.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextWithDash.set_dashrotation.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextWithDash.set_dashrotation.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextWithDash.set_dashrotation.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextWithDash.set_dashrotation.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextWithDash.set_dashrotation', ['dr'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_dashrotation', localization, ['dr'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_dashrotation(...)' code ##################

        unicode_142848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1578, (-1)), 'unicode', u'\n        Set the rotation of the dash, in degrees\n\n        ACCEPTS: float (degrees)\n        ')
        
        # Assigning a Name to a Attribute (line 1579):
        
        # Assigning a Name to a Attribute (line 1579):
        
        # Assigning a Name to a Attribute (line 1579):
        # Getting the type of 'dr' (line 1579)
        dr_142849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1579, 29), 'dr')
        # Getting the type of 'self' (line 1579)
        self_142850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1579, 8), 'self')
        # Setting the type of the member '_dashrotation' of a type (line 1579)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1579, 8), self_142850, '_dashrotation', dr_142849)
        
        # Assigning a Name to a Attribute (line 1580):
        
        # Assigning a Name to a Attribute (line 1580):
        
        # Assigning a Name to a Attribute (line 1580):
        # Getting the type of 'True' (line 1580)
        True_142851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1580, 21), 'True')
        # Getting the type of 'self' (line 1580)
        self_142852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1580, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1580)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1580, 8), self_142852, 'stale', True_142851)
        
        # ################# End of 'set_dashrotation(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_dashrotation' in the type store
        # Getting the type of 'stypy_return_type' (line 1573)
        stypy_return_type_142853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142853)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_dashrotation'
        return stypy_return_type_142853


    @norecursion
    def get_dashpad(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_dashpad'
        module_type_store = module_type_store.open_function_context('get_dashpad', 1582, 4, False)
        # Assigning a type to the variable 'self' (line 1583)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1583, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextWithDash.get_dashpad.__dict__.__setitem__('stypy_localization', localization)
        TextWithDash.get_dashpad.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextWithDash.get_dashpad.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextWithDash.get_dashpad.__dict__.__setitem__('stypy_function_name', 'TextWithDash.get_dashpad')
        TextWithDash.get_dashpad.__dict__.__setitem__('stypy_param_names_list', [])
        TextWithDash.get_dashpad.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextWithDash.get_dashpad.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextWithDash.get_dashpad.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextWithDash.get_dashpad.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextWithDash.get_dashpad.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextWithDash.get_dashpad.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextWithDash.get_dashpad', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_dashpad', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_dashpad(...)' code ##################

        unicode_142854 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1585, (-1)), 'unicode', u'\n        Get the extra spacing between the dash and the text, in canvas units.\n        ')
        # Getting the type of 'self' (line 1586)
        self_142855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1586, 15), 'self')
        # Obtaining the member '_dashpad' of a type (line 1586)
        _dashpad_142856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1586, 15), self_142855, '_dashpad')
        # Assigning a type to the variable 'stypy_return_type' (line 1586)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1586, 8), 'stypy_return_type', _dashpad_142856)
        
        # ################# End of 'get_dashpad(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_dashpad' in the type store
        # Getting the type of 'stypy_return_type' (line 1582)
        stypy_return_type_142857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142857)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_dashpad'
        return stypy_return_type_142857


    @norecursion
    def set_dashpad(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_dashpad'
        module_type_store = module_type_store.open_function_context('set_dashpad', 1588, 4, False)
        # Assigning a type to the variable 'self' (line 1589)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1589, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextWithDash.set_dashpad.__dict__.__setitem__('stypy_localization', localization)
        TextWithDash.set_dashpad.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextWithDash.set_dashpad.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextWithDash.set_dashpad.__dict__.__setitem__('stypy_function_name', 'TextWithDash.set_dashpad')
        TextWithDash.set_dashpad.__dict__.__setitem__('stypy_param_names_list', ['dp'])
        TextWithDash.set_dashpad.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextWithDash.set_dashpad.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextWithDash.set_dashpad.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextWithDash.set_dashpad.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextWithDash.set_dashpad.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextWithDash.set_dashpad.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextWithDash.set_dashpad', ['dp'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_dashpad', localization, ['dp'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_dashpad(...)' code ##################

        unicode_142858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1594, (-1)), 'unicode', u'\n        Set the "pad" of the TextWithDash, which is the extra spacing\n        between the dash and the text, in canvas units.\n\n        ACCEPTS: float (canvas units)\n        ')
        
        # Assigning a Name to a Attribute (line 1595):
        
        # Assigning a Name to a Attribute (line 1595):
        
        # Assigning a Name to a Attribute (line 1595):
        # Getting the type of 'dp' (line 1595)
        dp_142859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 24), 'dp')
        # Getting the type of 'self' (line 1595)
        self_142860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 8), 'self')
        # Setting the type of the member '_dashpad' of a type (line 1595)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1595, 8), self_142860, '_dashpad', dp_142859)
        
        # Assigning a Name to a Attribute (line 1596):
        
        # Assigning a Name to a Attribute (line 1596):
        
        # Assigning a Name to a Attribute (line 1596):
        # Getting the type of 'True' (line 1596)
        True_142861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 21), 'True')
        # Getting the type of 'self' (line 1596)
        self_142862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1596)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1596, 8), self_142862, 'stale', True_142861)
        
        # ################# End of 'set_dashpad(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_dashpad' in the type store
        # Getting the type of 'stypy_return_type' (line 1588)
        stypy_return_type_142863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1588, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142863)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_dashpad'
        return stypy_return_type_142863


    @norecursion
    def get_dashpush(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_dashpush'
        module_type_store = module_type_store.open_function_context('get_dashpush', 1598, 4, False)
        # Assigning a type to the variable 'self' (line 1599)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1599, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextWithDash.get_dashpush.__dict__.__setitem__('stypy_localization', localization)
        TextWithDash.get_dashpush.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextWithDash.get_dashpush.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextWithDash.get_dashpush.__dict__.__setitem__('stypy_function_name', 'TextWithDash.get_dashpush')
        TextWithDash.get_dashpush.__dict__.__setitem__('stypy_param_names_list', [])
        TextWithDash.get_dashpush.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextWithDash.get_dashpush.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextWithDash.get_dashpush.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextWithDash.get_dashpush.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextWithDash.get_dashpush.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextWithDash.get_dashpush.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextWithDash.get_dashpush', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_dashpush', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_dashpush(...)' code ##################

        unicode_142864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1602, (-1)), 'unicode', u'\n        Get the extra spacing between the dash and the specified text\n        position, in canvas units.\n        ')
        # Getting the type of 'self' (line 1603)
        self_142865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1603, 15), 'self')
        # Obtaining the member '_dashpush' of a type (line 1603)
        _dashpush_142866 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1603, 15), self_142865, '_dashpush')
        # Assigning a type to the variable 'stypy_return_type' (line 1603)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1603, 8), 'stypy_return_type', _dashpush_142866)
        
        # ################# End of 'get_dashpush(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_dashpush' in the type store
        # Getting the type of 'stypy_return_type' (line 1598)
        stypy_return_type_142867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1598, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142867)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_dashpush'
        return stypy_return_type_142867


    @norecursion
    def set_dashpush(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_dashpush'
        module_type_store = module_type_store.open_function_context('set_dashpush', 1605, 4, False)
        # Assigning a type to the variable 'self' (line 1606)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1606, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextWithDash.set_dashpush.__dict__.__setitem__('stypy_localization', localization)
        TextWithDash.set_dashpush.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextWithDash.set_dashpush.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextWithDash.set_dashpush.__dict__.__setitem__('stypy_function_name', 'TextWithDash.set_dashpush')
        TextWithDash.set_dashpush.__dict__.__setitem__('stypy_param_names_list', ['dp'])
        TextWithDash.set_dashpush.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextWithDash.set_dashpush.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextWithDash.set_dashpush.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextWithDash.set_dashpush.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextWithDash.set_dashpush.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextWithDash.set_dashpush.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextWithDash.set_dashpush', ['dp'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_dashpush', localization, ['dp'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_dashpush(...)' code ##################

        unicode_142868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1612, (-1)), 'unicode', u'\n        Set the "push" of the TextWithDash, which\n        is the extra spacing between the beginning\n        of the dash and the specified position.\n\n        ACCEPTS: float (canvas units)\n        ')
        
        # Assigning a Name to a Attribute (line 1613):
        
        # Assigning a Name to a Attribute (line 1613):
        
        # Assigning a Name to a Attribute (line 1613):
        # Getting the type of 'dp' (line 1613)
        dp_142869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1613, 25), 'dp')
        # Getting the type of 'self' (line 1613)
        self_142870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1613, 8), 'self')
        # Setting the type of the member '_dashpush' of a type (line 1613)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1613, 8), self_142870, '_dashpush', dp_142869)
        
        # Assigning a Name to a Attribute (line 1614):
        
        # Assigning a Name to a Attribute (line 1614):
        
        # Assigning a Name to a Attribute (line 1614):
        # Getting the type of 'True' (line 1614)
        True_142871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1614, 21), 'True')
        # Getting the type of 'self' (line 1614)
        self_142872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1614, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1614)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1614, 8), self_142872, 'stale', True_142871)
        
        # ################# End of 'set_dashpush(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_dashpush' in the type store
        # Getting the type of 'stypy_return_type' (line 1605)
        stypy_return_type_142873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1605, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142873)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_dashpush'
        return stypy_return_type_142873


    @norecursion
    def set_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_position'
        module_type_store = module_type_store.open_function_context('set_position', 1616, 4, False)
        # Assigning a type to the variable 'self' (line 1617)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1617, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextWithDash.set_position.__dict__.__setitem__('stypy_localization', localization)
        TextWithDash.set_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextWithDash.set_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextWithDash.set_position.__dict__.__setitem__('stypy_function_name', 'TextWithDash.set_position')
        TextWithDash.set_position.__dict__.__setitem__('stypy_param_names_list', ['xy'])
        TextWithDash.set_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextWithDash.set_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextWithDash.set_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextWithDash.set_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextWithDash.set_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextWithDash.set_position.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextWithDash.set_position', ['xy'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_position', localization, ['xy'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_position(...)' code ##################

        unicode_142874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1621, (-1)), 'unicode', u'\n        Set the (*x*, *y*) position of the :class:`TextWithDash`.\n\n        ACCEPTS: (x, y)\n        ')
        
        # Call to set_x(...): (line 1622)
        # Processing the call arguments (line 1622)
        
        # Obtaining the type of the subscript
        int_142877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1622, 22), 'int')
        # Getting the type of 'xy' (line 1622)
        xy_142878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 19), 'xy', False)
        # Obtaining the member '__getitem__' of a type (line 1622)
        getitem___142879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1622, 19), xy_142878, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1622)
        subscript_call_result_142880 = invoke(stypy.reporting.localization.Localization(__file__, 1622, 19), getitem___142879, int_142877)
        
        # Processing the call keyword arguments (line 1622)
        kwargs_142881 = {}
        # Getting the type of 'self' (line 1622)
        self_142875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 8), 'self', False)
        # Obtaining the member 'set_x' of a type (line 1622)
        set_x_142876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1622, 8), self_142875, 'set_x')
        # Calling set_x(args, kwargs) (line 1622)
        set_x_call_result_142882 = invoke(stypy.reporting.localization.Localization(__file__, 1622, 8), set_x_142876, *[subscript_call_result_142880], **kwargs_142881)
        
        
        # Call to set_y(...): (line 1623)
        # Processing the call arguments (line 1623)
        
        # Obtaining the type of the subscript
        int_142885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1623, 22), 'int')
        # Getting the type of 'xy' (line 1623)
        xy_142886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 19), 'xy', False)
        # Obtaining the member '__getitem__' of a type (line 1623)
        getitem___142887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1623, 19), xy_142886, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1623)
        subscript_call_result_142888 = invoke(stypy.reporting.localization.Localization(__file__, 1623, 19), getitem___142887, int_142885)
        
        # Processing the call keyword arguments (line 1623)
        kwargs_142889 = {}
        # Getting the type of 'self' (line 1623)
        self_142883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 8), 'self', False)
        # Obtaining the member 'set_y' of a type (line 1623)
        set_y_142884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1623, 8), self_142883, 'set_y')
        # Calling set_y(args, kwargs) (line 1623)
        set_y_call_result_142890 = invoke(stypy.reporting.localization.Localization(__file__, 1623, 8), set_y_142884, *[subscript_call_result_142888], **kwargs_142889)
        
        
        # ################# End of 'set_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_position' in the type store
        # Getting the type of 'stypy_return_type' (line 1616)
        stypy_return_type_142891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1616, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142891)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_position'
        return stypy_return_type_142891


    @norecursion
    def set_x(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_x'
        module_type_store = module_type_store.open_function_context('set_x', 1625, 4, False)
        # Assigning a type to the variable 'self' (line 1626)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1626, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextWithDash.set_x.__dict__.__setitem__('stypy_localization', localization)
        TextWithDash.set_x.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextWithDash.set_x.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextWithDash.set_x.__dict__.__setitem__('stypy_function_name', 'TextWithDash.set_x')
        TextWithDash.set_x.__dict__.__setitem__('stypy_param_names_list', ['x'])
        TextWithDash.set_x.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextWithDash.set_x.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextWithDash.set_x.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextWithDash.set_x.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextWithDash.set_x.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextWithDash.set_x.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextWithDash.set_x', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_x', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_x(...)' code ##################

        unicode_142892 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1630, (-1)), 'unicode', u'\n        Set the *x* position of the :class:`TextWithDash`.\n\n        ACCEPTS: float\n        ')
        
        # Assigning a Call to a Attribute (line 1631):
        
        # Assigning a Call to a Attribute (line 1631):
        
        # Assigning a Call to a Attribute (line 1631):
        
        # Call to float(...): (line 1631)
        # Processing the call arguments (line 1631)
        # Getting the type of 'x' (line 1631)
        x_142894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1631, 28), 'x', False)
        # Processing the call keyword arguments (line 1631)
        kwargs_142895 = {}
        # Getting the type of 'float' (line 1631)
        float_142893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1631, 22), 'float', False)
        # Calling float(args, kwargs) (line 1631)
        float_call_result_142896 = invoke(stypy.reporting.localization.Localization(__file__, 1631, 22), float_142893, *[x_142894], **kwargs_142895)
        
        # Getting the type of 'self' (line 1631)
        self_142897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1631, 8), 'self')
        # Setting the type of the member '_dashx' of a type (line 1631)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1631, 8), self_142897, '_dashx', float_call_result_142896)
        
        # Assigning a Name to a Attribute (line 1632):
        
        # Assigning a Name to a Attribute (line 1632):
        
        # Assigning a Name to a Attribute (line 1632):
        # Getting the type of 'True' (line 1632)
        True_142898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1632, 21), 'True')
        # Getting the type of 'self' (line 1632)
        self_142899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1632, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1632)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1632, 8), self_142899, 'stale', True_142898)
        
        # ################# End of 'set_x(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_x' in the type store
        # Getting the type of 'stypy_return_type' (line 1625)
        stypy_return_type_142900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1625, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142900)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_x'
        return stypy_return_type_142900


    @norecursion
    def set_y(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_y'
        module_type_store = module_type_store.open_function_context('set_y', 1634, 4, False)
        # Assigning a type to the variable 'self' (line 1635)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1635, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextWithDash.set_y.__dict__.__setitem__('stypy_localization', localization)
        TextWithDash.set_y.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextWithDash.set_y.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextWithDash.set_y.__dict__.__setitem__('stypy_function_name', 'TextWithDash.set_y')
        TextWithDash.set_y.__dict__.__setitem__('stypy_param_names_list', ['y'])
        TextWithDash.set_y.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextWithDash.set_y.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextWithDash.set_y.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextWithDash.set_y.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextWithDash.set_y.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextWithDash.set_y.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextWithDash.set_y', ['y'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_y', localization, ['y'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_y(...)' code ##################

        unicode_142901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1639, (-1)), 'unicode', u'\n        Set the *y* position of the :class:`TextWithDash`.\n\n        ACCEPTS: float\n        ')
        
        # Assigning a Call to a Attribute (line 1640):
        
        # Assigning a Call to a Attribute (line 1640):
        
        # Assigning a Call to a Attribute (line 1640):
        
        # Call to float(...): (line 1640)
        # Processing the call arguments (line 1640)
        # Getting the type of 'y' (line 1640)
        y_142903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 28), 'y', False)
        # Processing the call keyword arguments (line 1640)
        kwargs_142904 = {}
        # Getting the type of 'float' (line 1640)
        float_142902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 22), 'float', False)
        # Calling float(args, kwargs) (line 1640)
        float_call_result_142905 = invoke(stypy.reporting.localization.Localization(__file__, 1640, 22), float_142902, *[y_142903], **kwargs_142904)
        
        # Getting the type of 'self' (line 1640)
        self_142906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 8), 'self')
        # Setting the type of the member '_dashy' of a type (line 1640)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1640, 8), self_142906, '_dashy', float_call_result_142905)
        
        # Assigning a Name to a Attribute (line 1641):
        
        # Assigning a Name to a Attribute (line 1641):
        
        # Assigning a Name to a Attribute (line 1641):
        # Getting the type of 'True' (line 1641)
        True_142907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 21), 'True')
        # Getting the type of 'self' (line 1641)
        self_142908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1641)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1641, 8), self_142908, 'stale', True_142907)
        
        # ################# End of 'set_y(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_y' in the type store
        # Getting the type of 'stypy_return_type' (line 1634)
        stypy_return_type_142909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142909)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_y'
        return stypy_return_type_142909


    @norecursion
    def set_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_transform'
        module_type_store = module_type_store.open_function_context('set_transform', 1643, 4, False)
        # Assigning a type to the variable 'self' (line 1644)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1644, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextWithDash.set_transform.__dict__.__setitem__('stypy_localization', localization)
        TextWithDash.set_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextWithDash.set_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextWithDash.set_transform.__dict__.__setitem__('stypy_function_name', 'TextWithDash.set_transform')
        TextWithDash.set_transform.__dict__.__setitem__('stypy_param_names_list', ['t'])
        TextWithDash.set_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextWithDash.set_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextWithDash.set_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextWithDash.set_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextWithDash.set_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextWithDash.set_transform.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextWithDash.set_transform', ['t'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_transform', localization, ['t'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_transform(...)' code ##################

        unicode_142910 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1649, (-1)), 'unicode', u'\n        Set the :class:`matplotlib.transforms.Transform` instance used\n        by this artist.\n\n        ACCEPTS: a :class:`matplotlib.transforms.Transform` instance\n        ')
        
        # Call to set_transform(...): (line 1650)
        # Processing the call arguments (line 1650)
        # Getting the type of 'self' (line 1650)
        self_142913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 27), 'self', False)
        # Getting the type of 't' (line 1650)
        t_142914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 33), 't', False)
        # Processing the call keyword arguments (line 1650)
        kwargs_142915 = {}
        # Getting the type of 'Text' (line 1650)
        Text_142911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 8), 'Text', False)
        # Obtaining the member 'set_transform' of a type (line 1650)
        set_transform_142912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1650, 8), Text_142911, 'set_transform')
        # Calling set_transform(args, kwargs) (line 1650)
        set_transform_call_result_142916 = invoke(stypy.reporting.localization.Localization(__file__, 1650, 8), set_transform_142912, *[self_142913, t_142914], **kwargs_142915)
        
        
        # Call to set_transform(...): (line 1651)
        # Processing the call arguments (line 1651)
        # Getting the type of 't' (line 1651)
        t_142920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 36), 't', False)
        # Processing the call keyword arguments (line 1651)
        kwargs_142921 = {}
        # Getting the type of 'self' (line 1651)
        self_142917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 8), 'self', False)
        # Obtaining the member 'dashline' of a type (line 1651)
        dashline_142918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1651, 8), self_142917, 'dashline')
        # Obtaining the member 'set_transform' of a type (line 1651)
        set_transform_142919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1651, 8), dashline_142918, 'set_transform')
        # Calling set_transform(args, kwargs) (line 1651)
        set_transform_call_result_142922 = invoke(stypy.reporting.localization.Localization(__file__, 1651, 8), set_transform_142919, *[t_142920], **kwargs_142921)
        
        
        # Assigning a Name to a Attribute (line 1652):
        
        # Assigning a Name to a Attribute (line 1652):
        
        # Assigning a Name to a Attribute (line 1652):
        # Getting the type of 'True' (line 1652)
        True_142923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 21), 'True')
        # Getting the type of 'self' (line 1652)
        self_142924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1652)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1652, 8), self_142924, 'stale', True_142923)
        
        # ################# End of 'set_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 1643)
        stypy_return_type_142925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1643, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142925)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_transform'
        return stypy_return_type_142925


    @norecursion
    def get_figure(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_figure'
        module_type_store = module_type_store.open_function_context('get_figure', 1654, 4, False)
        # Assigning a type to the variable 'self' (line 1655)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1655, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextWithDash.get_figure.__dict__.__setitem__('stypy_localization', localization)
        TextWithDash.get_figure.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextWithDash.get_figure.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextWithDash.get_figure.__dict__.__setitem__('stypy_function_name', 'TextWithDash.get_figure')
        TextWithDash.get_figure.__dict__.__setitem__('stypy_param_names_list', [])
        TextWithDash.get_figure.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextWithDash.get_figure.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextWithDash.get_figure.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextWithDash.get_figure.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextWithDash.get_figure.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextWithDash.get_figure.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextWithDash.get_figure', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_figure', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_figure(...)' code ##################

        unicode_142926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1655, 8), 'unicode', u'return the figure instance the artist belongs to')
        # Getting the type of 'self' (line 1656)
        self_142927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1656, 15), 'self')
        # Obtaining the member 'figure' of a type (line 1656)
        figure_142928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1656, 15), self_142927, 'figure')
        # Assigning a type to the variable 'stypy_return_type' (line 1656)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1656, 8), 'stypy_return_type', figure_142928)
        
        # ################# End of 'get_figure(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_figure' in the type store
        # Getting the type of 'stypy_return_type' (line 1654)
        stypy_return_type_142929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142929)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_figure'
        return stypy_return_type_142929


    @norecursion
    def set_figure(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_figure'
        module_type_store = module_type_store.open_function_context('set_figure', 1658, 4, False)
        # Assigning a type to the variable 'self' (line 1659)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1659, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextWithDash.set_figure.__dict__.__setitem__('stypy_localization', localization)
        TextWithDash.set_figure.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextWithDash.set_figure.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextWithDash.set_figure.__dict__.__setitem__('stypy_function_name', 'TextWithDash.set_figure')
        TextWithDash.set_figure.__dict__.__setitem__('stypy_param_names_list', ['fig'])
        TextWithDash.set_figure.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextWithDash.set_figure.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextWithDash.set_figure.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextWithDash.set_figure.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextWithDash.set_figure.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextWithDash.set_figure.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextWithDash.set_figure', ['fig'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_figure', localization, ['fig'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_figure(...)' code ##################

        unicode_142930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1663, (-1)), 'unicode', u'\n        Set the figure instance the artist belong to.\n\n        ACCEPTS: a :class:`matplotlib.figure.Figure` instance\n        ')
        
        # Call to set_figure(...): (line 1664)
        # Processing the call arguments (line 1664)
        # Getting the type of 'self' (line 1664)
        self_142933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 24), 'self', False)
        # Getting the type of 'fig' (line 1664)
        fig_142934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 30), 'fig', False)
        # Processing the call keyword arguments (line 1664)
        kwargs_142935 = {}
        # Getting the type of 'Text' (line 1664)
        Text_142931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 8), 'Text', False)
        # Obtaining the member 'set_figure' of a type (line 1664)
        set_figure_142932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1664, 8), Text_142931, 'set_figure')
        # Calling set_figure(args, kwargs) (line 1664)
        set_figure_call_result_142936 = invoke(stypy.reporting.localization.Localization(__file__, 1664, 8), set_figure_142932, *[self_142933, fig_142934], **kwargs_142935)
        
        
        # Call to set_figure(...): (line 1665)
        # Processing the call arguments (line 1665)
        # Getting the type of 'fig' (line 1665)
        fig_142940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1665, 33), 'fig', False)
        # Processing the call keyword arguments (line 1665)
        kwargs_142941 = {}
        # Getting the type of 'self' (line 1665)
        self_142937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1665, 8), 'self', False)
        # Obtaining the member 'dashline' of a type (line 1665)
        dashline_142938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1665, 8), self_142937, 'dashline')
        # Obtaining the member 'set_figure' of a type (line 1665)
        set_figure_142939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1665, 8), dashline_142938, 'set_figure')
        # Calling set_figure(args, kwargs) (line 1665)
        set_figure_call_result_142942 = invoke(stypy.reporting.localization.Localization(__file__, 1665, 8), set_figure_142939, *[fig_142940], **kwargs_142941)
        
        
        # ################# End of 'set_figure(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_figure' in the type store
        # Getting the type of 'stypy_return_type' (line 1658)
        stypy_return_type_142943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142943)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_figure'
        return stypy_return_type_142943


# Assigning a type to the variable 'TextWithDash' (line 1286)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1286, 0), 'TextWithDash', TextWithDash)

# Assigning a Str to a Name (line 1340):
unicode_142944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1340, 15), 'unicode', u'textwithdash')
# Getting the type of 'TextWithDash'
TextWithDash_142945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'TextWithDash')
# Setting the type of the member '__name__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), TextWithDash_142945, '__name__', unicode_142944)

# Call to update(...): (line 1667)
# Processing the call keyword arguments (line 1667)

# Call to kwdoc(...): (line 1667)
# Processing the call arguments (line 1667)
# Getting the type of 'TextWithDash' (line 1667)
TextWithDash_142951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 51), 'TextWithDash', False)
# Processing the call keyword arguments (line 1667)
kwargs_142952 = {}
# Getting the type of 'artist' (line 1667)
artist_142949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 38), 'artist', False)
# Obtaining the member 'kwdoc' of a type (line 1667)
kwdoc_142950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1667, 38), artist_142949, 'kwdoc')
# Calling kwdoc(args, kwargs) (line 1667)
kwdoc_call_result_142953 = invoke(stypy.reporting.localization.Localization(__file__, 1667, 38), kwdoc_142950, *[TextWithDash_142951], **kwargs_142952)

keyword_142954 = kwdoc_call_result_142953
kwargs_142955 = {'TextWithDash': keyword_142954}
# Getting the type of 'docstring' (line 1667)
docstring_142946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 0), 'docstring', False)
# Obtaining the member 'interpd' of a type (line 1667)
interpd_142947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1667, 0), docstring_142946, 'interpd')
# Obtaining the member 'update' of a type (line 1667)
update_142948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1667, 0), interpd_142947, 'update')
# Calling update(args, kwargs) (line 1667)
update_call_result_142956 = invoke(stypy.reporting.localization.Localization(__file__, 1667, 0), update_142948, *[], **kwargs_142955)

# Declaration of the 'OffsetFrom' class

class OffsetFrom(object, ):
    unicode_142957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1671, 4), 'unicode', u'Callable helper class for working with `Annotation`')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_142958 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1672, 47), 'unicode', u'points')
        defaults = [unicode_142958]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1672, 4, False)
        # Assigning a type to the variable 'self' (line 1673)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1673, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OffsetFrom.__init__', ['artist', 'ref_coord', 'unit'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['artist', 'ref_coord', 'unit'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_142959 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1691, (-1)), 'unicode', u"\n        Parameters\n        ----------\n        artist : `Artist`, `BboxBase`, or `Transform`\n            The object to compute the offset from.\n\n        ref_coord : length 2 sequence\n            If `artist` is an `Artist` or `BboxBase`, this values is\n            the location to of the offset origin in fractions of the\n            `artist` bounding box.\n\n            If `artist` is a transform, the offset origin is the\n            transform applied to this value.\n\n        unit : {'points, 'pixels'}\n            The screen units to use (pixels or points) for the offset\n            input.\n\n        ")
        
        # Assigning a Name to a Attribute (line 1692):
        
        # Assigning a Name to a Attribute (line 1692):
        
        # Assigning a Name to a Attribute (line 1692):
        # Getting the type of 'artist' (line 1692)
        artist_142960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 23), 'artist')
        # Getting the type of 'self' (line 1692)
        self_142961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 8), 'self')
        # Setting the type of the member '_artist' of a type (line 1692)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1692, 8), self_142961, '_artist', artist_142960)
        
        # Assigning a Name to a Attribute (line 1693):
        
        # Assigning a Name to a Attribute (line 1693):
        
        # Assigning a Name to a Attribute (line 1693):
        # Getting the type of 'ref_coord' (line 1693)
        ref_coord_142962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 26), 'ref_coord')
        # Getting the type of 'self' (line 1693)
        self_142963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 8), 'self')
        # Setting the type of the member '_ref_coord' of a type (line 1693)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1693, 8), self_142963, '_ref_coord', ref_coord_142962)
        
        # Call to set_unit(...): (line 1694)
        # Processing the call arguments (line 1694)
        # Getting the type of 'unit' (line 1694)
        unit_142966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1694, 22), 'unit', False)
        # Processing the call keyword arguments (line 1694)
        kwargs_142967 = {}
        # Getting the type of 'self' (line 1694)
        self_142964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1694, 8), 'self', False)
        # Obtaining the member 'set_unit' of a type (line 1694)
        set_unit_142965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1694, 8), self_142964, 'set_unit')
        # Calling set_unit(args, kwargs) (line 1694)
        set_unit_call_result_142968 = invoke(stypy.reporting.localization.Localization(__file__, 1694, 8), set_unit_142965, *[unit_142966], **kwargs_142967)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def set_unit(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_unit'
        module_type_store = module_type_store.open_function_context('set_unit', 1696, 4, False)
        # Assigning a type to the variable 'self' (line 1697)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1697, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OffsetFrom.set_unit.__dict__.__setitem__('stypy_localization', localization)
        OffsetFrom.set_unit.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OffsetFrom.set_unit.__dict__.__setitem__('stypy_type_store', module_type_store)
        OffsetFrom.set_unit.__dict__.__setitem__('stypy_function_name', 'OffsetFrom.set_unit')
        OffsetFrom.set_unit.__dict__.__setitem__('stypy_param_names_list', ['unit'])
        OffsetFrom.set_unit.__dict__.__setitem__('stypy_varargs_param_name', None)
        OffsetFrom.set_unit.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OffsetFrom.set_unit.__dict__.__setitem__('stypy_call_defaults', defaults)
        OffsetFrom.set_unit.__dict__.__setitem__('stypy_call_varargs', varargs)
        OffsetFrom.set_unit.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OffsetFrom.set_unit.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OffsetFrom.set_unit', ['unit'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_unit', localization, ['unit'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_unit(...)' code ##################

        unicode_142969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1703, (-1)), 'unicode', u"\n        The unit for input to the transform used by ``__call__``\n\n        Parameters\n        ----------\n        unit : {'points', 'pixels'}\n        ")
        
        
        # Getting the type of 'unit' (line 1704)
        unit_142970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1704, 11), 'unit')
        
        # Obtaining an instance of the builtin type 'list' (line 1704)
        list_142971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1704, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1704)
        # Adding element type (line 1704)
        unicode_142972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1704, 24), 'unicode', u'points')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1704, 23), list_142971, unicode_142972)
        # Adding element type (line 1704)
        unicode_142973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1704, 34), 'unicode', u'pixels')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1704, 23), list_142971, unicode_142973)
        
        # Applying the binary operator 'notin' (line 1704)
        result_contains_142974 = python_operator(stypy.reporting.localization.Localization(__file__, 1704, 11), 'notin', unit_142970, list_142971)
        
        # Testing the type of an if condition (line 1704)
        if_condition_142975 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1704, 8), result_contains_142974)
        # Assigning a type to the variable 'if_condition_142975' (line 1704)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1704, 8), 'if_condition_142975', if_condition_142975)
        # SSA begins for if statement (line 1704)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1705)
        # Processing the call arguments (line 1705)
        unicode_142977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1705, 29), 'unicode', u"'unit' must be one of [ 'points' | 'pixels' ]")
        # Processing the call keyword arguments (line 1705)
        kwargs_142978 = {}
        # Getting the type of 'ValueError' (line 1705)
        ValueError_142976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1705, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1705)
        ValueError_call_result_142979 = invoke(stypy.reporting.localization.Localization(__file__, 1705, 18), ValueError_142976, *[unicode_142977], **kwargs_142978)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1705, 12), ValueError_call_result_142979, 'raise parameter', BaseException)
        # SSA join for if statement (line 1704)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1706):
        
        # Assigning a Name to a Attribute (line 1706):
        
        # Assigning a Name to a Attribute (line 1706):
        # Getting the type of 'unit' (line 1706)
        unit_142980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1706, 21), 'unit')
        # Getting the type of 'self' (line 1706)
        self_142981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1706, 8), 'self')
        # Setting the type of the member '_unit' of a type (line 1706)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1706, 8), self_142981, '_unit', unit_142980)
        
        # ################# End of 'set_unit(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_unit' in the type store
        # Getting the type of 'stypy_return_type' (line 1696)
        stypy_return_type_142982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1696, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142982)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_unit'
        return stypy_return_type_142982


    @norecursion
    def get_unit(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_unit'
        module_type_store = module_type_store.open_function_context('get_unit', 1708, 4, False)
        # Assigning a type to the variable 'self' (line 1709)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1709, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OffsetFrom.get_unit.__dict__.__setitem__('stypy_localization', localization)
        OffsetFrom.get_unit.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OffsetFrom.get_unit.__dict__.__setitem__('stypy_type_store', module_type_store)
        OffsetFrom.get_unit.__dict__.__setitem__('stypy_function_name', 'OffsetFrom.get_unit')
        OffsetFrom.get_unit.__dict__.__setitem__('stypy_param_names_list', [])
        OffsetFrom.get_unit.__dict__.__setitem__('stypy_varargs_param_name', None)
        OffsetFrom.get_unit.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OffsetFrom.get_unit.__dict__.__setitem__('stypy_call_defaults', defaults)
        OffsetFrom.get_unit.__dict__.__setitem__('stypy_call_varargs', varargs)
        OffsetFrom.get_unit.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OffsetFrom.get_unit.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OffsetFrom.get_unit', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_unit', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_unit(...)' code ##################

        unicode_142983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1709, 8), 'unicode', u'The unit for input to the transform used by ``__call__``')
        # Getting the type of 'self' (line 1710)
        self_142984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1710, 15), 'self')
        # Obtaining the member '_unit' of a type (line 1710)
        _unit_142985 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1710, 15), self_142984, '_unit')
        # Assigning a type to the variable 'stypy_return_type' (line 1710)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1710, 8), 'stypy_return_type', _unit_142985)
        
        # ################# End of 'get_unit(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_unit' in the type store
        # Getting the type of 'stypy_return_type' (line 1708)
        stypy_return_type_142986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1708, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142986)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_unit'
        return stypy_return_type_142986


    @norecursion
    def _get_scale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_scale'
        module_type_store = module_type_store.open_function_context('_get_scale', 1712, 4, False)
        # Assigning a type to the variable 'self' (line 1713)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1713, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OffsetFrom._get_scale.__dict__.__setitem__('stypy_localization', localization)
        OffsetFrom._get_scale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OffsetFrom._get_scale.__dict__.__setitem__('stypy_type_store', module_type_store)
        OffsetFrom._get_scale.__dict__.__setitem__('stypy_function_name', 'OffsetFrom._get_scale')
        OffsetFrom._get_scale.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        OffsetFrom._get_scale.__dict__.__setitem__('stypy_varargs_param_name', None)
        OffsetFrom._get_scale.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OffsetFrom._get_scale.__dict__.__setitem__('stypy_call_defaults', defaults)
        OffsetFrom._get_scale.__dict__.__setitem__('stypy_call_varargs', varargs)
        OffsetFrom._get_scale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OffsetFrom._get_scale.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OffsetFrom._get_scale', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_scale', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_scale(...)' code ##################

        
        # Assigning a Call to a Name (line 1713):
        
        # Assigning a Call to a Name (line 1713):
        
        # Assigning a Call to a Name (line 1713):
        
        # Call to get_unit(...): (line 1713)
        # Processing the call keyword arguments (line 1713)
        kwargs_142989 = {}
        # Getting the type of 'self' (line 1713)
        self_142987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1713, 15), 'self', False)
        # Obtaining the member 'get_unit' of a type (line 1713)
        get_unit_142988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1713, 15), self_142987, 'get_unit')
        # Calling get_unit(args, kwargs) (line 1713)
        get_unit_call_result_142990 = invoke(stypy.reporting.localization.Localization(__file__, 1713, 15), get_unit_142988, *[], **kwargs_142989)
        
        # Assigning a type to the variable 'unit' (line 1713)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1713, 8), 'unit', get_unit_call_result_142990)
        
        
        # Getting the type of 'unit' (line 1714)
        unit_142991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1714, 11), 'unit')
        unicode_142992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1714, 19), 'unicode', u'pixels')
        # Applying the binary operator '==' (line 1714)
        result_eq_142993 = python_operator(stypy.reporting.localization.Localization(__file__, 1714, 11), '==', unit_142991, unicode_142992)
        
        # Testing the type of an if condition (line 1714)
        if_condition_142994 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1714, 8), result_eq_142993)
        # Assigning a type to the variable 'if_condition_142994' (line 1714)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1714, 8), 'if_condition_142994', if_condition_142994)
        # SSA begins for if statement (line 1714)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        float_142995 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1715, 19), 'float')
        # Assigning a type to the variable 'stypy_return_type' (line 1715)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1715, 12), 'stypy_return_type', float_142995)
        # SSA branch for the else part of an if statement (line 1714)
        module_type_store.open_ssa_branch('else')
        
        # Call to points_to_pixels(...): (line 1717)
        # Processing the call arguments (line 1717)
        float_142998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1717, 45), 'float')
        # Processing the call keyword arguments (line 1717)
        kwargs_142999 = {}
        # Getting the type of 'renderer' (line 1717)
        renderer_142996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 19), 'renderer', False)
        # Obtaining the member 'points_to_pixels' of a type (line 1717)
        points_to_pixels_142997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1717, 19), renderer_142996, 'points_to_pixels')
        # Calling points_to_pixels(args, kwargs) (line 1717)
        points_to_pixels_call_result_143000 = invoke(stypy.reporting.localization.Localization(__file__, 1717, 19), points_to_pixels_142997, *[float_142998], **kwargs_142999)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1717)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1717, 12), 'stypy_return_type', points_to_pixels_call_result_143000)
        # SSA join for if statement (line 1714)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_get_scale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_scale' in the type store
        # Getting the type of 'stypy_return_type' (line 1712)
        stypy_return_type_143001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_143001)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_scale'
        return stypy_return_type_143001


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 1719, 4, False)
        # Assigning a type to the variable 'self' (line 1720)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1720, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OffsetFrom.__call__.__dict__.__setitem__('stypy_localization', localization)
        OffsetFrom.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OffsetFrom.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        OffsetFrom.__call__.__dict__.__setitem__('stypy_function_name', 'OffsetFrom.__call__')
        OffsetFrom.__call__.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        OffsetFrom.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        OffsetFrom.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OffsetFrom.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        OffsetFrom.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        OffsetFrom.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OffsetFrom.__call__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OffsetFrom.__call__', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        unicode_143002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1733, (-1)), 'unicode', u'\n        Return the offset transform.\n\n        Parameters\n        ----------\n        renderer : `RendererBase`\n            The renderer to use to compute the offset\n\n        Returns\n        -------\n        transform : `Transform`\n            Maps (x, y) in pixel or point units to screen units\n            relative to the given artist.\n        ')
        
        
        # Call to isinstance(...): (line 1734)
        # Processing the call arguments (line 1734)
        # Getting the type of 'self' (line 1734)
        self_143004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 22), 'self', False)
        # Obtaining the member '_artist' of a type (line 1734)
        _artist_143005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1734, 22), self_143004, '_artist')
        # Getting the type of 'Artist' (line 1734)
        Artist_143006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 36), 'Artist', False)
        # Processing the call keyword arguments (line 1734)
        kwargs_143007 = {}
        # Getting the type of 'isinstance' (line 1734)
        isinstance_143003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1734)
        isinstance_call_result_143008 = invoke(stypy.reporting.localization.Localization(__file__, 1734, 11), isinstance_143003, *[_artist_143005, Artist_143006], **kwargs_143007)
        
        # Testing the type of an if condition (line 1734)
        if_condition_143009 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1734, 8), isinstance_call_result_143008)
        # Assigning a type to the variable 'if_condition_143009' (line 1734)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1734, 8), 'if_condition_143009', if_condition_143009)
        # SSA begins for if statement (line 1734)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1735):
        
        # Assigning a Call to a Name (line 1735):
        
        # Assigning a Call to a Name (line 1735):
        
        # Call to get_window_extent(...): (line 1735)
        # Processing the call arguments (line 1735)
        # Getting the type of 'renderer' (line 1735)
        renderer_143013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 50), 'renderer', False)
        # Processing the call keyword arguments (line 1735)
        kwargs_143014 = {}
        # Getting the type of 'self' (line 1735)
        self_143010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 19), 'self', False)
        # Obtaining the member '_artist' of a type (line 1735)
        _artist_143011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1735, 19), self_143010, '_artist')
        # Obtaining the member 'get_window_extent' of a type (line 1735)
        get_window_extent_143012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1735, 19), _artist_143011, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 1735)
        get_window_extent_call_result_143015 = invoke(stypy.reporting.localization.Localization(__file__, 1735, 19), get_window_extent_143012, *[renderer_143013], **kwargs_143014)
        
        # Assigning a type to the variable 'bbox' (line 1735)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1735, 12), 'bbox', get_window_extent_call_result_143015)
        
        # Assigning a Attribute to a Tuple (line 1736):
        
        # Assigning a Subscript to a Name (line 1736):
        
        # Assigning a Subscript to a Name (line 1736):
        
        # Obtaining the type of the subscript
        int_143016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1736, 12), 'int')
        # Getting the type of 'bbox' (line 1736)
        bbox_143017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 25), 'bbox')
        # Obtaining the member 'bounds' of a type (line 1736)
        bounds_143018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1736, 25), bbox_143017, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 1736)
        getitem___143019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1736, 12), bounds_143018, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1736)
        subscript_call_result_143020 = invoke(stypy.reporting.localization.Localization(__file__, 1736, 12), getitem___143019, int_143016)
        
        # Assigning a type to the variable 'tuple_var_assignment_139135' (line 1736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1736, 12), 'tuple_var_assignment_139135', subscript_call_result_143020)
        
        # Assigning a Subscript to a Name (line 1736):
        
        # Assigning a Subscript to a Name (line 1736):
        
        # Obtaining the type of the subscript
        int_143021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1736, 12), 'int')
        # Getting the type of 'bbox' (line 1736)
        bbox_143022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 25), 'bbox')
        # Obtaining the member 'bounds' of a type (line 1736)
        bounds_143023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1736, 25), bbox_143022, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 1736)
        getitem___143024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1736, 12), bounds_143023, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1736)
        subscript_call_result_143025 = invoke(stypy.reporting.localization.Localization(__file__, 1736, 12), getitem___143024, int_143021)
        
        # Assigning a type to the variable 'tuple_var_assignment_139136' (line 1736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1736, 12), 'tuple_var_assignment_139136', subscript_call_result_143025)
        
        # Assigning a Subscript to a Name (line 1736):
        
        # Assigning a Subscript to a Name (line 1736):
        
        # Obtaining the type of the subscript
        int_143026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1736, 12), 'int')
        # Getting the type of 'bbox' (line 1736)
        bbox_143027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 25), 'bbox')
        # Obtaining the member 'bounds' of a type (line 1736)
        bounds_143028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1736, 25), bbox_143027, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 1736)
        getitem___143029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1736, 12), bounds_143028, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1736)
        subscript_call_result_143030 = invoke(stypy.reporting.localization.Localization(__file__, 1736, 12), getitem___143029, int_143026)
        
        # Assigning a type to the variable 'tuple_var_assignment_139137' (line 1736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1736, 12), 'tuple_var_assignment_139137', subscript_call_result_143030)
        
        # Assigning a Subscript to a Name (line 1736):
        
        # Assigning a Subscript to a Name (line 1736):
        
        # Obtaining the type of the subscript
        int_143031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1736, 12), 'int')
        # Getting the type of 'bbox' (line 1736)
        bbox_143032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 25), 'bbox')
        # Obtaining the member 'bounds' of a type (line 1736)
        bounds_143033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1736, 25), bbox_143032, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 1736)
        getitem___143034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1736, 12), bounds_143033, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1736)
        subscript_call_result_143035 = invoke(stypy.reporting.localization.Localization(__file__, 1736, 12), getitem___143034, int_143031)
        
        # Assigning a type to the variable 'tuple_var_assignment_139138' (line 1736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1736, 12), 'tuple_var_assignment_139138', subscript_call_result_143035)
        
        # Assigning a Name to a Name (line 1736):
        
        # Assigning a Name to a Name (line 1736):
        # Getting the type of 'tuple_var_assignment_139135' (line 1736)
        tuple_var_assignment_139135_143036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 12), 'tuple_var_assignment_139135')
        # Assigning a type to the variable 'l' (line 1736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1736, 12), 'l', tuple_var_assignment_139135_143036)
        
        # Assigning a Name to a Name (line 1736):
        
        # Assigning a Name to a Name (line 1736):
        # Getting the type of 'tuple_var_assignment_139136' (line 1736)
        tuple_var_assignment_139136_143037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 12), 'tuple_var_assignment_139136')
        # Assigning a type to the variable 'b' (line 1736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1736, 15), 'b', tuple_var_assignment_139136_143037)
        
        # Assigning a Name to a Name (line 1736):
        
        # Assigning a Name to a Name (line 1736):
        # Getting the type of 'tuple_var_assignment_139137' (line 1736)
        tuple_var_assignment_139137_143038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 12), 'tuple_var_assignment_139137')
        # Assigning a type to the variable 'w' (line 1736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1736, 18), 'w', tuple_var_assignment_139137_143038)
        
        # Assigning a Name to a Name (line 1736):
        
        # Assigning a Name to a Name (line 1736):
        # Getting the type of 'tuple_var_assignment_139138' (line 1736)
        tuple_var_assignment_139138_143039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 12), 'tuple_var_assignment_139138')
        # Assigning a type to the variable 'h' (line 1736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1736, 21), 'h', tuple_var_assignment_139138_143039)
        
        # Assigning a Attribute to a Tuple (line 1737):
        
        # Assigning a Subscript to a Name (line 1737):
        
        # Assigning a Subscript to a Name (line 1737):
        
        # Obtaining the type of the subscript
        int_143040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1737, 12), 'int')
        # Getting the type of 'self' (line 1737)
        self_143041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 21), 'self')
        # Obtaining the member '_ref_coord' of a type (line 1737)
        _ref_coord_143042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1737, 21), self_143041, '_ref_coord')
        # Obtaining the member '__getitem__' of a type (line 1737)
        getitem___143043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1737, 12), _ref_coord_143042, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1737)
        subscript_call_result_143044 = invoke(stypy.reporting.localization.Localization(__file__, 1737, 12), getitem___143043, int_143040)
        
        # Assigning a type to the variable 'tuple_var_assignment_139139' (line 1737)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1737, 12), 'tuple_var_assignment_139139', subscript_call_result_143044)
        
        # Assigning a Subscript to a Name (line 1737):
        
        # Assigning a Subscript to a Name (line 1737):
        
        # Obtaining the type of the subscript
        int_143045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1737, 12), 'int')
        # Getting the type of 'self' (line 1737)
        self_143046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 21), 'self')
        # Obtaining the member '_ref_coord' of a type (line 1737)
        _ref_coord_143047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1737, 21), self_143046, '_ref_coord')
        # Obtaining the member '__getitem__' of a type (line 1737)
        getitem___143048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1737, 12), _ref_coord_143047, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1737)
        subscript_call_result_143049 = invoke(stypy.reporting.localization.Localization(__file__, 1737, 12), getitem___143048, int_143045)
        
        # Assigning a type to the variable 'tuple_var_assignment_139140' (line 1737)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1737, 12), 'tuple_var_assignment_139140', subscript_call_result_143049)
        
        # Assigning a Name to a Name (line 1737):
        
        # Assigning a Name to a Name (line 1737):
        # Getting the type of 'tuple_var_assignment_139139' (line 1737)
        tuple_var_assignment_139139_143050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 12), 'tuple_var_assignment_139139')
        # Assigning a type to the variable 'xf' (line 1737)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1737, 12), 'xf', tuple_var_assignment_139139_143050)
        
        # Assigning a Name to a Name (line 1737):
        
        # Assigning a Name to a Name (line 1737):
        # Getting the type of 'tuple_var_assignment_139140' (line 1737)
        tuple_var_assignment_139140_143051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 12), 'tuple_var_assignment_139140')
        # Assigning a type to the variable 'yf' (line 1737)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1737, 16), 'yf', tuple_var_assignment_139140_143051)
        
        # Assigning a Tuple to a Tuple (line 1738):
        
        # Assigning a BinOp to a Name (line 1738):
        
        # Assigning a BinOp to a Name (line 1738):
        # Getting the type of 'l' (line 1738)
        l_143052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 19), 'l')
        # Getting the type of 'w' (line 1738)
        w_143053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 23), 'w')
        # Getting the type of 'xf' (line 1738)
        xf_143054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 27), 'xf')
        # Applying the binary operator '*' (line 1738)
        result_mul_143055 = python_operator(stypy.reporting.localization.Localization(__file__, 1738, 23), '*', w_143053, xf_143054)
        
        # Applying the binary operator '+' (line 1738)
        result_add_143056 = python_operator(stypy.reporting.localization.Localization(__file__, 1738, 19), '+', l_143052, result_mul_143055)
        
        # Assigning a type to the variable 'tuple_assignment_139141' (line 1738)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1738, 12), 'tuple_assignment_139141', result_add_143056)
        
        # Assigning a BinOp to a Name (line 1738):
        
        # Assigning a BinOp to a Name (line 1738):
        # Getting the type of 'b' (line 1738)
        b_143057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 31), 'b')
        # Getting the type of 'h' (line 1738)
        h_143058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 35), 'h')
        # Getting the type of 'yf' (line 1738)
        yf_143059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 39), 'yf')
        # Applying the binary operator '*' (line 1738)
        result_mul_143060 = python_operator(stypy.reporting.localization.Localization(__file__, 1738, 35), '*', h_143058, yf_143059)
        
        # Applying the binary operator '+' (line 1738)
        result_add_143061 = python_operator(stypy.reporting.localization.Localization(__file__, 1738, 31), '+', b_143057, result_mul_143060)
        
        # Assigning a type to the variable 'tuple_assignment_139142' (line 1738)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1738, 12), 'tuple_assignment_139142', result_add_143061)
        
        # Assigning a Name to a Name (line 1738):
        
        # Assigning a Name to a Name (line 1738):
        # Getting the type of 'tuple_assignment_139141' (line 1738)
        tuple_assignment_139141_143062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 12), 'tuple_assignment_139141')
        # Assigning a type to the variable 'x' (line 1738)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1738, 12), 'x', tuple_assignment_139141_143062)
        
        # Assigning a Name to a Name (line 1738):
        
        # Assigning a Name to a Name (line 1738):
        # Getting the type of 'tuple_assignment_139142' (line 1738)
        tuple_assignment_139142_143063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 12), 'tuple_assignment_139142')
        # Assigning a type to the variable 'y' (line 1738)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1738, 15), 'y', tuple_assignment_139142_143063)
        # SSA branch for the else part of an if statement (line 1734)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to isinstance(...): (line 1739)
        # Processing the call arguments (line 1739)
        # Getting the type of 'self' (line 1739)
        self_143065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1739, 24), 'self', False)
        # Obtaining the member '_artist' of a type (line 1739)
        _artist_143066 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1739, 24), self_143065, '_artist')
        # Getting the type of 'BboxBase' (line 1739)
        BboxBase_143067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1739, 38), 'BboxBase', False)
        # Processing the call keyword arguments (line 1739)
        kwargs_143068 = {}
        # Getting the type of 'isinstance' (line 1739)
        isinstance_143064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1739, 13), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1739)
        isinstance_call_result_143069 = invoke(stypy.reporting.localization.Localization(__file__, 1739, 13), isinstance_143064, *[_artist_143066, BboxBase_143067], **kwargs_143068)
        
        # Testing the type of an if condition (line 1739)
        if_condition_143070 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1739, 13), isinstance_call_result_143069)
        # Assigning a type to the variable 'if_condition_143070' (line 1739)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1739, 13), 'if_condition_143070', if_condition_143070)
        # SSA begins for if statement (line 1739)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Tuple (line 1740):
        
        # Assigning a Subscript to a Name (line 1740):
        
        # Assigning a Subscript to a Name (line 1740):
        
        # Obtaining the type of the subscript
        int_143071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1740, 12), 'int')
        # Getting the type of 'self' (line 1740)
        self_143072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 25), 'self')
        # Obtaining the member '_artist' of a type (line 1740)
        _artist_143073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1740, 25), self_143072, '_artist')
        # Obtaining the member 'bounds' of a type (line 1740)
        bounds_143074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1740, 25), _artist_143073, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 1740)
        getitem___143075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1740, 12), bounds_143074, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1740)
        subscript_call_result_143076 = invoke(stypy.reporting.localization.Localization(__file__, 1740, 12), getitem___143075, int_143071)
        
        # Assigning a type to the variable 'tuple_var_assignment_139143' (line 1740)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1740, 12), 'tuple_var_assignment_139143', subscript_call_result_143076)
        
        # Assigning a Subscript to a Name (line 1740):
        
        # Assigning a Subscript to a Name (line 1740):
        
        # Obtaining the type of the subscript
        int_143077 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1740, 12), 'int')
        # Getting the type of 'self' (line 1740)
        self_143078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 25), 'self')
        # Obtaining the member '_artist' of a type (line 1740)
        _artist_143079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1740, 25), self_143078, '_artist')
        # Obtaining the member 'bounds' of a type (line 1740)
        bounds_143080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1740, 25), _artist_143079, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 1740)
        getitem___143081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1740, 12), bounds_143080, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1740)
        subscript_call_result_143082 = invoke(stypy.reporting.localization.Localization(__file__, 1740, 12), getitem___143081, int_143077)
        
        # Assigning a type to the variable 'tuple_var_assignment_139144' (line 1740)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1740, 12), 'tuple_var_assignment_139144', subscript_call_result_143082)
        
        # Assigning a Subscript to a Name (line 1740):
        
        # Assigning a Subscript to a Name (line 1740):
        
        # Obtaining the type of the subscript
        int_143083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1740, 12), 'int')
        # Getting the type of 'self' (line 1740)
        self_143084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 25), 'self')
        # Obtaining the member '_artist' of a type (line 1740)
        _artist_143085 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1740, 25), self_143084, '_artist')
        # Obtaining the member 'bounds' of a type (line 1740)
        bounds_143086 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1740, 25), _artist_143085, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 1740)
        getitem___143087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1740, 12), bounds_143086, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1740)
        subscript_call_result_143088 = invoke(stypy.reporting.localization.Localization(__file__, 1740, 12), getitem___143087, int_143083)
        
        # Assigning a type to the variable 'tuple_var_assignment_139145' (line 1740)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1740, 12), 'tuple_var_assignment_139145', subscript_call_result_143088)
        
        # Assigning a Subscript to a Name (line 1740):
        
        # Assigning a Subscript to a Name (line 1740):
        
        # Obtaining the type of the subscript
        int_143089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1740, 12), 'int')
        # Getting the type of 'self' (line 1740)
        self_143090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 25), 'self')
        # Obtaining the member '_artist' of a type (line 1740)
        _artist_143091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1740, 25), self_143090, '_artist')
        # Obtaining the member 'bounds' of a type (line 1740)
        bounds_143092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1740, 25), _artist_143091, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 1740)
        getitem___143093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1740, 12), bounds_143092, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1740)
        subscript_call_result_143094 = invoke(stypy.reporting.localization.Localization(__file__, 1740, 12), getitem___143093, int_143089)
        
        # Assigning a type to the variable 'tuple_var_assignment_139146' (line 1740)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1740, 12), 'tuple_var_assignment_139146', subscript_call_result_143094)
        
        # Assigning a Name to a Name (line 1740):
        
        # Assigning a Name to a Name (line 1740):
        # Getting the type of 'tuple_var_assignment_139143' (line 1740)
        tuple_var_assignment_139143_143095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 12), 'tuple_var_assignment_139143')
        # Assigning a type to the variable 'l' (line 1740)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1740, 12), 'l', tuple_var_assignment_139143_143095)
        
        # Assigning a Name to a Name (line 1740):
        
        # Assigning a Name to a Name (line 1740):
        # Getting the type of 'tuple_var_assignment_139144' (line 1740)
        tuple_var_assignment_139144_143096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 12), 'tuple_var_assignment_139144')
        # Assigning a type to the variable 'b' (line 1740)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1740, 15), 'b', tuple_var_assignment_139144_143096)
        
        # Assigning a Name to a Name (line 1740):
        
        # Assigning a Name to a Name (line 1740):
        # Getting the type of 'tuple_var_assignment_139145' (line 1740)
        tuple_var_assignment_139145_143097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 12), 'tuple_var_assignment_139145')
        # Assigning a type to the variable 'w' (line 1740)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1740, 18), 'w', tuple_var_assignment_139145_143097)
        
        # Assigning a Name to a Name (line 1740):
        
        # Assigning a Name to a Name (line 1740):
        # Getting the type of 'tuple_var_assignment_139146' (line 1740)
        tuple_var_assignment_139146_143098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 12), 'tuple_var_assignment_139146')
        # Assigning a type to the variable 'h' (line 1740)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1740, 21), 'h', tuple_var_assignment_139146_143098)
        
        # Assigning a Attribute to a Tuple (line 1741):
        
        # Assigning a Subscript to a Name (line 1741):
        
        # Assigning a Subscript to a Name (line 1741):
        
        # Obtaining the type of the subscript
        int_143099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1741, 12), 'int')
        # Getting the type of 'self' (line 1741)
        self_143100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1741, 21), 'self')
        # Obtaining the member '_ref_coord' of a type (line 1741)
        _ref_coord_143101 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1741, 21), self_143100, '_ref_coord')
        # Obtaining the member '__getitem__' of a type (line 1741)
        getitem___143102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1741, 12), _ref_coord_143101, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1741)
        subscript_call_result_143103 = invoke(stypy.reporting.localization.Localization(__file__, 1741, 12), getitem___143102, int_143099)
        
        # Assigning a type to the variable 'tuple_var_assignment_139147' (line 1741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1741, 12), 'tuple_var_assignment_139147', subscript_call_result_143103)
        
        # Assigning a Subscript to a Name (line 1741):
        
        # Assigning a Subscript to a Name (line 1741):
        
        # Obtaining the type of the subscript
        int_143104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1741, 12), 'int')
        # Getting the type of 'self' (line 1741)
        self_143105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1741, 21), 'self')
        # Obtaining the member '_ref_coord' of a type (line 1741)
        _ref_coord_143106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1741, 21), self_143105, '_ref_coord')
        # Obtaining the member '__getitem__' of a type (line 1741)
        getitem___143107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1741, 12), _ref_coord_143106, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1741)
        subscript_call_result_143108 = invoke(stypy.reporting.localization.Localization(__file__, 1741, 12), getitem___143107, int_143104)
        
        # Assigning a type to the variable 'tuple_var_assignment_139148' (line 1741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1741, 12), 'tuple_var_assignment_139148', subscript_call_result_143108)
        
        # Assigning a Name to a Name (line 1741):
        
        # Assigning a Name to a Name (line 1741):
        # Getting the type of 'tuple_var_assignment_139147' (line 1741)
        tuple_var_assignment_139147_143109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1741, 12), 'tuple_var_assignment_139147')
        # Assigning a type to the variable 'xf' (line 1741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1741, 12), 'xf', tuple_var_assignment_139147_143109)
        
        # Assigning a Name to a Name (line 1741):
        
        # Assigning a Name to a Name (line 1741):
        # Getting the type of 'tuple_var_assignment_139148' (line 1741)
        tuple_var_assignment_139148_143110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1741, 12), 'tuple_var_assignment_139148')
        # Assigning a type to the variable 'yf' (line 1741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1741, 16), 'yf', tuple_var_assignment_139148_143110)
        
        # Assigning a Tuple to a Tuple (line 1742):
        
        # Assigning a BinOp to a Name (line 1742):
        
        # Assigning a BinOp to a Name (line 1742):
        # Getting the type of 'l' (line 1742)
        l_143111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1742, 19), 'l')
        # Getting the type of 'w' (line 1742)
        w_143112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1742, 23), 'w')
        # Getting the type of 'xf' (line 1742)
        xf_143113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1742, 27), 'xf')
        # Applying the binary operator '*' (line 1742)
        result_mul_143114 = python_operator(stypy.reporting.localization.Localization(__file__, 1742, 23), '*', w_143112, xf_143113)
        
        # Applying the binary operator '+' (line 1742)
        result_add_143115 = python_operator(stypy.reporting.localization.Localization(__file__, 1742, 19), '+', l_143111, result_mul_143114)
        
        # Assigning a type to the variable 'tuple_assignment_139149' (line 1742)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1742, 12), 'tuple_assignment_139149', result_add_143115)
        
        # Assigning a BinOp to a Name (line 1742):
        
        # Assigning a BinOp to a Name (line 1742):
        # Getting the type of 'b' (line 1742)
        b_143116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1742, 31), 'b')
        # Getting the type of 'h' (line 1742)
        h_143117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1742, 35), 'h')
        # Getting the type of 'yf' (line 1742)
        yf_143118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1742, 39), 'yf')
        # Applying the binary operator '*' (line 1742)
        result_mul_143119 = python_operator(stypy.reporting.localization.Localization(__file__, 1742, 35), '*', h_143117, yf_143118)
        
        # Applying the binary operator '+' (line 1742)
        result_add_143120 = python_operator(stypy.reporting.localization.Localization(__file__, 1742, 31), '+', b_143116, result_mul_143119)
        
        # Assigning a type to the variable 'tuple_assignment_139150' (line 1742)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1742, 12), 'tuple_assignment_139150', result_add_143120)
        
        # Assigning a Name to a Name (line 1742):
        
        # Assigning a Name to a Name (line 1742):
        # Getting the type of 'tuple_assignment_139149' (line 1742)
        tuple_assignment_139149_143121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1742, 12), 'tuple_assignment_139149')
        # Assigning a type to the variable 'x' (line 1742)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1742, 12), 'x', tuple_assignment_139149_143121)
        
        # Assigning a Name to a Name (line 1742):
        
        # Assigning a Name to a Name (line 1742):
        # Getting the type of 'tuple_assignment_139150' (line 1742)
        tuple_assignment_139150_143122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1742, 12), 'tuple_assignment_139150')
        # Assigning a type to the variable 'y' (line 1742)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1742, 15), 'y', tuple_assignment_139150_143122)
        # SSA branch for the else part of an if statement (line 1739)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to isinstance(...): (line 1743)
        # Processing the call arguments (line 1743)
        # Getting the type of 'self' (line 1743)
        self_143124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 24), 'self', False)
        # Obtaining the member '_artist' of a type (line 1743)
        _artist_143125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1743, 24), self_143124, '_artist')
        # Getting the type of 'Transform' (line 1743)
        Transform_143126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 38), 'Transform', False)
        # Processing the call keyword arguments (line 1743)
        kwargs_143127 = {}
        # Getting the type of 'isinstance' (line 1743)
        isinstance_143123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 13), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1743)
        isinstance_call_result_143128 = invoke(stypy.reporting.localization.Localization(__file__, 1743, 13), isinstance_143123, *[_artist_143125, Transform_143126], **kwargs_143127)
        
        # Testing the type of an if condition (line 1743)
        if_condition_143129 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1743, 13), isinstance_call_result_143128)
        # Assigning a type to the variable 'if_condition_143129' (line 1743)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1743, 13), 'if_condition_143129', if_condition_143129)
        # SSA begins for if statement (line 1743)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 1744):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to transform_point(...): (line 1744)
        # Processing the call arguments (line 1744)
        # Getting the type of 'self' (line 1744)
        self_143133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 48), 'self', False)
        # Obtaining the member '_ref_coord' of a type (line 1744)
        _ref_coord_143134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1744, 48), self_143133, '_ref_coord')
        # Processing the call keyword arguments (line 1744)
        kwargs_143135 = {}
        # Getting the type of 'self' (line 1744)
        self_143130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 19), 'self', False)
        # Obtaining the member '_artist' of a type (line 1744)
        _artist_143131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1744, 19), self_143130, '_artist')
        # Obtaining the member 'transform_point' of a type (line 1744)
        transform_point_143132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1744, 19), _artist_143131, 'transform_point')
        # Calling transform_point(args, kwargs) (line 1744)
        transform_point_call_result_143136 = invoke(stypy.reporting.localization.Localization(__file__, 1744, 19), transform_point_143132, *[_ref_coord_143134], **kwargs_143135)
        
        # Assigning a type to the variable 'call_assignment_139151' (line 1744)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1744, 12), 'call_assignment_139151', transform_point_call_result_143136)
        
        # Assigning a Call to a Name (line 1744):
        
        # Assigning a Call to a Name (line 1744):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_143139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1744, 12), 'int')
        # Processing the call keyword arguments
        kwargs_143140 = {}
        # Getting the type of 'call_assignment_139151' (line 1744)
        call_assignment_139151_143137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 12), 'call_assignment_139151', False)
        # Obtaining the member '__getitem__' of a type (line 1744)
        getitem___143138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1744, 12), call_assignment_139151_143137, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_143141 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___143138, *[int_143139], **kwargs_143140)
        
        # Assigning a type to the variable 'call_assignment_139152' (line 1744)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1744, 12), 'call_assignment_139152', getitem___call_result_143141)
        
        # Assigning a Name to a Name (line 1744):
        
        # Assigning a Name to a Name (line 1744):
        # Getting the type of 'call_assignment_139152' (line 1744)
        call_assignment_139152_143142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 12), 'call_assignment_139152')
        # Assigning a type to the variable 'x' (line 1744)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1744, 12), 'x', call_assignment_139152_143142)
        
        # Assigning a Call to a Name (line 1744):
        
        # Assigning a Call to a Name (line 1744):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_143145 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1744, 12), 'int')
        # Processing the call keyword arguments
        kwargs_143146 = {}
        # Getting the type of 'call_assignment_139151' (line 1744)
        call_assignment_139151_143143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 12), 'call_assignment_139151', False)
        # Obtaining the member '__getitem__' of a type (line 1744)
        getitem___143144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1744, 12), call_assignment_139151_143143, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_143147 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___143144, *[int_143145], **kwargs_143146)
        
        # Assigning a type to the variable 'call_assignment_139153' (line 1744)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1744, 12), 'call_assignment_139153', getitem___call_result_143147)
        
        # Assigning a Name to a Name (line 1744):
        
        # Assigning a Name to a Name (line 1744):
        # Getting the type of 'call_assignment_139153' (line 1744)
        call_assignment_139153_143148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 12), 'call_assignment_139153')
        # Assigning a type to the variable 'y' (line 1744)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1744, 15), 'y', call_assignment_139153_143148)
        # SSA branch for the else part of an if statement (line 1743)
        module_type_store.open_ssa_branch('else')
        
        # Call to RuntimeError(...): (line 1746)
        # Processing the call arguments (line 1746)
        unicode_143150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1746, 31), 'unicode', u'unknown type')
        # Processing the call keyword arguments (line 1746)
        kwargs_143151 = {}
        # Getting the type of 'RuntimeError' (line 1746)
        RuntimeError_143149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1746, 18), 'RuntimeError', False)
        # Calling RuntimeError(args, kwargs) (line 1746)
        RuntimeError_call_result_143152 = invoke(stypy.reporting.localization.Localization(__file__, 1746, 18), RuntimeError_143149, *[unicode_143150], **kwargs_143151)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1746, 12), RuntimeError_call_result_143152, 'raise parameter', BaseException)
        # SSA join for if statement (line 1743)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1739)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1734)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1748):
        
        # Assigning a Call to a Name (line 1748):
        
        # Assigning a Call to a Name (line 1748):
        
        # Call to _get_scale(...): (line 1748)
        # Processing the call arguments (line 1748)
        # Getting the type of 'renderer' (line 1748)
        renderer_143155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 29), 'renderer', False)
        # Processing the call keyword arguments (line 1748)
        kwargs_143156 = {}
        # Getting the type of 'self' (line 1748)
        self_143153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 13), 'self', False)
        # Obtaining the member '_get_scale' of a type (line 1748)
        _get_scale_143154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1748, 13), self_143153, '_get_scale')
        # Calling _get_scale(args, kwargs) (line 1748)
        _get_scale_call_result_143157 = invoke(stypy.reporting.localization.Localization(__file__, 1748, 13), _get_scale_143154, *[renderer_143155], **kwargs_143156)
        
        # Assigning a type to the variable 'sc' (line 1748)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1748, 8), 'sc', _get_scale_call_result_143157)
        
        # Assigning a Call to a Name (line 1749):
        
        # Assigning a Call to a Name (line 1749):
        
        # Assigning a Call to a Name (line 1749):
        
        # Call to translate(...): (line 1749)
        # Processing the call arguments (line 1749)
        # Getting the type of 'x' (line 1749)
        x_143167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 48), 'x', False)
        # Getting the type of 'y' (line 1749)
        y_143168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 51), 'y', False)
        # Processing the call keyword arguments (line 1749)
        kwargs_143169 = {}
        
        # Call to scale(...): (line 1749)
        # Processing the call arguments (line 1749)
        # Getting the type of 'sc' (line 1749)
        sc_143162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 30), 'sc', False)
        # Getting the type of 'sc' (line 1749)
        sc_143163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 34), 'sc', False)
        # Processing the call keyword arguments (line 1749)
        kwargs_143164 = {}
        
        # Call to Affine2D(...): (line 1749)
        # Processing the call keyword arguments (line 1749)
        kwargs_143159 = {}
        # Getting the type of 'Affine2D' (line 1749)
        Affine2D_143158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 13), 'Affine2D', False)
        # Calling Affine2D(args, kwargs) (line 1749)
        Affine2D_call_result_143160 = invoke(stypy.reporting.localization.Localization(__file__, 1749, 13), Affine2D_143158, *[], **kwargs_143159)
        
        # Obtaining the member 'scale' of a type (line 1749)
        scale_143161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1749, 13), Affine2D_call_result_143160, 'scale')
        # Calling scale(args, kwargs) (line 1749)
        scale_call_result_143165 = invoke(stypy.reporting.localization.Localization(__file__, 1749, 13), scale_143161, *[sc_143162, sc_143163], **kwargs_143164)
        
        # Obtaining the member 'translate' of a type (line 1749)
        translate_143166 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1749, 13), scale_call_result_143165, 'translate')
        # Calling translate(args, kwargs) (line 1749)
        translate_call_result_143170 = invoke(stypy.reporting.localization.Localization(__file__, 1749, 13), translate_143166, *[x_143167, y_143168], **kwargs_143169)
        
        # Assigning a type to the variable 'tr' (line 1749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1749, 8), 'tr', translate_call_result_143170)
        # Getting the type of 'tr' (line 1751)
        tr_143171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1751, 15), 'tr')
        # Assigning a type to the variable 'stypy_return_type' (line 1751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1751, 8), 'stypy_return_type', tr_143171)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 1719)
        stypy_return_type_143172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_143172)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_143172


# Assigning a type to the variable 'OffsetFrom' (line 1670)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1670, 0), 'OffsetFrom', OffsetFrom)
# Declaration of the '_AnnotationBase' class

class _AnnotationBase(object, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_143173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1757, 26), 'unicode', u'data')
        # Getting the type of 'None' (line 1758)
        None_143174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1758, 33), 'None')
        defaults = [unicode_143173, None_143174]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1755, 4, False)
        # Assigning a type to the variable 'self' (line 1756)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1756, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AnnotationBase.__init__', ['xy', 'xycoords', 'annotation_clip'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['xy', 'xycoords', 'annotation_clip'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1760):
        
        # Assigning a Name to a Attribute (line 1760):
        
        # Assigning a Name to a Attribute (line 1760):
        # Getting the type of 'xy' (line 1760)
        xy_143175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1760, 18), 'xy')
        # Getting the type of 'self' (line 1760)
        self_143176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1760, 8), 'self')
        # Setting the type of the member 'xy' of a type (line 1760)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1760, 8), self_143176, 'xy', xy_143175)
        
        # Assigning a Name to a Attribute (line 1761):
        
        # Assigning a Name to a Attribute (line 1761):
        
        # Assigning a Name to a Attribute (line 1761):
        # Getting the type of 'xycoords' (line 1761)
        xycoords_143177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 24), 'xycoords')
        # Getting the type of 'self' (line 1761)
        self_143178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 8), 'self')
        # Setting the type of the member 'xycoords' of a type (line 1761)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1761, 8), self_143178, 'xycoords', xycoords_143177)
        
        # Call to set_annotation_clip(...): (line 1762)
        # Processing the call arguments (line 1762)
        # Getting the type of 'annotation_clip' (line 1762)
        annotation_clip_143181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 33), 'annotation_clip', False)
        # Processing the call keyword arguments (line 1762)
        kwargs_143182 = {}
        # Getting the type of 'self' (line 1762)
        self_143179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 8), 'self', False)
        # Obtaining the member 'set_annotation_clip' of a type (line 1762)
        set_annotation_clip_143180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1762, 8), self_143179, 'set_annotation_clip')
        # Calling set_annotation_clip(args, kwargs) (line 1762)
        set_annotation_clip_call_result_143183 = invoke(stypy.reporting.localization.Localization(__file__, 1762, 8), set_annotation_clip_143180, *[annotation_clip_143181], **kwargs_143182)
        
        
        # Assigning a Name to a Attribute (line 1764):
        
        # Assigning a Name to a Attribute (line 1764):
        
        # Assigning a Name to a Attribute (line 1764):
        # Getting the type of 'None' (line 1764)
        None_143184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 26), 'None')
        # Getting the type of 'self' (line 1764)
        self_143185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 8), 'self')
        # Setting the type of the member '_draggable' of a type (line 1764)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1764, 8), self_143185, '_draggable', None_143184)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _get_xy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_xy'
        module_type_store = module_type_store.open_function_context('_get_xy', 1766, 4, False)
        # Assigning a type to the variable 'self' (line 1767)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1767, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AnnotationBase._get_xy.__dict__.__setitem__('stypy_localization', localization)
        _AnnotationBase._get_xy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AnnotationBase._get_xy.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AnnotationBase._get_xy.__dict__.__setitem__('stypy_function_name', '_AnnotationBase._get_xy')
        _AnnotationBase._get_xy.__dict__.__setitem__('stypy_param_names_list', ['renderer', 'x', 'y', 's'])
        _AnnotationBase._get_xy.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AnnotationBase._get_xy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AnnotationBase._get_xy.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AnnotationBase._get_xy.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AnnotationBase._get_xy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AnnotationBase._get_xy.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AnnotationBase._get_xy', ['renderer', 'x', 'y', 's'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_xy', localization, ['renderer', 'x', 'y', 's'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_xy(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 1767)
        # Getting the type of 'tuple' (line 1767)
        tuple_143186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 25), 'tuple')
        # Getting the type of 's' (line 1767)
        s_143187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 22), 's')
        
        (may_be_143188, more_types_in_union_143189) = may_be_subtype(tuple_143186, s_143187)

        if may_be_143188:

            if more_types_in_union_143189:
                # Runtime conditional SSA (line 1767)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 's' (line 1767)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1767, 8), 's', remove_not_subtype_from_union(s_143187, tuple))
            
            # Assigning a Name to a Tuple (line 1768):
            
            # Assigning a Subscript to a Name (line 1768):
            
            # Assigning a Subscript to a Name (line 1768):
            
            # Obtaining the type of the subscript
            int_143190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1768, 12), 'int')
            # Getting the type of 's' (line 1768)
            s_143191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1768, 21), 's')
            # Obtaining the member '__getitem__' of a type (line 1768)
            getitem___143192 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1768, 12), s_143191, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1768)
            subscript_call_result_143193 = invoke(stypy.reporting.localization.Localization(__file__, 1768, 12), getitem___143192, int_143190)
            
            # Assigning a type to the variable 'tuple_var_assignment_139154' (line 1768)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1768, 12), 'tuple_var_assignment_139154', subscript_call_result_143193)
            
            # Assigning a Subscript to a Name (line 1768):
            
            # Assigning a Subscript to a Name (line 1768):
            
            # Obtaining the type of the subscript
            int_143194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1768, 12), 'int')
            # Getting the type of 's' (line 1768)
            s_143195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1768, 21), 's')
            # Obtaining the member '__getitem__' of a type (line 1768)
            getitem___143196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1768, 12), s_143195, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1768)
            subscript_call_result_143197 = invoke(stypy.reporting.localization.Localization(__file__, 1768, 12), getitem___143196, int_143194)
            
            # Assigning a type to the variable 'tuple_var_assignment_139155' (line 1768)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1768, 12), 'tuple_var_assignment_139155', subscript_call_result_143197)
            
            # Assigning a Name to a Name (line 1768):
            
            # Assigning a Name to a Name (line 1768):
            # Getting the type of 'tuple_var_assignment_139154' (line 1768)
            tuple_var_assignment_139154_143198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1768, 12), 'tuple_var_assignment_139154')
            # Assigning a type to the variable 's1' (line 1768)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1768, 12), 's1', tuple_var_assignment_139154_143198)
            
            # Assigning a Name to a Name (line 1768):
            
            # Assigning a Name to a Name (line 1768):
            # Getting the type of 'tuple_var_assignment_139155' (line 1768)
            tuple_var_assignment_139155_143199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1768, 12), 'tuple_var_assignment_139155')
            # Assigning a type to the variable 's2' (line 1768)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1768, 16), 's2', tuple_var_assignment_139155_143199)

            if more_types_in_union_143189:
                # Runtime conditional SSA for else branch (line 1767)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_143188) or more_types_in_union_143189):
            # Assigning a type to the variable 's' (line 1767)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1767, 8), 's', remove_subtype_from_union(s_143187, tuple))
            
            # Assigning a Tuple to a Tuple (line 1770):
            
            # Assigning a Name to a Name (line 1770):
            
            # Assigning a Name to a Name (line 1770):
            # Getting the type of 's' (line 1770)
            s_143200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1770, 21), 's')
            # Assigning a type to the variable 'tuple_assignment_139156' (line 1770)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1770, 12), 'tuple_assignment_139156', s_143200)
            
            # Assigning a Name to a Name (line 1770):
            
            # Assigning a Name to a Name (line 1770):
            # Getting the type of 's' (line 1770)
            s_143201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1770, 24), 's')
            # Assigning a type to the variable 'tuple_assignment_139157' (line 1770)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1770, 12), 'tuple_assignment_139157', s_143201)
            
            # Assigning a Name to a Name (line 1770):
            
            # Assigning a Name to a Name (line 1770):
            # Getting the type of 'tuple_assignment_139156' (line 1770)
            tuple_assignment_139156_143202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1770, 12), 'tuple_assignment_139156')
            # Assigning a type to the variable 's1' (line 1770)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1770, 12), 's1', tuple_assignment_139156_143202)
            
            # Assigning a Name to a Name (line 1770):
            
            # Assigning a Name to a Name (line 1770):
            # Getting the type of 'tuple_assignment_139157' (line 1770)
            tuple_assignment_139157_143203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1770, 12), 'tuple_assignment_139157')
            # Assigning a type to the variable 's2' (line 1770)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1770, 16), 's2', tuple_assignment_139157_143203)

            if (may_be_143188 and more_types_in_union_143189):
                # SSA join for if statement (line 1767)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 's1' (line 1772)
        s1_143204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1772, 11), 's1')
        unicode_143205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1772, 17), 'unicode', u'data')
        # Applying the binary operator '==' (line 1772)
        result_eq_143206 = python_operator(stypy.reporting.localization.Localization(__file__, 1772, 11), '==', s1_143204, unicode_143205)
        
        # Testing the type of an if condition (line 1772)
        if_condition_143207 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1772, 8), result_eq_143206)
        # Assigning a type to the variable 'if_condition_143207' (line 1772)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1772, 8), 'if_condition_143207', if_condition_143207)
        # SSA begins for if statement (line 1772)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1773):
        
        # Assigning a Call to a Name (line 1773):
        
        # Assigning a Call to a Name (line 1773):
        
        # Call to float(...): (line 1773)
        # Processing the call arguments (line 1773)
        
        # Call to convert_xunits(...): (line 1773)
        # Processing the call arguments (line 1773)
        # Getting the type of 'x' (line 1773)
        x_143211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 42), 'x', False)
        # Processing the call keyword arguments (line 1773)
        kwargs_143212 = {}
        # Getting the type of 'self' (line 1773)
        self_143209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 22), 'self', False)
        # Obtaining the member 'convert_xunits' of a type (line 1773)
        convert_xunits_143210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1773, 22), self_143209, 'convert_xunits')
        # Calling convert_xunits(args, kwargs) (line 1773)
        convert_xunits_call_result_143213 = invoke(stypy.reporting.localization.Localization(__file__, 1773, 22), convert_xunits_143210, *[x_143211], **kwargs_143212)
        
        # Processing the call keyword arguments (line 1773)
        kwargs_143214 = {}
        # Getting the type of 'float' (line 1773)
        float_143208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 16), 'float', False)
        # Calling float(args, kwargs) (line 1773)
        float_call_result_143215 = invoke(stypy.reporting.localization.Localization(__file__, 1773, 16), float_143208, *[convert_xunits_call_result_143213], **kwargs_143214)
        
        # Assigning a type to the variable 'x' (line 1773)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1773, 12), 'x', float_call_result_143215)
        # SSA join for if statement (line 1772)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 's2' (line 1774)
        s2_143216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 11), 's2')
        unicode_143217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1774, 17), 'unicode', u'data')
        # Applying the binary operator '==' (line 1774)
        result_eq_143218 = python_operator(stypy.reporting.localization.Localization(__file__, 1774, 11), '==', s2_143216, unicode_143217)
        
        # Testing the type of an if condition (line 1774)
        if_condition_143219 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1774, 8), result_eq_143218)
        # Assigning a type to the variable 'if_condition_143219' (line 1774)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1774, 8), 'if_condition_143219', if_condition_143219)
        # SSA begins for if statement (line 1774)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1775):
        
        # Assigning a Call to a Name (line 1775):
        
        # Assigning a Call to a Name (line 1775):
        
        # Call to float(...): (line 1775)
        # Processing the call arguments (line 1775)
        
        # Call to convert_yunits(...): (line 1775)
        # Processing the call arguments (line 1775)
        # Getting the type of 'y' (line 1775)
        y_143223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1775, 42), 'y', False)
        # Processing the call keyword arguments (line 1775)
        kwargs_143224 = {}
        # Getting the type of 'self' (line 1775)
        self_143221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1775, 22), 'self', False)
        # Obtaining the member 'convert_yunits' of a type (line 1775)
        convert_yunits_143222 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1775, 22), self_143221, 'convert_yunits')
        # Calling convert_yunits(args, kwargs) (line 1775)
        convert_yunits_call_result_143225 = invoke(stypy.reporting.localization.Localization(__file__, 1775, 22), convert_yunits_143222, *[y_143223], **kwargs_143224)
        
        # Processing the call keyword arguments (line 1775)
        kwargs_143226 = {}
        # Getting the type of 'float' (line 1775)
        float_143220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1775, 16), 'float', False)
        # Calling float(args, kwargs) (line 1775)
        float_call_result_143227 = invoke(stypy.reporting.localization.Localization(__file__, 1775, 16), float_143220, *[convert_yunits_call_result_143225], **kwargs_143226)
        
        # Assigning a type to the variable 'y' (line 1775)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1775, 12), 'y', float_call_result_143227)
        # SSA join for if statement (line 1774)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1777):
        
        # Assigning a Call to a Name (line 1777):
        
        # Assigning a Call to a Name (line 1777):
        
        # Call to _get_xy_transform(...): (line 1777)
        # Processing the call arguments (line 1777)
        # Getting the type of 'renderer' (line 1777)
        renderer_143230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 36), 'renderer', False)
        # Getting the type of 's' (line 1777)
        s_143231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 46), 's', False)
        # Processing the call keyword arguments (line 1777)
        kwargs_143232 = {}
        # Getting the type of 'self' (line 1777)
        self_143228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 13), 'self', False)
        # Obtaining the member '_get_xy_transform' of a type (line 1777)
        _get_xy_transform_143229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1777, 13), self_143228, '_get_xy_transform')
        # Calling _get_xy_transform(args, kwargs) (line 1777)
        _get_xy_transform_call_result_143233 = invoke(stypy.reporting.localization.Localization(__file__, 1777, 13), _get_xy_transform_143229, *[renderer_143230, s_143231], **kwargs_143232)
        
        # Assigning a type to the variable 'tr' (line 1777)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1777, 8), 'tr', _get_xy_transform_call_result_143233)
        
        # Assigning a Call to a Tuple (line 1778):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to transform_point(...): (line 1778)
        # Processing the call arguments (line 1778)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1778)
        tuple_143236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1778, 37), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1778)
        # Adding element type (line 1778)
        # Getting the type of 'x' (line 1778)
        x_143237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 37), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1778, 37), tuple_143236, x_143237)
        # Adding element type (line 1778)
        # Getting the type of 'y' (line 1778)
        y_143238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 40), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1778, 37), tuple_143236, y_143238)
        
        # Processing the call keyword arguments (line 1778)
        kwargs_143239 = {}
        # Getting the type of 'tr' (line 1778)
        tr_143234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 17), 'tr', False)
        # Obtaining the member 'transform_point' of a type (line 1778)
        transform_point_143235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1778, 17), tr_143234, 'transform_point')
        # Calling transform_point(args, kwargs) (line 1778)
        transform_point_call_result_143240 = invoke(stypy.reporting.localization.Localization(__file__, 1778, 17), transform_point_143235, *[tuple_143236], **kwargs_143239)
        
        # Assigning a type to the variable 'call_assignment_139158' (line 1778)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1778, 8), 'call_assignment_139158', transform_point_call_result_143240)
        
        # Assigning a Call to a Name (line 1778):
        
        # Assigning a Call to a Name (line 1778):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_143243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1778, 8), 'int')
        # Processing the call keyword arguments
        kwargs_143244 = {}
        # Getting the type of 'call_assignment_139158' (line 1778)
        call_assignment_139158_143241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 8), 'call_assignment_139158', False)
        # Obtaining the member '__getitem__' of a type (line 1778)
        getitem___143242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1778, 8), call_assignment_139158_143241, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_143245 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___143242, *[int_143243], **kwargs_143244)
        
        # Assigning a type to the variable 'call_assignment_139159' (line 1778)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1778, 8), 'call_assignment_139159', getitem___call_result_143245)
        
        # Assigning a Name to a Name (line 1778):
        
        # Assigning a Name to a Name (line 1778):
        # Getting the type of 'call_assignment_139159' (line 1778)
        call_assignment_139159_143246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 8), 'call_assignment_139159')
        # Assigning a type to the variable 'x1' (line 1778)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1778, 8), 'x1', call_assignment_139159_143246)
        
        # Assigning a Call to a Name (line 1778):
        
        # Assigning a Call to a Name (line 1778):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_143249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1778, 8), 'int')
        # Processing the call keyword arguments
        kwargs_143250 = {}
        # Getting the type of 'call_assignment_139158' (line 1778)
        call_assignment_139158_143247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 8), 'call_assignment_139158', False)
        # Obtaining the member '__getitem__' of a type (line 1778)
        getitem___143248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1778, 8), call_assignment_139158_143247, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_143251 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___143248, *[int_143249], **kwargs_143250)
        
        # Assigning a type to the variable 'call_assignment_139160' (line 1778)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1778, 8), 'call_assignment_139160', getitem___call_result_143251)
        
        # Assigning a Name to a Name (line 1778):
        
        # Assigning a Name to a Name (line 1778):
        # Getting the type of 'call_assignment_139160' (line 1778)
        call_assignment_139160_143252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 8), 'call_assignment_139160')
        # Assigning a type to the variable 'y1' (line 1778)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1778, 12), 'y1', call_assignment_139160_143252)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1779)
        tuple_143253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1779, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1779)
        # Adding element type (line 1779)
        # Getting the type of 'x1' (line 1779)
        x1_143254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1779, 15), 'x1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1779, 15), tuple_143253, x1_143254)
        # Adding element type (line 1779)
        # Getting the type of 'y1' (line 1779)
        y1_143255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1779, 19), 'y1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1779, 15), tuple_143253, y1_143255)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1779)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1779, 8), 'stypy_return_type', tuple_143253)
        
        # ################# End of '_get_xy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_xy' in the type store
        # Getting the type of 'stypy_return_type' (line 1766)
        stypy_return_type_143256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1766, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_143256)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_xy'
        return stypy_return_type_143256


    @norecursion
    def _get_xy_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_xy_transform'
        module_type_store = module_type_store.open_function_context('_get_xy_transform', 1781, 4, False)
        # Assigning a type to the variable 'self' (line 1782)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1782, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AnnotationBase._get_xy_transform.__dict__.__setitem__('stypy_localization', localization)
        _AnnotationBase._get_xy_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AnnotationBase._get_xy_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AnnotationBase._get_xy_transform.__dict__.__setitem__('stypy_function_name', '_AnnotationBase._get_xy_transform')
        _AnnotationBase._get_xy_transform.__dict__.__setitem__('stypy_param_names_list', ['renderer', 's'])
        _AnnotationBase._get_xy_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AnnotationBase._get_xy_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AnnotationBase._get_xy_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AnnotationBase._get_xy_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AnnotationBase._get_xy_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AnnotationBase._get_xy_transform.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AnnotationBase._get_xy_transform', ['renderer', 's'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_xy_transform', localization, ['renderer', 's'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_xy_transform(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 1783)
        # Getting the type of 'tuple' (line 1783)
        tuple_143257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1783, 25), 'tuple')
        # Getting the type of 's' (line 1783)
        s_143258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1783, 22), 's')
        
        (may_be_143259, more_types_in_union_143260) = may_be_subtype(tuple_143257, s_143258)

        if may_be_143259:

            if more_types_in_union_143260:
                # Runtime conditional SSA (line 1783)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 's' (line 1783)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1783, 8), 's', remove_not_subtype_from_union(s_143258, tuple))
            
            # Assigning a Name to a Tuple (line 1784):
            
            # Assigning a Subscript to a Name (line 1784):
            
            # Assigning a Subscript to a Name (line 1784):
            
            # Obtaining the type of the subscript
            int_143261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1784, 12), 'int')
            # Getting the type of 's' (line 1784)
            s_143262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 21), 's')
            # Obtaining the member '__getitem__' of a type (line 1784)
            getitem___143263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1784, 12), s_143262, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1784)
            subscript_call_result_143264 = invoke(stypy.reporting.localization.Localization(__file__, 1784, 12), getitem___143263, int_143261)
            
            # Assigning a type to the variable 'tuple_var_assignment_139161' (line 1784)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1784, 12), 'tuple_var_assignment_139161', subscript_call_result_143264)
            
            # Assigning a Subscript to a Name (line 1784):
            
            # Assigning a Subscript to a Name (line 1784):
            
            # Obtaining the type of the subscript
            int_143265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1784, 12), 'int')
            # Getting the type of 's' (line 1784)
            s_143266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 21), 's')
            # Obtaining the member '__getitem__' of a type (line 1784)
            getitem___143267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1784, 12), s_143266, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1784)
            subscript_call_result_143268 = invoke(stypy.reporting.localization.Localization(__file__, 1784, 12), getitem___143267, int_143265)
            
            # Assigning a type to the variable 'tuple_var_assignment_139162' (line 1784)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1784, 12), 'tuple_var_assignment_139162', subscript_call_result_143268)
            
            # Assigning a Name to a Name (line 1784):
            
            # Assigning a Name to a Name (line 1784):
            # Getting the type of 'tuple_var_assignment_139161' (line 1784)
            tuple_var_assignment_139161_143269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 12), 'tuple_var_assignment_139161')
            # Assigning a type to the variable 's1' (line 1784)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1784, 12), 's1', tuple_var_assignment_139161_143269)
            
            # Assigning a Name to a Name (line 1784):
            
            # Assigning a Name to a Name (line 1784):
            # Getting the type of 'tuple_var_assignment_139162' (line 1784)
            tuple_var_assignment_139162_143270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 12), 'tuple_var_assignment_139162')
            # Assigning a type to the variable 's2' (line 1784)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1784, 16), 's2', tuple_var_assignment_139162_143270)
            stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1785, 12))
            
            # 'from matplotlib.transforms import blended_transform_factory' statement (line 1785)
            update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
            import_143271 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1785, 12), 'matplotlib.transforms')

            if (type(import_143271) is not StypyTypeError):

                if (import_143271 != 'pyd_module'):
                    __import__(import_143271)
                    sys_modules_143272 = sys.modules[import_143271]
                    import_from_module(stypy.reporting.localization.Localization(__file__, 1785, 12), 'matplotlib.transforms', sys_modules_143272.module_type_store, module_type_store, ['blended_transform_factory'])
                    nest_module(stypy.reporting.localization.Localization(__file__, 1785, 12), __file__, sys_modules_143272, sys_modules_143272.module_type_store, module_type_store)
                else:
                    from matplotlib.transforms import blended_transform_factory

                    import_from_module(stypy.reporting.localization.Localization(__file__, 1785, 12), 'matplotlib.transforms', None, module_type_store, ['blended_transform_factory'], [blended_transform_factory])

            else:
                # Assigning a type to the variable 'matplotlib.transforms' (line 1785)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1785, 12), 'matplotlib.transforms', import_143271)

            remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
            
            
            # Assigning a Call to a Name (line 1786):
            
            # Assigning a Call to a Name (line 1786):
            
            # Assigning a Call to a Name (line 1786):
            
            # Call to _get_xy_transform(...): (line 1786)
            # Processing the call arguments (line 1786)
            # Getting the type of 'renderer' (line 1786)
            renderer_143275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 41), 'renderer', False)
            # Getting the type of 's1' (line 1786)
            s1_143276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 51), 's1', False)
            # Processing the call keyword arguments (line 1786)
            kwargs_143277 = {}
            # Getting the type of 'self' (line 1786)
            self_143273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 18), 'self', False)
            # Obtaining the member '_get_xy_transform' of a type (line 1786)
            _get_xy_transform_143274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1786, 18), self_143273, '_get_xy_transform')
            # Calling _get_xy_transform(args, kwargs) (line 1786)
            _get_xy_transform_call_result_143278 = invoke(stypy.reporting.localization.Localization(__file__, 1786, 18), _get_xy_transform_143274, *[renderer_143275, s1_143276], **kwargs_143277)
            
            # Assigning a type to the variable 'tr1' (line 1786)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1786, 12), 'tr1', _get_xy_transform_call_result_143278)
            
            # Assigning a Call to a Name (line 1787):
            
            # Assigning a Call to a Name (line 1787):
            
            # Assigning a Call to a Name (line 1787):
            
            # Call to _get_xy_transform(...): (line 1787)
            # Processing the call arguments (line 1787)
            # Getting the type of 'renderer' (line 1787)
            renderer_143281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 41), 'renderer', False)
            # Getting the type of 's2' (line 1787)
            s2_143282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 51), 's2', False)
            # Processing the call keyword arguments (line 1787)
            kwargs_143283 = {}
            # Getting the type of 'self' (line 1787)
            self_143279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 18), 'self', False)
            # Obtaining the member '_get_xy_transform' of a type (line 1787)
            _get_xy_transform_143280 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1787, 18), self_143279, '_get_xy_transform')
            # Calling _get_xy_transform(args, kwargs) (line 1787)
            _get_xy_transform_call_result_143284 = invoke(stypy.reporting.localization.Localization(__file__, 1787, 18), _get_xy_transform_143280, *[renderer_143281, s2_143282], **kwargs_143283)
            
            # Assigning a type to the variable 'tr2' (line 1787)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1787, 12), 'tr2', _get_xy_transform_call_result_143284)
            
            # Assigning a Call to a Name (line 1788):
            
            # Assigning a Call to a Name (line 1788):
            
            # Assigning a Call to a Name (line 1788):
            
            # Call to blended_transform_factory(...): (line 1788)
            # Processing the call arguments (line 1788)
            # Getting the type of 'tr1' (line 1788)
            tr1_143286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 43), 'tr1', False)
            # Getting the type of 'tr2' (line 1788)
            tr2_143287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 48), 'tr2', False)
            # Processing the call keyword arguments (line 1788)
            kwargs_143288 = {}
            # Getting the type of 'blended_transform_factory' (line 1788)
            blended_transform_factory_143285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 17), 'blended_transform_factory', False)
            # Calling blended_transform_factory(args, kwargs) (line 1788)
            blended_transform_factory_call_result_143289 = invoke(stypy.reporting.localization.Localization(__file__, 1788, 17), blended_transform_factory_143285, *[tr1_143286, tr2_143287], **kwargs_143288)
            
            # Assigning a type to the variable 'tr' (line 1788)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1788, 12), 'tr', blended_transform_factory_call_result_143289)
            # Getting the type of 'tr' (line 1789)
            tr_143290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 19), 'tr')
            # Assigning a type to the variable 'stypy_return_type' (line 1789)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1789, 12), 'stypy_return_type', tr_143290)

            if more_types_in_union_143260:
                # Runtime conditional SSA for else branch (line 1783)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_143259) or more_types_in_union_143260):
            # Assigning a type to the variable 's' (line 1783)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1783, 8), 's', remove_subtype_from_union(s_143258, tuple))
            
            
            # Call to callable(...): (line 1790)
            # Processing the call arguments (line 1790)
            # Getting the type of 's' (line 1790)
            s_143292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 22), 's', False)
            # Processing the call keyword arguments (line 1790)
            kwargs_143293 = {}
            # Getting the type of 'callable' (line 1790)
            callable_143291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 13), 'callable', False)
            # Calling callable(args, kwargs) (line 1790)
            callable_call_result_143294 = invoke(stypy.reporting.localization.Localization(__file__, 1790, 13), callable_143291, *[s_143292], **kwargs_143293)
            
            # Testing the type of an if condition (line 1790)
            if_condition_143295 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1790, 13), callable_call_result_143294)
            # Assigning a type to the variable 'if_condition_143295' (line 1790)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1790, 13), 'if_condition_143295', if_condition_143295)
            # SSA begins for if statement (line 1790)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 1791):
            
            # Assigning a Call to a Name (line 1791):
            
            # Assigning a Call to a Name (line 1791):
            
            # Call to s(...): (line 1791)
            # Processing the call arguments (line 1791)
            # Getting the type of 'renderer' (line 1791)
            renderer_143297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 19), 'renderer', False)
            # Processing the call keyword arguments (line 1791)
            kwargs_143298 = {}
            # Getting the type of 's' (line 1791)
            s_143296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 17), 's', False)
            # Calling s(args, kwargs) (line 1791)
            s_call_result_143299 = invoke(stypy.reporting.localization.Localization(__file__, 1791, 17), s_143296, *[renderer_143297], **kwargs_143298)
            
            # Assigning a type to the variable 'tr' (line 1791)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1791, 12), 'tr', s_call_result_143299)
            
            
            # Call to isinstance(...): (line 1792)
            # Processing the call arguments (line 1792)
            # Getting the type of 'tr' (line 1792)
            tr_143301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 26), 'tr', False)
            # Getting the type of 'BboxBase' (line 1792)
            BboxBase_143302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 30), 'BboxBase', False)
            # Processing the call keyword arguments (line 1792)
            kwargs_143303 = {}
            # Getting the type of 'isinstance' (line 1792)
            isinstance_143300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 15), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 1792)
            isinstance_call_result_143304 = invoke(stypy.reporting.localization.Localization(__file__, 1792, 15), isinstance_143300, *[tr_143301, BboxBase_143302], **kwargs_143303)
            
            # Testing the type of an if condition (line 1792)
            if_condition_143305 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1792, 12), isinstance_call_result_143304)
            # Assigning a type to the variable 'if_condition_143305' (line 1792)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1792, 12), 'if_condition_143305', if_condition_143305)
            # SSA begins for if statement (line 1792)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to BboxTransformTo(...): (line 1793)
            # Processing the call arguments (line 1793)
            # Getting the type of 'tr' (line 1793)
            tr_143307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 39), 'tr', False)
            # Processing the call keyword arguments (line 1793)
            kwargs_143308 = {}
            # Getting the type of 'BboxTransformTo' (line 1793)
            BboxTransformTo_143306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 23), 'BboxTransformTo', False)
            # Calling BboxTransformTo(args, kwargs) (line 1793)
            BboxTransformTo_call_result_143309 = invoke(stypy.reporting.localization.Localization(__file__, 1793, 23), BboxTransformTo_143306, *[tr_143307], **kwargs_143308)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1793)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1793, 16), 'stypy_return_type', BboxTransformTo_call_result_143309)
            # SSA branch for the else part of an if statement (line 1792)
            module_type_store.open_ssa_branch('else')
            
            
            # Call to isinstance(...): (line 1794)
            # Processing the call arguments (line 1794)
            # Getting the type of 'tr' (line 1794)
            tr_143311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 28), 'tr', False)
            # Getting the type of 'Transform' (line 1794)
            Transform_143312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 32), 'Transform', False)
            # Processing the call keyword arguments (line 1794)
            kwargs_143313 = {}
            # Getting the type of 'isinstance' (line 1794)
            isinstance_143310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 17), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 1794)
            isinstance_call_result_143314 = invoke(stypy.reporting.localization.Localization(__file__, 1794, 17), isinstance_143310, *[tr_143311, Transform_143312], **kwargs_143313)
            
            # Testing the type of an if condition (line 1794)
            if_condition_143315 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1794, 17), isinstance_call_result_143314)
            # Assigning a type to the variable 'if_condition_143315' (line 1794)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1794, 17), 'if_condition_143315', if_condition_143315)
            # SSA begins for if statement (line 1794)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            # Getting the type of 'tr' (line 1795)
            tr_143316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 23), 'tr')
            # Assigning a type to the variable 'stypy_return_type' (line 1795)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1795, 16), 'stypy_return_type', tr_143316)
            # SSA branch for the else part of an if statement (line 1794)
            module_type_store.open_ssa_branch('else')
            
            # Call to RuntimeError(...): (line 1797)
            # Processing the call arguments (line 1797)
            unicode_143318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1797, 35), 'unicode', u'unknown return type ...')
            # Processing the call keyword arguments (line 1797)
            kwargs_143319 = {}
            # Getting the type of 'RuntimeError' (line 1797)
            RuntimeError_143317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1797, 22), 'RuntimeError', False)
            # Calling RuntimeError(args, kwargs) (line 1797)
            RuntimeError_call_result_143320 = invoke(stypy.reporting.localization.Localization(__file__, 1797, 22), RuntimeError_143317, *[unicode_143318], **kwargs_143319)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1797, 16), RuntimeError_call_result_143320, 'raise parameter', BaseException)
            # SSA join for if statement (line 1794)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 1792)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA branch for the else part of an if statement (line 1790)
            module_type_store.open_ssa_branch('else')
            
            
            # Call to isinstance(...): (line 1798)
            # Processing the call arguments (line 1798)
            # Getting the type of 's' (line 1798)
            s_143322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 24), 's', False)
            # Getting the type of 'Artist' (line 1798)
            Artist_143323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 27), 'Artist', False)
            # Processing the call keyword arguments (line 1798)
            kwargs_143324 = {}
            # Getting the type of 'isinstance' (line 1798)
            isinstance_143321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 13), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 1798)
            isinstance_call_result_143325 = invoke(stypy.reporting.localization.Localization(__file__, 1798, 13), isinstance_143321, *[s_143322, Artist_143323], **kwargs_143324)
            
            # Testing the type of an if condition (line 1798)
            if_condition_143326 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1798, 13), isinstance_call_result_143325)
            # Assigning a type to the variable 'if_condition_143326' (line 1798)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1798, 13), 'if_condition_143326', if_condition_143326)
            # SSA begins for if statement (line 1798)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 1799):
            
            # Assigning a Call to a Name (line 1799):
            
            # Assigning a Call to a Name (line 1799):
            
            # Call to get_window_extent(...): (line 1799)
            # Processing the call arguments (line 1799)
            # Getting the type of 'renderer' (line 1799)
            renderer_143329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1799, 39), 'renderer', False)
            # Processing the call keyword arguments (line 1799)
            kwargs_143330 = {}
            # Getting the type of 's' (line 1799)
            s_143327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1799, 19), 's', False)
            # Obtaining the member 'get_window_extent' of a type (line 1799)
            get_window_extent_143328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1799, 19), s_143327, 'get_window_extent')
            # Calling get_window_extent(args, kwargs) (line 1799)
            get_window_extent_call_result_143331 = invoke(stypy.reporting.localization.Localization(__file__, 1799, 19), get_window_extent_143328, *[renderer_143329], **kwargs_143330)
            
            # Assigning a type to the variable 'bbox' (line 1799)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1799, 12), 'bbox', get_window_extent_call_result_143331)
            
            # Call to BboxTransformTo(...): (line 1800)
            # Processing the call arguments (line 1800)
            # Getting the type of 'bbox' (line 1800)
            bbox_143333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 35), 'bbox', False)
            # Processing the call keyword arguments (line 1800)
            kwargs_143334 = {}
            # Getting the type of 'BboxTransformTo' (line 1800)
            BboxTransformTo_143332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 19), 'BboxTransformTo', False)
            # Calling BboxTransformTo(args, kwargs) (line 1800)
            BboxTransformTo_call_result_143335 = invoke(stypy.reporting.localization.Localization(__file__, 1800, 19), BboxTransformTo_143332, *[bbox_143333], **kwargs_143334)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1800)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1800, 12), 'stypy_return_type', BboxTransformTo_call_result_143335)
            # SSA branch for the else part of an if statement (line 1798)
            module_type_store.open_ssa_branch('else')
            
            
            # Call to isinstance(...): (line 1801)
            # Processing the call arguments (line 1801)
            # Getting the type of 's' (line 1801)
            s_143337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1801, 24), 's', False)
            # Getting the type of 'BboxBase' (line 1801)
            BboxBase_143338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1801, 27), 'BboxBase', False)
            # Processing the call keyword arguments (line 1801)
            kwargs_143339 = {}
            # Getting the type of 'isinstance' (line 1801)
            isinstance_143336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1801, 13), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 1801)
            isinstance_call_result_143340 = invoke(stypy.reporting.localization.Localization(__file__, 1801, 13), isinstance_143336, *[s_143337, BboxBase_143338], **kwargs_143339)
            
            # Testing the type of an if condition (line 1801)
            if_condition_143341 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1801, 13), isinstance_call_result_143340)
            # Assigning a type to the variable 'if_condition_143341' (line 1801)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1801, 13), 'if_condition_143341', if_condition_143341)
            # SSA begins for if statement (line 1801)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to BboxTransformTo(...): (line 1802)
            # Processing the call arguments (line 1802)
            # Getting the type of 's' (line 1802)
            s_143343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 35), 's', False)
            # Processing the call keyword arguments (line 1802)
            kwargs_143344 = {}
            # Getting the type of 'BboxTransformTo' (line 1802)
            BboxTransformTo_143342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 19), 'BboxTransformTo', False)
            # Calling BboxTransformTo(args, kwargs) (line 1802)
            BboxTransformTo_call_result_143345 = invoke(stypy.reporting.localization.Localization(__file__, 1802, 19), BboxTransformTo_143342, *[s_143343], **kwargs_143344)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1802)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1802, 12), 'stypy_return_type', BboxTransformTo_call_result_143345)
            # SSA branch for the else part of an if statement (line 1801)
            module_type_store.open_ssa_branch('else')
            
            
            # Call to isinstance(...): (line 1803)
            # Processing the call arguments (line 1803)
            # Getting the type of 's' (line 1803)
            s_143347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1803, 24), 's', False)
            # Getting the type of 'Transform' (line 1803)
            Transform_143348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1803, 27), 'Transform', False)
            # Processing the call keyword arguments (line 1803)
            kwargs_143349 = {}
            # Getting the type of 'isinstance' (line 1803)
            isinstance_143346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1803, 13), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 1803)
            isinstance_call_result_143350 = invoke(stypy.reporting.localization.Localization(__file__, 1803, 13), isinstance_143346, *[s_143347, Transform_143348], **kwargs_143349)
            
            # Testing the type of an if condition (line 1803)
            if_condition_143351 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1803, 13), isinstance_call_result_143350)
            # Assigning a type to the variable 'if_condition_143351' (line 1803)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1803, 13), 'if_condition_143351', if_condition_143351)
            # SSA begins for if statement (line 1803)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            # Getting the type of 's' (line 1804)
            s_143352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 19), 's')
            # Assigning a type to the variable 'stypy_return_type' (line 1804)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1804, 12), 'stypy_return_type', s_143352)
            # SSA branch for the else part of an if statement (line 1803)
            module_type_store.open_ssa_branch('else')
            
            
            
            # Call to isinstance(...): (line 1805)
            # Processing the call arguments (line 1805)
            # Getting the type of 's' (line 1805)
            s_143354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 28), 's', False)
            # Getting the type of 'six' (line 1805)
            six_143355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 31), 'six', False)
            # Obtaining the member 'string_types' of a type (line 1805)
            string_types_143356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1805, 31), six_143355, 'string_types')
            # Processing the call keyword arguments (line 1805)
            kwargs_143357 = {}
            # Getting the type of 'isinstance' (line 1805)
            isinstance_143353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 17), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 1805)
            isinstance_call_result_143358 = invoke(stypy.reporting.localization.Localization(__file__, 1805, 17), isinstance_143353, *[s_143354, string_types_143356], **kwargs_143357)
            
            # Applying the 'not' unary operator (line 1805)
            result_not__143359 = python_operator(stypy.reporting.localization.Localization(__file__, 1805, 13), 'not', isinstance_call_result_143358)
            
            # Testing the type of an if condition (line 1805)
            if_condition_143360 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1805, 13), result_not__143359)
            # Assigning a type to the variable 'if_condition_143360' (line 1805)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1805, 13), 'if_condition_143360', if_condition_143360)
            # SSA begins for if statement (line 1805)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to RuntimeError(...): (line 1806)
            # Processing the call arguments (line 1806)
            unicode_143362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1806, 31), 'unicode', u'unknown coordinate type : %s')
            
            # Obtaining an instance of the builtin type 'tuple' (line 1806)
            tuple_143363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1806, 65), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1806)
            # Adding element type (line 1806)
            # Getting the type of 's' (line 1806)
            s_143364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 65), 's', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1806, 65), tuple_143363, s_143364)
            
            # Applying the binary operator '%' (line 1806)
            result_mod_143365 = python_operator(stypy.reporting.localization.Localization(__file__, 1806, 31), '%', unicode_143362, tuple_143363)
            
            # Processing the call keyword arguments (line 1806)
            kwargs_143366 = {}
            # Getting the type of 'RuntimeError' (line 1806)
            RuntimeError_143361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 18), 'RuntimeError', False)
            # Calling RuntimeError(args, kwargs) (line 1806)
            RuntimeError_call_result_143367 = invoke(stypy.reporting.localization.Localization(__file__, 1806, 18), RuntimeError_143361, *[result_mod_143365], **kwargs_143366)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1806, 12), RuntimeError_call_result_143367, 'raise parameter', BaseException)
            # SSA join for if statement (line 1805)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 1803)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 1801)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 1798)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 1790)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_143259 and more_types_in_union_143260):
                # SSA join for if statement (line 1783)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 's' (line 1808)
        s_143368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1808, 11), 's')
        unicode_143369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1808, 16), 'unicode', u'data')
        # Applying the binary operator '==' (line 1808)
        result_eq_143370 = python_operator(stypy.reporting.localization.Localization(__file__, 1808, 11), '==', s_143368, unicode_143369)
        
        # Testing the type of an if condition (line 1808)
        if_condition_143371 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1808, 8), result_eq_143370)
        # Assigning a type to the variable 'if_condition_143371' (line 1808)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1808, 8), 'if_condition_143371', if_condition_143371)
        # SSA begins for if statement (line 1808)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 1809)
        self_143372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 19), 'self')
        # Obtaining the member 'axes' of a type (line 1809)
        axes_143373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1809, 19), self_143372, 'axes')
        # Obtaining the member 'transData' of a type (line 1809)
        transData_143374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1809, 19), axes_143373, 'transData')
        # Assigning a type to the variable 'stypy_return_type' (line 1809)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1809, 12), 'stypy_return_type', transData_143374)
        # SSA branch for the else part of an if statement (line 1808)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 's' (line 1810)
        s_143375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 13), 's')
        unicode_143376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1810, 18), 'unicode', u'polar')
        # Applying the binary operator '==' (line 1810)
        result_eq_143377 = python_operator(stypy.reporting.localization.Localization(__file__, 1810, 13), '==', s_143375, unicode_143376)
        
        # Testing the type of an if condition (line 1810)
        if_condition_143378 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1810, 13), result_eq_143377)
        # Assigning a type to the variable 'if_condition_143378' (line 1810)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1810, 13), 'if_condition_143378', if_condition_143378)
        # SSA begins for if statement (line 1810)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1811, 12))
        
        # 'from matplotlib.projections import PolarAxes' statement (line 1811)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_143379 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1811, 12), 'matplotlib.projections')

        if (type(import_143379) is not StypyTypeError):

            if (import_143379 != 'pyd_module'):
                __import__(import_143379)
                sys_modules_143380 = sys.modules[import_143379]
                import_from_module(stypy.reporting.localization.Localization(__file__, 1811, 12), 'matplotlib.projections', sys_modules_143380.module_type_store, module_type_store, ['PolarAxes'])
                nest_module(stypy.reporting.localization.Localization(__file__, 1811, 12), __file__, sys_modules_143380, sys_modules_143380.module_type_store, module_type_store)
            else:
                from matplotlib.projections import PolarAxes

                import_from_module(stypy.reporting.localization.Localization(__file__, 1811, 12), 'matplotlib.projections', None, module_type_store, ['PolarAxes'], [PolarAxes])

        else:
            # Assigning a type to the variable 'matplotlib.projections' (line 1811)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1811, 12), 'matplotlib.projections', import_143379)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Assigning a Call to a Name (line 1812):
        
        # Assigning a Call to a Name (line 1812):
        
        # Assigning a Call to a Name (line 1812):
        
        # Call to PolarTransform(...): (line 1812)
        # Processing the call keyword arguments (line 1812)
        kwargs_143383 = {}
        # Getting the type of 'PolarAxes' (line 1812)
        PolarAxes_143381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1812, 17), 'PolarAxes', False)
        # Obtaining the member 'PolarTransform' of a type (line 1812)
        PolarTransform_143382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1812, 17), PolarAxes_143381, 'PolarTransform')
        # Calling PolarTransform(args, kwargs) (line 1812)
        PolarTransform_call_result_143384 = invoke(stypy.reporting.localization.Localization(__file__, 1812, 17), PolarTransform_143382, *[], **kwargs_143383)
        
        # Assigning a type to the variable 'tr' (line 1812)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1812, 12), 'tr', PolarTransform_call_result_143384)
        
        # Assigning a BinOp to a Name (line 1813):
        
        # Assigning a BinOp to a Name (line 1813):
        
        # Assigning a BinOp to a Name (line 1813):
        # Getting the type of 'tr' (line 1813)
        tr_143385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 20), 'tr')
        # Getting the type of 'self' (line 1813)
        self_143386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 25), 'self')
        # Obtaining the member 'axes' of a type (line 1813)
        axes_143387 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1813, 25), self_143386, 'axes')
        # Obtaining the member 'transData' of a type (line 1813)
        transData_143388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1813, 25), axes_143387, 'transData')
        # Applying the binary operator '+' (line 1813)
        result_add_143389 = python_operator(stypy.reporting.localization.Localization(__file__, 1813, 20), '+', tr_143385, transData_143388)
        
        # Assigning a type to the variable 'trans' (line 1813)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1813, 12), 'trans', result_add_143389)
        # Getting the type of 'trans' (line 1814)
        trans_143390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 19), 'trans')
        # Assigning a type to the variable 'stypy_return_type' (line 1814)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1814, 12), 'stypy_return_type', trans_143390)
        # SSA join for if statement (line 1810)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1808)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1816):
        
        # Assigning a Call to a Name (line 1816):
        
        # Assigning a Call to a Name (line 1816):
        
        # Call to split(...): (line 1816)
        # Processing the call keyword arguments (line 1816)
        kwargs_143393 = {}
        # Getting the type of 's' (line 1816)
        s_143391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 13), 's', False)
        # Obtaining the member 'split' of a type (line 1816)
        split_143392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1816, 13), s_143391, 'split')
        # Calling split(args, kwargs) (line 1816)
        split_call_result_143394 = invoke(stypy.reporting.localization.Localization(__file__, 1816, 13), split_143392, *[], **kwargs_143393)
        
        # Assigning a type to the variable 's_' (line 1816)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1816, 8), 's_', split_call_result_143394)
        
        
        
        # Call to len(...): (line 1817)
        # Processing the call arguments (line 1817)
        # Getting the type of 's_' (line 1817)
        s__143396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 15), 's_', False)
        # Processing the call keyword arguments (line 1817)
        kwargs_143397 = {}
        # Getting the type of 'len' (line 1817)
        len_143395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 11), 'len', False)
        # Calling len(args, kwargs) (line 1817)
        len_call_result_143398 = invoke(stypy.reporting.localization.Localization(__file__, 1817, 11), len_143395, *[s__143396], **kwargs_143397)
        
        int_143399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1817, 22), 'int')
        # Applying the binary operator '!=' (line 1817)
        result_ne_143400 = python_operator(stypy.reporting.localization.Localization(__file__, 1817, 11), '!=', len_call_result_143398, int_143399)
        
        # Testing the type of an if condition (line 1817)
        if_condition_143401 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1817, 8), result_ne_143400)
        # Assigning a type to the variable 'if_condition_143401' (line 1817)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1817, 8), 'if_condition_143401', if_condition_143401)
        # SSA begins for if statement (line 1817)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1818)
        # Processing the call arguments (line 1818)
        unicode_143403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1818, 29), 'unicode', u'%s is not a recognized coordinate')
        # Getting the type of 's' (line 1818)
        s_143404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1818, 67), 's', False)
        # Applying the binary operator '%' (line 1818)
        result_mod_143405 = python_operator(stypy.reporting.localization.Localization(__file__, 1818, 29), '%', unicode_143403, s_143404)
        
        # Processing the call keyword arguments (line 1818)
        kwargs_143406 = {}
        # Getting the type of 'ValueError' (line 1818)
        ValueError_143402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1818, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1818)
        ValueError_call_result_143407 = invoke(stypy.reporting.localization.Localization(__file__, 1818, 18), ValueError_143402, *[result_mod_143405], **kwargs_143406)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1818, 12), ValueError_call_result_143407, 'raise parameter', BaseException)
        # SSA join for if statement (line 1817)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Tuple to a Tuple (line 1820):
        
        # Assigning a Name to a Name (line 1820):
        
        # Assigning a Name to a Name (line 1820):
        # Getting the type of 'None' (line 1820)
        None_143408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 21), 'None')
        # Assigning a type to the variable 'tuple_assignment_139163' (line 1820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1820, 8), 'tuple_assignment_139163', None_143408)
        
        # Assigning a Name to a Name (line 1820):
        
        # Assigning a Name to a Name (line 1820):
        # Getting the type of 'None' (line 1820)
        None_143409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 27), 'None')
        # Assigning a type to the variable 'tuple_assignment_139164' (line 1820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1820, 8), 'tuple_assignment_139164', None_143409)
        
        # Assigning a Name to a Name (line 1820):
        
        # Assigning a Name to a Name (line 1820):
        # Getting the type of 'tuple_assignment_139163' (line 1820)
        tuple_assignment_139163_143410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 8), 'tuple_assignment_139163')
        # Assigning a type to the variable 'bbox0' (line 1820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1820, 8), 'bbox0', tuple_assignment_139163_143410)
        
        # Assigning a Name to a Name (line 1820):
        
        # Assigning a Name to a Name (line 1820):
        # Getting the type of 'tuple_assignment_139164' (line 1820)
        tuple_assignment_139164_143411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 8), 'tuple_assignment_139164')
        # Assigning a type to the variable 'xy0' (line 1820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1820, 15), 'xy0', tuple_assignment_139164_143411)
        
        # Assigning a Name to a Tuple (line 1822):
        
        # Assigning a Subscript to a Name (line 1822):
        
        # Assigning a Subscript to a Name (line 1822):
        
        # Obtaining the type of the subscript
        int_143412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1822, 8), 'int')
        # Getting the type of 's_' (line 1822)
        s__143413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 26), 's_')
        # Obtaining the member '__getitem__' of a type (line 1822)
        getitem___143414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1822, 8), s__143413, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1822)
        subscript_call_result_143415 = invoke(stypy.reporting.localization.Localization(__file__, 1822, 8), getitem___143414, int_143412)
        
        # Assigning a type to the variable 'tuple_var_assignment_139165' (line 1822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1822, 8), 'tuple_var_assignment_139165', subscript_call_result_143415)
        
        # Assigning a Subscript to a Name (line 1822):
        
        # Assigning a Subscript to a Name (line 1822):
        
        # Obtaining the type of the subscript
        int_143416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1822, 8), 'int')
        # Getting the type of 's_' (line 1822)
        s__143417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 26), 's_')
        # Obtaining the member '__getitem__' of a type (line 1822)
        getitem___143418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1822, 8), s__143417, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1822)
        subscript_call_result_143419 = invoke(stypy.reporting.localization.Localization(__file__, 1822, 8), getitem___143418, int_143416)
        
        # Assigning a type to the variable 'tuple_var_assignment_139166' (line 1822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1822, 8), 'tuple_var_assignment_139166', subscript_call_result_143419)
        
        # Assigning a Name to a Name (line 1822):
        
        # Assigning a Name to a Name (line 1822):
        # Getting the type of 'tuple_var_assignment_139165' (line 1822)
        tuple_var_assignment_139165_143420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 8), 'tuple_var_assignment_139165')
        # Assigning a type to the variable 'bbox_name' (line 1822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1822, 8), 'bbox_name', tuple_var_assignment_139165_143420)
        
        # Assigning a Name to a Name (line 1822):
        
        # Assigning a Name to a Name (line 1822):
        # Getting the type of 'tuple_var_assignment_139166' (line 1822)
        tuple_var_assignment_139166_143421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 8), 'tuple_var_assignment_139166')
        # Assigning a type to the variable 'unit' (line 1822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1822, 19), 'unit', tuple_var_assignment_139166_143421)
        
        
        # Getting the type of 'bbox_name' (line 1824)
        bbox_name_143422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1824, 11), 'bbox_name')
        unicode_143423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1824, 24), 'unicode', u'figure')
        # Applying the binary operator '==' (line 1824)
        result_eq_143424 = python_operator(stypy.reporting.localization.Localization(__file__, 1824, 11), '==', bbox_name_143422, unicode_143423)
        
        # Testing the type of an if condition (line 1824)
        if_condition_143425 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1824, 8), result_eq_143424)
        # Assigning a type to the variable 'if_condition_143425' (line 1824)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1824, 8), 'if_condition_143425', if_condition_143425)
        # SSA begins for if statement (line 1824)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 1825):
        
        # Assigning a Attribute to a Name (line 1825):
        
        # Assigning a Attribute to a Name (line 1825):
        # Getting the type of 'self' (line 1825)
        self_143426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 20), 'self')
        # Obtaining the member 'figure' of a type (line 1825)
        figure_143427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1825, 20), self_143426, 'figure')
        # Obtaining the member 'bbox' of a type (line 1825)
        bbox_143428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1825, 20), figure_143427, 'bbox')
        # Assigning a type to the variable 'bbox0' (line 1825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1825, 12), 'bbox0', bbox_143428)
        # SSA branch for the else part of an if statement (line 1824)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'bbox_name' (line 1826)
        bbox_name_143429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1826, 13), 'bbox_name')
        unicode_143430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1826, 26), 'unicode', u'axes')
        # Applying the binary operator '==' (line 1826)
        result_eq_143431 = python_operator(stypy.reporting.localization.Localization(__file__, 1826, 13), '==', bbox_name_143429, unicode_143430)
        
        # Testing the type of an if condition (line 1826)
        if_condition_143432 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1826, 13), result_eq_143431)
        # Assigning a type to the variable 'if_condition_143432' (line 1826)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1826, 13), 'if_condition_143432', if_condition_143432)
        # SSA begins for if statement (line 1826)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 1827):
        
        # Assigning a Attribute to a Name (line 1827):
        
        # Assigning a Attribute to a Name (line 1827):
        # Getting the type of 'self' (line 1827)
        self_143433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1827, 20), 'self')
        # Obtaining the member 'axes' of a type (line 1827)
        axes_143434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1827, 20), self_143433, 'axes')
        # Obtaining the member 'bbox' of a type (line 1827)
        bbox_143435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1827, 20), axes_143434, 'bbox')
        # Assigning a type to the variable 'bbox0' (line 1827)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1827, 12), 'bbox0', bbox_143435)
        # SSA join for if statement (line 1826)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1824)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1834)
        # Getting the type of 'bbox0' (line 1834)
        bbox0_143436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 8), 'bbox0')
        # Getting the type of 'None' (line 1834)
        None_143437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 24), 'None')
        
        (may_be_143438, more_types_in_union_143439) = may_not_be_none(bbox0_143436, None_143437)

        if may_be_143438:

            if more_types_in_union_143439:
                # Runtime conditional SSA (line 1834)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 1835):
            
            # Assigning a Subscript to a Name (line 1835):
            
            # Assigning a Subscript to a Name (line 1835):
            
            # Obtaining the type of the subscript
            int_143440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1835, 32), 'int')
            slice_143441 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1835, 18), None, int_143440, None)
            # Getting the type of 'bbox0' (line 1835)
            bbox0_143442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1835, 18), 'bbox0')
            # Obtaining the member 'bounds' of a type (line 1835)
            bounds_143443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1835, 18), bbox0_143442, 'bounds')
            # Obtaining the member '__getitem__' of a type (line 1835)
            getitem___143444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1835, 18), bounds_143443, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1835)
            subscript_call_result_143445 = invoke(stypy.reporting.localization.Localization(__file__, 1835, 18), getitem___143444, slice_143441)
            
            # Assigning a type to the variable 'xy0' (line 1835)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1835, 12), 'xy0', subscript_call_result_143445)

            if more_types_in_union_143439:
                # Runtime conditional SSA for else branch (line 1834)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_143438) or more_types_in_union_143439):
            
            
            # Getting the type of 'bbox_name' (line 1836)
            bbox_name_143446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1836, 13), 'bbox_name')
            unicode_143447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1836, 26), 'unicode', u'offset')
            # Applying the binary operator '==' (line 1836)
            result_eq_143448 = python_operator(stypy.reporting.localization.Localization(__file__, 1836, 13), '==', bbox_name_143446, unicode_143447)
            
            # Testing the type of an if condition (line 1836)
            if_condition_143449 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1836, 13), result_eq_143448)
            # Assigning a type to the variable 'if_condition_143449' (line 1836)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1836, 13), 'if_condition_143449', if_condition_143449)
            # SSA begins for if statement (line 1836)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 1837):
            
            # Assigning a Call to a Name (line 1837):
            
            # Assigning a Call to a Name (line 1837):
            
            # Call to _get_ref_xy(...): (line 1837)
            # Processing the call arguments (line 1837)
            # Getting the type of 'renderer' (line 1837)
            renderer_143452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 35), 'renderer', False)
            # Processing the call keyword arguments (line 1837)
            kwargs_143453 = {}
            # Getting the type of 'self' (line 1837)
            self_143450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 18), 'self', False)
            # Obtaining the member '_get_ref_xy' of a type (line 1837)
            _get_ref_xy_143451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1837, 18), self_143450, '_get_ref_xy')
            # Calling _get_ref_xy(args, kwargs) (line 1837)
            _get_ref_xy_call_result_143454 = invoke(stypy.reporting.localization.Localization(__file__, 1837, 18), _get_ref_xy_143451, *[renderer_143452], **kwargs_143453)
            
            # Assigning a type to the variable 'xy0' (line 1837)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1837, 12), 'xy0', _get_ref_xy_call_result_143454)
            # SSA join for if statement (line 1836)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_143438 and more_types_in_union_143439):
                # SSA join for if statement (line 1834)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1839)
        # Getting the type of 'xy0' (line 1839)
        xy0_143455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1839, 8), 'xy0')
        # Getting the type of 'None' (line 1839)
        None_143456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1839, 22), 'None')
        
        (may_be_143457, more_types_in_union_143458) = may_not_be_none(xy0_143455, None_143456)

        if may_be_143457:

            if more_types_in_union_143458:
                # Runtime conditional SSA (line 1839)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Tuple (line 1841):
            
            # Assigning a Subscript to a Name (line 1841):
            
            # Assigning a Subscript to a Name (line 1841):
            
            # Obtaining the type of the subscript
            int_143459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1841, 12), 'int')
            # Getting the type of 'xy0' (line 1841)
            xy0_143460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1841, 27), 'xy0')
            # Obtaining the member '__getitem__' of a type (line 1841)
            getitem___143461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1841, 12), xy0_143460, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1841)
            subscript_call_result_143462 = invoke(stypy.reporting.localization.Localization(__file__, 1841, 12), getitem___143461, int_143459)
            
            # Assigning a type to the variable 'tuple_var_assignment_139167' (line 1841)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1841, 12), 'tuple_var_assignment_139167', subscript_call_result_143462)
            
            # Assigning a Subscript to a Name (line 1841):
            
            # Assigning a Subscript to a Name (line 1841):
            
            # Obtaining the type of the subscript
            int_143463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1841, 12), 'int')
            # Getting the type of 'xy0' (line 1841)
            xy0_143464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1841, 27), 'xy0')
            # Obtaining the member '__getitem__' of a type (line 1841)
            getitem___143465 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1841, 12), xy0_143464, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1841)
            subscript_call_result_143466 = invoke(stypy.reporting.localization.Localization(__file__, 1841, 12), getitem___143465, int_143463)
            
            # Assigning a type to the variable 'tuple_var_assignment_139168' (line 1841)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1841, 12), 'tuple_var_assignment_139168', subscript_call_result_143466)
            
            # Assigning a Name to a Name (line 1841):
            
            # Assigning a Name to a Name (line 1841):
            # Getting the type of 'tuple_var_assignment_139167' (line 1841)
            tuple_var_assignment_139167_143467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1841, 12), 'tuple_var_assignment_139167')
            # Assigning a type to the variable 'ref_x' (line 1841)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1841, 12), 'ref_x', tuple_var_assignment_139167_143467)
            
            # Assigning a Name to a Name (line 1841):
            
            # Assigning a Name to a Name (line 1841):
            # Getting the type of 'tuple_var_assignment_139168' (line 1841)
            tuple_var_assignment_139168_143468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1841, 12), 'tuple_var_assignment_139168')
            # Assigning a type to the variable 'ref_y' (line 1841)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1841, 19), 'ref_y', tuple_var_assignment_139168_143468)
            stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1842, 12))
            
            # 'from matplotlib.transforms import Affine2D' statement (line 1842)
            update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
            import_143469 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1842, 12), 'matplotlib.transforms')

            if (type(import_143469) is not StypyTypeError):

                if (import_143469 != 'pyd_module'):
                    __import__(import_143469)
                    sys_modules_143470 = sys.modules[import_143469]
                    import_from_module(stypy.reporting.localization.Localization(__file__, 1842, 12), 'matplotlib.transforms', sys_modules_143470.module_type_store, module_type_store, ['Affine2D'])
                    nest_module(stypy.reporting.localization.Localization(__file__, 1842, 12), __file__, sys_modules_143470, sys_modules_143470.module_type_store, module_type_store)
                else:
                    from matplotlib.transforms import Affine2D

                    import_from_module(stypy.reporting.localization.Localization(__file__, 1842, 12), 'matplotlib.transforms', None, module_type_store, ['Affine2D'], [Affine2D])

            else:
                # Assigning a type to the variable 'matplotlib.transforms' (line 1842)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1842, 12), 'matplotlib.transforms', import_143469)

            remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
            
            
            
            # Getting the type of 'unit' (line 1843)
            unit_143471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1843, 15), 'unit')
            unicode_143472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1843, 23), 'unicode', u'points')
            # Applying the binary operator '==' (line 1843)
            result_eq_143473 = python_operator(stypy.reporting.localization.Localization(__file__, 1843, 15), '==', unit_143471, unicode_143472)
            
            # Testing the type of an if condition (line 1843)
            if_condition_143474 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1843, 12), result_eq_143473)
            # Assigning a type to the variable 'if_condition_143474' (line 1843)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1843, 12), 'if_condition_143474', if_condition_143474)
            # SSA begins for if statement (line 1843)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a BinOp to a Name (line 1845):
            
            # Assigning a BinOp to a Name (line 1845):
            
            # Assigning a BinOp to a Name (line 1845):
            
            # Call to get_dpi(...): (line 1845)
            # Processing the call keyword arguments (line 1845)
            kwargs_143478 = {}
            # Getting the type of 'self' (line 1845)
            self_143475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1845, 22), 'self', False)
            # Obtaining the member 'figure' of a type (line 1845)
            figure_143476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1845, 22), self_143475, 'figure')
            # Obtaining the member 'get_dpi' of a type (line 1845)
            get_dpi_143477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1845, 22), figure_143476, 'get_dpi')
            # Calling get_dpi(args, kwargs) (line 1845)
            get_dpi_call_result_143479 = invoke(stypy.reporting.localization.Localization(__file__, 1845, 22), get_dpi_143477, *[], **kwargs_143478)
            
            float_143480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1845, 46), 'float')
            # Applying the binary operator 'div' (line 1845)
            result_div_143481 = python_operator(stypy.reporting.localization.Localization(__file__, 1845, 22), 'div', get_dpi_call_result_143479, float_143480)
            
            # Assigning a type to the variable 'dpp' (line 1845)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1845, 16), 'dpp', result_div_143481)
            
            # Assigning a Call to a Name (line 1846):
            
            # Assigning a Call to a Name (line 1846):
            
            # Assigning a Call to a Name (line 1846):
            
            # Call to scale(...): (line 1846)
            # Processing the call arguments (line 1846)
            # Getting the type of 'dpp' (line 1846)
            dpp_143486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1846, 38), 'dpp', False)
            # Getting the type of 'dpp' (line 1846)
            dpp_143487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1846, 43), 'dpp', False)
            # Processing the call keyword arguments (line 1846)
            kwargs_143488 = {}
            
            # Call to Affine2D(...): (line 1846)
            # Processing the call keyword arguments (line 1846)
            kwargs_143483 = {}
            # Getting the type of 'Affine2D' (line 1846)
            Affine2D_143482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1846, 21), 'Affine2D', False)
            # Calling Affine2D(args, kwargs) (line 1846)
            Affine2D_call_result_143484 = invoke(stypy.reporting.localization.Localization(__file__, 1846, 21), Affine2D_143482, *[], **kwargs_143483)
            
            # Obtaining the member 'scale' of a type (line 1846)
            scale_143485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1846, 21), Affine2D_call_result_143484, 'scale')
            # Calling scale(args, kwargs) (line 1846)
            scale_call_result_143489 = invoke(stypy.reporting.localization.Localization(__file__, 1846, 21), scale_143485, *[dpp_143486, dpp_143487], **kwargs_143488)
            
            # Assigning a type to the variable 'tr' (line 1846)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1846, 16), 'tr', scale_call_result_143489)
            # SSA branch for the else part of an if statement (line 1843)
            module_type_store.open_ssa_branch('else')
            
            
            # Getting the type of 'unit' (line 1847)
            unit_143490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1847, 17), 'unit')
            unicode_143491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1847, 25), 'unicode', u'pixels')
            # Applying the binary operator '==' (line 1847)
            result_eq_143492 = python_operator(stypy.reporting.localization.Localization(__file__, 1847, 17), '==', unit_143490, unicode_143491)
            
            # Testing the type of an if condition (line 1847)
            if_condition_143493 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1847, 17), result_eq_143492)
            # Assigning a type to the variable 'if_condition_143493' (line 1847)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1847, 17), 'if_condition_143493', if_condition_143493)
            # SSA begins for if statement (line 1847)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 1848):
            
            # Assigning a Call to a Name (line 1848):
            
            # Assigning a Call to a Name (line 1848):
            
            # Call to Affine2D(...): (line 1848)
            # Processing the call keyword arguments (line 1848)
            kwargs_143495 = {}
            # Getting the type of 'Affine2D' (line 1848)
            Affine2D_143494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1848, 21), 'Affine2D', False)
            # Calling Affine2D(args, kwargs) (line 1848)
            Affine2D_call_result_143496 = invoke(stypy.reporting.localization.Localization(__file__, 1848, 21), Affine2D_143494, *[], **kwargs_143495)
            
            # Assigning a type to the variable 'tr' (line 1848)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1848, 16), 'tr', Affine2D_call_result_143496)
            # SSA branch for the else part of an if statement (line 1847)
            module_type_store.open_ssa_branch('else')
            
            
            # Getting the type of 'unit' (line 1849)
            unit_143497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 17), 'unit')
            unicode_143498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1849, 25), 'unicode', u'fontsize')
            # Applying the binary operator '==' (line 1849)
            result_eq_143499 = python_operator(stypy.reporting.localization.Localization(__file__, 1849, 17), '==', unit_143497, unicode_143498)
            
            # Testing the type of an if condition (line 1849)
            if_condition_143500 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1849, 17), result_eq_143499)
            # Assigning a type to the variable 'if_condition_143500' (line 1849)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1849, 17), 'if_condition_143500', if_condition_143500)
            # SSA begins for if statement (line 1849)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 1850):
            
            # Assigning a Call to a Name (line 1850):
            
            # Assigning a Call to a Name (line 1850):
            
            # Call to get_size(...): (line 1850)
            # Processing the call keyword arguments (line 1850)
            kwargs_143503 = {}
            # Getting the type of 'self' (line 1850)
            self_143501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 27), 'self', False)
            # Obtaining the member 'get_size' of a type (line 1850)
            get_size_143502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1850, 27), self_143501, 'get_size')
            # Calling get_size(args, kwargs) (line 1850)
            get_size_call_result_143504 = invoke(stypy.reporting.localization.Localization(__file__, 1850, 27), get_size_143502, *[], **kwargs_143503)
            
            # Assigning a type to the variable 'fontsize' (line 1850)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1850, 16), 'fontsize', get_size_call_result_143504)
            
            # Assigning a BinOp to a Name (line 1851):
            
            # Assigning a BinOp to a Name (line 1851):
            
            # Assigning a BinOp to a Name (line 1851):
            # Getting the type of 'fontsize' (line 1851)
            fontsize_143505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 22), 'fontsize')
            
            # Call to get_dpi(...): (line 1851)
            # Processing the call keyword arguments (line 1851)
            kwargs_143509 = {}
            # Getting the type of 'self' (line 1851)
            self_143506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 33), 'self', False)
            # Obtaining the member 'figure' of a type (line 1851)
            figure_143507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1851, 33), self_143506, 'figure')
            # Obtaining the member 'get_dpi' of a type (line 1851)
            get_dpi_143508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1851, 33), figure_143507, 'get_dpi')
            # Calling get_dpi(args, kwargs) (line 1851)
            get_dpi_call_result_143510 = invoke(stypy.reporting.localization.Localization(__file__, 1851, 33), get_dpi_143508, *[], **kwargs_143509)
            
            # Applying the binary operator '*' (line 1851)
            result_mul_143511 = python_operator(stypy.reporting.localization.Localization(__file__, 1851, 22), '*', fontsize_143505, get_dpi_call_result_143510)
            
            float_143512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1851, 57), 'float')
            # Applying the binary operator 'div' (line 1851)
            result_div_143513 = python_operator(stypy.reporting.localization.Localization(__file__, 1851, 55), 'div', result_mul_143511, float_143512)
            
            # Assigning a type to the variable 'dpp' (line 1851)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1851, 16), 'dpp', result_div_143513)
            
            # Assigning a Call to a Name (line 1852):
            
            # Assigning a Call to a Name (line 1852):
            
            # Assigning a Call to a Name (line 1852):
            
            # Call to scale(...): (line 1852)
            # Processing the call arguments (line 1852)
            # Getting the type of 'dpp' (line 1852)
            dpp_143518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 38), 'dpp', False)
            # Getting the type of 'dpp' (line 1852)
            dpp_143519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 43), 'dpp', False)
            # Processing the call keyword arguments (line 1852)
            kwargs_143520 = {}
            
            # Call to Affine2D(...): (line 1852)
            # Processing the call keyword arguments (line 1852)
            kwargs_143515 = {}
            # Getting the type of 'Affine2D' (line 1852)
            Affine2D_143514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 21), 'Affine2D', False)
            # Calling Affine2D(args, kwargs) (line 1852)
            Affine2D_call_result_143516 = invoke(stypy.reporting.localization.Localization(__file__, 1852, 21), Affine2D_143514, *[], **kwargs_143515)
            
            # Obtaining the member 'scale' of a type (line 1852)
            scale_143517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1852, 21), Affine2D_call_result_143516, 'scale')
            # Calling scale(args, kwargs) (line 1852)
            scale_call_result_143521 = invoke(stypy.reporting.localization.Localization(__file__, 1852, 21), scale_143517, *[dpp_143518, dpp_143519], **kwargs_143520)
            
            # Assigning a type to the variable 'tr' (line 1852)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1852, 16), 'tr', scale_call_result_143521)
            # SSA branch for the else part of an if statement (line 1849)
            module_type_store.open_ssa_branch('else')
            
            
            # Getting the type of 'unit' (line 1853)
            unit_143522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1853, 17), 'unit')
            unicode_143523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1853, 25), 'unicode', u'fraction')
            # Applying the binary operator '==' (line 1853)
            result_eq_143524 = python_operator(stypy.reporting.localization.Localization(__file__, 1853, 17), '==', unit_143522, unicode_143523)
            
            # Testing the type of an if condition (line 1853)
            if_condition_143525 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1853, 17), result_eq_143524)
            # Assigning a type to the variable 'if_condition_143525' (line 1853)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1853, 17), 'if_condition_143525', if_condition_143525)
            # SSA begins for if statement (line 1853)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Subscript to a Tuple (line 1854):
            
            # Assigning a Subscript to a Name (line 1854):
            
            # Assigning a Subscript to a Name (line 1854):
            
            # Obtaining the type of the subscript
            int_143526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1854, 16), 'int')
            
            # Obtaining the type of the subscript
            int_143527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1854, 36), 'int')
            slice_143528 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1854, 23), int_143527, None, None)
            # Getting the type of 'bbox0' (line 1854)
            bbox0_143529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 23), 'bbox0')
            # Obtaining the member 'bounds' of a type (line 1854)
            bounds_143530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1854, 23), bbox0_143529, 'bounds')
            # Obtaining the member '__getitem__' of a type (line 1854)
            getitem___143531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1854, 23), bounds_143530, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1854)
            subscript_call_result_143532 = invoke(stypy.reporting.localization.Localization(__file__, 1854, 23), getitem___143531, slice_143528)
            
            # Obtaining the member '__getitem__' of a type (line 1854)
            getitem___143533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1854, 16), subscript_call_result_143532, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1854)
            subscript_call_result_143534 = invoke(stypy.reporting.localization.Localization(__file__, 1854, 16), getitem___143533, int_143526)
            
            # Assigning a type to the variable 'tuple_var_assignment_139169' (line 1854)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1854, 16), 'tuple_var_assignment_139169', subscript_call_result_143534)
            
            # Assigning a Subscript to a Name (line 1854):
            
            # Assigning a Subscript to a Name (line 1854):
            
            # Obtaining the type of the subscript
            int_143535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1854, 16), 'int')
            
            # Obtaining the type of the subscript
            int_143536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1854, 36), 'int')
            slice_143537 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1854, 23), int_143536, None, None)
            # Getting the type of 'bbox0' (line 1854)
            bbox0_143538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 23), 'bbox0')
            # Obtaining the member 'bounds' of a type (line 1854)
            bounds_143539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1854, 23), bbox0_143538, 'bounds')
            # Obtaining the member '__getitem__' of a type (line 1854)
            getitem___143540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1854, 23), bounds_143539, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1854)
            subscript_call_result_143541 = invoke(stypy.reporting.localization.Localization(__file__, 1854, 23), getitem___143540, slice_143537)
            
            # Obtaining the member '__getitem__' of a type (line 1854)
            getitem___143542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1854, 16), subscript_call_result_143541, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1854)
            subscript_call_result_143543 = invoke(stypy.reporting.localization.Localization(__file__, 1854, 16), getitem___143542, int_143535)
            
            # Assigning a type to the variable 'tuple_var_assignment_139170' (line 1854)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1854, 16), 'tuple_var_assignment_139170', subscript_call_result_143543)
            
            # Assigning a Name to a Name (line 1854):
            
            # Assigning a Name to a Name (line 1854):
            # Getting the type of 'tuple_var_assignment_139169' (line 1854)
            tuple_var_assignment_139169_143544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 16), 'tuple_var_assignment_139169')
            # Assigning a type to the variable 'w' (line 1854)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1854, 16), 'w', tuple_var_assignment_139169_143544)
            
            # Assigning a Name to a Name (line 1854):
            
            # Assigning a Name to a Name (line 1854):
            # Getting the type of 'tuple_var_assignment_139170' (line 1854)
            tuple_var_assignment_139170_143545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 16), 'tuple_var_assignment_139170')
            # Assigning a type to the variable 'h' (line 1854)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1854, 19), 'h', tuple_var_assignment_139170_143545)
            
            # Assigning a Call to a Name (line 1855):
            
            # Assigning a Call to a Name (line 1855):
            
            # Assigning a Call to a Name (line 1855):
            
            # Call to scale(...): (line 1855)
            # Processing the call arguments (line 1855)
            # Getting the type of 'w' (line 1855)
            w_143550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 38), 'w', False)
            # Getting the type of 'h' (line 1855)
            h_143551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 41), 'h', False)
            # Processing the call keyword arguments (line 1855)
            kwargs_143552 = {}
            
            # Call to Affine2D(...): (line 1855)
            # Processing the call keyword arguments (line 1855)
            kwargs_143547 = {}
            # Getting the type of 'Affine2D' (line 1855)
            Affine2D_143546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 21), 'Affine2D', False)
            # Calling Affine2D(args, kwargs) (line 1855)
            Affine2D_call_result_143548 = invoke(stypy.reporting.localization.Localization(__file__, 1855, 21), Affine2D_143546, *[], **kwargs_143547)
            
            # Obtaining the member 'scale' of a type (line 1855)
            scale_143549 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1855, 21), Affine2D_call_result_143548, 'scale')
            # Calling scale(args, kwargs) (line 1855)
            scale_call_result_143553 = invoke(stypy.reporting.localization.Localization(__file__, 1855, 21), scale_143549, *[w_143550, h_143551], **kwargs_143552)
            
            # Assigning a type to the variable 'tr' (line 1855)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1855, 16), 'tr', scale_call_result_143553)
            # SSA branch for the else part of an if statement (line 1853)
            module_type_store.open_ssa_branch('else')
            
            # Call to ValueError(...): (line 1857)
            # Processing the call arguments (line 1857)
            unicode_143555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1857, 33), 'unicode', u'%s is not a recognized coordinate')
            # Getting the type of 's' (line 1857)
            s_143556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1857, 71), 's', False)
            # Applying the binary operator '%' (line 1857)
            result_mod_143557 = python_operator(stypy.reporting.localization.Localization(__file__, 1857, 33), '%', unicode_143555, s_143556)
            
            # Processing the call keyword arguments (line 1857)
            kwargs_143558 = {}
            # Getting the type of 'ValueError' (line 1857)
            ValueError_143554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1857, 22), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 1857)
            ValueError_call_result_143559 = invoke(stypy.reporting.localization.Localization(__file__, 1857, 22), ValueError_143554, *[result_mod_143557], **kwargs_143558)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1857, 16), ValueError_call_result_143559, 'raise parameter', BaseException)
            # SSA join for if statement (line 1853)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 1849)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 1847)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 1843)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Call to translate(...): (line 1859)
            # Processing the call arguments (line 1859)
            # Getting the type of 'ref_x' (line 1859)
            ref_x_143562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 32), 'ref_x', False)
            # Getting the type of 'ref_y' (line 1859)
            ref_y_143563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 39), 'ref_y', False)
            # Processing the call keyword arguments (line 1859)
            kwargs_143564 = {}
            # Getting the type of 'tr' (line 1859)
            tr_143560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 19), 'tr', False)
            # Obtaining the member 'translate' of a type (line 1859)
            translate_143561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1859, 19), tr_143560, 'translate')
            # Calling translate(args, kwargs) (line 1859)
            translate_call_result_143565 = invoke(stypy.reporting.localization.Localization(__file__, 1859, 19), translate_143561, *[ref_x_143562, ref_y_143563], **kwargs_143564)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1859)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1859, 12), 'stypy_return_type', translate_call_result_143565)

            if more_types_in_union_143458:
                # Runtime conditional SSA for else branch (line 1839)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_143457) or more_types_in_union_143458):
            
            # Call to ValueError(...): (line 1862)
            # Processing the call arguments (line 1862)
            unicode_143567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1862, 29), 'unicode', u'%s is not a recognized coordinate')
            # Getting the type of 's' (line 1862)
            s_143568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1862, 67), 's', False)
            # Applying the binary operator '%' (line 1862)
            result_mod_143569 = python_operator(stypy.reporting.localization.Localization(__file__, 1862, 29), '%', unicode_143567, s_143568)
            
            # Processing the call keyword arguments (line 1862)
            kwargs_143570 = {}
            # Getting the type of 'ValueError' (line 1862)
            ValueError_143566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1862, 18), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 1862)
            ValueError_call_result_143571 = invoke(stypy.reporting.localization.Localization(__file__, 1862, 18), ValueError_143566, *[result_mod_143569], **kwargs_143570)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1862, 12), ValueError_call_result_143571, 'raise parameter', BaseException)

            if (may_be_143457 and more_types_in_union_143458):
                # SSA join for if statement (line 1839)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of '_get_xy_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_xy_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 1781)
        stypy_return_type_143572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1781, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_143572)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_xy_transform'
        return stypy_return_type_143572


    @norecursion
    def _get_ref_xy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_ref_xy'
        module_type_store = module_type_store.open_function_context('_get_ref_xy', 1864, 4, False)
        # Assigning a type to the variable 'self' (line 1865)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1865, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AnnotationBase._get_ref_xy.__dict__.__setitem__('stypy_localization', localization)
        _AnnotationBase._get_ref_xy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AnnotationBase._get_ref_xy.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AnnotationBase._get_ref_xy.__dict__.__setitem__('stypy_function_name', '_AnnotationBase._get_ref_xy')
        _AnnotationBase._get_ref_xy.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        _AnnotationBase._get_ref_xy.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AnnotationBase._get_ref_xy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AnnotationBase._get_ref_xy.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AnnotationBase._get_ref_xy.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AnnotationBase._get_ref_xy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AnnotationBase._get_ref_xy.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AnnotationBase._get_ref_xy', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_ref_xy', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_ref_xy(...)' code ##################

        unicode_143573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1868, (-1)), 'unicode', u'\n        return x, y (in display coordinate) that is to be used for a reference\n        of any offset coordinate\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1870)
        # Getting the type of 'tuple' (line 1870)
        tuple_143574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1870, 37), 'tuple')
        # Getting the type of 'self' (line 1870)
        self_143575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1870, 22), 'self')
        # Obtaining the member 'xycoords' of a type (line 1870)
        xycoords_143576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1870, 22), self_143575, 'xycoords')
        
        (may_be_143577, more_types_in_union_143578) = may_be_subtype(tuple_143574, xycoords_143576)

        if may_be_143577:

            if more_types_in_union_143578:
                # Runtime conditional SSA (line 1870)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Getting the type of 'self' (line 1870)
            self_143579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1870, 8), 'self')
            # Obtaining the member 'xycoords' of a type (line 1870)
            xycoords_143580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1870, 8), self_143579, 'xycoords')
            # Setting the type of the member 'xycoords' of a type (line 1870)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1870, 8), self_143579, 'xycoords', remove_not_subtype_from_union(xycoords_143576, tuple))
            
            # Assigning a Attribute to a Tuple (line 1871):
            
            # Assigning a Subscript to a Name (line 1871):
            
            # Assigning a Subscript to a Name (line 1871):
            
            # Obtaining the type of the subscript
            int_143581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1871, 12), 'int')
            # Getting the type of 'self' (line 1871)
            self_143582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 21), 'self')
            # Obtaining the member 'xycoords' of a type (line 1871)
            xycoords_143583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1871, 21), self_143582, 'xycoords')
            # Obtaining the member '__getitem__' of a type (line 1871)
            getitem___143584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1871, 12), xycoords_143583, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1871)
            subscript_call_result_143585 = invoke(stypy.reporting.localization.Localization(__file__, 1871, 12), getitem___143584, int_143581)
            
            # Assigning a type to the variable 'tuple_var_assignment_139171' (line 1871)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1871, 12), 'tuple_var_assignment_139171', subscript_call_result_143585)
            
            # Assigning a Subscript to a Name (line 1871):
            
            # Assigning a Subscript to a Name (line 1871):
            
            # Obtaining the type of the subscript
            int_143586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1871, 12), 'int')
            # Getting the type of 'self' (line 1871)
            self_143587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 21), 'self')
            # Obtaining the member 'xycoords' of a type (line 1871)
            xycoords_143588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1871, 21), self_143587, 'xycoords')
            # Obtaining the member '__getitem__' of a type (line 1871)
            getitem___143589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1871, 12), xycoords_143588, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1871)
            subscript_call_result_143590 = invoke(stypy.reporting.localization.Localization(__file__, 1871, 12), getitem___143589, int_143586)
            
            # Assigning a type to the variable 'tuple_var_assignment_139172' (line 1871)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1871, 12), 'tuple_var_assignment_139172', subscript_call_result_143590)
            
            # Assigning a Name to a Name (line 1871):
            
            # Assigning a Name to a Name (line 1871):
            # Getting the type of 'tuple_var_assignment_139171' (line 1871)
            tuple_var_assignment_139171_143591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 12), 'tuple_var_assignment_139171')
            # Assigning a type to the variable 's1' (line 1871)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1871, 12), 's1', tuple_var_assignment_139171_143591)
            
            # Assigning a Name to a Name (line 1871):
            
            # Assigning a Name to a Name (line 1871):
            # Getting the type of 'tuple_var_assignment_139172' (line 1871)
            tuple_var_assignment_139172_143592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 12), 'tuple_var_assignment_139172')
            # Assigning a type to the variable 's2' (line 1871)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1871, 16), 's2', tuple_var_assignment_139172_143592)
            
            
            # Evaluating a boolean operation
            
            # Evaluating a boolean operation
            
            # Call to isinstance(...): (line 1872)
            # Processing the call arguments (line 1872)
            # Getting the type of 's1' (line 1872)
            s1_143594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 28), 's1', False)
            # Getting the type of 'six' (line 1872)
            six_143595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 32), 'six', False)
            # Obtaining the member 'string_types' of a type (line 1872)
            string_types_143596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1872, 32), six_143595, 'string_types')
            # Processing the call keyword arguments (line 1872)
            kwargs_143597 = {}
            # Getting the type of 'isinstance' (line 1872)
            isinstance_143593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 17), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 1872)
            isinstance_call_result_143598 = invoke(stypy.reporting.localization.Localization(__file__, 1872, 17), isinstance_143593, *[s1_143594, string_types_143596], **kwargs_143597)
            
            
            
            # Obtaining the type of the subscript
            int_143599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1873, 32), 'int')
            
            # Call to split(...): (line 1873)
            # Processing the call keyword arguments (line 1873)
            kwargs_143602 = {}
            # Getting the type of 's1' (line 1873)
            s1_143600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 21), 's1', False)
            # Obtaining the member 'split' of a type (line 1873)
            split_143601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1873, 21), s1_143600, 'split')
            # Calling split(args, kwargs) (line 1873)
            split_call_result_143603 = invoke(stypy.reporting.localization.Localization(__file__, 1873, 21), split_143601, *[], **kwargs_143602)
            
            # Obtaining the member '__getitem__' of a type (line 1873)
            getitem___143604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1873, 21), split_call_result_143603, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1873)
            subscript_call_result_143605 = invoke(stypy.reporting.localization.Localization(__file__, 1873, 21), getitem___143604, int_143599)
            
            unicode_143606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1873, 38), 'unicode', u'offset')
            # Applying the binary operator '==' (line 1873)
            result_eq_143607 = python_operator(stypy.reporting.localization.Localization(__file__, 1873, 21), '==', subscript_call_result_143605, unicode_143606)
            
            # Applying the binary operator 'and' (line 1872)
            result_and_keyword_143608 = python_operator(stypy.reporting.localization.Localization(__file__, 1872, 17), 'and', isinstance_call_result_143598, result_eq_143607)
            
            
            # Evaluating a boolean operation
            
            # Call to isinstance(...): (line 1874)
            # Processing the call arguments (line 1874)
            # Getting the type of 's2' (line 1874)
            s2_143610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 35), 's2', False)
            # Getting the type of 'six' (line 1874)
            six_143611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 39), 'six', False)
            # Obtaining the member 'string_types' of a type (line 1874)
            string_types_143612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1874, 39), six_143611, 'string_types')
            # Processing the call keyword arguments (line 1874)
            kwargs_143613 = {}
            # Getting the type of 'isinstance' (line 1874)
            isinstance_143609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 24), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 1874)
            isinstance_call_result_143614 = invoke(stypy.reporting.localization.Localization(__file__, 1874, 24), isinstance_143609, *[s2_143610, string_types_143612], **kwargs_143613)
            
            
            
            # Obtaining the type of the subscript
            int_143615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1875, 39), 'int')
            
            # Call to split(...): (line 1875)
            # Processing the call keyword arguments (line 1875)
            kwargs_143618 = {}
            # Getting the type of 's2' (line 1875)
            s2_143616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1875, 28), 's2', False)
            # Obtaining the member 'split' of a type (line 1875)
            split_143617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1875, 28), s2_143616, 'split')
            # Calling split(args, kwargs) (line 1875)
            split_call_result_143619 = invoke(stypy.reporting.localization.Localization(__file__, 1875, 28), split_143617, *[], **kwargs_143618)
            
            # Obtaining the member '__getitem__' of a type (line 1875)
            getitem___143620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1875, 28), split_call_result_143619, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1875)
            subscript_call_result_143621 = invoke(stypy.reporting.localization.Localization(__file__, 1875, 28), getitem___143620, int_143615)
            
            unicode_143622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1875, 45), 'unicode', u'offset')
            # Applying the binary operator '==' (line 1875)
            result_eq_143623 = python_operator(stypy.reporting.localization.Localization(__file__, 1875, 28), '==', subscript_call_result_143621, unicode_143622)
            
            # Applying the binary operator 'and' (line 1874)
            result_and_keyword_143624 = python_operator(stypy.reporting.localization.Localization(__file__, 1874, 24), 'and', isinstance_call_result_143614, result_eq_143623)
            
            # Applying the binary operator 'or' (line 1872)
            result_or_keyword_143625 = python_operator(stypy.reporting.localization.Localization(__file__, 1872, 16), 'or', result_and_keyword_143608, result_and_keyword_143624)
            
            # Testing the type of an if condition (line 1872)
            if_condition_143626 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1872, 12), result_or_keyword_143625)
            # Assigning a type to the variable 'if_condition_143626' (line 1872)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1872, 12), 'if_condition_143626', if_condition_143626)
            # SSA begins for if statement (line 1872)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to ValueError(...): (line 1876)
            # Processing the call arguments (line 1876)
            unicode_143628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1876, 33), 'unicode', u'xycoords should not be an offset coordinate')
            # Processing the call keyword arguments (line 1876)
            kwargs_143629 = {}
            # Getting the type of 'ValueError' (line 1876)
            ValueError_143627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1876, 22), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 1876)
            ValueError_call_result_143630 = invoke(stypy.reporting.localization.Localization(__file__, 1876, 22), ValueError_143627, *[unicode_143628], **kwargs_143629)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1876, 16), ValueError_call_result_143630, 'raise parameter', BaseException)
            # SSA join for if statement (line 1872)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Attribute to a Tuple (line 1877):
            
            # Assigning a Subscript to a Name (line 1877):
            
            # Assigning a Subscript to a Name (line 1877):
            
            # Obtaining the type of the subscript
            int_143631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1877, 12), 'int')
            # Getting the type of 'self' (line 1877)
            self_143632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 19), 'self')
            # Obtaining the member 'xy' of a type (line 1877)
            xy_143633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1877, 19), self_143632, 'xy')
            # Obtaining the member '__getitem__' of a type (line 1877)
            getitem___143634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1877, 12), xy_143633, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1877)
            subscript_call_result_143635 = invoke(stypy.reporting.localization.Localization(__file__, 1877, 12), getitem___143634, int_143631)
            
            # Assigning a type to the variable 'tuple_var_assignment_139173' (line 1877)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1877, 12), 'tuple_var_assignment_139173', subscript_call_result_143635)
            
            # Assigning a Subscript to a Name (line 1877):
            
            # Assigning a Subscript to a Name (line 1877):
            
            # Obtaining the type of the subscript
            int_143636 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1877, 12), 'int')
            # Getting the type of 'self' (line 1877)
            self_143637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 19), 'self')
            # Obtaining the member 'xy' of a type (line 1877)
            xy_143638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1877, 19), self_143637, 'xy')
            # Obtaining the member '__getitem__' of a type (line 1877)
            getitem___143639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1877, 12), xy_143638, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1877)
            subscript_call_result_143640 = invoke(stypy.reporting.localization.Localization(__file__, 1877, 12), getitem___143639, int_143636)
            
            # Assigning a type to the variable 'tuple_var_assignment_139174' (line 1877)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1877, 12), 'tuple_var_assignment_139174', subscript_call_result_143640)
            
            # Assigning a Name to a Name (line 1877):
            
            # Assigning a Name to a Name (line 1877):
            # Getting the type of 'tuple_var_assignment_139173' (line 1877)
            tuple_var_assignment_139173_143641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 12), 'tuple_var_assignment_139173')
            # Assigning a type to the variable 'x' (line 1877)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1877, 12), 'x', tuple_var_assignment_139173_143641)
            
            # Assigning a Name to a Name (line 1877):
            
            # Assigning a Name to a Name (line 1877):
            # Getting the type of 'tuple_var_assignment_139174' (line 1877)
            tuple_var_assignment_139174_143642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 12), 'tuple_var_assignment_139174')
            # Assigning a type to the variable 'y' (line 1877)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1877, 15), 'y', tuple_var_assignment_139174_143642)
            
            # Assigning a Call to a Tuple (line 1878):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to _get_xy(...): (line 1878)
            # Processing the call arguments (line 1878)
            # Getting the type of 'renderer' (line 1878)
            renderer_143645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 34), 'renderer', False)
            # Getting the type of 'x' (line 1878)
            x_143646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 44), 'x', False)
            # Getting the type of 'y' (line 1878)
            y_143647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 47), 'y', False)
            # Getting the type of 's1' (line 1878)
            s1_143648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 50), 's1', False)
            # Processing the call keyword arguments (line 1878)
            kwargs_143649 = {}
            # Getting the type of 'self' (line 1878)
            self_143643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 21), 'self', False)
            # Obtaining the member '_get_xy' of a type (line 1878)
            _get_xy_143644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1878, 21), self_143643, '_get_xy')
            # Calling _get_xy(args, kwargs) (line 1878)
            _get_xy_call_result_143650 = invoke(stypy.reporting.localization.Localization(__file__, 1878, 21), _get_xy_143644, *[renderer_143645, x_143646, y_143647, s1_143648], **kwargs_143649)
            
            # Assigning a type to the variable 'call_assignment_139175' (line 1878)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1878, 12), 'call_assignment_139175', _get_xy_call_result_143650)
            
            # Assigning a Call to a Name (line 1878):
            
            # Assigning a Call to a Name (line 1878):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_143653 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1878, 12), 'int')
            # Processing the call keyword arguments
            kwargs_143654 = {}
            # Getting the type of 'call_assignment_139175' (line 1878)
            call_assignment_139175_143651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 12), 'call_assignment_139175', False)
            # Obtaining the member '__getitem__' of a type (line 1878)
            getitem___143652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1878, 12), call_assignment_139175_143651, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_143655 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___143652, *[int_143653], **kwargs_143654)
            
            # Assigning a type to the variable 'call_assignment_139176' (line 1878)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1878, 12), 'call_assignment_139176', getitem___call_result_143655)
            
            # Assigning a Name to a Name (line 1878):
            
            # Assigning a Name to a Name (line 1878):
            # Getting the type of 'call_assignment_139176' (line 1878)
            call_assignment_139176_143656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 12), 'call_assignment_139176')
            # Assigning a type to the variable 'x1' (line 1878)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1878, 12), 'x1', call_assignment_139176_143656)
            
            # Assigning a Call to a Name (line 1878):
            
            # Assigning a Call to a Name (line 1878):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_143659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1878, 12), 'int')
            # Processing the call keyword arguments
            kwargs_143660 = {}
            # Getting the type of 'call_assignment_139175' (line 1878)
            call_assignment_139175_143657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 12), 'call_assignment_139175', False)
            # Obtaining the member '__getitem__' of a type (line 1878)
            getitem___143658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1878, 12), call_assignment_139175_143657, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_143661 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___143658, *[int_143659], **kwargs_143660)
            
            # Assigning a type to the variable 'call_assignment_139177' (line 1878)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1878, 12), 'call_assignment_139177', getitem___call_result_143661)
            
            # Assigning a Name to a Name (line 1878):
            
            # Assigning a Name to a Name (line 1878):
            # Getting the type of 'call_assignment_139177' (line 1878)
            call_assignment_139177_143662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 12), 'call_assignment_139177')
            # Assigning a type to the variable 'y1' (line 1878)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1878, 16), 'y1', call_assignment_139177_143662)
            
            # Assigning a Call to a Tuple (line 1879):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to _get_xy(...): (line 1879)
            # Processing the call arguments (line 1879)
            # Getting the type of 'renderer' (line 1879)
            renderer_143665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1879, 34), 'renderer', False)
            # Getting the type of 'x' (line 1879)
            x_143666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1879, 44), 'x', False)
            # Getting the type of 'y' (line 1879)
            y_143667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1879, 47), 'y', False)
            # Getting the type of 's2' (line 1879)
            s2_143668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1879, 50), 's2', False)
            # Processing the call keyword arguments (line 1879)
            kwargs_143669 = {}
            # Getting the type of 'self' (line 1879)
            self_143663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1879, 21), 'self', False)
            # Obtaining the member '_get_xy' of a type (line 1879)
            _get_xy_143664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1879, 21), self_143663, '_get_xy')
            # Calling _get_xy(args, kwargs) (line 1879)
            _get_xy_call_result_143670 = invoke(stypy.reporting.localization.Localization(__file__, 1879, 21), _get_xy_143664, *[renderer_143665, x_143666, y_143667, s2_143668], **kwargs_143669)
            
            # Assigning a type to the variable 'call_assignment_139178' (line 1879)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1879, 12), 'call_assignment_139178', _get_xy_call_result_143670)
            
            # Assigning a Call to a Name (line 1879):
            
            # Assigning a Call to a Name (line 1879):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_143673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1879, 12), 'int')
            # Processing the call keyword arguments
            kwargs_143674 = {}
            # Getting the type of 'call_assignment_139178' (line 1879)
            call_assignment_139178_143671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1879, 12), 'call_assignment_139178', False)
            # Obtaining the member '__getitem__' of a type (line 1879)
            getitem___143672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1879, 12), call_assignment_139178_143671, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_143675 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___143672, *[int_143673], **kwargs_143674)
            
            # Assigning a type to the variable 'call_assignment_139179' (line 1879)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1879, 12), 'call_assignment_139179', getitem___call_result_143675)
            
            # Assigning a Name to a Name (line 1879):
            
            # Assigning a Name to a Name (line 1879):
            # Getting the type of 'call_assignment_139179' (line 1879)
            call_assignment_139179_143676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1879, 12), 'call_assignment_139179')
            # Assigning a type to the variable 'x2' (line 1879)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1879, 12), 'x2', call_assignment_139179_143676)
            
            # Assigning a Call to a Name (line 1879):
            
            # Assigning a Call to a Name (line 1879):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_143679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1879, 12), 'int')
            # Processing the call keyword arguments
            kwargs_143680 = {}
            # Getting the type of 'call_assignment_139178' (line 1879)
            call_assignment_139178_143677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1879, 12), 'call_assignment_139178', False)
            # Obtaining the member '__getitem__' of a type (line 1879)
            getitem___143678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1879, 12), call_assignment_139178_143677, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_143681 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___143678, *[int_143679], **kwargs_143680)
            
            # Assigning a type to the variable 'call_assignment_139180' (line 1879)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1879, 12), 'call_assignment_139180', getitem___call_result_143681)
            
            # Assigning a Name to a Name (line 1879):
            
            # Assigning a Name to a Name (line 1879):
            # Getting the type of 'call_assignment_139180' (line 1879)
            call_assignment_139180_143682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1879, 12), 'call_assignment_139180')
            # Assigning a type to the variable 'y2' (line 1879)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1879, 16), 'y2', call_assignment_139180_143682)
            
            # Obtaining an instance of the builtin type 'tuple' (line 1880)
            tuple_143683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1880, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1880)
            # Adding element type (line 1880)
            # Getting the type of 'x1' (line 1880)
            x1_143684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1880, 19), 'x1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1880, 19), tuple_143683, x1_143684)
            # Adding element type (line 1880)
            # Getting the type of 'y2' (line 1880)
            y2_143685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1880, 23), 'y2')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1880, 19), tuple_143683, y2_143685)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1880)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1880, 12), 'stypy_return_type', tuple_143683)

            if more_types_in_union_143578:
                # Runtime conditional SSA for else branch (line 1870)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_143577) or more_types_in_union_143578):
            # Getting the type of 'self' (line 1870)
            self_143686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1870, 8), 'self')
            # Obtaining the member 'xycoords' of a type (line 1870)
            xycoords_143687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1870, 8), self_143686, 'xycoords')
            # Setting the type of the member 'xycoords' of a type (line 1870)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1870, 8), self_143686, 'xycoords', remove_subtype_from_union(xycoords_143576, tuple))
            
            
            # Evaluating a boolean operation
            
            # Call to isinstance(...): (line 1881)
            # Processing the call arguments (line 1881)
            # Getting the type of 'self' (line 1881)
            self_143689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1881, 25), 'self', False)
            # Obtaining the member 'xycoords' of a type (line 1881)
            xycoords_143690 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1881, 25), self_143689, 'xycoords')
            # Getting the type of 'six' (line 1881)
            six_143691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1881, 40), 'six', False)
            # Obtaining the member 'string_types' of a type (line 1881)
            string_types_143692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1881, 40), six_143691, 'string_types')
            # Processing the call keyword arguments (line 1881)
            kwargs_143693 = {}
            # Getting the type of 'isinstance' (line 1881)
            isinstance_143688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1881, 14), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 1881)
            isinstance_call_result_143694 = invoke(stypy.reporting.localization.Localization(__file__, 1881, 14), isinstance_143688, *[xycoords_143690, string_types_143692], **kwargs_143693)
            
            
            
            # Obtaining the type of the subscript
            int_143695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1882, 36), 'int')
            
            # Call to split(...): (line 1882)
            # Processing the call keyword arguments (line 1882)
            kwargs_143699 = {}
            # Getting the type of 'self' (line 1882)
            self_143696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1882, 14), 'self', False)
            # Obtaining the member 'xycoords' of a type (line 1882)
            xycoords_143697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1882, 14), self_143696, 'xycoords')
            # Obtaining the member 'split' of a type (line 1882)
            split_143698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1882, 14), xycoords_143697, 'split')
            # Calling split(args, kwargs) (line 1882)
            split_call_result_143700 = invoke(stypy.reporting.localization.Localization(__file__, 1882, 14), split_143698, *[], **kwargs_143699)
            
            # Obtaining the member '__getitem__' of a type (line 1882)
            getitem___143701 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1882, 14), split_call_result_143700, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1882)
            subscript_call_result_143702 = invoke(stypy.reporting.localization.Localization(__file__, 1882, 14), getitem___143701, int_143695)
            
            unicode_143703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1882, 42), 'unicode', u'offset')
            # Applying the binary operator '==' (line 1882)
            result_eq_143704 = python_operator(stypy.reporting.localization.Localization(__file__, 1882, 14), '==', subscript_call_result_143702, unicode_143703)
            
            # Applying the binary operator 'and' (line 1881)
            result_and_keyword_143705 = python_operator(stypy.reporting.localization.Localization(__file__, 1881, 14), 'and', isinstance_call_result_143694, result_eq_143704)
            
            # Testing the type of an if condition (line 1881)
            if_condition_143706 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1881, 13), result_and_keyword_143705)
            # Assigning a type to the variable 'if_condition_143706' (line 1881)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1881, 13), 'if_condition_143706', if_condition_143706)
            # SSA begins for if statement (line 1881)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to ValueError(...): (line 1883)
            # Processing the call arguments (line 1883)
            unicode_143708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1883, 29), 'unicode', u'xycoords should not be an offset coordinate')
            # Processing the call keyword arguments (line 1883)
            kwargs_143709 = {}
            # Getting the type of 'ValueError' (line 1883)
            ValueError_143707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1883, 18), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 1883)
            ValueError_call_result_143710 = invoke(stypy.reporting.localization.Localization(__file__, 1883, 18), ValueError_143707, *[unicode_143708], **kwargs_143709)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1883, 12), ValueError_call_result_143710, 'raise parameter', BaseException)
            # SSA branch for the else part of an if statement (line 1881)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Attribute to a Tuple (line 1885):
            
            # Assigning a Subscript to a Name (line 1885):
            
            # Assigning a Subscript to a Name (line 1885):
            
            # Obtaining the type of the subscript
            int_143711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1885, 12), 'int')
            # Getting the type of 'self' (line 1885)
            self_143712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1885, 19), 'self')
            # Obtaining the member 'xy' of a type (line 1885)
            xy_143713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1885, 19), self_143712, 'xy')
            # Obtaining the member '__getitem__' of a type (line 1885)
            getitem___143714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1885, 12), xy_143713, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1885)
            subscript_call_result_143715 = invoke(stypy.reporting.localization.Localization(__file__, 1885, 12), getitem___143714, int_143711)
            
            # Assigning a type to the variable 'tuple_var_assignment_139181' (line 1885)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1885, 12), 'tuple_var_assignment_139181', subscript_call_result_143715)
            
            # Assigning a Subscript to a Name (line 1885):
            
            # Assigning a Subscript to a Name (line 1885):
            
            # Obtaining the type of the subscript
            int_143716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1885, 12), 'int')
            # Getting the type of 'self' (line 1885)
            self_143717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1885, 19), 'self')
            # Obtaining the member 'xy' of a type (line 1885)
            xy_143718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1885, 19), self_143717, 'xy')
            # Obtaining the member '__getitem__' of a type (line 1885)
            getitem___143719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1885, 12), xy_143718, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1885)
            subscript_call_result_143720 = invoke(stypy.reporting.localization.Localization(__file__, 1885, 12), getitem___143719, int_143716)
            
            # Assigning a type to the variable 'tuple_var_assignment_139182' (line 1885)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1885, 12), 'tuple_var_assignment_139182', subscript_call_result_143720)
            
            # Assigning a Name to a Name (line 1885):
            
            # Assigning a Name to a Name (line 1885):
            # Getting the type of 'tuple_var_assignment_139181' (line 1885)
            tuple_var_assignment_139181_143721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1885, 12), 'tuple_var_assignment_139181')
            # Assigning a type to the variable 'x' (line 1885)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1885, 12), 'x', tuple_var_assignment_139181_143721)
            
            # Assigning a Name to a Name (line 1885):
            
            # Assigning a Name to a Name (line 1885):
            # Getting the type of 'tuple_var_assignment_139182' (line 1885)
            tuple_var_assignment_139182_143722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1885, 12), 'tuple_var_assignment_139182')
            # Assigning a type to the variable 'y' (line 1885)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1885, 15), 'y', tuple_var_assignment_139182_143722)
            
            # Call to _get_xy(...): (line 1886)
            # Processing the call arguments (line 1886)
            # Getting the type of 'renderer' (line 1886)
            renderer_143725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 32), 'renderer', False)
            # Getting the type of 'x' (line 1886)
            x_143726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 42), 'x', False)
            # Getting the type of 'y' (line 1886)
            y_143727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 45), 'y', False)
            # Getting the type of 'self' (line 1886)
            self_143728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 48), 'self', False)
            # Obtaining the member 'xycoords' of a type (line 1886)
            xycoords_143729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1886, 48), self_143728, 'xycoords')
            # Processing the call keyword arguments (line 1886)
            kwargs_143730 = {}
            # Getting the type of 'self' (line 1886)
            self_143723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 19), 'self', False)
            # Obtaining the member '_get_xy' of a type (line 1886)
            _get_xy_143724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1886, 19), self_143723, '_get_xy')
            # Calling _get_xy(args, kwargs) (line 1886)
            _get_xy_call_result_143731 = invoke(stypy.reporting.localization.Localization(__file__, 1886, 19), _get_xy_143724, *[renderer_143725, x_143726, y_143727, xycoords_143729], **kwargs_143730)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1886)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1886, 12), 'stypy_return_type', _get_xy_call_result_143731)
            # SSA join for if statement (line 1881)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_143577 and more_types_in_union_143578):
                # SSA join for if statement (line 1870)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of '_get_ref_xy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_ref_xy' in the type store
        # Getting the type of 'stypy_return_type' (line 1864)
        stypy_return_type_143732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_143732)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_ref_xy'
        return stypy_return_type_143732


    @norecursion
    def set_annotation_clip(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_annotation_clip'
        module_type_store = module_type_store.open_function_context('set_annotation_clip', 1899, 4, False)
        # Assigning a type to the variable 'self' (line 1900)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1900, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AnnotationBase.set_annotation_clip.__dict__.__setitem__('stypy_localization', localization)
        _AnnotationBase.set_annotation_clip.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AnnotationBase.set_annotation_clip.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AnnotationBase.set_annotation_clip.__dict__.__setitem__('stypy_function_name', '_AnnotationBase.set_annotation_clip')
        _AnnotationBase.set_annotation_clip.__dict__.__setitem__('stypy_param_names_list', ['b'])
        _AnnotationBase.set_annotation_clip.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AnnotationBase.set_annotation_clip.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AnnotationBase.set_annotation_clip.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AnnotationBase.set_annotation_clip.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AnnotationBase.set_annotation_clip.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AnnotationBase.set_annotation_clip.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AnnotationBase.set_annotation_clip', ['b'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_annotation_clip', localization, ['b'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_annotation_clip(...)' code ##################

        unicode_143733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1908, (-1)), 'unicode', u'\n        set *annotation_clip* attribute.\n\n          * True: the annotation will only be drawn when self.xy is inside\n                  the axes.\n          * False: the annotation will always be drawn regardless of its\n                   position.\n          * None: the self.xy will be checked only if *xycoords* is "data"\n        ')
        
        # Assigning a Name to a Attribute (line 1909):
        
        # Assigning a Name to a Attribute (line 1909):
        
        # Assigning a Name to a Attribute (line 1909):
        # Getting the type of 'b' (line 1909)
        b_143734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1909, 32), 'b')
        # Getting the type of 'self' (line 1909)
        self_143735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1909, 8), 'self')
        # Setting the type of the member '_annotation_clip' of a type (line 1909)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1909, 8), self_143735, '_annotation_clip', b_143734)
        
        # ################# End of 'set_annotation_clip(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_annotation_clip' in the type store
        # Getting the type of 'stypy_return_type' (line 1899)
        stypy_return_type_143736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1899, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_143736)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_annotation_clip'
        return stypy_return_type_143736


    @norecursion
    def get_annotation_clip(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_annotation_clip'
        module_type_store = module_type_store.open_function_context('get_annotation_clip', 1911, 4, False)
        # Assigning a type to the variable 'self' (line 1912)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1912, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AnnotationBase.get_annotation_clip.__dict__.__setitem__('stypy_localization', localization)
        _AnnotationBase.get_annotation_clip.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AnnotationBase.get_annotation_clip.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AnnotationBase.get_annotation_clip.__dict__.__setitem__('stypy_function_name', '_AnnotationBase.get_annotation_clip')
        _AnnotationBase.get_annotation_clip.__dict__.__setitem__('stypy_param_names_list', [])
        _AnnotationBase.get_annotation_clip.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AnnotationBase.get_annotation_clip.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AnnotationBase.get_annotation_clip.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AnnotationBase.get_annotation_clip.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AnnotationBase.get_annotation_clip.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AnnotationBase.get_annotation_clip.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AnnotationBase.get_annotation_clip', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_annotation_clip', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_annotation_clip(...)' code ##################

        unicode_143737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1915, (-1)), 'unicode', u'\n        Return *annotation_clip* attribute.\n        See :meth:`set_annotation_clip` for the meaning of return values.\n        ')
        # Getting the type of 'self' (line 1916)
        self_143738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 15), 'self')
        # Obtaining the member '_annotation_clip' of a type (line 1916)
        _annotation_clip_143739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1916, 15), self_143738, '_annotation_clip')
        # Assigning a type to the variable 'stypy_return_type' (line 1916)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1916, 8), 'stypy_return_type', _annotation_clip_143739)
        
        # ################# End of 'get_annotation_clip(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_annotation_clip' in the type store
        # Getting the type of 'stypy_return_type' (line 1911)
        stypy_return_type_143740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1911, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_143740)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_annotation_clip'
        return stypy_return_type_143740


    @norecursion
    def _get_position_xy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_position_xy'
        module_type_store = module_type_store.open_function_context('_get_position_xy', 1918, 4, False)
        # Assigning a type to the variable 'self' (line 1919)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1919, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AnnotationBase._get_position_xy.__dict__.__setitem__('stypy_localization', localization)
        _AnnotationBase._get_position_xy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AnnotationBase._get_position_xy.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AnnotationBase._get_position_xy.__dict__.__setitem__('stypy_function_name', '_AnnotationBase._get_position_xy')
        _AnnotationBase._get_position_xy.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        _AnnotationBase._get_position_xy.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AnnotationBase._get_position_xy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AnnotationBase._get_position_xy.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AnnotationBase._get_position_xy.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AnnotationBase._get_position_xy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AnnotationBase._get_position_xy.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AnnotationBase._get_position_xy', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_position_xy', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_position_xy(...)' code ##################

        unicode_143741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1919, 8), 'unicode', u'Return the pixel position of the annotated point.')
        
        # Assigning a Attribute to a Tuple (line 1920):
        
        # Assigning a Subscript to a Name (line 1920):
        
        # Assigning a Subscript to a Name (line 1920):
        
        # Obtaining the type of the subscript
        int_143742 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1920, 8), 'int')
        # Getting the type of 'self' (line 1920)
        self_143743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 15), 'self')
        # Obtaining the member 'xy' of a type (line 1920)
        xy_143744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1920, 15), self_143743, 'xy')
        # Obtaining the member '__getitem__' of a type (line 1920)
        getitem___143745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1920, 8), xy_143744, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1920)
        subscript_call_result_143746 = invoke(stypy.reporting.localization.Localization(__file__, 1920, 8), getitem___143745, int_143742)
        
        # Assigning a type to the variable 'tuple_var_assignment_139183' (line 1920)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1920, 8), 'tuple_var_assignment_139183', subscript_call_result_143746)
        
        # Assigning a Subscript to a Name (line 1920):
        
        # Assigning a Subscript to a Name (line 1920):
        
        # Obtaining the type of the subscript
        int_143747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1920, 8), 'int')
        # Getting the type of 'self' (line 1920)
        self_143748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 15), 'self')
        # Obtaining the member 'xy' of a type (line 1920)
        xy_143749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1920, 15), self_143748, 'xy')
        # Obtaining the member '__getitem__' of a type (line 1920)
        getitem___143750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1920, 8), xy_143749, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1920)
        subscript_call_result_143751 = invoke(stypy.reporting.localization.Localization(__file__, 1920, 8), getitem___143750, int_143747)
        
        # Assigning a type to the variable 'tuple_var_assignment_139184' (line 1920)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1920, 8), 'tuple_var_assignment_139184', subscript_call_result_143751)
        
        # Assigning a Name to a Name (line 1920):
        
        # Assigning a Name to a Name (line 1920):
        # Getting the type of 'tuple_var_assignment_139183' (line 1920)
        tuple_var_assignment_139183_143752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 8), 'tuple_var_assignment_139183')
        # Assigning a type to the variable 'x' (line 1920)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1920, 8), 'x', tuple_var_assignment_139183_143752)
        
        # Assigning a Name to a Name (line 1920):
        
        # Assigning a Name to a Name (line 1920):
        # Getting the type of 'tuple_var_assignment_139184' (line 1920)
        tuple_var_assignment_139184_143753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 8), 'tuple_var_assignment_139184')
        # Assigning a type to the variable 'y' (line 1920)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1920, 11), 'y', tuple_var_assignment_139184_143753)
        
        # Call to _get_xy(...): (line 1921)
        # Processing the call arguments (line 1921)
        # Getting the type of 'renderer' (line 1921)
        renderer_143756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 28), 'renderer', False)
        # Getting the type of 'x' (line 1921)
        x_143757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 38), 'x', False)
        # Getting the type of 'y' (line 1921)
        y_143758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 41), 'y', False)
        # Getting the type of 'self' (line 1921)
        self_143759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 44), 'self', False)
        # Obtaining the member 'xycoords' of a type (line 1921)
        xycoords_143760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1921, 44), self_143759, 'xycoords')
        # Processing the call keyword arguments (line 1921)
        kwargs_143761 = {}
        # Getting the type of 'self' (line 1921)
        self_143754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 15), 'self', False)
        # Obtaining the member '_get_xy' of a type (line 1921)
        _get_xy_143755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1921, 15), self_143754, '_get_xy')
        # Calling _get_xy(args, kwargs) (line 1921)
        _get_xy_call_result_143762 = invoke(stypy.reporting.localization.Localization(__file__, 1921, 15), _get_xy_143755, *[renderer_143756, x_143757, y_143758, xycoords_143760], **kwargs_143761)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1921)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1921, 8), 'stypy_return_type', _get_xy_call_result_143762)
        
        # ################# End of '_get_position_xy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_position_xy' in the type store
        # Getting the type of 'stypy_return_type' (line 1918)
        stypy_return_type_143763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1918, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_143763)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_position_xy'
        return stypy_return_type_143763


    @norecursion
    def _check_xy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_check_xy'
        module_type_store = module_type_store.open_function_context('_check_xy', 1923, 4, False)
        # Assigning a type to the variable 'self' (line 1924)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1924, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AnnotationBase._check_xy.__dict__.__setitem__('stypy_localization', localization)
        _AnnotationBase._check_xy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AnnotationBase._check_xy.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AnnotationBase._check_xy.__dict__.__setitem__('stypy_function_name', '_AnnotationBase._check_xy')
        _AnnotationBase._check_xy.__dict__.__setitem__('stypy_param_names_list', ['renderer', 'xy_pixel'])
        _AnnotationBase._check_xy.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AnnotationBase._check_xy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AnnotationBase._check_xy.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AnnotationBase._check_xy.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AnnotationBase._check_xy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AnnotationBase._check_xy.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AnnotationBase._check_xy', ['renderer', 'xy_pixel'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_check_xy', localization, ['renderer', 'xy_pixel'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_check_xy(...)' code ##################

        unicode_143764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1927, (-1)), 'unicode', u'\n        given the xy pixel coordinate, check if the annotation need to\n        be drawn.\n        ')
        
        # Assigning a Call to a Name (line 1929):
        
        # Assigning a Call to a Name (line 1929):
        
        # Assigning a Call to a Name (line 1929):
        
        # Call to get_annotation_clip(...): (line 1929)
        # Processing the call keyword arguments (line 1929)
        kwargs_143767 = {}
        # Getting the type of 'self' (line 1929)
        self_143765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1929, 12), 'self', False)
        # Obtaining the member 'get_annotation_clip' of a type (line 1929)
        get_annotation_clip_143766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1929, 12), self_143765, 'get_annotation_clip')
        # Calling get_annotation_clip(args, kwargs) (line 1929)
        get_annotation_clip_call_result_143768 = invoke(stypy.reporting.localization.Localization(__file__, 1929, 12), get_annotation_clip_143766, *[], **kwargs_143767)
        
        # Assigning a type to the variable 'b' (line 1929)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1929, 8), 'b', get_annotation_clip_call_result_143768)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'b' (line 1931)
        b_143769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 11), 'b')
        
        # Evaluating a boolean operation
        
        # Getting the type of 'b' (line 1931)
        b_143770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 17), 'b')
        # Getting the type of 'None' (line 1931)
        None_143771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 22), 'None')
        # Applying the binary operator 'is' (line 1931)
        result_is__143772 = python_operator(stypy.reporting.localization.Localization(__file__, 1931, 17), 'is', b_143770, None_143771)
        
        
        # Getting the type of 'self' (line 1931)
        self_143773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 31), 'self')
        # Obtaining the member 'xycoords' of a type (line 1931)
        xycoords_143774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1931, 31), self_143773, 'xycoords')
        unicode_143775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1931, 48), 'unicode', u'data')
        # Applying the binary operator '==' (line 1931)
        result_eq_143776 = python_operator(stypy.reporting.localization.Localization(__file__, 1931, 31), '==', xycoords_143774, unicode_143775)
        
        # Applying the binary operator 'and' (line 1931)
        result_and_keyword_143777 = python_operator(stypy.reporting.localization.Localization(__file__, 1931, 17), 'and', result_is__143772, result_eq_143776)
        
        # Applying the binary operator 'or' (line 1931)
        result_or_keyword_143778 = python_operator(stypy.reporting.localization.Localization(__file__, 1931, 11), 'or', b_143769, result_and_keyword_143777)
        
        # Testing the type of an if condition (line 1931)
        if_condition_143779 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1931, 8), result_or_keyword_143778)
        # Assigning a type to the variable 'if_condition_143779' (line 1931)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1931, 8), 'if_condition_143779', if_condition_143779)
        # SSA begins for if statement (line 1931)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        
        # Call to contains_point(...): (line 1933)
        # Processing the call arguments (line 1933)
        # Getting the type of 'xy_pixel' (line 1933)
        xy_pixel_143783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 44), 'xy_pixel', False)
        # Processing the call keyword arguments (line 1933)
        kwargs_143784 = {}
        # Getting the type of 'self' (line 1933)
        self_143780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 19), 'self', False)
        # Obtaining the member 'axes' of a type (line 1933)
        axes_143781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1933, 19), self_143780, 'axes')
        # Obtaining the member 'contains_point' of a type (line 1933)
        contains_point_143782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1933, 19), axes_143781, 'contains_point')
        # Calling contains_point(args, kwargs) (line 1933)
        contains_point_call_result_143785 = invoke(stypy.reporting.localization.Localization(__file__, 1933, 19), contains_point_143782, *[xy_pixel_143783], **kwargs_143784)
        
        # Applying the 'not' unary operator (line 1933)
        result_not__143786 = python_operator(stypy.reporting.localization.Localization(__file__, 1933, 15), 'not', contains_point_call_result_143785)
        
        # Testing the type of an if condition (line 1933)
        if_condition_143787 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1933, 12), result_not__143786)
        # Assigning a type to the variable 'if_condition_143787' (line 1933)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1933, 12), 'if_condition_143787', if_condition_143787)
        # SSA begins for if statement (line 1933)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'False' (line 1934)
        False_143788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 23), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 1934)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1934, 16), 'stypy_return_type', False_143788)
        # SSA join for if statement (line 1933)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1931)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'True' (line 1936)
        True_143789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 15), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 1936)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1936, 8), 'stypy_return_type', True_143789)
        
        # ################# End of '_check_xy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_check_xy' in the type store
        # Getting the type of 'stypy_return_type' (line 1923)
        stypy_return_type_143790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_143790)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_check_xy'
        return stypy_return_type_143790


    @norecursion
    def draggable(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1938)
        None_143791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1938, 30), 'None')
        # Getting the type of 'False' (line 1938)
        False_143792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1938, 45), 'False')
        defaults = [None_143791, False_143792]
        # Create a new context for function 'draggable'
        module_type_store = module_type_store.open_function_context('draggable', 1938, 4, False)
        # Assigning a type to the variable 'self' (line 1939)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1939, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AnnotationBase.draggable.__dict__.__setitem__('stypy_localization', localization)
        _AnnotationBase.draggable.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AnnotationBase.draggable.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AnnotationBase.draggable.__dict__.__setitem__('stypy_function_name', '_AnnotationBase.draggable')
        _AnnotationBase.draggable.__dict__.__setitem__('stypy_param_names_list', ['state', 'use_blit'])
        _AnnotationBase.draggable.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AnnotationBase.draggable.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AnnotationBase.draggable.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AnnotationBase.draggable.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AnnotationBase.draggable.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AnnotationBase.draggable.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AnnotationBase.draggable', ['state', 'use_blit'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draggable', localization, ['state', 'use_blit'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draggable(...)' code ##################

        unicode_143793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1951, (-1)), 'unicode', u'\n        Set the draggable state -- if state is\n\n          * None : toggle the current state\n\n          * True : turn draggable on\n\n          * False : turn draggable off\n\n        If draggable is on, you can drag the annotation on the canvas with\n        the mouse.  The DraggableAnnotation helper instance is returned if\n        draggable is on.\n        ')
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1952, 8))
        
        # 'from matplotlib.offsetbox import DraggableAnnotation' statement (line 1952)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_143794 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1952, 8), 'matplotlib.offsetbox')

        if (type(import_143794) is not StypyTypeError):

            if (import_143794 != 'pyd_module'):
                __import__(import_143794)
                sys_modules_143795 = sys.modules[import_143794]
                import_from_module(stypy.reporting.localization.Localization(__file__, 1952, 8), 'matplotlib.offsetbox', sys_modules_143795.module_type_store, module_type_store, ['DraggableAnnotation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 1952, 8), __file__, sys_modules_143795, sys_modules_143795.module_type_store, module_type_store)
            else:
                from matplotlib.offsetbox import DraggableAnnotation

                import_from_module(stypy.reporting.localization.Localization(__file__, 1952, 8), 'matplotlib.offsetbox', None, module_type_store, ['DraggableAnnotation'], [DraggableAnnotation])

        else:
            # Assigning a type to the variable 'matplotlib.offsetbox' (line 1952)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1952, 8), 'matplotlib.offsetbox', import_143794)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Assigning a Compare to a Name (line 1953):
        
        # Assigning a Compare to a Name (line 1953):
        
        # Assigning a Compare to a Name (line 1953):
        
        # Getting the type of 'self' (line 1953)
        self_143796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1953, 23), 'self')
        # Obtaining the member '_draggable' of a type (line 1953)
        _draggable_143797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1953, 23), self_143796, '_draggable')
        # Getting the type of 'None' (line 1953)
        None_143798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1953, 46), 'None')
        # Applying the binary operator 'isnot' (line 1953)
        result_is_not_143799 = python_operator(stypy.reporting.localization.Localization(__file__, 1953, 23), 'isnot', _draggable_143797, None_143798)
        
        # Assigning a type to the variable 'is_draggable' (line 1953)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1953, 8), 'is_draggable', result_is_not_143799)
        
        # Type idiom detected: calculating its left and rigth part (line 1956)
        # Getting the type of 'state' (line 1956)
        state_143800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 11), 'state')
        # Getting the type of 'None' (line 1956)
        None_143801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 20), 'None')
        
        (may_be_143802, more_types_in_union_143803) = may_be_none(state_143800, None_143801)

        if may_be_143802:

            if more_types_in_union_143803:
                # Runtime conditional SSA (line 1956)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a UnaryOp to a Name (line 1957):
            
            # Assigning a UnaryOp to a Name (line 1957):
            
            # Assigning a UnaryOp to a Name (line 1957):
            
            # Getting the type of 'is_draggable' (line 1957)
            is_draggable_143804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1957, 24), 'is_draggable')
            # Applying the 'not' unary operator (line 1957)
            result_not__143805 = python_operator(stypy.reporting.localization.Localization(__file__, 1957, 20), 'not', is_draggable_143804)
            
            # Assigning a type to the variable 'state' (line 1957)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1957, 12), 'state', result_not__143805)

            if more_types_in_union_143803:
                # SSA join for if statement (line 1956)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Getting the type of 'state' (line 1959)
        state_143806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1959, 11), 'state')
        # Testing the type of an if condition (line 1959)
        if_condition_143807 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1959, 8), state_143806)
        # Assigning a type to the variable 'if_condition_143807' (line 1959)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1959, 8), 'if_condition_143807', if_condition_143807)
        # SSA begins for if statement (line 1959)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Type idiom detected: calculating its left and rigth part (line 1960)
        # Getting the type of 'self' (line 1960)
        self_143808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1960, 15), 'self')
        # Obtaining the member '_draggable' of a type (line 1960)
        _draggable_143809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1960, 15), self_143808, '_draggable')
        # Getting the type of 'None' (line 1960)
        None_143810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1960, 34), 'None')
        
        (may_be_143811, more_types_in_union_143812) = may_be_none(_draggable_143809, None_143810)

        if may_be_143811:

            if more_types_in_union_143812:
                # Runtime conditional SSA (line 1960)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Attribute (line 1961):
            
            # Assigning a Call to a Attribute (line 1961):
            
            # Assigning a Call to a Attribute (line 1961):
            
            # Call to DraggableAnnotation(...): (line 1961)
            # Processing the call arguments (line 1961)
            # Getting the type of 'self' (line 1961)
            self_143814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1961, 54), 'self', False)
            # Getting the type of 'use_blit' (line 1961)
            use_blit_143815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1961, 60), 'use_blit', False)
            # Processing the call keyword arguments (line 1961)
            kwargs_143816 = {}
            # Getting the type of 'DraggableAnnotation' (line 1961)
            DraggableAnnotation_143813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1961, 34), 'DraggableAnnotation', False)
            # Calling DraggableAnnotation(args, kwargs) (line 1961)
            DraggableAnnotation_call_result_143817 = invoke(stypy.reporting.localization.Localization(__file__, 1961, 34), DraggableAnnotation_143813, *[self_143814, use_blit_143815], **kwargs_143816)
            
            # Getting the type of 'self' (line 1961)
            self_143818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1961, 16), 'self')
            # Setting the type of the member '_draggable' of a type (line 1961)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1961, 16), self_143818, '_draggable', DraggableAnnotation_call_result_143817)

            if more_types_in_union_143812:
                # SSA join for if statement (line 1960)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA branch for the else part of an if statement (line 1959)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'self' (line 1963)
        self_143819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 15), 'self')
        # Obtaining the member '_draggable' of a type (line 1963)
        _draggable_143820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1963, 15), self_143819, '_draggable')
        # Getting the type of 'None' (line 1963)
        None_143821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 38), 'None')
        # Applying the binary operator 'isnot' (line 1963)
        result_is_not_143822 = python_operator(stypy.reporting.localization.Localization(__file__, 1963, 15), 'isnot', _draggable_143820, None_143821)
        
        # Testing the type of an if condition (line 1963)
        if_condition_143823 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1963, 12), result_is_not_143822)
        # Assigning a type to the variable 'if_condition_143823' (line 1963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1963, 12), 'if_condition_143823', if_condition_143823)
        # SSA begins for if statement (line 1963)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to disconnect(...): (line 1964)
        # Processing the call keyword arguments (line 1964)
        kwargs_143827 = {}
        # Getting the type of 'self' (line 1964)
        self_143824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1964, 16), 'self', False)
        # Obtaining the member '_draggable' of a type (line 1964)
        _draggable_143825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1964, 16), self_143824, '_draggable')
        # Obtaining the member 'disconnect' of a type (line 1964)
        disconnect_143826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1964, 16), _draggable_143825, 'disconnect')
        # Calling disconnect(args, kwargs) (line 1964)
        disconnect_call_result_143828 = invoke(stypy.reporting.localization.Localization(__file__, 1964, 16), disconnect_143826, *[], **kwargs_143827)
        
        # SSA join for if statement (line 1963)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1965):
        
        # Assigning a Name to a Attribute (line 1965):
        
        # Assigning a Name to a Attribute (line 1965):
        # Getting the type of 'None' (line 1965)
        None_143829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1965, 30), 'None')
        # Getting the type of 'self' (line 1965)
        self_143830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1965, 12), 'self')
        # Setting the type of the member '_draggable' of a type (line 1965)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1965, 12), self_143830, '_draggable', None_143829)
        # SSA join for if statement (line 1959)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'self' (line 1967)
        self_143831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1967, 15), 'self')
        # Obtaining the member '_draggable' of a type (line 1967)
        _draggable_143832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1967, 15), self_143831, '_draggable')
        # Assigning a type to the variable 'stypy_return_type' (line 1967)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1967, 8), 'stypy_return_type', _draggable_143832)
        
        # ################# End of 'draggable(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draggable' in the type store
        # Getting the type of 'stypy_return_type' (line 1938)
        stypy_return_type_143833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1938, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_143833)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draggable'
        return stypy_return_type_143833


# Assigning a type to the variable '_AnnotationBase' (line 1754)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1754, 0), '_AnnotationBase', _AnnotationBase)
# Declaration of the 'Annotation' class
# Getting the type of 'Text' (line 1970)
Text_143834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 17), 'Text')
# Getting the type of '_AnnotationBase' (line 1970)
_AnnotationBase_143835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 23), '_AnnotationBase')

class Annotation(Text_143834, _AnnotationBase_143835, ):

    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 1971, 4, False)
        # Assigning a type to the variable 'self' (line 1972)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1972, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Annotation.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        Annotation.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Annotation.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Annotation.stypy__str__.__dict__.__setitem__('stypy_function_name', 'Annotation.stypy__str__')
        Annotation.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        Annotation.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Annotation.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Annotation.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Annotation.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Annotation.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Annotation.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Annotation.stypy__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        unicode_143836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1972, 15), 'unicode', u'Annotation(%g,%g,%s)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1972)
        tuple_143837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1972, 41), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1972)
        # Adding element type (line 1972)
        
        # Obtaining the type of the subscript
        int_143838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1972, 49), 'int')
        # Getting the type of 'self' (line 1972)
        self_143839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 41), 'self')
        # Obtaining the member 'xy' of a type (line 1972)
        xy_143840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1972, 41), self_143839, 'xy')
        # Obtaining the member '__getitem__' of a type (line 1972)
        getitem___143841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1972, 41), xy_143840, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1972)
        subscript_call_result_143842 = invoke(stypy.reporting.localization.Localization(__file__, 1972, 41), getitem___143841, int_143838)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1972, 41), tuple_143837, subscript_call_result_143842)
        # Adding element type (line 1972)
        
        # Obtaining the type of the subscript
        int_143843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1973, 49), 'int')
        # Getting the type of 'self' (line 1973)
        self_143844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 41), 'self')
        # Obtaining the member 'xy' of a type (line 1973)
        xy_143845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1973, 41), self_143844, 'xy')
        # Obtaining the member '__getitem__' of a type (line 1973)
        getitem___143846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1973, 41), xy_143845, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1973)
        subscript_call_result_143847 = invoke(stypy.reporting.localization.Localization(__file__, 1973, 41), getitem___143846, int_143843)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1972, 41), tuple_143837, subscript_call_result_143847)
        # Adding element type (line 1972)
        
        # Call to repr(...): (line 1974)
        # Processing the call arguments (line 1974)
        # Getting the type of 'self' (line 1974)
        self_143849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 46), 'self', False)
        # Obtaining the member '_text' of a type (line 1974)
        _text_143850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1974, 46), self_143849, '_text')
        # Processing the call keyword arguments (line 1974)
        kwargs_143851 = {}
        # Getting the type of 'repr' (line 1974)
        repr_143848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 41), 'repr', False)
        # Calling repr(args, kwargs) (line 1974)
        repr_call_result_143852 = invoke(stypy.reporting.localization.Localization(__file__, 1974, 41), repr_143848, *[_text_143850], **kwargs_143851)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1972, 41), tuple_143837, repr_call_result_143852)
        
        # Applying the binary operator '%' (line 1972)
        result_mod_143853 = python_operator(stypy.reporting.localization.Localization(__file__, 1972, 15), '%', unicode_143836, tuple_143837)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1972)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1972, 8), 'stypy_return_type', result_mod_143853)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 1971)
        stypy_return_type_143854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1971, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_143854)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_143854


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1978)
        None_143855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1978, 24), 'None')
        unicode_143856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1979, 26), 'unicode', u'data')
        # Getting the type of 'None' (line 1980)
        None_143857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1980, 28), 'None')
        # Getting the type of 'None' (line 1981)
        None_143858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1981, 28), 'None')
        # Getting the type of 'None' (line 1982)
        None_143859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1982, 33), 'None')
        defaults = [None_143855, unicode_143856, None_143857, None_143858, None_143859]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1976, 4, False)
        # Assigning a type to the variable 'self' (line 1977)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1977, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Annotation.__init__', ['s', 'xy', 'xytext', 'xycoords', 'textcoords', 'arrowprops', 'annotation_clip'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['s', 'xy', 'xytext', 'xycoords', 'textcoords', 'arrowprops', 'annotation_clip'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_143860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2131, (-1)), 'unicode', u'\n        Annotate the point ``xy`` with text ``s``.\n\n        Additional kwargs are passed to `~matplotlib.text.Text`.\n\n        Parameters\n        ----------\n\n        s : str\n            The text of the annotation\n\n        xy : iterable\n            Length 2 sequence specifying the *(x,y)* point to annotate\n\n        xytext : iterable, optional\n            Length 2 sequence specifying the *(x,y)* to place the text\n            at.  If None, defaults to ``xy``.\n\n        xycoords : str, Artist, Transform, callable or tuple, optional\n\n            The coordinate system that ``xy`` is given in.\n\n            For a `str` the allowed values are:\n\n            =================   ===============================================\n            Property            Description\n            =================   ===============================================\n            \'figure points\'     points from the lower left of the figure\n            \'figure pixels\'     pixels from the lower left of the figure\n            \'figure fraction\'   fraction of figure from lower left\n            \'axes points\'       points from lower left corner of axes\n            \'axes pixels\'       pixels from lower left corner of axes\n            \'axes fraction\'     fraction of axes from lower left\n            \'data\'              use the coordinate system of the object being\n                                annotated (default)\n            \'polar\'             *(theta,r)* if not native \'data\' coordinates\n            =================   ===============================================\n\n            If a `~matplotlib.artist.Artist` object is passed in the units are\n            fraction if it\'s bounding box.\n\n            If a `~matplotlib.transforms.Transform` object is passed\n            in use that to transform ``xy`` to screen coordinates\n\n            If a callable it must take a\n            `~matplotlib.backend_bases.RendererBase` object as input\n            and return a `~matplotlib.transforms.Transform` or\n            `~matplotlib.transforms.Bbox` object\n\n            If a `tuple` must be length 2 tuple of str, `Artist`,\n            `Transform` or callable objects.  The first transform is\n            used for the *x* coordinate and the second for *y*.\n\n            See :ref:`plotting-guide-annotation` for more details.\n\n            Defaults to ``\'data\'``\n\n        textcoords : str, `Artist`, `Transform`, callable or tuple, optional\n            The coordinate system that ``xytext`` is given, which\n            may be different than the coordinate system used for\n            ``xy``.\n\n            All ``xycoords`` values are valid as well as the following\n            strings:\n\n            =================   =========================================\n            Property            Description\n            =================   =========================================\n            \'offset points\'     offset (in points) from the *xy* value\n            \'offset pixels\'     offset (in pixels) from the *xy* value\n            =================   =========================================\n\n            defaults to the input of ``xycoords``\n\n        arrowprops : dict, optional\n            If not None, properties used to draw a\n            `~matplotlib.patches.FancyArrowPatch` arrow between ``xy`` and\n            ``xytext``.\n\n            If `arrowprops` does not contain the key ``\'arrowstyle\'`` the\n            allowed keys are:\n\n            ==========   ======================================================\n            Key          Description\n            ==========   ======================================================\n            width        the width of the arrow in points\n            headwidth    the width of the base of the arrow head in points\n            headlength   the length of the arrow head in points\n            shrink       fraction of total length to \'shrink\' from both ends\n            ?            any key to :class:`matplotlib.patches.FancyArrowPatch`\n            ==========   ======================================================\n\n            If the `arrowprops` contains the key ``\'arrowstyle\'`` the\n            above keys are forbidden.  The allowed values of\n            ``\'arrowstyle\'`` are:\n\n            ============   =============================================\n            Name           Attrs\n            ============   =============================================\n            ``\'-\'``        None\n            ``\'->\'``       head_length=0.4,head_width=0.2\n            ``\'-[\'``       widthB=1.0,lengthB=0.2,angleB=None\n            ``\'|-|\'``      widthA=1.0,widthB=1.0\n            ``\'-|>\'``      head_length=0.4,head_width=0.2\n            ``\'<-\'``       head_length=0.4,head_width=0.2\n            ``\'<->\'``      head_length=0.4,head_width=0.2\n            ``\'<|-\'``      head_length=0.4,head_width=0.2\n            ``\'<|-|>\'``    head_length=0.4,head_width=0.2\n            ``\'fancy\'``    head_length=0.4,head_width=0.4,tail_width=0.4\n            ``\'simple\'``   head_length=0.5,head_width=0.5,tail_width=0.2\n            ``\'wedge\'``    tail_width=0.3,shrink_factor=0.5\n            ============   =============================================\n\n            Valid keys for `~matplotlib.patches.FancyArrowPatch` are:\n\n            ===============  ==================================================\n            Key              Description\n            ===============  ==================================================\n            arrowstyle       the arrow style\n            connectionstyle  the connection style\n            relpos           default is (0.5, 0.5)\n            patchA           default is bounding box of the text\n            patchB           default is None\n            shrinkA          default is 2 points\n            shrinkB          default is 2 points\n            mutation_scale   default is text size (in points)\n            mutation_aspect  default is 1.\n            ?                any key for :class:`matplotlib.patches.PathPatch`\n            ===============  ==================================================\n\n            Defaults to None\n\n        annotation_clip : bool, optional\n            Controls the visibility of the annotation when it goes\n            outside the axes area.\n\n            If `True`, the annotation will only be drawn when the\n            ``xy`` is inside the axes. If `False`, the annotation will\n            always be drawn regardless of its position.\n\n            The default is `None`, which behave as `True` only if\n            *xycoords* is "data".\n\n        Returns\n        -------\n        Annotation\n\n        ')
        
        # Call to __init__(...): (line 2133)
        # Processing the call arguments (line 2133)
        # Getting the type of 'self' (line 2133)
        self_143863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2133, 33), 'self', False)
        # Getting the type of 'xy' (line 2134)
        xy_143864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 33), 'xy', False)
        # Processing the call keyword arguments (line 2133)
        # Getting the type of 'xycoords' (line 2135)
        xycoords_143865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2135, 42), 'xycoords', False)
        keyword_143866 = xycoords_143865
        # Getting the type of 'annotation_clip' (line 2136)
        annotation_clip_143867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2136, 49), 'annotation_clip', False)
        keyword_143868 = annotation_clip_143867
        kwargs_143869 = {'xycoords': keyword_143866, 'annotation_clip': keyword_143868}
        # Getting the type of '_AnnotationBase' (line 2133)
        _AnnotationBase_143861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2133, 8), '_AnnotationBase', False)
        # Obtaining the member '__init__' of a type (line 2133)
        init___143862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2133, 8), _AnnotationBase_143861, '__init__')
        # Calling __init__(args, kwargs) (line 2133)
        init___call_result_143870 = invoke(stypy.reporting.localization.Localization(__file__, 2133, 8), init___143862, *[self_143863, xy_143864], **kwargs_143869)
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'xytext' (line 2138)
        xytext_143871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2138, 12), 'xytext')
        # Getting the type of 'None' (line 2138)
        None_143872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2138, 22), 'None')
        # Applying the binary operator 'is' (line 2138)
        result_is__143873 = python_operator(stypy.reporting.localization.Localization(__file__, 2138, 12), 'is', xytext_143871, None_143872)
        
        
        # Getting the type of 'textcoords' (line 2139)
        textcoords_143874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2139, 16), 'textcoords')
        # Getting the type of 'None' (line 2139)
        None_143875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2139, 34), 'None')
        # Applying the binary operator 'isnot' (line 2139)
        result_is_not_143876 = python_operator(stypy.reporting.localization.Localization(__file__, 2139, 16), 'isnot', textcoords_143874, None_143875)
        
        # Applying the binary operator 'and' (line 2138)
        result_and_keyword_143877 = python_operator(stypy.reporting.localization.Localization(__file__, 2138, 12), 'and', result_is__143873, result_is_not_143876)
        
        # Getting the type of 'textcoords' (line 2140)
        textcoords_143878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2140, 16), 'textcoords')
        # Getting the type of 'xycoords' (line 2140)
        xycoords_143879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2140, 30), 'xycoords')
        # Applying the binary operator '!=' (line 2140)
        result_ne_143880 = python_operator(stypy.reporting.localization.Localization(__file__, 2140, 16), '!=', textcoords_143878, xycoords_143879)
        
        # Applying the binary operator 'and' (line 2138)
        result_and_keyword_143881 = python_operator(stypy.reporting.localization.Localization(__file__, 2138, 12), 'and', result_and_keyword_143877, result_ne_143880)
        
        # Testing the type of an if condition (line 2138)
        if_condition_143882 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2138, 8), result_and_keyword_143881)
        # Assigning a type to the variable 'if_condition_143882' (line 2138)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2138, 8), 'if_condition_143882', if_condition_143882)
        # SSA begins for if statement (line 2138)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 2141)
        # Processing the call arguments (line 2141)
        unicode_143885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2141, 26), 'unicode', u'You have used the `textcoords` kwarg, but not the `xytext` kwarg.  This can lead to surprising results.')
        # Processing the call keyword arguments (line 2141)
        kwargs_143886 = {}
        # Getting the type of 'warnings' (line 2141)
        warnings_143883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2141, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 2141)
        warn_143884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2141, 12), warnings_143883, 'warn')
        # Calling warn(args, kwargs) (line 2141)
        warn_call_result_143887 = invoke(stypy.reporting.localization.Localization(__file__, 2141, 12), warn_143884, *[unicode_143885], **kwargs_143886)
        
        # SSA join for if statement (line 2138)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 2146)
        # Getting the type of 'textcoords' (line 2146)
        textcoords_143888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2146, 11), 'textcoords')
        # Getting the type of 'None' (line 2146)
        None_143889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2146, 25), 'None')
        
        (may_be_143890, more_types_in_union_143891) = may_be_none(textcoords_143888, None_143889)

        if may_be_143890:

            if more_types_in_union_143891:
                # Runtime conditional SSA (line 2146)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 2147):
            
            # Assigning a Attribute to a Name (line 2147):
            
            # Assigning a Attribute to a Name (line 2147):
            # Getting the type of 'self' (line 2147)
            self_143892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2147, 25), 'self')
            # Obtaining the member 'xycoords' of a type (line 2147)
            xycoords_143893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2147, 25), self_143892, 'xycoords')
            # Assigning a type to the variable 'textcoords' (line 2147)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2147, 12), 'textcoords', xycoords_143893)

            if more_types_in_union_143891:
                # SSA join for if statement (line 2146)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 2148):
        
        # Assigning a Name to a Attribute (line 2148):
        
        # Assigning a Name to a Attribute (line 2148):
        # Getting the type of 'textcoords' (line 2148)
        textcoords_143894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2148, 27), 'textcoords')
        # Getting the type of 'self' (line 2148)
        self_143895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2148, 8), 'self')
        # Setting the type of the member '_textcoords' of a type (line 2148)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2148, 8), self_143895, '_textcoords', textcoords_143894)
        
        # Type idiom detected: calculating its left and rigth part (line 2151)
        # Getting the type of 'xytext' (line 2151)
        xytext_143896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2151, 11), 'xytext')
        # Getting the type of 'None' (line 2151)
        None_143897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2151, 21), 'None')
        
        (may_be_143898, more_types_in_union_143899) = may_be_none(xytext_143896, None_143897)

        if may_be_143898:

            if more_types_in_union_143899:
                # Runtime conditional SSA (line 2151)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 2152):
            
            # Assigning a Attribute to a Name (line 2152):
            
            # Assigning a Attribute to a Name (line 2152):
            # Getting the type of 'self' (line 2152)
            self_143900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2152, 21), 'self')
            # Obtaining the member 'xy' of a type (line 2152)
            xy_143901 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2152, 21), self_143900, 'xy')
            # Assigning a type to the variable 'xytext' (line 2152)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2152, 12), 'xytext', xy_143901)

            if more_types_in_union_143899:
                # SSA join for if statement (line 2151)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Tuple (line 2153):
        
        # Assigning a Subscript to a Name (line 2153):
        
        # Assigning a Subscript to a Name (line 2153):
        
        # Obtaining the type of the subscript
        int_143902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2153, 8), 'int')
        # Getting the type of 'xytext' (line 2153)
        xytext_143903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2153, 15), 'xytext')
        # Obtaining the member '__getitem__' of a type (line 2153)
        getitem___143904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2153, 8), xytext_143903, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2153)
        subscript_call_result_143905 = invoke(stypy.reporting.localization.Localization(__file__, 2153, 8), getitem___143904, int_143902)
        
        # Assigning a type to the variable 'tuple_var_assignment_139185' (line 2153)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2153, 8), 'tuple_var_assignment_139185', subscript_call_result_143905)
        
        # Assigning a Subscript to a Name (line 2153):
        
        # Assigning a Subscript to a Name (line 2153):
        
        # Obtaining the type of the subscript
        int_143906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2153, 8), 'int')
        # Getting the type of 'xytext' (line 2153)
        xytext_143907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2153, 15), 'xytext')
        # Obtaining the member '__getitem__' of a type (line 2153)
        getitem___143908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2153, 8), xytext_143907, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2153)
        subscript_call_result_143909 = invoke(stypy.reporting.localization.Localization(__file__, 2153, 8), getitem___143908, int_143906)
        
        # Assigning a type to the variable 'tuple_var_assignment_139186' (line 2153)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2153, 8), 'tuple_var_assignment_139186', subscript_call_result_143909)
        
        # Assigning a Name to a Name (line 2153):
        
        # Assigning a Name to a Name (line 2153):
        # Getting the type of 'tuple_var_assignment_139185' (line 2153)
        tuple_var_assignment_139185_143910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2153, 8), 'tuple_var_assignment_139185')
        # Assigning a type to the variable 'x' (line 2153)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2153, 8), 'x', tuple_var_assignment_139185_143910)
        
        # Assigning a Name to a Name (line 2153):
        
        # Assigning a Name to a Name (line 2153):
        # Getting the type of 'tuple_var_assignment_139186' (line 2153)
        tuple_var_assignment_139186_143911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2153, 8), 'tuple_var_assignment_139186')
        # Assigning a type to the variable 'y' (line 2153)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2153, 11), 'y', tuple_var_assignment_139186_143911)
        
        # Call to __init__(...): (line 2155)
        # Processing the call arguments (line 2155)
        # Getting the type of 'self' (line 2155)
        self_143914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2155, 22), 'self', False)
        # Getting the type of 'x' (line 2155)
        x_143915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2155, 28), 'x', False)
        # Getting the type of 'y' (line 2155)
        y_143916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2155, 31), 'y', False)
        # Getting the type of 's' (line 2155)
        s_143917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2155, 34), 's', False)
        # Processing the call keyword arguments (line 2155)
        # Getting the type of 'kwargs' (line 2155)
        kwargs_143918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2155, 39), 'kwargs', False)
        kwargs_143919 = {'kwargs_143918': kwargs_143918}
        # Getting the type of 'Text' (line 2155)
        Text_143912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2155, 8), 'Text', False)
        # Obtaining the member '__init__' of a type (line 2155)
        init___143913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2155, 8), Text_143912, '__init__')
        # Calling __init__(args, kwargs) (line 2155)
        init___call_result_143920 = invoke(stypy.reporting.localization.Localization(__file__, 2155, 8), init___143913, *[self_143914, x_143915, y_143916, s_143917], **kwargs_143919)
        
        
        # Assigning a Name to a Attribute (line 2157):
        
        # Assigning a Name to a Attribute (line 2157):
        
        # Assigning a Name to a Attribute (line 2157):
        # Getting the type of 'arrowprops' (line 2157)
        arrowprops_143921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2157, 26), 'arrowprops')
        # Getting the type of 'self' (line 2157)
        self_143922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2157, 8), 'self')
        # Setting the type of the member 'arrowprops' of a type (line 2157)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2157, 8), self_143922, 'arrowprops', arrowprops_143921)
        
        # Assigning a Name to a Attribute (line 2159):
        
        # Assigning a Name to a Attribute (line 2159):
        
        # Assigning a Name to a Attribute (line 2159):
        # Getting the type of 'None' (line 2159)
        None_143923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2159, 21), 'None')
        # Getting the type of 'self' (line 2159)
        self_143924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2159, 8), 'self')
        # Setting the type of the member 'arrow' of a type (line 2159)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2159, 8), self_143924, 'arrow', None_143923)
        
        # Type idiom detected: calculating its left and rigth part (line 2161)
        # Getting the type of 'arrowprops' (line 2161)
        arrowprops_143925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2161, 8), 'arrowprops')
        # Getting the type of 'None' (line 2161)
        None_143926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2161, 29), 'None')
        
        (may_be_143927, more_types_in_union_143928) = may_not_be_none(arrowprops_143925, None_143926)

        if may_be_143927:

            if more_types_in_union_143928:
                # Runtime conditional SSA (line 2161)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            unicode_143929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2162, 15), 'unicode', u'arrowstyle')
            # Getting the type of 'arrowprops' (line 2162)
            arrowprops_143930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2162, 31), 'arrowprops')
            # Applying the binary operator 'in' (line 2162)
            result_contains_143931 = python_operator(stypy.reporting.localization.Localization(__file__, 2162, 15), 'in', unicode_143929, arrowprops_143930)
            
            # Testing the type of an if condition (line 2162)
            if_condition_143932 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2162, 12), result_contains_143931)
            # Assigning a type to the variable 'if_condition_143932' (line 2162)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2162, 12), 'if_condition_143932', if_condition_143932)
            # SSA begins for if statement (line 2162)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 2163):
            
            # Assigning a Call to a Name (line 2163):
            
            # Assigning a Call to a Name (line 2163):
            
            # Call to copy(...): (line 2163)
            # Processing the call keyword arguments (line 2163)
            kwargs_143936 = {}
            # Getting the type of 'self' (line 2163)
            self_143933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2163, 29), 'self', False)
            # Obtaining the member 'arrowprops' of a type (line 2163)
            arrowprops_143934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2163, 29), self_143933, 'arrowprops')
            # Obtaining the member 'copy' of a type (line 2163)
            copy_143935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2163, 29), arrowprops_143934, 'copy')
            # Calling copy(args, kwargs) (line 2163)
            copy_call_result_143937 = invoke(stypy.reporting.localization.Localization(__file__, 2163, 29), copy_143935, *[], **kwargs_143936)
            
            # Assigning a type to the variable 'arrowprops' (line 2163)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2163, 16), 'arrowprops', copy_call_result_143937)
            
            # Assigning a Call to a Attribute (line 2164):
            
            # Assigning a Call to a Attribute (line 2164):
            
            # Assigning a Call to a Attribute (line 2164):
            
            # Call to pop(...): (line 2164)
            # Processing the call arguments (line 2164)
            unicode_143940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2164, 52), 'unicode', u'relpos')
            
            # Obtaining an instance of the builtin type 'tuple' (line 2164)
            tuple_143941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2164, 63), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2164)
            # Adding element type (line 2164)
            float_143942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2164, 63), 'float')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2164, 63), tuple_143941, float_143942)
            # Adding element type (line 2164)
            float_143943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2164, 68), 'float')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2164, 63), tuple_143941, float_143943)
            
            # Processing the call keyword arguments (line 2164)
            kwargs_143944 = {}
            # Getting the type of 'arrowprops' (line 2164)
            arrowprops_143938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2164, 37), 'arrowprops', False)
            # Obtaining the member 'pop' of a type (line 2164)
            pop_143939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2164, 37), arrowprops_143938, 'pop')
            # Calling pop(args, kwargs) (line 2164)
            pop_call_result_143945 = invoke(stypy.reporting.localization.Localization(__file__, 2164, 37), pop_143939, *[unicode_143940, tuple_143941], **kwargs_143944)
            
            # Getting the type of 'self' (line 2164)
            self_143946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2164, 16), 'self')
            # Setting the type of the member '_arrow_relpos' of a type (line 2164)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2164, 16), self_143946, '_arrow_relpos', pop_call_result_143945)
            # SSA branch for the else part of an if statement (line 2162)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Tuple to a Name (line 2167):
            
            # Assigning a Tuple to a Name (line 2167):
            
            # Assigning a Tuple to a Name (line 2167):
            
            # Obtaining an instance of the builtin type 'tuple' (line 2167)
            tuple_143947 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2167, 29), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2167)
            # Adding element type (line 2167)
            unicode_143948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2167, 29), 'unicode', u'width')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2167, 29), tuple_143947, unicode_143948)
            # Adding element type (line 2167)
            unicode_143949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2167, 38), 'unicode', u'headwidth')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2167, 29), tuple_143947, unicode_143949)
            # Adding element type (line 2167)
            unicode_143950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2167, 51), 'unicode', u'headlength')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2167, 29), tuple_143947, unicode_143950)
            # Adding element type (line 2167)
            unicode_143951 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2168, 29), 'unicode', u'shrink')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2167, 29), tuple_143947, unicode_143951)
            # Adding element type (line 2167)
            unicode_143952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2168, 39), 'unicode', u'frac')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2167, 29), tuple_143947, unicode_143952)
            
            # Assigning a type to the variable 'shapekeys' (line 2167)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2167, 16), 'shapekeys', tuple_143947)
            
            # Assigning a Call to a Name (line 2169):
            
            # Assigning a Call to a Name (line 2169):
            
            # Assigning a Call to a Name (line 2169):
            
            # Call to dict(...): (line 2169)
            # Processing the call keyword arguments (line 2169)
            kwargs_143954 = {}
            # Getting the type of 'dict' (line 2169)
            dict_143953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 29), 'dict', False)
            # Calling dict(args, kwargs) (line 2169)
            dict_call_result_143955 = invoke(stypy.reporting.localization.Localization(__file__, 2169, 29), dict_143953, *[], **kwargs_143954)
            
            # Assigning a type to the variable 'arrowprops' (line 2169)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2169, 16), 'arrowprops', dict_call_result_143955)
            
            
            # Call to items(...): (line 2170)
            # Processing the call keyword arguments (line 2170)
            kwargs_143959 = {}
            # Getting the type of 'self' (line 2170)
            self_143956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2170, 32), 'self', False)
            # Obtaining the member 'arrowprops' of a type (line 2170)
            arrowprops_143957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2170, 32), self_143956, 'arrowprops')
            # Obtaining the member 'items' of a type (line 2170)
            items_143958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2170, 32), arrowprops_143957, 'items')
            # Calling items(args, kwargs) (line 2170)
            items_call_result_143960 = invoke(stypy.reporting.localization.Localization(__file__, 2170, 32), items_143958, *[], **kwargs_143959)
            
            # Testing the type of a for loop iterable (line 2170)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2170, 16), items_call_result_143960)
            # Getting the type of the for loop variable (line 2170)
            for_loop_var_143961 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2170, 16), items_call_result_143960)
            # Assigning a type to the variable 'key' (line 2170)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2170, 16), 'key', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2170, 16), for_loop_var_143961))
            # Assigning a type to the variable 'val' (line 2170)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2170, 16), 'val', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2170, 16), for_loop_var_143961))
            # SSA begins for a for statement (line 2170)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            
            # Getting the type of 'key' (line 2171)
            key_143962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2171, 23), 'key')
            # Getting the type of 'shapekeys' (line 2171)
            shapekeys_143963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2171, 34), 'shapekeys')
            # Applying the binary operator 'notin' (line 2171)
            result_contains_143964 = python_operator(stypy.reporting.localization.Localization(__file__, 2171, 23), 'notin', key_143962, shapekeys_143963)
            
            # Testing the type of an if condition (line 2171)
            if_condition_143965 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2171, 20), result_contains_143964)
            # Assigning a type to the variable 'if_condition_143965' (line 2171)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2171, 20), 'if_condition_143965', if_condition_143965)
            # SSA begins for if statement (line 2171)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Subscript (line 2172):
            
            # Assigning a Name to a Subscript (line 2172):
            
            # Assigning a Name to a Subscript (line 2172):
            # Getting the type of 'val' (line 2172)
            val_143966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2172, 42), 'val')
            # Getting the type of 'arrowprops' (line 2172)
            arrowprops_143967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2172, 24), 'arrowprops')
            # Getting the type of 'key' (line 2172)
            key_143968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2172, 35), 'key')
            # Storing an element on a container (line 2172)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2172, 24), arrowprops_143967, (key_143968, val_143966))
            # SSA join for if statement (line 2171)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 2162)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Attribute (line 2173):
            
            # Assigning a Call to a Attribute (line 2173):
            
            # Assigning a Call to a Attribute (line 2173):
            
            # Call to FancyArrowPatch(...): (line 2173)
            # Processing the call arguments (line 2173)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2173)
            tuple_143970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2173, 48), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2173)
            # Adding element type (line 2173)
            int_143971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2173, 48), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2173, 48), tuple_143970, int_143971)
            # Adding element type (line 2173)
            int_143972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2173, 51), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2173, 48), tuple_143970, int_143972)
            
            
            # Obtaining an instance of the builtin type 'tuple' (line 2173)
            tuple_143973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2173, 56), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2173)
            # Adding element type (line 2173)
            int_143974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2173, 56), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2173, 56), tuple_143973, int_143974)
            # Adding element type (line 2173)
            int_143975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2173, 59), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2173, 56), tuple_143973, int_143975)
            
            # Processing the call keyword arguments (line 2173)
            # Getting the type of 'arrowprops' (line 2174)
            arrowprops_143976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2174, 49), 'arrowprops', False)
            kwargs_143977 = {'arrowprops_143976': arrowprops_143976}
            # Getting the type of 'FancyArrowPatch' (line 2173)
            FancyArrowPatch_143969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2173, 31), 'FancyArrowPatch', False)
            # Calling FancyArrowPatch(args, kwargs) (line 2173)
            FancyArrowPatch_call_result_143978 = invoke(stypy.reporting.localization.Localization(__file__, 2173, 31), FancyArrowPatch_143969, *[tuple_143970, tuple_143973], **kwargs_143977)
            
            # Getting the type of 'self' (line 2173)
            self_143979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2173, 12), 'self')
            # Setting the type of the member 'arrow_patch' of a type (line 2173)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2173, 12), self_143979, 'arrow_patch', FancyArrowPatch_call_result_143978)

            if more_types_in_union_143928:
                # Runtime conditional SSA for else branch (line 2161)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_143927) or more_types_in_union_143928):
            
            # Assigning a Name to a Attribute (line 2176):
            
            # Assigning a Name to a Attribute (line 2176):
            
            # Assigning a Name to a Attribute (line 2176):
            # Getting the type of 'None' (line 2176)
            None_143980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 31), 'None')
            # Getting the type of 'self' (line 2176)
            self_143981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 12), 'self')
            # Setting the type of the member 'arrow_patch' of a type (line 2176)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2176, 12), self_143981, 'arrow_patch', None_143980)

            if (may_be_143927 and more_types_in_union_143928):
                # SSA join for if statement (line 2161)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def contains(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'contains'
        module_type_store = module_type_store.open_function_context('contains', 2178, 4, False)
        # Assigning a type to the variable 'self' (line 2179)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2179, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Annotation.contains.__dict__.__setitem__('stypy_localization', localization)
        Annotation.contains.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Annotation.contains.__dict__.__setitem__('stypy_type_store', module_type_store)
        Annotation.contains.__dict__.__setitem__('stypy_function_name', 'Annotation.contains')
        Annotation.contains.__dict__.__setitem__('stypy_param_names_list', ['event'])
        Annotation.contains.__dict__.__setitem__('stypy_varargs_param_name', None)
        Annotation.contains.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Annotation.contains.__dict__.__setitem__('stypy_call_defaults', defaults)
        Annotation.contains.__dict__.__setitem__('stypy_call_varargs', varargs)
        Annotation.contains.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Annotation.contains.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Annotation.contains', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'contains', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'contains(...)' code ##################

        
        # Assigning a Call to a Tuple (line 2179):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to contains(...): (line 2179)
        # Processing the call arguments (line 2179)
        # Getting the type of 'self' (line 2179)
        self_143984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2179, 40), 'self', False)
        # Getting the type of 'event' (line 2179)
        event_143985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2179, 46), 'event', False)
        # Processing the call keyword arguments (line 2179)
        kwargs_143986 = {}
        # Getting the type of 'Text' (line 2179)
        Text_143982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2179, 26), 'Text', False)
        # Obtaining the member 'contains' of a type (line 2179)
        contains_143983 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2179, 26), Text_143982, 'contains')
        # Calling contains(args, kwargs) (line 2179)
        contains_call_result_143987 = invoke(stypy.reporting.localization.Localization(__file__, 2179, 26), contains_143983, *[self_143984, event_143985], **kwargs_143986)
        
        # Assigning a type to the variable 'call_assignment_139187' (line 2179)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2179, 8), 'call_assignment_139187', contains_call_result_143987)
        
        # Assigning a Call to a Name (line 2179):
        
        # Assigning a Call to a Name (line 2179):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_143990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2179, 8), 'int')
        # Processing the call keyword arguments
        kwargs_143991 = {}
        # Getting the type of 'call_assignment_139187' (line 2179)
        call_assignment_139187_143988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2179, 8), 'call_assignment_139187', False)
        # Obtaining the member '__getitem__' of a type (line 2179)
        getitem___143989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2179, 8), call_assignment_139187_143988, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_143992 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___143989, *[int_143990], **kwargs_143991)
        
        # Assigning a type to the variable 'call_assignment_139188' (line 2179)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2179, 8), 'call_assignment_139188', getitem___call_result_143992)
        
        # Assigning a Name to a Name (line 2179):
        
        # Assigning a Name to a Name (line 2179):
        # Getting the type of 'call_assignment_139188' (line 2179)
        call_assignment_139188_143993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2179, 8), 'call_assignment_139188')
        # Assigning a type to the variable 'contains' (line 2179)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2179, 8), 'contains', call_assignment_139188_143993)
        
        # Assigning a Call to a Name (line 2179):
        
        # Assigning a Call to a Name (line 2179):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_143996 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2179, 8), 'int')
        # Processing the call keyword arguments
        kwargs_143997 = {}
        # Getting the type of 'call_assignment_139187' (line 2179)
        call_assignment_139187_143994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2179, 8), 'call_assignment_139187', False)
        # Obtaining the member '__getitem__' of a type (line 2179)
        getitem___143995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2179, 8), call_assignment_139187_143994, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_143998 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___143995, *[int_143996], **kwargs_143997)
        
        # Assigning a type to the variable 'call_assignment_139189' (line 2179)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2179, 8), 'call_assignment_139189', getitem___call_result_143998)
        
        # Assigning a Name to a Name (line 2179):
        
        # Assigning a Name to a Name (line 2179):
        # Getting the type of 'call_assignment_139189' (line 2179)
        call_assignment_139189_143999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2179, 8), 'call_assignment_139189')
        # Assigning a type to the variable 'tinfo' (line 2179)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2179, 18), 'tinfo', call_assignment_139189_143999)
        
        
        # Getting the type of 'self' (line 2180)
        self_144000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2180, 11), 'self')
        # Obtaining the member 'arrow' of a type (line 2180)
        arrow_144001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2180, 11), self_144000, 'arrow')
        # Getting the type of 'None' (line 2180)
        None_144002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2180, 29), 'None')
        # Applying the binary operator 'isnot' (line 2180)
        result_is_not_144003 = python_operator(stypy.reporting.localization.Localization(__file__, 2180, 11), 'isnot', arrow_144001, None_144002)
        
        # Testing the type of an if condition (line 2180)
        if_condition_144004 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2180, 8), result_is_not_144003)
        # Assigning a type to the variable 'if_condition_144004' (line 2180)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2180, 8), 'if_condition_144004', if_condition_144004)
        # SSA begins for if statement (line 2180)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 2181):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to contains(...): (line 2181)
        # Processing the call arguments (line 2181)
        # Getting the type of 'event' (line 2181)
        event_144008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2181, 46), 'event', False)
        # Processing the call keyword arguments (line 2181)
        kwargs_144009 = {}
        # Getting the type of 'self' (line 2181)
        self_144005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2181, 26), 'self', False)
        # Obtaining the member 'arrow' of a type (line 2181)
        arrow_144006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2181, 26), self_144005, 'arrow')
        # Obtaining the member 'contains' of a type (line 2181)
        contains_144007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2181, 26), arrow_144006, 'contains')
        # Calling contains(args, kwargs) (line 2181)
        contains_call_result_144010 = invoke(stypy.reporting.localization.Localization(__file__, 2181, 26), contains_144007, *[event_144008], **kwargs_144009)
        
        # Assigning a type to the variable 'call_assignment_139190' (line 2181)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2181, 12), 'call_assignment_139190', contains_call_result_144010)
        
        # Assigning a Call to a Name (line 2181):
        
        # Assigning a Call to a Name (line 2181):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_144013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2181, 12), 'int')
        # Processing the call keyword arguments
        kwargs_144014 = {}
        # Getting the type of 'call_assignment_139190' (line 2181)
        call_assignment_139190_144011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2181, 12), 'call_assignment_139190', False)
        # Obtaining the member '__getitem__' of a type (line 2181)
        getitem___144012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2181, 12), call_assignment_139190_144011, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_144015 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___144012, *[int_144013], **kwargs_144014)
        
        # Assigning a type to the variable 'call_assignment_139191' (line 2181)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2181, 12), 'call_assignment_139191', getitem___call_result_144015)
        
        # Assigning a Name to a Name (line 2181):
        
        # Assigning a Name to a Name (line 2181):
        # Getting the type of 'call_assignment_139191' (line 2181)
        call_assignment_139191_144016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2181, 12), 'call_assignment_139191')
        # Assigning a type to the variable 'in_arrow' (line 2181)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2181, 12), 'in_arrow', call_assignment_139191_144016)
        
        # Assigning a Call to a Name (line 2181):
        
        # Assigning a Call to a Name (line 2181):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_144019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2181, 12), 'int')
        # Processing the call keyword arguments
        kwargs_144020 = {}
        # Getting the type of 'call_assignment_139190' (line 2181)
        call_assignment_139190_144017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2181, 12), 'call_assignment_139190', False)
        # Obtaining the member '__getitem__' of a type (line 2181)
        getitem___144018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2181, 12), call_assignment_139190_144017, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_144021 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___144018, *[int_144019], **kwargs_144020)
        
        # Assigning a type to the variable 'call_assignment_139192' (line 2181)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2181, 12), 'call_assignment_139192', getitem___call_result_144021)
        
        # Assigning a Name to a Name (line 2181):
        
        # Assigning a Name to a Name (line 2181):
        # Getting the type of 'call_assignment_139192' (line 2181)
        call_assignment_139192_144022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2181, 12), 'call_assignment_139192')
        # Assigning a type to the variable '_' (line 2181)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2181, 22), '_', call_assignment_139192_144022)
        
        # Assigning a BoolOp to a Name (line 2182):
        
        # Assigning a BoolOp to a Name (line 2182):
        
        # Assigning a BoolOp to a Name (line 2182):
        
        # Evaluating a boolean operation
        # Getting the type of 'contains' (line 2182)
        contains_144023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 23), 'contains')
        # Getting the type of 'in_arrow' (line 2182)
        in_arrow_144024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 35), 'in_arrow')
        # Applying the binary operator 'or' (line 2182)
        result_or_keyword_144025 = python_operator(stypy.reporting.localization.Localization(__file__, 2182, 23), 'or', contains_144023, in_arrow_144024)
        
        # Assigning a type to the variable 'contains' (line 2182)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2182, 12), 'contains', result_or_keyword_144025)
        # SSA join for if statement (line 2180)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 2183)
        self_144026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2183, 11), 'self')
        # Obtaining the member 'arrow_patch' of a type (line 2183)
        arrow_patch_144027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2183, 11), self_144026, 'arrow_patch')
        # Getting the type of 'None' (line 2183)
        None_144028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2183, 35), 'None')
        # Applying the binary operator 'isnot' (line 2183)
        result_is_not_144029 = python_operator(stypy.reporting.localization.Localization(__file__, 2183, 11), 'isnot', arrow_patch_144027, None_144028)
        
        # Testing the type of an if condition (line 2183)
        if_condition_144030 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2183, 8), result_is_not_144029)
        # Assigning a type to the variable 'if_condition_144030' (line 2183)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2183, 8), 'if_condition_144030', if_condition_144030)
        # SSA begins for if statement (line 2183)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 2184):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to contains(...): (line 2184)
        # Processing the call arguments (line 2184)
        # Getting the type of 'event' (line 2184)
        event_144034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 52), 'event', False)
        # Processing the call keyword arguments (line 2184)
        kwargs_144035 = {}
        # Getting the type of 'self' (line 2184)
        self_144031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 26), 'self', False)
        # Obtaining the member 'arrow_patch' of a type (line 2184)
        arrow_patch_144032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2184, 26), self_144031, 'arrow_patch')
        # Obtaining the member 'contains' of a type (line 2184)
        contains_144033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2184, 26), arrow_patch_144032, 'contains')
        # Calling contains(args, kwargs) (line 2184)
        contains_call_result_144036 = invoke(stypy.reporting.localization.Localization(__file__, 2184, 26), contains_144033, *[event_144034], **kwargs_144035)
        
        # Assigning a type to the variable 'call_assignment_139193' (line 2184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2184, 12), 'call_assignment_139193', contains_call_result_144036)
        
        # Assigning a Call to a Name (line 2184):
        
        # Assigning a Call to a Name (line 2184):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_144039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2184, 12), 'int')
        # Processing the call keyword arguments
        kwargs_144040 = {}
        # Getting the type of 'call_assignment_139193' (line 2184)
        call_assignment_139193_144037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 12), 'call_assignment_139193', False)
        # Obtaining the member '__getitem__' of a type (line 2184)
        getitem___144038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2184, 12), call_assignment_139193_144037, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_144041 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___144038, *[int_144039], **kwargs_144040)
        
        # Assigning a type to the variable 'call_assignment_139194' (line 2184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2184, 12), 'call_assignment_139194', getitem___call_result_144041)
        
        # Assigning a Name to a Name (line 2184):
        
        # Assigning a Name to a Name (line 2184):
        # Getting the type of 'call_assignment_139194' (line 2184)
        call_assignment_139194_144042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 12), 'call_assignment_139194')
        # Assigning a type to the variable 'in_patch' (line 2184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2184, 12), 'in_patch', call_assignment_139194_144042)
        
        # Assigning a Call to a Name (line 2184):
        
        # Assigning a Call to a Name (line 2184):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_144045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2184, 12), 'int')
        # Processing the call keyword arguments
        kwargs_144046 = {}
        # Getting the type of 'call_assignment_139193' (line 2184)
        call_assignment_139193_144043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 12), 'call_assignment_139193', False)
        # Obtaining the member '__getitem__' of a type (line 2184)
        getitem___144044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2184, 12), call_assignment_139193_144043, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_144047 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___144044, *[int_144045], **kwargs_144046)
        
        # Assigning a type to the variable 'call_assignment_139195' (line 2184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2184, 12), 'call_assignment_139195', getitem___call_result_144047)
        
        # Assigning a Name to a Name (line 2184):
        
        # Assigning a Name to a Name (line 2184):
        # Getting the type of 'call_assignment_139195' (line 2184)
        call_assignment_139195_144048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 12), 'call_assignment_139195')
        # Assigning a type to the variable '_' (line 2184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2184, 22), '_', call_assignment_139195_144048)
        
        # Assigning a BoolOp to a Name (line 2185):
        
        # Assigning a BoolOp to a Name (line 2185):
        
        # Assigning a BoolOp to a Name (line 2185):
        
        # Evaluating a boolean operation
        # Getting the type of 'contains' (line 2185)
        contains_144049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 23), 'contains')
        # Getting the type of 'in_patch' (line 2185)
        in_patch_144050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 35), 'in_patch')
        # Applying the binary operator 'or' (line 2185)
        result_or_keyword_144051 = python_operator(stypy.reporting.localization.Localization(__file__, 2185, 23), 'or', contains_144049, in_patch_144050)
        
        # Assigning a type to the variable 'contains' (line 2185)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2185, 12), 'contains', result_or_keyword_144051)
        # SSA join for if statement (line 2183)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 2187)
        tuple_144052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2187, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2187)
        # Adding element type (line 2187)
        # Getting the type of 'contains' (line 2187)
        contains_144053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2187, 15), 'contains')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2187, 15), tuple_144052, contains_144053)
        # Adding element type (line 2187)
        # Getting the type of 'tinfo' (line 2187)
        tinfo_144054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2187, 25), 'tinfo')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2187, 15), tuple_144052, tinfo_144054)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2187, 8), 'stypy_return_type', tuple_144052)
        
        # ################# End of 'contains(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'contains' in the type store
        # Getting the type of 'stypy_return_type' (line 2178)
        stypy_return_type_144055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2178, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_144055)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'contains'
        return stypy_return_type_144055


    @norecursion
    def xyann(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'xyann'
        module_type_store = module_type_store.open_function_context('xyann', 2189, 4, False)
        # Assigning a type to the variable 'self' (line 2190)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2190, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Annotation.xyann.__dict__.__setitem__('stypy_localization', localization)
        Annotation.xyann.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Annotation.xyann.__dict__.__setitem__('stypy_type_store', module_type_store)
        Annotation.xyann.__dict__.__setitem__('stypy_function_name', 'Annotation.xyann')
        Annotation.xyann.__dict__.__setitem__('stypy_param_names_list', [])
        Annotation.xyann.__dict__.__setitem__('stypy_varargs_param_name', None)
        Annotation.xyann.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Annotation.xyann.__dict__.__setitem__('stypy_call_defaults', defaults)
        Annotation.xyann.__dict__.__setitem__('stypy_call_varargs', varargs)
        Annotation.xyann.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Annotation.xyann.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Annotation.xyann', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'xyann', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'xyann(...)' code ##################

        
        # Call to get_position(...): (line 2191)
        # Processing the call keyword arguments (line 2191)
        kwargs_144058 = {}
        # Getting the type of 'self' (line 2191)
        self_144056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2191, 15), 'self', False)
        # Obtaining the member 'get_position' of a type (line 2191)
        get_position_144057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2191, 15), self_144056, 'get_position')
        # Calling get_position(args, kwargs) (line 2191)
        get_position_call_result_144059 = invoke(stypy.reporting.localization.Localization(__file__, 2191, 15), get_position_144057, *[], **kwargs_144058)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2191)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2191, 8), 'stypy_return_type', get_position_call_result_144059)
        
        # ################# End of 'xyann(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'xyann' in the type store
        # Getting the type of 'stypy_return_type' (line 2189)
        stypy_return_type_144060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2189, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_144060)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'xyann'
        return stypy_return_type_144060


    @norecursion
    def xyann(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'xyann'
        module_type_store = module_type_store.open_function_context('xyann', 2193, 4, False)
        # Assigning a type to the variable 'self' (line 2194)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2194, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Annotation.xyann.__dict__.__setitem__('stypy_localization', localization)
        Annotation.xyann.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Annotation.xyann.__dict__.__setitem__('stypy_type_store', module_type_store)
        Annotation.xyann.__dict__.__setitem__('stypy_function_name', 'Annotation.xyann')
        Annotation.xyann.__dict__.__setitem__('stypy_param_names_list', ['xytext'])
        Annotation.xyann.__dict__.__setitem__('stypy_varargs_param_name', None)
        Annotation.xyann.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Annotation.xyann.__dict__.__setitem__('stypy_call_defaults', defaults)
        Annotation.xyann.__dict__.__setitem__('stypy_call_varargs', varargs)
        Annotation.xyann.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Annotation.xyann.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Annotation.xyann', ['xytext'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'xyann', localization, ['xytext'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'xyann(...)' code ##################

        
        # Call to set_position(...): (line 2195)
        # Processing the call arguments (line 2195)
        # Getting the type of 'xytext' (line 2195)
        xytext_144063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 26), 'xytext', False)
        # Processing the call keyword arguments (line 2195)
        kwargs_144064 = {}
        # Getting the type of 'self' (line 2195)
        self_144061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 8), 'self', False)
        # Obtaining the member 'set_position' of a type (line 2195)
        set_position_144062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2195, 8), self_144061, 'set_position')
        # Calling set_position(args, kwargs) (line 2195)
        set_position_call_result_144065 = invoke(stypy.reporting.localization.Localization(__file__, 2195, 8), set_position_144062, *[xytext_144063], **kwargs_144064)
        
        
        # ################# End of 'xyann(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'xyann' in the type store
        # Getting the type of 'stypy_return_type' (line 2193)
        stypy_return_type_144066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2193, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_144066)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'xyann'
        return stypy_return_type_144066


    @norecursion
    def anncoords(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'anncoords'
        module_type_store = module_type_store.open_function_context('anncoords', 2197, 4, False)
        # Assigning a type to the variable 'self' (line 2198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2198, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Annotation.anncoords.__dict__.__setitem__('stypy_localization', localization)
        Annotation.anncoords.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Annotation.anncoords.__dict__.__setitem__('stypy_type_store', module_type_store)
        Annotation.anncoords.__dict__.__setitem__('stypy_function_name', 'Annotation.anncoords')
        Annotation.anncoords.__dict__.__setitem__('stypy_param_names_list', [])
        Annotation.anncoords.__dict__.__setitem__('stypy_varargs_param_name', None)
        Annotation.anncoords.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Annotation.anncoords.__dict__.__setitem__('stypy_call_defaults', defaults)
        Annotation.anncoords.__dict__.__setitem__('stypy_call_varargs', varargs)
        Annotation.anncoords.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Annotation.anncoords.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Annotation.anncoords', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'anncoords', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'anncoords(...)' code ##################

        # Getting the type of 'self' (line 2199)
        self_144067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2199, 15), 'self')
        # Obtaining the member '_textcoords' of a type (line 2199)
        _textcoords_144068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2199, 15), self_144067, '_textcoords')
        # Assigning a type to the variable 'stypy_return_type' (line 2199)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2199, 8), 'stypy_return_type', _textcoords_144068)
        
        # ################# End of 'anncoords(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'anncoords' in the type store
        # Getting the type of 'stypy_return_type' (line 2197)
        stypy_return_type_144069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_144069)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'anncoords'
        return stypy_return_type_144069


    @norecursion
    def anncoords(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'anncoords'
        module_type_store = module_type_store.open_function_context('anncoords', 2201, 4, False)
        # Assigning a type to the variable 'self' (line 2202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2202, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Annotation.anncoords.__dict__.__setitem__('stypy_localization', localization)
        Annotation.anncoords.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Annotation.anncoords.__dict__.__setitem__('stypy_type_store', module_type_store)
        Annotation.anncoords.__dict__.__setitem__('stypy_function_name', 'Annotation.anncoords')
        Annotation.anncoords.__dict__.__setitem__('stypy_param_names_list', ['coords'])
        Annotation.anncoords.__dict__.__setitem__('stypy_varargs_param_name', None)
        Annotation.anncoords.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Annotation.anncoords.__dict__.__setitem__('stypy_call_defaults', defaults)
        Annotation.anncoords.__dict__.__setitem__('stypy_call_varargs', varargs)
        Annotation.anncoords.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Annotation.anncoords.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Annotation.anncoords', ['coords'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'anncoords', localization, ['coords'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'anncoords(...)' code ##################

        
        # Assigning a Name to a Attribute (line 2203):
        
        # Assigning a Name to a Attribute (line 2203):
        
        # Assigning a Name to a Attribute (line 2203):
        # Getting the type of 'coords' (line 2203)
        coords_144070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2203, 27), 'coords')
        # Getting the type of 'self' (line 2203)
        self_144071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2203, 8), 'self')
        # Setting the type of the member '_textcoords' of a type (line 2203)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2203, 8), self_144071, '_textcoords', coords_144070)
        
        # ################# End of 'anncoords(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'anncoords' in the type store
        # Getting the type of 'stypy_return_type' (line 2201)
        stypy_return_type_144072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2201, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_144072)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'anncoords'
        return stypy_return_type_144072


    @norecursion
    def set_figure(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_figure'
        module_type_store = module_type_store.open_function_context('set_figure', 2205, 4, False)
        # Assigning a type to the variable 'self' (line 2206)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2206, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Annotation.set_figure.__dict__.__setitem__('stypy_localization', localization)
        Annotation.set_figure.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Annotation.set_figure.__dict__.__setitem__('stypy_type_store', module_type_store)
        Annotation.set_figure.__dict__.__setitem__('stypy_function_name', 'Annotation.set_figure')
        Annotation.set_figure.__dict__.__setitem__('stypy_param_names_list', ['fig'])
        Annotation.set_figure.__dict__.__setitem__('stypy_varargs_param_name', None)
        Annotation.set_figure.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Annotation.set_figure.__dict__.__setitem__('stypy_call_defaults', defaults)
        Annotation.set_figure.__dict__.__setitem__('stypy_call_varargs', varargs)
        Annotation.set_figure.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Annotation.set_figure.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Annotation.set_figure', ['fig'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_figure', localization, ['fig'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_figure(...)' code ##################

        
        
        # Getting the type of 'self' (line 2207)
        self_144073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 11), 'self')
        # Obtaining the member 'arrow' of a type (line 2207)
        arrow_144074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2207, 11), self_144073, 'arrow')
        # Getting the type of 'None' (line 2207)
        None_144075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 29), 'None')
        # Applying the binary operator 'isnot' (line 2207)
        result_is_not_144076 = python_operator(stypy.reporting.localization.Localization(__file__, 2207, 11), 'isnot', arrow_144074, None_144075)
        
        # Testing the type of an if condition (line 2207)
        if_condition_144077 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2207, 8), result_is_not_144076)
        # Assigning a type to the variable 'if_condition_144077' (line 2207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2207, 8), 'if_condition_144077', if_condition_144077)
        # SSA begins for if statement (line 2207)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_figure(...): (line 2208)
        # Processing the call arguments (line 2208)
        # Getting the type of 'fig' (line 2208)
        fig_144081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2208, 34), 'fig', False)
        # Processing the call keyword arguments (line 2208)
        kwargs_144082 = {}
        # Getting the type of 'self' (line 2208)
        self_144078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2208, 12), 'self', False)
        # Obtaining the member 'arrow' of a type (line 2208)
        arrow_144079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2208, 12), self_144078, 'arrow')
        # Obtaining the member 'set_figure' of a type (line 2208)
        set_figure_144080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2208, 12), arrow_144079, 'set_figure')
        # Calling set_figure(args, kwargs) (line 2208)
        set_figure_call_result_144083 = invoke(stypy.reporting.localization.Localization(__file__, 2208, 12), set_figure_144080, *[fig_144081], **kwargs_144082)
        
        # SSA join for if statement (line 2207)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 2209)
        self_144084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2209, 11), 'self')
        # Obtaining the member 'arrow_patch' of a type (line 2209)
        arrow_patch_144085 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2209, 11), self_144084, 'arrow_patch')
        # Getting the type of 'None' (line 2209)
        None_144086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2209, 35), 'None')
        # Applying the binary operator 'isnot' (line 2209)
        result_is_not_144087 = python_operator(stypy.reporting.localization.Localization(__file__, 2209, 11), 'isnot', arrow_patch_144085, None_144086)
        
        # Testing the type of an if condition (line 2209)
        if_condition_144088 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2209, 8), result_is_not_144087)
        # Assigning a type to the variable 'if_condition_144088' (line 2209)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2209, 8), 'if_condition_144088', if_condition_144088)
        # SSA begins for if statement (line 2209)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_figure(...): (line 2210)
        # Processing the call arguments (line 2210)
        # Getting the type of 'fig' (line 2210)
        fig_144092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2210, 40), 'fig', False)
        # Processing the call keyword arguments (line 2210)
        kwargs_144093 = {}
        # Getting the type of 'self' (line 2210)
        self_144089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2210, 12), 'self', False)
        # Obtaining the member 'arrow_patch' of a type (line 2210)
        arrow_patch_144090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2210, 12), self_144089, 'arrow_patch')
        # Obtaining the member 'set_figure' of a type (line 2210)
        set_figure_144091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2210, 12), arrow_patch_144090, 'set_figure')
        # Calling set_figure(args, kwargs) (line 2210)
        set_figure_call_result_144094 = invoke(stypy.reporting.localization.Localization(__file__, 2210, 12), set_figure_144091, *[fig_144092], **kwargs_144093)
        
        # SSA join for if statement (line 2209)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_figure(...): (line 2211)
        # Processing the call arguments (line 2211)
        # Getting the type of 'self' (line 2211)
        self_144097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2211, 26), 'self', False)
        # Getting the type of 'fig' (line 2211)
        fig_144098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2211, 32), 'fig', False)
        # Processing the call keyword arguments (line 2211)
        kwargs_144099 = {}
        # Getting the type of 'Artist' (line 2211)
        Artist_144095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2211, 8), 'Artist', False)
        # Obtaining the member 'set_figure' of a type (line 2211)
        set_figure_144096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2211, 8), Artist_144095, 'set_figure')
        # Calling set_figure(args, kwargs) (line 2211)
        set_figure_call_result_144100 = invoke(stypy.reporting.localization.Localization(__file__, 2211, 8), set_figure_144096, *[self_144097, fig_144098], **kwargs_144099)
        
        
        # ################# End of 'set_figure(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_figure' in the type store
        # Getting the type of 'stypy_return_type' (line 2205)
        stypy_return_type_144101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_144101)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_figure'
        return stypy_return_type_144101


    @norecursion
    def update_positions(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'update_positions'
        module_type_store = module_type_store.open_function_context('update_positions', 2213, 4, False)
        # Assigning a type to the variable 'self' (line 2214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2214, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Annotation.update_positions.__dict__.__setitem__('stypy_localization', localization)
        Annotation.update_positions.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Annotation.update_positions.__dict__.__setitem__('stypy_type_store', module_type_store)
        Annotation.update_positions.__dict__.__setitem__('stypy_function_name', 'Annotation.update_positions')
        Annotation.update_positions.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        Annotation.update_positions.__dict__.__setitem__('stypy_varargs_param_name', None)
        Annotation.update_positions.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Annotation.update_positions.__dict__.__setitem__('stypy_call_defaults', defaults)
        Annotation.update_positions.__dict__.__setitem__('stypy_call_varargs', varargs)
        Annotation.update_positions.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Annotation.update_positions.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Annotation.update_positions', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update_positions', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update_positions(...)' code ##################

        unicode_144102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2216, (-1)), 'unicode', u'"Update the pixel positions of the annotated point and the\n        text.\n        ')
        
        # Assigning a Call to a Name (line 2217):
        
        # Assigning a Call to a Name (line 2217):
        
        # Assigning a Call to a Name (line 2217):
        
        # Call to _get_position_xy(...): (line 2217)
        # Processing the call arguments (line 2217)
        # Getting the type of 'renderer' (line 2217)
        renderer_144105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2217, 41), 'renderer', False)
        # Processing the call keyword arguments (line 2217)
        kwargs_144106 = {}
        # Getting the type of 'self' (line 2217)
        self_144103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2217, 19), 'self', False)
        # Obtaining the member '_get_position_xy' of a type (line 2217)
        _get_position_xy_144104 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2217, 19), self_144103, '_get_position_xy')
        # Calling _get_position_xy(args, kwargs) (line 2217)
        _get_position_xy_call_result_144107 = invoke(stypy.reporting.localization.Localization(__file__, 2217, 19), _get_position_xy_144104, *[renderer_144105], **kwargs_144106)
        
        # Assigning a type to the variable 'xy_pixel' (line 2217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2217, 8), 'xy_pixel', _get_position_xy_call_result_144107)
        
        # Call to _update_position_xytext(...): (line 2218)
        # Processing the call arguments (line 2218)
        # Getting the type of 'renderer' (line 2218)
        renderer_144110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2218, 37), 'renderer', False)
        # Getting the type of 'xy_pixel' (line 2218)
        xy_pixel_144111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2218, 47), 'xy_pixel', False)
        # Processing the call keyword arguments (line 2218)
        kwargs_144112 = {}
        # Getting the type of 'self' (line 2218)
        self_144108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2218, 8), 'self', False)
        # Obtaining the member '_update_position_xytext' of a type (line 2218)
        _update_position_xytext_144109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2218, 8), self_144108, '_update_position_xytext')
        # Calling _update_position_xytext(args, kwargs) (line 2218)
        _update_position_xytext_call_result_144113 = invoke(stypy.reporting.localization.Localization(__file__, 2218, 8), _update_position_xytext_144109, *[renderer_144110, xy_pixel_144111], **kwargs_144112)
        
        
        # ################# End of 'update_positions(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update_positions' in the type store
        # Getting the type of 'stypy_return_type' (line 2213)
        stypy_return_type_144114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2213, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_144114)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update_positions'
        return stypy_return_type_144114


    @norecursion
    def _update_position_xytext(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update_position_xytext'
        module_type_store = module_type_store.open_function_context('_update_position_xytext', 2220, 4, False)
        # Assigning a type to the variable 'self' (line 2221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2221, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Annotation._update_position_xytext.__dict__.__setitem__('stypy_localization', localization)
        Annotation._update_position_xytext.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Annotation._update_position_xytext.__dict__.__setitem__('stypy_type_store', module_type_store)
        Annotation._update_position_xytext.__dict__.__setitem__('stypy_function_name', 'Annotation._update_position_xytext')
        Annotation._update_position_xytext.__dict__.__setitem__('stypy_param_names_list', ['renderer', 'xy_pixel'])
        Annotation._update_position_xytext.__dict__.__setitem__('stypy_varargs_param_name', None)
        Annotation._update_position_xytext.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Annotation._update_position_xytext.__dict__.__setitem__('stypy_call_defaults', defaults)
        Annotation._update_position_xytext.__dict__.__setitem__('stypy_call_varargs', varargs)
        Annotation._update_position_xytext.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Annotation._update_position_xytext.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Annotation._update_position_xytext', ['renderer', 'xy_pixel'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update_position_xytext', localization, ['renderer', 'xy_pixel'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update_position_xytext(...)' code ##################

        unicode_144115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2223, (-1)), 'unicode', u'Update the pixel positions of the annotation text and the arrow\n        patch.\n        ')
        
        # Call to set_transform(...): (line 2225)
        # Processing the call arguments (line 2225)
        
        # Call to _get_xy_transform(...): (line 2225)
        # Processing the call arguments (line 2225)
        # Getting the type of 'renderer' (line 2225)
        renderer_144120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2225, 50), 'renderer', False)
        # Getting the type of 'self' (line 2225)
        self_144121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2225, 60), 'self', False)
        # Obtaining the member 'anncoords' of a type (line 2225)
        anncoords_144122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2225, 60), self_144121, 'anncoords')
        # Processing the call keyword arguments (line 2225)
        kwargs_144123 = {}
        # Getting the type of 'self' (line 2225)
        self_144118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2225, 27), 'self', False)
        # Obtaining the member '_get_xy_transform' of a type (line 2225)
        _get_xy_transform_144119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2225, 27), self_144118, '_get_xy_transform')
        # Calling _get_xy_transform(args, kwargs) (line 2225)
        _get_xy_transform_call_result_144124 = invoke(stypy.reporting.localization.Localization(__file__, 2225, 27), _get_xy_transform_144119, *[renderer_144120, anncoords_144122], **kwargs_144123)
        
        # Processing the call keyword arguments (line 2225)
        kwargs_144125 = {}
        # Getting the type of 'self' (line 2225)
        self_144116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2225, 8), 'self', False)
        # Obtaining the member 'set_transform' of a type (line 2225)
        set_transform_144117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2225, 8), self_144116, 'set_transform')
        # Calling set_transform(args, kwargs) (line 2225)
        set_transform_call_result_144126 = invoke(stypy.reporting.localization.Localization(__file__, 2225, 8), set_transform_144117, *[_get_xy_transform_call_result_144124], **kwargs_144125)
        
        
        # Assigning a Call to a Tuple (line 2227):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to _get_xy_display(...): (line 2227)
        # Processing the call keyword arguments (line 2227)
        kwargs_144129 = {}
        # Getting the type of 'self' (line 2227)
        self_144127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2227, 19), 'self', False)
        # Obtaining the member '_get_xy_display' of a type (line 2227)
        _get_xy_display_144128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2227, 19), self_144127, '_get_xy_display')
        # Calling _get_xy_display(args, kwargs) (line 2227)
        _get_xy_display_call_result_144130 = invoke(stypy.reporting.localization.Localization(__file__, 2227, 19), _get_xy_display_144128, *[], **kwargs_144129)
        
        # Assigning a type to the variable 'call_assignment_139196' (line 2227)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2227, 8), 'call_assignment_139196', _get_xy_display_call_result_144130)
        
        # Assigning a Call to a Name (line 2227):
        
        # Assigning a Call to a Name (line 2227):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_144133 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2227, 8), 'int')
        # Processing the call keyword arguments
        kwargs_144134 = {}
        # Getting the type of 'call_assignment_139196' (line 2227)
        call_assignment_139196_144131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2227, 8), 'call_assignment_139196', False)
        # Obtaining the member '__getitem__' of a type (line 2227)
        getitem___144132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2227, 8), call_assignment_139196_144131, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_144135 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___144132, *[int_144133], **kwargs_144134)
        
        # Assigning a type to the variable 'call_assignment_139197' (line 2227)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2227, 8), 'call_assignment_139197', getitem___call_result_144135)
        
        # Assigning a Name to a Name (line 2227):
        
        # Assigning a Name to a Name (line 2227):
        # Getting the type of 'call_assignment_139197' (line 2227)
        call_assignment_139197_144136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2227, 8), 'call_assignment_139197')
        # Assigning a type to the variable 'ox0' (line 2227)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2227, 8), 'ox0', call_assignment_139197_144136)
        
        # Assigning a Call to a Name (line 2227):
        
        # Assigning a Call to a Name (line 2227):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_144139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2227, 8), 'int')
        # Processing the call keyword arguments
        kwargs_144140 = {}
        # Getting the type of 'call_assignment_139196' (line 2227)
        call_assignment_139196_144137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2227, 8), 'call_assignment_139196', False)
        # Obtaining the member '__getitem__' of a type (line 2227)
        getitem___144138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2227, 8), call_assignment_139196_144137, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_144141 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___144138, *[int_144139], **kwargs_144140)
        
        # Assigning a type to the variable 'call_assignment_139198' (line 2227)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2227, 8), 'call_assignment_139198', getitem___call_result_144141)
        
        # Assigning a Name to a Name (line 2227):
        
        # Assigning a Name to a Name (line 2227):
        # Getting the type of 'call_assignment_139198' (line 2227)
        call_assignment_139198_144142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2227, 8), 'call_assignment_139198')
        # Assigning a type to the variable 'oy0' (line 2227)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2227, 13), 'oy0', call_assignment_139198_144142)
        
        # Assigning a Name to a Tuple (line 2228):
        
        # Assigning a Subscript to a Name (line 2228):
        
        # Assigning a Subscript to a Name (line 2228):
        
        # Obtaining the type of the subscript
        int_144143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2228, 8), 'int')
        # Getting the type of 'xy_pixel' (line 2228)
        xy_pixel_144144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 19), 'xy_pixel')
        # Obtaining the member '__getitem__' of a type (line 2228)
        getitem___144145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2228, 8), xy_pixel_144144, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2228)
        subscript_call_result_144146 = invoke(stypy.reporting.localization.Localization(__file__, 2228, 8), getitem___144145, int_144143)
        
        # Assigning a type to the variable 'tuple_var_assignment_139199' (line 2228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2228, 8), 'tuple_var_assignment_139199', subscript_call_result_144146)
        
        # Assigning a Subscript to a Name (line 2228):
        
        # Assigning a Subscript to a Name (line 2228):
        
        # Obtaining the type of the subscript
        int_144147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2228, 8), 'int')
        # Getting the type of 'xy_pixel' (line 2228)
        xy_pixel_144148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 19), 'xy_pixel')
        # Obtaining the member '__getitem__' of a type (line 2228)
        getitem___144149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2228, 8), xy_pixel_144148, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2228)
        subscript_call_result_144150 = invoke(stypy.reporting.localization.Localization(__file__, 2228, 8), getitem___144149, int_144147)
        
        # Assigning a type to the variable 'tuple_var_assignment_139200' (line 2228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2228, 8), 'tuple_var_assignment_139200', subscript_call_result_144150)
        
        # Assigning a Name to a Name (line 2228):
        
        # Assigning a Name to a Name (line 2228):
        # Getting the type of 'tuple_var_assignment_139199' (line 2228)
        tuple_var_assignment_139199_144151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 8), 'tuple_var_assignment_139199')
        # Assigning a type to the variable 'ox1' (line 2228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2228, 8), 'ox1', tuple_var_assignment_139199_144151)
        
        # Assigning a Name to a Name (line 2228):
        
        # Assigning a Name to a Name (line 2228):
        # Getting the type of 'tuple_var_assignment_139200' (line 2228)
        tuple_var_assignment_139200_144152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 8), 'tuple_var_assignment_139200')
        # Assigning a type to the variable 'oy1' (line 2228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2228, 13), 'oy1', tuple_var_assignment_139200_144152)
        
        
        # Getting the type of 'self' (line 2230)
        self_144153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2230, 11), 'self')
        # Obtaining the member 'arrowprops' of a type (line 2230)
        arrowprops_144154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2230, 11), self_144153, 'arrowprops')
        # Getting the type of 'None' (line 2230)
        None_144155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2230, 34), 'None')
        # Applying the binary operator 'isnot' (line 2230)
        result_is_not_144156 = python_operator(stypy.reporting.localization.Localization(__file__, 2230, 11), 'isnot', arrowprops_144154, None_144155)
        
        # Testing the type of an if condition (line 2230)
        if_condition_144157 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2230, 8), result_is_not_144156)
        # Assigning a type to the variable 'if_condition_144157' (line 2230)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2230, 8), 'if_condition_144157', if_condition_144157)
        # SSA begins for if statement (line 2230)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Tuple (line 2231):
        
        # Assigning a Subscript to a Name (line 2231):
        
        # Assigning a Subscript to a Name (line 2231):
        
        # Obtaining the type of the subscript
        int_144158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2231, 12), 'int')
        # Getting the type of 'xy_pixel' (line 2231)
        xy_pixel_144159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2231, 21), 'xy_pixel')
        # Obtaining the member '__getitem__' of a type (line 2231)
        getitem___144160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2231, 12), xy_pixel_144159, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2231)
        subscript_call_result_144161 = invoke(stypy.reporting.localization.Localization(__file__, 2231, 12), getitem___144160, int_144158)
        
        # Assigning a type to the variable 'tuple_var_assignment_139201' (line 2231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2231, 12), 'tuple_var_assignment_139201', subscript_call_result_144161)
        
        # Assigning a Subscript to a Name (line 2231):
        
        # Assigning a Subscript to a Name (line 2231):
        
        # Obtaining the type of the subscript
        int_144162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2231, 12), 'int')
        # Getting the type of 'xy_pixel' (line 2231)
        xy_pixel_144163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2231, 21), 'xy_pixel')
        # Obtaining the member '__getitem__' of a type (line 2231)
        getitem___144164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2231, 12), xy_pixel_144163, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2231)
        subscript_call_result_144165 = invoke(stypy.reporting.localization.Localization(__file__, 2231, 12), getitem___144164, int_144162)
        
        # Assigning a type to the variable 'tuple_var_assignment_139202' (line 2231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2231, 12), 'tuple_var_assignment_139202', subscript_call_result_144165)
        
        # Assigning a Name to a Name (line 2231):
        
        # Assigning a Name to a Name (line 2231):
        # Getting the type of 'tuple_var_assignment_139201' (line 2231)
        tuple_var_assignment_139201_144166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2231, 12), 'tuple_var_assignment_139201')
        # Assigning a type to the variable 'x0' (line 2231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2231, 12), 'x0', tuple_var_assignment_139201_144166)
        
        # Assigning a Name to a Name (line 2231):
        
        # Assigning a Name to a Name (line 2231):
        # Getting the type of 'tuple_var_assignment_139202' (line 2231)
        tuple_var_assignment_139202_144167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2231, 12), 'tuple_var_assignment_139202')
        # Assigning a type to the variable 'y0' (line 2231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2231, 16), 'y0', tuple_var_assignment_139202_144167)
        
        # Assigning a Attribute to a Tuple (line 2232):
        
        # Assigning a Subscript to a Name (line 2232):
        
        # Assigning a Subscript to a Name (line 2232):
        
        # Obtaining the type of the subscript
        int_144168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2232, 12), 'int')
        
        # Call to get_window_extent(...): (line 2232)
        # Processing the call arguments (line 2232)
        # Getting the type of 'self' (line 2232)
        self_144171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 48), 'self', False)
        # Getting the type of 'renderer' (line 2232)
        renderer_144172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 54), 'renderer', False)
        # Processing the call keyword arguments (line 2232)
        kwargs_144173 = {}
        # Getting the type of 'Text' (line 2232)
        Text_144169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 25), 'Text', False)
        # Obtaining the member 'get_window_extent' of a type (line 2232)
        get_window_extent_144170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2232, 25), Text_144169, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 2232)
        get_window_extent_call_result_144174 = invoke(stypy.reporting.localization.Localization(__file__, 2232, 25), get_window_extent_144170, *[self_144171, renderer_144172], **kwargs_144173)
        
        # Obtaining the member 'bounds' of a type (line 2232)
        bounds_144175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2232, 25), get_window_extent_call_result_144174, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 2232)
        getitem___144176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2232, 12), bounds_144175, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2232)
        subscript_call_result_144177 = invoke(stypy.reporting.localization.Localization(__file__, 2232, 12), getitem___144176, int_144168)
        
        # Assigning a type to the variable 'tuple_var_assignment_139203' (line 2232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2232, 12), 'tuple_var_assignment_139203', subscript_call_result_144177)
        
        # Assigning a Subscript to a Name (line 2232):
        
        # Assigning a Subscript to a Name (line 2232):
        
        # Obtaining the type of the subscript
        int_144178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2232, 12), 'int')
        
        # Call to get_window_extent(...): (line 2232)
        # Processing the call arguments (line 2232)
        # Getting the type of 'self' (line 2232)
        self_144181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 48), 'self', False)
        # Getting the type of 'renderer' (line 2232)
        renderer_144182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 54), 'renderer', False)
        # Processing the call keyword arguments (line 2232)
        kwargs_144183 = {}
        # Getting the type of 'Text' (line 2232)
        Text_144179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 25), 'Text', False)
        # Obtaining the member 'get_window_extent' of a type (line 2232)
        get_window_extent_144180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2232, 25), Text_144179, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 2232)
        get_window_extent_call_result_144184 = invoke(stypy.reporting.localization.Localization(__file__, 2232, 25), get_window_extent_144180, *[self_144181, renderer_144182], **kwargs_144183)
        
        # Obtaining the member 'bounds' of a type (line 2232)
        bounds_144185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2232, 25), get_window_extent_call_result_144184, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 2232)
        getitem___144186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2232, 12), bounds_144185, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2232)
        subscript_call_result_144187 = invoke(stypy.reporting.localization.Localization(__file__, 2232, 12), getitem___144186, int_144178)
        
        # Assigning a type to the variable 'tuple_var_assignment_139204' (line 2232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2232, 12), 'tuple_var_assignment_139204', subscript_call_result_144187)
        
        # Assigning a Subscript to a Name (line 2232):
        
        # Assigning a Subscript to a Name (line 2232):
        
        # Obtaining the type of the subscript
        int_144188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2232, 12), 'int')
        
        # Call to get_window_extent(...): (line 2232)
        # Processing the call arguments (line 2232)
        # Getting the type of 'self' (line 2232)
        self_144191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 48), 'self', False)
        # Getting the type of 'renderer' (line 2232)
        renderer_144192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 54), 'renderer', False)
        # Processing the call keyword arguments (line 2232)
        kwargs_144193 = {}
        # Getting the type of 'Text' (line 2232)
        Text_144189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 25), 'Text', False)
        # Obtaining the member 'get_window_extent' of a type (line 2232)
        get_window_extent_144190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2232, 25), Text_144189, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 2232)
        get_window_extent_call_result_144194 = invoke(stypy.reporting.localization.Localization(__file__, 2232, 25), get_window_extent_144190, *[self_144191, renderer_144192], **kwargs_144193)
        
        # Obtaining the member 'bounds' of a type (line 2232)
        bounds_144195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2232, 25), get_window_extent_call_result_144194, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 2232)
        getitem___144196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2232, 12), bounds_144195, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2232)
        subscript_call_result_144197 = invoke(stypy.reporting.localization.Localization(__file__, 2232, 12), getitem___144196, int_144188)
        
        # Assigning a type to the variable 'tuple_var_assignment_139205' (line 2232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2232, 12), 'tuple_var_assignment_139205', subscript_call_result_144197)
        
        # Assigning a Subscript to a Name (line 2232):
        
        # Assigning a Subscript to a Name (line 2232):
        
        # Obtaining the type of the subscript
        int_144198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2232, 12), 'int')
        
        # Call to get_window_extent(...): (line 2232)
        # Processing the call arguments (line 2232)
        # Getting the type of 'self' (line 2232)
        self_144201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 48), 'self', False)
        # Getting the type of 'renderer' (line 2232)
        renderer_144202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 54), 'renderer', False)
        # Processing the call keyword arguments (line 2232)
        kwargs_144203 = {}
        # Getting the type of 'Text' (line 2232)
        Text_144199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 25), 'Text', False)
        # Obtaining the member 'get_window_extent' of a type (line 2232)
        get_window_extent_144200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2232, 25), Text_144199, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 2232)
        get_window_extent_call_result_144204 = invoke(stypy.reporting.localization.Localization(__file__, 2232, 25), get_window_extent_144200, *[self_144201, renderer_144202], **kwargs_144203)
        
        # Obtaining the member 'bounds' of a type (line 2232)
        bounds_144205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2232, 25), get_window_extent_call_result_144204, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 2232)
        getitem___144206 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2232, 12), bounds_144205, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2232)
        subscript_call_result_144207 = invoke(stypy.reporting.localization.Localization(__file__, 2232, 12), getitem___144206, int_144198)
        
        # Assigning a type to the variable 'tuple_var_assignment_139206' (line 2232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2232, 12), 'tuple_var_assignment_139206', subscript_call_result_144207)
        
        # Assigning a Name to a Name (line 2232):
        
        # Assigning a Name to a Name (line 2232):
        # Getting the type of 'tuple_var_assignment_139203' (line 2232)
        tuple_var_assignment_139203_144208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 12), 'tuple_var_assignment_139203')
        # Assigning a type to the variable 'l' (line 2232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2232, 12), 'l', tuple_var_assignment_139203_144208)
        
        # Assigning a Name to a Name (line 2232):
        
        # Assigning a Name to a Name (line 2232):
        # Getting the type of 'tuple_var_assignment_139204' (line 2232)
        tuple_var_assignment_139204_144209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 12), 'tuple_var_assignment_139204')
        # Assigning a type to the variable 'b' (line 2232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2232, 15), 'b', tuple_var_assignment_139204_144209)
        
        # Assigning a Name to a Name (line 2232):
        
        # Assigning a Name to a Name (line 2232):
        # Getting the type of 'tuple_var_assignment_139205' (line 2232)
        tuple_var_assignment_139205_144210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 12), 'tuple_var_assignment_139205')
        # Assigning a type to the variable 'w' (line 2232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2232, 18), 'w', tuple_var_assignment_139205_144210)
        
        # Assigning a Name to a Name (line 2232):
        
        # Assigning a Name to a Name (line 2232):
        # Getting the type of 'tuple_var_assignment_139206' (line 2232)
        tuple_var_assignment_139206_144211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 12), 'tuple_var_assignment_139206')
        # Assigning a type to the variable 'h' (line 2232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2232, 21), 'h', tuple_var_assignment_139206_144211)
        
        # Assigning a BinOp to a Name (line 2233):
        
        # Assigning a BinOp to a Name (line 2233):
        
        # Assigning a BinOp to a Name (line 2233):
        # Getting the type of 'l' (line 2233)
        l_144212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2233, 16), 'l')
        # Getting the type of 'w' (line 2233)
        w_144213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2233, 20), 'w')
        # Applying the binary operator '+' (line 2233)
        result_add_144214 = python_operator(stypy.reporting.localization.Localization(__file__, 2233, 16), '+', l_144212, w_144213)
        
        # Assigning a type to the variable 'r' (line 2233)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2233, 12), 'r', result_add_144214)
        
        # Assigning a BinOp to a Name (line 2234):
        
        # Assigning a BinOp to a Name (line 2234):
        
        # Assigning a BinOp to a Name (line 2234):
        # Getting the type of 'b' (line 2234)
        b_144215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2234, 16), 'b')
        # Getting the type of 'h' (line 2234)
        h_144216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2234, 20), 'h')
        # Applying the binary operator '+' (line 2234)
        result_add_144217 = python_operator(stypy.reporting.localization.Localization(__file__, 2234, 16), '+', b_144215, h_144216)
        
        # Assigning a type to the variable 't' (line 2234)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2234, 12), 't', result_add_144217)
        
        # Assigning a BinOp to a Name (line 2235):
        
        # Assigning a BinOp to a Name (line 2235):
        
        # Assigning a BinOp to a Name (line 2235):
        float_144218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2235, 17), 'float')
        # Getting the type of 'l' (line 2235)
        l_144219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2235, 24), 'l')
        # Getting the type of 'r' (line 2235)
        r_144220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2235, 28), 'r')
        # Applying the binary operator '+' (line 2235)
        result_add_144221 = python_operator(stypy.reporting.localization.Localization(__file__, 2235, 24), '+', l_144219, r_144220)
        
        # Applying the binary operator '*' (line 2235)
        result_mul_144222 = python_operator(stypy.reporting.localization.Localization(__file__, 2235, 17), '*', float_144218, result_add_144221)
        
        # Assigning a type to the variable 'xc' (line 2235)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2235, 12), 'xc', result_mul_144222)
        
        # Assigning a BinOp to a Name (line 2236):
        
        # Assigning a BinOp to a Name (line 2236):
        
        # Assigning a BinOp to a Name (line 2236):
        float_144223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2236, 17), 'float')
        # Getting the type of 'b' (line 2236)
        b_144224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 24), 'b')
        # Getting the type of 't' (line 2236)
        t_144225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 28), 't')
        # Applying the binary operator '+' (line 2236)
        result_add_144226 = python_operator(stypy.reporting.localization.Localization(__file__, 2236, 24), '+', b_144224, t_144225)
        
        # Applying the binary operator '*' (line 2236)
        result_mul_144227 = python_operator(stypy.reporting.localization.Localization(__file__, 2236, 17), '*', float_144223, result_add_144226)
        
        # Assigning a type to the variable 'yc' (line 2236)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2236, 12), 'yc', result_mul_144227)
        
        # Assigning a Call to a Name (line 2238):
        
        # Assigning a Call to a Name (line 2238):
        
        # Assigning a Call to a Name (line 2238):
        
        # Call to copy(...): (line 2238)
        # Processing the call keyword arguments (line 2238)
        kwargs_144231 = {}
        # Getting the type of 'self' (line 2238)
        self_144228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2238, 16), 'self', False)
        # Obtaining the member 'arrowprops' of a type (line 2238)
        arrowprops_144229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2238, 16), self_144228, 'arrowprops')
        # Obtaining the member 'copy' of a type (line 2238)
        copy_144230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2238, 16), arrowprops_144229, 'copy')
        # Calling copy(args, kwargs) (line 2238)
        copy_call_result_144232 = invoke(stypy.reporting.localization.Localization(__file__, 2238, 16), copy_144230, *[], **kwargs_144231)
        
        # Assigning a type to the variable 'd' (line 2238)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2238, 12), 'd', copy_call_result_144232)
        
        # Assigning a Call to a Name (line 2239):
        
        # Assigning a Call to a Name (line 2239):
        
        # Assigning a Call to a Name (line 2239):
        
        # Call to pop(...): (line 2239)
        # Processing the call arguments (line 2239)
        unicode_144235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2239, 23), 'unicode', u'mutation_scale')
        
        # Call to get_size(...): (line 2239)
        # Processing the call keyword arguments (line 2239)
        kwargs_144238 = {}
        # Getting the type of 'self' (line 2239)
        self_144236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2239, 41), 'self', False)
        # Obtaining the member 'get_size' of a type (line 2239)
        get_size_144237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2239, 41), self_144236, 'get_size')
        # Calling get_size(args, kwargs) (line 2239)
        get_size_call_result_144239 = invoke(stypy.reporting.localization.Localization(__file__, 2239, 41), get_size_144237, *[], **kwargs_144238)
        
        # Processing the call keyword arguments (line 2239)
        kwargs_144240 = {}
        # Getting the type of 'd' (line 2239)
        d_144233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2239, 17), 'd', False)
        # Obtaining the member 'pop' of a type (line 2239)
        pop_144234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2239, 17), d_144233, 'pop')
        # Calling pop(args, kwargs) (line 2239)
        pop_call_result_144241 = invoke(stypy.reporting.localization.Localization(__file__, 2239, 17), pop_144234, *[unicode_144235, get_size_call_result_144239], **kwargs_144240)
        
        # Assigning a type to the variable 'ms' (line 2239)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2239, 12), 'ms', pop_call_result_144241)
        
        # Call to set_mutation_scale(...): (line 2240)
        # Processing the call arguments (line 2240)
        # Getting the type of 'ms' (line 2240)
        ms_144245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2240, 48), 'ms', False)
        # Processing the call keyword arguments (line 2240)
        kwargs_144246 = {}
        # Getting the type of 'self' (line 2240)
        self_144242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2240, 12), 'self', False)
        # Obtaining the member 'arrow_patch' of a type (line 2240)
        arrow_patch_144243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2240, 12), self_144242, 'arrow_patch')
        # Obtaining the member 'set_mutation_scale' of a type (line 2240)
        set_mutation_scale_144244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2240, 12), arrow_patch_144243, 'set_mutation_scale')
        # Calling set_mutation_scale(args, kwargs) (line 2240)
        set_mutation_scale_call_result_144247 = invoke(stypy.reporting.localization.Localization(__file__, 2240, 12), set_mutation_scale_144244, *[ms_144245], **kwargs_144246)
        
        
        
        unicode_144248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2242, 15), 'unicode', u'arrowstyle')
        # Getting the type of 'd' (line 2242)
        d_144249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2242, 35), 'd')
        # Applying the binary operator 'notin' (line 2242)
        result_contains_144250 = python_operator(stypy.reporting.localization.Localization(__file__, 2242, 15), 'notin', unicode_144248, d_144249)
        
        # Testing the type of an if condition (line 2242)
        if_condition_144251 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2242, 12), result_contains_144250)
        # Assigning a type to the variable 'if_condition_144251' (line 2242)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2242, 12), 'if_condition_144251', if_condition_144251)
        # SSA begins for if statement (line 2242)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2245):
        
        # Assigning a Call to a Name (line 2245):
        
        # Assigning a Call to a Name (line 2245):
        
        # Call to pop(...): (line 2245)
        # Processing the call arguments (line 2245)
        unicode_144254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2245, 31), 'unicode', u'shrink')
        float_144255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2245, 41), 'float')
        # Processing the call keyword arguments (line 2245)
        kwargs_144256 = {}
        # Getting the type of 'd' (line 2245)
        d_144252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 25), 'd', False)
        # Obtaining the member 'pop' of a type (line 2245)
        pop_144253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2245, 25), d_144252, 'pop')
        # Calling pop(args, kwargs) (line 2245)
        pop_call_result_144257 = invoke(stypy.reporting.localization.Localization(__file__, 2245, 25), pop_144253, *[unicode_144254, float_144255], **kwargs_144256)
        
        # Assigning a type to the variable 'shrink' (line 2245)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2245, 16), 'shrink', pop_call_result_144257)
        
        # Assigning a Call to a Name (line 2246):
        
        # Assigning a Call to a Name (line 2246):
        
        # Assigning a Call to a Name (line 2246):
        
        # Call to pop(...): (line 2246)
        # Processing the call arguments (line 2246)
        unicode_144260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2246, 30), 'unicode', u'width')
        int_144261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2246, 39), 'int')
        # Processing the call keyword arguments (line 2246)
        kwargs_144262 = {}
        # Getting the type of 'd' (line 2246)
        d_144258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2246, 24), 'd', False)
        # Obtaining the member 'pop' of a type (line 2246)
        pop_144259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2246, 24), d_144258, 'pop')
        # Calling pop(args, kwargs) (line 2246)
        pop_call_result_144263 = invoke(stypy.reporting.localization.Localization(__file__, 2246, 24), pop_144259, *[unicode_144260, int_144261], **kwargs_144262)
        
        # Assigning a type to the variable 'width' (line 2246)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2246, 16), 'width', pop_call_result_144263)
        
        # Assigning a Call to a Name (line 2247):
        
        # Assigning a Call to a Name (line 2247):
        
        # Assigning a Call to a Name (line 2247):
        
        # Call to pop(...): (line 2247)
        # Processing the call arguments (line 2247)
        unicode_144266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2247, 34), 'unicode', u'headwidth')
        int_144267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2247, 47), 'int')
        # Processing the call keyword arguments (line 2247)
        kwargs_144268 = {}
        # Getting the type of 'd' (line 2247)
        d_144264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2247, 28), 'd', False)
        # Obtaining the member 'pop' of a type (line 2247)
        pop_144265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2247, 28), d_144264, 'pop')
        # Calling pop(args, kwargs) (line 2247)
        pop_call_result_144269 = invoke(stypy.reporting.localization.Localization(__file__, 2247, 28), pop_144265, *[unicode_144266, int_144267], **kwargs_144268)
        
        # Assigning a type to the variable 'headwidth' (line 2247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2247, 16), 'headwidth', pop_call_result_144269)
        
        # Assigning a Call to a Name (line 2249):
        
        # Assigning a Call to a Name (line 2249):
        
        # Assigning a Call to a Name (line 2249):
        
        # Call to pop(...): (line 2249)
        # Processing the call arguments (line 2249)
        unicode_144272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2249, 29), 'unicode', u'frac')
        # Getting the type of 'None' (line 2249)
        None_144273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2249, 37), 'None', False)
        # Processing the call keyword arguments (line 2249)
        kwargs_144274 = {}
        # Getting the type of 'd' (line 2249)
        d_144270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2249, 23), 'd', False)
        # Obtaining the member 'pop' of a type (line 2249)
        pop_144271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2249, 23), d_144270, 'pop')
        # Calling pop(args, kwargs) (line 2249)
        pop_call_result_144275 = invoke(stypy.reporting.localization.Localization(__file__, 2249, 23), pop_144271, *[unicode_144272, None_144273], **kwargs_144274)
        
        # Assigning a type to the variable 'frac' (line 2249)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2249, 16), 'frac', pop_call_result_144275)
        
        # Type idiom detected: calculating its left and rigth part (line 2250)
        # Getting the type of 'frac' (line 2250)
        frac_144276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2250, 16), 'frac')
        # Getting the type of 'None' (line 2250)
        None_144277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2250, 31), 'None')
        
        (may_be_144278, more_types_in_union_144279) = may_not_be_none(frac_144276, None_144277)

        if may_be_144278:

            if more_types_in_union_144279:
                # Runtime conditional SSA (line 2250)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to warn(...): (line 2251)
            # Processing the call arguments (line 2251)
            unicode_144282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2252, 24), 'unicode', u"'frac' option in 'arrowprops' is no longer supported; use 'headlength' to set the head length in points.")
            # Processing the call keyword arguments (line 2251)
            kwargs_144283 = {}
            # Getting the type of 'warnings' (line 2251)
            warnings_144280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2251, 20), 'warnings', False)
            # Obtaining the member 'warn' of a type (line 2251)
            warn_144281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2251, 20), warnings_144280, 'warn')
            # Calling warn(args, kwargs) (line 2251)
            warn_call_result_144284 = invoke(stypy.reporting.localization.Localization(__file__, 2251, 20), warn_144281, *[unicode_144282], **kwargs_144283)
            

            if more_types_in_union_144279:
                # SSA join for if statement (line 2250)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 2254):
        
        # Assigning a Call to a Name (line 2254):
        
        # Assigning a Call to a Name (line 2254):
        
        # Call to pop(...): (line 2254)
        # Processing the call arguments (line 2254)
        unicode_144287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2254, 35), 'unicode', u'headlength')
        int_144288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2254, 49), 'int')
        # Processing the call keyword arguments (line 2254)
        kwargs_144289 = {}
        # Getting the type of 'd' (line 2254)
        d_144285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2254, 29), 'd', False)
        # Obtaining the member 'pop' of a type (line 2254)
        pop_144286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2254, 29), d_144285, 'pop')
        # Calling pop(args, kwargs) (line 2254)
        pop_call_result_144290 = invoke(stypy.reporting.localization.Localization(__file__, 2254, 29), pop_144286, *[unicode_144287, int_144288], **kwargs_144289)
        
        # Assigning a type to the variable 'headlength' (line 2254)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2254, 16), 'headlength', pop_call_result_144290)
        
        # Assigning a Call to a Name (line 2257):
        
        # Assigning a Call to a Name (line 2257):
        
        # Assigning a Call to a Name (line 2257):
        
        # Call to dict(...): (line 2257)
        # Processing the call keyword arguments (line 2257)
        # Getting the type of 'headlength' (line 2257)
        headlength_144292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2257, 43), 'headlength', False)
        # Getting the type of 'ms' (line 2257)
        ms_144293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2257, 56), 'ms', False)
        # Applying the binary operator 'div' (line 2257)
        result_div_144294 = python_operator(stypy.reporting.localization.Localization(__file__, 2257, 43), 'div', headlength_144292, ms_144293)
        
        keyword_144295 = result_div_144294
        # Getting the type of 'headwidth' (line 2258)
        headwidth_144296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2258, 42), 'headwidth', False)
        # Getting the type of 'ms' (line 2258)
        ms_144297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2258, 54), 'ms', False)
        # Applying the binary operator 'div' (line 2258)
        result_div_144298 = python_operator(stypy.reporting.localization.Localization(__file__, 2258, 42), 'div', headwidth_144296, ms_144297)
        
        keyword_144299 = result_div_144298
        # Getting the type of 'width' (line 2259)
        width_144300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2259, 42), 'width', False)
        # Getting the type of 'ms' (line 2259)
        ms_144301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2259, 50), 'ms', False)
        # Applying the binary operator 'div' (line 2259)
        result_div_144302 = python_operator(stypy.reporting.localization.Localization(__file__, 2259, 42), 'div', width_144300, ms_144301)
        
        keyword_144303 = result_div_144302
        kwargs_144304 = {'head_width': keyword_144299, 'head_length': keyword_144295, 'tail_width': keyword_144303}
        # Getting the type of 'dict' (line 2257)
        dict_144291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2257, 26), 'dict', False)
        # Calling dict(args, kwargs) (line 2257)
        dict_call_result_144305 = invoke(stypy.reporting.localization.Localization(__file__, 2257, 26), dict_144291, *[], **kwargs_144304)
        
        # Assigning a type to the variable 'stylekw' (line 2257)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2257, 16), 'stylekw', dict_call_result_144305)
        
        # Call to set_arrowstyle(...): (line 2261)
        # Processing the call arguments (line 2261)
        unicode_144309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2261, 48), 'unicode', u'simple')
        # Processing the call keyword arguments (line 2261)
        # Getting the type of 'stylekw' (line 2261)
        stylekw_144310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 60), 'stylekw', False)
        kwargs_144311 = {'stylekw_144310': stylekw_144310}
        # Getting the type of 'self' (line 2261)
        self_144306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 16), 'self', False)
        # Obtaining the member 'arrow_patch' of a type (line 2261)
        arrow_patch_144307 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2261, 16), self_144306, 'arrow_patch')
        # Obtaining the member 'set_arrowstyle' of a type (line 2261)
        set_arrowstyle_144308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2261, 16), arrow_patch_144307, 'set_arrowstyle')
        # Calling set_arrowstyle(args, kwargs) (line 2261)
        set_arrowstyle_call_result_144312 = invoke(stypy.reporting.localization.Localization(__file__, 2261, 16), set_arrowstyle_144308, *[unicode_144309], **kwargs_144311)
        
        
        # Assigning a Tuple to a Name (line 2266):
        
        # Assigning a Tuple to a Name (line 2266):
        
        # Assigning a Tuple to a Name (line 2266):
        
        # Obtaining an instance of the builtin type 'tuple' (line 2266)
        tuple_144313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2266, 24), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2266)
        # Adding element type (line 2266)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2266)
        tuple_144314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2266, 25), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2266)
        # Adding element type (line 2266)
        # Getting the type of 'l' (line 2266)
        l_144315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2266, 25), 'l')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2266, 25), tuple_144314, l_144315)
        # Adding element type (line 2266)
        int_144316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2266, 28), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2266, 25), tuple_144314, int_144316)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2266, 24), tuple_144313, tuple_144314)
        # Adding element type (line 2266)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2266)
        tuple_144317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2266, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2266)
        # Adding element type (line 2266)
        # Getting the type of 'xc' (line 2266)
        xc_144318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2266, 33), 'xc')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2266, 33), tuple_144317, xc_144318)
        # Adding element type (line 2266)
        float_144319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2266, 37), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2266, 33), tuple_144317, float_144319)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2266, 24), tuple_144313, tuple_144317)
        # Adding element type (line 2266)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2266)
        tuple_144320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2266, 44), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2266)
        # Adding element type (line 2266)
        # Getting the type of 'r' (line 2266)
        r_144321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2266, 44), 'r')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2266, 44), tuple_144320, r_144321)
        # Adding element type (line 2266)
        int_144322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2266, 47), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2266, 44), tuple_144320, int_144322)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2266, 24), tuple_144313, tuple_144320)
        
        # Assigning a type to the variable 'xpos' (line 2266)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2266, 16), 'xpos', tuple_144313)
        
        # Assigning a Tuple to a Name (line 2267):
        
        # Assigning a Tuple to a Name (line 2267):
        
        # Assigning a Tuple to a Name (line 2267):
        
        # Obtaining an instance of the builtin type 'tuple' (line 2267)
        tuple_144323 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2267, 24), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2267)
        # Adding element type (line 2267)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2267)
        tuple_144324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2267, 25), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2267)
        # Adding element type (line 2267)
        # Getting the type of 'b' (line 2267)
        b_144325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2267, 25), 'b')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2267, 25), tuple_144324, b_144325)
        # Adding element type (line 2267)
        int_144326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2267, 28), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2267, 25), tuple_144324, int_144326)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2267, 24), tuple_144323, tuple_144324)
        # Adding element type (line 2267)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2267)
        tuple_144327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2267, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2267)
        # Adding element type (line 2267)
        # Getting the type of 'yc' (line 2267)
        yc_144328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2267, 33), 'yc')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2267, 33), tuple_144327, yc_144328)
        # Adding element type (line 2267)
        float_144329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2267, 37), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2267, 33), tuple_144327, float_144329)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2267, 24), tuple_144323, tuple_144327)
        # Adding element type (line 2267)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2267)
        tuple_144330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2267, 44), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2267)
        # Adding element type (line 2267)
        # Getting the type of 't' (line 2267)
        t_144331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2267, 44), 't')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2267, 44), tuple_144330, t_144331)
        # Adding element type (line 2267)
        int_144332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2267, 47), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2267, 44), tuple_144330, int_144332)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2267, 24), tuple_144323, tuple_144330)
        
        # Assigning a type to the variable 'ypos' (line 2267)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2267, 16), 'ypos', tuple_144323)
        
        # Assigning a Call to a Tuple (line 2269):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to min(...): (line 2269)
        # Processing the call arguments (line 2269)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 2269, 38, True)
        # Calculating comprehension expression
        # Getting the type of 'xpos' (line 2269)
        xpos_144345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 73), 'xpos', False)
        comprehension_144346 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2269, 38), xpos_144345)
        # Assigning a type to the variable 'val' (line 2269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2269, 38), 'val', comprehension_144346)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2269)
        tuple_144334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2269, 39), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2269)
        # Adding element type (line 2269)
        
        # Call to abs(...): (line 2269)
        # Processing the call arguments (line 2269)
        
        # Obtaining the type of the subscript
        int_144336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2269, 47), 'int')
        # Getting the type of 'val' (line 2269)
        val_144337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 43), 'val', False)
        # Obtaining the member '__getitem__' of a type (line 2269)
        getitem___144338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2269, 43), val_144337, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2269)
        subscript_call_result_144339 = invoke(stypy.reporting.localization.Localization(__file__, 2269, 43), getitem___144338, int_144336)
        
        # Getting the type of 'x0' (line 2269)
        x0_144340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 52), 'x0', False)
        # Applying the binary operator '-' (line 2269)
        result_sub_144341 = python_operator(stypy.reporting.localization.Localization(__file__, 2269, 43), '-', subscript_call_result_144339, x0_144340)
        
        # Processing the call keyword arguments (line 2269)
        kwargs_144342 = {}
        # Getting the type of 'abs' (line 2269)
        abs_144335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 39), 'abs', False)
        # Calling abs(args, kwargs) (line 2269)
        abs_call_result_144343 = invoke(stypy.reporting.localization.Localization(__file__, 2269, 39), abs_144335, *[result_sub_144341], **kwargs_144342)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2269, 39), tuple_144334, abs_call_result_144343)
        # Adding element type (line 2269)
        # Getting the type of 'val' (line 2269)
        val_144344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 57), 'val', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2269, 39), tuple_144334, val_144344)
        
        list_144347 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2269, 38), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2269, 38), list_144347, tuple_144334)
        # Processing the call keyword arguments (line 2269)
        kwargs_144348 = {}
        # Getting the type of 'min' (line 2269)
        min_144333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 34), 'min', False)
        # Calling min(args, kwargs) (line 2269)
        min_call_result_144349 = invoke(stypy.reporting.localization.Localization(__file__, 2269, 34), min_144333, *[list_144347], **kwargs_144348)
        
        # Assigning a type to the variable 'call_assignment_139207' (line 2269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2269, 16), 'call_assignment_139207', min_call_result_144349)
        
        # Assigning a Call to a Name (line 2269):
        
        # Assigning a Call to a Name (line 2269):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_144352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2269, 16), 'int')
        # Processing the call keyword arguments
        kwargs_144353 = {}
        # Getting the type of 'call_assignment_139207' (line 2269)
        call_assignment_139207_144350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 16), 'call_assignment_139207', False)
        # Obtaining the member '__getitem__' of a type (line 2269)
        getitem___144351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2269, 16), call_assignment_139207_144350, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_144354 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___144351, *[int_144352], **kwargs_144353)
        
        # Assigning a type to the variable 'call_assignment_139208' (line 2269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2269, 16), 'call_assignment_139208', getitem___call_result_144354)
        
        # Assigning a Name to a Name (line 2269):
        
        # Assigning a Name to a Name (line 2269):
        # Getting the type of 'call_assignment_139208' (line 2269)
        call_assignment_139208_144355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 16), 'call_assignment_139208')
        # Assigning a type to the variable '_' (line 2269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2269, 16), '_', call_assignment_139208_144355)
        
        # Assigning a Call to a Name (line 2269):
        
        # Assigning a Call to a Name (line 2269):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_144358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2269, 16), 'int')
        # Processing the call keyword arguments
        kwargs_144359 = {}
        # Getting the type of 'call_assignment_139207' (line 2269)
        call_assignment_139207_144356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 16), 'call_assignment_139207', False)
        # Obtaining the member '__getitem__' of a type (line 2269)
        getitem___144357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2269, 16), call_assignment_139207_144356, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_144360 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___144357, *[int_144358], **kwargs_144359)
        
        # Assigning a type to the variable 'call_assignment_139209' (line 2269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2269, 16), 'call_assignment_139209', getitem___call_result_144360)
        
        # Assigning a Name to a Tuple (line 2269):
        
        # Assigning a Subscript to a Name (line 2269):
        
        # Obtaining the type of the subscript
        int_144361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2269, 16), 'int')
        # Getting the type of 'call_assignment_139209' (line 2269)
        call_assignment_139209_144362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 16), 'call_assignment_139209')
        # Obtaining the member '__getitem__' of a type (line 2269)
        getitem___144363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2269, 16), call_assignment_139209_144362, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2269)
        subscript_call_result_144364 = invoke(stypy.reporting.localization.Localization(__file__, 2269, 16), getitem___144363, int_144361)
        
        # Assigning a type to the variable 'tuple_var_assignment_139217' (line 2269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2269, 16), 'tuple_var_assignment_139217', subscript_call_result_144364)
        
        # Assigning a Subscript to a Name (line 2269):
        
        # Obtaining the type of the subscript
        int_144365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2269, 16), 'int')
        # Getting the type of 'call_assignment_139209' (line 2269)
        call_assignment_139209_144366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 16), 'call_assignment_139209')
        # Obtaining the member '__getitem__' of a type (line 2269)
        getitem___144367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2269, 16), call_assignment_139209_144366, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2269)
        subscript_call_result_144368 = invoke(stypy.reporting.localization.Localization(__file__, 2269, 16), getitem___144367, int_144365)
        
        # Assigning a type to the variable 'tuple_var_assignment_139218' (line 2269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2269, 16), 'tuple_var_assignment_139218', subscript_call_result_144368)
        
        # Assigning a Name to a Name (line 2269):
        # Getting the type of 'tuple_var_assignment_139217' (line 2269)
        tuple_var_assignment_139217_144369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 16), 'tuple_var_assignment_139217')
        # Assigning a type to the variable 'x' (line 2269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2269, 20), 'x', tuple_var_assignment_139217_144369)
        
        # Assigning a Name to a Name (line 2269):
        # Getting the type of 'tuple_var_assignment_139218' (line 2269)
        tuple_var_assignment_139218_144370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 16), 'tuple_var_assignment_139218')
        # Assigning a type to the variable 'relposx' (line 2269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2269, 23), 'relposx', tuple_var_assignment_139218_144370)
        
        # Assigning a Call to a Tuple (line 2270):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to min(...): (line 2270)
        # Processing the call arguments (line 2270)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 2270, 38, True)
        # Calculating comprehension expression
        # Getting the type of 'ypos' (line 2270)
        ypos_144383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 73), 'ypos', False)
        comprehension_144384 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2270, 38), ypos_144383)
        # Assigning a type to the variable 'val' (line 2270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2270, 38), 'val', comprehension_144384)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2270)
        tuple_144372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2270, 39), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2270)
        # Adding element type (line 2270)
        
        # Call to abs(...): (line 2270)
        # Processing the call arguments (line 2270)
        
        # Obtaining the type of the subscript
        int_144374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2270, 47), 'int')
        # Getting the type of 'val' (line 2270)
        val_144375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 43), 'val', False)
        # Obtaining the member '__getitem__' of a type (line 2270)
        getitem___144376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2270, 43), val_144375, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2270)
        subscript_call_result_144377 = invoke(stypy.reporting.localization.Localization(__file__, 2270, 43), getitem___144376, int_144374)
        
        # Getting the type of 'y0' (line 2270)
        y0_144378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 52), 'y0', False)
        # Applying the binary operator '-' (line 2270)
        result_sub_144379 = python_operator(stypy.reporting.localization.Localization(__file__, 2270, 43), '-', subscript_call_result_144377, y0_144378)
        
        # Processing the call keyword arguments (line 2270)
        kwargs_144380 = {}
        # Getting the type of 'abs' (line 2270)
        abs_144373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 39), 'abs', False)
        # Calling abs(args, kwargs) (line 2270)
        abs_call_result_144381 = invoke(stypy.reporting.localization.Localization(__file__, 2270, 39), abs_144373, *[result_sub_144379], **kwargs_144380)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2270, 39), tuple_144372, abs_call_result_144381)
        # Adding element type (line 2270)
        # Getting the type of 'val' (line 2270)
        val_144382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 57), 'val', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2270, 39), tuple_144372, val_144382)
        
        list_144385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2270, 38), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2270, 38), list_144385, tuple_144372)
        # Processing the call keyword arguments (line 2270)
        kwargs_144386 = {}
        # Getting the type of 'min' (line 2270)
        min_144371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 34), 'min', False)
        # Calling min(args, kwargs) (line 2270)
        min_call_result_144387 = invoke(stypy.reporting.localization.Localization(__file__, 2270, 34), min_144371, *[list_144385], **kwargs_144386)
        
        # Assigning a type to the variable 'call_assignment_139210' (line 2270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2270, 16), 'call_assignment_139210', min_call_result_144387)
        
        # Assigning a Call to a Name (line 2270):
        
        # Assigning a Call to a Name (line 2270):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_144390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2270, 16), 'int')
        # Processing the call keyword arguments
        kwargs_144391 = {}
        # Getting the type of 'call_assignment_139210' (line 2270)
        call_assignment_139210_144388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 16), 'call_assignment_139210', False)
        # Obtaining the member '__getitem__' of a type (line 2270)
        getitem___144389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2270, 16), call_assignment_139210_144388, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_144392 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___144389, *[int_144390], **kwargs_144391)
        
        # Assigning a type to the variable 'call_assignment_139211' (line 2270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2270, 16), 'call_assignment_139211', getitem___call_result_144392)
        
        # Assigning a Name to a Name (line 2270):
        
        # Assigning a Name to a Name (line 2270):
        # Getting the type of 'call_assignment_139211' (line 2270)
        call_assignment_139211_144393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 16), 'call_assignment_139211')
        # Assigning a type to the variable '_' (line 2270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2270, 16), '_', call_assignment_139211_144393)
        
        # Assigning a Call to a Name (line 2270):
        
        # Assigning a Call to a Name (line 2270):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_144396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2270, 16), 'int')
        # Processing the call keyword arguments
        kwargs_144397 = {}
        # Getting the type of 'call_assignment_139210' (line 2270)
        call_assignment_139210_144394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 16), 'call_assignment_139210', False)
        # Obtaining the member '__getitem__' of a type (line 2270)
        getitem___144395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2270, 16), call_assignment_139210_144394, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_144398 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___144395, *[int_144396], **kwargs_144397)
        
        # Assigning a type to the variable 'call_assignment_139212' (line 2270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2270, 16), 'call_assignment_139212', getitem___call_result_144398)
        
        # Assigning a Name to a Tuple (line 2270):
        
        # Assigning a Subscript to a Name (line 2270):
        
        # Obtaining the type of the subscript
        int_144399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2270, 16), 'int')
        # Getting the type of 'call_assignment_139212' (line 2270)
        call_assignment_139212_144400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 16), 'call_assignment_139212')
        # Obtaining the member '__getitem__' of a type (line 2270)
        getitem___144401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2270, 16), call_assignment_139212_144400, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2270)
        subscript_call_result_144402 = invoke(stypy.reporting.localization.Localization(__file__, 2270, 16), getitem___144401, int_144399)
        
        # Assigning a type to the variable 'tuple_var_assignment_139219' (line 2270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2270, 16), 'tuple_var_assignment_139219', subscript_call_result_144402)
        
        # Assigning a Subscript to a Name (line 2270):
        
        # Obtaining the type of the subscript
        int_144403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2270, 16), 'int')
        # Getting the type of 'call_assignment_139212' (line 2270)
        call_assignment_139212_144404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 16), 'call_assignment_139212')
        # Obtaining the member '__getitem__' of a type (line 2270)
        getitem___144405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2270, 16), call_assignment_139212_144404, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2270)
        subscript_call_result_144406 = invoke(stypy.reporting.localization.Localization(__file__, 2270, 16), getitem___144405, int_144403)
        
        # Assigning a type to the variable 'tuple_var_assignment_139220' (line 2270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2270, 16), 'tuple_var_assignment_139220', subscript_call_result_144406)
        
        # Assigning a Name to a Name (line 2270):
        # Getting the type of 'tuple_var_assignment_139219' (line 2270)
        tuple_var_assignment_139219_144407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 16), 'tuple_var_assignment_139219')
        # Assigning a type to the variable 'y' (line 2270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2270, 20), 'y', tuple_var_assignment_139219_144407)
        
        # Assigning a Name to a Name (line 2270):
        # Getting the type of 'tuple_var_assignment_139220' (line 2270)
        tuple_var_assignment_139220_144408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 16), 'tuple_var_assignment_139220')
        # Assigning a type to the variable 'relposy' (line 2270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2270, 23), 'relposy', tuple_var_assignment_139220_144408)
        
        # Assigning a Tuple to a Attribute (line 2272):
        
        # Assigning a Tuple to a Attribute (line 2272):
        
        # Assigning a Tuple to a Attribute (line 2272):
        
        # Obtaining an instance of the builtin type 'tuple' (line 2272)
        tuple_144409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2272, 38), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2272)
        # Adding element type (line 2272)
        # Getting the type of 'relposx' (line 2272)
        relposx_144410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2272, 38), 'relposx')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2272, 38), tuple_144409, relposx_144410)
        # Adding element type (line 2272)
        # Getting the type of 'relposy' (line 2272)
        relposy_144411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2272, 47), 'relposy')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2272, 38), tuple_144409, relposy_144411)
        
        # Getting the type of 'self' (line 2272)
        self_144412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2272, 16), 'self')
        # Setting the type of the member '_arrow_relpos' of a type (line 2272)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2272, 16), self_144412, '_arrow_relpos', tuple_144409)
        
        # Assigning a Call to a Name (line 2274):
        
        # Assigning a Call to a Name (line 2274):
        
        # Assigning a Call to a Name (line 2274):
        
        # Call to hypot(...): (line 2274)
        # Processing the call arguments (line 2274)
        # Getting the type of 'y' (line 2274)
        y_144415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2274, 30), 'y', False)
        # Getting the type of 'y0' (line 2274)
        y0_144416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2274, 34), 'y0', False)
        # Applying the binary operator '-' (line 2274)
        result_sub_144417 = python_operator(stypy.reporting.localization.Localization(__file__, 2274, 30), '-', y_144415, y0_144416)
        
        # Getting the type of 'x' (line 2274)
        x_144418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2274, 40), 'x', False)
        # Getting the type of 'x0' (line 2274)
        x0_144419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2274, 44), 'x0', False)
        # Applying the binary operator '-' (line 2274)
        result_sub_144420 = python_operator(stypy.reporting.localization.Localization(__file__, 2274, 40), '-', x_144418, x0_144419)
        
        # Processing the call keyword arguments (line 2274)
        kwargs_144421 = {}
        # Getting the type of 'np' (line 2274)
        np_144413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2274, 20), 'np', False)
        # Obtaining the member 'hypot' of a type (line 2274)
        hypot_144414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2274, 20), np_144413, 'hypot')
        # Calling hypot(args, kwargs) (line 2274)
        hypot_call_result_144422 = invoke(stypy.reporting.localization.Localization(__file__, 2274, 20), hypot_144414, *[result_sub_144417, result_sub_144420], **kwargs_144421)
        
        # Assigning a type to the variable 'r' (line 2274)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2274, 16), 'r', hypot_call_result_144422)
        
        # Assigning a BinOp to a Name (line 2275):
        
        # Assigning a BinOp to a Name (line 2275):
        
        # Assigning a BinOp to a Name (line 2275):
        # Getting the type of 'shrink' (line 2275)
        shrink_144423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2275, 29), 'shrink')
        # Getting the type of 'r' (line 2275)
        r_144424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2275, 38), 'r')
        # Applying the binary operator '*' (line 2275)
        result_mul_144425 = python_operator(stypy.reporting.localization.Localization(__file__, 2275, 29), '*', shrink_144423, r_144424)
        
        
        # Call to points_to_pixels(...): (line 2275)
        # Processing the call arguments (line 2275)
        int_144428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2275, 68), 'int')
        # Processing the call keyword arguments (line 2275)
        kwargs_144429 = {}
        # Getting the type of 'renderer' (line 2275)
        renderer_144426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2275, 42), 'renderer', False)
        # Obtaining the member 'points_to_pixels' of a type (line 2275)
        points_to_pixels_144427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2275, 42), renderer_144426, 'points_to_pixels')
        # Calling points_to_pixels(args, kwargs) (line 2275)
        points_to_pixels_call_result_144430 = invoke(stypy.reporting.localization.Localization(__file__, 2275, 42), points_to_pixels_144427, *[int_144428], **kwargs_144429)
        
        # Applying the binary operator 'div' (line 2275)
        result_div_144431 = python_operator(stypy.reporting.localization.Localization(__file__, 2275, 40), 'div', result_mul_144425, points_to_pixels_call_result_144430)
        
        # Assigning a type to the variable 'shrink_pts' (line 2275)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2275, 16), 'shrink_pts', result_div_144431)
        
        # Assigning a Name to a Attribute (line 2276):
        
        # Assigning a Name to a Attribute (line 2276):
        
        # Assigning a Name to a Attribute (line 2276):
        # Getting the type of 'shrink_pts' (line 2276)
        shrink_pts_144432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 43), 'shrink_pts')
        # Getting the type of 'self' (line 2276)
        self_144433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 16), 'self')
        # Obtaining the member 'arrow_patch' of a type (line 2276)
        arrow_patch_144434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2276, 16), self_144433, 'arrow_patch')
        # Setting the type of the member 'shrinkA' of a type (line 2276)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2276, 16), arrow_patch_144434, 'shrinkA', shrink_pts_144432)
        
        # Assigning a Name to a Attribute (line 2277):
        
        # Assigning a Name to a Attribute (line 2277):
        
        # Assigning a Name to a Attribute (line 2277):
        # Getting the type of 'shrink_pts' (line 2277)
        shrink_pts_144435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2277, 43), 'shrink_pts')
        # Getting the type of 'self' (line 2277)
        self_144436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2277, 16), 'self')
        # Obtaining the member 'arrow_patch' of a type (line 2277)
        arrow_patch_144437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2277, 16), self_144436, 'arrow_patch')
        # Setting the type of the member 'shrinkB' of a type (line 2277)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2277, 16), arrow_patch_144437, 'shrinkB', shrink_pts_144435)
        # SSA join for if statement (line 2242)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 2282):
        
        # Assigning a Attribute to a Name (line 2282):
        
        # Assigning a Attribute to a Name (line 2282):
        # Getting the type of 'self' (line 2282)
        self_144438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2282, 21), 'self')
        # Obtaining the member '_arrow_relpos' of a type (line 2282)
        _arrow_relpos_144439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2282, 21), self_144438, '_arrow_relpos')
        # Assigning a type to the variable 'relpos' (line 2282)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2282, 12), 'relpos', _arrow_relpos_144439)
        
        # Assigning a Call to a Name (line 2283):
        
        # Assigning a Call to a Name (line 2283):
        
        # Assigning a Call to a Name (line 2283):
        
        # Call to get_window_extent(...): (line 2283)
        # Processing the call arguments (line 2283)
        # Getting the type of 'self' (line 2283)
        self_144442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2283, 42), 'self', False)
        # Getting the type of 'renderer' (line 2283)
        renderer_144443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2283, 48), 'renderer', False)
        # Processing the call keyword arguments (line 2283)
        kwargs_144444 = {}
        # Getting the type of 'Text' (line 2283)
        Text_144440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2283, 19), 'Text', False)
        # Obtaining the member 'get_window_extent' of a type (line 2283)
        get_window_extent_144441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2283, 19), Text_144440, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 2283)
        get_window_extent_call_result_144445 = invoke(stypy.reporting.localization.Localization(__file__, 2283, 19), get_window_extent_144441, *[self_144442, renderer_144443], **kwargs_144444)
        
        # Assigning a type to the variable 'bbox' (line 2283)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2283, 12), 'bbox', get_window_extent_call_result_144445)
        
        # Assigning a BinOp to a Name (line 2284):
        
        # Assigning a BinOp to a Name (line 2284):
        
        # Assigning a BinOp to a Name (line 2284):
        # Getting the type of 'bbox' (line 2284)
        bbox_144446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2284, 18), 'bbox')
        # Obtaining the member 'x0' of a type (line 2284)
        x0_144447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2284, 18), bbox_144446, 'x0')
        # Getting the type of 'bbox' (line 2284)
        bbox_144448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2284, 28), 'bbox')
        # Obtaining the member 'width' of a type (line 2284)
        width_144449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2284, 28), bbox_144448, 'width')
        
        # Obtaining the type of the subscript
        int_144450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2284, 48), 'int')
        # Getting the type of 'relpos' (line 2284)
        relpos_144451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2284, 41), 'relpos')
        # Obtaining the member '__getitem__' of a type (line 2284)
        getitem___144452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2284, 41), relpos_144451, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2284)
        subscript_call_result_144453 = invoke(stypy.reporting.localization.Localization(__file__, 2284, 41), getitem___144452, int_144450)
        
        # Applying the binary operator '*' (line 2284)
        result_mul_144454 = python_operator(stypy.reporting.localization.Localization(__file__, 2284, 28), '*', width_144449, subscript_call_result_144453)
        
        # Applying the binary operator '+' (line 2284)
        result_add_144455 = python_operator(stypy.reporting.localization.Localization(__file__, 2284, 18), '+', x0_144447, result_mul_144454)
        
        # Assigning a type to the variable 'ox0' (line 2284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2284, 12), 'ox0', result_add_144455)
        
        # Assigning a BinOp to a Name (line 2285):
        
        # Assigning a BinOp to a Name (line 2285):
        
        # Assigning a BinOp to a Name (line 2285):
        # Getting the type of 'bbox' (line 2285)
        bbox_144456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2285, 18), 'bbox')
        # Obtaining the member 'y0' of a type (line 2285)
        y0_144457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2285, 18), bbox_144456, 'y0')
        # Getting the type of 'bbox' (line 2285)
        bbox_144458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2285, 28), 'bbox')
        # Obtaining the member 'height' of a type (line 2285)
        height_144459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2285, 28), bbox_144458, 'height')
        
        # Obtaining the type of the subscript
        int_144460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2285, 49), 'int')
        # Getting the type of 'relpos' (line 2285)
        relpos_144461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2285, 42), 'relpos')
        # Obtaining the member '__getitem__' of a type (line 2285)
        getitem___144462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2285, 42), relpos_144461, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2285)
        subscript_call_result_144463 = invoke(stypy.reporting.localization.Localization(__file__, 2285, 42), getitem___144462, int_144460)
        
        # Applying the binary operator '*' (line 2285)
        result_mul_144464 = python_operator(stypy.reporting.localization.Localization(__file__, 2285, 28), '*', height_144459, subscript_call_result_144463)
        
        # Applying the binary operator '+' (line 2285)
        result_add_144465 = python_operator(stypy.reporting.localization.Localization(__file__, 2285, 18), '+', y0_144457, result_mul_144464)
        
        # Assigning a type to the variable 'oy0' (line 2285)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2285, 12), 'oy0', result_add_144465)
        
        # Call to set_positions(...): (line 2293)
        # Processing the call arguments (line 2293)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2293)
        tuple_144469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2293, 44), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2293)
        # Adding element type (line 2293)
        # Getting the type of 'ox0' (line 2293)
        ox0_144470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 44), 'ox0', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2293, 44), tuple_144469, ox0_144470)
        # Adding element type (line 2293)
        # Getting the type of 'oy0' (line 2293)
        oy0_144471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 49), 'oy0', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2293, 44), tuple_144469, oy0_144471)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 2293)
        tuple_144472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2293, 56), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2293)
        # Adding element type (line 2293)
        # Getting the type of 'ox1' (line 2293)
        ox1_144473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 56), 'ox1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2293, 56), tuple_144472, ox1_144473)
        # Adding element type (line 2293)
        # Getting the type of 'oy1' (line 2293)
        oy1_144474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 61), 'oy1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2293, 56), tuple_144472, oy1_144474)
        
        # Processing the call keyword arguments (line 2293)
        kwargs_144475 = {}
        # Getting the type of 'self' (line 2293)
        self_144466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 12), 'self', False)
        # Obtaining the member 'arrow_patch' of a type (line 2293)
        arrow_patch_144467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2293, 12), self_144466, 'arrow_patch')
        # Obtaining the member 'set_positions' of a type (line 2293)
        set_positions_144468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2293, 12), arrow_patch_144467, 'set_positions')
        # Calling set_positions(args, kwargs) (line 2293)
        set_positions_call_result_144476 = invoke(stypy.reporting.localization.Localization(__file__, 2293, 12), set_positions_144468, *[tuple_144469, tuple_144472], **kwargs_144475)
        
        
        
        unicode_144477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2295, 15), 'unicode', u'patchA')
        # Getting the type of 'd' (line 2295)
        d_144478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2295, 27), 'd')
        # Applying the binary operator 'in' (line 2295)
        result_contains_144479 = python_operator(stypy.reporting.localization.Localization(__file__, 2295, 15), 'in', unicode_144477, d_144478)
        
        # Testing the type of an if condition (line 2295)
        if_condition_144480 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2295, 12), result_contains_144479)
        # Assigning a type to the variable 'if_condition_144480' (line 2295)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2295, 12), 'if_condition_144480', if_condition_144480)
        # SSA begins for if statement (line 2295)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_patchA(...): (line 2296)
        # Processing the call arguments (line 2296)
        
        # Call to pop(...): (line 2296)
        # Processing the call arguments (line 2296)
        unicode_144486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2296, 50), 'unicode', u'patchA')
        # Processing the call keyword arguments (line 2296)
        kwargs_144487 = {}
        # Getting the type of 'd' (line 2296)
        d_144484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2296, 44), 'd', False)
        # Obtaining the member 'pop' of a type (line 2296)
        pop_144485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2296, 44), d_144484, 'pop')
        # Calling pop(args, kwargs) (line 2296)
        pop_call_result_144488 = invoke(stypy.reporting.localization.Localization(__file__, 2296, 44), pop_144485, *[unicode_144486], **kwargs_144487)
        
        # Processing the call keyword arguments (line 2296)
        kwargs_144489 = {}
        # Getting the type of 'self' (line 2296)
        self_144481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2296, 16), 'self', False)
        # Obtaining the member 'arrow_patch' of a type (line 2296)
        arrow_patch_144482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2296, 16), self_144481, 'arrow_patch')
        # Obtaining the member 'set_patchA' of a type (line 2296)
        set_patchA_144483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2296, 16), arrow_patch_144482, 'set_patchA')
        # Calling set_patchA(args, kwargs) (line 2296)
        set_patchA_call_result_144490 = invoke(stypy.reporting.localization.Localization(__file__, 2296, 16), set_patchA_144483, *[pop_call_result_144488], **kwargs_144489)
        
        # SSA branch for the else part of an if statement (line 2295)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'self' (line 2298)
        self_144491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 19), 'self')
        # Obtaining the member '_bbox_patch' of a type (line 2298)
        _bbox_patch_144492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2298, 19), self_144491, '_bbox_patch')
        # Testing the type of an if condition (line 2298)
        if_condition_144493 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2298, 16), _bbox_patch_144492)
        # Assigning a type to the variable 'if_condition_144493' (line 2298)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2298, 16), 'if_condition_144493', if_condition_144493)
        # SSA begins for if statement (line 2298)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_patchA(...): (line 2299)
        # Processing the call arguments (line 2299)
        # Getting the type of 'self' (line 2299)
        self_144497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 48), 'self', False)
        # Obtaining the member '_bbox_patch' of a type (line 2299)
        _bbox_patch_144498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2299, 48), self_144497, '_bbox_patch')
        # Processing the call keyword arguments (line 2299)
        kwargs_144499 = {}
        # Getting the type of 'self' (line 2299)
        self_144494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 20), 'self', False)
        # Obtaining the member 'arrow_patch' of a type (line 2299)
        arrow_patch_144495 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2299, 20), self_144494, 'arrow_patch')
        # Obtaining the member 'set_patchA' of a type (line 2299)
        set_patchA_144496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2299, 20), arrow_patch_144495, 'set_patchA')
        # Calling set_patchA(args, kwargs) (line 2299)
        set_patchA_call_result_144500 = invoke(stypy.reporting.localization.Localization(__file__, 2299, 20), set_patchA_144496, *[_bbox_patch_144498], **kwargs_144499)
        
        # SSA branch for the else part of an if statement (line 2298)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 2301):
        
        # Assigning a Call to a Name (line 2301):
        
        # Assigning a Call to a Name (line 2301):
        
        # Call to points_to_pixels(...): (line 2301)
        # Processing the call arguments (line 2301)
        int_144503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2301, 52), 'int')
        # Processing the call keyword arguments (line 2301)
        kwargs_144504 = {}
        # Getting the type of 'renderer' (line 2301)
        renderer_144501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2301, 26), 'renderer', False)
        # Obtaining the member 'points_to_pixels' of a type (line 2301)
        points_to_pixels_144502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2301, 26), renderer_144501, 'points_to_pixels')
        # Calling points_to_pixels(args, kwargs) (line 2301)
        points_to_pixels_call_result_144505 = invoke(stypy.reporting.localization.Localization(__file__, 2301, 26), points_to_pixels_144502, *[int_144503], **kwargs_144504)
        
        # Assigning a type to the variable 'pad' (line 2301)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2301, 20), 'pad', points_to_pixels_call_result_144505)
        
        
        
        # Call to get_text(...): (line 2302)
        # Processing the call keyword arguments (line 2302)
        kwargs_144508 = {}
        # Getting the type of 'self' (line 2302)
        self_144506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2302, 23), 'self', False)
        # Obtaining the member 'get_text' of a type (line 2302)
        get_text_144507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2302, 23), self_144506, 'get_text')
        # Calling get_text(args, kwargs) (line 2302)
        get_text_call_result_144509 = invoke(stypy.reporting.localization.Localization(__file__, 2302, 23), get_text_144507, *[], **kwargs_144508)
        
        unicode_144510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2302, 42), 'unicode', u'')
        # Applying the binary operator '==' (line 2302)
        result_eq_144511 = python_operator(stypy.reporting.localization.Localization(__file__, 2302, 23), '==', get_text_call_result_144509, unicode_144510)
        
        # Testing the type of an if condition (line 2302)
        if_condition_144512 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2302, 20), result_eq_144511)
        # Assigning a type to the variable 'if_condition_144512' (line 2302)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2302, 20), 'if_condition_144512', if_condition_144512)
        # SSA begins for if statement (line 2302)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_patchA(...): (line 2303)
        # Processing the call arguments (line 2303)
        # Getting the type of 'None' (line 2303)
        None_144516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2303, 52), 'None', False)
        # Processing the call keyword arguments (line 2303)
        kwargs_144517 = {}
        # Getting the type of 'self' (line 2303)
        self_144513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2303, 24), 'self', False)
        # Obtaining the member 'arrow_patch' of a type (line 2303)
        arrow_patch_144514 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2303, 24), self_144513, 'arrow_patch')
        # Obtaining the member 'set_patchA' of a type (line 2303)
        set_patchA_144515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2303, 24), arrow_patch_144514, 'set_patchA')
        # Calling set_patchA(args, kwargs) (line 2303)
        set_patchA_call_result_144518 = invoke(stypy.reporting.localization.Localization(__file__, 2303, 24), set_patchA_144515, *[None_144516], **kwargs_144517)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2304)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2304, 24), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 2302)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2306):
        
        # Assigning a Call to a Name (line 2306):
        
        # Assigning a Call to a Name (line 2306):
        
        # Call to get_window_extent(...): (line 2306)
        # Processing the call arguments (line 2306)
        # Getting the type of 'self' (line 2306)
        self_144521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2306, 50), 'self', False)
        # Getting the type of 'renderer' (line 2306)
        renderer_144522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2306, 56), 'renderer', False)
        # Processing the call keyword arguments (line 2306)
        kwargs_144523 = {}
        # Getting the type of 'Text' (line 2306)
        Text_144519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2306, 27), 'Text', False)
        # Obtaining the member 'get_window_extent' of a type (line 2306)
        get_window_extent_144520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2306, 27), Text_144519, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 2306)
        get_window_extent_call_result_144524 = invoke(stypy.reporting.localization.Localization(__file__, 2306, 27), get_window_extent_144520, *[self_144521, renderer_144522], **kwargs_144523)
        
        # Assigning a type to the variable 'bbox' (line 2306)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2306, 20), 'bbox', get_window_extent_call_result_144524)
        
        # Assigning a Attribute to a Tuple (line 2307):
        
        # Assigning a Subscript to a Name (line 2307):
        
        # Assigning a Subscript to a Name (line 2307):
        
        # Obtaining the type of the subscript
        int_144525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2307, 20), 'int')
        # Getting the type of 'bbox' (line 2307)
        bbox_144526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2307, 33), 'bbox')
        # Obtaining the member 'bounds' of a type (line 2307)
        bounds_144527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2307, 33), bbox_144526, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 2307)
        getitem___144528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2307, 20), bounds_144527, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2307)
        subscript_call_result_144529 = invoke(stypy.reporting.localization.Localization(__file__, 2307, 20), getitem___144528, int_144525)
        
        # Assigning a type to the variable 'tuple_var_assignment_139213' (line 2307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2307, 20), 'tuple_var_assignment_139213', subscript_call_result_144529)
        
        # Assigning a Subscript to a Name (line 2307):
        
        # Assigning a Subscript to a Name (line 2307):
        
        # Obtaining the type of the subscript
        int_144530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2307, 20), 'int')
        # Getting the type of 'bbox' (line 2307)
        bbox_144531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2307, 33), 'bbox')
        # Obtaining the member 'bounds' of a type (line 2307)
        bounds_144532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2307, 33), bbox_144531, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 2307)
        getitem___144533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2307, 20), bounds_144532, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2307)
        subscript_call_result_144534 = invoke(stypy.reporting.localization.Localization(__file__, 2307, 20), getitem___144533, int_144530)
        
        # Assigning a type to the variable 'tuple_var_assignment_139214' (line 2307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2307, 20), 'tuple_var_assignment_139214', subscript_call_result_144534)
        
        # Assigning a Subscript to a Name (line 2307):
        
        # Assigning a Subscript to a Name (line 2307):
        
        # Obtaining the type of the subscript
        int_144535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2307, 20), 'int')
        # Getting the type of 'bbox' (line 2307)
        bbox_144536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2307, 33), 'bbox')
        # Obtaining the member 'bounds' of a type (line 2307)
        bounds_144537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2307, 33), bbox_144536, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 2307)
        getitem___144538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2307, 20), bounds_144537, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2307)
        subscript_call_result_144539 = invoke(stypy.reporting.localization.Localization(__file__, 2307, 20), getitem___144538, int_144535)
        
        # Assigning a type to the variable 'tuple_var_assignment_139215' (line 2307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2307, 20), 'tuple_var_assignment_139215', subscript_call_result_144539)
        
        # Assigning a Subscript to a Name (line 2307):
        
        # Assigning a Subscript to a Name (line 2307):
        
        # Obtaining the type of the subscript
        int_144540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2307, 20), 'int')
        # Getting the type of 'bbox' (line 2307)
        bbox_144541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2307, 33), 'bbox')
        # Obtaining the member 'bounds' of a type (line 2307)
        bounds_144542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2307, 33), bbox_144541, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 2307)
        getitem___144543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2307, 20), bounds_144542, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2307)
        subscript_call_result_144544 = invoke(stypy.reporting.localization.Localization(__file__, 2307, 20), getitem___144543, int_144540)
        
        # Assigning a type to the variable 'tuple_var_assignment_139216' (line 2307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2307, 20), 'tuple_var_assignment_139216', subscript_call_result_144544)
        
        # Assigning a Name to a Name (line 2307):
        
        # Assigning a Name to a Name (line 2307):
        # Getting the type of 'tuple_var_assignment_139213' (line 2307)
        tuple_var_assignment_139213_144545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2307, 20), 'tuple_var_assignment_139213')
        # Assigning a type to the variable 'l' (line 2307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2307, 20), 'l', tuple_var_assignment_139213_144545)
        
        # Assigning a Name to a Name (line 2307):
        
        # Assigning a Name to a Name (line 2307):
        # Getting the type of 'tuple_var_assignment_139214' (line 2307)
        tuple_var_assignment_139214_144546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2307, 20), 'tuple_var_assignment_139214')
        # Assigning a type to the variable 'b' (line 2307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2307, 23), 'b', tuple_var_assignment_139214_144546)
        
        # Assigning a Name to a Name (line 2307):
        
        # Assigning a Name to a Name (line 2307):
        # Getting the type of 'tuple_var_assignment_139215' (line 2307)
        tuple_var_assignment_139215_144547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2307, 20), 'tuple_var_assignment_139215')
        # Assigning a type to the variable 'w' (line 2307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2307, 26), 'w', tuple_var_assignment_139215_144547)
        
        # Assigning a Name to a Name (line 2307):
        
        # Assigning a Name to a Name (line 2307):
        # Getting the type of 'tuple_var_assignment_139216' (line 2307)
        tuple_var_assignment_139216_144548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2307, 20), 'tuple_var_assignment_139216')
        # Assigning a type to the variable 'h' (line 2307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2307, 29), 'h', tuple_var_assignment_139216_144548)
        
        # Getting the type of 'l' (line 2308)
        l_144549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 20), 'l')
        # Getting the type of 'pad' (line 2308)
        pad_144550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 25), 'pad')
        float_144551 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2308, 31), 'float')
        # Applying the binary operator 'div' (line 2308)
        result_div_144552 = python_operator(stypy.reporting.localization.Localization(__file__, 2308, 25), 'div', pad_144550, float_144551)
        
        # Applying the binary operator '-=' (line 2308)
        result_isub_144553 = python_operator(stypy.reporting.localization.Localization(__file__, 2308, 20), '-=', l_144549, result_div_144552)
        # Assigning a type to the variable 'l' (line 2308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2308, 20), 'l', result_isub_144553)
        
        
        # Getting the type of 'b' (line 2309)
        b_144554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2309, 20), 'b')
        # Getting the type of 'pad' (line 2309)
        pad_144555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2309, 25), 'pad')
        float_144556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2309, 31), 'float')
        # Applying the binary operator 'div' (line 2309)
        result_div_144557 = python_operator(stypy.reporting.localization.Localization(__file__, 2309, 25), 'div', pad_144555, float_144556)
        
        # Applying the binary operator '-=' (line 2309)
        result_isub_144558 = python_operator(stypy.reporting.localization.Localization(__file__, 2309, 20), '-=', b_144554, result_div_144557)
        # Assigning a type to the variable 'b' (line 2309)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2309, 20), 'b', result_isub_144558)
        
        
        # Getting the type of 'w' (line 2310)
        w_144559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2310, 20), 'w')
        # Getting the type of 'pad' (line 2310)
        pad_144560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2310, 25), 'pad')
        # Applying the binary operator '+=' (line 2310)
        result_iadd_144561 = python_operator(stypy.reporting.localization.Localization(__file__, 2310, 20), '+=', w_144559, pad_144560)
        # Assigning a type to the variable 'w' (line 2310)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2310, 20), 'w', result_iadd_144561)
        
        
        # Getting the type of 'h' (line 2311)
        h_144562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2311, 20), 'h')
        # Getting the type of 'pad' (line 2311)
        pad_144563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2311, 25), 'pad')
        # Applying the binary operator '+=' (line 2311)
        result_iadd_144564 = python_operator(stypy.reporting.localization.Localization(__file__, 2311, 20), '+=', h_144562, pad_144563)
        # Assigning a type to the variable 'h' (line 2311)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2311, 20), 'h', result_iadd_144564)
        
        
        # Assigning a Call to a Name (line 2312):
        
        # Assigning a Call to a Name (line 2312):
        
        # Assigning a Call to a Name (line 2312):
        
        # Call to Rectangle(...): (line 2312)
        # Processing the call keyword arguments (line 2312)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2312)
        tuple_144566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2312, 38), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2312)
        # Adding element type (line 2312)
        # Getting the type of 'l' (line 2312)
        l_144567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2312, 38), 'l', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2312, 38), tuple_144566, l_144567)
        # Adding element type (line 2312)
        # Getting the type of 'b' (line 2312)
        b_144568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2312, 41), 'b', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2312, 38), tuple_144566, b_144568)
        
        keyword_144569 = tuple_144566
        # Getting the type of 'w' (line 2313)
        w_144570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2313, 40), 'w', False)
        keyword_144571 = w_144570
        # Getting the type of 'h' (line 2314)
        h_144572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2314, 41), 'h', False)
        keyword_144573 = h_144572
        kwargs_144574 = {'width': keyword_144571, 'xy': keyword_144569, 'height': keyword_144573}
        # Getting the type of 'Rectangle' (line 2312)
        Rectangle_144565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2312, 24), 'Rectangle', False)
        # Calling Rectangle(args, kwargs) (line 2312)
        Rectangle_call_result_144575 = invoke(stypy.reporting.localization.Localization(__file__, 2312, 24), Rectangle_144565, *[], **kwargs_144574)
        
        # Assigning a type to the variable 'r' (line 2312)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2312, 20), 'r', Rectangle_call_result_144575)
        
        # Call to set_transform(...): (line 2316)
        # Processing the call arguments (line 2316)
        
        # Call to IdentityTransform(...): (line 2316)
        # Processing the call keyword arguments (line 2316)
        kwargs_144580 = {}
        # Getting the type of 'mtransforms' (line 2316)
        mtransforms_144578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2316, 36), 'mtransforms', False)
        # Obtaining the member 'IdentityTransform' of a type (line 2316)
        IdentityTransform_144579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2316, 36), mtransforms_144578, 'IdentityTransform')
        # Calling IdentityTransform(args, kwargs) (line 2316)
        IdentityTransform_call_result_144581 = invoke(stypy.reporting.localization.Localization(__file__, 2316, 36), IdentityTransform_144579, *[], **kwargs_144580)
        
        # Processing the call keyword arguments (line 2316)
        kwargs_144582 = {}
        # Getting the type of 'r' (line 2316)
        r_144576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2316, 20), 'r', False)
        # Obtaining the member 'set_transform' of a type (line 2316)
        set_transform_144577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2316, 20), r_144576, 'set_transform')
        # Calling set_transform(args, kwargs) (line 2316)
        set_transform_call_result_144583 = invoke(stypy.reporting.localization.Localization(__file__, 2316, 20), set_transform_144577, *[IdentityTransform_call_result_144581], **kwargs_144582)
        
        
        # Call to set_clip_on(...): (line 2317)
        # Processing the call arguments (line 2317)
        # Getting the type of 'False' (line 2317)
        False_144586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2317, 34), 'False', False)
        # Processing the call keyword arguments (line 2317)
        kwargs_144587 = {}
        # Getting the type of 'r' (line 2317)
        r_144584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2317, 20), 'r', False)
        # Obtaining the member 'set_clip_on' of a type (line 2317)
        set_clip_on_144585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2317, 20), r_144584, 'set_clip_on')
        # Calling set_clip_on(args, kwargs) (line 2317)
        set_clip_on_call_result_144588 = invoke(stypy.reporting.localization.Localization(__file__, 2317, 20), set_clip_on_144585, *[False_144586], **kwargs_144587)
        
        
        # Call to set_patchA(...): (line 2319)
        # Processing the call arguments (line 2319)
        # Getting the type of 'r' (line 2319)
        r_144592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2319, 48), 'r', False)
        # Processing the call keyword arguments (line 2319)
        kwargs_144593 = {}
        # Getting the type of 'self' (line 2319)
        self_144589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2319, 20), 'self', False)
        # Obtaining the member 'arrow_patch' of a type (line 2319)
        arrow_patch_144590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2319, 20), self_144589, 'arrow_patch')
        # Obtaining the member 'set_patchA' of a type (line 2319)
        set_patchA_144591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2319, 20), arrow_patch_144590, 'set_patchA')
        # Calling set_patchA(args, kwargs) (line 2319)
        set_patchA_call_result_144594 = invoke(stypy.reporting.localization.Localization(__file__, 2319, 20), set_patchA_144591, *[r_144592], **kwargs_144593)
        
        # SSA join for if statement (line 2298)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2295)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2230)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_update_position_xytext(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update_position_xytext' in the type store
        # Getting the type of 'stypy_return_type' (line 2220)
        stypy_return_type_144595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2220, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_144595)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update_position_xytext'
        return stypy_return_type_144595


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 2321, 4, False)
        # Assigning a type to the variable 'self' (line 2322)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2322, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Annotation.draw.__dict__.__setitem__('stypy_localization', localization)
        Annotation.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Annotation.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        Annotation.draw.__dict__.__setitem__('stypy_function_name', 'Annotation.draw')
        Annotation.draw.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        Annotation.draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        Annotation.draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Annotation.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        Annotation.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        Annotation.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Annotation.draw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Annotation.draw', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        unicode_144596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2325, (-1)), 'unicode', u'\n        Draw the :class:`Annotation` object to the given *renderer*.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 2327)
        # Getting the type of 'renderer' (line 2327)
        renderer_144597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2327, 8), 'renderer')
        # Getting the type of 'None' (line 2327)
        None_144598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2327, 27), 'None')
        
        (may_be_144599, more_types_in_union_144600) = may_not_be_none(renderer_144597, None_144598)

        if may_be_144599:

            if more_types_in_union_144600:
                # Runtime conditional SSA (line 2327)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 2328):
            
            # Assigning a Name to a Attribute (line 2328):
            
            # Assigning a Name to a Attribute (line 2328):
            # Getting the type of 'renderer' (line 2328)
            renderer_144601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2328, 29), 'renderer')
            # Getting the type of 'self' (line 2328)
            self_144602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2328, 12), 'self')
            # Setting the type of the member '_renderer' of a type (line 2328)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2328, 12), self_144602, '_renderer', renderer_144601)

            if more_types_in_union_144600:
                # SSA join for if statement (line 2327)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        
        # Call to get_visible(...): (line 2329)
        # Processing the call keyword arguments (line 2329)
        kwargs_144605 = {}
        # Getting the type of 'self' (line 2329)
        self_144603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2329, 15), 'self', False)
        # Obtaining the member 'get_visible' of a type (line 2329)
        get_visible_144604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2329, 15), self_144603, 'get_visible')
        # Calling get_visible(args, kwargs) (line 2329)
        get_visible_call_result_144606 = invoke(stypy.reporting.localization.Localization(__file__, 2329, 15), get_visible_144604, *[], **kwargs_144605)
        
        # Applying the 'not' unary operator (line 2329)
        result_not__144607 = python_operator(stypy.reporting.localization.Localization(__file__, 2329, 11), 'not', get_visible_call_result_144606)
        
        # Testing the type of an if condition (line 2329)
        if_condition_144608 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2329, 8), result_not__144607)
        # Assigning a type to the variable 'if_condition_144608' (line 2329)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2329, 8), 'if_condition_144608', if_condition_144608)
        # SSA begins for if statement (line 2329)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 2330)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2330, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 2329)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2332):
        
        # Assigning a Call to a Name (line 2332):
        
        # Assigning a Call to a Name (line 2332):
        
        # Call to _get_position_xy(...): (line 2332)
        # Processing the call arguments (line 2332)
        # Getting the type of 'renderer' (line 2332)
        renderer_144611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2332, 41), 'renderer', False)
        # Processing the call keyword arguments (line 2332)
        kwargs_144612 = {}
        # Getting the type of 'self' (line 2332)
        self_144609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2332, 19), 'self', False)
        # Obtaining the member '_get_position_xy' of a type (line 2332)
        _get_position_xy_144610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2332, 19), self_144609, '_get_position_xy')
        # Calling _get_position_xy(args, kwargs) (line 2332)
        _get_position_xy_call_result_144613 = invoke(stypy.reporting.localization.Localization(__file__, 2332, 19), _get_position_xy_144610, *[renderer_144611], **kwargs_144612)
        
        # Assigning a type to the variable 'xy_pixel' (line 2332)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2332, 8), 'xy_pixel', _get_position_xy_call_result_144613)
        
        
        
        # Call to _check_xy(...): (line 2333)
        # Processing the call arguments (line 2333)
        # Getting the type of 'renderer' (line 2333)
        renderer_144616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2333, 30), 'renderer', False)
        # Getting the type of 'xy_pixel' (line 2333)
        xy_pixel_144617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2333, 40), 'xy_pixel', False)
        # Processing the call keyword arguments (line 2333)
        kwargs_144618 = {}
        # Getting the type of 'self' (line 2333)
        self_144614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2333, 15), 'self', False)
        # Obtaining the member '_check_xy' of a type (line 2333)
        _check_xy_144615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2333, 15), self_144614, '_check_xy')
        # Calling _check_xy(args, kwargs) (line 2333)
        _check_xy_call_result_144619 = invoke(stypy.reporting.localization.Localization(__file__, 2333, 15), _check_xy_144615, *[renderer_144616, xy_pixel_144617], **kwargs_144618)
        
        # Applying the 'not' unary operator (line 2333)
        result_not__144620 = python_operator(stypy.reporting.localization.Localization(__file__, 2333, 11), 'not', _check_xy_call_result_144619)
        
        # Testing the type of an if condition (line 2333)
        if_condition_144621 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2333, 8), result_not__144620)
        # Assigning a type to the variable 'if_condition_144621' (line 2333)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2333, 8), 'if_condition_144621', if_condition_144621)
        # SSA begins for if statement (line 2333)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 2334)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2334, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 2333)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _update_position_xytext(...): (line 2336)
        # Processing the call arguments (line 2336)
        # Getting the type of 'renderer' (line 2336)
        renderer_144624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2336, 37), 'renderer', False)
        # Getting the type of 'xy_pixel' (line 2336)
        xy_pixel_144625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2336, 47), 'xy_pixel', False)
        # Processing the call keyword arguments (line 2336)
        kwargs_144626 = {}
        # Getting the type of 'self' (line 2336)
        self_144622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2336, 8), 'self', False)
        # Obtaining the member '_update_position_xytext' of a type (line 2336)
        _update_position_xytext_144623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2336, 8), self_144622, '_update_position_xytext')
        # Calling _update_position_xytext(args, kwargs) (line 2336)
        _update_position_xytext_call_result_144627 = invoke(stypy.reporting.localization.Localization(__file__, 2336, 8), _update_position_xytext_144623, *[renderer_144624, xy_pixel_144625], **kwargs_144626)
        
        
        # Call to update_bbox_position_size(...): (line 2337)
        # Processing the call arguments (line 2337)
        # Getting the type of 'renderer' (line 2337)
        renderer_144630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2337, 39), 'renderer', False)
        # Processing the call keyword arguments (line 2337)
        kwargs_144631 = {}
        # Getting the type of 'self' (line 2337)
        self_144628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2337, 8), 'self', False)
        # Obtaining the member 'update_bbox_position_size' of a type (line 2337)
        update_bbox_position_size_144629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2337, 8), self_144628, 'update_bbox_position_size')
        # Calling update_bbox_position_size(args, kwargs) (line 2337)
        update_bbox_position_size_call_result_144632 = invoke(stypy.reporting.localization.Localization(__file__, 2337, 8), update_bbox_position_size_144629, *[renderer_144630], **kwargs_144631)
        
        
        
        # Getting the type of 'self' (line 2339)
        self_144633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2339, 11), 'self')
        # Obtaining the member 'arrow_patch' of a type (line 2339)
        arrow_patch_144634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2339, 11), self_144633, 'arrow_patch')
        # Getting the type of 'None' (line 2339)
        None_144635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2339, 35), 'None')
        # Applying the binary operator 'isnot' (line 2339)
        result_is_not_144636 = python_operator(stypy.reporting.localization.Localization(__file__, 2339, 11), 'isnot', arrow_patch_144634, None_144635)
        
        # Testing the type of an if condition (line 2339)
        if_condition_144637 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2339, 8), result_is_not_144636)
        # Assigning a type to the variable 'if_condition_144637' (line 2339)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2339, 8), 'if_condition_144637', if_condition_144637)
        # SSA begins for if statement (line 2339)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 2340)
        self_144638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2340, 15), 'self')
        # Obtaining the member 'arrow_patch' of a type (line 2340)
        arrow_patch_144639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2340, 15), self_144638, 'arrow_patch')
        # Obtaining the member 'figure' of a type (line 2340)
        figure_144640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2340, 15), arrow_patch_144639, 'figure')
        # Getting the type of 'None' (line 2340)
        None_144641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2340, 42), 'None')
        # Applying the binary operator 'is' (line 2340)
        result_is__144642 = python_operator(stypy.reporting.localization.Localization(__file__, 2340, 15), 'is', figure_144640, None_144641)
        
        
        # Getting the type of 'self' (line 2340)
        self_144643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2340, 51), 'self')
        # Obtaining the member 'figure' of a type (line 2340)
        figure_144644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2340, 51), self_144643, 'figure')
        # Getting the type of 'None' (line 2340)
        None_144645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2340, 70), 'None')
        # Applying the binary operator 'isnot' (line 2340)
        result_is_not_144646 = python_operator(stypy.reporting.localization.Localization(__file__, 2340, 51), 'isnot', figure_144644, None_144645)
        
        # Applying the binary operator 'and' (line 2340)
        result_and_keyword_144647 = python_operator(stypy.reporting.localization.Localization(__file__, 2340, 15), 'and', result_is__144642, result_is_not_144646)
        
        # Testing the type of an if condition (line 2340)
        if_condition_144648 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2340, 12), result_and_keyword_144647)
        # Assigning a type to the variable 'if_condition_144648' (line 2340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2340, 12), 'if_condition_144648', if_condition_144648)
        # SSA begins for if statement (line 2340)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Attribute (line 2341):
        
        # Assigning a Attribute to a Attribute (line 2341):
        
        # Assigning a Attribute to a Attribute (line 2341):
        # Getting the type of 'self' (line 2341)
        self_144649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2341, 42), 'self')
        # Obtaining the member 'figure' of a type (line 2341)
        figure_144650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2341, 42), self_144649, 'figure')
        # Getting the type of 'self' (line 2341)
        self_144651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2341, 16), 'self')
        # Obtaining the member 'arrow_patch' of a type (line 2341)
        arrow_patch_144652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2341, 16), self_144651, 'arrow_patch')
        # Setting the type of the member 'figure' of a type (line 2341)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2341, 16), arrow_patch_144652, 'figure', figure_144650)
        # SSA join for if statement (line 2340)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to draw(...): (line 2342)
        # Processing the call arguments (line 2342)
        # Getting the type of 'renderer' (line 2342)
        renderer_144656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2342, 34), 'renderer', False)
        # Processing the call keyword arguments (line 2342)
        kwargs_144657 = {}
        # Getting the type of 'self' (line 2342)
        self_144653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2342, 12), 'self', False)
        # Obtaining the member 'arrow_patch' of a type (line 2342)
        arrow_patch_144654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2342, 12), self_144653, 'arrow_patch')
        # Obtaining the member 'draw' of a type (line 2342)
        draw_144655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2342, 12), arrow_patch_144654, 'draw')
        # Calling draw(args, kwargs) (line 2342)
        draw_call_result_144658 = invoke(stypy.reporting.localization.Localization(__file__, 2342, 12), draw_144655, *[renderer_144656], **kwargs_144657)
        
        # SSA join for if statement (line 2339)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to draw(...): (line 2346)
        # Processing the call arguments (line 2346)
        # Getting the type of 'self' (line 2346)
        self_144661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2346, 18), 'self', False)
        # Getting the type of 'renderer' (line 2346)
        renderer_144662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2346, 24), 'renderer', False)
        # Processing the call keyword arguments (line 2346)
        kwargs_144663 = {}
        # Getting the type of 'Text' (line 2346)
        Text_144659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2346, 8), 'Text', False)
        # Obtaining the member 'draw' of a type (line 2346)
        draw_144660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2346, 8), Text_144659, 'draw')
        # Calling draw(args, kwargs) (line 2346)
        draw_call_result_144664 = invoke(stypy.reporting.localization.Localization(__file__, 2346, 8), draw_144660, *[self_144661, renderer_144662], **kwargs_144663)
        
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 2321)
        stypy_return_type_144665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2321, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_144665)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_144665


    @norecursion
    def get_window_extent(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 2348)
        None_144666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2348, 41), 'None')
        defaults = [None_144666]
        # Create a new context for function 'get_window_extent'
        module_type_store = module_type_store.open_function_context('get_window_extent', 2348, 4, False)
        # Assigning a type to the variable 'self' (line 2349)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2349, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Annotation.get_window_extent.__dict__.__setitem__('stypy_localization', localization)
        Annotation.get_window_extent.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Annotation.get_window_extent.__dict__.__setitem__('stypy_type_store', module_type_store)
        Annotation.get_window_extent.__dict__.__setitem__('stypy_function_name', 'Annotation.get_window_extent')
        Annotation.get_window_extent.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        Annotation.get_window_extent.__dict__.__setitem__('stypy_varargs_param_name', None)
        Annotation.get_window_extent.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Annotation.get_window_extent.__dict__.__setitem__('stypy_call_defaults', defaults)
        Annotation.get_window_extent.__dict__.__setitem__('stypy_call_varargs', varargs)
        Annotation.get_window_extent.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Annotation.get_window_extent.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Annotation.get_window_extent', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_window_extent', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_window_extent(...)' code ##################

        unicode_144667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2362, (-1)), 'unicode', u'\n        Return a :class:`~matplotlib.transforms.Bbox` object bounding\n        the text and arrow annotation, in display units.\n\n        *renderer* defaults to the _renderer attribute of the text\n        object.  This is not assigned until the first execution of\n        :meth:`draw`, so you must use this kwarg if you want\n        to call :meth:`get_window_extent` prior to the first\n        :meth:`draw`.  For getting web page regions, it is\n        simpler to call the method after saving the figure. The\n        *dpi* used defaults to self.figure.dpi; the renderer dpi is\n        irrelevant.\n\n        ')
        
        
        
        # Call to get_visible(...): (line 2363)
        # Processing the call keyword arguments (line 2363)
        kwargs_144670 = {}
        # Getting the type of 'self' (line 2363)
        self_144668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2363, 15), 'self', False)
        # Obtaining the member 'get_visible' of a type (line 2363)
        get_visible_144669 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2363, 15), self_144668, 'get_visible')
        # Calling get_visible(args, kwargs) (line 2363)
        get_visible_call_result_144671 = invoke(stypy.reporting.localization.Localization(__file__, 2363, 15), get_visible_144669, *[], **kwargs_144670)
        
        # Applying the 'not' unary operator (line 2363)
        result_not__144672 = python_operator(stypy.reporting.localization.Localization(__file__, 2363, 11), 'not', get_visible_call_result_144671)
        
        # Testing the type of an if condition (line 2363)
        if_condition_144673 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2363, 8), result_not__144672)
        # Assigning a type to the variable 'if_condition_144673' (line 2363)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2363, 8), 'if_condition_144673', if_condition_144673)
        # SSA begins for if statement (line 2363)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to unit(...): (line 2364)
        # Processing the call keyword arguments (line 2364)
        kwargs_144676 = {}
        # Getting the type of 'Bbox' (line 2364)
        Bbox_144674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2364, 19), 'Bbox', False)
        # Obtaining the member 'unit' of a type (line 2364)
        unit_144675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2364, 19), Bbox_144674, 'unit')
        # Calling unit(args, kwargs) (line 2364)
        unit_call_result_144677 = invoke(stypy.reporting.localization.Localization(__file__, 2364, 19), unit_144675, *[], **kwargs_144676)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2364)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2364, 12), 'stypy_return_type', unit_call_result_144677)
        # SSA join for if statement (line 2363)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 2365):
        
        # Assigning a Attribute to a Name (line 2365):
        
        # Assigning a Attribute to a Name (line 2365):
        # Getting the type of 'self' (line 2365)
        self_144678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2365, 16), 'self')
        # Obtaining the member 'arrow' of a type (line 2365)
        arrow_144679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2365, 16), self_144678, 'arrow')
        # Assigning a type to the variable 'arrow' (line 2365)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2365, 8), 'arrow', arrow_144679)
        
        # Assigning a Attribute to a Name (line 2366):
        
        # Assigning a Attribute to a Name (line 2366):
        
        # Assigning a Attribute to a Name (line 2366):
        # Getting the type of 'self' (line 2366)
        self_144680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2366, 22), 'self')
        # Obtaining the member 'arrow_patch' of a type (line 2366)
        arrow_patch_144681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2366, 22), self_144680, 'arrow_patch')
        # Assigning a type to the variable 'arrow_patch' (line 2366)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2366, 8), 'arrow_patch', arrow_patch_144681)
        
        # Assigning a Call to a Name (line 2368):
        
        # Assigning a Call to a Name (line 2368):
        
        # Assigning a Call to a Name (line 2368):
        
        # Call to get_window_extent(...): (line 2368)
        # Processing the call arguments (line 2368)
        # Getting the type of 'self' (line 2368)
        self_144684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2368, 43), 'self', False)
        # Processing the call keyword arguments (line 2368)
        # Getting the type of 'renderer' (line 2368)
        renderer_144685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2368, 58), 'renderer', False)
        keyword_144686 = renderer_144685
        kwargs_144687 = {'renderer': keyword_144686}
        # Getting the type of 'Text' (line 2368)
        Text_144682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2368, 20), 'Text', False)
        # Obtaining the member 'get_window_extent' of a type (line 2368)
        get_window_extent_144683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2368, 20), Text_144682, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 2368)
        get_window_extent_call_result_144688 = invoke(stypy.reporting.localization.Localization(__file__, 2368, 20), get_window_extent_144683, *[self_144684], **kwargs_144687)
        
        # Assigning a type to the variable 'text_bbox' (line 2368)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2368, 8), 'text_bbox', get_window_extent_call_result_144688)
        
        # Assigning a List to a Name (line 2369):
        
        # Assigning a List to a Name (line 2369):
        
        # Assigning a List to a Name (line 2369):
        
        # Obtaining an instance of the builtin type 'list' (line 2369)
        list_144689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2369, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2369)
        # Adding element type (line 2369)
        # Getting the type of 'text_bbox' (line 2369)
        text_bbox_144690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2369, 18), 'text_bbox')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2369, 17), list_144689, text_bbox_144690)
        
        # Assigning a type to the variable 'bboxes' (line 2369)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2369, 8), 'bboxes', list_144689)
        
        
        # Getting the type of 'self' (line 2371)
        self_144691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2371, 11), 'self')
        # Obtaining the member 'arrow' of a type (line 2371)
        arrow_144692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2371, 11), self_144691, 'arrow')
        # Getting the type of 'None' (line 2371)
        None_144693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2371, 29), 'None')
        # Applying the binary operator 'isnot' (line 2371)
        result_is_not_144694 = python_operator(stypy.reporting.localization.Localization(__file__, 2371, 11), 'isnot', arrow_144692, None_144693)
        
        # Testing the type of an if condition (line 2371)
        if_condition_144695 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2371, 8), result_is_not_144694)
        # Assigning a type to the variable 'if_condition_144695' (line 2371)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2371, 8), 'if_condition_144695', if_condition_144695)
        # SSA begins for if statement (line 2371)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 2372)
        # Processing the call arguments (line 2372)
        
        # Call to get_window_extent(...): (line 2372)
        # Processing the call keyword arguments (line 2372)
        # Getting the type of 'renderer' (line 2372)
        renderer_144700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2372, 59), 'renderer', False)
        keyword_144701 = renderer_144700
        kwargs_144702 = {'renderer': keyword_144701}
        # Getting the type of 'arrow' (line 2372)
        arrow_144698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2372, 26), 'arrow', False)
        # Obtaining the member 'get_window_extent' of a type (line 2372)
        get_window_extent_144699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2372, 26), arrow_144698, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 2372)
        get_window_extent_call_result_144703 = invoke(stypy.reporting.localization.Localization(__file__, 2372, 26), get_window_extent_144699, *[], **kwargs_144702)
        
        # Processing the call keyword arguments (line 2372)
        kwargs_144704 = {}
        # Getting the type of 'bboxes' (line 2372)
        bboxes_144696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2372, 12), 'bboxes', False)
        # Obtaining the member 'append' of a type (line 2372)
        append_144697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2372, 12), bboxes_144696, 'append')
        # Calling append(args, kwargs) (line 2372)
        append_call_result_144705 = invoke(stypy.reporting.localization.Localization(__file__, 2372, 12), append_144697, *[get_window_extent_call_result_144703], **kwargs_144704)
        
        # SSA branch for the else part of an if statement (line 2371)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'self' (line 2373)
        self_144706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2373, 13), 'self')
        # Obtaining the member 'arrow_patch' of a type (line 2373)
        arrow_patch_144707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2373, 13), self_144706, 'arrow_patch')
        # Getting the type of 'None' (line 2373)
        None_144708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2373, 37), 'None')
        # Applying the binary operator 'isnot' (line 2373)
        result_is_not_144709 = python_operator(stypy.reporting.localization.Localization(__file__, 2373, 13), 'isnot', arrow_patch_144707, None_144708)
        
        # Testing the type of an if condition (line 2373)
        if_condition_144710 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2373, 13), result_is_not_144709)
        # Assigning a type to the variable 'if_condition_144710' (line 2373)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2373, 13), 'if_condition_144710', if_condition_144710)
        # SSA begins for if statement (line 2373)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 2374)
        # Processing the call arguments (line 2374)
        
        # Call to get_window_extent(...): (line 2374)
        # Processing the call keyword arguments (line 2374)
        # Getting the type of 'renderer' (line 2374)
        renderer_144715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2374, 65), 'renderer', False)
        keyword_144716 = renderer_144715
        kwargs_144717 = {'renderer': keyword_144716}
        # Getting the type of 'arrow_patch' (line 2374)
        arrow_patch_144713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2374, 26), 'arrow_patch', False)
        # Obtaining the member 'get_window_extent' of a type (line 2374)
        get_window_extent_144714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2374, 26), arrow_patch_144713, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 2374)
        get_window_extent_call_result_144718 = invoke(stypy.reporting.localization.Localization(__file__, 2374, 26), get_window_extent_144714, *[], **kwargs_144717)
        
        # Processing the call keyword arguments (line 2374)
        kwargs_144719 = {}
        # Getting the type of 'bboxes' (line 2374)
        bboxes_144711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2374, 12), 'bboxes', False)
        # Obtaining the member 'append' of a type (line 2374)
        append_144712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2374, 12), bboxes_144711, 'append')
        # Calling append(args, kwargs) (line 2374)
        append_call_result_144720 = invoke(stypy.reporting.localization.Localization(__file__, 2374, 12), append_144712, *[get_window_extent_call_result_144718], **kwargs_144719)
        
        # SSA join for if statement (line 2373)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2371)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to union(...): (line 2376)
        # Processing the call arguments (line 2376)
        # Getting the type of 'bboxes' (line 2376)
        bboxes_144723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2376, 26), 'bboxes', False)
        # Processing the call keyword arguments (line 2376)
        kwargs_144724 = {}
        # Getting the type of 'Bbox' (line 2376)
        Bbox_144721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2376, 15), 'Bbox', False)
        # Obtaining the member 'union' of a type (line 2376)
        union_144722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2376, 15), Bbox_144721, 'union')
        # Calling union(args, kwargs) (line 2376)
        union_call_result_144725 = invoke(stypy.reporting.localization.Localization(__file__, 2376, 15), union_144722, *[bboxes_144723], **kwargs_144724)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2376)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2376, 8), 'stypy_return_type', union_call_result_144725)
        
        # ################# End of 'get_window_extent(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_window_extent' in the type store
        # Getting the type of 'stypy_return_type' (line 2348)
        stypy_return_type_144726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2348, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_144726)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_window_extent'
        return stypy_return_type_144726


# Assigning a type to the variable 'Annotation' (line 1970)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1970, 0), 'Annotation', Annotation)

# Call to update(...): (line 2379)
# Processing the call keyword arguments (line 2379)
# Getting the type of 'Annotation' (line 2379)
Annotation_144730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2379, 36), 'Annotation', False)
# Obtaining the member '__init__' of a type (line 2379)
init___144731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2379, 36), Annotation_144730, '__init__')
# Obtaining the member '__doc__' of a type (line 2379)
doc___144732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2379, 36), init___144731, '__doc__')
keyword_144733 = doc___144732
kwargs_144734 = {'Annotation': keyword_144733}
# Getting the type of 'docstring' (line 2379)
docstring_144727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2379, 0), 'docstring', False)
# Obtaining the member 'interpd' of a type (line 2379)
interpd_144728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2379, 0), docstring_144727, 'interpd')
# Obtaining the member 'update' of a type (line 2379)
update_144729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2379, 0), interpd_144728, 'update')
# Calling update(args, kwargs) (line 2379)
update_call_result_144735 = invoke(stypy.reporting.localization.Localization(__file__, 2379, 0), update_144729, *[], **kwargs_144734)


# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
