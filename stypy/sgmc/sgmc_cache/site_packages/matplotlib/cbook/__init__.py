
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: '''
2: A collection of utility functions and classes.  Originally, many
3: (but not all) were from the Python Cookbook -- hence the name cbook.
4: 
5: This module is safe to import from anywhere within matplotlib;
6: it imports matplotlib only at runtime.
7: '''
8: 
9: from __future__ import (absolute_import, division, print_function,
10:                         unicode_literals)
11: 
12: import six
13: from six.moves import xrange, zip
14: import collections
15: import datetime
16: import errno
17: import functools
18: import glob
19: import gzip
20: import io
21: from itertools import repeat
22: import locale
23: import numbers
24: import os
25: import re
26: import sys
27: import time
28: import traceback
29: import types
30: import warnings
31: from weakref import ref, WeakKeyDictionary
32: from .deprecation import deprecated, warn_deprecated
33: from .deprecation import mplDeprecation, MatplotlibDeprecationWarning
34: 
35: import numpy as np
36: 
37: 
38: # On some systems, locale.getpreferredencoding returns None,
39: # which can break unicode; and the sage project reports that
40: # some systems have incorrect locale specifications, e.g.,
41: # an encoding instead of a valid locale name.  Another
42: # pathological case that has been reported is an empty string.
43: 
44: # On some systems, getpreferredencoding sets the locale, which has
45: # side effects.  Passing False eliminates those side effects.
46: 
47: def unicode_safe(s):
48:     import matplotlib
49: 
50:     if isinstance(s, bytes):
51:         try:
52:             preferredencoding = locale.getpreferredencoding(
53:                 matplotlib.rcParams['axes.formatter.use_locale']).strip()
54:             if not preferredencoding:
55:                 preferredencoding = None
56:         except (ValueError, ImportError, AttributeError):
57:             preferredencoding = None
58: 
59:         if preferredencoding is None:
60:             return six.text_type(s)
61:         else:
62:             return six.text_type(s, preferredencoding)
63:     return s
64: 
65: 
66: @deprecated('2.1')
67: class converter(object):
68:     '''
69:     Base class for handling string -> python type with support for
70:     missing values
71:     '''
72:     def __init__(self, missing='Null', missingval=None):
73:         self.missing = missing
74:         self.missingval = missingval
75: 
76:     def __call__(self, s):
77:         if s == self.missing:
78:             return self.missingval
79:         return s
80: 
81:     def is_missing(self, s):
82:         return not s.strip() or s == self.missing
83: 
84: 
85: @deprecated('2.1')
86: class tostr(converter):
87:     '''convert to string or None'''
88:     def __init__(self, missing='Null', missingval=''):
89:         converter.__init__(self, missing=missing, missingval=missingval)
90: 
91: 
92: @deprecated('2.1')
93: class todatetime(converter):
94:     '''convert to a datetime or None'''
95:     def __init__(self, fmt='%Y-%m-%d', missing='Null', missingval=None):
96:         'use a :func:`time.strptime` format string for conversion'
97:         converter.__init__(self, missing, missingval)
98:         self.fmt = fmt
99: 
100:     def __call__(self, s):
101:         if self.is_missing(s):
102:             return self.missingval
103:         tup = time.strptime(s, self.fmt)
104:         return datetime.datetime(*tup[:6])
105: 
106: 
107: @deprecated('2.1')
108: class todate(converter):
109:     '''convert to a date or None'''
110:     def __init__(self, fmt='%Y-%m-%d', missing='Null', missingval=None):
111:         '''use a :func:`time.strptime` format string for conversion'''
112:         converter.__init__(self, missing, missingval)
113:         self.fmt = fmt
114: 
115:     def __call__(self, s):
116:         if self.is_missing(s):
117:             return self.missingval
118:         tup = time.strptime(s, self.fmt)
119:         return datetime.date(*tup[:3])
120: 
121: 
122: @deprecated('2.1')
123: class tofloat(converter):
124:     '''convert to a float or None'''
125:     def __init__(self, missing='Null', missingval=None):
126:         converter.__init__(self, missing)
127:         self.missingval = missingval
128: 
129:     def __call__(self, s):
130:         if self.is_missing(s):
131:             return self.missingval
132:         return float(s)
133: 
134: 
135: @deprecated('2.1')
136: class toint(converter):
137:     '''convert to an int or None'''
138:     def __init__(self, missing='Null', missingval=None):
139:         converter.__init__(self, missing)
140: 
141:     def __call__(self, s):
142:         if self.is_missing(s):
143:             return self.missingval
144:         return int(s)
145: 
146: 
147: class _BoundMethodProxy(object):
148:     '''
149:     Our own proxy object which enables weak references to bound and unbound
150:     methods and arbitrary callables. Pulls information about the function,
151:     class, and instance out of a bound method. Stores a weak reference to the
152:     instance to support garbage collection.
153: 
154:     @organization: IBM Corporation
155:     @copyright: Copyright (c) 2005, 2006 IBM Corporation
156:     @license: The BSD License
157: 
158:     Minor bugfixes by Michael Droettboom
159:     '''
160:     def __init__(self, cb):
161:         self._hash = hash(cb)
162:         self._destroy_callbacks = []
163:         try:
164:             try:
165:                 if six.PY3:
166:                     self.inst = ref(cb.__self__, self._destroy)
167:                 else:
168:                     self.inst = ref(cb.im_self, self._destroy)
169:             except TypeError:
170:                 self.inst = None
171:             if six.PY3:
172:                 self.func = cb.__func__
173:                 self.klass = cb.__self__.__class__
174:             else:
175:                 self.func = cb.im_func
176:                 self.klass = cb.im_class
177:         except AttributeError:
178:             self.inst = None
179:             self.func = cb
180:             self.klass = None
181: 
182:     def add_destroy_callback(self, callback):
183:         self._destroy_callbacks.append(_BoundMethodProxy(callback))
184: 
185:     def _destroy(self, wk):
186:         for callback in self._destroy_callbacks:
187:             try:
188:                 callback(self)
189:             except ReferenceError:
190:                 pass
191: 
192:     def __getstate__(self):
193:         d = self.__dict__.copy()
194:         # de-weak reference inst
195:         inst = d['inst']
196:         if inst is not None:
197:             d['inst'] = inst()
198:         return d
199: 
200:     def __setstate__(self, statedict):
201:         self.__dict__ = statedict
202:         inst = statedict['inst']
203:         # turn inst back into a weakref
204:         if inst is not None:
205:             self.inst = ref(inst)
206: 
207:     def __call__(self, *args, **kwargs):
208:         '''
209:         Proxy for a call to the weak referenced object. Take
210:         arbitrary params to pass to the callable.
211: 
212:         Raises `ReferenceError`: When the weak reference refers to
213:         a dead object
214:         '''
215:         if self.inst is not None and self.inst() is None:
216:             raise ReferenceError
217:         elif self.inst is not None:
218:             # build a new instance method with a strong reference to the
219:             # instance
220: 
221:             mtd = types.MethodType(self.func, self.inst())
222: 
223:         else:
224:             # not a bound method, just return the func
225:             mtd = self.func
226:         # invoke the callable and return the result
227:         return mtd(*args, **kwargs)
228: 
229:     def __eq__(self, other):
230:         '''
231:         Compare the held function and instance with that held by
232:         another proxy.
233:         '''
234:         try:
235:             if self.inst is None:
236:                 return self.func == other.func and other.inst is None
237:             else:
238:                 return self.func == other.func and self.inst() == other.inst()
239:         except Exception:
240:             return False
241: 
242:     def __ne__(self, other):
243:         '''
244:         Inverse of __eq__.
245:         '''
246:         return not self.__eq__(other)
247: 
248:     def __hash__(self):
249:         return self._hash
250: 
251: 
252: def _exception_printer(exc):
253:     traceback.print_exc()
254: 
255: 
256: class CallbackRegistry(object):
257:     '''Handle registering and disconnecting for a set of signals and
258:     callbacks:
259: 
260:         >>> def oneat(x):
261:         ...    print('eat', x)
262:         >>> def ondrink(x):
263:         ...    print('drink', x)
264: 
265:         >>> from matplotlib.cbook import CallbackRegistry
266:         >>> callbacks = CallbackRegistry()
267: 
268:         >>> id_eat = callbacks.connect('eat', oneat)
269:         >>> id_drink = callbacks.connect('drink', ondrink)
270: 
271:         >>> callbacks.process('drink', 123)
272:         drink 123
273:         >>> callbacks.process('eat', 456)
274:         eat 456
275:         >>> callbacks.process('be merry', 456) # nothing will be called
276:         >>> callbacks.disconnect(id_eat)
277:         >>> callbacks.process('eat', 456)      # nothing will be called
278: 
279:     In practice, one should always disconnect all callbacks when they
280:     are no longer needed to avoid dangling references (and thus memory
281:     leaks).  However, real code in matplotlib rarely does so, and due
282:     to its design, it is rather difficult to place this kind of code.
283:     To get around this, and prevent this class of memory leaks, we
284:     instead store weak references to bound methods only, so when the
285:     destination object needs to die, the CallbackRegistry won't keep
286:     it alive.  The Python stdlib weakref module can not create weak
287:     references to bound methods directly, so we need to create a proxy
288:     object to handle weak references to bound methods (or regular free
289:     functions).  This technique was shared by Peter Parente on his
290:     `"Mindtrove" blog
291:     <http://mindtrove.info/python-weak-references/>`_.
292: 
293: 
294:     Parameters
295:     ----------
296:     exception_handler : callable, optional
297:        If provided must have signature ::
298: 
299:           def handler(exc: Exception) -> None:
300: 
301:        If not None this function will be called with any `Exception`
302:        subclass raised by the callbacks in `CallbackRegistry.process`.
303:        The handler may either consume the exception or re-raise.
304: 
305:        The callable must be pickle-able.
306: 
307:        The default handler is ::
308: 
309:           def h(exc):
310:               traceback.print_exc()
311: 
312:     '''
313:     def __init__(self, exception_handler=_exception_printer):
314:         self.exception_handler = exception_handler
315:         self.callbacks = dict()
316:         self._cid = 0
317:         self._func_cid_map = {}
318: 
319:     # In general, callbacks may not be pickled; thus, we simply recreate an
320:     # empty dictionary at unpickling.  In order to ensure that `__setstate__`
321:     # (which just defers to `__init__`) is called, `__getstate__` must
322:     # return a truthy value (for pickle protocol>=3, i.e. Py3, the
323:     # *actual* behavior is that `__setstate__` will be called as long as
324:     # `__getstate__` does not return `None`, but this is undocumented -- see
325:     # http://bugs.python.org/issue12290).
326: 
327:     def __getstate__(self):
328:         return {'exception_handler': self.exception_handler}
329: 
330:     def __setstate__(self, state):
331:         self.__init__(**state)
332: 
333:     def connect(self, s, func):
334:         '''
335:         register *func* to be called when a signal *s* is generated
336:         func will be called
337:         '''
338:         self._func_cid_map.setdefault(s, WeakKeyDictionary())
339:         # Note proxy not needed in python 3.
340:         # TODO rewrite this when support for python2.x gets dropped.
341:         proxy = _BoundMethodProxy(func)
342:         if proxy in self._func_cid_map[s]:
343:             return self._func_cid_map[s][proxy]
344: 
345:         proxy.add_destroy_callback(self._remove_proxy)
346:         self._cid += 1
347:         cid = self._cid
348:         self._func_cid_map[s][proxy] = cid
349:         self.callbacks.setdefault(s, dict())
350:         self.callbacks[s][cid] = proxy
351:         return cid
352: 
353:     def _remove_proxy(self, proxy):
354:         for signal, proxies in list(six.iteritems(self._func_cid_map)):
355:             try:
356:                 del self.callbacks[signal][proxies[proxy]]
357:             except KeyError:
358:                 pass
359: 
360:             if len(self.callbacks[signal]) == 0:
361:                 del self.callbacks[signal]
362:                 del self._func_cid_map[signal]
363: 
364:     def disconnect(self, cid):
365:         '''
366:         disconnect the callback registered with callback id *cid*
367:         '''
368:         for eventname, callbackd in list(six.iteritems(self.callbacks)):
369:             try:
370:                 del callbackd[cid]
371:             except KeyError:
372:                 continue
373:             else:
374:                 for signal, functions in list(
375:                         six.iteritems(self._func_cid_map)):
376:                     for function, value in list(six.iteritems(functions)):
377:                         if value == cid:
378:                             del functions[function]
379:                 return
380: 
381:     def process(self, s, *args, **kwargs):
382:         '''
383:         process signal `s`.  All of the functions registered to receive
384:         callbacks on `s` will be called with ``**args`` and ``**kwargs``
385:         '''
386:         if s in self.callbacks:
387:             for cid, proxy in list(six.iteritems(self.callbacks[s])):
388:                 try:
389:                     proxy(*args, **kwargs)
390:                 except ReferenceError:
391:                     self._remove_proxy(proxy)
392:                 # this does not capture KeyboardInterrupt, SystemExit,
393:                 # and GeneratorExit
394:                 except Exception as exc:
395:                     if self.exception_handler is not None:
396:                         self.exception_handler(exc)
397:                     else:
398:                         raise
399: 
400: 
401: class silent_list(list):
402:     '''
403:     override repr when returning a list of matplotlib artists to
404:     prevent long, meaningless output.  This is meant to be used for a
405:     homogeneous list of a given type
406:     '''
407:     def __init__(self, type, seq=None):
408:         self.type = type
409:         if seq is not None:
410:             self.extend(seq)
411: 
412:     def __repr__(self):
413:         return '<a list of %d %s objects>' % (len(self), self.type)
414: 
415:     def __str__(self):
416:         return repr(self)
417: 
418:     def __getstate__(self):
419:         # store a dictionary of this SilentList's state
420:         return {'type': self.type, 'seq': self[:]}
421: 
422:     def __setstate__(self, state):
423:         self.type = state['type']
424:         self.extend(state['seq'])
425: 
426: 
427: class IgnoredKeywordWarning(UserWarning):
428:     '''
429:     A class for issuing warnings about keyword arguments that will be ignored
430:     by matplotlib
431:     '''
432:     pass
433: 
434: 
435: def local_over_kwdict(local_var, kwargs, *keys):
436:     '''
437:     Enforces the priority of a local variable over potentially conflicting
438:     argument(s) from a kwargs dict. The following possible output values are
439:     considered in order of priority:
440: 
441:         local_var > kwargs[keys[0]] > ... > kwargs[keys[-1]]
442: 
443:     The first of these whose value is not None will be returned. If all are
444:     None then None will be returned. Each key in keys will be removed from the
445:     kwargs dict in place.
446: 
447:     Parameters
448:     ----------
449:         local_var: any object
450:             The local variable (highest priority)
451: 
452:         kwargs: dict
453:             Dictionary of keyword arguments; modified in place
454: 
455:         keys: str(s)
456:             Name(s) of keyword arguments to process, in descending order of
457:             priority
458: 
459:     Returns
460:     -------
461:         out: any object
462:             Either local_var or one of kwargs[key] for key in keys
463: 
464:     Raises
465:     ------
466:         IgnoredKeywordWarning
467:             For each key in keys that is removed from kwargs but not used as
468:             the output value
469: 
470:     '''
471:     out = local_var
472:     for key in keys:
473:         kwarg_val = kwargs.pop(key, None)
474:         if kwarg_val is not None:
475:             if out is None:
476:                 out = kwarg_val
477:             else:
478:                 warnings.warn('"%s" keyword argument will be ignored' % key,
479:                               IgnoredKeywordWarning)
480:     return out
481: 
482: 
483: def strip_math(s):
484:     '''remove latex formatting from mathtext'''
485:     remove = (r'\mathdefault', r'\rm', r'\cal', r'\tt', r'\it', '\\', '{', '}')
486:     s = s[1:-1]
487:     for r in remove:
488:         s = s.replace(r, '')
489:     return s
490: 
491: 
492: class Bunch(object):
493:     '''
494:     Often we want to just collect a bunch of stuff together, naming each
495:     item of the bunch; a dictionary's OK for that, but a small do- nothing
496:     class is even handier, and prettier to use.  Whenever you want to
497:     group a few variables::
498: 
499:       >>> point = Bunch(datum=2, squared=4, coord=12)
500:       >>> point.datum
501: 
502:       By: Alex Martelli
503:       From: https://code.activestate.com/recipes/121294/
504:     '''
505:     def __init__(self, **kwds):
506:         self.__dict__.update(kwds)
507: 
508:     def __repr__(self):
509:         return 'Bunch(%s)' % ', '.join(
510:             '%s=%s' % kv for kv in six.iteritems(vars(self)))
511: 
512: 
513: @deprecated('2.1')
514: def unique(x):
515:     '''Return a list of unique elements of *x*'''
516:     return list(set(x))
517: 
518: 
519: def iterable(obj):
520:     '''return true if *obj* is iterable'''
521:     try:
522:         iter(obj)
523:     except TypeError:
524:         return False
525:     return True
526: 
527: 
528: @deprecated('2.1')
529: def is_string_like(obj):
530:     '''Return True if *obj* looks like a string'''
531:     # (np.str_ == np.unicode_ on Py3).
532:     return isinstance(obj, (six.string_types, np.str_, np.unicode_))
533: 
534: 
535: @deprecated('2.1')
536: def is_sequence_of_strings(obj):
537:     '''Returns true if *obj* is iterable and contains strings'''
538:     if not iterable(obj):
539:         return False
540:     if is_string_like(obj) and not isinstance(obj, np.ndarray):
541:         try:
542:             obj = obj.values
543:         except AttributeError:
544:             # not pandas
545:             return False
546:     for o in obj:
547:         if not is_string_like(o):
548:             return False
549:     return True
550: 
551: 
552: def is_hashable(obj):
553:     '''Returns true if *obj* can be hashed'''
554:     try:
555:         hash(obj)
556:     except TypeError:
557:         return False
558:     return True
559: 
560: 
561: def is_writable_file_like(obj):
562:     '''return true if *obj* looks like a file object with a *write* method'''
563:     return callable(getattr(obj, 'write', None))
564: 
565: 
566: def file_requires_unicode(x):
567:     '''
568:     Returns `True` if the given writable file-like object requires Unicode
569:     to be written to it.
570:     '''
571:     try:
572:         x.write(b'')
573:     except TypeError:
574:         return True
575:     else:
576:         return False
577: 
578: 
579: @deprecated('2.1')
580: def is_scalar(obj):
581:     '''return true if *obj* is not string like and is not iterable'''
582:     return not isinstance(obj, six.string_types) and not iterable(obj)
583: 
584: 
585: def is_numlike(obj):
586:     '''return true if *obj* looks like a number'''
587:     return isinstance(obj, (numbers.Number, np.number))
588: 
589: 
590: def to_filehandle(fname, flag='rU', return_opened=False):
591:     '''
592:     *fname* can be a filename or a file handle.  Support for gzipped
593:     files is automatic, if the filename ends in .gz.  *flag* is a
594:     read/write flag for :func:`file`
595:     '''
596:     if isinstance(fname, six.string_types):
597:         if fname.endswith('.gz'):
598:             # get rid of 'U' in flag for gzipped files.
599:             flag = flag.replace('U', '')
600:             fh = gzip.open(fname, flag)
601:         elif fname.endswith('.bz2'):
602:             # get rid of 'U' in flag for bz2 files
603:             flag = flag.replace('U', '')
604:             import bz2
605:             fh = bz2.BZ2File(fname, flag)
606:         else:
607:             fh = open(fname, flag)
608:         opened = True
609:     elif hasattr(fname, 'seek'):
610:         fh = fname
611:         opened = False
612:     else:
613:         raise ValueError('fname must be a string or file handle')
614:     if return_opened:
615:         return fh, opened
616:     return fh
617: 
618: 
619: def is_scalar_or_string(val):
620:     '''Return whether the given object is a scalar or string like.'''
621:     return isinstance(val, six.string_types) or not iterable(val)
622: 
623: 
624: def _string_to_bool(s):
625:     '''Parses the string argument as a boolean'''
626:     if not isinstance(s, six.string_types):
627:         return bool(s)
628:     if s.lower() in ['on', 'true']:
629:         return True
630:     if s.lower() in ['off', 'false']:
631:         return False
632:     raise ValueError('String "%s" must be one of: '
633:                      '"on", "off", "true", or "false"' % s)
634: 
635: 
636: def get_sample_data(fname, asfileobj=True):
637:     '''
638:     Return a sample data file.  *fname* is a path relative to the
639:     `mpl-data/sample_data` directory.  If *asfileobj* is `True`
640:     return a file object, otherwise just a file path.
641: 
642:     Set the rc parameter examples.directory to the directory where we should
643:     look, if sample_data files are stored in a location different than
644:     default (which is 'mpl-data/sample_data` at the same level of 'matplotlib`
645:     Python module files).
646: 
647:     If the filename ends in .gz, the file is implicitly ungzipped.
648:     '''
649:     import matplotlib
650: 
651:     if matplotlib.rcParams['examples.directory']:
652:         root = matplotlib.rcParams['examples.directory']
653:     else:
654:         root = os.path.join(matplotlib._get_data_path(), 'sample_data')
655:     path = os.path.join(root, fname)
656: 
657:     if asfileobj:
658:         if (os.path.splitext(fname)[-1].lower() in
659:                 ('.csv', '.xrc', '.txt')):
660:             mode = 'r'
661:         else:
662:             mode = 'rb'
663: 
664:         base, ext = os.path.splitext(fname)
665:         if ext == '.gz':
666:             return gzip.open(path, mode)
667:         else:
668:             return open(path, mode)
669:     else:
670:         return path
671: 
672: 
673: def flatten(seq, scalarp=is_scalar_or_string):
674:     '''
675:     Returns a generator of flattened nested containers
676: 
677:     For example:
678: 
679:         >>> from matplotlib.cbook import flatten
680:         >>> l = (('John', ['Hunter']), (1, 23), [[([42, (5, 23)], )]])
681:         >>> print(list(flatten(l)))
682:         ['John', 'Hunter', 1, 23, 42, 5, 23]
683: 
684:     By: Composite of Holger Krekel and Luther Blissett
685:     From: https://code.activestate.com/recipes/121294/
686:     and Recipe 1.12 in cookbook
687:     '''
688:     for item in seq:
689:         if scalarp(item) or item is None:
690:             yield item
691:         else:
692:             for subitem in flatten(item, scalarp):
693:                 yield subitem
694: 
695: 
696: @deprecated('2.1', "sorted(..., key=itemgetter(...))")
697: class Sorter(object):
698:     '''
699:     Sort by attribute or item
700: 
701:     Example usage::
702: 
703:       sort = Sorter()
704: 
705:       list = [(1, 2), (4, 8), (0, 3)]
706:       dict = [{'a': 3, 'b': 4}, {'a': 5, 'b': 2}, {'a': 0, 'b': 0},
707:               {'a': 9, 'b': 9}]
708: 
709: 
710:       sort(list)       # default sort
711:       sort(list, 1)    # sort by index 1
712:       sort(dict, 'a')  # sort a list of dicts by key 'a'
713: 
714:     '''
715: 
716:     def _helper(self, data, aux, inplace):
717:         aux.sort()
718:         result = [data[i] for junk, i in aux]
719:         if inplace:
720:             data[:] = result
721:         return result
722: 
723:     def byItem(self, data, itemindex=None, inplace=1):
724:         if itemindex is None:
725:             if inplace:
726:                 data.sort()
727:                 result = data
728:             else:
729:                 result = sorted(data)
730:             return result
731:         else:
732:             aux = [(data[i][itemindex], i) for i in range(len(data))]
733:             return self._helper(data, aux, inplace)
734: 
735:     def byAttribute(self, data, attributename, inplace=1):
736:         aux = [(getattr(data[i], attributename), i) for i in range(len(data))]
737:         return self._helper(data, aux, inplace)
738: 
739:     # a couple of handy synonyms
740:     sort = byItem
741:     __call__ = byItem
742: 
743: 
744: @deprecated('2.1')
745: class Xlator(dict):
746:     '''
747:     All-in-one multiple-string-substitution class
748: 
749:     Example usage::
750: 
751:       text = "Larry Wall is the creator of Perl"
752:       adict = {
753:       "Larry Wall" : "Guido van Rossum",
754:       "creator" : "Benevolent Dictator for Life",
755:       "Perl" : "Python",
756:       }
757: 
758:       print(multiple_replace(adict, text))
759: 
760:       xlat = Xlator(adict)
761:       print(xlat.xlat(text))
762:     '''
763: 
764:     def _make_regex(self):
765:         ''' Build re object based on the keys of the current dictionary '''
766:         return re.compile("|".join(map(re.escape, self)))
767: 
768:     def __call__(self, match):
769:         ''' Handler invoked for each regex *match* '''
770:         return self[match.group(0)]
771: 
772:     def xlat(self, text):
773:         ''' Translate *text*, returns the modified text. '''
774:         return self._make_regex().sub(self, text)
775: 
776: 
777: @deprecated('2.1')
778: def soundex(name, len=4):
779:     ''' soundex module conforming to Odell-Russell algorithm '''
780: 
781:     # digits holds the soundex values for the alphabet
782:     soundex_digits = '01230120022455012623010202'
783:     sndx = ''
784:     fc = ''
785: 
786:     # Translate letters in name to soundex digits
787:     for c in name.upper():
788:         if c.isalpha():
789:             if not fc:
790:                 fc = c   # Remember first letter
791:             d = soundex_digits[ord(c) - ord('A')]
792:             # Duplicate consecutive soundex digits are skipped
793:             if not sndx or (d != sndx[-1]):
794:                 sndx += d
795: 
796:     # Replace first digit with first letter
797:     sndx = fc + sndx[1:]
798: 
799:     # Remove all 0s from the soundex code
800:     sndx = sndx.replace('0', '')
801: 
802:     # Return soundex code truncated or 0-padded to len characters
803:     return (sndx + (len * '0'))[:len]
804: 
805: 
806: @deprecated('2.1')
807: class Null(object):
808:     ''' Null objects always and reliably "do nothing." '''
809: 
810:     def __init__(self, *args, **kwargs):
811:         pass
812: 
813:     def __call__(self, *args, **kwargs):
814:         return self
815: 
816:     def __str__(self):
817:         return "Null()"
818: 
819:     def __repr__(self):
820:         return "Null()"
821: 
822:     if six.PY3:
823:         def __bool__(self):
824:             return 0
825:     else:
826:         def __nonzero__(self):
827:             return 0
828: 
829:     def __getattr__(self, name):
830:         return self
831: 
832:     def __setattr__(self, name, value):
833:         return self
834: 
835:     def __delattr__(self, name):
836:         return self
837: 
838: 
839: def mkdirs(newdir, mode=0o777):
840:     '''
841:     make directory *newdir* recursively, and set *mode*.  Equivalent to ::
842: 
843:         > mkdir -p NEWDIR
844:         > chmod MODE NEWDIR
845:     '''
846:     # this functionality is now in core python as of 3.2
847:     # LPY DROP
848:     if six.PY3:
849:         os.makedirs(newdir, mode=mode, exist_ok=True)
850:     else:
851:         try:
852:             os.makedirs(newdir, mode=mode)
853:         except OSError as exception:
854:             if exception.errno != errno.EEXIST:
855:                 raise
856: 
857: 
858: class GetRealpathAndStat(object):
859:     def __init__(self):
860:         self._cache = {}
861: 
862:     def __call__(self, path):
863:         result = self._cache.get(path)
864:         if result is None:
865:             realpath = os.path.realpath(path)
866:             if sys.platform == 'win32':
867:                 stat_key = realpath
868:             else:
869:                 stat = os.stat(realpath)
870:                 stat_key = (stat.st_ino, stat.st_dev)
871:             result = realpath, stat_key
872:             self._cache[path] = result
873:         return result
874: 
875: 
876: get_realpath_and_stat = GetRealpathAndStat()
877: 
878: 
879: @deprecated('2.1')
880: def dict_delall(d, keys):
881:     '''delete all of the *keys* from the :class:`dict` *d*'''
882:     for key in keys:
883:         try:
884:             del d[key]
885:         except KeyError:
886:             pass
887: 
888: 
889: @deprecated('2.1')
890: class RingBuffer(object):
891:     ''' class that implements a not-yet-full buffer '''
892:     def __init__(self, size_max):
893:         self.max = size_max
894:         self.data = []
895: 
896:     class __Full:
897:         ''' class that implements a full buffer '''
898:         def append(self, x):
899:             ''' Append an element overwriting the oldest one. '''
900:             self.data[self.cur] = x
901:             self.cur = (self.cur + 1) % self.max
902: 
903:         def get(self):
904:             ''' return list of elements in correct order '''
905:             return self.data[self.cur:] + self.data[:self.cur]
906: 
907:     def append(self, x):
908:         '''append an element at the end of the buffer'''
909:         self.data.append(x)
910:         if len(self.data) == self.max:
911:             self.cur = 0
912:             # Permanently change self's class from non-full to full
913:             self.__class__ = __Full
914: 
915:     def get(self):
916:         ''' Return a list of elements from the oldest to the newest. '''
917:         return self.data
918: 
919:     def __get_item__(self, i):
920:         return self.data[i % len(self.data)]
921: 
922: 
923: @deprecated('2.1')
924: def get_split_ind(seq, N):
925:     '''
926:     *seq* is a list of words.  Return the index into seq such that::
927: 
928:         len(' '.join(seq[:ind])<=N
929: 
930:     .
931:     '''
932: 
933:     s_len = 0
934:     # todo: use Alex's xrange pattern from the cbook for efficiency
935:     for (word, ind) in zip(seq, xrange(len(seq))):
936:         s_len += len(word) + 1  # +1 to account for the len(' ')
937:         if s_len >= N:
938:             return ind
939:     return len(seq)
940: 
941: 
942: @deprecated('2.1', alternative='textwrap.TextWrapper')
943: def wrap(prefix, text, cols):
944:     '''wrap *text* with *prefix* at length *cols*'''
945:     pad = ' ' * len(prefix.expandtabs())
946:     available = cols - len(pad)
947: 
948:     seq = text.split(' ')
949:     Nseq = len(seq)
950:     ind = 0
951:     lines = []
952:     while ind < Nseq:
953:         lastInd = ind
954:         ind += get_split_ind(seq[ind:], available)
955:         lines.append(seq[lastInd:ind])
956: 
957:     # add the prefix to the first line, pad with spaces otherwise
958:     ret = prefix + ' '.join(lines[0]) + '\n'
959:     for line in lines[1:]:
960:         ret += pad + ' '.join(line) + '\n'
961:     return ret
962: 
963: 
964: # A regular expression used to determine the amount of space to
965: # remove.  It looks for the first sequence of spaces immediately
966: # following the first newline, or at the beginning of the string.
967: _find_dedent_regex = re.compile(r"(?:(?:\n\r?)|^)( *)\S")
968: # A cache to hold the regexs that actually remove the indent.
969: _dedent_regex = {}
970: 
971: 
972: def dedent(s):
973:     '''
974:     Remove excess indentation from docstring *s*.
975: 
976:     Discards any leading blank lines, then removes up to n whitespace
977:     characters from each line, where n is the number of leading
978:     whitespace characters in the first line. It differs from
979:     textwrap.dedent in its deletion of leading blank lines and its use
980:     of the first non-blank line to determine the indentation.
981: 
982:     It is also faster in most cases.
983:     '''
984:     # This implementation has a somewhat obtuse use of regular
985:     # expressions.  However, this function accounted for almost 30% of
986:     # matplotlib startup time, so it is worthy of optimization at all
987:     # costs.
988: 
989:     if not s:      # includes case of s is None
990:         return ''
991: 
992:     match = _find_dedent_regex.match(s)
993:     if match is None:
994:         return s
995: 
996:     # This is the number of spaces to remove from the left-hand side.
997:     nshift = match.end(1) - match.start(1)
998:     if nshift == 0:
999:         return s
1000: 
1001:     # Get a regex that will remove *up to* nshift spaces from the
1002:     # beginning of each line.  If it isn't in the cache, generate it.
1003:     unindent = _dedent_regex.get(nshift, None)
1004:     if unindent is None:
1005:         unindent = re.compile("\n\r? {0,%d}" % nshift)
1006:         _dedent_regex[nshift] = unindent
1007: 
1008:     result = unindent.sub("\n", s).strip()
1009:     return result
1010: 
1011: 
1012: def listFiles(root, patterns='*', recurse=1, return_folders=0):
1013:     '''
1014:     Recursively list files
1015: 
1016:     from Parmar and Martelli in the Python Cookbook
1017:     '''
1018:     import os.path
1019:     import fnmatch
1020:     # Expand patterns from semicolon-separated string to list
1021:     pattern_list = patterns.split(';')
1022:     results = []
1023: 
1024:     for dirname, dirs, files in os.walk(root):
1025:         # Append to results all relevant files (and perhaps folders)
1026:         for name in files:
1027:             fullname = os.path.normpath(os.path.join(dirname, name))
1028:             if return_folders or os.path.isfile(fullname):
1029:                 for pattern in pattern_list:
1030:                     if fnmatch.fnmatch(name, pattern):
1031:                         results.append(fullname)
1032:                         break
1033:         # Block recursion if recursion was disallowed
1034:         if not recurse:
1035:             break
1036: 
1037:     return results
1038: 
1039: 
1040: @deprecated('2.1')
1041: def get_recursive_filelist(args):
1042:     '''
1043:     Recurse all the files and dirs in *args* ignoring symbolic links
1044:     and return the files as a list of strings
1045:     '''
1046:     files = []
1047: 
1048:     for arg in args:
1049:         if os.path.isfile(arg):
1050:             files.append(arg)
1051:             continue
1052:         if os.path.isdir(arg):
1053:             newfiles = listFiles(arg, recurse=1, return_folders=1)
1054:             files.extend(newfiles)
1055: 
1056:     return [f for f in files if not os.path.islink(f)]
1057: 
1058: 
1059: @deprecated('2.1')
1060: def pieces(seq, num=2):
1061:     '''Break up the *seq* into *num* tuples'''
1062:     start = 0
1063:     while 1:
1064:         item = seq[start:start + num]
1065:         if not len(item):
1066:             break
1067:         yield item
1068:         start += num
1069: 
1070: 
1071: @deprecated('2.1')
1072: def exception_to_str(s=None):
1073:     if six.PY3:
1074:         sh = io.StringIO()
1075:     else:
1076:         sh = io.BytesIO()
1077:     if s is not None:
1078:         print(s, file=sh)
1079:     traceback.print_exc(file=sh)
1080:     return sh.getvalue()
1081: 
1082: 
1083: @deprecated('2.1')
1084: def allequal(seq):
1085:     '''
1086:     Return *True* if all elements of *seq* compare equal.  If *seq* is
1087:     0 or 1 length, return *True*
1088:     '''
1089:     if len(seq) < 2:
1090:         return True
1091:     val = seq[0]
1092:     for i in xrange(1, len(seq)):
1093:         thisval = seq[i]
1094:         if thisval != val:
1095:             return False
1096:     return True
1097: 
1098: 
1099: @deprecated('2.1')
1100: def alltrue(seq):
1101:     '''
1102:     Return *True* if all elements of *seq* evaluate to *True*.  If
1103:     *seq* is empty, return *False*.
1104:     '''
1105:     if not len(seq):
1106:         return False
1107:     for val in seq:
1108:         if not val:
1109:             return False
1110:     return True
1111: 
1112: 
1113: @deprecated('2.1')
1114: def onetrue(seq):
1115:     '''
1116:     Return *True* if one element of *seq* is *True*.  It *seq* is
1117:     empty, return *False*.
1118:     '''
1119:     if not len(seq):
1120:         return False
1121:     for val in seq:
1122:         if val:
1123:             return True
1124:     return False
1125: 
1126: 
1127: @deprecated('2.1')
1128: def allpairs(x):
1129:     '''
1130:     return all possible pairs in sequence *x*
1131:     '''
1132:     return [(s, f) for i, f in enumerate(x) for s in x[i + 1:]]
1133: 
1134: 
1135: class maxdict(dict):
1136:     '''
1137:     A dictionary with a maximum size; this doesn't override all the
1138:     relevant methods to constrain the size, just setitem, so use with
1139:     caution
1140:     '''
1141:     def __init__(self, maxsize):
1142:         dict.__init__(self)
1143:         self.maxsize = maxsize
1144:         self._killkeys = []
1145: 
1146:     def __setitem__(self, k, v):
1147:         if k not in self:
1148:             if len(self) >= self.maxsize:
1149:                 del self[self._killkeys[0]]
1150:                 del self._killkeys[0]
1151:             self._killkeys.append(k)
1152:         dict.__setitem__(self, k, v)
1153: 
1154: 
1155: class Stack(object):
1156:     '''
1157:     Implement a stack where elements can be pushed on and you can move
1158:     back and forth.  But no pop.  Should mimic home / back / forward
1159:     in a browser
1160:     '''
1161: 
1162:     def __init__(self, default=None):
1163:         self.clear()
1164:         self._default = default
1165: 
1166:     def __call__(self):
1167:         '''return the current element, or None'''
1168:         if not len(self._elements):
1169:             return self._default
1170:         else:
1171:             return self._elements[self._pos]
1172: 
1173:     def __len__(self):
1174:         return self._elements.__len__()
1175: 
1176:     def __getitem__(self, ind):
1177:         return self._elements.__getitem__(ind)
1178: 
1179:     def forward(self):
1180:         '''move the position forward and return the current element'''
1181:         n = len(self._elements)
1182:         if self._pos < n - 1:
1183:             self._pos += 1
1184:         return self()
1185: 
1186:     def back(self):
1187:         '''move the position back and return the current element'''
1188:         if self._pos > 0:
1189:             self._pos -= 1
1190:         return self()
1191: 
1192:     def push(self, o):
1193:         '''
1194:         push object onto stack at current position - all elements
1195:         occurring later than the current position are discarded
1196:         '''
1197:         self._elements = self._elements[:self._pos + 1]
1198:         self._elements.append(o)
1199:         self._pos = len(self._elements) - 1
1200:         return self()
1201: 
1202:     def home(self):
1203:         '''push the first element onto the top of the stack'''
1204:         if not len(self._elements):
1205:             return
1206:         self.push(self._elements[0])
1207:         return self()
1208: 
1209:     def empty(self):
1210:         return len(self._elements) == 0
1211: 
1212:     def clear(self):
1213:         '''empty the stack'''
1214:         self._pos = -1
1215:         self._elements = []
1216: 
1217:     def bubble(self, o):
1218:         '''
1219:         raise *o* to the top of the stack and return *o*.  *o* must be
1220:         in the stack
1221:         '''
1222: 
1223:         if o not in self._elements:
1224:             raise ValueError('Unknown element o')
1225:         old = self._elements[:]
1226:         self.clear()
1227:         bubbles = []
1228:         for thiso in old:
1229:             if thiso == o:
1230:                 bubbles.append(thiso)
1231:             else:
1232:                 self.push(thiso)
1233:         for thiso in bubbles:
1234:             self.push(o)
1235:         return o
1236: 
1237:     def remove(self, o):
1238:         'remove element *o* from the stack'
1239:         if o not in self._elements:
1240:             raise ValueError('Unknown element o')
1241:         old = self._elements[:]
1242:         self.clear()
1243:         for thiso in old:
1244:             if thiso == o:
1245:                 continue
1246:             else:
1247:                 self.push(thiso)
1248: 
1249: 
1250: @deprecated('2.1')
1251: def finddir(o, match, case=False):
1252:     '''
1253:     return all attributes of *o* which match string in match.  if case
1254:     is True require an exact case match.
1255:     '''
1256:     if case:
1257:         names = [(name, name) for name in dir(o)
1258:                  if isinstance(name, six.string_types)]
1259:     else:
1260:         names = [(name.lower(), name) for name in dir(o)
1261:                  if isinstance(name, six.string_types)]
1262:         match = match.lower()
1263:     return [orig for name, orig in names if name.find(match) >= 0]
1264: 
1265: 
1266: @deprecated('2.1')
1267: def reverse_dict(d):
1268:     '''reverse the dictionary -- may lose data if values are not unique!'''
1269:     return {v: k for k, v in six.iteritems(d)}
1270: 
1271: 
1272: @deprecated('2.1')
1273: def restrict_dict(d, keys):
1274:     '''
1275:     Return a dictionary that contains those keys that appear in both
1276:     d and keys, with values from d.
1277:     '''
1278:     return {k: v for k, v in six.iteritems(d) if k in keys}
1279: 
1280: 
1281: def report_memory(i=0):  # argument may go away
1282:     '''return the memory consumed by process'''
1283:     from matplotlib.compat.subprocess import Popen, PIPE
1284:     pid = os.getpid()
1285:     if sys.platform == 'sunos5':
1286:         try:
1287:             a2 = Popen(str('ps -p %d -o osz') % pid, shell=True,
1288:                        stdout=PIPE).stdout.readlines()
1289:         except OSError:
1290:             raise NotImplementedError(
1291:                 "report_memory works on Sun OS only if "
1292:                 "the 'ps' program is found")
1293:         mem = int(a2[-1].strip())
1294:     elif sys.platform.startswith('linux'):
1295:         try:
1296:             a2 = Popen(str('ps -p %d -o rss,sz') % pid, shell=True,
1297:                        stdout=PIPE).stdout.readlines()
1298:         except OSError:
1299:             raise NotImplementedError(
1300:                 "report_memory works on Linux only if "
1301:                 "the 'ps' program is found")
1302:         mem = int(a2[1].split()[1])
1303:     elif sys.platform.startswith('darwin'):
1304:         try:
1305:             a2 = Popen(str('ps -p %d -o rss,vsz') % pid, shell=True,
1306:                        stdout=PIPE).stdout.readlines()
1307:         except OSError:
1308:             raise NotImplementedError(
1309:                 "report_memory works on Mac OS only if "
1310:                 "the 'ps' program is found")
1311:         mem = int(a2[1].split()[0])
1312:     elif sys.platform.startswith('win'):
1313:         try:
1314:             a2 = Popen([str("tasklist"), "/nh", "/fi", "pid eq %d" % pid],
1315:                        stdout=PIPE).stdout.read()
1316:         except OSError:
1317:             raise NotImplementedError(
1318:                 "report_memory works on Windows only if "
1319:                 "the 'tasklist' program is found")
1320:         mem = int(a2.strip().split()[-2].replace(',', ''))
1321:     else:
1322:         raise NotImplementedError(
1323:             "We don't have a memory monitor for %s" % sys.platform)
1324:     return mem
1325: 
1326: 
1327: _safezip_msg = 'In safezip, len(args[0])=%d but len(args[%d])=%d'
1328: 
1329: 
1330: def safezip(*args):
1331:     '''make sure *args* are equal len before zipping'''
1332:     Nx = len(args[0])
1333:     for i, arg in enumerate(args[1:]):
1334:         if len(arg) != Nx:
1335:             raise ValueError(_safezip_msg % (Nx, i + 1, len(arg)))
1336:     return list(zip(*args))
1337: 
1338: 
1339: @deprecated('2.1')
1340: def issubclass_safe(x, klass):
1341:     '''return issubclass(x, klass) and return False on a TypeError'''
1342: 
1343:     try:
1344:         return issubclass(x, klass)
1345:     except TypeError:
1346:         return False
1347: 
1348: 
1349: def safe_masked_invalid(x, copy=False):
1350:     x = np.array(x, subok=True, copy=copy)
1351:     if not x.dtype.isnative:
1352:         # Note that the argument to `byteswap` is 'inplace',
1353:         # thus if we have already made a copy, do the byteswap in
1354:         # place, else make a copy with the byte order swapped.
1355:         # Be explicit that we are swapping the byte order of the dtype
1356:         x = x.byteswap(copy).newbyteorder('S')
1357: 
1358:     try:
1359:         xm = np.ma.masked_invalid(x, copy=False)
1360:         xm.shrink_mask()
1361:     except TypeError:
1362:         return x
1363:     return xm
1364: 
1365: 
1366: def print_cycles(objects, outstream=sys.stdout, show_progress=False):
1367:     '''
1368:     *objects*
1369:         A list of objects to find cycles in.  It is often useful to
1370:         pass in gc.garbage to find the cycles that are preventing some
1371:         objects from being garbage collected.
1372: 
1373:     *outstream*
1374:         The stream for output.
1375: 
1376:     *show_progress*
1377:         If True, print the number of objects reached as they are found.
1378:     '''
1379:     import gc
1380:     from types import FrameType
1381: 
1382:     def print_path(path):
1383:         for i, step in enumerate(path):
1384:             # next "wraps around"
1385:             next = path[(i + 1) % len(path)]
1386: 
1387:             outstream.write("   %s -- " % str(type(step)))
1388:             if isinstance(step, dict):
1389:                 for key, val in six.iteritems(step):
1390:                     if val is next:
1391:                         outstream.write("[%s]" % repr(key))
1392:                         break
1393:                     if key is next:
1394:                         outstream.write("[key] = %s" % repr(val))
1395:                         break
1396:             elif isinstance(step, list):
1397:                 outstream.write("[%d]" % step.index(next))
1398:             elif isinstance(step, tuple):
1399:                 outstream.write("( tuple )")
1400:             else:
1401:                 outstream.write(repr(step))
1402:             outstream.write(" ->\n")
1403:         outstream.write("\n")
1404: 
1405:     def recurse(obj, start, all, current_path):
1406:         if show_progress:
1407:             outstream.write("%d\r" % len(all))
1408: 
1409:         all[id(obj)] = None
1410: 
1411:         referents = gc.get_referents(obj)
1412:         for referent in referents:
1413:             # If we've found our way back to the start, this is
1414:             # a cycle, so print it out
1415:             if referent is start:
1416:                 print_path(current_path)
1417: 
1418:             # Don't go back through the original list of objects, or
1419:             # through temporary references to the object, since those
1420:             # are just an artifact of the cycle detector itself.
1421:             elif referent is objects or isinstance(referent, FrameType):
1422:                 continue
1423: 
1424:             # We haven't seen this object before, so recurse
1425:             elif id(referent) not in all:
1426:                 recurse(referent, start, all, current_path + [obj])
1427: 
1428:     for obj in objects:
1429:         outstream.write("Examining: %r\n" % (obj,))
1430:         recurse(obj, obj, {}, [])
1431: 
1432: 
1433: class Grouper(object):
1434:     '''
1435:     This class provides a lightweight way to group arbitrary objects
1436:     together into disjoint sets when a full-blown graph data structure
1437:     would be overkill.
1438: 
1439:     Objects can be joined using :meth:`join`, tested for connectedness
1440:     using :meth:`joined`, and all disjoint sets can be retreived by
1441:     using the object as an iterator.
1442: 
1443:     The objects being joined must be hashable and weak-referenceable.
1444: 
1445:     For example:
1446: 
1447:         >>> from matplotlib.cbook import Grouper
1448:         >>> class Foo(object):
1449:         ...     def __init__(self, s):
1450:         ...         self.s = s
1451:         ...     def __repr__(self):
1452:         ...         return self.s
1453:         ...
1454:         >>> a, b, c, d, e, f = [Foo(x) for x in 'abcdef']
1455:         >>> grp = Grouper()
1456:         >>> grp.join(a, b)
1457:         >>> grp.join(b, c)
1458:         >>> grp.join(d, e)
1459:         >>> sorted(map(tuple, grp))
1460:         [(a, b, c), (d, e)]
1461:         >>> grp.joined(a, b)
1462:         True
1463:         >>> grp.joined(a, c)
1464:         True
1465:         >>> grp.joined(a, d)
1466:         False
1467: 
1468:     '''
1469:     def __init__(self, init=()):
1470:         mapping = self._mapping = {}
1471:         for x in init:
1472:             mapping[ref(x)] = [ref(x)]
1473: 
1474:     def __contains__(self, item):
1475:         return ref(item) in self._mapping
1476: 
1477:     def clean(self):
1478:         '''
1479:         Clean dead weak references from the dictionary
1480:         '''
1481:         mapping = self._mapping
1482:         to_drop = [key for key in mapping if key() is None]
1483:         for key in to_drop:
1484:             val = mapping.pop(key)
1485:             val.remove(key)
1486: 
1487:     def join(self, a, *args):
1488:         '''
1489:         Join given arguments into the same set.  Accepts one or more
1490:         arguments.
1491:         '''
1492:         mapping = self._mapping
1493:         set_a = mapping.setdefault(ref(a), [ref(a)])
1494: 
1495:         for arg in args:
1496:             set_b = mapping.get(ref(arg))
1497:             if set_b is None:
1498:                 set_a.append(ref(arg))
1499:                 mapping[ref(arg)] = set_a
1500:             elif set_b is not set_a:
1501:                 if len(set_b) > len(set_a):
1502:                     set_a, set_b = set_b, set_a
1503:                 set_a.extend(set_b)
1504:                 for elem in set_b:
1505:                     mapping[elem] = set_a
1506: 
1507:         self.clean()
1508: 
1509:     def joined(self, a, b):
1510:         '''
1511:         Returns True if *a* and *b* are members of the same set.
1512:         '''
1513:         self.clean()
1514: 
1515:         mapping = self._mapping
1516:         try:
1517:             return mapping[ref(a)] is mapping[ref(b)]
1518:         except KeyError:
1519:             return False
1520: 
1521:     def remove(self, a):
1522:         self.clean()
1523: 
1524:         mapping = self._mapping
1525:         seta = mapping.pop(ref(a), None)
1526:         if seta is not None:
1527:             seta.remove(ref(a))
1528: 
1529:     def __iter__(self):
1530:         '''
1531:         Iterate over each of the disjoint sets as a list.
1532: 
1533:         The iterator is invalid if interleaved with calls to join().
1534:         '''
1535:         self.clean()
1536:         token = object()
1537: 
1538:         # Mark each group as we come across if by appending a token,
1539:         # and don't yield it twice
1540:         for group in six.itervalues(self._mapping):
1541:             if group[-1] is not token:
1542:                 yield [x() for x in group]
1543:                 group.append(token)
1544: 
1545:         # Cleanup the tokens
1546:         for group in six.itervalues(self._mapping):
1547:             if group[-1] is token:
1548:                 del group[-1]
1549: 
1550:     def get_siblings(self, a):
1551:         '''
1552:         Returns all of the items joined with *a*, including itself.
1553:         '''
1554:         self.clean()
1555: 
1556:         siblings = self._mapping.get(ref(a), [ref(a)])
1557:         return [x() for x in siblings]
1558: 
1559: 
1560: def simple_linear_interpolation(a, steps):
1561:     if steps == 1:
1562:         return a
1563: 
1564:     steps = int(np.floor(steps))
1565:     new_length = ((len(a) - 1) * steps) + 1
1566:     new_shape = list(a.shape)
1567:     new_shape[0] = new_length
1568:     result = np.zeros(new_shape, a.dtype)
1569: 
1570:     result[0] = a[0]
1571:     a0 = a[0:-1]
1572:     a1 = a[1:]
1573:     delta = ((a1 - a0) / steps)
1574:     for i in range(1, steps):
1575:         result[i::steps] = delta * i + a0
1576:     result[steps::steps] = a1
1577: 
1578:     return result
1579: 
1580: 
1581: @deprecated('2.1', alternative='shutil.rmtree')
1582: def recursive_remove(path):
1583:     if os.path.isdir(path):
1584:         for fname in (glob.glob(os.path.join(path, '*')) +
1585:                       glob.glob(os.path.join(path, '.*'))):
1586:             if os.path.isdir(fname):
1587:                 recursive_remove(fname)
1588:                 os.removedirs(fname)
1589:             else:
1590:                 os.remove(fname)
1591:         # os.removedirs(path)
1592:     else:
1593:         os.remove(path)
1594: 
1595: 
1596: def delete_masked_points(*args):
1597:     '''
1598:     Find all masked and/or non-finite points in a set of arguments,
1599:     and return the arguments with only the unmasked points remaining.
1600: 
1601:     Arguments can be in any of 5 categories:
1602: 
1603:     1) 1-D masked arrays
1604:     2) 1-D ndarrays
1605:     3) ndarrays with more than one dimension
1606:     4) other non-string iterables
1607:     5) anything else
1608: 
1609:     The first argument must be in one of the first four categories;
1610:     any argument with a length differing from that of the first
1611:     argument (and hence anything in category 5) then will be
1612:     passed through unchanged.
1613: 
1614:     Masks are obtained from all arguments of the correct length
1615:     in categories 1, 2, and 4; a point is bad if masked in a masked
1616:     array or if it is a nan or inf.  No attempt is made to
1617:     extract a mask from categories 2, 3, and 4 if :meth:`np.isfinite`
1618:     does not yield a Boolean array.
1619: 
1620:     All input arguments that are not passed unchanged are returned
1621:     as ndarrays after removing the points or rows corresponding to
1622:     masks in any of the arguments.
1623: 
1624:     A vastly simpler version of this function was originally
1625:     written as a helper for Axes.scatter().
1626: 
1627:     '''
1628:     if not len(args):
1629:         return ()
1630:     if (isinstance(args[0], six.string_types) or not iterable(args[0])):
1631:         raise ValueError("First argument must be a sequence")
1632:     nrecs = len(args[0])
1633:     margs = []
1634:     seqlist = [False] * len(args)
1635:     for i, x in enumerate(args):
1636:         if (not isinstance(x, six.string_types) and iterable(x)
1637:                 and len(x) == nrecs):
1638:             seqlist[i] = True
1639:             if isinstance(x, np.ma.MaskedArray):
1640:                 if x.ndim > 1:
1641:                     raise ValueError("Masked arrays must be 1-D")
1642:             else:
1643:                 x = np.asarray(x)
1644:         margs.append(x)
1645:     masks = []    # list of masks that are True where good
1646:     for i, x in enumerate(margs):
1647:         if seqlist[i]:
1648:             if x.ndim > 1:
1649:                 continue  # Don't try to get nan locations unless 1-D.
1650:             if isinstance(x, np.ma.MaskedArray):
1651:                 masks.append(~np.ma.getmaskarray(x))  # invert the mask
1652:                 xd = x.data
1653:             else:
1654:                 xd = x
1655:             try:
1656:                 mask = np.isfinite(xd)
1657:                 if isinstance(mask, np.ndarray):
1658:                     masks.append(mask)
1659:             except:  # Fixme: put in tuple of possible exceptions?
1660:                 pass
1661:     if len(masks):
1662:         mask = np.logical_and.reduce(masks)
1663:         igood = mask.nonzero()[0]
1664:         if len(igood) < nrecs:
1665:             for i, x in enumerate(margs):
1666:                 if seqlist[i]:
1667:                     margs[i] = x.take(igood, axis=0)
1668:     for i, x in enumerate(margs):
1669:         if seqlist[i] and isinstance(x, np.ma.MaskedArray):
1670:             margs[i] = x.filled()
1671:     return margs
1672: 
1673: 
1674: def boxplot_stats(X, whis=1.5, bootstrap=None, labels=None,
1675:                   autorange=False):
1676:     '''
1677:     Returns list of dictionaries of statistics used to draw a series
1678:     of box and whisker plots. The `Returns` section enumerates the
1679:     required keys of the dictionary. Users can skip this function and
1680:     pass a user-defined set of dictionaries to the new `axes.bxp` method
1681:     instead of relying on MPL to do the calculations.
1682: 
1683:     Parameters
1684:     ----------
1685:     X : array-like
1686:         Data that will be represented in the boxplots. Should have 2 or
1687:         fewer dimensions.
1688: 
1689:     whis : float, string, or sequence (default = 1.5)
1690:         As a float, determines the reach of the whiskers to the beyond the
1691:         first and third quartiles. In other words, where IQR is the
1692:         interquartile range (`Q3-Q1`), the upper whisker will extend to last
1693:         datum less than `Q3 + whis*IQR`). Similarly, the lower whisker will
1694:         extend to the first datum greater than `Q1 - whis*IQR`.
1695:         Beyond the whiskers, data are considered outliers
1696:         and are plotted as individual points. This can be set this to an
1697:         ascending sequence of percentile (e.g., [5, 95]) to set the
1698:         whiskers at specific percentiles of the data. Finally, `whis`
1699:         can be the string ``'range'`` to force the whiskers to the
1700:         minimum and maximum of the data. In the edge case that the 25th
1701:         and 75th percentiles are equivalent, `whis` can be automatically
1702:         set to ``'range'`` via the `autorange` option.
1703: 
1704:     bootstrap : int, optional
1705:         Number of times the confidence intervals around the median
1706:         should be bootstrapped (percentile method).
1707: 
1708:     labels : array-like, optional
1709:         Labels for each dataset. Length must be compatible with
1710:         dimensions of `X`.
1711: 
1712:     autorange : bool, optional (False)
1713:         When `True` and the data are distributed such that the  25th and
1714:         75th percentiles are equal, ``whis`` is set to ``'range'`` such
1715:         that the whisker ends are at the minimum and maximum of the
1716:         data.
1717: 
1718:     Returns
1719:     -------
1720:     bxpstats : list of dict
1721:         A list of dictionaries containing the results for each column
1722:         of data. Keys of each dictionary are the following:
1723: 
1724:         ========   ===================================
1725:         Key        Value Description
1726:         ========   ===================================
1727:         label      tick label for the boxplot
1728:         mean       arithemetic mean value
1729:         med        50th percentile
1730:         q1         first quartile (25th percentile)
1731:         q3         third quartile (75th percentile)
1732:         cilo       lower notch around the median
1733:         cihi       upper notch around the median
1734:         whislo     end of the lower whisker
1735:         whishi     end of the upper whisker
1736:         fliers     outliers
1737:         ========   ===================================
1738: 
1739:     Notes
1740:     -----
1741:     Non-bootstrapping approach to confidence interval uses Gaussian-
1742:     based asymptotic approximation:
1743: 
1744:     .. math::
1745: 
1746:         \\mathrm{med} \\pm 1.57 \\times \\frac{\\mathrm{iqr}}{\\sqrt{N}}
1747: 
1748:     General approach from:
1749:     McGill, R., Tukey, J.W., and Larsen, W.A. (1978) "Variations of
1750:     Boxplots", The American Statistician, 32:12-16.
1751: 
1752:     '''
1753: 
1754:     def _bootstrap_median(data, N=5000):
1755:         # determine 95% confidence intervals of the median
1756:         M = len(data)
1757:         percentiles = [2.5, 97.5]
1758: 
1759:         bs_index = np.random.randint(M, size=(N, M))
1760:         bsData = data[bs_index]
1761:         estimate = np.median(bsData, axis=1, overwrite_input=True)
1762: 
1763:         CI = np.percentile(estimate, percentiles)
1764:         return CI
1765: 
1766:     def _compute_conf_interval(data, med, iqr, bootstrap):
1767:         if bootstrap is not None:
1768:             # Do a bootstrap estimate of notch locations.
1769:             # get conf. intervals around median
1770:             CI = _bootstrap_median(data, N=bootstrap)
1771:             notch_min = CI[0]
1772:             notch_max = CI[1]
1773:         else:
1774: 
1775:             N = len(data)
1776:             notch_min = med - 1.57 * iqr / np.sqrt(N)
1777:             notch_max = med + 1.57 * iqr / np.sqrt(N)
1778: 
1779:         return notch_min, notch_max
1780: 
1781:     # output is a list of dicts
1782:     bxpstats = []
1783: 
1784:     # convert X to a list of lists
1785:     X = _reshape_2D(X, "X")
1786: 
1787:     ncols = len(X)
1788:     if labels is None:
1789:         labels = repeat(None)
1790:     elif len(labels) != ncols:
1791:         raise ValueError("Dimensions of labels and X must be compatible")
1792: 
1793:     input_whis = whis
1794:     for ii, (x, label) in enumerate(zip(X, labels), start=0):
1795: 
1796:         # empty dict
1797:         stats = {}
1798:         if label is not None:
1799:             stats['label'] = label
1800: 
1801:         # restore whis to the input values in case it got changed in the loop
1802:         whis = input_whis
1803: 
1804:         # note tricksyness, append up here and then mutate below
1805:         bxpstats.append(stats)
1806: 
1807:         # if empty, bail
1808:         if len(x) == 0:
1809:             stats['fliers'] = np.array([])
1810:             stats['mean'] = np.nan
1811:             stats['med'] = np.nan
1812:             stats['q1'] = np.nan
1813:             stats['q3'] = np.nan
1814:             stats['cilo'] = np.nan
1815:             stats['cihi'] = np.nan
1816:             stats['whislo'] = np.nan
1817:             stats['whishi'] = np.nan
1818:             stats['med'] = np.nan
1819:             continue
1820: 
1821:         # up-convert to an array, just to be safe
1822:         x = np.asarray(x)
1823: 
1824:         # arithmetic mean
1825:         stats['mean'] = np.mean(x)
1826: 
1827:         # medians and quartiles
1828:         q1, med, q3 = np.percentile(x, [25, 50, 75])
1829: 
1830:         # interquartile range
1831:         stats['iqr'] = q3 - q1
1832:         if stats['iqr'] == 0 and autorange:
1833:             whis = 'range'
1834: 
1835:         # conf. interval around median
1836:         stats['cilo'], stats['cihi'] = _compute_conf_interval(
1837:             x, med, stats['iqr'], bootstrap
1838:         )
1839: 
1840:         # lowest/highest non-outliers
1841:         if np.isscalar(whis):
1842:             if np.isreal(whis):
1843:                 loval = q1 - whis * stats['iqr']
1844:                 hival = q3 + whis * stats['iqr']
1845:             elif whis in ['range', 'limit', 'limits', 'min/max']:
1846:                 loval = np.min(x)
1847:                 hival = np.max(x)
1848:             else:
1849:                 whismsg = ('whis must be a float, valid string, or '
1850:                            'list of percentiles')
1851:                 raise ValueError(whismsg)
1852:         else:
1853:             loval = np.percentile(x, whis[0])
1854:             hival = np.percentile(x, whis[1])
1855: 
1856:         # get high extreme
1857:         wiskhi = np.compress(x <= hival, x)
1858:         if len(wiskhi) == 0 or np.max(wiskhi) < q3:
1859:             stats['whishi'] = q3
1860:         else:
1861:             stats['whishi'] = np.max(wiskhi)
1862: 
1863:         # get low extreme
1864:         wisklo = np.compress(x >= loval, x)
1865:         if len(wisklo) == 0 or np.min(wisklo) > q1:
1866:             stats['whislo'] = q1
1867:         else:
1868:             stats['whislo'] = np.min(wisklo)
1869: 
1870:         # compute a single array of outliers
1871:         stats['fliers'] = np.hstack([
1872:             np.compress(x < stats['whislo'], x),
1873:             np.compress(x > stats['whishi'], x)
1874:         ])
1875: 
1876:         # add in the remaining stats
1877:         stats['q1'], stats['med'], stats['q3'] = q1, med, q3
1878: 
1879:     return bxpstats
1880: 
1881: 
1882: # FIXME I don't think this is used anywhere
1883: @deprecated('2.1')
1884: def unmasked_index_ranges(mask, compressed=True):
1885:     '''
1886:     Find index ranges where *mask* is *False*.
1887: 
1888:     *mask* will be flattened if it is not already 1-D.
1889: 
1890:     Returns Nx2 :class:`numpy.ndarray` with each row the start and stop
1891:     indices for slices of the compressed :class:`numpy.ndarray`
1892:     corresponding to each of *N* uninterrupted runs of unmasked
1893:     values.  If optional argument *compressed* is *False*, it returns
1894:     the start and stop indices into the original :class:`numpy.ndarray`,
1895:     not the compressed :class:`numpy.ndarray`.  Returns *None* if there
1896:     are no unmasked values.
1897: 
1898:     Example::
1899: 
1900:       y = ma.array(np.arange(5), mask = [0,0,1,0,0])
1901:       ii = unmasked_index_ranges(ma.getmaskarray(y))
1902:       # returns array [[0,2,] [2,4,]]
1903: 
1904:       y.compressed()[ii[1,0]:ii[1,1]]
1905:       # returns array [3,4,]
1906: 
1907:       ii = unmasked_index_ranges(ma.getmaskarray(y), compressed=False)
1908:       # returns array [[0, 2], [3, 5]]
1909: 
1910:       y.filled()[ii[1,0]:ii[1,1]]
1911:       # returns array [3,4,]
1912: 
1913:     Prior to the transforms refactoring, this was used to support
1914:     masked arrays in Line2D.
1915:     '''
1916:     mask = mask.reshape(mask.size)
1917:     m = np.concatenate(((1,), mask, (1,)))
1918:     indices = np.arange(len(mask) + 1)
1919:     mdif = m[1:] - m[:-1]
1920:     i0 = np.compress(mdif == -1, indices)
1921:     i1 = np.compress(mdif == 1, indices)
1922:     assert len(i0) == len(i1)
1923:     if len(i1) == 0:
1924:         return None  # Maybe this should be np.zeros((0,2), dtype=int)
1925:     if not compressed:
1926:         return np.concatenate((i0[:, np.newaxis], i1[:, np.newaxis]), axis=1)
1927:     seglengths = i1 - i0
1928:     breakpoints = np.cumsum(seglengths)
1929:     ic0 = np.concatenate(((0,), breakpoints[:-1]))
1930:     ic1 = breakpoints
1931:     return np.concatenate((ic0[:, np.newaxis], ic1[:, np.newaxis]), axis=1)
1932: 
1933: 
1934: # The ls_mapper maps short codes for line style to their full name used by
1935: # backends; the reverse mapper is for mapping full names to short ones.
1936: ls_mapper = {'-': 'solid', '--': 'dashed', '-.': 'dashdot', ':': 'dotted'}
1937: ls_mapper_r = {v: k for k, v in six.iteritems(ls_mapper)}
1938: 
1939: 
1940: def align_iterators(func, *iterables):
1941:     '''
1942:     This generator takes a bunch of iterables that are ordered by func
1943:     It sends out ordered tuples::
1944: 
1945:        (func(row), [rows from all iterators matching func(row)])
1946: 
1947:     It is used by :func:`matplotlib.mlab.recs_join` to join record arrays
1948:     '''
1949:     class myiter:
1950:         def __init__(self, it):
1951:             self.it = it
1952:             self.key = self.value = None
1953:             self.iternext()
1954: 
1955:         def iternext(self):
1956:             try:
1957:                 self.value = next(self.it)
1958:                 self.key = func(self.value)
1959:             except StopIteration:
1960:                 self.value = self.key = None
1961: 
1962:         def __call__(self, key):
1963:             retval = None
1964:             if key == self.key:
1965:                 retval = self.value
1966:                 self.iternext()
1967:             elif self.key and key > self.key:
1968:                 raise ValueError("Iterator has been left behind")
1969:             return retval
1970: 
1971:     # This can be made more efficient by not computing the minimum key for each
1972:     # iteration
1973:     iters = [myiter(it) for it in iterables]
1974:     minvals = minkey = True
1975:     while True:
1976:         minvals = ([_f for _f in [it.key for it in iters] if _f])
1977:         if minvals:
1978:             minkey = min(minvals)
1979:             yield (minkey, [it(minkey) for it in iters])
1980:         else:
1981:             break
1982: 
1983: 
1984: def is_math_text(s):
1985:     # Did we find an even number of non-escaped dollar signs?
1986:     # If so, treat is as math text.
1987:     try:
1988:         s = six.text_type(s)
1989:     except UnicodeDecodeError:
1990:         raise ValueError(
1991:             "matplotlib display text must have all code points < 128 or use "
1992:             "Unicode strings")
1993: 
1994:     dollar_count = s.count(r'$') - s.count(r'\$')
1995:     even_dollars = (dollar_count > 0 and dollar_count % 2 == 0)
1996: 
1997:     return even_dollars
1998: 
1999: 
2000: def _to_unmasked_float_array(x):
2001:     '''
2002:     Convert a sequence to a float array; if input was a masked array, masked
2003:     values are converted to nans.
2004:     '''
2005:     if hasattr(x, 'mask'):
2006:         return np.ma.asarray(x, float).filled(np.nan)
2007:     else:
2008:         return np.asarray(x, float)
2009: 
2010: 
2011: def _check_1d(x):
2012:     '''
2013:     Converts a sequence of less than 1 dimension, to an array of 1
2014:     dimension; leaves everything else untouched.
2015:     '''
2016:     if not hasattr(x, 'shape') or len(x.shape) < 1:
2017:         return np.atleast_1d(x)
2018:     else:
2019:         try:
2020:             x[:, None]
2021:             return x
2022:         except (IndexError, TypeError):
2023:             return np.atleast_1d(x)
2024: 
2025: 
2026: def _reshape_2D(X, name):
2027:     '''
2028:     Use Fortran ordering to convert ndarrays and lists of iterables to lists of
2029:     1D arrays.
2030: 
2031:     Lists of iterables are converted by applying `np.asarray` to each of their
2032:     elements.  1D ndarrays are returned in a singleton list containing them.
2033:     2D ndarrays are converted to the list of their *columns*.
2034: 
2035:     *name* is used to generate the error message for invalid inputs.
2036:     '''
2037:     # Iterate over columns for ndarrays, over rows otherwise.
2038:     X = np.atleast_1d(X.T if isinstance(X, np.ndarray) else np.asarray(X))
2039:     if X.ndim == 1 and X.dtype.type != np.object_:
2040:         # 1D array of scalars: directly return it.
2041:         return [X]
2042:     elif X.ndim in [1, 2]:
2043:         # 2D array, or 1D array of iterables: flatten them first.
2044:         return [np.reshape(x, -1) for x in X]
2045:     else:
2046:         raise ValueError("{} must have 2 or fewer dimensions".format(name))
2047: 
2048: 
2049: def violin_stats(X, method, points=100):
2050:     '''
2051:     Returns a list of dictionaries of data which can be used to draw a series
2052:     of violin plots. See the `Returns` section below to view the required keys
2053:     of the dictionary. Users can skip this function and pass a user-defined set
2054:     of dictionaries to the `axes.vplot` method instead of using MPL to do the
2055:     calculations.
2056: 
2057:     Parameters
2058:     ----------
2059:     X : array-like
2060:         Sample data that will be used to produce the gaussian kernel density
2061:         estimates. Must have 2 or fewer dimensions.
2062: 
2063:     method : callable
2064:         The method used to calculate the kernel density estimate for each
2065:         column of data. When called via `method(v, coords)`, it should
2066:         return a vector of the values of the KDE evaluated at the values
2067:         specified in coords.
2068: 
2069:     points : scalar, default = 100
2070:         Defines the number of points to evaluate each of the gaussian kernel
2071:         density estimates at.
2072: 
2073:     Returns
2074:     -------
2075: 
2076:     A list of dictionaries containing the results for each column of data.
2077:     The dictionaries contain at least the following:
2078: 
2079:         - coords: A list of scalars containing the coordinates this particular
2080:           kernel density estimate was evaluated at.
2081:         - vals: A list of scalars containing the values of the kernel density
2082:           estimate at each of the coordinates given in `coords`.
2083:         - mean: The mean value for this column of data.
2084:         - median: The median value for this column of data.
2085:         - min: The minimum value for this column of data.
2086:         - max: The maximum value for this column of data.
2087:     '''
2088: 
2089:     # List of dictionaries describing each of the violins.
2090:     vpstats = []
2091: 
2092:     # Want X to be a list of data sequences
2093:     X = _reshape_2D(X, "X")
2094: 
2095:     for x in X:
2096:         # Dictionary of results for this distribution
2097:         stats = {}
2098: 
2099:         # Calculate basic stats for the distribution
2100:         min_val = np.min(x)
2101:         max_val = np.max(x)
2102: 
2103:         # Evaluate the kernel density estimate
2104:         coords = np.linspace(min_val, max_val, points)
2105:         stats['vals'] = method(x, coords)
2106:         stats['coords'] = coords
2107: 
2108:         # Store additional statistics for this distribution
2109:         stats['mean'] = np.mean(x)
2110:         stats['median'] = np.median(x)
2111:         stats['min'] = min_val
2112:         stats['max'] = max_val
2113: 
2114:         # Append to output
2115:         vpstats.append(stats)
2116: 
2117:     return vpstats
2118: 
2119: 
2120: class _NestedClassGetter(object):
2121:     # recipe from http://stackoverflow.com/a/11493777/741316
2122:     '''
2123:     When called with the containing class as the first argument,
2124:     and the name of the nested class as the second argument,
2125:     returns an instance of the nested class.
2126:     '''
2127:     def __call__(self, containing_class, class_name):
2128:         nested_class = getattr(containing_class, class_name)
2129: 
2130:         # make an instance of a simple object (this one will do), for which we
2131:         # can change the __class__ later on.
2132:         nested_instance = _NestedClassGetter()
2133: 
2134:         # set the class of the instance, the __init__ will never be called on
2135:         # the class but the original state will be set later on by pickle.
2136:         nested_instance.__class__ = nested_class
2137:         return nested_instance
2138: 
2139: 
2140: class _InstanceMethodPickler(object):
2141:     '''
2142:     Pickle cannot handle instancemethod saving. _InstanceMethodPickler
2143:     provides a solution to this.
2144:     '''
2145:     def __init__(self, instancemethod):
2146:         '''Takes an instancemethod as its only argument.'''
2147:         if six.PY3:
2148:             self.parent_obj = instancemethod.__self__
2149:             self.instancemethod_name = instancemethod.__func__.__name__
2150:         else:
2151:             self.parent_obj = instancemethod.im_self
2152:             self.instancemethod_name = instancemethod.im_func.__name__
2153: 
2154:     def get_instancemethod(self):
2155:         return getattr(self.parent_obj, self.instancemethod_name)
2156: 
2157: 
2158: def pts_to_prestep(x, *args):
2159:     '''
2160:     Convert continuous line to pre-steps.
2161: 
2162:     Given a set of ``N`` points, convert to ``2N - 1`` points, which when
2163:     connected linearly give a step function which changes values at the
2164:     beginning of the intervals.
2165: 
2166:     Parameters
2167:     ----------
2168:     x : array
2169:         The x location of the steps.
2170: 
2171:     y1, ..., yp : array
2172:         y arrays to be turned into steps; all must be the same length as ``x``.
2173: 
2174:     Returns
2175:     -------
2176:     out : array
2177:         The x and y values converted to steps in the same order as the input;
2178:         can be unpacked as ``x_out, y1_out, ..., yp_out``.  If the input is
2179:         length ``N``, each of these arrays will be length ``2N + 1``.
2180: 
2181:     Examples
2182:     --------
2183:     >> x_s, y1_s, y2_s = pts_to_prestep(x, y1, y2)
2184:     '''
2185:     steps = np.zeros((1 + len(args), 2 * len(x) - 1))
2186:     # In all `pts_to_*step` functions, only assign *once* using `x` and `args`,
2187:     # as converting to an array may be expensive.
2188:     steps[0, 0::2] = x
2189:     steps[0, 1::2] = steps[0, 0:-2:2]
2190:     steps[1:, 0::2] = args
2191:     steps[1:, 1::2] = steps[1:, 2::2]
2192:     return steps
2193: 
2194: 
2195: def pts_to_poststep(x, *args):
2196:     '''
2197:     Convert continuous line to post-steps.
2198: 
2199:     Given a set of ``N`` points convert to ``2N + 1`` points, which when
2200:     connected linearly give a step function which changes values at the end of
2201:     the intervals.
2202: 
2203:     Parameters
2204:     ----------
2205:     x : array
2206:         The x location of the steps.
2207: 
2208:     y1, ..., yp : array
2209:         y arrays to be turned into steps; all must be the same length as ``x``.
2210: 
2211:     Returns
2212:     -------
2213:     out : array
2214:         The x and y values converted to steps in the same order as the input;
2215:         can be unpacked as ``x_out, y1_out, ..., yp_out``.  If the input is
2216:         length ``N``, each of these arrays will be length ``2N + 1``.
2217: 
2218:     Examples
2219:     --------
2220:     >> x_s, y1_s, y2_s = pts_to_poststep(x, y1, y2)
2221:     '''
2222:     steps = np.zeros((1 + len(args), 2 * len(x) - 1))
2223:     steps[0, 0::2] = x
2224:     steps[0, 1::2] = steps[0, 2::2]
2225:     steps[1:, 0::2] = args
2226:     steps[1:, 1::2] = steps[1:, 0:-2:2]
2227:     return steps
2228: 
2229: 
2230: def pts_to_midstep(x, *args):
2231:     '''
2232:     Convert continuous line to mid-steps.
2233: 
2234:     Given a set of ``N`` points convert to ``2N`` points which when connected
2235:     linearly give a step function which changes values at the middle of the
2236:     intervals.
2237: 
2238:     Parameters
2239:     ----------
2240:     x : array
2241:         The x location of the steps.
2242: 
2243:     y1, ..., yp : array
2244:         y arrays to be turned into steps; all must be the same length as ``x``.
2245: 
2246:     Returns
2247:     -------
2248:     out : array
2249:         The x and y values converted to steps in the same order as the input;
2250:         can be unpacked as ``x_out, y1_out, ..., yp_out``.  If the input is
2251:         length ``N``, each of these arrays will be length ``2N``.
2252: 
2253:     Examples
2254:     --------
2255:     >> x_s, y1_s, y2_s = pts_to_midstep(x, y1, y2)
2256:     '''
2257:     steps = np.zeros((1 + len(args), 2 * len(x)))
2258:     x = np.asanyarray(x)
2259:     steps[0, 1:-1:2] = steps[0, 2::2] = (x[:-1] + x[1:]) / 2
2260:     steps[0, 0], steps[0, -1] = x[0], x[-1]
2261:     steps[1:, 0::2] = args
2262:     steps[1:, 1::2] = steps[1:, 0::2]
2263:     return steps
2264: 
2265: 
2266: STEP_LOOKUP_MAP = {'default': lambda x, y: (x, y),
2267:                    'steps': pts_to_prestep,
2268:                    'steps-pre': pts_to_prestep,
2269:                    'steps-post': pts_to_poststep,
2270:                    'steps-mid': pts_to_midstep}
2271: 
2272: 
2273: def index_of(y):
2274:     '''
2275:     A helper function to get the index of an input to plot
2276:     against if x values are not explicitly given.
2277: 
2278:     Tries to get `y.index` (works if this is a pd.Series), if that
2279:     fails, return np.arange(y.shape[0]).
2280: 
2281:     This will be extended in the future to deal with more types of
2282:     labeled data.
2283: 
2284:     Parameters
2285:     ----------
2286:     y : scalar or array-like
2287:         The proposed y-value
2288: 
2289:     Returns
2290:     -------
2291:     x, y : ndarray
2292:        The x and y values to plot.
2293:     '''
2294:     try:
2295:         return y.index.values, y.values
2296:     except AttributeError:
2297:         y = _check_1d(y)
2298:         return np.arange(y.shape[0], dtype=float), y
2299: 
2300: 
2301: def safe_first_element(obj):
2302:     if isinstance(obj, collections.Iterator):
2303:         # needed to accept `array.flat` as input.
2304:         # np.flatiter reports as an instance of collections.Iterator
2305:         # but can still be indexed via [].
2306:         # This has the side effect of re-setting the iterator, but
2307:         # that is acceptable.
2308:         try:
2309:             return obj[0]
2310:         except TypeError:
2311:             pass
2312:         raise RuntimeError("matplotlib does not support generators "
2313:                            "as input")
2314:     return next(iter(obj))
2315: 
2316: 
2317: def sanitize_sequence(data):
2318:     '''Converts dictview object to list'''
2319:     return list(data) if isinstance(data, collections.MappingView) else data
2320: 
2321: 
2322: def normalize_kwargs(kw, alias_mapping=None, required=(), forbidden=(),
2323:                      allowed=None):
2324:     '''Helper function to normalize kwarg inputs
2325: 
2326:     The order they are resolved are:
2327: 
2328:      1. aliasing
2329:      2. required
2330:      3. forbidden
2331:      4. allowed
2332: 
2333:     This order means that only the canonical names need appear in
2334:     `allowed`, `forbidden`, `required`
2335: 
2336:     Parameters
2337:     ----------
2338: 
2339:     alias_mapping, dict, optional
2340:         A mapping between a canonical name to a list of
2341:         aliases, in order of precedence from lowest to highest.
2342: 
2343:         If the canonical value is not in the list it is assumed to have
2344:         the highest priority.
2345: 
2346:     required : iterable, optional
2347:         A tuple of fields that must be in kwargs.
2348: 
2349:     forbidden : iterable, optional
2350:         A list of keys which may not be in kwargs
2351: 
2352:     allowed : tuple, optional
2353:         A tuple of allowed fields.  If this not None, then raise if
2354:         `kw` contains any keys not in the union of `required`
2355:         and `allowed`.  To allow only the required fields pass in
2356:         ``()`` for `allowed`
2357: 
2358:     Raises
2359:     ------
2360:     TypeError
2361:         To match what python raises if invalid args/kwargs are passed to
2362:         a callable.
2363: 
2364:     '''
2365:     # deal with default value of alias_mapping
2366:     if alias_mapping is None:
2367:         alias_mapping = dict()
2368: 
2369:     # make a local so we can pop
2370:     kw = dict(kw)
2371:     # output dictionary
2372:     ret = dict()
2373: 
2374:     # hit all alias mappings
2375:     for canonical, alias_list in six.iteritems(alias_mapping):
2376: 
2377:         # the alias lists are ordered from lowest to highest priority
2378:         # so we know to use the last value in this list
2379:         tmp = []
2380:         seen = []
2381:         for a in alias_list:
2382:             try:
2383:                 tmp.append(kw.pop(a))
2384:                 seen.append(a)
2385:             except KeyError:
2386:                 pass
2387:         # if canonical is not in the alias_list assume highest priority
2388:         if canonical not in alias_list:
2389:             try:
2390:                 tmp.append(kw.pop(canonical))
2391:                 seen.append(canonical)
2392:             except KeyError:
2393:                 pass
2394:         # if we found anything in this set of aliases put it in the return
2395:         # dict
2396:         if tmp:
2397:             ret[canonical] = tmp[-1]
2398:             if len(tmp) > 1:
2399:                 warnings.warn("Saw kwargs {seen!r} which are all aliases for "
2400:                               "{canon!r}.  Kept value from {used!r}".format(
2401:                                   seen=seen, canon=canonical, used=seen[-1]))
2402: 
2403:     # at this point we know that all keys which are aliased are removed, update
2404:     # the return dictionary from the cleaned local copy of the input
2405:     ret.update(kw)
2406: 
2407:     fail_keys = [k for k in required if k not in ret]
2408:     if fail_keys:
2409:         raise TypeError("The required keys {keys!r} "
2410:                         "are not in kwargs".format(keys=fail_keys))
2411: 
2412:     fail_keys = [k for k in forbidden if k in ret]
2413:     if fail_keys:
2414:         raise TypeError("The forbidden keys {keys!r} "
2415:                         "are in kwargs".format(keys=fail_keys))
2416: 
2417:     if allowed is not None:
2418:         allowed_set = set(required) | set(allowed)
2419:         fail_keys = [k for k in ret if k not in allowed_set]
2420:         if fail_keys:
2421:             raise TypeError("kwargs contains {keys!r} which are not in "
2422:                             "the required {req!r} or "
2423:                             "allowed {allow!r} keys".format(
2424:                                 keys=fail_keys, req=required,
2425:                                 allow=allowed))
2426: 
2427:     return ret
2428: 
2429: 
2430: def get_label(y, default_name):
2431:     try:
2432:         return y.name
2433:     except AttributeError:
2434:         return default_name
2435: 
2436: 
2437: _lockstr = '''\
2438: LOCKERROR: matplotlib is trying to acquire the lock
2439:     {!r}
2440: and has failed.  This maybe due to any other process holding this
2441: lock.  If you are sure no other matplotlib process is running try
2442: removing these folders and trying again.
2443: '''
2444: 
2445: 
2446: class Locked(object):
2447:     '''
2448:     Context manager to handle locks.
2449: 
2450:     Based on code from conda.
2451: 
2452:     (c) 2012-2013 Continuum Analytics, Inc. / https://www.continuum.io/
2453:     All Rights Reserved
2454: 
2455:     conda is distributed under the terms of the BSD 3-clause license.
2456:     Consult LICENSE_CONDA or https://opensource.org/licenses/BSD-3-Clause.
2457:     '''
2458:     LOCKFN = '.matplotlib_lock'
2459: 
2460:     class TimeoutError(RuntimeError):
2461:         pass
2462: 
2463:     def __init__(self, path):
2464:         self.path = path
2465:         self.end = "-" + str(os.getpid())
2466:         self.lock_path = os.path.join(self.path, self.LOCKFN + self.end)
2467:         self.pattern = os.path.join(self.path, self.LOCKFN + '-*')
2468:         self.remove = True
2469: 
2470:     def __enter__(self):
2471:         retries = 50
2472:         sleeptime = 0.1
2473:         while retries:
2474:             files = glob.glob(self.pattern)
2475:             if files and not files[0].endswith(self.end):
2476:                 time.sleep(sleeptime)
2477:                 retries -= 1
2478:             else:
2479:                 break
2480:         else:
2481:             err_str = _lockstr.format(self.pattern)
2482:             raise self.TimeoutError(err_str)
2483: 
2484:         if not files:
2485:             try:
2486:                 os.makedirs(self.lock_path)
2487:             except OSError:
2488:                 pass
2489:         else:  # PID lock already here --- someone else will remove it.
2490:             self.remove = False
2491: 
2492:     def __exit__(self, exc_type, exc_value, traceback):
2493:         if self.remove:
2494:             for path in self.lock_path, self.path:
2495:                 try:
2496:                     os.rmdir(path)
2497:                 except OSError:
2498:                     pass
2499: 
2500: 
2501: class _FuncInfo(object):
2502:     '''
2503:     Class used to store a function.
2504: 
2505:     '''
2506: 
2507:     def __init__(self, function, inverse, bounded_0_1=True, check_params=None):
2508:         '''
2509:         Parameters
2510:         ----------
2511: 
2512:         function : callable
2513:             A callable implementing the function receiving the variable as
2514:             first argument and any additional parameters in a list as second
2515:             argument.
2516:         inverse : callable
2517:             A callable implementing the inverse function receiving the variable
2518:             as first argument and any additional parameters in a list as
2519:             second argument. It must satisfy 'inverse(function(x, p), p) == x'.
2520:         bounded_0_1: bool or callable
2521:             A boolean indicating whether the function is bounded in the [0,1]
2522:             interval, or a callable taking a list of values for the additional
2523:             parameters, and returning a boolean indicating whether the function
2524:             is bounded in the [0,1] interval for that combination of
2525:             parameters. Default True.
2526:         check_params: callable or None
2527:             A callable taking a list of values for the additional parameters
2528:             and returning a boolean indicating whether that combination of
2529:             parameters is valid. It is only required if the function has
2530:             additional parameters and some of them are restricted.
2531:             Default None.
2532: 
2533:         '''
2534: 
2535:         self.function = function
2536:         self.inverse = inverse
2537: 
2538:         if callable(bounded_0_1):
2539:             self._bounded_0_1 = bounded_0_1
2540:         else:
2541:             self._bounded_0_1 = lambda x: bounded_0_1
2542: 
2543:         if check_params is None:
2544:             self._check_params = lambda x: True
2545:         elif callable(check_params):
2546:             self._check_params = check_params
2547:         else:
2548:             raise ValueError("Invalid 'check_params' argument.")
2549: 
2550:     def is_bounded_0_1(self, params=None):
2551:         '''
2552:         Returns a boolean indicating if the function is bounded in the [0,1]
2553:         interval for a particular set of additional parameters.
2554: 
2555:         Parameters
2556:         ----------
2557: 
2558:         params : list
2559:             The list of additional parameters. Default None.
2560: 
2561:         Returns
2562:         -------
2563: 
2564:         out : bool
2565:             True if the function is bounded in the [0,1] interval for
2566:             parameters 'params'. Otherwise False.
2567: 
2568:         '''
2569: 
2570:         return self._bounded_0_1(params)
2571: 
2572:     def check_params(self, params=None):
2573:         '''
2574:         Returns a boolean indicating if the set of additional parameters is
2575:         valid.
2576: 
2577:         Parameters
2578:         ----------
2579: 
2580:         params : list
2581:             The list of additional parameters. Default None.
2582: 
2583:         Returns
2584:         -------
2585: 
2586:         out : bool
2587:             True if 'params' is a valid set of additional parameters for the
2588:             function. Otherwise False.
2589: 
2590:         '''
2591: 
2592:         return self._check_params(params)
2593: 
2594: 
2595: class _StringFuncParser(object):
2596:     '''
2597:     A class used to convert predefined strings into
2598:     _FuncInfo objects, or to directly obtain _FuncInfo
2599:     properties.
2600: 
2601:     '''
2602: 
2603:     _funcs = {}
2604:     _funcs['linear'] = _FuncInfo(lambda x: x,
2605:                                  lambda x: x,
2606:                                  True)
2607:     _funcs['quadratic'] = _FuncInfo(np.square,
2608:                                     np.sqrt,
2609:                                     True)
2610:     _funcs['cubic'] = _FuncInfo(lambda x: x**3,
2611:                                 lambda x: x**(1. / 3),
2612:                                 True)
2613:     _funcs['sqrt'] = _FuncInfo(np.sqrt,
2614:                                np.square,
2615:                                True)
2616:     _funcs['cbrt'] = _FuncInfo(lambda x: x**(1. / 3),
2617:                                lambda x: x**3,
2618:                                True)
2619:     _funcs['log10'] = _FuncInfo(np.log10,
2620:                                 lambda x: (10**(x)),
2621:                                 False)
2622:     _funcs['log'] = _FuncInfo(np.log,
2623:                               np.exp,
2624:                               False)
2625:     _funcs['log2'] = _FuncInfo(np.log2,
2626:                                lambda x: (2**x),
2627:                                False)
2628:     _funcs['x**{p}'] = _FuncInfo(lambda x, p: x**p[0],
2629:                                  lambda x, p: x**(1. / p[0]),
2630:                                  True)
2631:     _funcs['root{p}(x)'] = _FuncInfo(lambda x, p: x**(1. / p[0]),
2632:                                      lambda x, p: x**p,
2633:                                      True)
2634:     _funcs['log{p}(x)'] = _FuncInfo(lambda x, p: (np.log(x) /
2635:                                                   np.log(p[0])),
2636:                                     lambda x, p: p[0]**(x),
2637:                                     False,
2638:                                     lambda p: p[0] > 0)
2639:     _funcs['log10(x+{p})'] = _FuncInfo(lambda x, p: np.log10(x + p[0]),
2640:                                        lambda x, p: 10**x - p[0],
2641:                                        lambda p: p[0] > 0)
2642:     _funcs['log(x+{p})'] = _FuncInfo(lambda x, p: np.log(x + p[0]),
2643:                                      lambda x, p: np.exp(x) - p[0],
2644:                                      lambda p: p[0] > 0)
2645:     _funcs['log{p}(x+{p})'] = _FuncInfo(lambda x, p: (np.log(x + p[1]) /
2646:                                                       np.log(p[0])),
2647:                                         lambda x, p: p[0]**(x) - p[1],
2648:                                         lambda p: p[1] > 0,
2649:                                         lambda p: p[0] > 0)
2650: 
2651:     def __init__(self, str_func):
2652:         '''
2653:         Parameters
2654:         ----------
2655:         str_func : string
2656:             String to be parsed.
2657: 
2658:         '''
2659: 
2660:         if not isinstance(str_func, six.string_types):
2661:             raise ValueError("'%s' must be a string." % str_func)
2662:         self._str_func = six.text_type(str_func)
2663:         self._key, self._params = self._get_key_params()
2664:         self._func = self._parse_func()
2665: 
2666:     def _parse_func(self):
2667:         '''
2668:         Parses the parameters to build a new _FuncInfo object,
2669:         replacing the relevant parameters if necessary in the lambda
2670:         functions.
2671: 
2672:         '''
2673: 
2674:         func = self._funcs[self._key]
2675: 
2676:         if not self._params:
2677:             func = _FuncInfo(func.function, func.inverse,
2678:                              func.is_bounded_0_1())
2679:         else:
2680:             m = func.function
2681:             function = (lambda x, m=m: m(x, self._params))
2682: 
2683:             m = func.inverse
2684:             inverse = (lambda x, m=m: m(x, self._params))
2685: 
2686:             is_bounded_0_1 = func.is_bounded_0_1(self._params)
2687: 
2688:             func = _FuncInfo(function, inverse,
2689:                              is_bounded_0_1)
2690:         return func
2691: 
2692:     @property
2693:     def func_info(self):
2694:         '''
2695:         Returns the _FuncInfo object.
2696: 
2697:         '''
2698:         return self._func
2699: 
2700:     @property
2701:     def function(self):
2702:         '''
2703:         Returns the callable for the direct function.
2704: 
2705:         '''
2706:         return self._func.function
2707: 
2708:     @property
2709:     def inverse(self):
2710:         '''
2711:         Returns the callable for the inverse function.
2712: 
2713:         '''
2714:         return self._func.inverse
2715: 
2716:     @property
2717:     def is_bounded_0_1(self):
2718:         '''
2719:         Returns a boolean indicating if the function is bounded
2720:         in the [0-1 interval].
2721: 
2722:         '''
2723:         return self._func.is_bounded_0_1()
2724: 
2725:     def _get_key_params(self):
2726:         str_func = self._str_func
2727:         # Checking if it comes with parameters
2728:         regex = r'\{(.*?)\}'
2729:         params = re.findall(regex, str_func)
2730: 
2731:         for i, param in enumerate(params):
2732:             try:
2733:                 params[i] = float(param)
2734:             except ValueError:
2735:                 raise ValueError("Parameter %i is '%s', which is "
2736:                                  "not a number." %
2737:                                  (i, param))
2738: 
2739:         str_func = re.sub(regex, '{p}', str_func)
2740: 
2741:         try:
2742:             func = self._funcs[str_func]
2743:         except (ValueError, KeyError):
2744:             raise ValueError("'%s' is an invalid string. The only strings "
2745:                              "recognized as functions are %s." %
2746:                              (str_func, list(self._funcs)))
2747: 
2748:         # Checking that the parameters are valid
2749:         if not func.check_params(params):
2750:             raise ValueError("%s are invalid values for the parameters "
2751:                              "in %s." %
2752:                              (params, str_func))
2753: 
2754:         return str_func, params
2755: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

unicode_273680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7, (-1)), 'unicode', u'\nA collection of utility functions and classes.  Originally, many\n(but not all) were from the Python Cookbook -- hence the name cbook.\n\nThis module is safe to import from anywhere within matplotlib;\nit imports matplotlib only at runtime.\n')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 12, 0))

# 'import six' statement (line 12)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/cbook/')
import_273681 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'six')

if (type(import_273681) is not StypyTypeError):

    if (import_273681 != 'pyd_module'):
        __import__(import_273681)
        sys_modules_273682 = sys.modules[import_273681]
        import_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'six', sys_modules_273682.module_type_store, module_type_store)
    else:
        import six

        import_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'six', six, module_type_store)

else:
    # Assigning a type to the variable 'six' (line 12)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 12, 0), 'six', import_273681)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/cbook/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 13, 0))

# 'from six.moves import xrange, zip' statement (line 13)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/cbook/')
import_273683 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'six.moves')

if (type(import_273683) is not StypyTypeError):

    if (import_273683 != 'pyd_module'):
        __import__(import_273683)
        sys_modules_273684 = sys.modules[import_273683]
        import_from_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'six.moves', sys_modules_273684.module_type_store, module_type_store, ['xrange', 'zip'])
        nest_module(stypy.reporting.localization.Localization(__file__, 13, 0), __file__, sys_modules_273684, sys_modules_273684.module_type_store, module_type_store)
    else:
        from six.moves import xrange, zip

        import_from_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'six.moves', None, module_type_store, ['xrange', 'zip'], [xrange, zip])

else:
    # Assigning a type to the variable 'six.moves' (line 13)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 13, 0), 'six.moves', import_273683)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/cbook/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 14, 0))

# 'import collections' statement (line 14)
import collections

import_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'collections', collections, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 15, 0))

# 'import datetime' statement (line 15)
import datetime

import_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'datetime', datetime, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 16, 0))

# 'import errno' statement (line 16)
import errno

import_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'errno', errno, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 17, 0))

# 'import functools' statement (line 17)
import functools

import_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'functools', functools, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 18, 0))

# 'import glob' statement (line 18)
import glob

import_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'glob', glob, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 19, 0))

# 'import gzip' statement (line 19)
import gzip

import_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'gzip', gzip, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 20, 0))

# 'import io' statement (line 20)
import io

import_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'io', io, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 21, 0))

# 'from itertools import repeat' statement (line 21)
try:
    from itertools import repeat

except:
    repeat = UndefinedType
import_from_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'itertools', None, module_type_store, ['repeat'], [repeat])

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 22, 0))

# 'import locale' statement (line 22)
import locale

import_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'locale', locale, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 23, 0))

# 'import numbers' statement (line 23)
import numbers

import_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'numbers', numbers, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 24, 0))

# 'import os' statement (line 24)
import os

import_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'os', os, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 25, 0))

# 'import re' statement (line 25)
import re

import_module(stypy.reporting.localization.Localization(__file__, 25, 0), 're', re, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 26, 0))

# 'import sys' statement (line 26)
import sys

import_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'sys', sys, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 27, 0))

# 'import time' statement (line 27)
import time

import_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'time', time, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 28, 0))

# 'import traceback' statement (line 28)
import traceback

import_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'traceback', traceback, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 29, 0))

# 'import types' statement (line 29)
import types

import_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'types', types, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 30, 0))

# 'import warnings' statement (line 30)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 31, 0))

# 'from weakref import ref, WeakKeyDictionary' statement (line 31)
try:
    from weakref import ref, WeakKeyDictionary

except:
    ref = UndefinedType
    WeakKeyDictionary = UndefinedType
import_from_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'weakref', None, module_type_store, ['ref', 'WeakKeyDictionary'], [ref, WeakKeyDictionary])

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 32, 0))

# 'from matplotlib.cbook.deprecation import deprecated, warn_deprecated' statement (line 32)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/cbook/')
import_273685 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib.cbook.deprecation')

if (type(import_273685) is not StypyTypeError):

    if (import_273685 != 'pyd_module'):
        __import__(import_273685)
        sys_modules_273686 = sys.modules[import_273685]
        import_from_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib.cbook.deprecation', sys_modules_273686.module_type_store, module_type_store, ['deprecated', 'warn_deprecated'])
        nest_module(stypy.reporting.localization.Localization(__file__, 32, 0), __file__, sys_modules_273686, sys_modules_273686.module_type_store, module_type_store)
    else:
        from matplotlib.cbook.deprecation import deprecated, warn_deprecated

        import_from_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib.cbook.deprecation', None, module_type_store, ['deprecated', 'warn_deprecated'], [deprecated, warn_deprecated])

else:
    # Assigning a type to the variable 'matplotlib.cbook.deprecation' (line 32)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib.cbook.deprecation', import_273685)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/cbook/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 33, 0))

# 'from matplotlib.cbook.deprecation import mplDeprecation, MatplotlibDeprecationWarning' statement (line 33)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/cbook/')
import_273687 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 33, 0), 'matplotlib.cbook.deprecation')

if (type(import_273687) is not StypyTypeError):

    if (import_273687 != 'pyd_module'):
        __import__(import_273687)
        sys_modules_273688 = sys.modules[import_273687]
        import_from_module(stypy.reporting.localization.Localization(__file__, 33, 0), 'matplotlib.cbook.deprecation', sys_modules_273688.module_type_store, module_type_store, ['mplDeprecation', 'MatplotlibDeprecationWarning'])
        nest_module(stypy.reporting.localization.Localization(__file__, 33, 0), __file__, sys_modules_273688, sys_modules_273688.module_type_store, module_type_store)
    else:
        from matplotlib.cbook.deprecation import mplDeprecation, MatplotlibDeprecationWarning

        import_from_module(stypy.reporting.localization.Localization(__file__, 33, 0), 'matplotlib.cbook.deprecation', None, module_type_store, ['mplDeprecation', 'MatplotlibDeprecationWarning'], [mplDeprecation, MatplotlibDeprecationWarning])

else:
    # Assigning a type to the variable 'matplotlib.cbook.deprecation' (line 33)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 33, 0), 'matplotlib.cbook.deprecation', import_273687)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/cbook/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 35, 0))

# 'import numpy' statement (line 35)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/cbook/')
import_273689 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 35, 0), 'numpy')

if (type(import_273689) is not StypyTypeError):

    if (import_273689 != 'pyd_module'):
        __import__(import_273689)
        sys_modules_273690 = sys.modules[import_273689]
        import_module(stypy.reporting.localization.Localization(__file__, 35, 0), 'np', sys_modules_273690.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 35, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 35)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 35, 0), 'numpy', import_273689)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/cbook/')


@norecursion
def unicode_safe(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'unicode_safe'
    module_type_store = module_type_store.open_function_context('unicode_safe', 47, 0, False)
    
    # Passed parameters checking function
    unicode_safe.stypy_localization = localization
    unicode_safe.stypy_type_of_self = None
    unicode_safe.stypy_type_store = module_type_store
    unicode_safe.stypy_function_name = 'unicode_safe'
    unicode_safe.stypy_param_names_list = ['s']
    unicode_safe.stypy_varargs_param_name = None
    unicode_safe.stypy_kwargs_param_name = None
    unicode_safe.stypy_call_defaults = defaults
    unicode_safe.stypy_call_varargs = varargs
    unicode_safe.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'unicode_safe', ['s'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'unicode_safe', localization, ['s'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'unicode_safe(...)' code ##################

    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 48, 4))
    
    # 'import matplotlib' statement (line 48)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/cbook/')
    import_273691 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 48, 4), 'matplotlib')

    if (type(import_273691) is not StypyTypeError):

        if (import_273691 != 'pyd_module'):
            __import__(import_273691)
            sys_modules_273692 = sys.modules[import_273691]
            import_module(stypy.reporting.localization.Localization(__file__, 48, 4), 'matplotlib', sys_modules_273692.module_type_store, module_type_store)
        else:
            import matplotlib

            import_module(stypy.reporting.localization.Localization(__file__, 48, 4), 'matplotlib', matplotlib, module_type_store)

    else:
        # Assigning a type to the variable 'matplotlib' (line 48)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 48, 4), 'matplotlib', import_273691)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/cbook/')
    
    
    # Type idiom detected: calculating its left and rigth part (line 50)
    # Getting the type of 'bytes' (line 50)
    bytes_273693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 50, 21), 'bytes')
    # Getting the type of 's' (line 50)
    s_273694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 50, 18), 's')
    
    (may_be_273695, more_types_in_union_273696) = may_be_subtype(bytes_273693, s_273694)

    if may_be_273695:

        if more_types_in_union_273696:
            # Runtime conditional SSA (line 50)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 's' (line 50)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 50, 4), 's', remove_not_subtype_from_union(s_273694, bytes))
        
        
        # SSA begins for try-except statement (line 51)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 52):
        
        # Assigning a Call to a Name (line 52):
        
        # Call to strip(...): (line 52)
        # Processing the call keyword arguments (line 52)
        kwargs_273707 = {}
        
        # Call to getpreferredencoding(...): (line 52)
        # Processing the call arguments (line 52)
        
        # Obtaining the type of the subscript
        unicode_273699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 53, 36), 'unicode', u'axes.formatter.use_locale')
        # Getting the type of 'matplotlib' (line 53)
        matplotlib_273700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 53, 16), 'matplotlib', False)
        # Obtaining the member 'rcParams' of a type (line 53)
        rcParams_273701 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 53, 16), matplotlib_273700, 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 53)
        getitem___273702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 53, 16), rcParams_273701, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 53)
        subscript_call_result_273703 = invoke(stypy.reporting.localization.Localization(__file__, 53, 16), getitem___273702, unicode_273699)
        
        # Processing the call keyword arguments (line 52)
        kwargs_273704 = {}
        # Getting the type of 'locale' (line 52)
        locale_273697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 52, 32), 'locale', False)
        # Obtaining the member 'getpreferredencoding' of a type (line 52)
        getpreferredencoding_273698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 52, 32), locale_273697, 'getpreferredencoding')
        # Calling getpreferredencoding(args, kwargs) (line 52)
        getpreferredencoding_call_result_273705 = invoke(stypy.reporting.localization.Localization(__file__, 52, 32), getpreferredencoding_273698, *[subscript_call_result_273703], **kwargs_273704)
        
        # Obtaining the member 'strip' of a type (line 52)
        strip_273706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 52, 32), getpreferredencoding_call_result_273705, 'strip')
        # Calling strip(args, kwargs) (line 52)
        strip_call_result_273708 = invoke(stypy.reporting.localization.Localization(__file__, 52, 32), strip_273706, *[], **kwargs_273707)
        
        # Assigning a type to the variable 'preferredencoding' (line 52)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 52, 12), 'preferredencoding', strip_call_result_273708)
        
        
        # Getting the type of 'preferredencoding' (line 54)
        preferredencoding_273709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 54, 19), 'preferredencoding')
        # Applying the 'not' unary operator (line 54)
        result_not__273710 = python_operator(stypy.reporting.localization.Localization(__file__, 54, 15), 'not', preferredencoding_273709)
        
        # Testing the type of an if condition (line 54)
        if_condition_273711 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 54, 12), result_not__273710)
        # Assigning a type to the variable 'if_condition_273711' (line 54)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 54, 12), 'if_condition_273711', if_condition_273711)
        # SSA begins for if statement (line 54)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 55):
        
        # Assigning a Name to a Name (line 55):
        # Getting the type of 'None' (line 55)
        None_273712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 55, 36), 'None')
        # Assigning a type to the variable 'preferredencoding' (line 55)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 55, 16), 'preferredencoding', None_273712)
        # SSA join for if statement (line 54)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the except part of a try statement (line 51)
        # SSA branch for the except 'Tuple' branch of a try statement (line 51)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Name to a Name (line 57):
        
        # Assigning a Name to a Name (line 57):
        # Getting the type of 'None' (line 57)
        None_273713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 57, 32), 'None')
        # Assigning a type to the variable 'preferredencoding' (line 57)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 57, 12), 'preferredencoding', None_273713)
        # SSA join for try-except statement (line 51)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 59)
        # Getting the type of 'preferredencoding' (line 59)
        preferredencoding_273714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 59, 11), 'preferredencoding')
        # Getting the type of 'None' (line 59)
        None_273715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 59, 32), 'None')
        
        (may_be_273716, more_types_in_union_273717) = may_be_none(preferredencoding_273714, None_273715)

        if may_be_273716:

            if more_types_in_union_273717:
                # Runtime conditional SSA (line 59)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to text_type(...): (line 60)
            # Processing the call arguments (line 60)
            # Getting the type of 's' (line 60)
            s_273720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 60, 33), 's', False)
            # Processing the call keyword arguments (line 60)
            kwargs_273721 = {}
            # Getting the type of 'six' (line 60)
            six_273718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 60, 19), 'six', False)
            # Obtaining the member 'text_type' of a type (line 60)
            text_type_273719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 60, 19), six_273718, 'text_type')
            # Calling text_type(args, kwargs) (line 60)
            text_type_call_result_273722 = invoke(stypy.reporting.localization.Localization(__file__, 60, 19), text_type_273719, *[s_273720], **kwargs_273721)
            
            # Assigning a type to the variable 'stypy_return_type' (line 60)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 60, 12), 'stypy_return_type', text_type_call_result_273722)

            if more_types_in_union_273717:
                # Runtime conditional SSA for else branch (line 59)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_273716) or more_types_in_union_273717):
            
            # Call to text_type(...): (line 62)
            # Processing the call arguments (line 62)
            # Getting the type of 's' (line 62)
            s_273725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 62, 33), 's', False)
            # Getting the type of 'preferredencoding' (line 62)
            preferredencoding_273726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 62, 36), 'preferredencoding', False)
            # Processing the call keyword arguments (line 62)
            kwargs_273727 = {}
            # Getting the type of 'six' (line 62)
            six_273723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 62, 19), 'six', False)
            # Obtaining the member 'text_type' of a type (line 62)
            text_type_273724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 62, 19), six_273723, 'text_type')
            # Calling text_type(args, kwargs) (line 62)
            text_type_call_result_273728 = invoke(stypy.reporting.localization.Localization(__file__, 62, 19), text_type_273724, *[s_273725, preferredencoding_273726], **kwargs_273727)
            
            # Assigning a type to the variable 'stypy_return_type' (line 62)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 62, 12), 'stypy_return_type', text_type_call_result_273728)

            if (may_be_273716 and more_types_in_union_273717):
                # SSA join for if statement (line 59)
                module_type_store = module_type_store.join_ssa_context()


        

        if more_types_in_union_273696:
            # SSA join for if statement (line 50)
            module_type_store = module_type_store.join_ssa_context()


    
    # Getting the type of 's' (line 63)
    s_273729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 63, 11), 's')
    # Assigning a type to the variable 'stypy_return_type' (line 63)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 63, 4), 'stypy_return_type', s_273729)
    
    # ################# End of 'unicode_safe(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'unicode_safe' in the type store
    # Getting the type of 'stypy_return_type' (line 47)
    stypy_return_type_273730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 47, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_273730)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'unicode_safe'
    return stypy_return_type_273730

# Assigning a type to the variable 'unicode_safe' (line 47)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 47, 0), 'unicode_safe', unicode_safe)
# Declaration of the 'converter' class

class converter(object, ):
    unicode_273731 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 71, (-1)), 'unicode', u'\n    Base class for handling string -> python type with support for\n    missing values\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_273732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 72, 31), 'unicode', u'Null')
        # Getting the type of 'None' (line 72)
        None_273733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 72, 50), 'None')
        defaults = [unicode_273732, None_273733]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 72, 4, False)
        # Assigning a type to the variable 'self' (line 73)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 73, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'converter.__init__', ['missing', 'missingval'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['missing', 'missingval'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 73):
        
        # Assigning a Name to a Attribute (line 73):
        # Getting the type of 'missing' (line 73)
        missing_273734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 73, 23), 'missing')
        # Getting the type of 'self' (line 73)
        self_273735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 73, 8), 'self')
        # Setting the type of the member 'missing' of a type (line 73)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 73, 8), self_273735, 'missing', missing_273734)
        
        # Assigning a Name to a Attribute (line 74):
        
        # Assigning a Name to a Attribute (line 74):
        # Getting the type of 'missingval' (line 74)
        missingval_273736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 74, 26), 'missingval')
        # Getting the type of 'self' (line 74)
        self_273737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 74, 8), 'self')
        # Setting the type of the member 'missingval' of a type (line 74)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 74, 8), self_273737, 'missingval', missingval_273736)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 76, 4, False)
        # Assigning a type to the variable 'self' (line 77)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 77, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        converter.__call__.__dict__.__setitem__('stypy_localization', localization)
        converter.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        converter.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        converter.__call__.__dict__.__setitem__('stypy_function_name', 'converter.__call__')
        converter.__call__.__dict__.__setitem__('stypy_param_names_list', ['s'])
        converter.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        converter.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        converter.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        converter.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        converter.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        converter.__call__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'converter.__call__', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        
        # Getting the type of 's' (line 77)
        s_273738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 77, 11), 's')
        # Getting the type of 'self' (line 77)
        self_273739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 77, 16), 'self')
        # Obtaining the member 'missing' of a type (line 77)
        missing_273740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 77, 16), self_273739, 'missing')
        # Applying the binary operator '==' (line 77)
        result_eq_273741 = python_operator(stypy.reporting.localization.Localization(__file__, 77, 11), '==', s_273738, missing_273740)
        
        # Testing the type of an if condition (line 77)
        if_condition_273742 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 77, 8), result_eq_273741)
        # Assigning a type to the variable 'if_condition_273742' (line 77)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 77, 8), 'if_condition_273742', if_condition_273742)
        # SSA begins for if statement (line 77)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 78)
        self_273743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 78, 19), 'self')
        # Obtaining the member 'missingval' of a type (line 78)
        missingval_273744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 78, 19), self_273743, 'missingval')
        # Assigning a type to the variable 'stypy_return_type' (line 78)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 78, 12), 'stypy_return_type', missingval_273744)
        # SSA join for if statement (line 77)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 's' (line 79)
        s_273745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 79, 15), 's')
        # Assigning a type to the variable 'stypy_return_type' (line 79)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 79, 8), 'stypy_return_type', s_273745)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 76)
        stypy_return_type_273746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 76, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_273746)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_273746


    @norecursion
    def is_missing(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'is_missing'
        module_type_store = module_type_store.open_function_context('is_missing', 81, 4, False)
        # Assigning a type to the variable 'self' (line 82)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 82, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        converter.is_missing.__dict__.__setitem__('stypy_localization', localization)
        converter.is_missing.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        converter.is_missing.__dict__.__setitem__('stypy_type_store', module_type_store)
        converter.is_missing.__dict__.__setitem__('stypy_function_name', 'converter.is_missing')
        converter.is_missing.__dict__.__setitem__('stypy_param_names_list', ['s'])
        converter.is_missing.__dict__.__setitem__('stypy_varargs_param_name', None)
        converter.is_missing.__dict__.__setitem__('stypy_kwargs_param_name', None)
        converter.is_missing.__dict__.__setitem__('stypy_call_defaults', defaults)
        converter.is_missing.__dict__.__setitem__('stypy_call_varargs', varargs)
        converter.is_missing.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        converter.is_missing.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'converter.is_missing', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'is_missing', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'is_missing(...)' code ##################

        
        # Evaluating a boolean operation
        
        
        # Call to strip(...): (line 82)
        # Processing the call keyword arguments (line 82)
        kwargs_273749 = {}
        # Getting the type of 's' (line 82)
        s_273747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 82, 19), 's', False)
        # Obtaining the member 'strip' of a type (line 82)
        strip_273748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 82, 19), s_273747, 'strip')
        # Calling strip(args, kwargs) (line 82)
        strip_call_result_273750 = invoke(stypy.reporting.localization.Localization(__file__, 82, 19), strip_273748, *[], **kwargs_273749)
        
        # Applying the 'not' unary operator (line 82)
        result_not__273751 = python_operator(stypy.reporting.localization.Localization(__file__, 82, 15), 'not', strip_call_result_273750)
        
        
        # Getting the type of 's' (line 82)
        s_273752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 82, 32), 's')
        # Getting the type of 'self' (line 82)
        self_273753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 82, 37), 'self')
        # Obtaining the member 'missing' of a type (line 82)
        missing_273754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 82, 37), self_273753, 'missing')
        # Applying the binary operator '==' (line 82)
        result_eq_273755 = python_operator(stypy.reporting.localization.Localization(__file__, 82, 32), '==', s_273752, missing_273754)
        
        # Applying the binary operator 'or' (line 82)
        result_or_keyword_273756 = python_operator(stypy.reporting.localization.Localization(__file__, 82, 15), 'or', result_not__273751, result_eq_273755)
        
        # Assigning a type to the variable 'stypy_return_type' (line 82)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 82, 8), 'stypy_return_type', result_or_keyword_273756)
        
        # ################# End of 'is_missing(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'is_missing' in the type store
        # Getting the type of 'stypy_return_type' (line 81)
        stypy_return_type_273757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 81, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_273757)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'is_missing'
        return stypy_return_type_273757


# Assigning a type to the variable 'converter' (line 66)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 66, 0), 'converter', converter)
# Declaration of the 'tostr' class
# Getting the type of 'converter' (line 86)
converter_273758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 86, 12), 'converter')

class tostr(converter_273758, ):
    unicode_273759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 87, 4), 'unicode', u'convert to string or None')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_273760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 88, 31), 'unicode', u'Null')
        unicode_273761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 88, 50), 'unicode', u'')
        defaults = [unicode_273760, unicode_273761]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 88, 4, False)
        # Assigning a type to the variable 'self' (line 89)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 89, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tostr.__init__', ['missing', 'missingval'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['missing', 'missingval'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 89)
        # Processing the call arguments (line 89)
        # Getting the type of 'self' (line 89)
        self_273764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 89, 27), 'self', False)
        # Processing the call keyword arguments (line 89)
        # Getting the type of 'missing' (line 89)
        missing_273765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 89, 41), 'missing', False)
        keyword_273766 = missing_273765
        # Getting the type of 'missingval' (line 89)
        missingval_273767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 89, 61), 'missingval', False)
        keyword_273768 = missingval_273767
        kwargs_273769 = {'missingval': keyword_273768, 'missing': keyword_273766}
        # Getting the type of 'converter' (line 89)
        converter_273762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 89, 8), 'converter', False)
        # Obtaining the member '__init__' of a type (line 89)
        init___273763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 89, 8), converter_273762, '__init__')
        # Calling __init__(args, kwargs) (line 89)
        init___call_result_273770 = invoke(stypy.reporting.localization.Localization(__file__, 89, 8), init___273763, *[self_273764], **kwargs_273769)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'tostr' (line 85)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 85, 0), 'tostr', tostr)
# Declaration of the 'todatetime' class
# Getting the type of 'converter' (line 93)
converter_273771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 93, 17), 'converter')

class todatetime(converter_273771, ):
    unicode_273772 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 94, 4), 'unicode', u'convert to a datetime or None')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_273773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 95, 27), 'unicode', u'%Y-%m-%d')
        unicode_273774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 95, 47), 'unicode', u'Null')
        # Getting the type of 'None' (line 95)
        None_273775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 66), 'None')
        defaults = [unicode_273773, unicode_273774, None_273775]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 95, 4, False)
        # Assigning a type to the variable 'self' (line 96)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 96, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'todatetime.__init__', ['fmt', 'missing', 'missingval'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['fmt', 'missing', 'missingval'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_273776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 96, 8), 'unicode', u'use a :func:`time.strptime` format string for conversion')
        
        # Call to __init__(...): (line 97)
        # Processing the call arguments (line 97)
        # Getting the type of 'self' (line 97)
        self_273779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 27), 'self', False)
        # Getting the type of 'missing' (line 97)
        missing_273780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 33), 'missing', False)
        # Getting the type of 'missingval' (line 97)
        missingval_273781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 42), 'missingval', False)
        # Processing the call keyword arguments (line 97)
        kwargs_273782 = {}
        # Getting the type of 'converter' (line 97)
        converter_273777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 8), 'converter', False)
        # Obtaining the member '__init__' of a type (line 97)
        init___273778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 97, 8), converter_273777, '__init__')
        # Calling __init__(args, kwargs) (line 97)
        init___call_result_273783 = invoke(stypy.reporting.localization.Localization(__file__, 97, 8), init___273778, *[self_273779, missing_273780, missingval_273781], **kwargs_273782)
        
        
        # Assigning a Name to a Attribute (line 98):
        
        # Assigning a Name to a Attribute (line 98):
        # Getting the type of 'fmt' (line 98)
        fmt_273784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 19), 'fmt')
        # Getting the type of 'self' (line 98)
        self_273785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 8), 'self')
        # Setting the type of the member 'fmt' of a type (line 98)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 98, 8), self_273785, 'fmt', fmt_273784)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 100, 4, False)
        # Assigning a type to the variable 'self' (line 101)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 101, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        todatetime.__call__.__dict__.__setitem__('stypy_localization', localization)
        todatetime.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        todatetime.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        todatetime.__call__.__dict__.__setitem__('stypy_function_name', 'todatetime.__call__')
        todatetime.__call__.__dict__.__setitem__('stypy_param_names_list', ['s'])
        todatetime.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        todatetime.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        todatetime.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        todatetime.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        todatetime.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        todatetime.__call__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'todatetime.__call__', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        
        # Call to is_missing(...): (line 101)
        # Processing the call arguments (line 101)
        # Getting the type of 's' (line 101)
        s_273788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 101, 27), 's', False)
        # Processing the call keyword arguments (line 101)
        kwargs_273789 = {}
        # Getting the type of 'self' (line 101)
        self_273786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 101, 11), 'self', False)
        # Obtaining the member 'is_missing' of a type (line 101)
        is_missing_273787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 101, 11), self_273786, 'is_missing')
        # Calling is_missing(args, kwargs) (line 101)
        is_missing_call_result_273790 = invoke(stypy.reporting.localization.Localization(__file__, 101, 11), is_missing_273787, *[s_273788], **kwargs_273789)
        
        # Testing the type of an if condition (line 101)
        if_condition_273791 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 101, 8), is_missing_call_result_273790)
        # Assigning a type to the variable 'if_condition_273791' (line 101)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 101, 8), 'if_condition_273791', if_condition_273791)
        # SSA begins for if statement (line 101)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 102)
        self_273792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 19), 'self')
        # Obtaining the member 'missingval' of a type (line 102)
        missingval_273793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 102, 19), self_273792, 'missingval')
        # Assigning a type to the variable 'stypy_return_type' (line 102)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 102, 12), 'stypy_return_type', missingval_273793)
        # SSA join for if statement (line 101)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 103):
        
        # Assigning a Call to a Name (line 103):
        
        # Call to strptime(...): (line 103)
        # Processing the call arguments (line 103)
        # Getting the type of 's' (line 103)
        s_273796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 28), 's', False)
        # Getting the type of 'self' (line 103)
        self_273797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 31), 'self', False)
        # Obtaining the member 'fmt' of a type (line 103)
        fmt_273798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 103, 31), self_273797, 'fmt')
        # Processing the call keyword arguments (line 103)
        kwargs_273799 = {}
        # Getting the type of 'time' (line 103)
        time_273794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 14), 'time', False)
        # Obtaining the member 'strptime' of a type (line 103)
        strptime_273795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 103, 14), time_273794, 'strptime')
        # Calling strptime(args, kwargs) (line 103)
        strptime_call_result_273800 = invoke(stypy.reporting.localization.Localization(__file__, 103, 14), strptime_273795, *[s_273796, fmt_273798], **kwargs_273799)
        
        # Assigning a type to the variable 'tup' (line 103)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 103, 8), 'tup', strptime_call_result_273800)
        
        # Call to datetime(...): (line 104)
        
        # Obtaining the type of the subscript
        int_273803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 39), 'int')
        slice_273804 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 104, 34), None, int_273803, None)
        # Getting the type of 'tup' (line 104)
        tup_273805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 34), 'tup', False)
        # Obtaining the member '__getitem__' of a type (line 104)
        getitem___273806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 104, 34), tup_273805, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 104)
        subscript_call_result_273807 = invoke(stypy.reporting.localization.Localization(__file__, 104, 34), getitem___273806, slice_273804)
        
        # Processing the call keyword arguments (line 104)
        kwargs_273808 = {}
        # Getting the type of 'datetime' (line 104)
        datetime_273801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 15), 'datetime', False)
        # Obtaining the member 'datetime' of a type (line 104)
        datetime_273802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 104, 15), datetime_273801, 'datetime')
        # Calling datetime(args, kwargs) (line 104)
        datetime_call_result_273809 = invoke(stypy.reporting.localization.Localization(__file__, 104, 15), datetime_273802, *[subscript_call_result_273807], **kwargs_273808)
        
        # Assigning a type to the variable 'stypy_return_type' (line 104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 8), 'stypy_return_type', datetime_call_result_273809)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 100)
        stypy_return_type_273810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 100, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_273810)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_273810


# Assigning a type to the variable 'todatetime' (line 92)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 92, 0), 'todatetime', todatetime)
# Declaration of the 'todate' class
# Getting the type of 'converter' (line 108)
converter_273811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 13), 'converter')

class todate(converter_273811, ):
    unicode_273812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 109, 4), 'unicode', u'convert to a date or None')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_273813 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 110, 27), 'unicode', u'%Y-%m-%d')
        unicode_273814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 110, 47), 'unicode', u'Null')
        # Getting the type of 'None' (line 110)
        None_273815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 110, 66), 'None')
        defaults = [unicode_273813, unicode_273814, None_273815]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 110, 4, False)
        # Assigning a type to the variable 'self' (line 111)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 111, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'todate.__init__', ['fmt', 'missing', 'missingval'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['fmt', 'missing', 'missingval'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_273816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 111, 8), 'unicode', u'use a :func:`time.strptime` format string for conversion')
        
        # Call to __init__(...): (line 112)
        # Processing the call arguments (line 112)
        # Getting the type of 'self' (line 112)
        self_273819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 112, 27), 'self', False)
        # Getting the type of 'missing' (line 112)
        missing_273820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 112, 33), 'missing', False)
        # Getting the type of 'missingval' (line 112)
        missingval_273821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 112, 42), 'missingval', False)
        # Processing the call keyword arguments (line 112)
        kwargs_273822 = {}
        # Getting the type of 'converter' (line 112)
        converter_273817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 112, 8), 'converter', False)
        # Obtaining the member '__init__' of a type (line 112)
        init___273818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 112, 8), converter_273817, '__init__')
        # Calling __init__(args, kwargs) (line 112)
        init___call_result_273823 = invoke(stypy.reporting.localization.Localization(__file__, 112, 8), init___273818, *[self_273819, missing_273820, missingval_273821], **kwargs_273822)
        
        
        # Assigning a Name to a Attribute (line 113):
        
        # Assigning a Name to a Attribute (line 113):
        # Getting the type of 'fmt' (line 113)
        fmt_273824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 19), 'fmt')
        # Getting the type of 'self' (line 113)
        self_273825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 8), 'self')
        # Setting the type of the member 'fmt' of a type (line 113)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 113, 8), self_273825, 'fmt', fmt_273824)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 115, 4, False)
        # Assigning a type to the variable 'self' (line 116)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 116, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        todate.__call__.__dict__.__setitem__('stypy_localization', localization)
        todate.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        todate.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        todate.__call__.__dict__.__setitem__('stypy_function_name', 'todate.__call__')
        todate.__call__.__dict__.__setitem__('stypy_param_names_list', ['s'])
        todate.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        todate.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        todate.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        todate.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        todate.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        todate.__call__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'todate.__call__', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        
        # Call to is_missing(...): (line 116)
        # Processing the call arguments (line 116)
        # Getting the type of 's' (line 116)
        s_273828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 27), 's', False)
        # Processing the call keyword arguments (line 116)
        kwargs_273829 = {}
        # Getting the type of 'self' (line 116)
        self_273826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 11), 'self', False)
        # Obtaining the member 'is_missing' of a type (line 116)
        is_missing_273827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 116, 11), self_273826, 'is_missing')
        # Calling is_missing(args, kwargs) (line 116)
        is_missing_call_result_273830 = invoke(stypy.reporting.localization.Localization(__file__, 116, 11), is_missing_273827, *[s_273828], **kwargs_273829)
        
        # Testing the type of an if condition (line 116)
        if_condition_273831 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 116, 8), is_missing_call_result_273830)
        # Assigning a type to the variable 'if_condition_273831' (line 116)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 116, 8), 'if_condition_273831', if_condition_273831)
        # SSA begins for if statement (line 116)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 117)
        self_273832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 117, 19), 'self')
        # Obtaining the member 'missingval' of a type (line 117)
        missingval_273833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 117, 19), self_273832, 'missingval')
        # Assigning a type to the variable 'stypy_return_type' (line 117)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 117, 12), 'stypy_return_type', missingval_273833)
        # SSA join for if statement (line 116)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 118):
        
        # Assigning a Call to a Name (line 118):
        
        # Call to strptime(...): (line 118)
        # Processing the call arguments (line 118)
        # Getting the type of 's' (line 118)
        s_273836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 118, 28), 's', False)
        # Getting the type of 'self' (line 118)
        self_273837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 118, 31), 'self', False)
        # Obtaining the member 'fmt' of a type (line 118)
        fmt_273838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 118, 31), self_273837, 'fmt')
        # Processing the call keyword arguments (line 118)
        kwargs_273839 = {}
        # Getting the type of 'time' (line 118)
        time_273834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 118, 14), 'time', False)
        # Obtaining the member 'strptime' of a type (line 118)
        strptime_273835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 118, 14), time_273834, 'strptime')
        # Calling strptime(args, kwargs) (line 118)
        strptime_call_result_273840 = invoke(stypy.reporting.localization.Localization(__file__, 118, 14), strptime_273835, *[s_273836, fmt_273838], **kwargs_273839)
        
        # Assigning a type to the variable 'tup' (line 118)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 118, 8), 'tup', strptime_call_result_273840)
        
        # Call to date(...): (line 119)
        
        # Obtaining the type of the subscript
        int_273843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 119, 35), 'int')
        slice_273844 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 119, 30), None, int_273843, None)
        # Getting the type of 'tup' (line 119)
        tup_273845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 30), 'tup', False)
        # Obtaining the member '__getitem__' of a type (line 119)
        getitem___273846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 119, 30), tup_273845, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 119)
        subscript_call_result_273847 = invoke(stypy.reporting.localization.Localization(__file__, 119, 30), getitem___273846, slice_273844)
        
        # Processing the call keyword arguments (line 119)
        kwargs_273848 = {}
        # Getting the type of 'datetime' (line 119)
        datetime_273841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 15), 'datetime', False)
        # Obtaining the member 'date' of a type (line 119)
        date_273842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 119, 15), datetime_273841, 'date')
        # Calling date(args, kwargs) (line 119)
        date_call_result_273849 = invoke(stypy.reporting.localization.Localization(__file__, 119, 15), date_273842, *[subscript_call_result_273847], **kwargs_273848)
        
        # Assigning a type to the variable 'stypy_return_type' (line 119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 119, 8), 'stypy_return_type', date_call_result_273849)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 115)
        stypy_return_type_273850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 115, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_273850)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_273850


# Assigning a type to the variable 'todate' (line 107)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 107, 0), 'todate', todate)
# Declaration of the 'tofloat' class
# Getting the type of 'converter' (line 123)
converter_273851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 14), 'converter')

class tofloat(converter_273851, ):
    unicode_273852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 124, 4), 'unicode', u'convert to a float or None')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_273853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 125, 31), 'unicode', u'Null')
        # Getting the type of 'None' (line 125)
        None_273854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 125, 50), 'None')
        defaults = [unicode_273853, None_273854]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 125, 4, False)
        # Assigning a type to the variable 'self' (line 126)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 126, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tofloat.__init__', ['missing', 'missingval'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['missing', 'missingval'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 126)
        # Processing the call arguments (line 126)
        # Getting the type of 'self' (line 126)
        self_273857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 27), 'self', False)
        # Getting the type of 'missing' (line 126)
        missing_273858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 33), 'missing', False)
        # Processing the call keyword arguments (line 126)
        kwargs_273859 = {}
        # Getting the type of 'converter' (line 126)
        converter_273855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 8), 'converter', False)
        # Obtaining the member '__init__' of a type (line 126)
        init___273856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 126, 8), converter_273855, '__init__')
        # Calling __init__(args, kwargs) (line 126)
        init___call_result_273860 = invoke(stypy.reporting.localization.Localization(__file__, 126, 8), init___273856, *[self_273857, missing_273858], **kwargs_273859)
        
        
        # Assigning a Name to a Attribute (line 127):
        
        # Assigning a Name to a Attribute (line 127):
        # Getting the type of 'missingval' (line 127)
        missingval_273861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 26), 'missingval')
        # Getting the type of 'self' (line 127)
        self_273862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 8), 'self')
        # Setting the type of the member 'missingval' of a type (line 127)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 127, 8), self_273862, 'missingval', missingval_273861)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 129, 4, False)
        # Assigning a type to the variable 'self' (line 130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 130, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tofloat.__call__.__dict__.__setitem__('stypy_localization', localization)
        tofloat.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tofloat.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        tofloat.__call__.__dict__.__setitem__('stypy_function_name', 'tofloat.__call__')
        tofloat.__call__.__dict__.__setitem__('stypy_param_names_list', ['s'])
        tofloat.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        tofloat.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tofloat.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        tofloat.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        tofloat.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tofloat.__call__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tofloat.__call__', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        
        # Call to is_missing(...): (line 130)
        # Processing the call arguments (line 130)
        # Getting the type of 's' (line 130)
        s_273865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 27), 's', False)
        # Processing the call keyword arguments (line 130)
        kwargs_273866 = {}
        # Getting the type of 'self' (line 130)
        self_273863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 11), 'self', False)
        # Obtaining the member 'is_missing' of a type (line 130)
        is_missing_273864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 130, 11), self_273863, 'is_missing')
        # Calling is_missing(args, kwargs) (line 130)
        is_missing_call_result_273867 = invoke(stypy.reporting.localization.Localization(__file__, 130, 11), is_missing_273864, *[s_273865], **kwargs_273866)
        
        # Testing the type of an if condition (line 130)
        if_condition_273868 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 130, 8), is_missing_call_result_273867)
        # Assigning a type to the variable 'if_condition_273868' (line 130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 130, 8), 'if_condition_273868', if_condition_273868)
        # SSA begins for if statement (line 130)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 131)
        self_273869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 19), 'self')
        # Obtaining the member 'missingval' of a type (line 131)
        missingval_273870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 131, 19), self_273869, 'missingval')
        # Assigning a type to the variable 'stypy_return_type' (line 131)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 131, 12), 'stypy_return_type', missingval_273870)
        # SSA join for if statement (line 130)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to float(...): (line 132)
        # Processing the call arguments (line 132)
        # Getting the type of 's' (line 132)
        s_273872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 21), 's', False)
        # Processing the call keyword arguments (line 132)
        kwargs_273873 = {}
        # Getting the type of 'float' (line 132)
        float_273871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 15), 'float', False)
        # Calling float(args, kwargs) (line 132)
        float_call_result_273874 = invoke(stypy.reporting.localization.Localization(__file__, 132, 15), float_273871, *[s_273872], **kwargs_273873)
        
        # Assigning a type to the variable 'stypy_return_type' (line 132)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 132, 8), 'stypy_return_type', float_call_result_273874)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 129)
        stypy_return_type_273875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_273875)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_273875


# Assigning a type to the variable 'tofloat' (line 122)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 122, 0), 'tofloat', tofloat)
# Declaration of the 'toint' class
# Getting the type of 'converter' (line 136)
converter_273876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 12), 'converter')

class toint(converter_273876, ):
    unicode_273877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 137, 4), 'unicode', u'convert to an int or None')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_273878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 138, 31), 'unicode', u'Null')
        # Getting the type of 'None' (line 138)
        None_273879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 50), 'None')
        defaults = [unicode_273878, None_273879]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 138, 4, False)
        # Assigning a type to the variable 'self' (line 139)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 139, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'toint.__init__', ['missing', 'missingval'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['missing', 'missingval'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 139)
        # Processing the call arguments (line 139)
        # Getting the type of 'self' (line 139)
        self_273882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 27), 'self', False)
        # Getting the type of 'missing' (line 139)
        missing_273883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 33), 'missing', False)
        # Processing the call keyword arguments (line 139)
        kwargs_273884 = {}
        # Getting the type of 'converter' (line 139)
        converter_273880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 8), 'converter', False)
        # Obtaining the member '__init__' of a type (line 139)
        init___273881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 139, 8), converter_273880, '__init__')
        # Calling __init__(args, kwargs) (line 139)
        init___call_result_273885 = invoke(stypy.reporting.localization.Localization(__file__, 139, 8), init___273881, *[self_273882, missing_273883], **kwargs_273884)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 141, 4, False)
        # Assigning a type to the variable 'self' (line 142)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 142, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        toint.__call__.__dict__.__setitem__('stypy_localization', localization)
        toint.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        toint.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        toint.__call__.__dict__.__setitem__('stypy_function_name', 'toint.__call__')
        toint.__call__.__dict__.__setitem__('stypy_param_names_list', ['s'])
        toint.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        toint.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        toint.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        toint.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        toint.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        toint.__call__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'toint.__call__', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        
        # Call to is_missing(...): (line 142)
        # Processing the call arguments (line 142)
        # Getting the type of 's' (line 142)
        s_273888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 27), 's', False)
        # Processing the call keyword arguments (line 142)
        kwargs_273889 = {}
        # Getting the type of 'self' (line 142)
        self_273886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 11), 'self', False)
        # Obtaining the member 'is_missing' of a type (line 142)
        is_missing_273887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 142, 11), self_273886, 'is_missing')
        # Calling is_missing(args, kwargs) (line 142)
        is_missing_call_result_273890 = invoke(stypy.reporting.localization.Localization(__file__, 142, 11), is_missing_273887, *[s_273888], **kwargs_273889)
        
        # Testing the type of an if condition (line 142)
        if_condition_273891 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 142, 8), is_missing_call_result_273890)
        # Assigning a type to the variable 'if_condition_273891' (line 142)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 142, 8), 'if_condition_273891', if_condition_273891)
        # SSA begins for if statement (line 142)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 143)
        self_273892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 19), 'self')
        # Obtaining the member 'missingval' of a type (line 143)
        missingval_273893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 143, 19), self_273892, 'missingval')
        # Assigning a type to the variable 'stypy_return_type' (line 143)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 143, 12), 'stypy_return_type', missingval_273893)
        # SSA join for if statement (line 142)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to int(...): (line 144)
        # Processing the call arguments (line 144)
        # Getting the type of 's' (line 144)
        s_273895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 19), 's', False)
        # Processing the call keyword arguments (line 144)
        kwargs_273896 = {}
        # Getting the type of 'int' (line 144)
        int_273894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 15), 'int', False)
        # Calling int(args, kwargs) (line 144)
        int_call_result_273897 = invoke(stypy.reporting.localization.Localization(__file__, 144, 15), int_273894, *[s_273895], **kwargs_273896)
        
        # Assigning a type to the variable 'stypy_return_type' (line 144)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 144, 8), 'stypy_return_type', int_call_result_273897)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 141)
        stypy_return_type_273898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 141, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_273898)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_273898


# Assigning a type to the variable 'toint' (line 135)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 135, 0), 'toint', toint)
# Declaration of the '_BoundMethodProxy' class

class _BoundMethodProxy(object, ):
    unicode_273899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 159, (-1)), 'unicode', u'\n    Our own proxy object which enables weak references to bound and unbound\n    methods and arbitrary callables. Pulls information about the function,\n    class, and instance out of a bound method. Stores a weak reference to the\n    instance to support garbage collection.\n\n    @organization: IBM Corporation\n    @copyright: Copyright (c) 2005, 2006 IBM Corporation\n    @license: The BSD License\n\n    Minor bugfixes by Michael Droettboom\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 160, 4, False)
        # Assigning a type to the variable 'self' (line 161)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 161, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_BoundMethodProxy.__init__', ['cb'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['cb'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Call to a Attribute (line 161):
        
        # Assigning a Call to a Attribute (line 161):
        
        # Call to hash(...): (line 161)
        # Processing the call arguments (line 161)
        # Getting the type of 'cb' (line 161)
        cb_273901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 26), 'cb', False)
        # Processing the call keyword arguments (line 161)
        kwargs_273902 = {}
        # Getting the type of 'hash' (line 161)
        hash_273900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 21), 'hash', False)
        # Calling hash(args, kwargs) (line 161)
        hash_call_result_273903 = invoke(stypy.reporting.localization.Localization(__file__, 161, 21), hash_273900, *[cb_273901], **kwargs_273902)
        
        # Getting the type of 'self' (line 161)
        self_273904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 8), 'self')
        # Setting the type of the member '_hash' of a type (line 161)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 161, 8), self_273904, '_hash', hash_call_result_273903)
        
        # Assigning a List to a Attribute (line 162):
        
        # Assigning a List to a Attribute (line 162):
        
        # Obtaining an instance of the builtin type 'list' (line 162)
        list_273905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 162, 34), 'list')
        # Adding type elements to the builtin type 'list' instance (line 162)
        
        # Getting the type of 'self' (line 162)
        self_273906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 8), 'self')
        # Setting the type of the member '_destroy_callbacks' of a type (line 162)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 162, 8), self_273906, '_destroy_callbacks', list_273905)
        
        
        # SSA begins for try-except statement (line 163)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        
        # SSA begins for try-except statement (line 164)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Getting the type of 'six' (line 165)
        six_273907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 19), 'six')
        # Obtaining the member 'PY3' of a type (line 165)
        PY3_273908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 165, 19), six_273907, 'PY3')
        # Testing the type of an if condition (line 165)
        if_condition_273909 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 165, 16), PY3_273908)
        # Assigning a type to the variable 'if_condition_273909' (line 165)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 165, 16), 'if_condition_273909', if_condition_273909)
        # SSA begins for if statement (line 165)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 166):
        
        # Assigning a Call to a Attribute (line 166):
        
        # Call to ref(...): (line 166)
        # Processing the call arguments (line 166)
        # Getting the type of 'cb' (line 166)
        cb_273911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 36), 'cb', False)
        # Obtaining the member '__self__' of a type (line 166)
        self___273912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 166, 36), cb_273911, '__self__')
        # Getting the type of 'self' (line 166)
        self_273913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 49), 'self', False)
        # Obtaining the member '_destroy' of a type (line 166)
        _destroy_273914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 166, 49), self_273913, '_destroy')
        # Processing the call keyword arguments (line 166)
        kwargs_273915 = {}
        # Getting the type of 'ref' (line 166)
        ref_273910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 32), 'ref', False)
        # Calling ref(args, kwargs) (line 166)
        ref_call_result_273916 = invoke(stypy.reporting.localization.Localization(__file__, 166, 32), ref_273910, *[self___273912, _destroy_273914], **kwargs_273915)
        
        # Getting the type of 'self' (line 166)
        self_273917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 20), 'self')
        # Setting the type of the member 'inst' of a type (line 166)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 166, 20), self_273917, 'inst', ref_call_result_273916)
        # SSA branch for the else part of an if statement (line 165)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Attribute (line 168):
        
        # Assigning a Call to a Attribute (line 168):
        
        # Call to ref(...): (line 168)
        # Processing the call arguments (line 168)
        # Getting the type of 'cb' (line 168)
        cb_273919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 36), 'cb', False)
        # Obtaining the member 'im_self' of a type (line 168)
        im_self_273920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 168, 36), cb_273919, 'im_self')
        # Getting the type of 'self' (line 168)
        self_273921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 48), 'self', False)
        # Obtaining the member '_destroy' of a type (line 168)
        _destroy_273922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 168, 48), self_273921, '_destroy')
        # Processing the call keyword arguments (line 168)
        kwargs_273923 = {}
        # Getting the type of 'ref' (line 168)
        ref_273918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 32), 'ref', False)
        # Calling ref(args, kwargs) (line 168)
        ref_call_result_273924 = invoke(stypy.reporting.localization.Localization(__file__, 168, 32), ref_273918, *[im_self_273920, _destroy_273922], **kwargs_273923)
        
        # Getting the type of 'self' (line 168)
        self_273925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 20), 'self')
        # Setting the type of the member 'inst' of a type (line 168)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 168, 20), self_273925, 'inst', ref_call_result_273924)
        # SSA join for if statement (line 165)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the except part of a try statement (line 164)
        # SSA branch for the except 'TypeError' branch of a try statement (line 164)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Name to a Attribute (line 170):
        
        # Assigning a Name to a Attribute (line 170):
        # Getting the type of 'None' (line 170)
        None_273926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 28), 'None')
        # Getting the type of 'self' (line 170)
        self_273927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 16), 'self')
        # Setting the type of the member 'inst' of a type (line 170)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 170, 16), self_273927, 'inst', None_273926)
        # SSA join for try-except statement (line 164)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'six' (line 171)
        six_273928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 15), 'six')
        # Obtaining the member 'PY3' of a type (line 171)
        PY3_273929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 171, 15), six_273928, 'PY3')
        # Testing the type of an if condition (line 171)
        if_condition_273930 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 171, 12), PY3_273929)
        # Assigning a type to the variable 'if_condition_273930' (line 171)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 171, 12), 'if_condition_273930', if_condition_273930)
        # SSA begins for if statement (line 171)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Attribute (line 172):
        
        # Assigning a Attribute to a Attribute (line 172):
        # Getting the type of 'cb' (line 172)
        cb_273931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 28), 'cb')
        # Obtaining the member '__func__' of a type (line 172)
        func___273932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 172, 28), cb_273931, '__func__')
        # Getting the type of 'self' (line 172)
        self_273933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 16), 'self')
        # Setting the type of the member 'func' of a type (line 172)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 172, 16), self_273933, 'func', func___273932)
        
        # Assigning a Attribute to a Attribute (line 173):
        
        # Assigning a Attribute to a Attribute (line 173):
        # Getting the type of 'cb' (line 173)
        cb_273934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 29), 'cb')
        # Obtaining the member '__self__' of a type (line 173)
        self___273935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 173, 29), cb_273934, '__self__')
        # Obtaining the member '__class__' of a type (line 173)
        class___273936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 173, 29), self___273935, '__class__')
        # Getting the type of 'self' (line 173)
        self_273937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 16), 'self')
        # Setting the type of the member 'klass' of a type (line 173)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 173, 16), self_273937, 'klass', class___273936)
        # SSA branch for the else part of an if statement (line 171)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Attribute (line 175):
        
        # Assigning a Attribute to a Attribute (line 175):
        # Getting the type of 'cb' (line 175)
        cb_273938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 28), 'cb')
        # Obtaining the member 'im_func' of a type (line 175)
        im_func_273939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 175, 28), cb_273938, 'im_func')
        # Getting the type of 'self' (line 175)
        self_273940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 16), 'self')
        # Setting the type of the member 'func' of a type (line 175)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 175, 16), self_273940, 'func', im_func_273939)
        
        # Assigning a Attribute to a Attribute (line 176):
        
        # Assigning a Attribute to a Attribute (line 176):
        # Getting the type of 'cb' (line 176)
        cb_273941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 29), 'cb')
        # Obtaining the member 'im_class' of a type (line 176)
        im_class_273942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 176, 29), cb_273941, 'im_class')
        # Getting the type of 'self' (line 176)
        self_273943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 16), 'self')
        # Setting the type of the member 'klass' of a type (line 176)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 176, 16), self_273943, 'klass', im_class_273942)
        # SSA join for if statement (line 171)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the except part of a try statement (line 163)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 163)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Name to a Attribute (line 178):
        
        # Assigning a Name to a Attribute (line 178):
        # Getting the type of 'None' (line 178)
        None_273944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 24), 'None')
        # Getting the type of 'self' (line 178)
        self_273945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 12), 'self')
        # Setting the type of the member 'inst' of a type (line 178)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 178, 12), self_273945, 'inst', None_273944)
        
        # Assigning a Name to a Attribute (line 179):
        
        # Assigning a Name to a Attribute (line 179):
        # Getting the type of 'cb' (line 179)
        cb_273946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 179, 24), 'cb')
        # Getting the type of 'self' (line 179)
        self_273947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 179, 12), 'self')
        # Setting the type of the member 'func' of a type (line 179)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 179, 12), self_273947, 'func', cb_273946)
        
        # Assigning a Name to a Attribute (line 180):
        
        # Assigning a Name to a Attribute (line 180):
        # Getting the type of 'None' (line 180)
        None_273948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 180, 25), 'None')
        # Getting the type of 'self' (line 180)
        self_273949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 180, 12), 'self')
        # Setting the type of the member 'klass' of a type (line 180)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 180, 12), self_273949, 'klass', None_273948)
        # SSA join for try-except statement (line 163)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def add_destroy_callback(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'add_destroy_callback'
        module_type_store = module_type_store.open_function_context('add_destroy_callback', 182, 4, False)
        # Assigning a type to the variable 'self' (line 183)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 183, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _BoundMethodProxy.add_destroy_callback.__dict__.__setitem__('stypy_localization', localization)
        _BoundMethodProxy.add_destroy_callback.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _BoundMethodProxy.add_destroy_callback.__dict__.__setitem__('stypy_type_store', module_type_store)
        _BoundMethodProxy.add_destroy_callback.__dict__.__setitem__('stypy_function_name', '_BoundMethodProxy.add_destroy_callback')
        _BoundMethodProxy.add_destroy_callback.__dict__.__setitem__('stypy_param_names_list', ['callback'])
        _BoundMethodProxy.add_destroy_callback.__dict__.__setitem__('stypy_varargs_param_name', None)
        _BoundMethodProxy.add_destroy_callback.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _BoundMethodProxy.add_destroy_callback.__dict__.__setitem__('stypy_call_defaults', defaults)
        _BoundMethodProxy.add_destroy_callback.__dict__.__setitem__('stypy_call_varargs', varargs)
        _BoundMethodProxy.add_destroy_callback.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _BoundMethodProxy.add_destroy_callback.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_BoundMethodProxy.add_destroy_callback', ['callback'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_destroy_callback', localization, ['callback'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_destroy_callback(...)' code ##################

        
        # Call to append(...): (line 183)
        # Processing the call arguments (line 183)
        
        # Call to _BoundMethodProxy(...): (line 183)
        # Processing the call arguments (line 183)
        # Getting the type of 'callback' (line 183)
        callback_273954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 57), 'callback', False)
        # Processing the call keyword arguments (line 183)
        kwargs_273955 = {}
        # Getting the type of '_BoundMethodProxy' (line 183)
        _BoundMethodProxy_273953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 39), '_BoundMethodProxy', False)
        # Calling _BoundMethodProxy(args, kwargs) (line 183)
        _BoundMethodProxy_call_result_273956 = invoke(stypy.reporting.localization.Localization(__file__, 183, 39), _BoundMethodProxy_273953, *[callback_273954], **kwargs_273955)
        
        # Processing the call keyword arguments (line 183)
        kwargs_273957 = {}
        # Getting the type of 'self' (line 183)
        self_273950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 8), 'self', False)
        # Obtaining the member '_destroy_callbacks' of a type (line 183)
        _destroy_callbacks_273951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 183, 8), self_273950, '_destroy_callbacks')
        # Obtaining the member 'append' of a type (line 183)
        append_273952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 183, 8), _destroy_callbacks_273951, 'append')
        # Calling append(args, kwargs) (line 183)
        append_call_result_273958 = invoke(stypy.reporting.localization.Localization(__file__, 183, 8), append_273952, *[_BoundMethodProxy_call_result_273956], **kwargs_273957)
        
        
        # ################# End of 'add_destroy_callback(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_destroy_callback' in the type store
        # Getting the type of 'stypy_return_type' (line 182)
        stypy_return_type_273959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_273959)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_destroy_callback'
        return stypy_return_type_273959


    @norecursion
    def _destroy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_destroy'
        module_type_store = module_type_store.open_function_context('_destroy', 185, 4, False)
        # Assigning a type to the variable 'self' (line 186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 186, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _BoundMethodProxy._destroy.__dict__.__setitem__('stypy_localization', localization)
        _BoundMethodProxy._destroy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _BoundMethodProxy._destroy.__dict__.__setitem__('stypy_type_store', module_type_store)
        _BoundMethodProxy._destroy.__dict__.__setitem__('stypy_function_name', '_BoundMethodProxy._destroy')
        _BoundMethodProxy._destroy.__dict__.__setitem__('stypy_param_names_list', ['wk'])
        _BoundMethodProxy._destroy.__dict__.__setitem__('stypy_varargs_param_name', None)
        _BoundMethodProxy._destroy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _BoundMethodProxy._destroy.__dict__.__setitem__('stypy_call_defaults', defaults)
        _BoundMethodProxy._destroy.__dict__.__setitem__('stypy_call_varargs', varargs)
        _BoundMethodProxy._destroy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _BoundMethodProxy._destroy.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_BoundMethodProxy._destroy', ['wk'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_destroy', localization, ['wk'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_destroy(...)' code ##################

        
        # Getting the type of 'self' (line 186)
        self_273960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 24), 'self')
        # Obtaining the member '_destroy_callbacks' of a type (line 186)
        _destroy_callbacks_273961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 186, 24), self_273960, '_destroy_callbacks')
        # Testing the type of a for loop iterable (line 186)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 186, 8), _destroy_callbacks_273961)
        # Getting the type of the for loop variable (line 186)
        for_loop_var_273962 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 186, 8), _destroy_callbacks_273961)
        # Assigning a type to the variable 'callback' (line 186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 186, 8), 'callback', for_loop_var_273962)
        # SSA begins for a for statement (line 186)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # SSA begins for try-except statement (line 187)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to callback(...): (line 188)
        # Processing the call arguments (line 188)
        # Getting the type of 'self' (line 188)
        self_273964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 25), 'self', False)
        # Processing the call keyword arguments (line 188)
        kwargs_273965 = {}
        # Getting the type of 'callback' (line 188)
        callback_273963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 16), 'callback', False)
        # Calling callback(args, kwargs) (line 188)
        callback_call_result_273966 = invoke(stypy.reporting.localization.Localization(__file__, 188, 16), callback_273963, *[self_273964], **kwargs_273965)
        
        # SSA branch for the except part of a try statement (line 187)
        # SSA branch for the except 'ReferenceError' branch of a try statement (line 187)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 187)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_destroy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_destroy' in the type store
        # Getting the type of 'stypy_return_type' (line 185)
        stypy_return_type_273967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_273967)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_destroy'
        return stypy_return_type_273967


    @norecursion
    def __getstate__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__getstate__'
        module_type_store = module_type_store.open_function_context('__getstate__', 192, 4, False)
        # Assigning a type to the variable 'self' (line 193)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 193, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _BoundMethodProxy.__getstate__.__dict__.__setitem__('stypy_localization', localization)
        _BoundMethodProxy.__getstate__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _BoundMethodProxy.__getstate__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _BoundMethodProxy.__getstate__.__dict__.__setitem__('stypy_function_name', '_BoundMethodProxy.__getstate__')
        _BoundMethodProxy.__getstate__.__dict__.__setitem__('stypy_param_names_list', [])
        _BoundMethodProxy.__getstate__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _BoundMethodProxy.__getstate__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _BoundMethodProxy.__getstate__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _BoundMethodProxy.__getstate__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _BoundMethodProxy.__getstate__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _BoundMethodProxy.__getstate__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_BoundMethodProxy.__getstate__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__getstate__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__getstate__(...)' code ##################

        
        # Assigning a Call to a Name (line 193):
        
        # Assigning a Call to a Name (line 193):
        
        # Call to copy(...): (line 193)
        # Processing the call keyword arguments (line 193)
        kwargs_273971 = {}
        # Getting the type of 'self' (line 193)
        self_273968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 12), 'self', False)
        # Obtaining the member '__dict__' of a type (line 193)
        dict___273969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 193, 12), self_273968, '__dict__')
        # Obtaining the member 'copy' of a type (line 193)
        copy_273970 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 193, 12), dict___273969, 'copy')
        # Calling copy(args, kwargs) (line 193)
        copy_call_result_273972 = invoke(stypy.reporting.localization.Localization(__file__, 193, 12), copy_273970, *[], **kwargs_273971)
        
        # Assigning a type to the variable 'd' (line 193)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 193, 8), 'd', copy_call_result_273972)
        
        # Assigning a Subscript to a Name (line 195):
        
        # Assigning a Subscript to a Name (line 195):
        
        # Obtaining the type of the subscript
        unicode_273973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 195, 17), 'unicode', u'inst')
        # Getting the type of 'd' (line 195)
        d_273974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 15), 'd')
        # Obtaining the member '__getitem__' of a type (line 195)
        getitem___273975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 15), d_273974, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 195)
        subscript_call_result_273976 = invoke(stypy.reporting.localization.Localization(__file__, 195, 15), getitem___273975, unicode_273973)
        
        # Assigning a type to the variable 'inst' (line 195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 195, 8), 'inst', subscript_call_result_273976)
        
        # Type idiom detected: calculating its left and rigth part (line 196)
        # Getting the type of 'inst' (line 196)
        inst_273977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 8), 'inst')
        # Getting the type of 'None' (line 196)
        None_273978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 23), 'None')
        
        (may_be_273979, more_types_in_union_273980) = may_not_be_none(inst_273977, None_273978)

        if may_be_273979:

            if more_types_in_union_273980:
                # Runtime conditional SSA (line 196)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Subscript (line 197):
            
            # Assigning a Call to a Subscript (line 197):
            
            # Call to inst(...): (line 197)
            # Processing the call keyword arguments (line 197)
            kwargs_273982 = {}
            # Getting the type of 'inst' (line 197)
            inst_273981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 24), 'inst', False)
            # Calling inst(args, kwargs) (line 197)
            inst_call_result_273983 = invoke(stypy.reporting.localization.Localization(__file__, 197, 24), inst_273981, *[], **kwargs_273982)
            
            # Getting the type of 'd' (line 197)
            d_273984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 12), 'd')
            unicode_273985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 197, 14), 'unicode', u'inst')
            # Storing an element on a container (line 197)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 197, 12), d_273984, (unicode_273985, inst_call_result_273983))

            if more_types_in_union_273980:
                # SSA join for if statement (line 196)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'd' (line 198)
        d_273986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 15), 'd')
        # Assigning a type to the variable 'stypy_return_type' (line 198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 198, 8), 'stypy_return_type', d_273986)
        
        # ################# End of '__getstate__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__getstate__' in the type store
        # Getting the type of 'stypy_return_type' (line 192)
        stypy_return_type_273987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_273987)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__getstate__'
        return stypy_return_type_273987


    @norecursion
    def __setstate__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__setstate__'
        module_type_store = module_type_store.open_function_context('__setstate__', 200, 4, False)
        # Assigning a type to the variable 'self' (line 201)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 201, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _BoundMethodProxy.__setstate__.__dict__.__setitem__('stypy_localization', localization)
        _BoundMethodProxy.__setstate__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _BoundMethodProxy.__setstate__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _BoundMethodProxy.__setstate__.__dict__.__setitem__('stypy_function_name', '_BoundMethodProxy.__setstate__')
        _BoundMethodProxy.__setstate__.__dict__.__setitem__('stypy_param_names_list', ['statedict'])
        _BoundMethodProxy.__setstate__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _BoundMethodProxy.__setstate__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _BoundMethodProxy.__setstate__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _BoundMethodProxy.__setstate__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _BoundMethodProxy.__setstate__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _BoundMethodProxy.__setstate__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_BoundMethodProxy.__setstate__', ['statedict'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__setstate__', localization, ['statedict'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__setstate__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 201):
        
        # Assigning a Name to a Attribute (line 201):
        # Getting the type of 'statedict' (line 201)
        statedict_273988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 24), 'statedict')
        # Getting the type of 'self' (line 201)
        self_273989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 8), 'self')
        # Setting the type of the member '__dict__' of a type (line 201)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 201, 8), self_273989, '__dict__', statedict_273988)
        
        # Assigning a Subscript to a Name (line 202):
        
        # Assigning a Subscript to a Name (line 202):
        
        # Obtaining the type of the subscript
        unicode_273990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 202, 25), 'unicode', u'inst')
        # Getting the type of 'statedict' (line 202)
        statedict_273991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 15), 'statedict')
        # Obtaining the member '__getitem__' of a type (line 202)
        getitem___273992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 202, 15), statedict_273991, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 202)
        subscript_call_result_273993 = invoke(stypy.reporting.localization.Localization(__file__, 202, 15), getitem___273992, unicode_273990)
        
        # Assigning a type to the variable 'inst' (line 202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 202, 8), 'inst', subscript_call_result_273993)
        
        # Type idiom detected: calculating its left and rigth part (line 204)
        # Getting the type of 'inst' (line 204)
        inst_273994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 8), 'inst')
        # Getting the type of 'None' (line 204)
        None_273995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 23), 'None')
        
        (may_be_273996, more_types_in_union_273997) = may_not_be_none(inst_273994, None_273995)

        if may_be_273996:

            if more_types_in_union_273997:
                # Runtime conditional SSA (line 204)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Attribute (line 205):
            
            # Assigning a Call to a Attribute (line 205):
            
            # Call to ref(...): (line 205)
            # Processing the call arguments (line 205)
            # Getting the type of 'inst' (line 205)
            inst_273999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 28), 'inst', False)
            # Processing the call keyword arguments (line 205)
            kwargs_274000 = {}
            # Getting the type of 'ref' (line 205)
            ref_273998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 24), 'ref', False)
            # Calling ref(args, kwargs) (line 205)
            ref_call_result_274001 = invoke(stypy.reporting.localization.Localization(__file__, 205, 24), ref_273998, *[inst_273999], **kwargs_274000)
            
            # Getting the type of 'self' (line 205)
            self_274002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 12), 'self')
            # Setting the type of the member 'inst' of a type (line 205)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 205, 12), self_274002, 'inst', ref_call_result_274001)

            if more_types_in_union_273997:
                # SSA join for if statement (line 204)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of '__setstate__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__setstate__' in the type store
        # Getting the type of 'stypy_return_type' (line 200)
        stypy_return_type_274003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_274003)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__setstate__'
        return stypy_return_type_274003


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 207, 4, False)
        # Assigning a type to the variable 'self' (line 208)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 208, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _BoundMethodProxy.__call__.__dict__.__setitem__('stypy_localization', localization)
        _BoundMethodProxy.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _BoundMethodProxy.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _BoundMethodProxy.__call__.__dict__.__setitem__('stypy_function_name', '_BoundMethodProxy.__call__')
        _BoundMethodProxy.__call__.__dict__.__setitem__('stypy_param_names_list', [])
        _BoundMethodProxy.__call__.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        _BoundMethodProxy.__call__.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        _BoundMethodProxy.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _BoundMethodProxy.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _BoundMethodProxy.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _BoundMethodProxy.__call__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_BoundMethodProxy.__call__', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        unicode_274004 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 214, (-1)), 'unicode', u'\n        Proxy for a call to the weak referenced object. Take\n        arbitrary params to pass to the callable.\n\n        Raises `ReferenceError`: When the weak reference refers to\n        a dead object\n        ')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 215)
        self_274005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 11), 'self')
        # Obtaining the member 'inst' of a type (line 215)
        inst_274006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 215, 11), self_274005, 'inst')
        # Getting the type of 'None' (line 215)
        None_274007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 28), 'None')
        # Applying the binary operator 'isnot' (line 215)
        result_is_not_274008 = python_operator(stypy.reporting.localization.Localization(__file__, 215, 11), 'isnot', inst_274006, None_274007)
        
        
        
        # Call to inst(...): (line 215)
        # Processing the call keyword arguments (line 215)
        kwargs_274011 = {}
        # Getting the type of 'self' (line 215)
        self_274009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 37), 'self', False)
        # Obtaining the member 'inst' of a type (line 215)
        inst_274010 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 215, 37), self_274009, 'inst')
        # Calling inst(args, kwargs) (line 215)
        inst_call_result_274012 = invoke(stypy.reporting.localization.Localization(__file__, 215, 37), inst_274010, *[], **kwargs_274011)
        
        # Getting the type of 'None' (line 215)
        None_274013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 52), 'None')
        # Applying the binary operator 'is' (line 215)
        result_is__274014 = python_operator(stypy.reporting.localization.Localization(__file__, 215, 37), 'is', inst_call_result_274012, None_274013)
        
        # Applying the binary operator 'and' (line 215)
        result_and_keyword_274015 = python_operator(stypy.reporting.localization.Localization(__file__, 215, 11), 'and', result_is_not_274008, result_is__274014)
        
        # Testing the type of an if condition (line 215)
        if_condition_274016 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 215, 8), result_and_keyword_274015)
        # Assigning a type to the variable 'if_condition_274016' (line 215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 215, 8), 'if_condition_274016', if_condition_274016)
        # SSA begins for if statement (line 215)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'ReferenceError' (line 216)
        ReferenceError_274017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 18), 'ReferenceError')
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 216, 12), ReferenceError_274017, 'raise parameter', BaseException)
        # SSA branch for the else part of an if statement (line 215)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'self' (line 217)
        self_274018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 13), 'self')
        # Obtaining the member 'inst' of a type (line 217)
        inst_274019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 13), self_274018, 'inst')
        # Getting the type of 'None' (line 217)
        None_274020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 30), 'None')
        # Applying the binary operator 'isnot' (line 217)
        result_is_not_274021 = python_operator(stypy.reporting.localization.Localization(__file__, 217, 13), 'isnot', inst_274019, None_274020)
        
        # Testing the type of an if condition (line 217)
        if_condition_274022 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 217, 13), result_is_not_274021)
        # Assigning a type to the variable 'if_condition_274022' (line 217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 217, 13), 'if_condition_274022', if_condition_274022)
        # SSA begins for if statement (line 217)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 221):
        
        # Assigning a Call to a Name (line 221):
        
        # Call to MethodType(...): (line 221)
        # Processing the call arguments (line 221)
        # Getting the type of 'self' (line 221)
        self_274025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 35), 'self', False)
        # Obtaining the member 'func' of a type (line 221)
        func_274026 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 35), self_274025, 'func')
        
        # Call to inst(...): (line 221)
        # Processing the call keyword arguments (line 221)
        kwargs_274029 = {}
        # Getting the type of 'self' (line 221)
        self_274027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 46), 'self', False)
        # Obtaining the member 'inst' of a type (line 221)
        inst_274028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 46), self_274027, 'inst')
        # Calling inst(args, kwargs) (line 221)
        inst_call_result_274030 = invoke(stypy.reporting.localization.Localization(__file__, 221, 46), inst_274028, *[], **kwargs_274029)
        
        # Processing the call keyword arguments (line 221)
        kwargs_274031 = {}
        # Getting the type of 'types' (line 221)
        types_274023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 18), 'types', False)
        # Obtaining the member 'MethodType' of a type (line 221)
        MethodType_274024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 18), types_274023, 'MethodType')
        # Calling MethodType(args, kwargs) (line 221)
        MethodType_call_result_274032 = invoke(stypy.reporting.localization.Localization(__file__, 221, 18), MethodType_274024, *[func_274026, inst_call_result_274030], **kwargs_274031)
        
        # Assigning a type to the variable 'mtd' (line 221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 221, 12), 'mtd', MethodType_call_result_274032)
        # SSA branch for the else part of an if statement (line 217)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 225):
        
        # Assigning a Attribute to a Name (line 225):
        # Getting the type of 'self' (line 225)
        self_274033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 18), 'self')
        # Obtaining the member 'func' of a type (line 225)
        func_274034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 225, 18), self_274033, 'func')
        # Assigning a type to the variable 'mtd' (line 225)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 225, 12), 'mtd', func_274034)
        # SSA join for if statement (line 217)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 215)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to mtd(...): (line 227)
        # Getting the type of 'args' (line 227)
        args_274036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 20), 'args', False)
        # Processing the call keyword arguments (line 227)
        # Getting the type of 'kwargs' (line 227)
        kwargs_274037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 28), 'kwargs', False)
        kwargs_274038 = {'kwargs_274037': kwargs_274037}
        # Getting the type of 'mtd' (line 227)
        mtd_274035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 15), 'mtd', False)
        # Calling mtd(args, kwargs) (line 227)
        mtd_call_result_274039 = invoke(stypy.reporting.localization.Localization(__file__, 227, 15), mtd_274035, *[args_274036], **kwargs_274038)
        
        # Assigning a type to the variable 'stypy_return_type' (line 227)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 227, 8), 'stypy_return_type', mtd_call_result_274039)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 207)
        stypy_return_type_274040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_274040)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_274040


    @norecursion
    def stypy__eq__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__eq__'
        module_type_store = module_type_store.open_function_context('__eq__', 229, 4, False)
        # Assigning a type to the variable 'self' (line 230)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 230, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _BoundMethodProxy.stypy__eq__.__dict__.__setitem__('stypy_localization', localization)
        _BoundMethodProxy.stypy__eq__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _BoundMethodProxy.stypy__eq__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _BoundMethodProxy.stypy__eq__.__dict__.__setitem__('stypy_function_name', '_BoundMethodProxy.stypy__eq__')
        _BoundMethodProxy.stypy__eq__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        _BoundMethodProxy.stypy__eq__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _BoundMethodProxy.stypy__eq__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _BoundMethodProxy.stypy__eq__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _BoundMethodProxy.stypy__eq__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _BoundMethodProxy.stypy__eq__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _BoundMethodProxy.stypy__eq__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_BoundMethodProxy.stypy__eq__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__eq__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__eq__(...)' code ##################

        unicode_274041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 233, (-1)), 'unicode', u'\n        Compare the held function and instance with that held by\n        another proxy.\n        ')
        
        
        # SSA begins for try-except statement (line 234)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Type idiom detected: calculating its left and rigth part (line 235)
        # Getting the type of 'self' (line 235)
        self_274042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 15), 'self')
        # Obtaining the member 'inst' of a type (line 235)
        inst_274043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 235, 15), self_274042, 'inst')
        # Getting the type of 'None' (line 235)
        None_274044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 28), 'None')
        
        (may_be_274045, more_types_in_union_274046) = may_be_none(inst_274043, None_274044)

        if may_be_274045:

            if more_types_in_union_274046:
                # Runtime conditional SSA (line 235)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Evaluating a boolean operation
            
            # Getting the type of 'self' (line 236)
            self_274047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 236, 23), 'self')
            # Obtaining the member 'func' of a type (line 236)
            func_274048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 236, 23), self_274047, 'func')
            # Getting the type of 'other' (line 236)
            other_274049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 236, 36), 'other')
            # Obtaining the member 'func' of a type (line 236)
            func_274050 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 236, 36), other_274049, 'func')
            # Applying the binary operator '==' (line 236)
            result_eq_274051 = python_operator(stypy.reporting.localization.Localization(__file__, 236, 23), '==', func_274048, func_274050)
            
            
            # Getting the type of 'other' (line 236)
            other_274052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 236, 51), 'other')
            # Obtaining the member 'inst' of a type (line 236)
            inst_274053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 236, 51), other_274052, 'inst')
            # Getting the type of 'None' (line 236)
            None_274054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 236, 65), 'None')
            # Applying the binary operator 'is' (line 236)
            result_is__274055 = python_operator(stypy.reporting.localization.Localization(__file__, 236, 51), 'is', inst_274053, None_274054)
            
            # Applying the binary operator 'and' (line 236)
            result_and_keyword_274056 = python_operator(stypy.reporting.localization.Localization(__file__, 236, 23), 'and', result_eq_274051, result_is__274055)
            
            # Assigning a type to the variable 'stypy_return_type' (line 236)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 236, 16), 'stypy_return_type', result_and_keyword_274056)

            if more_types_in_union_274046:
                # Runtime conditional SSA for else branch (line 235)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_274045) or more_types_in_union_274046):
            
            # Evaluating a boolean operation
            
            # Getting the type of 'self' (line 238)
            self_274057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 23), 'self')
            # Obtaining the member 'func' of a type (line 238)
            func_274058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 238, 23), self_274057, 'func')
            # Getting the type of 'other' (line 238)
            other_274059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 36), 'other')
            # Obtaining the member 'func' of a type (line 238)
            func_274060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 238, 36), other_274059, 'func')
            # Applying the binary operator '==' (line 238)
            result_eq_274061 = python_operator(stypy.reporting.localization.Localization(__file__, 238, 23), '==', func_274058, func_274060)
            
            
            
            # Call to inst(...): (line 238)
            # Processing the call keyword arguments (line 238)
            kwargs_274064 = {}
            # Getting the type of 'self' (line 238)
            self_274062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 51), 'self', False)
            # Obtaining the member 'inst' of a type (line 238)
            inst_274063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 238, 51), self_274062, 'inst')
            # Calling inst(args, kwargs) (line 238)
            inst_call_result_274065 = invoke(stypy.reporting.localization.Localization(__file__, 238, 51), inst_274063, *[], **kwargs_274064)
            
            
            # Call to inst(...): (line 238)
            # Processing the call keyword arguments (line 238)
            kwargs_274068 = {}
            # Getting the type of 'other' (line 238)
            other_274066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 66), 'other', False)
            # Obtaining the member 'inst' of a type (line 238)
            inst_274067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 238, 66), other_274066, 'inst')
            # Calling inst(args, kwargs) (line 238)
            inst_call_result_274069 = invoke(stypy.reporting.localization.Localization(__file__, 238, 66), inst_274067, *[], **kwargs_274068)
            
            # Applying the binary operator '==' (line 238)
            result_eq_274070 = python_operator(stypy.reporting.localization.Localization(__file__, 238, 51), '==', inst_call_result_274065, inst_call_result_274069)
            
            # Applying the binary operator 'and' (line 238)
            result_and_keyword_274071 = python_operator(stypy.reporting.localization.Localization(__file__, 238, 23), 'and', result_eq_274061, result_eq_274070)
            
            # Assigning a type to the variable 'stypy_return_type' (line 238)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 238, 16), 'stypy_return_type', result_and_keyword_274071)

            if (may_be_274045 and more_types_in_union_274046):
                # SSA join for if statement (line 235)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA branch for the except part of a try statement (line 234)
        # SSA branch for the except 'Exception' branch of a try statement (line 234)
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'False' (line 240)
        False_274072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 19), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 240)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 240, 12), 'stypy_return_type', False_274072)
        # SSA join for try-except statement (line 234)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__eq__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__eq__' in the type store
        # Getting the type of 'stypy_return_type' (line 229)
        stypy_return_type_274073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_274073)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__eq__'
        return stypy_return_type_274073


    @norecursion
    def __ne__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__ne__'
        module_type_store = module_type_store.open_function_context('__ne__', 242, 4, False)
        # Assigning a type to the variable 'self' (line 243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 243, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _BoundMethodProxy.__ne__.__dict__.__setitem__('stypy_localization', localization)
        _BoundMethodProxy.__ne__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _BoundMethodProxy.__ne__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _BoundMethodProxy.__ne__.__dict__.__setitem__('stypy_function_name', '_BoundMethodProxy.__ne__')
        _BoundMethodProxy.__ne__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        _BoundMethodProxy.__ne__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _BoundMethodProxy.__ne__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _BoundMethodProxy.__ne__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _BoundMethodProxy.__ne__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _BoundMethodProxy.__ne__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _BoundMethodProxy.__ne__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_BoundMethodProxy.__ne__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__ne__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__ne__(...)' code ##################

        unicode_274074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 245, (-1)), 'unicode', u'\n        Inverse of __eq__.\n        ')
        
        
        # Call to __eq__(...): (line 246)
        # Processing the call arguments (line 246)
        # Getting the type of 'other' (line 246)
        other_274077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 31), 'other', False)
        # Processing the call keyword arguments (line 246)
        kwargs_274078 = {}
        # Getting the type of 'self' (line 246)
        self_274075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 19), 'self', False)
        # Obtaining the member '__eq__' of a type (line 246)
        eq___274076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 246, 19), self_274075, '__eq__')
        # Calling __eq__(args, kwargs) (line 246)
        eq___call_result_274079 = invoke(stypy.reporting.localization.Localization(__file__, 246, 19), eq___274076, *[other_274077], **kwargs_274078)
        
        # Applying the 'not' unary operator (line 246)
        result_not__274080 = python_operator(stypy.reporting.localization.Localization(__file__, 246, 15), 'not', eq___call_result_274079)
        
        # Assigning a type to the variable 'stypy_return_type' (line 246)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 246, 8), 'stypy_return_type', result_not__274080)
        
        # ################# End of '__ne__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__ne__' in the type store
        # Getting the type of 'stypy_return_type' (line 242)
        stypy_return_type_274081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_274081)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__ne__'
        return stypy_return_type_274081


    @norecursion
    def stypy__hash__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__hash__'
        module_type_store = module_type_store.open_function_context('__hash__', 248, 4, False)
        # Assigning a type to the variable 'self' (line 249)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 249, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _BoundMethodProxy.stypy__hash__.__dict__.__setitem__('stypy_localization', localization)
        _BoundMethodProxy.stypy__hash__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _BoundMethodProxy.stypy__hash__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _BoundMethodProxy.stypy__hash__.__dict__.__setitem__('stypy_function_name', '_BoundMethodProxy.stypy__hash__')
        _BoundMethodProxy.stypy__hash__.__dict__.__setitem__('stypy_param_names_list', [])
        _BoundMethodProxy.stypy__hash__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _BoundMethodProxy.stypy__hash__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _BoundMethodProxy.stypy__hash__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _BoundMethodProxy.stypy__hash__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _BoundMethodProxy.stypy__hash__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _BoundMethodProxy.stypy__hash__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_BoundMethodProxy.stypy__hash__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__hash__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__hash__(...)' code ##################

        # Getting the type of 'self' (line 249)
        self_274082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 15), 'self')
        # Obtaining the member '_hash' of a type (line 249)
        _hash_274083 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 249, 15), self_274082, '_hash')
        # Assigning a type to the variable 'stypy_return_type' (line 249)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 249, 8), 'stypy_return_type', _hash_274083)
        
        # ################# End of '__hash__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__hash__' in the type store
        # Getting the type of 'stypy_return_type' (line 248)
        stypy_return_type_274084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_274084)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__hash__'
        return stypy_return_type_274084


# Assigning a type to the variable '_BoundMethodProxy' (line 147)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 147, 0), '_BoundMethodProxy', _BoundMethodProxy)

@norecursion
def _exception_printer(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_exception_printer'
    module_type_store = module_type_store.open_function_context('_exception_printer', 252, 0, False)
    
    # Passed parameters checking function
    _exception_printer.stypy_localization = localization
    _exception_printer.stypy_type_of_self = None
    _exception_printer.stypy_type_store = module_type_store
    _exception_printer.stypy_function_name = '_exception_printer'
    _exception_printer.stypy_param_names_list = ['exc']
    _exception_printer.stypy_varargs_param_name = None
    _exception_printer.stypy_kwargs_param_name = None
    _exception_printer.stypy_call_defaults = defaults
    _exception_printer.stypy_call_varargs = varargs
    _exception_printer.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_exception_printer', ['exc'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_exception_printer', localization, ['exc'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_exception_printer(...)' code ##################

    
    # Call to print_exc(...): (line 253)
    # Processing the call keyword arguments (line 253)
    kwargs_274087 = {}
    # Getting the type of 'traceback' (line 253)
    traceback_274085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 4), 'traceback', False)
    # Obtaining the member 'print_exc' of a type (line 253)
    print_exc_274086 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 253, 4), traceback_274085, 'print_exc')
    # Calling print_exc(args, kwargs) (line 253)
    print_exc_call_result_274088 = invoke(stypy.reporting.localization.Localization(__file__, 253, 4), print_exc_274086, *[], **kwargs_274087)
    
    
    # ################# End of '_exception_printer(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_exception_printer' in the type store
    # Getting the type of 'stypy_return_type' (line 252)
    stypy_return_type_274089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_274089)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_exception_printer'
    return stypy_return_type_274089

# Assigning a type to the variable '_exception_printer' (line 252)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 252, 0), '_exception_printer', _exception_printer)
# Declaration of the 'CallbackRegistry' class

class CallbackRegistry(object, ):
    unicode_274090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 312, (-1)), 'unicode', u'Handle registering and disconnecting for a set of signals and\n    callbacks:\n\n        >>> def oneat(x):\n        ...    print(\'eat\', x)\n        >>> def ondrink(x):\n        ...    print(\'drink\', x)\n\n        >>> from matplotlib.cbook import CallbackRegistry\n        >>> callbacks = CallbackRegistry()\n\n        >>> id_eat = callbacks.connect(\'eat\', oneat)\n        >>> id_drink = callbacks.connect(\'drink\', ondrink)\n\n        >>> callbacks.process(\'drink\', 123)\n        drink 123\n        >>> callbacks.process(\'eat\', 456)\n        eat 456\n        >>> callbacks.process(\'be merry\', 456) # nothing will be called\n        >>> callbacks.disconnect(id_eat)\n        >>> callbacks.process(\'eat\', 456)      # nothing will be called\n\n    In practice, one should always disconnect all callbacks when they\n    are no longer needed to avoid dangling references (and thus memory\n    leaks).  However, real code in matplotlib rarely does so, and due\n    to its design, it is rather difficult to place this kind of code.\n    To get around this, and prevent this class of memory leaks, we\n    instead store weak references to bound methods only, so when the\n    destination object needs to die, the CallbackRegistry won\'t keep\n    it alive.  The Python stdlib weakref module can not create weak\n    references to bound methods directly, so we need to create a proxy\n    object to handle weak references to bound methods (or regular free\n    functions).  This technique was shared by Peter Parente on his\n    `"Mindtrove" blog\n    <http://mindtrove.info/python-weak-references/>`_.\n\n\n    Parameters\n    ----------\n    exception_handler : callable, optional\n       If provided must have signature ::\n\n          def handler(exc: Exception) -> None:\n\n       If not None this function will be called with any `Exception`\n       subclass raised by the callbacks in `CallbackRegistry.process`.\n       The handler may either consume the exception or re-raise.\n\n       The callable must be pickle-able.\n\n       The default handler is ::\n\n          def h(exc):\n              traceback.print_exc()\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of '_exception_printer' (line 313)
        _exception_printer_274091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 41), '_exception_printer')
        defaults = [_exception_printer_274091]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 313, 4, False)
        # Assigning a type to the variable 'self' (line 314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 314, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CallbackRegistry.__init__', ['exception_handler'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['exception_handler'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 314):
        
        # Assigning a Name to a Attribute (line 314):
        # Getting the type of 'exception_handler' (line 314)
        exception_handler_274092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 33), 'exception_handler')
        # Getting the type of 'self' (line 314)
        self_274093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 8), 'self')
        # Setting the type of the member 'exception_handler' of a type (line 314)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 314, 8), self_274093, 'exception_handler', exception_handler_274092)
        
        # Assigning a Call to a Attribute (line 315):
        
        # Assigning a Call to a Attribute (line 315):
        
        # Call to dict(...): (line 315)
        # Processing the call keyword arguments (line 315)
        kwargs_274095 = {}
        # Getting the type of 'dict' (line 315)
        dict_274094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 25), 'dict', False)
        # Calling dict(args, kwargs) (line 315)
        dict_call_result_274096 = invoke(stypy.reporting.localization.Localization(__file__, 315, 25), dict_274094, *[], **kwargs_274095)
        
        # Getting the type of 'self' (line 315)
        self_274097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 8), 'self')
        # Setting the type of the member 'callbacks' of a type (line 315)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 315, 8), self_274097, 'callbacks', dict_call_result_274096)
        
        # Assigning a Num to a Attribute (line 316):
        
        # Assigning a Num to a Attribute (line 316):
        int_274098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 316, 20), 'int')
        # Getting the type of 'self' (line 316)
        self_274099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 8), 'self')
        # Setting the type of the member '_cid' of a type (line 316)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 316, 8), self_274099, '_cid', int_274098)
        
        # Assigning a Dict to a Attribute (line 317):
        
        # Assigning a Dict to a Attribute (line 317):
        
        # Obtaining an instance of the builtin type 'dict' (line 317)
        dict_274100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 317, 29), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 317)
        
        # Getting the type of 'self' (line 317)
        self_274101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 8), 'self')
        # Setting the type of the member '_func_cid_map' of a type (line 317)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 317, 8), self_274101, '_func_cid_map', dict_274100)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __getstate__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__getstate__'
        module_type_store = module_type_store.open_function_context('__getstate__', 327, 4, False)
        # Assigning a type to the variable 'self' (line 328)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 328, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CallbackRegistry.__getstate__.__dict__.__setitem__('stypy_localization', localization)
        CallbackRegistry.__getstate__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CallbackRegistry.__getstate__.__dict__.__setitem__('stypy_type_store', module_type_store)
        CallbackRegistry.__getstate__.__dict__.__setitem__('stypy_function_name', 'CallbackRegistry.__getstate__')
        CallbackRegistry.__getstate__.__dict__.__setitem__('stypy_param_names_list', [])
        CallbackRegistry.__getstate__.__dict__.__setitem__('stypy_varargs_param_name', None)
        CallbackRegistry.__getstate__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CallbackRegistry.__getstate__.__dict__.__setitem__('stypy_call_defaults', defaults)
        CallbackRegistry.__getstate__.__dict__.__setitem__('stypy_call_varargs', varargs)
        CallbackRegistry.__getstate__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CallbackRegistry.__getstate__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CallbackRegistry.__getstate__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__getstate__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__getstate__(...)' code ##################

        
        # Obtaining an instance of the builtin type 'dict' (line 328)
        dict_274102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 328, 15), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 328)
        # Adding element type (key, value) (line 328)
        unicode_274103 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 328, 16), 'unicode', u'exception_handler')
        # Getting the type of 'self' (line 328)
        self_274104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 37), 'self')
        # Obtaining the member 'exception_handler' of a type (line 328)
        exception_handler_274105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 328, 37), self_274104, 'exception_handler')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 328, 15), dict_274102, (unicode_274103, exception_handler_274105))
        
        # Assigning a type to the variable 'stypy_return_type' (line 328)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 328, 8), 'stypy_return_type', dict_274102)
        
        # ################# End of '__getstate__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__getstate__' in the type store
        # Getting the type of 'stypy_return_type' (line 327)
        stypy_return_type_274106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_274106)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__getstate__'
        return stypy_return_type_274106


    @norecursion
    def __setstate__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__setstate__'
        module_type_store = module_type_store.open_function_context('__setstate__', 330, 4, False)
        # Assigning a type to the variable 'self' (line 331)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 331, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CallbackRegistry.__setstate__.__dict__.__setitem__('stypy_localization', localization)
        CallbackRegistry.__setstate__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CallbackRegistry.__setstate__.__dict__.__setitem__('stypy_type_store', module_type_store)
        CallbackRegistry.__setstate__.__dict__.__setitem__('stypy_function_name', 'CallbackRegistry.__setstate__')
        CallbackRegistry.__setstate__.__dict__.__setitem__('stypy_param_names_list', ['state'])
        CallbackRegistry.__setstate__.__dict__.__setitem__('stypy_varargs_param_name', None)
        CallbackRegistry.__setstate__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CallbackRegistry.__setstate__.__dict__.__setitem__('stypy_call_defaults', defaults)
        CallbackRegistry.__setstate__.__dict__.__setitem__('stypy_call_varargs', varargs)
        CallbackRegistry.__setstate__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CallbackRegistry.__setstate__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CallbackRegistry.__setstate__', ['state'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__setstate__', localization, ['state'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__setstate__(...)' code ##################

        
        # Call to __init__(...): (line 331)
        # Processing the call keyword arguments (line 331)
        # Getting the type of 'state' (line 331)
        state_274109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 24), 'state', False)
        kwargs_274110 = {'state_274109': state_274109}
        # Getting the type of 'self' (line 331)
        self_274107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 8), 'self', False)
        # Obtaining the member '__init__' of a type (line 331)
        init___274108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 331, 8), self_274107, '__init__')
        # Calling __init__(args, kwargs) (line 331)
        init___call_result_274111 = invoke(stypy.reporting.localization.Localization(__file__, 331, 8), init___274108, *[], **kwargs_274110)
        
        
        # ################# End of '__setstate__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__setstate__' in the type store
        # Getting the type of 'stypy_return_type' (line 330)
        stypy_return_type_274112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_274112)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__setstate__'
        return stypy_return_type_274112


    @norecursion
    def connect(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'connect'
        module_type_store = module_type_store.open_function_context('connect', 333, 4, False)
        # Assigning a type to the variable 'self' (line 334)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 334, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CallbackRegistry.connect.__dict__.__setitem__('stypy_localization', localization)
        CallbackRegistry.connect.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CallbackRegistry.connect.__dict__.__setitem__('stypy_type_store', module_type_store)
        CallbackRegistry.connect.__dict__.__setitem__('stypy_function_name', 'CallbackRegistry.connect')
        CallbackRegistry.connect.__dict__.__setitem__('stypy_param_names_list', ['s', 'func'])
        CallbackRegistry.connect.__dict__.__setitem__('stypy_varargs_param_name', None)
        CallbackRegistry.connect.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CallbackRegistry.connect.__dict__.__setitem__('stypy_call_defaults', defaults)
        CallbackRegistry.connect.__dict__.__setitem__('stypy_call_varargs', varargs)
        CallbackRegistry.connect.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CallbackRegistry.connect.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CallbackRegistry.connect', ['s', 'func'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'connect', localization, ['s', 'func'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'connect(...)' code ##################

        unicode_274113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 337, (-1)), 'unicode', u'\n        register *func* to be called when a signal *s* is generated\n        func will be called\n        ')
        
        # Call to setdefault(...): (line 338)
        # Processing the call arguments (line 338)
        # Getting the type of 's' (line 338)
        s_274117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 38), 's', False)
        
        # Call to WeakKeyDictionary(...): (line 338)
        # Processing the call keyword arguments (line 338)
        kwargs_274119 = {}
        # Getting the type of 'WeakKeyDictionary' (line 338)
        WeakKeyDictionary_274118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 41), 'WeakKeyDictionary', False)
        # Calling WeakKeyDictionary(args, kwargs) (line 338)
        WeakKeyDictionary_call_result_274120 = invoke(stypy.reporting.localization.Localization(__file__, 338, 41), WeakKeyDictionary_274118, *[], **kwargs_274119)
        
        # Processing the call keyword arguments (line 338)
        kwargs_274121 = {}
        # Getting the type of 'self' (line 338)
        self_274114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 8), 'self', False)
        # Obtaining the member '_func_cid_map' of a type (line 338)
        _func_cid_map_274115 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 338, 8), self_274114, '_func_cid_map')
        # Obtaining the member 'setdefault' of a type (line 338)
        setdefault_274116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 338, 8), _func_cid_map_274115, 'setdefault')
        # Calling setdefault(args, kwargs) (line 338)
        setdefault_call_result_274122 = invoke(stypy.reporting.localization.Localization(__file__, 338, 8), setdefault_274116, *[s_274117, WeakKeyDictionary_call_result_274120], **kwargs_274121)
        
        
        # Assigning a Call to a Name (line 341):
        
        # Assigning a Call to a Name (line 341):
        
        # Call to _BoundMethodProxy(...): (line 341)
        # Processing the call arguments (line 341)
        # Getting the type of 'func' (line 341)
        func_274124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 34), 'func', False)
        # Processing the call keyword arguments (line 341)
        kwargs_274125 = {}
        # Getting the type of '_BoundMethodProxy' (line 341)
        _BoundMethodProxy_274123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 16), '_BoundMethodProxy', False)
        # Calling _BoundMethodProxy(args, kwargs) (line 341)
        _BoundMethodProxy_call_result_274126 = invoke(stypy.reporting.localization.Localization(__file__, 341, 16), _BoundMethodProxy_274123, *[func_274124], **kwargs_274125)
        
        # Assigning a type to the variable 'proxy' (line 341)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 341, 8), 'proxy', _BoundMethodProxy_call_result_274126)
        
        
        # Getting the type of 'proxy' (line 342)
        proxy_274127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 11), 'proxy')
        
        # Obtaining the type of the subscript
        # Getting the type of 's' (line 342)
        s_274128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 39), 's')
        # Getting the type of 'self' (line 342)
        self_274129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 20), 'self')
        # Obtaining the member '_func_cid_map' of a type (line 342)
        _func_cid_map_274130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 342, 20), self_274129, '_func_cid_map')
        # Obtaining the member '__getitem__' of a type (line 342)
        getitem___274131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 342, 20), _func_cid_map_274130, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 342)
        subscript_call_result_274132 = invoke(stypy.reporting.localization.Localization(__file__, 342, 20), getitem___274131, s_274128)
        
        # Applying the binary operator 'in' (line 342)
        result_contains_274133 = python_operator(stypy.reporting.localization.Localization(__file__, 342, 11), 'in', proxy_274127, subscript_call_result_274132)
        
        # Testing the type of an if condition (line 342)
        if_condition_274134 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 342, 8), result_contains_274133)
        # Assigning a type to the variable 'if_condition_274134' (line 342)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 342, 8), 'if_condition_274134', if_condition_274134)
        # SSA begins for if statement (line 342)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining the type of the subscript
        # Getting the type of 'proxy' (line 343)
        proxy_274135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 41), 'proxy')
        
        # Obtaining the type of the subscript
        # Getting the type of 's' (line 343)
        s_274136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 38), 's')
        # Getting the type of 'self' (line 343)
        self_274137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 19), 'self')
        # Obtaining the member '_func_cid_map' of a type (line 343)
        _func_cid_map_274138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 343, 19), self_274137, '_func_cid_map')
        # Obtaining the member '__getitem__' of a type (line 343)
        getitem___274139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 343, 19), _func_cid_map_274138, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 343)
        subscript_call_result_274140 = invoke(stypy.reporting.localization.Localization(__file__, 343, 19), getitem___274139, s_274136)
        
        # Obtaining the member '__getitem__' of a type (line 343)
        getitem___274141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 343, 19), subscript_call_result_274140, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 343)
        subscript_call_result_274142 = invoke(stypy.reporting.localization.Localization(__file__, 343, 19), getitem___274141, proxy_274135)
        
        # Assigning a type to the variable 'stypy_return_type' (line 343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 343, 12), 'stypy_return_type', subscript_call_result_274142)
        # SSA join for if statement (line 342)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to add_destroy_callback(...): (line 345)
        # Processing the call arguments (line 345)
        # Getting the type of 'self' (line 345)
        self_274145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 35), 'self', False)
        # Obtaining the member '_remove_proxy' of a type (line 345)
        _remove_proxy_274146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 345, 35), self_274145, '_remove_proxy')
        # Processing the call keyword arguments (line 345)
        kwargs_274147 = {}
        # Getting the type of 'proxy' (line 345)
        proxy_274143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 8), 'proxy', False)
        # Obtaining the member 'add_destroy_callback' of a type (line 345)
        add_destroy_callback_274144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 345, 8), proxy_274143, 'add_destroy_callback')
        # Calling add_destroy_callback(args, kwargs) (line 345)
        add_destroy_callback_call_result_274148 = invoke(stypy.reporting.localization.Localization(__file__, 345, 8), add_destroy_callback_274144, *[_remove_proxy_274146], **kwargs_274147)
        
        
        # Getting the type of 'self' (line 346)
        self_274149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 8), 'self')
        # Obtaining the member '_cid' of a type (line 346)
        _cid_274150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 346, 8), self_274149, '_cid')
        int_274151 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 346, 21), 'int')
        # Applying the binary operator '+=' (line 346)
        result_iadd_274152 = python_operator(stypy.reporting.localization.Localization(__file__, 346, 8), '+=', _cid_274150, int_274151)
        # Getting the type of 'self' (line 346)
        self_274153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 8), 'self')
        # Setting the type of the member '_cid' of a type (line 346)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 346, 8), self_274153, '_cid', result_iadd_274152)
        
        
        # Assigning a Attribute to a Name (line 347):
        
        # Assigning a Attribute to a Name (line 347):
        # Getting the type of 'self' (line 347)
        self_274154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 14), 'self')
        # Obtaining the member '_cid' of a type (line 347)
        _cid_274155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 347, 14), self_274154, '_cid')
        # Assigning a type to the variable 'cid' (line 347)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 347, 8), 'cid', _cid_274155)
        
        # Assigning a Name to a Subscript (line 348):
        
        # Assigning a Name to a Subscript (line 348):
        # Getting the type of 'cid' (line 348)
        cid_274156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 39), 'cid')
        
        # Obtaining the type of the subscript
        # Getting the type of 's' (line 348)
        s_274157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 27), 's')
        # Getting the type of 'self' (line 348)
        self_274158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 8), 'self')
        # Obtaining the member '_func_cid_map' of a type (line 348)
        _func_cid_map_274159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 348, 8), self_274158, '_func_cid_map')
        # Obtaining the member '__getitem__' of a type (line 348)
        getitem___274160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 348, 8), _func_cid_map_274159, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 348)
        subscript_call_result_274161 = invoke(stypy.reporting.localization.Localization(__file__, 348, 8), getitem___274160, s_274157)
        
        # Getting the type of 'proxy' (line 348)
        proxy_274162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 30), 'proxy')
        # Storing an element on a container (line 348)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 348, 8), subscript_call_result_274161, (proxy_274162, cid_274156))
        
        # Call to setdefault(...): (line 349)
        # Processing the call arguments (line 349)
        # Getting the type of 's' (line 349)
        s_274166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 34), 's', False)
        
        # Call to dict(...): (line 349)
        # Processing the call keyword arguments (line 349)
        kwargs_274168 = {}
        # Getting the type of 'dict' (line 349)
        dict_274167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 37), 'dict', False)
        # Calling dict(args, kwargs) (line 349)
        dict_call_result_274169 = invoke(stypy.reporting.localization.Localization(__file__, 349, 37), dict_274167, *[], **kwargs_274168)
        
        # Processing the call keyword arguments (line 349)
        kwargs_274170 = {}
        # Getting the type of 'self' (line 349)
        self_274163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 8), 'self', False)
        # Obtaining the member 'callbacks' of a type (line 349)
        callbacks_274164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 349, 8), self_274163, 'callbacks')
        # Obtaining the member 'setdefault' of a type (line 349)
        setdefault_274165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 349, 8), callbacks_274164, 'setdefault')
        # Calling setdefault(args, kwargs) (line 349)
        setdefault_call_result_274171 = invoke(stypy.reporting.localization.Localization(__file__, 349, 8), setdefault_274165, *[s_274166, dict_call_result_274169], **kwargs_274170)
        
        
        # Assigning a Name to a Subscript (line 350):
        
        # Assigning a Name to a Subscript (line 350):
        # Getting the type of 'proxy' (line 350)
        proxy_274172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 33), 'proxy')
        
        # Obtaining the type of the subscript
        # Getting the type of 's' (line 350)
        s_274173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 23), 's')
        # Getting the type of 'self' (line 350)
        self_274174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 8), 'self')
        # Obtaining the member 'callbacks' of a type (line 350)
        callbacks_274175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 350, 8), self_274174, 'callbacks')
        # Obtaining the member '__getitem__' of a type (line 350)
        getitem___274176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 350, 8), callbacks_274175, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 350)
        subscript_call_result_274177 = invoke(stypy.reporting.localization.Localization(__file__, 350, 8), getitem___274176, s_274173)
        
        # Getting the type of 'cid' (line 350)
        cid_274178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 26), 'cid')
        # Storing an element on a container (line 350)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 350, 8), subscript_call_result_274177, (cid_274178, proxy_274172))
        # Getting the type of 'cid' (line 351)
        cid_274179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 15), 'cid')
        # Assigning a type to the variable 'stypy_return_type' (line 351)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 351, 8), 'stypy_return_type', cid_274179)
        
        # ################# End of 'connect(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'connect' in the type store
        # Getting the type of 'stypy_return_type' (line 333)
        stypy_return_type_274180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_274180)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'connect'
        return stypy_return_type_274180


    @norecursion
    def _remove_proxy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_remove_proxy'
        module_type_store = module_type_store.open_function_context('_remove_proxy', 353, 4, False)
        # Assigning a type to the variable 'self' (line 354)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 354, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CallbackRegistry._remove_proxy.__dict__.__setitem__('stypy_localization', localization)
        CallbackRegistry._remove_proxy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CallbackRegistry._remove_proxy.__dict__.__setitem__('stypy_type_store', module_type_store)
        CallbackRegistry._remove_proxy.__dict__.__setitem__('stypy_function_name', 'CallbackRegistry._remove_proxy')
        CallbackRegistry._remove_proxy.__dict__.__setitem__('stypy_param_names_list', ['proxy'])
        CallbackRegistry._remove_proxy.__dict__.__setitem__('stypy_varargs_param_name', None)
        CallbackRegistry._remove_proxy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CallbackRegistry._remove_proxy.__dict__.__setitem__('stypy_call_defaults', defaults)
        CallbackRegistry._remove_proxy.__dict__.__setitem__('stypy_call_varargs', varargs)
        CallbackRegistry._remove_proxy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CallbackRegistry._remove_proxy.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CallbackRegistry._remove_proxy', ['proxy'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_remove_proxy', localization, ['proxy'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_remove_proxy(...)' code ##################

        
        
        # Call to list(...): (line 354)
        # Processing the call arguments (line 354)
        
        # Call to iteritems(...): (line 354)
        # Processing the call arguments (line 354)
        # Getting the type of 'self' (line 354)
        self_274184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 50), 'self', False)
        # Obtaining the member '_func_cid_map' of a type (line 354)
        _func_cid_map_274185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 354, 50), self_274184, '_func_cid_map')
        # Processing the call keyword arguments (line 354)
        kwargs_274186 = {}
        # Getting the type of 'six' (line 354)
        six_274182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 36), 'six', False)
        # Obtaining the member 'iteritems' of a type (line 354)
        iteritems_274183 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 354, 36), six_274182, 'iteritems')
        # Calling iteritems(args, kwargs) (line 354)
        iteritems_call_result_274187 = invoke(stypy.reporting.localization.Localization(__file__, 354, 36), iteritems_274183, *[_func_cid_map_274185], **kwargs_274186)
        
        # Processing the call keyword arguments (line 354)
        kwargs_274188 = {}
        # Getting the type of 'list' (line 354)
        list_274181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 31), 'list', False)
        # Calling list(args, kwargs) (line 354)
        list_call_result_274189 = invoke(stypy.reporting.localization.Localization(__file__, 354, 31), list_274181, *[iteritems_call_result_274187], **kwargs_274188)
        
        # Testing the type of a for loop iterable (line 354)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 354, 8), list_call_result_274189)
        # Getting the type of the for loop variable (line 354)
        for_loop_var_274190 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 354, 8), list_call_result_274189)
        # Assigning a type to the variable 'signal' (line 354)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 354, 8), 'signal', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 354, 8), for_loop_var_274190))
        # Assigning a type to the variable 'proxies' (line 354)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 354, 8), 'proxies', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 354, 8), for_loop_var_274190))
        # SSA begins for a for statement (line 354)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # SSA begins for try-except statement (line 355)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        # Deleting a member
        
        # Obtaining the type of the subscript
        # Getting the type of 'signal' (line 356)
        signal_274191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 35), 'signal')
        # Getting the type of 'self' (line 356)
        self_274192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 20), 'self')
        # Obtaining the member 'callbacks' of a type (line 356)
        callbacks_274193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 356, 20), self_274192, 'callbacks')
        # Obtaining the member '__getitem__' of a type (line 356)
        getitem___274194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 356, 20), callbacks_274193, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 356)
        subscript_call_result_274195 = invoke(stypy.reporting.localization.Localization(__file__, 356, 20), getitem___274194, signal_274191)
        
        
        # Obtaining the type of the subscript
        
        # Obtaining the type of the subscript
        # Getting the type of 'proxy' (line 356)
        proxy_274196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 51), 'proxy')
        # Getting the type of 'proxies' (line 356)
        proxies_274197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 43), 'proxies')
        # Obtaining the member '__getitem__' of a type (line 356)
        getitem___274198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 356, 43), proxies_274197, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 356)
        subscript_call_result_274199 = invoke(stypy.reporting.localization.Localization(__file__, 356, 43), getitem___274198, proxy_274196)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'signal' (line 356)
        signal_274200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 35), 'signal')
        # Getting the type of 'self' (line 356)
        self_274201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 20), 'self')
        # Obtaining the member 'callbacks' of a type (line 356)
        callbacks_274202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 356, 20), self_274201, 'callbacks')
        # Obtaining the member '__getitem__' of a type (line 356)
        getitem___274203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 356, 20), callbacks_274202, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 356)
        subscript_call_result_274204 = invoke(stypy.reporting.localization.Localization(__file__, 356, 20), getitem___274203, signal_274200)
        
        # Obtaining the member '__getitem__' of a type (line 356)
        getitem___274205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 356, 20), subscript_call_result_274204, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 356)
        subscript_call_result_274206 = invoke(stypy.reporting.localization.Localization(__file__, 356, 20), getitem___274205, subscript_call_result_274199)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 356, 16), subscript_call_result_274195, subscript_call_result_274206)
        # SSA branch for the except part of a try statement (line 355)
        # SSA branch for the except 'KeyError' branch of a try statement (line 355)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 355)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to len(...): (line 360)
        # Processing the call arguments (line 360)
        
        # Obtaining the type of the subscript
        # Getting the type of 'signal' (line 360)
        signal_274208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 34), 'signal', False)
        # Getting the type of 'self' (line 360)
        self_274209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 19), 'self', False)
        # Obtaining the member 'callbacks' of a type (line 360)
        callbacks_274210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 360, 19), self_274209, 'callbacks')
        # Obtaining the member '__getitem__' of a type (line 360)
        getitem___274211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 360, 19), callbacks_274210, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 360)
        subscript_call_result_274212 = invoke(stypy.reporting.localization.Localization(__file__, 360, 19), getitem___274211, signal_274208)
        
        # Processing the call keyword arguments (line 360)
        kwargs_274213 = {}
        # Getting the type of 'len' (line 360)
        len_274207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 15), 'len', False)
        # Calling len(args, kwargs) (line 360)
        len_call_result_274214 = invoke(stypy.reporting.localization.Localization(__file__, 360, 15), len_274207, *[subscript_call_result_274212], **kwargs_274213)
        
        int_274215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 360, 46), 'int')
        # Applying the binary operator '==' (line 360)
        result_eq_274216 = python_operator(stypy.reporting.localization.Localization(__file__, 360, 15), '==', len_call_result_274214, int_274215)
        
        # Testing the type of an if condition (line 360)
        if_condition_274217 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 360, 12), result_eq_274216)
        # Assigning a type to the variable 'if_condition_274217' (line 360)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 360, 12), 'if_condition_274217', if_condition_274217)
        # SSA begins for if statement (line 360)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Deleting a member
        # Getting the type of 'self' (line 361)
        self_274218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 20), 'self')
        # Obtaining the member 'callbacks' of a type (line 361)
        callbacks_274219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 20), self_274218, 'callbacks')
        
        # Obtaining the type of the subscript
        # Getting the type of 'signal' (line 361)
        signal_274220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 35), 'signal')
        # Getting the type of 'self' (line 361)
        self_274221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 20), 'self')
        # Obtaining the member 'callbacks' of a type (line 361)
        callbacks_274222 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 20), self_274221, 'callbacks')
        # Obtaining the member '__getitem__' of a type (line 361)
        getitem___274223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 20), callbacks_274222, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 361)
        subscript_call_result_274224 = invoke(stypy.reporting.localization.Localization(__file__, 361, 20), getitem___274223, signal_274220)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 361, 16), callbacks_274219, subscript_call_result_274224)
        # Deleting a member
        # Getting the type of 'self' (line 362)
        self_274225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 20), 'self')
        # Obtaining the member '_func_cid_map' of a type (line 362)
        _func_cid_map_274226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 362, 20), self_274225, '_func_cid_map')
        
        # Obtaining the type of the subscript
        # Getting the type of 'signal' (line 362)
        signal_274227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 39), 'signal')
        # Getting the type of 'self' (line 362)
        self_274228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 20), 'self')
        # Obtaining the member '_func_cid_map' of a type (line 362)
        _func_cid_map_274229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 362, 20), self_274228, '_func_cid_map')
        # Obtaining the member '__getitem__' of a type (line 362)
        getitem___274230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 362, 20), _func_cid_map_274229, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 362)
        subscript_call_result_274231 = invoke(stypy.reporting.localization.Localization(__file__, 362, 20), getitem___274230, signal_274227)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 362, 16), _func_cid_map_274226, subscript_call_result_274231)
        # SSA join for if statement (line 360)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_remove_proxy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_remove_proxy' in the type store
        # Getting the type of 'stypy_return_type' (line 353)
        stypy_return_type_274232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_274232)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_remove_proxy'
        return stypy_return_type_274232


    @norecursion
    def disconnect(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'disconnect'
        module_type_store = module_type_store.open_function_context('disconnect', 364, 4, False)
        # Assigning a type to the variable 'self' (line 365)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 365, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CallbackRegistry.disconnect.__dict__.__setitem__('stypy_localization', localization)
        CallbackRegistry.disconnect.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CallbackRegistry.disconnect.__dict__.__setitem__('stypy_type_store', module_type_store)
        CallbackRegistry.disconnect.__dict__.__setitem__('stypy_function_name', 'CallbackRegistry.disconnect')
        CallbackRegistry.disconnect.__dict__.__setitem__('stypy_param_names_list', ['cid'])
        CallbackRegistry.disconnect.__dict__.__setitem__('stypy_varargs_param_name', None)
        CallbackRegistry.disconnect.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CallbackRegistry.disconnect.__dict__.__setitem__('stypy_call_defaults', defaults)
        CallbackRegistry.disconnect.__dict__.__setitem__('stypy_call_varargs', varargs)
        CallbackRegistry.disconnect.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CallbackRegistry.disconnect.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CallbackRegistry.disconnect', ['cid'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'disconnect', localization, ['cid'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'disconnect(...)' code ##################

        unicode_274233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 367, (-1)), 'unicode', u'\n        disconnect the callback registered with callback id *cid*\n        ')
        
        
        # Call to list(...): (line 368)
        # Processing the call arguments (line 368)
        
        # Call to iteritems(...): (line 368)
        # Processing the call arguments (line 368)
        # Getting the type of 'self' (line 368)
        self_274237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 55), 'self', False)
        # Obtaining the member 'callbacks' of a type (line 368)
        callbacks_274238 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 368, 55), self_274237, 'callbacks')
        # Processing the call keyword arguments (line 368)
        kwargs_274239 = {}
        # Getting the type of 'six' (line 368)
        six_274235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 41), 'six', False)
        # Obtaining the member 'iteritems' of a type (line 368)
        iteritems_274236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 368, 41), six_274235, 'iteritems')
        # Calling iteritems(args, kwargs) (line 368)
        iteritems_call_result_274240 = invoke(stypy.reporting.localization.Localization(__file__, 368, 41), iteritems_274236, *[callbacks_274238], **kwargs_274239)
        
        # Processing the call keyword arguments (line 368)
        kwargs_274241 = {}
        # Getting the type of 'list' (line 368)
        list_274234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 36), 'list', False)
        # Calling list(args, kwargs) (line 368)
        list_call_result_274242 = invoke(stypy.reporting.localization.Localization(__file__, 368, 36), list_274234, *[iteritems_call_result_274240], **kwargs_274241)
        
        # Testing the type of a for loop iterable (line 368)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 368, 8), list_call_result_274242)
        # Getting the type of the for loop variable (line 368)
        for_loop_var_274243 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 368, 8), list_call_result_274242)
        # Assigning a type to the variable 'eventname' (line 368)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 368, 8), 'eventname', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 368, 8), for_loop_var_274243))
        # Assigning a type to the variable 'callbackd' (line 368)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 368, 8), 'callbackd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 368, 8), for_loop_var_274243))
        # SSA begins for a for statement (line 368)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # SSA begins for try-except statement (line 369)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        # Deleting a member
        # Getting the type of 'callbackd' (line 370)
        callbackd_274244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 20), 'callbackd')
        
        # Obtaining the type of the subscript
        # Getting the type of 'cid' (line 370)
        cid_274245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 30), 'cid')
        # Getting the type of 'callbackd' (line 370)
        callbackd_274246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 20), 'callbackd')
        # Obtaining the member '__getitem__' of a type (line 370)
        getitem___274247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 370, 20), callbackd_274246, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 370)
        subscript_call_result_274248 = invoke(stypy.reporting.localization.Localization(__file__, 370, 20), getitem___274247, cid_274245)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 370, 16), callbackd_274244, subscript_call_result_274248)
        # SSA branch for the except part of a try statement (line 369)
        # SSA branch for the except 'KeyError' branch of a try statement (line 369)
        module_type_store.open_ssa_branch('except')
        # SSA branch for the else branch of a try statement (line 369)
        module_type_store.open_ssa_branch('except else')
        
        
        # Call to list(...): (line 374)
        # Processing the call arguments (line 374)
        
        # Call to iteritems(...): (line 375)
        # Processing the call arguments (line 375)
        # Getting the type of 'self' (line 375)
        self_274252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 38), 'self', False)
        # Obtaining the member '_func_cid_map' of a type (line 375)
        _func_cid_map_274253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 375, 38), self_274252, '_func_cid_map')
        # Processing the call keyword arguments (line 375)
        kwargs_274254 = {}
        # Getting the type of 'six' (line 375)
        six_274250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 24), 'six', False)
        # Obtaining the member 'iteritems' of a type (line 375)
        iteritems_274251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 375, 24), six_274250, 'iteritems')
        # Calling iteritems(args, kwargs) (line 375)
        iteritems_call_result_274255 = invoke(stypy.reporting.localization.Localization(__file__, 375, 24), iteritems_274251, *[_func_cid_map_274253], **kwargs_274254)
        
        # Processing the call keyword arguments (line 374)
        kwargs_274256 = {}
        # Getting the type of 'list' (line 374)
        list_274249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 41), 'list', False)
        # Calling list(args, kwargs) (line 374)
        list_call_result_274257 = invoke(stypy.reporting.localization.Localization(__file__, 374, 41), list_274249, *[iteritems_call_result_274255], **kwargs_274256)
        
        # Testing the type of a for loop iterable (line 374)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 374, 16), list_call_result_274257)
        # Getting the type of the for loop variable (line 374)
        for_loop_var_274258 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 374, 16), list_call_result_274257)
        # Assigning a type to the variable 'signal' (line 374)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 374, 16), 'signal', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 374, 16), for_loop_var_274258))
        # Assigning a type to the variable 'functions' (line 374)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 374, 16), 'functions', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 374, 16), for_loop_var_274258))
        # SSA begins for a for statement (line 374)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to list(...): (line 376)
        # Processing the call arguments (line 376)
        
        # Call to iteritems(...): (line 376)
        # Processing the call arguments (line 376)
        # Getting the type of 'functions' (line 376)
        functions_274262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 62), 'functions', False)
        # Processing the call keyword arguments (line 376)
        kwargs_274263 = {}
        # Getting the type of 'six' (line 376)
        six_274260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 48), 'six', False)
        # Obtaining the member 'iteritems' of a type (line 376)
        iteritems_274261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 48), six_274260, 'iteritems')
        # Calling iteritems(args, kwargs) (line 376)
        iteritems_call_result_274264 = invoke(stypy.reporting.localization.Localization(__file__, 376, 48), iteritems_274261, *[functions_274262], **kwargs_274263)
        
        # Processing the call keyword arguments (line 376)
        kwargs_274265 = {}
        # Getting the type of 'list' (line 376)
        list_274259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 43), 'list', False)
        # Calling list(args, kwargs) (line 376)
        list_call_result_274266 = invoke(stypy.reporting.localization.Localization(__file__, 376, 43), list_274259, *[iteritems_call_result_274264], **kwargs_274265)
        
        # Testing the type of a for loop iterable (line 376)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 376, 20), list_call_result_274266)
        # Getting the type of the for loop variable (line 376)
        for_loop_var_274267 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 376, 20), list_call_result_274266)
        # Assigning a type to the variable 'function' (line 376)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 376, 20), 'function', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 376, 20), for_loop_var_274267))
        # Assigning a type to the variable 'value' (line 376)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 376, 20), 'value', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 376, 20), for_loop_var_274267))
        # SSA begins for a for statement (line 376)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'value' (line 377)
        value_274268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 27), 'value')
        # Getting the type of 'cid' (line 377)
        cid_274269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 36), 'cid')
        # Applying the binary operator '==' (line 377)
        result_eq_274270 = python_operator(stypy.reporting.localization.Localization(__file__, 377, 27), '==', value_274268, cid_274269)
        
        # Testing the type of an if condition (line 377)
        if_condition_274271 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 377, 24), result_eq_274270)
        # Assigning a type to the variable 'if_condition_274271' (line 377)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 377, 24), 'if_condition_274271', if_condition_274271)
        # SSA begins for if statement (line 377)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Deleting a member
        # Getting the type of 'functions' (line 378)
        functions_274272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 32), 'functions')
        
        # Obtaining the type of the subscript
        # Getting the type of 'function' (line 378)
        function_274273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 42), 'function')
        # Getting the type of 'functions' (line 378)
        functions_274274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 32), 'functions')
        # Obtaining the member '__getitem__' of a type (line 378)
        getitem___274275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 378, 32), functions_274274, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 378)
        subscript_call_result_274276 = invoke(stypy.reporting.localization.Localization(__file__, 378, 32), getitem___274275, function_274273)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 378, 28), functions_274272, subscript_call_result_274276)
        # SSA join for if statement (line 377)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Assigning a type to the variable 'stypy_return_type' (line 379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 379, 16), 'stypy_return_type', types.NoneType)
        # SSA join for try-except statement (line 369)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'disconnect(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'disconnect' in the type store
        # Getting the type of 'stypy_return_type' (line 364)
        stypy_return_type_274277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_274277)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'disconnect'
        return stypy_return_type_274277


    @norecursion
    def process(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'process'
        module_type_store = module_type_store.open_function_context('process', 381, 4, False)
        # Assigning a type to the variable 'self' (line 382)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 382, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CallbackRegistry.process.__dict__.__setitem__('stypy_localization', localization)
        CallbackRegistry.process.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CallbackRegistry.process.__dict__.__setitem__('stypy_type_store', module_type_store)
        CallbackRegistry.process.__dict__.__setitem__('stypy_function_name', 'CallbackRegistry.process')
        CallbackRegistry.process.__dict__.__setitem__('stypy_param_names_list', ['s'])
        CallbackRegistry.process.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        CallbackRegistry.process.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        CallbackRegistry.process.__dict__.__setitem__('stypy_call_defaults', defaults)
        CallbackRegistry.process.__dict__.__setitem__('stypy_call_varargs', varargs)
        CallbackRegistry.process.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CallbackRegistry.process.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CallbackRegistry.process', ['s'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'process', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'process(...)' code ##################

        unicode_274278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 385, (-1)), 'unicode', u'\n        process signal `s`.  All of the functions registered to receive\n        callbacks on `s` will be called with ``**args`` and ``**kwargs``\n        ')
        
        
        # Getting the type of 's' (line 386)
        s_274279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 11), 's')
        # Getting the type of 'self' (line 386)
        self_274280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 16), 'self')
        # Obtaining the member 'callbacks' of a type (line 386)
        callbacks_274281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 386, 16), self_274280, 'callbacks')
        # Applying the binary operator 'in' (line 386)
        result_contains_274282 = python_operator(stypy.reporting.localization.Localization(__file__, 386, 11), 'in', s_274279, callbacks_274281)
        
        # Testing the type of an if condition (line 386)
        if_condition_274283 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 386, 8), result_contains_274282)
        # Assigning a type to the variable 'if_condition_274283' (line 386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 8), 'if_condition_274283', if_condition_274283)
        # SSA begins for if statement (line 386)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to list(...): (line 387)
        # Processing the call arguments (line 387)
        
        # Call to iteritems(...): (line 387)
        # Processing the call arguments (line 387)
        
        # Obtaining the type of the subscript
        # Getting the type of 's' (line 387)
        s_274287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 64), 's', False)
        # Getting the type of 'self' (line 387)
        self_274288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 49), 'self', False)
        # Obtaining the member 'callbacks' of a type (line 387)
        callbacks_274289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 387, 49), self_274288, 'callbacks')
        # Obtaining the member '__getitem__' of a type (line 387)
        getitem___274290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 387, 49), callbacks_274289, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 387)
        subscript_call_result_274291 = invoke(stypy.reporting.localization.Localization(__file__, 387, 49), getitem___274290, s_274287)
        
        # Processing the call keyword arguments (line 387)
        kwargs_274292 = {}
        # Getting the type of 'six' (line 387)
        six_274285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 35), 'six', False)
        # Obtaining the member 'iteritems' of a type (line 387)
        iteritems_274286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 387, 35), six_274285, 'iteritems')
        # Calling iteritems(args, kwargs) (line 387)
        iteritems_call_result_274293 = invoke(stypy.reporting.localization.Localization(__file__, 387, 35), iteritems_274286, *[subscript_call_result_274291], **kwargs_274292)
        
        # Processing the call keyword arguments (line 387)
        kwargs_274294 = {}
        # Getting the type of 'list' (line 387)
        list_274284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 30), 'list', False)
        # Calling list(args, kwargs) (line 387)
        list_call_result_274295 = invoke(stypy.reporting.localization.Localization(__file__, 387, 30), list_274284, *[iteritems_call_result_274293], **kwargs_274294)
        
        # Testing the type of a for loop iterable (line 387)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 387, 12), list_call_result_274295)
        # Getting the type of the for loop variable (line 387)
        for_loop_var_274296 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 387, 12), list_call_result_274295)
        # Assigning a type to the variable 'cid' (line 387)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 387, 12), 'cid', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 387, 12), for_loop_var_274296))
        # Assigning a type to the variable 'proxy' (line 387)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 387, 12), 'proxy', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 387, 12), for_loop_var_274296))
        # SSA begins for a for statement (line 387)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # SSA begins for try-except statement (line 388)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to proxy(...): (line 389)
        # Getting the type of 'args' (line 389)
        args_274298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 27), 'args', False)
        # Processing the call keyword arguments (line 389)
        # Getting the type of 'kwargs' (line 389)
        kwargs_274299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 35), 'kwargs', False)
        kwargs_274300 = {'kwargs_274299': kwargs_274299}
        # Getting the type of 'proxy' (line 389)
        proxy_274297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 20), 'proxy', False)
        # Calling proxy(args, kwargs) (line 389)
        proxy_call_result_274301 = invoke(stypy.reporting.localization.Localization(__file__, 389, 20), proxy_274297, *[args_274298], **kwargs_274300)
        
        # SSA branch for the except part of a try statement (line 388)
        # SSA branch for the except 'ReferenceError' branch of a try statement (line 388)
        module_type_store.open_ssa_branch('except')
        
        # Call to _remove_proxy(...): (line 391)
        # Processing the call arguments (line 391)
        # Getting the type of 'proxy' (line 391)
        proxy_274304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 39), 'proxy', False)
        # Processing the call keyword arguments (line 391)
        kwargs_274305 = {}
        # Getting the type of 'self' (line 391)
        self_274302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 20), 'self', False)
        # Obtaining the member '_remove_proxy' of a type (line 391)
        _remove_proxy_274303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 391, 20), self_274302, '_remove_proxy')
        # Calling _remove_proxy(args, kwargs) (line 391)
        _remove_proxy_call_result_274306 = invoke(stypy.reporting.localization.Localization(__file__, 391, 20), _remove_proxy_274303, *[proxy_274304], **kwargs_274305)
        
        # SSA branch for the except 'Exception' branch of a try statement (line 388)
        # Storing handler type
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'Exception' (line 394)
        Exception_274307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 23), 'Exception')
        # Assigning a type to the variable 'exc' (line 394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 394, 16), 'exc', Exception_274307)
        
        
        # Getting the type of 'self' (line 395)
        self_274308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 23), 'self')
        # Obtaining the member 'exception_handler' of a type (line 395)
        exception_handler_274309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 395, 23), self_274308, 'exception_handler')
        # Getting the type of 'None' (line 395)
        None_274310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 53), 'None')
        # Applying the binary operator 'isnot' (line 395)
        result_is_not_274311 = python_operator(stypy.reporting.localization.Localization(__file__, 395, 23), 'isnot', exception_handler_274309, None_274310)
        
        # Testing the type of an if condition (line 395)
        if_condition_274312 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 395, 20), result_is_not_274311)
        # Assigning a type to the variable 'if_condition_274312' (line 395)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 395, 20), 'if_condition_274312', if_condition_274312)
        # SSA begins for if statement (line 395)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to exception_handler(...): (line 396)
        # Processing the call arguments (line 396)
        # Getting the type of 'exc' (line 396)
        exc_274315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 47), 'exc', False)
        # Processing the call keyword arguments (line 396)
        kwargs_274316 = {}
        # Getting the type of 'self' (line 396)
        self_274313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 24), 'self', False)
        # Obtaining the member 'exception_handler' of a type (line 396)
        exception_handler_274314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 396, 24), self_274313, 'exception_handler')
        # Calling exception_handler(args, kwargs) (line 396)
        exception_handler_call_result_274317 = invoke(stypy.reporting.localization.Localization(__file__, 396, 24), exception_handler_274314, *[exc_274315], **kwargs_274316)
        
        # SSA branch for the else part of an if statement (line 395)
        module_type_store.open_ssa_branch('else')
        # SSA join for if statement (line 395)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for try-except statement (line 388)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 386)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'process(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'process' in the type store
        # Getting the type of 'stypy_return_type' (line 381)
        stypy_return_type_274318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_274318)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'process'
        return stypy_return_type_274318


# Assigning a type to the variable 'CallbackRegistry' (line 256)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 0), 'CallbackRegistry', CallbackRegistry)
# Declaration of the 'silent_list' class
# Getting the type of 'list' (line 401)
list_274319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 18), 'list')

class silent_list(list_274319, ):
    unicode_274320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 406, (-1)), 'unicode', u'\n    override repr when returning a list of matplotlib artists to\n    prevent long, meaningless output.  This is meant to be used for a\n    homogeneous list of a given type\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 407)
        None_274321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 407, 33), 'None')
        defaults = [None_274321]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 407, 4, False)
        # Assigning a type to the variable 'self' (line 408)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 408, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'silent_list.__init__', ['type', 'seq'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['type', 'seq'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 408):
        
        # Assigning a Name to a Attribute (line 408):
        # Getting the type of 'type' (line 408)
        type_274322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 20), 'type')
        # Getting the type of 'self' (line 408)
        self_274323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 8), 'self')
        # Setting the type of the member 'type' of a type (line 408)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 408, 8), self_274323, 'type', type_274322)
        
        # Type idiom detected: calculating its left and rigth part (line 409)
        # Getting the type of 'seq' (line 409)
        seq_274324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 8), 'seq')
        # Getting the type of 'None' (line 409)
        None_274325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 22), 'None')
        
        (may_be_274326, more_types_in_union_274327) = may_not_be_none(seq_274324, None_274325)

        if may_be_274326:

            if more_types_in_union_274327:
                # Runtime conditional SSA (line 409)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to extend(...): (line 410)
            # Processing the call arguments (line 410)
            # Getting the type of 'seq' (line 410)
            seq_274330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 24), 'seq', False)
            # Processing the call keyword arguments (line 410)
            kwargs_274331 = {}
            # Getting the type of 'self' (line 410)
            self_274328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 12), 'self', False)
            # Obtaining the member 'extend' of a type (line 410)
            extend_274329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 12), self_274328, 'extend')
            # Calling extend(args, kwargs) (line 410)
            extend_call_result_274332 = invoke(stypy.reporting.localization.Localization(__file__, 410, 12), extend_274329, *[seq_274330], **kwargs_274331)
            

            if more_types_in_union_274327:
                # SSA join for if statement (line 409)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 412, 4, False)
        # Assigning a type to the variable 'self' (line 413)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 413, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        silent_list.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        silent_list.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        silent_list.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        silent_list.stypy__repr__.__dict__.__setitem__('stypy_function_name', 'silent_list.stypy__repr__')
        silent_list.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        silent_list.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        silent_list.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        silent_list.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        silent_list.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        silent_list.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        silent_list.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'silent_list.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        unicode_274333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 413, 15), 'unicode', u'<a list of %d %s objects>')
        
        # Obtaining an instance of the builtin type 'tuple' (line 413)
        tuple_274334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 413, 46), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 413)
        # Adding element type (line 413)
        
        # Call to len(...): (line 413)
        # Processing the call arguments (line 413)
        # Getting the type of 'self' (line 413)
        self_274336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 50), 'self', False)
        # Processing the call keyword arguments (line 413)
        kwargs_274337 = {}
        # Getting the type of 'len' (line 413)
        len_274335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 46), 'len', False)
        # Calling len(args, kwargs) (line 413)
        len_call_result_274338 = invoke(stypy.reporting.localization.Localization(__file__, 413, 46), len_274335, *[self_274336], **kwargs_274337)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 413, 46), tuple_274334, len_call_result_274338)
        # Adding element type (line 413)
        # Getting the type of 'self' (line 413)
        self_274339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 57), 'self')
        # Obtaining the member 'type' of a type (line 413)
        type_274340 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 413, 57), self_274339, 'type')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 413, 46), tuple_274334, type_274340)
        
        # Applying the binary operator '%' (line 413)
        result_mod_274341 = python_operator(stypy.reporting.localization.Localization(__file__, 413, 15), '%', unicode_274333, tuple_274334)
        
        # Assigning a type to the variable 'stypy_return_type' (line 413)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 413, 8), 'stypy_return_type', result_mod_274341)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 412)
        stypy_return_type_274342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_274342)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_274342


    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 415, 4, False)
        # Assigning a type to the variable 'self' (line 416)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 416, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        silent_list.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        silent_list.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        silent_list.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        silent_list.stypy__str__.__dict__.__setitem__('stypy_function_name', 'silent_list.stypy__str__')
        silent_list.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        silent_list.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        silent_list.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        silent_list.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        silent_list.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        silent_list.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        silent_list.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'silent_list.stypy__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        
        # Call to repr(...): (line 416)
        # Processing the call arguments (line 416)
        # Getting the type of 'self' (line 416)
        self_274344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 20), 'self', False)
        # Processing the call keyword arguments (line 416)
        kwargs_274345 = {}
        # Getting the type of 'repr' (line 416)
        repr_274343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 15), 'repr', False)
        # Calling repr(args, kwargs) (line 416)
        repr_call_result_274346 = invoke(stypy.reporting.localization.Localization(__file__, 416, 15), repr_274343, *[self_274344], **kwargs_274345)
        
        # Assigning a type to the variable 'stypy_return_type' (line 416)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 416, 8), 'stypy_return_type', repr_call_result_274346)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 415)
        stypy_return_type_274347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_274347)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_274347


    @norecursion
    def __getstate__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__getstate__'
        module_type_store = module_type_store.open_function_context('__getstate__', 418, 4, False)
        # Assigning a type to the variable 'self' (line 419)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 419, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        silent_list.__getstate__.__dict__.__setitem__('stypy_localization', localization)
        silent_list.__getstate__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        silent_list.__getstate__.__dict__.__setitem__('stypy_type_store', module_type_store)
        silent_list.__getstate__.__dict__.__setitem__('stypy_function_name', 'silent_list.__getstate__')
        silent_list.__getstate__.__dict__.__setitem__('stypy_param_names_list', [])
        silent_list.__getstate__.__dict__.__setitem__('stypy_varargs_param_name', None)
        silent_list.__getstate__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        silent_list.__getstate__.__dict__.__setitem__('stypy_call_defaults', defaults)
        silent_list.__getstate__.__dict__.__setitem__('stypy_call_varargs', varargs)
        silent_list.__getstate__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        silent_list.__getstate__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'silent_list.__getstate__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__getstate__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__getstate__(...)' code ##################

        
        # Obtaining an instance of the builtin type 'dict' (line 420)
        dict_274348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 420, 15), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 420)
        # Adding element type (key, value) (line 420)
        unicode_274349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 420, 16), 'unicode', u'type')
        # Getting the type of 'self' (line 420)
        self_274350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 24), 'self')
        # Obtaining the member 'type' of a type (line 420)
        type_274351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 420, 24), self_274350, 'type')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 420, 15), dict_274348, (unicode_274349, type_274351))
        # Adding element type (key, value) (line 420)
        unicode_274352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 420, 35), 'unicode', u'seq')
        
        # Obtaining the type of the subscript
        slice_274353 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 420, 42), None, None, None)
        # Getting the type of 'self' (line 420)
        self_274354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 42), 'self')
        # Obtaining the member '__getitem__' of a type (line 420)
        getitem___274355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 420, 42), self_274354, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 420)
        subscript_call_result_274356 = invoke(stypy.reporting.localization.Localization(__file__, 420, 42), getitem___274355, slice_274353)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 420, 15), dict_274348, (unicode_274352, subscript_call_result_274356))
        
        # Assigning a type to the variable 'stypy_return_type' (line 420)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 420, 8), 'stypy_return_type', dict_274348)
        
        # ################# End of '__getstate__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__getstate__' in the type store
        # Getting the type of 'stypy_return_type' (line 418)
        stypy_return_type_274357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_274357)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__getstate__'
        return stypy_return_type_274357


    @norecursion
    def __setstate__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__setstate__'
        module_type_store = module_type_store.open_function_context('__setstate__', 422, 4, False)
        # Assigning a type to the variable 'self' (line 423)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 423, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        silent_list.__setstate__.__dict__.__setitem__('stypy_localization', localization)
        silent_list.__setstate__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        silent_list.__setstate__.__dict__.__setitem__('stypy_type_store', module_type_store)
        silent_list.__setstate__.__dict__.__setitem__('stypy_function_name', 'silent_list.__setstate__')
        silent_list.__setstate__.__dict__.__setitem__('stypy_param_names_list', ['state'])
        silent_list.__setstate__.__dict__.__setitem__('stypy_varargs_param_name', None)
        silent_list.__setstate__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        silent_list.__setstate__.__dict__.__setitem__('stypy_call_defaults', defaults)
        silent_list.__setstate__.__dict__.__setitem__('stypy_call_varargs', varargs)
        silent_list.__setstate__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        silent_list.__setstate__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'silent_list.__setstate__', ['state'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__setstate__', localization, ['state'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__setstate__(...)' code ##################

        
        # Assigning a Subscript to a Attribute (line 423):
        
        # Assigning a Subscript to a Attribute (line 423):
        
        # Obtaining the type of the subscript
        unicode_274358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 423, 26), 'unicode', u'type')
        # Getting the type of 'state' (line 423)
        state_274359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 20), 'state')
        # Obtaining the member '__getitem__' of a type (line 423)
        getitem___274360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 423, 20), state_274359, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 423)
        subscript_call_result_274361 = invoke(stypy.reporting.localization.Localization(__file__, 423, 20), getitem___274360, unicode_274358)
        
        # Getting the type of 'self' (line 423)
        self_274362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 8), 'self')
        # Setting the type of the member 'type' of a type (line 423)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 423, 8), self_274362, 'type', subscript_call_result_274361)
        
        # Call to extend(...): (line 424)
        # Processing the call arguments (line 424)
        
        # Obtaining the type of the subscript
        unicode_274365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 424, 26), 'unicode', u'seq')
        # Getting the type of 'state' (line 424)
        state_274366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 20), 'state', False)
        # Obtaining the member '__getitem__' of a type (line 424)
        getitem___274367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 424, 20), state_274366, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 424)
        subscript_call_result_274368 = invoke(stypy.reporting.localization.Localization(__file__, 424, 20), getitem___274367, unicode_274365)
        
        # Processing the call keyword arguments (line 424)
        kwargs_274369 = {}
        # Getting the type of 'self' (line 424)
        self_274363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 8), 'self', False)
        # Obtaining the member 'extend' of a type (line 424)
        extend_274364 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 424, 8), self_274363, 'extend')
        # Calling extend(args, kwargs) (line 424)
        extend_call_result_274370 = invoke(stypy.reporting.localization.Localization(__file__, 424, 8), extend_274364, *[subscript_call_result_274368], **kwargs_274369)
        
        
        # ################# End of '__setstate__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__setstate__' in the type store
        # Getting the type of 'stypy_return_type' (line 422)
        stypy_return_type_274371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_274371)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__setstate__'
        return stypy_return_type_274371


# Assigning a type to the variable 'silent_list' (line 401)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 401, 0), 'silent_list', silent_list)
# Declaration of the 'IgnoredKeywordWarning' class
# Getting the type of 'UserWarning' (line 427)
UserWarning_274372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 28), 'UserWarning')

class IgnoredKeywordWarning(UserWarning_274372, ):
    unicode_274373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 431, (-1)), 'unicode', u'\n    A class for issuing warnings about keyword arguments that will be ignored\n    by matplotlib\n    ')
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 427, 0, False)
        # Assigning a type to the variable 'self' (line 428)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 428, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IgnoredKeywordWarning.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'IgnoredKeywordWarning' (line 427)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 427, 0), 'IgnoredKeywordWarning', IgnoredKeywordWarning)

@norecursion
def local_over_kwdict(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'local_over_kwdict'
    module_type_store = module_type_store.open_function_context('local_over_kwdict', 435, 0, False)
    
    # Passed parameters checking function
    local_over_kwdict.stypy_localization = localization
    local_over_kwdict.stypy_type_of_self = None
    local_over_kwdict.stypy_type_store = module_type_store
    local_over_kwdict.stypy_function_name = 'local_over_kwdict'
    local_over_kwdict.stypy_param_names_list = ['local_var', 'kwargs']
    local_over_kwdict.stypy_varargs_param_name = 'keys'
    local_over_kwdict.stypy_kwargs_param_name = None
    local_over_kwdict.stypy_call_defaults = defaults
    local_over_kwdict.stypy_call_varargs = varargs
    local_over_kwdict.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'local_over_kwdict', ['local_var', 'kwargs'], 'keys', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'local_over_kwdict', localization, ['local_var', 'kwargs'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'local_over_kwdict(...)' code ##################

    unicode_274374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 470, (-1)), 'unicode', u'\n    Enforces the priority of a local variable over potentially conflicting\n    argument(s) from a kwargs dict. The following possible output values are\n    considered in order of priority:\n\n        local_var > kwargs[keys[0]] > ... > kwargs[keys[-1]]\n\n    The first of these whose value is not None will be returned. If all are\n    None then None will be returned. Each key in keys will be removed from the\n    kwargs dict in place.\n\n    Parameters\n    ----------\n        local_var: any object\n            The local variable (highest priority)\n\n        kwargs: dict\n            Dictionary of keyword arguments; modified in place\n\n        keys: str(s)\n            Name(s) of keyword arguments to process, in descending order of\n            priority\n\n    Returns\n    -------\n        out: any object\n            Either local_var or one of kwargs[key] for key in keys\n\n    Raises\n    ------\n        IgnoredKeywordWarning\n            For each key in keys that is removed from kwargs but not used as\n            the output value\n\n    ')
    
    # Assigning a Name to a Name (line 471):
    
    # Assigning a Name to a Name (line 471):
    # Getting the type of 'local_var' (line 471)
    local_var_274375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 10), 'local_var')
    # Assigning a type to the variable 'out' (line 471)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 471, 4), 'out', local_var_274375)
    
    # Getting the type of 'keys' (line 472)
    keys_274376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 15), 'keys')
    # Testing the type of a for loop iterable (line 472)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 472, 4), keys_274376)
    # Getting the type of the for loop variable (line 472)
    for_loop_var_274377 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 472, 4), keys_274376)
    # Assigning a type to the variable 'key' (line 472)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 472, 4), 'key', for_loop_var_274377)
    # SSA begins for a for statement (line 472)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 473):
    
    # Assigning a Call to a Name (line 473):
    
    # Call to pop(...): (line 473)
    # Processing the call arguments (line 473)
    # Getting the type of 'key' (line 473)
    key_274380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 31), 'key', False)
    # Getting the type of 'None' (line 473)
    None_274381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 36), 'None', False)
    # Processing the call keyword arguments (line 473)
    kwargs_274382 = {}
    # Getting the type of 'kwargs' (line 473)
    kwargs_274378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 20), 'kwargs', False)
    # Obtaining the member 'pop' of a type (line 473)
    pop_274379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 473, 20), kwargs_274378, 'pop')
    # Calling pop(args, kwargs) (line 473)
    pop_call_result_274383 = invoke(stypy.reporting.localization.Localization(__file__, 473, 20), pop_274379, *[key_274380, None_274381], **kwargs_274382)
    
    # Assigning a type to the variable 'kwarg_val' (line 473)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 8), 'kwarg_val', pop_call_result_274383)
    
    # Type idiom detected: calculating its left and rigth part (line 474)
    # Getting the type of 'kwarg_val' (line 474)
    kwarg_val_274384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 8), 'kwarg_val')
    # Getting the type of 'None' (line 474)
    None_274385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 28), 'None')
    
    (may_be_274386, more_types_in_union_274387) = may_not_be_none(kwarg_val_274384, None_274385)

    if may_be_274386:

        if more_types_in_union_274387:
            # Runtime conditional SSA (line 474)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Type idiom detected: calculating its left and rigth part (line 475)
        # Getting the type of 'out' (line 475)
        out_274388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 15), 'out')
        # Getting the type of 'None' (line 475)
        None_274389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 22), 'None')
        
        (may_be_274390, more_types_in_union_274391) = may_be_none(out_274388, None_274389)

        if may_be_274390:

            if more_types_in_union_274391:
                # Runtime conditional SSA (line 475)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Name (line 476):
            
            # Assigning a Name to a Name (line 476):
            # Getting the type of 'kwarg_val' (line 476)
            kwarg_val_274392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 22), 'kwarg_val')
            # Assigning a type to the variable 'out' (line 476)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 476, 16), 'out', kwarg_val_274392)

            if more_types_in_union_274391:
                # Runtime conditional SSA for else branch (line 475)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_274390) or more_types_in_union_274391):
            
            # Call to warn(...): (line 478)
            # Processing the call arguments (line 478)
            unicode_274395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 478, 30), 'unicode', u'"%s" keyword argument will be ignored')
            # Getting the type of 'key' (line 478)
            key_274396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 72), 'key', False)
            # Applying the binary operator '%' (line 478)
            result_mod_274397 = python_operator(stypy.reporting.localization.Localization(__file__, 478, 30), '%', unicode_274395, key_274396)
            
            # Getting the type of 'IgnoredKeywordWarning' (line 479)
            IgnoredKeywordWarning_274398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 30), 'IgnoredKeywordWarning', False)
            # Processing the call keyword arguments (line 478)
            kwargs_274399 = {}
            # Getting the type of 'warnings' (line 478)
            warnings_274393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 16), 'warnings', False)
            # Obtaining the member 'warn' of a type (line 478)
            warn_274394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 478, 16), warnings_274393, 'warn')
            # Calling warn(args, kwargs) (line 478)
            warn_call_result_274400 = invoke(stypy.reporting.localization.Localization(__file__, 478, 16), warn_274394, *[result_mod_274397, IgnoredKeywordWarning_274398], **kwargs_274399)
            

            if (may_be_274390 and more_types_in_union_274391):
                # SSA join for if statement (line 475)
                module_type_store = module_type_store.join_ssa_context()


        

        if more_types_in_union_274387:
            # SSA join for if statement (line 474)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'out' (line 480)
    out_274401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 11), 'out')
    # Assigning a type to the variable 'stypy_return_type' (line 480)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 480, 4), 'stypy_return_type', out_274401)
    
    # ################# End of 'local_over_kwdict(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'local_over_kwdict' in the type store
    # Getting the type of 'stypy_return_type' (line 435)
    stypy_return_type_274402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_274402)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'local_over_kwdict'
    return stypy_return_type_274402

# Assigning a type to the variable 'local_over_kwdict' (line 435)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 0), 'local_over_kwdict', local_over_kwdict)

@norecursion
def strip_math(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'strip_math'
    module_type_store = module_type_store.open_function_context('strip_math', 483, 0, False)
    
    # Passed parameters checking function
    strip_math.stypy_localization = localization
    strip_math.stypy_type_of_self = None
    strip_math.stypy_type_store = module_type_store
    strip_math.stypy_function_name = 'strip_math'
    strip_math.stypy_param_names_list = ['s']
    strip_math.stypy_varargs_param_name = None
    strip_math.stypy_kwargs_param_name = None
    strip_math.stypy_call_defaults = defaults
    strip_math.stypy_call_varargs = varargs
    strip_math.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'strip_math', ['s'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'strip_math', localization, ['s'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'strip_math(...)' code ##################

    unicode_274403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 484, 4), 'unicode', u'remove latex formatting from mathtext')
    
    # Assigning a Tuple to a Name (line 485):
    
    # Assigning a Tuple to a Name (line 485):
    
    # Obtaining an instance of the builtin type 'tuple' (line 485)
    tuple_274404 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 485, 14), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 485)
    # Adding element type (line 485)
    unicode_274405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 485, 14), 'unicode', u'\\mathdefault')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 485, 14), tuple_274404, unicode_274405)
    # Adding element type (line 485)
    unicode_274406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 485, 31), 'unicode', u'\\rm')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 485, 14), tuple_274404, unicode_274406)
    # Adding element type (line 485)
    unicode_274407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 485, 39), 'unicode', u'\\cal')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 485, 14), tuple_274404, unicode_274407)
    # Adding element type (line 485)
    unicode_274408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 485, 48), 'unicode', u'\\tt')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 485, 14), tuple_274404, unicode_274408)
    # Adding element type (line 485)
    unicode_274409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 485, 56), 'unicode', u'\\it')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 485, 14), tuple_274404, unicode_274409)
    # Adding element type (line 485)
    unicode_274410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 485, 64), 'unicode', u'\\')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 485, 14), tuple_274404, unicode_274410)
    # Adding element type (line 485)
    unicode_274411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 485, 70), 'unicode', u'{')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 485, 14), tuple_274404, unicode_274411)
    # Adding element type (line 485)
    unicode_274412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 485, 75), 'unicode', u'}')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 485, 14), tuple_274404, unicode_274412)
    
    # Assigning a type to the variable 'remove' (line 485)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 485, 4), 'remove', tuple_274404)
    
    # Assigning a Subscript to a Name (line 486):
    
    # Assigning a Subscript to a Name (line 486):
    
    # Obtaining the type of the subscript
    int_274413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 486, 10), 'int')
    int_274414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 486, 12), 'int')
    slice_274415 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 486, 8), int_274413, int_274414, None)
    # Getting the type of 's' (line 486)
    s_274416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 8), 's')
    # Obtaining the member '__getitem__' of a type (line 486)
    getitem___274417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 486, 8), s_274416, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 486)
    subscript_call_result_274418 = invoke(stypy.reporting.localization.Localization(__file__, 486, 8), getitem___274417, slice_274415)
    
    # Assigning a type to the variable 's' (line 486)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 486, 4), 's', subscript_call_result_274418)
    
    # Getting the type of 'remove' (line 487)
    remove_274419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 13), 'remove')
    # Testing the type of a for loop iterable (line 487)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 487, 4), remove_274419)
    # Getting the type of the for loop variable (line 487)
    for_loop_var_274420 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 487, 4), remove_274419)
    # Assigning a type to the variable 'r' (line 487)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 487, 4), 'r', for_loop_var_274420)
    # SSA begins for a for statement (line 487)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 488):
    
    # Assigning a Call to a Name (line 488):
    
    # Call to replace(...): (line 488)
    # Processing the call arguments (line 488)
    # Getting the type of 'r' (line 488)
    r_274423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 22), 'r', False)
    unicode_274424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 488, 25), 'unicode', u'')
    # Processing the call keyword arguments (line 488)
    kwargs_274425 = {}
    # Getting the type of 's' (line 488)
    s_274421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 12), 's', False)
    # Obtaining the member 'replace' of a type (line 488)
    replace_274422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 488, 12), s_274421, 'replace')
    # Calling replace(args, kwargs) (line 488)
    replace_call_result_274426 = invoke(stypy.reporting.localization.Localization(__file__, 488, 12), replace_274422, *[r_274423, unicode_274424], **kwargs_274425)
    
    # Assigning a type to the variable 's' (line 488)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 488, 8), 's', replace_call_result_274426)
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 's' (line 489)
    s_274427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 11), 's')
    # Assigning a type to the variable 'stypy_return_type' (line 489)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 489, 4), 'stypy_return_type', s_274427)
    
    # ################# End of 'strip_math(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'strip_math' in the type store
    # Getting the type of 'stypy_return_type' (line 483)
    stypy_return_type_274428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_274428)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'strip_math'
    return stypy_return_type_274428

# Assigning a type to the variable 'strip_math' (line 483)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 483, 0), 'strip_math', strip_math)
# Declaration of the 'Bunch' class

class Bunch(object, ):
    unicode_274429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 504, (-1)), 'unicode', u"\n    Often we want to just collect a bunch of stuff together, naming each\n    item of the bunch; a dictionary's OK for that, but a small do- nothing\n    class is even handier, and prettier to use.  Whenever you want to\n    group a few variables::\n\n      >>> point = Bunch(datum=2, squared=4, coord=12)\n      >>> point.datum\n\n      By: Alex Martelli\n      From: https://code.activestate.com/recipes/121294/\n    ")

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 505, 4, False)
        # Assigning a type to the variable 'self' (line 506)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 506, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Bunch.__init__', [], None, 'kwds', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to update(...): (line 506)
        # Processing the call arguments (line 506)
        # Getting the type of 'kwds' (line 506)
        kwds_274433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 29), 'kwds', False)
        # Processing the call keyword arguments (line 506)
        kwargs_274434 = {}
        # Getting the type of 'self' (line 506)
        self_274430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 8), 'self', False)
        # Obtaining the member '__dict__' of a type (line 506)
        dict___274431 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 506, 8), self_274430, '__dict__')
        # Obtaining the member 'update' of a type (line 506)
        update_274432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 506, 8), dict___274431, 'update')
        # Calling update(args, kwargs) (line 506)
        update_call_result_274435 = invoke(stypy.reporting.localization.Localization(__file__, 506, 8), update_274432, *[kwds_274433], **kwargs_274434)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 508, 4, False)
        # Assigning a type to the variable 'self' (line 509)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 509, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Bunch.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        Bunch.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Bunch.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Bunch.stypy__repr__.__dict__.__setitem__('stypy_function_name', 'Bunch.stypy__repr__')
        Bunch.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        Bunch.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Bunch.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Bunch.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Bunch.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Bunch.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Bunch.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Bunch.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        unicode_274436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 509, 15), 'unicode', u'Bunch(%s)')
        
        # Call to join(...): (line 509)
        # Processing the call arguments (line 509)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 510, 12, True)
        # Calculating comprehension expression
        
        # Call to iteritems(...): (line 510)
        # Processing the call arguments (line 510)
        
        # Call to vars(...): (line 510)
        # Processing the call arguments (line 510)
        # Getting the type of 'self' (line 510)
        self_274445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 54), 'self', False)
        # Processing the call keyword arguments (line 510)
        kwargs_274446 = {}
        # Getting the type of 'vars' (line 510)
        vars_274444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 49), 'vars', False)
        # Calling vars(args, kwargs) (line 510)
        vars_call_result_274447 = invoke(stypy.reporting.localization.Localization(__file__, 510, 49), vars_274444, *[self_274445], **kwargs_274446)
        
        # Processing the call keyword arguments (line 510)
        kwargs_274448 = {}
        # Getting the type of 'six' (line 510)
        six_274442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 35), 'six', False)
        # Obtaining the member 'iteritems' of a type (line 510)
        iteritems_274443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 510, 35), six_274442, 'iteritems')
        # Calling iteritems(args, kwargs) (line 510)
        iteritems_call_result_274449 = invoke(stypy.reporting.localization.Localization(__file__, 510, 35), iteritems_274443, *[vars_call_result_274447], **kwargs_274448)
        
        comprehension_274450 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 510, 12), iteritems_call_result_274449)
        # Assigning a type to the variable 'kv' (line 510)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 510, 12), 'kv', comprehension_274450)
        unicode_274439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 510, 12), 'unicode', u'%s=%s')
        # Getting the type of 'kv' (line 510)
        kv_274440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 22), 'kv', False)
        # Applying the binary operator '%' (line 510)
        result_mod_274441 = python_operator(stypy.reporting.localization.Localization(__file__, 510, 12), '%', unicode_274439, kv_274440)
        
        list_274451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 510, 12), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 510, 12), list_274451, result_mod_274441)
        # Processing the call keyword arguments (line 509)
        kwargs_274452 = {}
        unicode_274437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 509, 29), 'unicode', u', ')
        # Obtaining the member 'join' of a type (line 509)
        join_274438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 509, 29), unicode_274437, 'join')
        # Calling join(args, kwargs) (line 509)
        join_call_result_274453 = invoke(stypy.reporting.localization.Localization(__file__, 509, 29), join_274438, *[list_274451], **kwargs_274452)
        
        # Applying the binary operator '%' (line 509)
        result_mod_274454 = python_operator(stypy.reporting.localization.Localization(__file__, 509, 15), '%', unicode_274436, join_call_result_274453)
        
        # Assigning a type to the variable 'stypy_return_type' (line 509)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 509, 8), 'stypy_return_type', result_mod_274454)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 508)
        stypy_return_type_274455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_274455)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_274455


# Assigning a type to the variable 'Bunch' (line 492)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 492, 0), 'Bunch', Bunch)

@norecursion
def unique(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'unique'
    module_type_store = module_type_store.open_function_context('unique', 513, 0, False)
    
    # Passed parameters checking function
    unique.stypy_localization = localization
    unique.stypy_type_of_self = None
    unique.stypy_type_store = module_type_store
    unique.stypy_function_name = 'unique'
    unique.stypy_param_names_list = ['x']
    unique.stypy_varargs_param_name = None
    unique.stypy_kwargs_param_name = None
    unique.stypy_call_defaults = defaults
    unique.stypy_call_varargs = varargs
    unique.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'unique', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'unique', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'unique(...)' code ##################

    unicode_274456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 515, 4), 'unicode', u'Return a list of unique elements of *x*')
    
    # Call to list(...): (line 516)
    # Processing the call arguments (line 516)
    
    # Call to set(...): (line 516)
    # Processing the call arguments (line 516)
    # Getting the type of 'x' (line 516)
    x_274459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 20), 'x', False)
    # Processing the call keyword arguments (line 516)
    kwargs_274460 = {}
    # Getting the type of 'set' (line 516)
    set_274458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 16), 'set', False)
    # Calling set(args, kwargs) (line 516)
    set_call_result_274461 = invoke(stypy.reporting.localization.Localization(__file__, 516, 16), set_274458, *[x_274459], **kwargs_274460)
    
    # Processing the call keyword arguments (line 516)
    kwargs_274462 = {}
    # Getting the type of 'list' (line 516)
    list_274457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 11), 'list', False)
    # Calling list(args, kwargs) (line 516)
    list_call_result_274463 = invoke(stypy.reporting.localization.Localization(__file__, 516, 11), list_274457, *[set_call_result_274461], **kwargs_274462)
    
    # Assigning a type to the variable 'stypy_return_type' (line 516)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 516, 4), 'stypy_return_type', list_call_result_274463)
    
    # ################# End of 'unique(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'unique' in the type store
    # Getting the type of 'stypy_return_type' (line 513)
    stypy_return_type_274464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_274464)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'unique'
    return stypy_return_type_274464

# Assigning a type to the variable 'unique' (line 513)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 513, 0), 'unique', unique)

@norecursion
def iterable(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'iterable'
    module_type_store = module_type_store.open_function_context('iterable', 519, 0, False)
    
    # Passed parameters checking function
    iterable.stypy_localization = localization
    iterable.stypy_type_of_self = None
    iterable.stypy_type_store = module_type_store
    iterable.stypy_function_name = 'iterable'
    iterable.stypy_param_names_list = ['obj']
    iterable.stypy_varargs_param_name = None
    iterable.stypy_kwargs_param_name = None
    iterable.stypy_call_defaults = defaults
    iterable.stypy_call_varargs = varargs
    iterable.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'iterable', ['obj'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'iterable', localization, ['obj'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'iterable(...)' code ##################

    unicode_274465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 520, 4), 'unicode', u'return true if *obj* is iterable')
    
    
    # SSA begins for try-except statement (line 521)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to iter(...): (line 522)
    # Processing the call arguments (line 522)
    # Getting the type of 'obj' (line 522)
    obj_274467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 13), 'obj', False)
    # Processing the call keyword arguments (line 522)
    kwargs_274468 = {}
    # Getting the type of 'iter' (line 522)
    iter_274466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 8), 'iter', False)
    # Calling iter(args, kwargs) (line 522)
    iter_call_result_274469 = invoke(stypy.reporting.localization.Localization(__file__, 522, 8), iter_274466, *[obj_274467], **kwargs_274468)
    
    # SSA branch for the except part of a try statement (line 521)
    # SSA branch for the except 'TypeError' branch of a try statement (line 521)
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'False' (line 524)
    False_274470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 524)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 524, 8), 'stypy_return_type', False_274470)
    # SSA join for try-except statement (line 521)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'True' (line 525)
    True_274471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 11), 'True')
    # Assigning a type to the variable 'stypy_return_type' (line 525)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 525, 4), 'stypy_return_type', True_274471)
    
    # ################# End of 'iterable(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'iterable' in the type store
    # Getting the type of 'stypy_return_type' (line 519)
    stypy_return_type_274472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_274472)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'iterable'
    return stypy_return_type_274472

# Assigning a type to the variable 'iterable' (line 519)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 519, 0), 'iterable', iterable)

@norecursion
def is_string_like(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'is_string_like'
    module_type_store = module_type_store.open_function_context('is_string_like', 528, 0, False)
    
    # Passed parameters checking function
    is_string_like.stypy_localization = localization
    is_string_like.stypy_type_of_self = None
    is_string_like.stypy_type_store = module_type_store
    is_string_like.stypy_function_name = 'is_string_like'
    is_string_like.stypy_param_names_list = ['obj']
    is_string_like.stypy_varargs_param_name = None
    is_string_like.stypy_kwargs_param_name = None
    is_string_like.stypy_call_defaults = defaults
    is_string_like.stypy_call_varargs = varargs
    is_string_like.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'is_string_like', ['obj'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'is_string_like', localization, ['obj'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'is_string_like(...)' code ##################

    unicode_274473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 530, 4), 'unicode', u'Return True if *obj* looks like a string')
    
    # Call to isinstance(...): (line 532)
    # Processing the call arguments (line 532)
    # Getting the type of 'obj' (line 532)
    obj_274475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 22), 'obj', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 532)
    tuple_274476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 532, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 532)
    # Adding element type (line 532)
    # Getting the type of 'six' (line 532)
    six_274477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 28), 'six', False)
    # Obtaining the member 'string_types' of a type (line 532)
    string_types_274478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 532, 28), six_274477, 'string_types')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 532, 28), tuple_274476, string_types_274478)
    # Adding element type (line 532)
    # Getting the type of 'np' (line 532)
    np_274479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 46), 'np', False)
    # Obtaining the member 'str_' of a type (line 532)
    str__274480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 532, 46), np_274479, 'str_')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 532, 28), tuple_274476, str__274480)
    # Adding element type (line 532)
    # Getting the type of 'np' (line 532)
    np_274481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 55), 'np', False)
    # Obtaining the member 'unicode_' of a type (line 532)
    unicode__274482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 532, 55), np_274481, 'unicode_')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 532, 28), tuple_274476, unicode__274482)
    
    # Processing the call keyword arguments (line 532)
    kwargs_274483 = {}
    # Getting the type of 'isinstance' (line 532)
    isinstance_274474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 11), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 532)
    isinstance_call_result_274484 = invoke(stypy.reporting.localization.Localization(__file__, 532, 11), isinstance_274474, *[obj_274475, tuple_274476], **kwargs_274483)
    
    # Assigning a type to the variable 'stypy_return_type' (line 532)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 532, 4), 'stypy_return_type', isinstance_call_result_274484)
    
    # ################# End of 'is_string_like(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'is_string_like' in the type store
    # Getting the type of 'stypy_return_type' (line 528)
    stypy_return_type_274485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_274485)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'is_string_like'
    return stypy_return_type_274485

# Assigning a type to the variable 'is_string_like' (line 528)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 528, 0), 'is_string_like', is_string_like)

@norecursion
def is_sequence_of_strings(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'is_sequence_of_strings'
    module_type_store = module_type_store.open_function_context('is_sequence_of_strings', 535, 0, False)
    
    # Passed parameters checking function
    is_sequence_of_strings.stypy_localization = localization
    is_sequence_of_strings.stypy_type_of_self = None
    is_sequence_of_strings.stypy_type_store = module_type_store
    is_sequence_of_strings.stypy_function_name = 'is_sequence_of_strings'
    is_sequence_of_strings.stypy_param_names_list = ['obj']
    is_sequence_of_strings.stypy_varargs_param_name = None
    is_sequence_of_strings.stypy_kwargs_param_name = None
    is_sequence_of_strings.stypy_call_defaults = defaults
    is_sequence_of_strings.stypy_call_varargs = varargs
    is_sequence_of_strings.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'is_sequence_of_strings', ['obj'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'is_sequence_of_strings', localization, ['obj'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'is_sequence_of_strings(...)' code ##################

    unicode_274486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 537, 4), 'unicode', u'Returns true if *obj* is iterable and contains strings')
    
    
    
    # Call to iterable(...): (line 538)
    # Processing the call arguments (line 538)
    # Getting the type of 'obj' (line 538)
    obj_274488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 20), 'obj', False)
    # Processing the call keyword arguments (line 538)
    kwargs_274489 = {}
    # Getting the type of 'iterable' (line 538)
    iterable_274487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 11), 'iterable', False)
    # Calling iterable(args, kwargs) (line 538)
    iterable_call_result_274490 = invoke(stypy.reporting.localization.Localization(__file__, 538, 11), iterable_274487, *[obj_274488], **kwargs_274489)
    
    # Applying the 'not' unary operator (line 538)
    result_not__274491 = python_operator(stypy.reporting.localization.Localization(__file__, 538, 7), 'not', iterable_call_result_274490)
    
    # Testing the type of an if condition (line 538)
    if_condition_274492 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 538, 4), result_not__274491)
    # Assigning a type to the variable 'if_condition_274492' (line 538)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 538, 4), 'if_condition_274492', if_condition_274492)
    # SSA begins for if statement (line 538)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'False' (line 539)
    False_274493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 539)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 539, 8), 'stypy_return_type', False_274493)
    # SSA join for if statement (line 538)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Call to is_string_like(...): (line 540)
    # Processing the call arguments (line 540)
    # Getting the type of 'obj' (line 540)
    obj_274495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 22), 'obj', False)
    # Processing the call keyword arguments (line 540)
    kwargs_274496 = {}
    # Getting the type of 'is_string_like' (line 540)
    is_string_like_274494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 7), 'is_string_like', False)
    # Calling is_string_like(args, kwargs) (line 540)
    is_string_like_call_result_274497 = invoke(stypy.reporting.localization.Localization(__file__, 540, 7), is_string_like_274494, *[obj_274495], **kwargs_274496)
    
    
    
    # Call to isinstance(...): (line 540)
    # Processing the call arguments (line 540)
    # Getting the type of 'obj' (line 540)
    obj_274499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 46), 'obj', False)
    # Getting the type of 'np' (line 540)
    np_274500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 51), 'np', False)
    # Obtaining the member 'ndarray' of a type (line 540)
    ndarray_274501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 540, 51), np_274500, 'ndarray')
    # Processing the call keyword arguments (line 540)
    kwargs_274502 = {}
    # Getting the type of 'isinstance' (line 540)
    isinstance_274498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 35), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 540)
    isinstance_call_result_274503 = invoke(stypy.reporting.localization.Localization(__file__, 540, 35), isinstance_274498, *[obj_274499, ndarray_274501], **kwargs_274502)
    
    # Applying the 'not' unary operator (line 540)
    result_not__274504 = python_operator(stypy.reporting.localization.Localization(__file__, 540, 31), 'not', isinstance_call_result_274503)
    
    # Applying the binary operator 'and' (line 540)
    result_and_keyword_274505 = python_operator(stypy.reporting.localization.Localization(__file__, 540, 7), 'and', is_string_like_call_result_274497, result_not__274504)
    
    # Testing the type of an if condition (line 540)
    if_condition_274506 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 540, 4), result_and_keyword_274505)
    # Assigning a type to the variable 'if_condition_274506' (line 540)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 540, 4), 'if_condition_274506', if_condition_274506)
    # SSA begins for if statement (line 540)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # SSA begins for try-except statement (line 541)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Attribute to a Name (line 542):
    
    # Assigning a Attribute to a Name (line 542):
    # Getting the type of 'obj' (line 542)
    obj_274507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 18), 'obj')
    # Obtaining the member 'values' of a type (line 542)
    values_274508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 542, 18), obj_274507, 'values')
    # Assigning a type to the variable 'obj' (line 542)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 542, 12), 'obj', values_274508)
    # SSA branch for the except part of a try statement (line 541)
    # SSA branch for the except 'AttributeError' branch of a try statement (line 541)
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'False' (line 545)
    False_274509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 19), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 545)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 545, 12), 'stypy_return_type', False_274509)
    # SSA join for try-except statement (line 541)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 540)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'obj' (line 546)
    obj_274510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 13), 'obj')
    # Testing the type of a for loop iterable (line 546)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 546, 4), obj_274510)
    # Getting the type of the for loop variable (line 546)
    for_loop_var_274511 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 546, 4), obj_274510)
    # Assigning a type to the variable 'o' (line 546)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 546, 4), 'o', for_loop_var_274511)
    # SSA begins for a for statement (line 546)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Call to is_string_like(...): (line 547)
    # Processing the call arguments (line 547)
    # Getting the type of 'o' (line 547)
    o_274513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 30), 'o', False)
    # Processing the call keyword arguments (line 547)
    kwargs_274514 = {}
    # Getting the type of 'is_string_like' (line 547)
    is_string_like_274512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 15), 'is_string_like', False)
    # Calling is_string_like(args, kwargs) (line 547)
    is_string_like_call_result_274515 = invoke(stypy.reporting.localization.Localization(__file__, 547, 15), is_string_like_274512, *[o_274513], **kwargs_274514)
    
    # Applying the 'not' unary operator (line 547)
    result_not__274516 = python_operator(stypy.reporting.localization.Localization(__file__, 547, 11), 'not', is_string_like_call_result_274515)
    
    # Testing the type of an if condition (line 547)
    if_condition_274517 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 547, 8), result_not__274516)
    # Assigning a type to the variable 'if_condition_274517' (line 547)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 547, 8), 'if_condition_274517', if_condition_274517)
    # SSA begins for if statement (line 547)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'False' (line 548)
    False_274518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 19), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 548)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 548, 12), 'stypy_return_type', False_274518)
    # SSA join for if statement (line 547)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'True' (line 549)
    True_274519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 11), 'True')
    # Assigning a type to the variable 'stypy_return_type' (line 549)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 549, 4), 'stypy_return_type', True_274519)
    
    # ################# End of 'is_sequence_of_strings(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'is_sequence_of_strings' in the type store
    # Getting the type of 'stypy_return_type' (line 535)
    stypy_return_type_274520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_274520)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'is_sequence_of_strings'
    return stypy_return_type_274520

# Assigning a type to the variable 'is_sequence_of_strings' (line 535)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 535, 0), 'is_sequence_of_strings', is_sequence_of_strings)

@norecursion
def is_hashable(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'is_hashable'
    module_type_store = module_type_store.open_function_context('is_hashable', 552, 0, False)
    
    # Passed parameters checking function
    is_hashable.stypy_localization = localization
    is_hashable.stypy_type_of_self = None
    is_hashable.stypy_type_store = module_type_store
    is_hashable.stypy_function_name = 'is_hashable'
    is_hashable.stypy_param_names_list = ['obj']
    is_hashable.stypy_varargs_param_name = None
    is_hashable.stypy_kwargs_param_name = None
    is_hashable.stypy_call_defaults = defaults
    is_hashable.stypy_call_varargs = varargs
    is_hashable.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'is_hashable', ['obj'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'is_hashable', localization, ['obj'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'is_hashable(...)' code ##################

    unicode_274521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 553, 4), 'unicode', u'Returns true if *obj* can be hashed')
    
    
    # SSA begins for try-except statement (line 554)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to hash(...): (line 555)
    # Processing the call arguments (line 555)
    # Getting the type of 'obj' (line 555)
    obj_274523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 13), 'obj', False)
    # Processing the call keyword arguments (line 555)
    kwargs_274524 = {}
    # Getting the type of 'hash' (line 555)
    hash_274522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 8), 'hash', False)
    # Calling hash(args, kwargs) (line 555)
    hash_call_result_274525 = invoke(stypy.reporting.localization.Localization(__file__, 555, 8), hash_274522, *[obj_274523], **kwargs_274524)
    
    # SSA branch for the except part of a try statement (line 554)
    # SSA branch for the except 'TypeError' branch of a try statement (line 554)
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'False' (line 557)
    False_274526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 557)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 557, 8), 'stypy_return_type', False_274526)
    # SSA join for try-except statement (line 554)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'True' (line 558)
    True_274527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 11), 'True')
    # Assigning a type to the variable 'stypy_return_type' (line 558)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 558, 4), 'stypy_return_type', True_274527)
    
    # ################# End of 'is_hashable(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'is_hashable' in the type store
    # Getting the type of 'stypy_return_type' (line 552)
    stypy_return_type_274528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_274528)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'is_hashable'
    return stypy_return_type_274528

# Assigning a type to the variable 'is_hashable' (line 552)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 552, 0), 'is_hashable', is_hashable)

@norecursion
def is_writable_file_like(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'is_writable_file_like'
    module_type_store = module_type_store.open_function_context('is_writable_file_like', 561, 0, False)
    
    # Passed parameters checking function
    is_writable_file_like.stypy_localization = localization
    is_writable_file_like.stypy_type_of_self = None
    is_writable_file_like.stypy_type_store = module_type_store
    is_writable_file_like.stypy_function_name = 'is_writable_file_like'
    is_writable_file_like.stypy_param_names_list = ['obj']
    is_writable_file_like.stypy_varargs_param_name = None
    is_writable_file_like.stypy_kwargs_param_name = None
    is_writable_file_like.stypy_call_defaults = defaults
    is_writable_file_like.stypy_call_varargs = varargs
    is_writable_file_like.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'is_writable_file_like', ['obj'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'is_writable_file_like', localization, ['obj'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'is_writable_file_like(...)' code ##################

    unicode_274529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 4), 'unicode', u'return true if *obj* looks like a file object with a *write* method')
    
    # Call to callable(...): (line 563)
    # Processing the call arguments (line 563)
    
    # Call to getattr(...): (line 563)
    # Processing the call arguments (line 563)
    # Getting the type of 'obj' (line 563)
    obj_274532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 28), 'obj', False)
    unicode_274533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 563, 33), 'unicode', u'write')
    # Getting the type of 'None' (line 563)
    None_274534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 42), 'None', False)
    # Processing the call keyword arguments (line 563)
    kwargs_274535 = {}
    # Getting the type of 'getattr' (line 563)
    getattr_274531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 20), 'getattr', False)
    # Calling getattr(args, kwargs) (line 563)
    getattr_call_result_274536 = invoke(stypy.reporting.localization.Localization(__file__, 563, 20), getattr_274531, *[obj_274532, unicode_274533, None_274534], **kwargs_274535)
    
    # Processing the call keyword arguments (line 563)
    kwargs_274537 = {}
    # Getting the type of 'callable' (line 563)
    callable_274530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 11), 'callable', False)
    # Calling callable(args, kwargs) (line 563)
    callable_call_result_274538 = invoke(stypy.reporting.localization.Localization(__file__, 563, 11), callable_274530, *[getattr_call_result_274536], **kwargs_274537)
    
    # Assigning a type to the variable 'stypy_return_type' (line 563)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 563, 4), 'stypy_return_type', callable_call_result_274538)
    
    # ################# End of 'is_writable_file_like(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'is_writable_file_like' in the type store
    # Getting the type of 'stypy_return_type' (line 561)
    stypy_return_type_274539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_274539)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'is_writable_file_like'
    return stypy_return_type_274539

# Assigning a type to the variable 'is_writable_file_like' (line 561)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 561, 0), 'is_writable_file_like', is_writable_file_like)

@norecursion
def file_requires_unicode(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'file_requires_unicode'
    module_type_store = module_type_store.open_function_context('file_requires_unicode', 566, 0, False)
    
    # Passed parameters checking function
    file_requires_unicode.stypy_localization = localization
    file_requires_unicode.stypy_type_of_self = None
    file_requires_unicode.stypy_type_store = module_type_store
    file_requires_unicode.stypy_function_name = 'file_requires_unicode'
    file_requires_unicode.stypy_param_names_list = ['x']
    file_requires_unicode.stypy_varargs_param_name = None
    file_requires_unicode.stypy_kwargs_param_name = None
    file_requires_unicode.stypy_call_defaults = defaults
    file_requires_unicode.stypy_call_varargs = varargs
    file_requires_unicode.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'file_requires_unicode', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'file_requires_unicode', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'file_requires_unicode(...)' code ##################

    unicode_274540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 570, (-1)), 'unicode', u'\n    Returns `True` if the given writable file-like object requires Unicode\n    to be written to it.\n    ')
    
    
    # SSA begins for try-except statement (line 571)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to write(...): (line 572)
    # Processing the call arguments (line 572)
    str_274543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 572, 16), 'str', '')
    # Processing the call keyword arguments (line 572)
    kwargs_274544 = {}
    # Getting the type of 'x' (line 572)
    x_274541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 8), 'x', False)
    # Obtaining the member 'write' of a type (line 572)
    write_274542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 572, 8), x_274541, 'write')
    # Calling write(args, kwargs) (line 572)
    write_call_result_274545 = invoke(stypy.reporting.localization.Localization(__file__, 572, 8), write_274542, *[str_274543], **kwargs_274544)
    
    # SSA branch for the except part of a try statement (line 571)
    # SSA branch for the except 'TypeError' branch of a try statement (line 571)
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'True' (line 574)
    True_274546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 15), 'True')
    # Assigning a type to the variable 'stypy_return_type' (line 574)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 574, 8), 'stypy_return_type', True_274546)
    # SSA branch for the else branch of a try statement (line 571)
    module_type_store.open_ssa_branch('except else')
    # Getting the type of 'False' (line 576)
    False_274547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 576)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 576, 8), 'stypy_return_type', False_274547)
    # SSA join for try-except statement (line 571)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'file_requires_unicode(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'file_requires_unicode' in the type store
    # Getting the type of 'stypy_return_type' (line 566)
    stypy_return_type_274548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_274548)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'file_requires_unicode'
    return stypy_return_type_274548

# Assigning a type to the variable 'file_requires_unicode' (line 566)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 566, 0), 'file_requires_unicode', file_requires_unicode)

@norecursion
def is_scalar(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'is_scalar'
    module_type_store = module_type_store.open_function_context('is_scalar', 579, 0, False)
    
    # Passed parameters checking function
    is_scalar.stypy_localization = localization
    is_scalar.stypy_type_of_self = None
    is_scalar.stypy_type_store = module_type_store
    is_scalar.stypy_function_name = 'is_scalar'
    is_scalar.stypy_param_names_list = ['obj']
    is_scalar.stypy_varargs_param_name = None
    is_scalar.stypy_kwargs_param_name = None
    is_scalar.stypy_call_defaults = defaults
    is_scalar.stypy_call_varargs = varargs
    is_scalar.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'is_scalar', ['obj'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'is_scalar', localization, ['obj'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'is_scalar(...)' code ##################

    unicode_274549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 581, 4), 'unicode', u'return true if *obj* is not string like and is not iterable')
    
    # Evaluating a boolean operation
    
    
    # Call to isinstance(...): (line 582)
    # Processing the call arguments (line 582)
    # Getting the type of 'obj' (line 582)
    obj_274551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 26), 'obj', False)
    # Getting the type of 'six' (line 582)
    six_274552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 31), 'six', False)
    # Obtaining the member 'string_types' of a type (line 582)
    string_types_274553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 582, 31), six_274552, 'string_types')
    # Processing the call keyword arguments (line 582)
    kwargs_274554 = {}
    # Getting the type of 'isinstance' (line 582)
    isinstance_274550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 15), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 582)
    isinstance_call_result_274555 = invoke(stypy.reporting.localization.Localization(__file__, 582, 15), isinstance_274550, *[obj_274551, string_types_274553], **kwargs_274554)
    
    # Applying the 'not' unary operator (line 582)
    result_not__274556 = python_operator(stypy.reporting.localization.Localization(__file__, 582, 11), 'not', isinstance_call_result_274555)
    
    
    
    # Call to iterable(...): (line 582)
    # Processing the call arguments (line 582)
    # Getting the type of 'obj' (line 582)
    obj_274558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 66), 'obj', False)
    # Processing the call keyword arguments (line 582)
    kwargs_274559 = {}
    # Getting the type of 'iterable' (line 582)
    iterable_274557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 57), 'iterable', False)
    # Calling iterable(args, kwargs) (line 582)
    iterable_call_result_274560 = invoke(stypy.reporting.localization.Localization(__file__, 582, 57), iterable_274557, *[obj_274558], **kwargs_274559)
    
    # Applying the 'not' unary operator (line 582)
    result_not__274561 = python_operator(stypy.reporting.localization.Localization(__file__, 582, 53), 'not', iterable_call_result_274560)
    
    # Applying the binary operator 'and' (line 582)
    result_and_keyword_274562 = python_operator(stypy.reporting.localization.Localization(__file__, 582, 11), 'and', result_not__274556, result_not__274561)
    
    # Assigning a type to the variable 'stypy_return_type' (line 582)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 582, 4), 'stypy_return_type', result_and_keyword_274562)
    
    # ################# End of 'is_scalar(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'is_scalar' in the type store
    # Getting the type of 'stypy_return_type' (line 579)
    stypy_return_type_274563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_274563)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'is_scalar'
    return stypy_return_type_274563

# Assigning a type to the variable 'is_scalar' (line 579)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 579, 0), 'is_scalar', is_scalar)

@norecursion
def is_numlike(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'is_numlike'
    module_type_store = module_type_store.open_function_context('is_numlike', 585, 0, False)
    
    # Passed parameters checking function
    is_numlike.stypy_localization = localization
    is_numlike.stypy_type_of_self = None
    is_numlike.stypy_type_store = module_type_store
    is_numlike.stypy_function_name = 'is_numlike'
    is_numlike.stypy_param_names_list = ['obj']
    is_numlike.stypy_varargs_param_name = None
    is_numlike.stypy_kwargs_param_name = None
    is_numlike.stypy_call_defaults = defaults
    is_numlike.stypy_call_varargs = varargs
    is_numlike.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'is_numlike', ['obj'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'is_numlike', localization, ['obj'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'is_numlike(...)' code ##################

    unicode_274564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 586, 4), 'unicode', u'return true if *obj* looks like a number')
    
    # Call to isinstance(...): (line 587)
    # Processing the call arguments (line 587)
    # Getting the type of 'obj' (line 587)
    obj_274566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 22), 'obj', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 587)
    tuple_274567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 587, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 587)
    # Adding element type (line 587)
    # Getting the type of 'numbers' (line 587)
    numbers_274568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 28), 'numbers', False)
    # Obtaining the member 'Number' of a type (line 587)
    Number_274569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 587, 28), numbers_274568, 'Number')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 587, 28), tuple_274567, Number_274569)
    # Adding element type (line 587)
    # Getting the type of 'np' (line 587)
    np_274570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 44), 'np', False)
    # Obtaining the member 'number' of a type (line 587)
    number_274571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 587, 44), np_274570, 'number')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 587, 28), tuple_274567, number_274571)
    
    # Processing the call keyword arguments (line 587)
    kwargs_274572 = {}
    # Getting the type of 'isinstance' (line 587)
    isinstance_274565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 11), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 587)
    isinstance_call_result_274573 = invoke(stypy.reporting.localization.Localization(__file__, 587, 11), isinstance_274565, *[obj_274566, tuple_274567], **kwargs_274572)
    
    # Assigning a type to the variable 'stypy_return_type' (line 587)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 587, 4), 'stypy_return_type', isinstance_call_result_274573)
    
    # ################# End of 'is_numlike(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'is_numlike' in the type store
    # Getting the type of 'stypy_return_type' (line 585)
    stypy_return_type_274574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_274574)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'is_numlike'
    return stypy_return_type_274574

# Assigning a type to the variable 'is_numlike' (line 585)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 585, 0), 'is_numlike', is_numlike)

@norecursion
def to_filehandle(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    unicode_274575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 590, 30), 'unicode', u'rU')
    # Getting the type of 'False' (line 590)
    False_274576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 50), 'False')
    defaults = [unicode_274575, False_274576]
    # Create a new context for function 'to_filehandle'
    module_type_store = module_type_store.open_function_context('to_filehandle', 590, 0, False)
    
    # Passed parameters checking function
    to_filehandle.stypy_localization = localization
    to_filehandle.stypy_type_of_self = None
    to_filehandle.stypy_type_store = module_type_store
    to_filehandle.stypy_function_name = 'to_filehandle'
    to_filehandle.stypy_param_names_list = ['fname', 'flag', 'return_opened']
    to_filehandle.stypy_varargs_param_name = None
    to_filehandle.stypy_kwargs_param_name = None
    to_filehandle.stypy_call_defaults = defaults
    to_filehandle.stypy_call_varargs = varargs
    to_filehandle.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'to_filehandle', ['fname', 'flag', 'return_opened'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'to_filehandle', localization, ['fname', 'flag', 'return_opened'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'to_filehandle(...)' code ##################

    unicode_274577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 595, (-1)), 'unicode', u'\n    *fname* can be a filename or a file handle.  Support for gzipped\n    files is automatic, if the filename ends in .gz.  *flag* is a\n    read/write flag for :func:`file`\n    ')
    
    
    # Call to isinstance(...): (line 596)
    # Processing the call arguments (line 596)
    # Getting the type of 'fname' (line 596)
    fname_274579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 18), 'fname', False)
    # Getting the type of 'six' (line 596)
    six_274580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 25), 'six', False)
    # Obtaining the member 'string_types' of a type (line 596)
    string_types_274581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 596, 25), six_274580, 'string_types')
    # Processing the call keyword arguments (line 596)
    kwargs_274582 = {}
    # Getting the type of 'isinstance' (line 596)
    isinstance_274578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 596)
    isinstance_call_result_274583 = invoke(stypy.reporting.localization.Localization(__file__, 596, 7), isinstance_274578, *[fname_274579, string_types_274581], **kwargs_274582)
    
    # Testing the type of an if condition (line 596)
    if_condition_274584 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 596, 4), isinstance_call_result_274583)
    # Assigning a type to the variable 'if_condition_274584' (line 596)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 596, 4), 'if_condition_274584', if_condition_274584)
    # SSA begins for if statement (line 596)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to endswith(...): (line 597)
    # Processing the call arguments (line 597)
    unicode_274587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 597, 26), 'unicode', u'.gz')
    # Processing the call keyword arguments (line 597)
    kwargs_274588 = {}
    # Getting the type of 'fname' (line 597)
    fname_274585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 11), 'fname', False)
    # Obtaining the member 'endswith' of a type (line 597)
    endswith_274586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 597, 11), fname_274585, 'endswith')
    # Calling endswith(args, kwargs) (line 597)
    endswith_call_result_274589 = invoke(stypy.reporting.localization.Localization(__file__, 597, 11), endswith_274586, *[unicode_274587], **kwargs_274588)
    
    # Testing the type of an if condition (line 597)
    if_condition_274590 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 597, 8), endswith_call_result_274589)
    # Assigning a type to the variable 'if_condition_274590' (line 597)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 597, 8), 'if_condition_274590', if_condition_274590)
    # SSA begins for if statement (line 597)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 599):
    
    # Assigning a Call to a Name (line 599):
    
    # Call to replace(...): (line 599)
    # Processing the call arguments (line 599)
    unicode_274593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 599, 32), 'unicode', u'U')
    unicode_274594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 599, 37), 'unicode', u'')
    # Processing the call keyword arguments (line 599)
    kwargs_274595 = {}
    # Getting the type of 'flag' (line 599)
    flag_274591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 19), 'flag', False)
    # Obtaining the member 'replace' of a type (line 599)
    replace_274592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 599, 19), flag_274591, 'replace')
    # Calling replace(args, kwargs) (line 599)
    replace_call_result_274596 = invoke(stypy.reporting.localization.Localization(__file__, 599, 19), replace_274592, *[unicode_274593, unicode_274594], **kwargs_274595)
    
    # Assigning a type to the variable 'flag' (line 599)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 599, 12), 'flag', replace_call_result_274596)
    
    # Assigning a Call to a Name (line 600):
    
    # Assigning a Call to a Name (line 600):
    
    # Call to open(...): (line 600)
    # Processing the call arguments (line 600)
    # Getting the type of 'fname' (line 600)
    fname_274599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 27), 'fname', False)
    # Getting the type of 'flag' (line 600)
    flag_274600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 34), 'flag', False)
    # Processing the call keyword arguments (line 600)
    kwargs_274601 = {}
    # Getting the type of 'gzip' (line 600)
    gzip_274597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 17), 'gzip', False)
    # Obtaining the member 'open' of a type (line 600)
    open_274598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 600, 17), gzip_274597, 'open')
    # Calling open(args, kwargs) (line 600)
    open_call_result_274602 = invoke(stypy.reporting.localization.Localization(__file__, 600, 17), open_274598, *[fname_274599, flag_274600], **kwargs_274601)
    
    # Assigning a type to the variable 'fh' (line 600)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 600, 12), 'fh', open_call_result_274602)
    # SSA branch for the else part of an if statement (line 597)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to endswith(...): (line 601)
    # Processing the call arguments (line 601)
    unicode_274605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 601, 28), 'unicode', u'.bz2')
    # Processing the call keyword arguments (line 601)
    kwargs_274606 = {}
    # Getting the type of 'fname' (line 601)
    fname_274603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 13), 'fname', False)
    # Obtaining the member 'endswith' of a type (line 601)
    endswith_274604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 601, 13), fname_274603, 'endswith')
    # Calling endswith(args, kwargs) (line 601)
    endswith_call_result_274607 = invoke(stypy.reporting.localization.Localization(__file__, 601, 13), endswith_274604, *[unicode_274605], **kwargs_274606)
    
    # Testing the type of an if condition (line 601)
    if_condition_274608 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 601, 13), endswith_call_result_274607)
    # Assigning a type to the variable 'if_condition_274608' (line 601)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 601, 13), 'if_condition_274608', if_condition_274608)
    # SSA begins for if statement (line 601)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 603):
    
    # Assigning a Call to a Name (line 603):
    
    # Call to replace(...): (line 603)
    # Processing the call arguments (line 603)
    unicode_274611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 32), 'unicode', u'U')
    unicode_274612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 37), 'unicode', u'')
    # Processing the call keyword arguments (line 603)
    kwargs_274613 = {}
    # Getting the type of 'flag' (line 603)
    flag_274609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 19), 'flag', False)
    # Obtaining the member 'replace' of a type (line 603)
    replace_274610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 603, 19), flag_274609, 'replace')
    # Calling replace(args, kwargs) (line 603)
    replace_call_result_274614 = invoke(stypy.reporting.localization.Localization(__file__, 603, 19), replace_274610, *[unicode_274611, unicode_274612], **kwargs_274613)
    
    # Assigning a type to the variable 'flag' (line 603)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 603, 12), 'flag', replace_call_result_274614)
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 604, 12))
    
    # 'import bz2' statement (line 604)
    import bz2

    import_module(stypy.reporting.localization.Localization(__file__, 604, 12), 'bz2', bz2, module_type_store)
    
    
    # Assigning a Call to a Name (line 605):
    
    # Assigning a Call to a Name (line 605):
    
    # Call to BZ2File(...): (line 605)
    # Processing the call arguments (line 605)
    # Getting the type of 'fname' (line 605)
    fname_274617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 29), 'fname', False)
    # Getting the type of 'flag' (line 605)
    flag_274618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 36), 'flag', False)
    # Processing the call keyword arguments (line 605)
    kwargs_274619 = {}
    # Getting the type of 'bz2' (line 605)
    bz2_274615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 17), 'bz2', False)
    # Obtaining the member 'BZ2File' of a type (line 605)
    BZ2File_274616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 17), bz2_274615, 'BZ2File')
    # Calling BZ2File(args, kwargs) (line 605)
    BZ2File_call_result_274620 = invoke(stypy.reporting.localization.Localization(__file__, 605, 17), BZ2File_274616, *[fname_274617, flag_274618], **kwargs_274619)
    
    # Assigning a type to the variable 'fh' (line 605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 605, 12), 'fh', BZ2File_call_result_274620)
    # SSA branch for the else part of an if statement (line 601)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 607):
    
    # Assigning a Call to a Name (line 607):
    
    # Call to open(...): (line 607)
    # Processing the call arguments (line 607)
    # Getting the type of 'fname' (line 607)
    fname_274622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 22), 'fname', False)
    # Getting the type of 'flag' (line 607)
    flag_274623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 29), 'flag', False)
    # Processing the call keyword arguments (line 607)
    kwargs_274624 = {}
    # Getting the type of 'open' (line 607)
    open_274621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 17), 'open', False)
    # Calling open(args, kwargs) (line 607)
    open_call_result_274625 = invoke(stypy.reporting.localization.Localization(__file__, 607, 17), open_274621, *[fname_274622, flag_274623], **kwargs_274624)
    
    # Assigning a type to the variable 'fh' (line 607)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 607, 12), 'fh', open_call_result_274625)
    # SSA join for if statement (line 601)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 597)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 608):
    
    # Assigning a Name to a Name (line 608):
    # Getting the type of 'True' (line 608)
    True_274626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 17), 'True')
    # Assigning a type to the variable 'opened' (line 608)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 608, 8), 'opened', True_274626)
    # SSA branch for the else part of an if statement (line 596)
    module_type_store.open_ssa_branch('else')
    
    # Type idiom detected: calculating its left and rigth part (line 609)
    unicode_274627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 609, 24), 'unicode', u'seek')
    # Getting the type of 'fname' (line 609)
    fname_274628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 17), 'fname')
    
    (may_be_274629, more_types_in_union_274630) = may_provide_member(unicode_274627, fname_274628)

    if may_be_274629:

        if more_types_in_union_274630:
            # Runtime conditional SSA (line 609)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'fname' (line 609)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 609, 9), 'fname', remove_not_member_provider_from_union(fname_274628, u'seek'))
        
        # Assigning a Name to a Name (line 610):
        
        # Assigning a Name to a Name (line 610):
        # Getting the type of 'fname' (line 610)
        fname_274631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 13), 'fname')
        # Assigning a type to the variable 'fh' (line 610)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 610, 8), 'fh', fname_274631)
        
        # Assigning a Name to a Name (line 611):
        
        # Assigning a Name to a Name (line 611):
        # Getting the type of 'False' (line 611)
        False_274632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 17), 'False')
        # Assigning a type to the variable 'opened' (line 611)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 611, 8), 'opened', False_274632)

        if more_types_in_union_274630:
            # Runtime conditional SSA for else branch (line 609)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_274629) or more_types_in_union_274630):
        # Assigning a type to the variable 'fname' (line 609)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 609, 9), 'fname', remove_member_provider_from_union(fname_274628, u'seek'))
        
        # Call to ValueError(...): (line 613)
        # Processing the call arguments (line 613)
        unicode_274634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 613, 25), 'unicode', u'fname must be a string or file handle')
        # Processing the call keyword arguments (line 613)
        kwargs_274635 = {}
        # Getting the type of 'ValueError' (line 613)
        ValueError_274633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 14), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 613)
        ValueError_call_result_274636 = invoke(stypy.reporting.localization.Localization(__file__, 613, 14), ValueError_274633, *[unicode_274634], **kwargs_274635)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 613, 8), ValueError_call_result_274636, 'raise parameter', BaseException)

        if (may_be_274629 and more_types_in_union_274630):
            # SSA join for if statement (line 609)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for if statement (line 596)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'return_opened' (line 614)
    return_opened_274637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 7), 'return_opened')
    # Testing the type of an if condition (line 614)
    if_condition_274638 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 614, 4), return_opened_274637)
    # Assigning a type to the variable 'if_condition_274638' (line 614)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 614, 4), 'if_condition_274638', if_condition_274638)
    # SSA begins for if statement (line 614)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 615)
    tuple_274639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 615, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 615)
    # Adding element type (line 615)
    # Getting the type of 'fh' (line 615)
    fh_274640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 15), 'fh')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 615, 15), tuple_274639, fh_274640)
    # Adding element type (line 615)
    # Getting the type of 'opened' (line 615)
    opened_274641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 19), 'opened')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 615, 15), tuple_274639, opened_274641)
    
    # Assigning a type to the variable 'stypy_return_type' (line 615)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 615, 8), 'stypy_return_type', tuple_274639)
    # SSA join for if statement (line 614)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'fh' (line 616)
    fh_274642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 11), 'fh')
    # Assigning a type to the variable 'stypy_return_type' (line 616)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 616, 4), 'stypy_return_type', fh_274642)
    
    # ################# End of 'to_filehandle(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'to_filehandle' in the type store
    # Getting the type of 'stypy_return_type' (line 590)
    stypy_return_type_274643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_274643)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'to_filehandle'
    return stypy_return_type_274643

# Assigning a type to the variable 'to_filehandle' (line 590)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 590, 0), 'to_filehandle', to_filehandle)

@norecursion
def is_scalar_or_string(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'is_scalar_or_string'
    module_type_store = module_type_store.open_function_context('is_scalar_or_string', 619, 0, False)
    
    # Passed parameters checking function
    is_scalar_or_string.stypy_localization = localization
    is_scalar_or_string.stypy_type_of_self = None
    is_scalar_or_string.stypy_type_store = module_type_store
    is_scalar_or_string.stypy_function_name = 'is_scalar_or_string'
    is_scalar_or_string.stypy_param_names_list = ['val']
    is_scalar_or_string.stypy_varargs_param_name = None
    is_scalar_or_string.stypy_kwargs_param_name = None
    is_scalar_or_string.stypy_call_defaults = defaults
    is_scalar_or_string.stypy_call_varargs = varargs
    is_scalar_or_string.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'is_scalar_or_string', ['val'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'is_scalar_or_string', localization, ['val'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'is_scalar_or_string(...)' code ##################

    unicode_274644 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 620, 4), 'unicode', u'Return whether the given object is a scalar or string like.')
    
    # Evaluating a boolean operation
    
    # Call to isinstance(...): (line 621)
    # Processing the call arguments (line 621)
    # Getting the type of 'val' (line 621)
    val_274646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 22), 'val', False)
    # Getting the type of 'six' (line 621)
    six_274647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 27), 'six', False)
    # Obtaining the member 'string_types' of a type (line 621)
    string_types_274648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 621, 27), six_274647, 'string_types')
    # Processing the call keyword arguments (line 621)
    kwargs_274649 = {}
    # Getting the type of 'isinstance' (line 621)
    isinstance_274645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 11), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 621)
    isinstance_call_result_274650 = invoke(stypy.reporting.localization.Localization(__file__, 621, 11), isinstance_274645, *[val_274646, string_types_274648], **kwargs_274649)
    
    
    
    # Call to iterable(...): (line 621)
    # Processing the call arguments (line 621)
    # Getting the type of 'val' (line 621)
    val_274652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 61), 'val', False)
    # Processing the call keyword arguments (line 621)
    kwargs_274653 = {}
    # Getting the type of 'iterable' (line 621)
    iterable_274651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 52), 'iterable', False)
    # Calling iterable(args, kwargs) (line 621)
    iterable_call_result_274654 = invoke(stypy.reporting.localization.Localization(__file__, 621, 52), iterable_274651, *[val_274652], **kwargs_274653)
    
    # Applying the 'not' unary operator (line 621)
    result_not__274655 = python_operator(stypy.reporting.localization.Localization(__file__, 621, 48), 'not', iterable_call_result_274654)
    
    # Applying the binary operator 'or' (line 621)
    result_or_keyword_274656 = python_operator(stypy.reporting.localization.Localization(__file__, 621, 11), 'or', isinstance_call_result_274650, result_not__274655)
    
    # Assigning a type to the variable 'stypy_return_type' (line 621)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 621, 4), 'stypy_return_type', result_or_keyword_274656)
    
    # ################# End of 'is_scalar_or_string(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'is_scalar_or_string' in the type store
    # Getting the type of 'stypy_return_type' (line 619)
    stypy_return_type_274657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_274657)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'is_scalar_or_string'
    return stypy_return_type_274657

# Assigning a type to the variable 'is_scalar_or_string' (line 619)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 619, 0), 'is_scalar_or_string', is_scalar_or_string)

@norecursion
def _string_to_bool(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_string_to_bool'
    module_type_store = module_type_store.open_function_context('_string_to_bool', 624, 0, False)
    
    # Passed parameters checking function
    _string_to_bool.stypy_localization = localization
    _string_to_bool.stypy_type_of_self = None
    _string_to_bool.stypy_type_store = module_type_store
    _string_to_bool.stypy_function_name = '_string_to_bool'
    _string_to_bool.stypy_param_names_list = ['s']
    _string_to_bool.stypy_varargs_param_name = None
    _string_to_bool.stypy_kwargs_param_name = None
    _string_to_bool.stypy_call_defaults = defaults
    _string_to_bool.stypy_call_varargs = varargs
    _string_to_bool.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_string_to_bool', ['s'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_string_to_bool', localization, ['s'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_string_to_bool(...)' code ##################

    unicode_274658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 625, 4), 'unicode', u'Parses the string argument as a boolean')
    
    
    
    # Call to isinstance(...): (line 626)
    # Processing the call arguments (line 626)
    # Getting the type of 's' (line 626)
    s_274660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 22), 's', False)
    # Getting the type of 'six' (line 626)
    six_274661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 25), 'six', False)
    # Obtaining the member 'string_types' of a type (line 626)
    string_types_274662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 25), six_274661, 'string_types')
    # Processing the call keyword arguments (line 626)
    kwargs_274663 = {}
    # Getting the type of 'isinstance' (line 626)
    isinstance_274659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 11), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 626)
    isinstance_call_result_274664 = invoke(stypy.reporting.localization.Localization(__file__, 626, 11), isinstance_274659, *[s_274660, string_types_274662], **kwargs_274663)
    
    # Applying the 'not' unary operator (line 626)
    result_not__274665 = python_operator(stypy.reporting.localization.Localization(__file__, 626, 7), 'not', isinstance_call_result_274664)
    
    # Testing the type of an if condition (line 626)
    if_condition_274666 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 626, 4), result_not__274665)
    # Assigning a type to the variable 'if_condition_274666' (line 626)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 626, 4), 'if_condition_274666', if_condition_274666)
    # SSA begins for if statement (line 626)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to bool(...): (line 627)
    # Processing the call arguments (line 627)
    # Getting the type of 's' (line 627)
    s_274668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 20), 's', False)
    # Processing the call keyword arguments (line 627)
    kwargs_274669 = {}
    # Getting the type of 'bool' (line 627)
    bool_274667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 15), 'bool', False)
    # Calling bool(args, kwargs) (line 627)
    bool_call_result_274670 = invoke(stypy.reporting.localization.Localization(__file__, 627, 15), bool_274667, *[s_274668], **kwargs_274669)
    
    # Assigning a type to the variable 'stypy_return_type' (line 627)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 627, 8), 'stypy_return_type', bool_call_result_274670)
    # SSA join for if statement (line 626)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to lower(...): (line 628)
    # Processing the call keyword arguments (line 628)
    kwargs_274673 = {}
    # Getting the type of 's' (line 628)
    s_274671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 7), 's', False)
    # Obtaining the member 'lower' of a type (line 628)
    lower_274672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 7), s_274671, 'lower')
    # Calling lower(args, kwargs) (line 628)
    lower_call_result_274674 = invoke(stypy.reporting.localization.Localization(__file__, 628, 7), lower_274672, *[], **kwargs_274673)
    
    
    # Obtaining an instance of the builtin type 'list' (line 628)
    list_274675 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 628, 20), 'list')
    # Adding type elements to the builtin type 'list' instance (line 628)
    # Adding element type (line 628)
    unicode_274676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 628, 21), 'unicode', u'on')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 628, 20), list_274675, unicode_274676)
    # Adding element type (line 628)
    unicode_274677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 628, 27), 'unicode', u'true')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 628, 20), list_274675, unicode_274677)
    
    # Applying the binary operator 'in' (line 628)
    result_contains_274678 = python_operator(stypy.reporting.localization.Localization(__file__, 628, 7), 'in', lower_call_result_274674, list_274675)
    
    # Testing the type of an if condition (line 628)
    if_condition_274679 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 628, 4), result_contains_274678)
    # Assigning a type to the variable 'if_condition_274679' (line 628)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 4), 'if_condition_274679', if_condition_274679)
    # SSA begins for if statement (line 628)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'True' (line 629)
    True_274680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 15), 'True')
    # Assigning a type to the variable 'stypy_return_type' (line 629)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 629, 8), 'stypy_return_type', True_274680)
    # SSA join for if statement (line 628)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to lower(...): (line 630)
    # Processing the call keyword arguments (line 630)
    kwargs_274683 = {}
    # Getting the type of 's' (line 630)
    s_274681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 7), 's', False)
    # Obtaining the member 'lower' of a type (line 630)
    lower_274682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 630, 7), s_274681, 'lower')
    # Calling lower(args, kwargs) (line 630)
    lower_call_result_274684 = invoke(stypy.reporting.localization.Localization(__file__, 630, 7), lower_274682, *[], **kwargs_274683)
    
    
    # Obtaining an instance of the builtin type 'list' (line 630)
    list_274685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 630, 20), 'list')
    # Adding type elements to the builtin type 'list' instance (line 630)
    # Adding element type (line 630)
    unicode_274686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 630, 21), 'unicode', u'off')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 630, 20), list_274685, unicode_274686)
    # Adding element type (line 630)
    unicode_274687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 630, 28), 'unicode', u'false')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 630, 20), list_274685, unicode_274687)
    
    # Applying the binary operator 'in' (line 630)
    result_contains_274688 = python_operator(stypy.reporting.localization.Localization(__file__, 630, 7), 'in', lower_call_result_274684, list_274685)
    
    # Testing the type of an if condition (line 630)
    if_condition_274689 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 630, 4), result_contains_274688)
    # Assigning a type to the variable 'if_condition_274689' (line 630)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 630, 4), 'if_condition_274689', if_condition_274689)
    # SSA begins for if statement (line 630)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'False' (line 631)
    False_274690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 631)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 631, 8), 'stypy_return_type', False_274690)
    # SSA join for if statement (line 630)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to ValueError(...): (line 632)
    # Processing the call arguments (line 632)
    unicode_274692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 632, 21), 'unicode', u'String "%s" must be one of: "on", "off", "true", or "false"')
    # Getting the type of 's' (line 633)
    s_274693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 633, 57), 's', False)
    # Applying the binary operator '%' (line 632)
    result_mod_274694 = python_operator(stypy.reporting.localization.Localization(__file__, 632, 21), '%', unicode_274692, s_274693)
    
    # Processing the call keyword arguments (line 632)
    kwargs_274695 = {}
    # Getting the type of 'ValueError' (line 632)
    ValueError_274691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 10), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 632)
    ValueError_call_result_274696 = invoke(stypy.reporting.localization.Localization(__file__, 632, 10), ValueError_274691, *[result_mod_274694], **kwargs_274695)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 632, 4), ValueError_call_result_274696, 'raise parameter', BaseException)
    
    # ################# End of '_string_to_bool(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_string_to_bool' in the type store
    # Getting the type of 'stypy_return_type' (line 624)
    stypy_return_type_274697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_274697)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_string_to_bool'
    return stypy_return_type_274697

# Assigning a type to the variable '_string_to_bool' (line 624)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 624, 0), '_string_to_bool', _string_to_bool)

@norecursion
def get_sample_data(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 636)
    True_274698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 37), 'True')
    defaults = [True_274698]
    # Create a new context for function 'get_sample_data'
    module_type_store = module_type_store.open_function_context('get_sample_data', 636, 0, False)
    
    # Passed parameters checking function
    get_sample_data.stypy_localization = localization
    get_sample_data.stypy_type_of_self = None
    get_sample_data.stypy_type_store = module_type_store
    get_sample_data.stypy_function_name = 'get_sample_data'
    get_sample_data.stypy_param_names_list = ['fname', 'asfileobj']
    get_sample_data.stypy_varargs_param_name = None
    get_sample_data.stypy_kwargs_param_name = None
    get_sample_data.stypy_call_defaults = defaults
    get_sample_data.stypy_call_varargs = varargs
    get_sample_data.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_sample_data', ['fname', 'asfileobj'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_sample_data', localization, ['fname', 'asfileobj'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_sample_data(...)' code ##################

    unicode_274699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 648, (-1)), 'unicode', u"\n    Return a sample data file.  *fname* is a path relative to the\n    `mpl-data/sample_data` directory.  If *asfileobj* is `True`\n    return a file object, otherwise just a file path.\n\n    Set the rc parameter examples.directory to the directory where we should\n    look, if sample_data files are stored in a location different than\n    default (which is 'mpl-data/sample_data` at the same level of 'matplotlib`\n    Python module files).\n\n    If the filename ends in .gz, the file is implicitly ungzipped.\n    ")
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 649, 4))
    
    # 'import matplotlib' statement (line 649)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/cbook/')
    import_274700 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 649, 4), 'matplotlib')

    if (type(import_274700) is not StypyTypeError):

        if (import_274700 != 'pyd_module'):
            __import__(import_274700)
            sys_modules_274701 = sys.modules[import_274700]
            import_module(stypy.reporting.localization.Localization(__file__, 649, 4), 'matplotlib', sys_modules_274701.module_type_store, module_type_store)
        else:
            import matplotlib

            import_module(stypy.reporting.localization.Localization(__file__, 649, 4), 'matplotlib', matplotlib, module_type_store)

    else:
        # Assigning a type to the variable 'matplotlib' (line 649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 649, 4), 'matplotlib', import_274700)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/cbook/')
    
    
    
    # Obtaining the type of the subscript
    unicode_274702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 651, 27), 'unicode', u'examples.directory')
    # Getting the type of 'matplotlib' (line 651)
    matplotlib_274703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 7), 'matplotlib')
    # Obtaining the member 'rcParams' of a type (line 651)
    rcParams_274704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 651, 7), matplotlib_274703, 'rcParams')
    # Obtaining the member '__getitem__' of a type (line 651)
    getitem___274705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 651, 7), rcParams_274704, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 651)
    subscript_call_result_274706 = invoke(stypy.reporting.localization.Localization(__file__, 651, 7), getitem___274705, unicode_274702)
    
    # Testing the type of an if condition (line 651)
    if_condition_274707 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 651, 4), subscript_call_result_274706)
    # Assigning a type to the variable 'if_condition_274707' (line 651)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 651, 4), 'if_condition_274707', if_condition_274707)
    # SSA begins for if statement (line 651)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 652):
    
    # Assigning a Subscript to a Name (line 652):
    
    # Obtaining the type of the subscript
    unicode_274708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 652, 35), 'unicode', u'examples.directory')
    # Getting the type of 'matplotlib' (line 652)
    matplotlib_274709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 15), 'matplotlib')
    # Obtaining the member 'rcParams' of a type (line 652)
    rcParams_274710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 652, 15), matplotlib_274709, 'rcParams')
    # Obtaining the member '__getitem__' of a type (line 652)
    getitem___274711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 652, 15), rcParams_274710, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 652)
    subscript_call_result_274712 = invoke(stypy.reporting.localization.Localization(__file__, 652, 15), getitem___274711, unicode_274708)
    
    # Assigning a type to the variable 'root' (line 652)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 652, 8), 'root', subscript_call_result_274712)
    # SSA branch for the else part of an if statement (line 651)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 654):
    
    # Assigning a Call to a Name (line 654):
    
    # Call to join(...): (line 654)
    # Processing the call arguments (line 654)
    
    # Call to _get_data_path(...): (line 654)
    # Processing the call keyword arguments (line 654)
    kwargs_274718 = {}
    # Getting the type of 'matplotlib' (line 654)
    matplotlib_274716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 28), 'matplotlib', False)
    # Obtaining the member '_get_data_path' of a type (line 654)
    _get_data_path_274717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 654, 28), matplotlib_274716, '_get_data_path')
    # Calling _get_data_path(args, kwargs) (line 654)
    _get_data_path_call_result_274719 = invoke(stypy.reporting.localization.Localization(__file__, 654, 28), _get_data_path_274717, *[], **kwargs_274718)
    
    unicode_274720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 654, 57), 'unicode', u'sample_data')
    # Processing the call keyword arguments (line 654)
    kwargs_274721 = {}
    # Getting the type of 'os' (line 654)
    os_274713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 15), 'os', False)
    # Obtaining the member 'path' of a type (line 654)
    path_274714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 654, 15), os_274713, 'path')
    # Obtaining the member 'join' of a type (line 654)
    join_274715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 654, 15), path_274714, 'join')
    # Calling join(args, kwargs) (line 654)
    join_call_result_274722 = invoke(stypy.reporting.localization.Localization(__file__, 654, 15), join_274715, *[_get_data_path_call_result_274719, unicode_274720], **kwargs_274721)
    
    # Assigning a type to the variable 'root' (line 654)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 654, 8), 'root', join_call_result_274722)
    # SSA join for if statement (line 651)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 655):
    
    # Assigning a Call to a Name (line 655):
    
    # Call to join(...): (line 655)
    # Processing the call arguments (line 655)
    # Getting the type of 'root' (line 655)
    root_274726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 655, 24), 'root', False)
    # Getting the type of 'fname' (line 655)
    fname_274727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 655, 30), 'fname', False)
    # Processing the call keyword arguments (line 655)
    kwargs_274728 = {}
    # Getting the type of 'os' (line 655)
    os_274723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 655, 11), 'os', False)
    # Obtaining the member 'path' of a type (line 655)
    path_274724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 655, 11), os_274723, 'path')
    # Obtaining the member 'join' of a type (line 655)
    join_274725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 655, 11), path_274724, 'join')
    # Calling join(args, kwargs) (line 655)
    join_call_result_274729 = invoke(stypy.reporting.localization.Localization(__file__, 655, 11), join_274725, *[root_274726, fname_274727], **kwargs_274728)
    
    # Assigning a type to the variable 'path' (line 655)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 655, 4), 'path', join_call_result_274729)
    
    # Getting the type of 'asfileobj' (line 657)
    asfileobj_274730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 7), 'asfileobj')
    # Testing the type of an if condition (line 657)
    if_condition_274731 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 657, 4), asfileobj_274730)
    # Assigning a type to the variable 'if_condition_274731' (line 657)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 657, 4), 'if_condition_274731', if_condition_274731)
    # SSA begins for if statement (line 657)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    
    # Call to lower(...): (line 658)
    # Processing the call keyword arguments (line 658)
    kwargs_274742 = {}
    
    # Obtaining the type of the subscript
    int_274732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 658, 36), 'int')
    
    # Call to splitext(...): (line 658)
    # Processing the call arguments (line 658)
    # Getting the type of 'fname' (line 658)
    fname_274736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 29), 'fname', False)
    # Processing the call keyword arguments (line 658)
    kwargs_274737 = {}
    # Getting the type of 'os' (line 658)
    os_274733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 12), 'os', False)
    # Obtaining the member 'path' of a type (line 658)
    path_274734 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 658, 12), os_274733, 'path')
    # Obtaining the member 'splitext' of a type (line 658)
    splitext_274735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 658, 12), path_274734, 'splitext')
    # Calling splitext(args, kwargs) (line 658)
    splitext_call_result_274738 = invoke(stypy.reporting.localization.Localization(__file__, 658, 12), splitext_274735, *[fname_274736], **kwargs_274737)
    
    # Obtaining the member '__getitem__' of a type (line 658)
    getitem___274739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 658, 12), splitext_call_result_274738, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 658)
    subscript_call_result_274740 = invoke(stypy.reporting.localization.Localization(__file__, 658, 12), getitem___274739, int_274732)
    
    # Obtaining the member 'lower' of a type (line 658)
    lower_274741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 658, 12), subscript_call_result_274740, 'lower')
    # Calling lower(args, kwargs) (line 658)
    lower_call_result_274743 = invoke(stypy.reporting.localization.Localization(__file__, 658, 12), lower_274741, *[], **kwargs_274742)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 659)
    tuple_274744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 659, 17), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 659)
    # Adding element type (line 659)
    unicode_274745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 659, 17), 'unicode', u'.csv')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 659, 17), tuple_274744, unicode_274745)
    # Adding element type (line 659)
    unicode_274746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 659, 25), 'unicode', u'.xrc')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 659, 17), tuple_274744, unicode_274746)
    # Adding element type (line 659)
    unicode_274747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 659, 33), 'unicode', u'.txt')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 659, 17), tuple_274744, unicode_274747)
    
    # Applying the binary operator 'in' (line 658)
    result_contains_274748 = python_operator(stypy.reporting.localization.Localization(__file__, 658, 12), 'in', lower_call_result_274743, tuple_274744)
    
    # Testing the type of an if condition (line 658)
    if_condition_274749 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 658, 8), result_contains_274748)
    # Assigning a type to the variable 'if_condition_274749' (line 658)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 658, 8), 'if_condition_274749', if_condition_274749)
    # SSA begins for if statement (line 658)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Name (line 660):
    
    # Assigning a Str to a Name (line 660):
    unicode_274750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 660, 19), 'unicode', u'r')
    # Assigning a type to the variable 'mode' (line 660)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 660, 12), 'mode', unicode_274750)
    # SSA branch for the else part of an if statement (line 658)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Str to a Name (line 662):
    
    # Assigning a Str to a Name (line 662):
    unicode_274751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 662, 19), 'unicode', u'rb')
    # Assigning a type to the variable 'mode' (line 662)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 662, 12), 'mode', unicode_274751)
    # SSA join for if statement (line 658)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 664):
    
    # Assigning a Call to a Name:
    
    # Call to splitext(...): (line 664)
    # Processing the call arguments (line 664)
    # Getting the type of 'fname' (line 664)
    fname_274755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 37), 'fname', False)
    # Processing the call keyword arguments (line 664)
    kwargs_274756 = {}
    # Getting the type of 'os' (line 664)
    os_274752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 20), 'os', False)
    # Obtaining the member 'path' of a type (line 664)
    path_274753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 664, 20), os_274752, 'path')
    # Obtaining the member 'splitext' of a type (line 664)
    splitext_274754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 664, 20), path_274753, 'splitext')
    # Calling splitext(args, kwargs) (line 664)
    splitext_call_result_274757 = invoke(stypy.reporting.localization.Localization(__file__, 664, 20), splitext_274754, *[fname_274755], **kwargs_274756)
    
    # Assigning a type to the variable 'call_assignment_273660' (line 664)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 664, 8), 'call_assignment_273660', splitext_call_result_274757)
    
    # Assigning a Call to a Name (line 664):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_274760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 664, 8), 'int')
    # Processing the call keyword arguments
    kwargs_274761 = {}
    # Getting the type of 'call_assignment_273660' (line 664)
    call_assignment_273660_274758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 8), 'call_assignment_273660', False)
    # Obtaining the member '__getitem__' of a type (line 664)
    getitem___274759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 664, 8), call_assignment_273660_274758, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_274762 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___274759, *[int_274760], **kwargs_274761)
    
    # Assigning a type to the variable 'call_assignment_273661' (line 664)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 664, 8), 'call_assignment_273661', getitem___call_result_274762)
    
    # Assigning a Name to a Name (line 664):
    # Getting the type of 'call_assignment_273661' (line 664)
    call_assignment_273661_274763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 8), 'call_assignment_273661')
    # Assigning a type to the variable 'base' (line 664)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 664, 8), 'base', call_assignment_273661_274763)
    
    # Assigning a Call to a Name (line 664):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_274766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 664, 8), 'int')
    # Processing the call keyword arguments
    kwargs_274767 = {}
    # Getting the type of 'call_assignment_273660' (line 664)
    call_assignment_273660_274764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 8), 'call_assignment_273660', False)
    # Obtaining the member '__getitem__' of a type (line 664)
    getitem___274765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 664, 8), call_assignment_273660_274764, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_274768 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___274765, *[int_274766], **kwargs_274767)
    
    # Assigning a type to the variable 'call_assignment_273662' (line 664)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 664, 8), 'call_assignment_273662', getitem___call_result_274768)
    
    # Assigning a Name to a Name (line 664):
    # Getting the type of 'call_assignment_273662' (line 664)
    call_assignment_273662_274769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 8), 'call_assignment_273662')
    # Assigning a type to the variable 'ext' (line 664)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 664, 14), 'ext', call_assignment_273662_274769)
    
    
    # Getting the type of 'ext' (line 665)
    ext_274770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 11), 'ext')
    unicode_274771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 665, 18), 'unicode', u'.gz')
    # Applying the binary operator '==' (line 665)
    result_eq_274772 = python_operator(stypy.reporting.localization.Localization(__file__, 665, 11), '==', ext_274770, unicode_274771)
    
    # Testing the type of an if condition (line 665)
    if_condition_274773 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 665, 8), result_eq_274772)
    # Assigning a type to the variable 'if_condition_274773' (line 665)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 665, 8), 'if_condition_274773', if_condition_274773)
    # SSA begins for if statement (line 665)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to open(...): (line 666)
    # Processing the call arguments (line 666)
    # Getting the type of 'path' (line 666)
    path_274776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 29), 'path', False)
    # Getting the type of 'mode' (line 666)
    mode_274777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 35), 'mode', False)
    # Processing the call keyword arguments (line 666)
    kwargs_274778 = {}
    # Getting the type of 'gzip' (line 666)
    gzip_274774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 19), 'gzip', False)
    # Obtaining the member 'open' of a type (line 666)
    open_274775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 666, 19), gzip_274774, 'open')
    # Calling open(args, kwargs) (line 666)
    open_call_result_274779 = invoke(stypy.reporting.localization.Localization(__file__, 666, 19), open_274775, *[path_274776, mode_274777], **kwargs_274778)
    
    # Assigning a type to the variable 'stypy_return_type' (line 666)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 666, 12), 'stypy_return_type', open_call_result_274779)
    # SSA branch for the else part of an if statement (line 665)
    module_type_store.open_ssa_branch('else')
    
    # Call to open(...): (line 668)
    # Processing the call arguments (line 668)
    # Getting the type of 'path' (line 668)
    path_274781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 24), 'path', False)
    # Getting the type of 'mode' (line 668)
    mode_274782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 30), 'mode', False)
    # Processing the call keyword arguments (line 668)
    kwargs_274783 = {}
    # Getting the type of 'open' (line 668)
    open_274780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 19), 'open', False)
    # Calling open(args, kwargs) (line 668)
    open_call_result_274784 = invoke(stypy.reporting.localization.Localization(__file__, 668, 19), open_274780, *[path_274781, mode_274782], **kwargs_274783)
    
    # Assigning a type to the variable 'stypy_return_type' (line 668)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 668, 12), 'stypy_return_type', open_call_result_274784)
    # SSA join for if statement (line 665)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 657)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'path' (line 670)
    path_274785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 15), 'path')
    # Assigning a type to the variable 'stypy_return_type' (line 670)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 670, 8), 'stypy_return_type', path_274785)
    # SSA join for if statement (line 657)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'get_sample_data(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_sample_data' in the type store
    # Getting the type of 'stypy_return_type' (line 636)
    stypy_return_type_274786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_274786)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_sample_data'
    return stypy_return_type_274786

# Assigning a type to the variable 'get_sample_data' (line 636)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 636, 0), 'get_sample_data', get_sample_data)

@norecursion
def flatten(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'is_scalar_or_string' (line 673)
    is_scalar_or_string_274787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 25), 'is_scalar_or_string')
    defaults = [is_scalar_or_string_274787]
    # Create a new context for function 'flatten'
    module_type_store = module_type_store.open_function_context('flatten', 673, 0, False)
    
    # Passed parameters checking function
    flatten.stypy_localization = localization
    flatten.stypy_type_of_self = None
    flatten.stypy_type_store = module_type_store
    flatten.stypy_function_name = 'flatten'
    flatten.stypy_param_names_list = ['seq', 'scalarp']
    flatten.stypy_varargs_param_name = None
    flatten.stypy_kwargs_param_name = None
    flatten.stypy_call_defaults = defaults
    flatten.stypy_call_varargs = varargs
    flatten.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'flatten', ['seq', 'scalarp'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'flatten', localization, ['seq', 'scalarp'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'flatten(...)' code ##################

    unicode_274788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 687, (-1)), 'unicode', u"\n    Returns a generator of flattened nested containers\n\n    For example:\n\n        >>> from matplotlib.cbook import flatten\n        >>> l = (('John', ['Hunter']), (1, 23), [[([42, (5, 23)], )]])\n        >>> print(list(flatten(l)))\n        ['John', 'Hunter', 1, 23, 42, 5, 23]\n\n    By: Composite of Holger Krekel and Luther Blissett\n    From: https://code.activestate.com/recipes/121294/\n    and Recipe 1.12 in cookbook\n    ")
    
    # Getting the type of 'seq' (line 688)
    seq_274789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 16), 'seq')
    # Testing the type of a for loop iterable (line 688)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 688, 4), seq_274789)
    # Getting the type of the for loop variable (line 688)
    for_loop_var_274790 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 688, 4), seq_274789)
    # Assigning a type to the variable 'item' (line 688)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 688, 4), 'item', for_loop_var_274790)
    # SSA begins for a for statement (line 688)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Evaluating a boolean operation
    
    # Call to scalarp(...): (line 689)
    # Processing the call arguments (line 689)
    # Getting the type of 'item' (line 689)
    item_274792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 19), 'item', False)
    # Processing the call keyword arguments (line 689)
    kwargs_274793 = {}
    # Getting the type of 'scalarp' (line 689)
    scalarp_274791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 11), 'scalarp', False)
    # Calling scalarp(args, kwargs) (line 689)
    scalarp_call_result_274794 = invoke(stypy.reporting.localization.Localization(__file__, 689, 11), scalarp_274791, *[item_274792], **kwargs_274793)
    
    
    # Getting the type of 'item' (line 689)
    item_274795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 28), 'item')
    # Getting the type of 'None' (line 689)
    None_274796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 36), 'None')
    # Applying the binary operator 'is' (line 689)
    result_is__274797 = python_operator(stypy.reporting.localization.Localization(__file__, 689, 28), 'is', item_274795, None_274796)
    
    # Applying the binary operator 'or' (line 689)
    result_or_keyword_274798 = python_operator(stypy.reporting.localization.Localization(__file__, 689, 11), 'or', scalarp_call_result_274794, result_is__274797)
    
    # Testing the type of an if condition (line 689)
    if_condition_274799 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 689, 8), result_or_keyword_274798)
    # Assigning a type to the variable 'if_condition_274799' (line 689)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 689, 8), 'if_condition_274799', if_condition_274799)
    # SSA begins for if statement (line 689)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Creating a generator
    # Getting the type of 'item' (line 690)
    item_274800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 18), 'item')
    GeneratorType_274801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 690, 12), 'GeneratorType')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 690, 12), GeneratorType_274801, item_274800)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 690, 12), 'stypy_return_type', GeneratorType_274801)
    # SSA branch for the else part of an if statement (line 689)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to flatten(...): (line 692)
    # Processing the call arguments (line 692)
    # Getting the type of 'item' (line 692)
    item_274803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 35), 'item', False)
    # Getting the type of 'scalarp' (line 692)
    scalarp_274804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 41), 'scalarp', False)
    # Processing the call keyword arguments (line 692)
    kwargs_274805 = {}
    # Getting the type of 'flatten' (line 692)
    flatten_274802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 27), 'flatten', False)
    # Calling flatten(args, kwargs) (line 692)
    flatten_call_result_274806 = invoke(stypy.reporting.localization.Localization(__file__, 692, 27), flatten_274802, *[item_274803, scalarp_274804], **kwargs_274805)
    
    # Testing the type of a for loop iterable (line 692)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 692, 12), flatten_call_result_274806)
    # Getting the type of the for loop variable (line 692)
    for_loop_var_274807 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 692, 12), flatten_call_result_274806)
    # Assigning a type to the variable 'subitem' (line 692)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 692, 12), 'subitem', for_loop_var_274807)
    # SSA begins for a for statement (line 692)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    # Creating a generator
    # Getting the type of 'subitem' (line 693)
    subitem_274808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 22), 'subitem')
    GeneratorType_274809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 693, 16), 'GeneratorType')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 693, 16), GeneratorType_274809, subitem_274808)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 693, 16), 'stypy_return_type', GeneratorType_274809)
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 689)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'flatten(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'flatten' in the type store
    # Getting the type of 'stypy_return_type' (line 673)
    stypy_return_type_274810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_274810)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'flatten'
    return stypy_return_type_274810

# Assigning a type to the variable 'flatten' (line 673)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 673, 0), 'flatten', flatten)
# Declaration of the 'Sorter' class

class Sorter(object, ):
    unicode_274811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 714, (-1)), 'unicode', u"\n    Sort by attribute or item\n\n    Example usage::\n\n      sort = Sorter()\n\n      list = [(1, 2), (4, 8), (0, 3)]\n      dict = [{'a': 3, 'b': 4}, {'a': 5, 'b': 2}, {'a': 0, 'b': 0},\n              {'a': 9, 'b': 9}]\n\n\n      sort(list)       # default sort\n      sort(list, 1)    # sort by index 1\n      sort(dict, 'a')  # sort a list of dicts by key 'a'\n\n    ")

    @norecursion
    def _helper(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_helper'
        module_type_store = module_type_store.open_function_context('_helper', 716, 4, False)
        # Assigning a type to the variable 'self' (line 717)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 717, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Sorter._helper.__dict__.__setitem__('stypy_localization', localization)
        Sorter._helper.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Sorter._helper.__dict__.__setitem__('stypy_type_store', module_type_store)
        Sorter._helper.__dict__.__setitem__('stypy_function_name', 'Sorter._helper')
        Sorter._helper.__dict__.__setitem__('stypy_param_names_list', ['data', 'aux', 'inplace'])
        Sorter._helper.__dict__.__setitem__('stypy_varargs_param_name', None)
        Sorter._helper.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Sorter._helper.__dict__.__setitem__('stypy_call_defaults', defaults)
        Sorter._helper.__dict__.__setitem__('stypy_call_varargs', varargs)
        Sorter._helper.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Sorter._helper.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Sorter._helper', ['data', 'aux', 'inplace'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_helper', localization, ['data', 'aux', 'inplace'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_helper(...)' code ##################

        
        # Call to sort(...): (line 717)
        # Processing the call keyword arguments (line 717)
        kwargs_274814 = {}
        # Getting the type of 'aux' (line 717)
        aux_274812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 8), 'aux', False)
        # Obtaining the member 'sort' of a type (line 717)
        sort_274813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 717, 8), aux_274812, 'sort')
        # Calling sort(args, kwargs) (line 717)
        sort_call_result_274815 = invoke(stypy.reporting.localization.Localization(__file__, 717, 8), sort_274813, *[], **kwargs_274814)
        
        
        # Assigning a ListComp to a Name (line 718):
        
        # Assigning a ListComp to a Name (line 718):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'aux' (line 718)
        aux_274820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 41), 'aux')
        comprehension_274821 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 718, 18), aux_274820)
        # Assigning a type to the variable 'junk' (line 718)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 718, 18), 'junk', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 718, 18), comprehension_274821))
        # Assigning a type to the variable 'i' (line 718)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 718, 18), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 718, 18), comprehension_274821))
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 718)
        i_274816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 23), 'i')
        # Getting the type of 'data' (line 718)
        data_274817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 18), 'data')
        # Obtaining the member '__getitem__' of a type (line 718)
        getitem___274818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 718, 18), data_274817, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 718)
        subscript_call_result_274819 = invoke(stypy.reporting.localization.Localization(__file__, 718, 18), getitem___274818, i_274816)
        
        list_274822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 718, 18), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 718, 18), list_274822, subscript_call_result_274819)
        # Assigning a type to the variable 'result' (line 718)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 718, 8), 'result', list_274822)
        
        # Getting the type of 'inplace' (line 719)
        inplace_274823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 11), 'inplace')
        # Testing the type of an if condition (line 719)
        if_condition_274824 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 719, 8), inplace_274823)
        # Assigning a type to the variable 'if_condition_274824' (line 719)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 719, 8), 'if_condition_274824', if_condition_274824)
        # SSA begins for if statement (line 719)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Subscript (line 720):
        
        # Assigning a Name to a Subscript (line 720):
        # Getting the type of 'result' (line 720)
        result_274825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 720, 22), 'result')
        # Getting the type of 'data' (line 720)
        data_274826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 720, 12), 'data')
        slice_274827 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 720, 12), None, None, None)
        # Storing an element on a container (line 720)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 720, 12), data_274826, (slice_274827, result_274825))
        # SSA join for if statement (line 719)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'result' (line 721)
        result_274828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 721, 15), 'result')
        # Assigning a type to the variable 'stypy_return_type' (line 721)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 721, 8), 'stypy_return_type', result_274828)
        
        # ################# End of '_helper(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_helper' in the type store
        # Getting the type of 'stypy_return_type' (line 716)
        stypy_return_type_274829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_274829)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_helper'
        return stypy_return_type_274829


    @norecursion
    def byItem(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 723)
        None_274830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 37), 'None')
        int_274831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 723, 51), 'int')
        defaults = [None_274830, int_274831]
        # Create a new context for function 'byItem'
        module_type_store = module_type_store.open_function_context('byItem', 723, 4, False)
        # Assigning a type to the variable 'self' (line 724)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 724, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Sorter.byItem.__dict__.__setitem__('stypy_localization', localization)
        Sorter.byItem.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Sorter.byItem.__dict__.__setitem__('stypy_type_store', module_type_store)
        Sorter.byItem.__dict__.__setitem__('stypy_function_name', 'Sorter.byItem')
        Sorter.byItem.__dict__.__setitem__('stypy_param_names_list', ['data', 'itemindex', 'inplace'])
        Sorter.byItem.__dict__.__setitem__('stypy_varargs_param_name', None)
        Sorter.byItem.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Sorter.byItem.__dict__.__setitem__('stypy_call_defaults', defaults)
        Sorter.byItem.__dict__.__setitem__('stypy_call_varargs', varargs)
        Sorter.byItem.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Sorter.byItem.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Sorter.byItem', ['data', 'itemindex', 'inplace'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'byItem', localization, ['data', 'itemindex', 'inplace'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'byItem(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 724)
        # Getting the type of 'itemindex' (line 724)
        itemindex_274832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 11), 'itemindex')
        # Getting the type of 'None' (line 724)
        None_274833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 24), 'None')
        
        (may_be_274834, more_types_in_union_274835) = may_be_none(itemindex_274832, None_274833)

        if may_be_274834:

            if more_types_in_union_274835:
                # Runtime conditional SSA (line 724)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Getting the type of 'inplace' (line 725)
            inplace_274836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 15), 'inplace')
            # Testing the type of an if condition (line 725)
            if_condition_274837 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 725, 12), inplace_274836)
            # Assigning a type to the variable 'if_condition_274837' (line 725)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 725, 12), 'if_condition_274837', if_condition_274837)
            # SSA begins for if statement (line 725)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to sort(...): (line 726)
            # Processing the call keyword arguments (line 726)
            kwargs_274840 = {}
            # Getting the type of 'data' (line 726)
            data_274838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 16), 'data', False)
            # Obtaining the member 'sort' of a type (line 726)
            sort_274839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 726, 16), data_274838, 'sort')
            # Calling sort(args, kwargs) (line 726)
            sort_call_result_274841 = invoke(stypy.reporting.localization.Localization(__file__, 726, 16), sort_274839, *[], **kwargs_274840)
            
            
            # Assigning a Name to a Name (line 727):
            
            # Assigning a Name to a Name (line 727):
            # Getting the type of 'data' (line 727)
            data_274842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 25), 'data')
            # Assigning a type to the variable 'result' (line 727)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 727, 16), 'result', data_274842)
            # SSA branch for the else part of an if statement (line 725)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Call to a Name (line 729):
            
            # Assigning a Call to a Name (line 729):
            
            # Call to sorted(...): (line 729)
            # Processing the call arguments (line 729)
            # Getting the type of 'data' (line 729)
            data_274844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 32), 'data', False)
            # Processing the call keyword arguments (line 729)
            kwargs_274845 = {}
            # Getting the type of 'sorted' (line 729)
            sorted_274843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 25), 'sorted', False)
            # Calling sorted(args, kwargs) (line 729)
            sorted_call_result_274846 = invoke(stypy.reporting.localization.Localization(__file__, 729, 25), sorted_274843, *[data_274844], **kwargs_274845)
            
            # Assigning a type to the variable 'result' (line 729)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 729, 16), 'result', sorted_call_result_274846)
            # SSA join for if statement (line 725)
            module_type_store = module_type_store.join_ssa_context()
            
            # Getting the type of 'result' (line 730)
            result_274847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 19), 'result')
            # Assigning a type to the variable 'stypy_return_type' (line 730)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 730, 12), 'stypy_return_type', result_274847)

            if more_types_in_union_274835:
                # Runtime conditional SSA for else branch (line 724)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_274834) or more_types_in_union_274835):
            
            # Assigning a ListComp to a Name (line 732):
            
            # Assigning a ListComp to a Name (line 732):
            # Calculating list comprehension
            # Calculating comprehension expression
            
            # Call to range(...): (line 732)
            # Processing the call arguments (line 732)
            
            # Call to len(...): (line 732)
            # Processing the call arguments (line 732)
            # Getting the type of 'data' (line 732)
            data_274859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 62), 'data', False)
            # Processing the call keyword arguments (line 732)
            kwargs_274860 = {}
            # Getting the type of 'len' (line 732)
            len_274858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 58), 'len', False)
            # Calling len(args, kwargs) (line 732)
            len_call_result_274861 = invoke(stypy.reporting.localization.Localization(__file__, 732, 58), len_274858, *[data_274859], **kwargs_274860)
            
            # Processing the call keyword arguments (line 732)
            kwargs_274862 = {}
            # Getting the type of 'range' (line 732)
            range_274857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 52), 'range', False)
            # Calling range(args, kwargs) (line 732)
            range_call_result_274863 = invoke(stypy.reporting.localization.Localization(__file__, 732, 52), range_274857, *[len_call_result_274861], **kwargs_274862)
            
            comprehension_274864 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 732, 19), range_call_result_274863)
            # Assigning a type to the variable 'i' (line 732)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 732, 19), 'i', comprehension_274864)
            
            # Obtaining an instance of the builtin type 'tuple' (line 732)
            tuple_274848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 732, 20), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 732)
            # Adding element type (line 732)
            
            # Obtaining the type of the subscript
            # Getting the type of 'itemindex' (line 732)
            itemindex_274849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 28), 'itemindex')
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 732)
            i_274850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 25), 'i')
            # Getting the type of 'data' (line 732)
            data_274851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 20), 'data')
            # Obtaining the member '__getitem__' of a type (line 732)
            getitem___274852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 732, 20), data_274851, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 732)
            subscript_call_result_274853 = invoke(stypy.reporting.localization.Localization(__file__, 732, 20), getitem___274852, i_274850)
            
            # Obtaining the member '__getitem__' of a type (line 732)
            getitem___274854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 732, 20), subscript_call_result_274853, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 732)
            subscript_call_result_274855 = invoke(stypy.reporting.localization.Localization(__file__, 732, 20), getitem___274854, itemindex_274849)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 732, 20), tuple_274848, subscript_call_result_274855)
            # Adding element type (line 732)
            # Getting the type of 'i' (line 732)
            i_274856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 40), 'i')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 732, 20), tuple_274848, i_274856)
            
            list_274865 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 732, 19), 'list')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 732, 19), list_274865, tuple_274848)
            # Assigning a type to the variable 'aux' (line 732)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 732, 12), 'aux', list_274865)
            
            # Call to _helper(...): (line 733)
            # Processing the call arguments (line 733)
            # Getting the type of 'data' (line 733)
            data_274868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 32), 'data', False)
            # Getting the type of 'aux' (line 733)
            aux_274869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 38), 'aux', False)
            # Getting the type of 'inplace' (line 733)
            inplace_274870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 43), 'inplace', False)
            # Processing the call keyword arguments (line 733)
            kwargs_274871 = {}
            # Getting the type of 'self' (line 733)
            self_274866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 19), 'self', False)
            # Obtaining the member '_helper' of a type (line 733)
            _helper_274867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 733, 19), self_274866, '_helper')
            # Calling _helper(args, kwargs) (line 733)
            _helper_call_result_274872 = invoke(stypy.reporting.localization.Localization(__file__, 733, 19), _helper_274867, *[data_274868, aux_274869, inplace_274870], **kwargs_274871)
            
            # Assigning a type to the variable 'stypy_return_type' (line 733)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 733, 12), 'stypy_return_type', _helper_call_result_274872)

            if (may_be_274834 and more_types_in_union_274835):
                # SSA join for if statement (line 724)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'byItem(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'byItem' in the type store
        # Getting the type of 'stypy_return_type' (line 723)
        stypy_return_type_274873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_274873)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'byItem'
        return stypy_return_type_274873


    @norecursion
    def byAttribute(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_274874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 735, 55), 'int')
        defaults = [int_274874]
        # Create a new context for function 'byAttribute'
        module_type_store = module_type_store.open_function_context('byAttribute', 735, 4, False)
        # Assigning a type to the variable 'self' (line 736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 736, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Sorter.byAttribute.__dict__.__setitem__('stypy_localization', localization)
        Sorter.byAttribute.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Sorter.byAttribute.__dict__.__setitem__('stypy_type_store', module_type_store)
        Sorter.byAttribute.__dict__.__setitem__('stypy_function_name', 'Sorter.byAttribute')
        Sorter.byAttribute.__dict__.__setitem__('stypy_param_names_list', ['data', 'attributename', 'inplace'])
        Sorter.byAttribute.__dict__.__setitem__('stypy_varargs_param_name', None)
        Sorter.byAttribute.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Sorter.byAttribute.__dict__.__setitem__('stypy_call_defaults', defaults)
        Sorter.byAttribute.__dict__.__setitem__('stypy_call_varargs', varargs)
        Sorter.byAttribute.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Sorter.byAttribute.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Sorter.byAttribute', ['data', 'attributename', 'inplace'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'byAttribute', localization, ['data', 'attributename', 'inplace'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'byAttribute(...)' code ##################

        
        # Assigning a ListComp to a Name (line 736):
        
        # Assigning a ListComp to a Name (line 736):
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to range(...): (line 736)
        # Processing the call arguments (line 736)
        
        # Call to len(...): (line 736)
        # Processing the call arguments (line 736)
        # Getting the type of 'data' (line 736)
        data_274887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 71), 'data', False)
        # Processing the call keyword arguments (line 736)
        kwargs_274888 = {}
        # Getting the type of 'len' (line 736)
        len_274886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 67), 'len', False)
        # Calling len(args, kwargs) (line 736)
        len_call_result_274889 = invoke(stypy.reporting.localization.Localization(__file__, 736, 67), len_274886, *[data_274887], **kwargs_274888)
        
        # Processing the call keyword arguments (line 736)
        kwargs_274890 = {}
        # Getting the type of 'range' (line 736)
        range_274885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 61), 'range', False)
        # Calling range(args, kwargs) (line 736)
        range_call_result_274891 = invoke(stypy.reporting.localization.Localization(__file__, 736, 61), range_274885, *[len_call_result_274889], **kwargs_274890)
        
        comprehension_274892 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 736, 15), range_call_result_274891)
        # Assigning a type to the variable 'i' (line 736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 736, 15), 'i', comprehension_274892)
        
        # Obtaining an instance of the builtin type 'tuple' (line 736)
        tuple_274875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 736, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 736)
        # Adding element type (line 736)
        
        # Call to getattr(...): (line 736)
        # Processing the call arguments (line 736)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 736)
        i_274877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 29), 'i', False)
        # Getting the type of 'data' (line 736)
        data_274878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 24), 'data', False)
        # Obtaining the member '__getitem__' of a type (line 736)
        getitem___274879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 736, 24), data_274878, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 736)
        subscript_call_result_274880 = invoke(stypy.reporting.localization.Localization(__file__, 736, 24), getitem___274879, i_274877)
        
        # Getting the type of 'attributename' (line 736)
        attributename_274881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 33), 'attributename', False)
        # Processing the call keyword arguments (line 736)
        kwargs_274882 = {}
        # Getting the type of 'getattr' (line 736)
        getattr_274876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 16), 'getattr', False)
        # Calling getattr(args, kwargs) (line 736)
        getattr_call_result_274883 = invoke(stypy.reporting.localization.Localization(__file__, 736, 16), getattr_274876, *[subscript_call_result_274880, attributename_274881], **kwargs_274882)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 736, 16), tuple_274875, getattr_call_result_274883)
        # Adding element type (line 736)
        # Getting the type of 'i' (line 736)
        i_274884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 49), 'i')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 736, 16), tuple_274875, i_274884)
        
        list_274893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 736, 15), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 736, 15), list_274893, tuple_274875)
        # Assigning a type to the variable 'aux' (line 736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 736, 8), 'aux', list_274893)
        
        # Call to _helper(...): (line 737)
        # Processing the call arguments (line 737)
        # Getting the type of 'data' (line 737)
        data_274896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 28), 'data', False)
        # Getting the type of 'aux' (line 737)
        aux_274897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 34), 'aux', False)
        # Getting the type of 'inplace' (line 737)
        inplace_274898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 39), 'inplace', False)
        # Processing the call keyword arguments (line 737)
        kwargs_274899 = {}
        # Getting the type of 'self' (line 737)
        self_274894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 15), 'self', False)
        # Obtaining the member '_helper' of a type (line 737)
        _helper_274895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 737, 15), self_274894, '_helper')
        # Calling _helper(args, kwargs) (line 737)
        _helper_call_result_274900 = invoke(stypy.reporting.localization.Localization(__file__, 737, 15), _helper_274895, *[data_274896, aux_274897, inplace_274898], **kwargs_274899)
        
        # Assigning a type to the variable 'stypy_return_type' (line 737)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 737, 8), 'stypy_return_type', _helper_call_result_274900)
        
        # ################# End of 'byAttribute(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'byAttribute' in the type store
        # Getting the type of 'stypy_return_type' (line 735)
        stypy_return_type_274901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_274901)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'byAttribute'
        return stypy_return_type_274901

    
    # Assigning a Name to a Name (line 740):
    
    # Assigning a Name to a Name (line 741):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 696, 0, False)
        # Assigning a type to the variable 'self' (line 697)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 697, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Sorter.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'Sorter' (line 696)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 696, 0), 'Sorter', Sorter)

# Assigning a Name to a Name (line 740):
# Getting the type of 'Sorter'
Sorter_274902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Sorter')
# Obtaining the member 'byItem' of a type
byItem_274903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Sorter_274902, 'byItem')
# Getting the type of 'Sorter'
Sorter_274904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Sorter')
# Setting the type of the member 'sort' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Sorter_274904, 'sort', byItem_274903)

# Assigning a Name to a Name (line 741):
# Getting the type of 'Sorter'
Sorter_274905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Sorter')
# Obtaining the member 'byItem' of a type
byItem_274906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Sorter_274905, 'byItem')
# Getting the type of 'Sorter'
Sorter_274907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Sorter')
# Setting the type of the member '__call__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Sorter_274907, '__call__', byItem_274906)
# Declaration of the 'Xlator' class
# Getting the type of 'dict' (line 745)
dict_274908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 13), 'dict')

class Xlator(dict_274908, ):
    unicode_274909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 762, (-1)), 'unicode', u'\n    All-in-one multiple-string-substitution class\n\n    Example usage::\n\n      text = "Larry Wall is the creator of Perl"\n      adict = {\n      "Larry Wall" : "Guido van Rossum",\n      "creator" : "Benevolent Dictator for Life",\n      "Perl" : "Python",\n      }\n\n      print(multiple_replace(adict, text))\n\n      xlat = Xlator(adict)\n      print(xlat.xlat(text))\n    ')

    @norecursion
    def _make_regex(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_make_regex'
        module_type_store = module_type_store.open_function_context('_make_regex', 764, 4, False)
        # Assigning a type to the variable 'self' (line 765)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 765, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Xlator._make_regex.__dict__.__setitem__('stypy_localization', localization)
        Xlator._make_regex.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Xlator._make_regex.__dict__.__setitem__('stypy_type_store', module_type_store)
        Xlator._make_regex.__dict__.__setitem__('stypy_function_name', 'Xlator._make_regex')
        Xlator._make_regex.__dict__.__setitem__('stypy_param_names_list', [])
        Xlator._make_regex.__dict__.__setitem__('stypy_varargs_param_name', None)
        Xlator._make_regex.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Xlator._make_regex.__dict__.__setitem__('stypy_call_defaults', defaults)
        Xlator._make_regex.__dict__.__setitem__('stypy_call_varargs', varargs)
        Xlator._make_regex.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Xlator._make_regex.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Xlator._make_regex', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_make_regex', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_make_regex(...)' code ##################

        unicode_274910 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 765, 8), 'unicode', u' Build re object based on the keys of the current dictionary ')
        
        # Call to compile(...): (line 766)
        # Processing the call arguments (line 766)
        
        # Call to join(...): (line 766)
        # Processing the call arguments (line 766)
        
        # Call to map(...): (line 766)
        # Processing the call arguments (line 766)
        # Getting the type of 're' (line 766)
        re_274916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 39), 're', False)
        # Obtaining the member 'escape' of a type (line 766)
        escape_274917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 766, 39), re_274916, 'escape')
        # Getting the type of 'self' (line 766)
        self_274918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 50), 'self', False)
        # Processing the call keyword arguments (line 766)
        kwargs_274919 = {}
        # Getting the type of 'map' (line 766)
        map_274915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 35), 'map', False)
        # Calling map(args, kwargs) (line 766)
        map_call_result_274920 = invoke(stypy.reporting.localization.Localization(__file__, 766, 35), map_274915, *[escape_274917, self_274918], **kwargs_274919)
        
        # Processing the call keyword arguments (line 766)
        kwargs_274921 = {}
        unicode_274913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 766, 26), 'unicode', u'|')
        # Obtaining the member 'join' of a type (line 766)
        join_274914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 766, 26), unicode_274913, 'join')
        # Calling join(args, kwargs) (line 766)
        join_call_result_274922 = invoke(stypy.reporting.localization.Localization(__file__, 766, 26), join_274914, *[map_call_result_274920], **kwargs_274921)
        
        # Processing the call keyword arguments (line 766)
        kwargs_274923 = {}
        # Getting the type of 're' (line 766)
        re_274911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 15), 're', False)
        # Obtaining the member 'compile' of a type (line 766)
        compile_274912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 766, 15), re_274911, 'compile')
        # Calling compile(args, kwargs) (line 766)
        compile_call_result_274924 = invoke(stypy.reporting.localization.Localization(__file__, 766, 15), compile_274912, *[join_call_result_274922], **kwargs_274923)
        
        # Assigning a type to the variable 'stypy_return_type' (line 766)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 766, 8), 'stypy_return_type', compile_call_result_274924)
        
        # ################# End of '_make_regex(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_make_regex' in the type store
        # Getting the type of 'stypy_return_type' (line 764)
        stypy_return_type_274925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_274925)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_make_regex'
        return stypy_return_type_274925


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 768, 4, False)
        # Assigning a type to the variable 'self' (line 769)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 769, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Xlator.__call__.__dict__.__setitem__('stypy_localization', localization)
        Xlator.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Xlator.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Xlator.__call__.__dict__.__setitem__('stypy_function_name', 'Xlator.__call__')
        Xlator.__call__.__dict__.__setitem__('stypy_param_names_list', ['match'])
        Xlator.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Xlator.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Xlator.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Xlator.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Xlator.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Xlator.__call__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Xlator.__call__', ['match'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['match'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        unicode_274926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 769, 8), 'unicode', u' Handler invoked for each regex *match* ')
        
        # Obtaining the type of the subscript
        
        # Call to group(...): (line 770)
        # Processing the call arguments (line 770)
        int_274929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 770, 32), 'int')
        # Processing the call keyword arguments (line 770)
        kwargs_274930 = {}
        # Getting the type of 'match' (line 770)
        match_274927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 20), 'match', False)
        # Obtaining the member 'group' of a type (line 770)
        group_274928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 770, 20), match_274927, 'group')
        # Calling group(args, kwargs) (line 770)
        group_call_result_274931 = invoke(stypy.reporting.localization.Localization(__file__, 770, 20), group_274928, *[int_274929], **kwargs_274930)
        
        # Getting the type of 'self' (line 770)
        self_274932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 15), 'self')
        # Obtaining the member '__getitem__' of a type (line 770)
        getitem___274933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 770, 15), self_274932, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 770)
        subscript_call_result_274934 = invoke(stypy.reporting.localization.Localization(__file__, 770, 15), getitem___274933, group_call_result_274931)
        
        # Assigning a type to the variable 'stypy_return_type' (line 770)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 770, 8), 'stypy_return_type', subscript_call_result_274934)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 768)
        stypy_return_type_274935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_274935)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_274935


    @norecursion
    def xlat(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'xlat'
        module_type_store = module_type_store.open_function_context('xlat', 772, 4, False)
        # Assigning a type to the variable 'self' (line 773)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 773, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Xlator.xlat.__dict__.__setitem__('stypy_localization', localization)
        Xlator.xlat.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Xlator.xlat.__dict__.__setitem__('stypy_type_store', module_type_store)
        Xlator.xlat.__dict__.__setitem__('stypy_function_name', 'Xlator.xlat')
        Xlator.xlat.__dict__.__setitem__('stypy_param_names_list', ['text'])
        Xlator.xlat.__dict__.__setitem__('stypy_varargs_param_name', None)
        Xlator.xlat.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Xlator.xlat.__dict__.__setitem__('stypy_call_defaults', defaults)
        Xlator.xlat.__dict__.__setitem__('stypy_call_varargs', varargs)
        Xlator.xlat.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Xlator.xlat.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Xlator.xlat', ['text'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'xlat', localization, ['text'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'xlat(...)' code ##################

        unicode_274936 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 773, 8), 'unicode', u' Translate *text*, returns the modified text. ')
        
        # Call to sub(...): (line 774)
        # Processing the call arguments (line 774)
        # Getting the type of 'self' (line 774)
        self_274942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 38), 'self', False)
        # Getting the type of 'text' (line 774)
        text_274943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 44), 'text', False)
        # Processing the call keyword arguments (line 774)
        kwargs_274944 = {}
        
        # Call to _make_regex(...): (line 774)
        # Processing the call keyword arguments (line 774)
        kwargs_274939 = {}
        # Getting the type of 'self' (line 774)
        self_274937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 15), 'self', False)
        # Obtaining the member '_make_regex' of a type (line 774)
        _make_regex_274938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 774, 15), self_274937, '_make_regex')
        # Calling _make_regex(args, kwargs) (line 774)
        _make_regex_call_result_274940 = invoke(stypy.reporting.localization.Localization(__file__, 774, 15), _make_regex_274938, *[], **kwargs_274939)
        
        # Obtaining the member 'sub' of a type (line 774)
        sub_274941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 774, 15), _make_regex_call_result_274940, 'sub')
        # Calling sub(args, kwargs) (line 774)
        sub_call_result_274945 = invoke(stypy.reporting.localization.Localization(__file__, 774, 15), sub_274941, *[self_274942, text_274943], **kwargs_274944)
        
        # Assigning a type to the variable 'stypy_return_type' (line 774)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 774, 8), 'stypy_return_type', sub_call_result_274945)
        
        # ################# End of 'xlat(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'xlat' in the type store
        # Getting the type of 'stypy_return_type' (line 772)
        stypy_return_type_274946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_274946)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'xlat'
        return stypy_return_type_274946


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 744, 0, False)
        # Assigning a type to the variable 'self' (line 745)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 745, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Xlator.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'Xlator' (line 744)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 744, 0), 'Xlator', Xlator)

@norecursion
def soundex(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_274947 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 778, 22), 'int')
    defaults = [int_274947]
    # Create a new context for function 'soundex'
    module_type_store = module_type_store.open_function_context('soundex', 777, 0, False)
    
    # Passed parameters checking function
    soundex.stypy_localization = localization
    soundex.stypy_type_of_self = None
    soundex.stypy_type_store = module_type_store
    soundex.stypy_function_name = 'soundex'
    soundex.stypy_param_names_list = ['name', 'len']
    soundex.stypy_varargs_param_name = None
    soundex.stypy_kwargs_param_name = None
    soundex.stypy_call_defaults = defaults
    soundex.stypy_call_varargs = varargs
    soundex.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'soundex', ['name', 'len'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'soundex', localization, ['name', 'len'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'soundex(...)' code ##################

    unicode_274948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 779, 4), 'unicode', u' soundex module conforming to Odell-Russell algorithm ')
    
    # Assigning a Str to a Name (line 782):
    
    # Assigning a Str to a Name (line 782):
    unicode_274949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 782, 21), 'unicode', u'01230120022455012623010202')
    # Assigning a type to the variable 'soundex_digits' (line 782)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 782, 4), 'soundex_digits', unicode_274949)
    
    # Assigning a Str to a Name (line 783):
    
    # Assigning a Str to a Name (line 783):
    unicode_274950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 783, 11), 'unicode', u'')
    # Assigning a type to the variable 'sndx' (line 783)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 783, 4), 'sndx', unicode_274950)
    
    # Assigning a Str to a Name (line 784):
    
    # Assigning a Str to a Name (line 784):
    unicode_274951 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 784, 9), 'unicode', u'')
    # Assigning a type to the variable 'fc' (line 784)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 784, 4), 'fc', unicode_274951)
    
    
    # Call to upper(...): (line 787)
    # Processing the call keyword arguments (line 787)
    kwargs_274954 = {}
    # Getting the type of 'name' (line 787)
    name_274952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 13), 'name', False)
    # Obtaining the member 'upper' of a type (line 787)
    upper_274953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 787, 13), name_274952, 'upper')
    # Calling upper(args, kwargs) (line 787)
    upper_call_result_274955 = invoke(stypy.reporting.localization.Localization(__file__, 787, 13), upper_274953, *[], **kwargs_274954)
    
    # Testing the type of a for loop iterable (line 787)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 787, 4), upper_call_result_274955)
    # Getting the type of the for loop variable (line 787)
    for_loop_var_274956 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 787, 4), upper_call_result_274955)
    # Assigning a type to the variable 'c' (line 787)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 787, 4), 'c', for_loop_var_274956)
    # SSA begins for a for statement (line 787)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to isalpha(...): (line 788)
    # Processing the call keyword arguments (line 788)
    kwargs_274959 = {}
    # Getting the type of 'c' (line 788)
    c_274957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 11), 'c', False)
    # Obtaining the member 'isalpha' of a type (line 788)
    isalpha_274958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 788, 11), c_274957, 'isalpha')
    # Calling isalpha(args, kwargs) (line 788)
    isalpha_call_result_274960 = invoke(stypy.reporting.localization.Localization(__file__, 788, 11), isalpha_274958, *[], **kwargs_274959)
    
    # Testing the type of an if condition (line 788)
    if_condition_274961 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 788, 8), isalpha_call_result_274960)
    # Assigning a type to the variable 'if_condition_274961' (line 788)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 788, 8), 'if_condition_274961', if_condition_274961)
    # SSA begins for if statement (line 788)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'fc' (line 789)
    fc_274962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 19), 'fc')
    # Applying the 'not' unary operator (line 789)
    result_not__274963 = python_operator(stypy.reporting.localization.Localization(__file__, 789, 15), 'not', fc_274962)
    
    # Testing the type of an if condition (line 789)
    if_condition_274964 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 789, 12), result_not__274963)
    # Assigning a type to the variable 'if_condition_274964' (line 789)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 789, 12), 'if_condition_274964', if_condition_274964)
    # SSA begins for if statement (line 789)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 790):
    
    # Assigning a Name to a Name (line 790):
    # Getting the type of 'c' (line 790)
    c_274965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 21), 'c')
    # Assigning a type to the variable 'fc' (line 790)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 790, 16), 'fc', c_274965)
    # SSA join for if statement (line 789)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 791):
    
    # Assigning a Subscript to a Name (line 791):
    
    # Obtaining the type of the subscript
    
    # Call to ord(...): (line 791)
    # Processing the call arguments (line 791)
    # Getting the type of 'c' (line 791)
    c_274967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 35), 'c', False)
    # Processing the call keyword arguments (line 791)
    kwargs_274968 = {}
    # Getting the type of 'ord' (line 791)
    ord_274966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 31), 'ord', False)
    # Calling ord(args, kwargs) (line 791)
    ord_call_result_274969 = invoke(stypy.reporting.localization.Localization(__file__, 791, 31), ord_274966, *[c_274967], **kwargs_274968)
    
    
    # Call to ord(...): (line 791)
    # Processing the call arguments (line 791)
    unicode_274971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 791, 44), 'unicode', u'A')
    # Processing the call keyword arguments (line 791)
    kwargs_274972 = {}
    # Getting the type of 'ord' (line 791)
    ord_274970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 40), 'ord', False)
    # Calling ord(args, kwargs) (line 791)
    ord_call_result_274973 = invoke(stypy.reporting.localization.Localization(__file__, 791, 40), ord_274970, *[unicode_274971], **kwargs_274972)
    
    # Applying the binary operator '-' (line 791)
    result_sub_274974 = python_operator(stypy.reporting.localization.Localization(__file__, 791, 31), '-', ord_call_result_274969, ord_call_result_274973)
    
    # Getting the type of 'soundex_digits' (line 791)
    soundex_digits_274975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 16), 'soundex_digits')
    # Obtaining the member '__getitem__' of a type (line 791)
    getitem___274976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 791, 16), soundex_digits_274975, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 791)
    subscript_call_result_274977 = invoke(stypy.reporting.localization.Localization(__file__, 791, 16), getitem___274976, result_sub_274974)
    
    # Assigning a type to the variable 'd' (line 791)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 791, 12), 'd', subscript_call_result_274977)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'sndx' (line 793)
    sndx_274978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 19), 'sndx')
    # Applying the 'not' unary operator (line 793)
    result_not__274979 = python_operator(stypy.reporting.localization.Localization(__file__, 793, 15), 'not', sndx_274978)
    
    
    # Getting the type of 'd' (line 793)
    d_274980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 28), 'd')
    
    # Obtaining the type of the subscript
    int_274981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 793, 38), 'int')
    # Getting the type of 'sndx' (line 793)
    sndx_274982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 33), 'sndx')
    # Obtaining the member '__getitem__' of a type (line 793)
    getitem___274983 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 793, 33), sndx_274982, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 793)
    subscript_call_result_274984 = invoke(stypy.reporting.localization.Localization(__file__, 793, 33), getitem___274983, int_274981)
    
    # Applying the binary operator '!=' (line 793)
    result_ne_274985 = python_operator(stypy.reporting.localization.Localization(__file__, 793, 28), '!=', d_274980, subscript_call_result_274984)
    
    # Applying the binary operator 'or' (line 793)
    result_or_keyword_274986 = python_operator(stypy.reporting.localization.Localization(__file__, 793, 15), 'or', result_not__274979, result_ne_274985)
    
    # Testing the type of an if condition (line 793)
    if_condition_274987 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 793, 12), result_or_keyword_274986)
    # Assigning a type to the variable 'if_condition_274987' (line 793)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 793, 12), 'if_condition_274987', if_condition_274987)
    # SSA begins for if statement (line 793)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'sndx' (line 794)
    sndx_274988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 16), 'sndx')
    # Getting the type of 'd' (line 794)
    d_274989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 24), 'd')
    # Applying the binary operator '+=' (line 794)
    result_iadd_274990 = python_operator(stypy.reporting.localization.Localization(__file__, 794, 16), '+=', sndx_274988, d_274989)
    # Assigning a type to the variable 'sndx' (line 794)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 794, 16), 'sndx', result_iadd_274990)
    
    # SSA join for if statement (line 793)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 788)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 797):
    
    # Assigning a BinOp to a Name (line 797):
    # Getting the type of 'fc' (line 797)
    fc_274991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 11), 'fc')
    
    # Obtaining the type of the subscript
    int_274992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 797, 21), 'int')
    slice_274993 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 797, 16), int_274992, None, None)
    # Getting the type of 'sndx' (line 797)
    sndx_274994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 16), 'sndx')
    # Obtaining the member '__getitem__' of a type (line 797)
    getitem___274995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 16), sndx_274994, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 797)
    subscript_call_result_274996 = invoke(stypy.reporting.localization.Localization(__file__, 797, 16), getitem___274995, slice_274993)
    
    # Applying the binary operator '+' (line 797)
    result_add_274997 = python_operator(stypy.reporting.localization.Localization(__file__, 797, 11), '+', fc_274991, subscript_call_result_274996)
    
    # Assigning a type to the variable 'sndx' (line 797)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 797, 4), 'sndx', result_add_274997)
    
    # Assigning a Call to a Name (line 800):
    
    # Assigning a Call to a Name (line 800):
    
    # Call to replace(...): (line 800)
    # Processing the call arguments (line 800)
    unicode_275000 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 800, 24), 'unicode', u'0')
    unicode_275001 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 800, 29), 'unicode', u'')
    # Processing the call keyword arguments (line 800)
    kwargs_275002 = {}
    # Getting the type of 'sndx' (line 800)
    sndx_274998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 11), 'sndx', False)
    # Obtaining the member 'replace' of a type (line 800)
    replace_274999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 800, 11), sndx_274998, 'replace')
    # Calling replace(args, kwargs) (line 800)
    replace_call_result_275003 = invoke(stypy.reporting.localization.Localization(__file__, 800, 11), replace_274999, *[unicode_275000, unicode_275001], **kwargs_275002)
    
    # Assigning a type to the variable 'sndx' (line 800)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 800, 4), 'sndx', replace_call_result_275003)
    
    # Obtaining the type of the subscript
    # Getting the type of 'len' (line 803)
    len_275004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 33), 'len')
    slice_275005 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 803, 12), None, len_275004, None)
    # Getting the type of 'sndx' (line 803)
    sndx_275006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 12), 'sndx')
    # Getting the type of 'len' (line 803)
    len_275007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 20), 'len')
    unicode_275008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 803, 26), 'unicode', u'0')
    # Applying the binary operator '*' (line 803)
    result_mul_275009 = python_operator(stypy.reporting.localization.Localization(__file__, 803, 20), '*', len_275007, unicode_275008)
    
    # Applying the binary operator '+' (line 803)
    result_add_275010 = python_operator(stypy.reporting.localization.Localization(__file__, 803, 12), '+', sndx_275006, result_mul_275009)
    
    # Obtaining the member '__getitem__' of a type (line 803)
    getitem___275011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 803, 12), result_add_275010, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 803)
    subscript_call_result_275012 = invoke(stypy.reporting.localization.Localization(__file__, 803, 12), getitem___275011, slice_275005)
    
    # Assigning a type to the variable 'stypy_return_type' (line 803)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 803, 4), 'stypy_return_type', subscript_call_result_275012)
    
    # ################# End of 'soundex(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'soundex' in the type store
    # Getting the type of 'stypy_return_type' (line 777)
    stypy_return_type_275013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275013)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'soundex'
    return stypy_return_type_275013

# Assigning a type to the variable 'soundex' (line 777)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 777, 0), 'soundex', soundex)
# Declaration of the 'Null' class

class Null(object, ):
    unicode_275014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 808, 4), 'unicode', u' Null objects always and reliably "do nothing." ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 810, 4, False)
        # Assigning a type to the variable 'self' (line 811)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 811, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Null.__init__', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 813, 4, False)
        # Assigning a type to the variable 'self' (line 814)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 814, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Null.__call__.__dict__.__setitem__('stypy_localization', localization)
        Null.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Null.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Null.__call__.__dict__.__setitem__('stypy_function_name', 'Null.__call__')
        Null.__call__.__dict__.__setitem__('stypy_param_names_list', [])
        Null.__call__.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        Null.__call__.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        Null.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Null.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Null.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Null.__call__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Null.__call__', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        # Getting the type of 'self' (line 814)
        self_275015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 15), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 814)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 814, 8), 'stypy_return_type', self_275015)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 813)
        stypy_return_type_275016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_275016)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_275016


    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 816, 4, False)
        # Assigning a type to the variable 'self' (line 817)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 817, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Null.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        Null.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Null.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Null.stypy__str__.__dict__.__setitem__('stypy_function_name', 'Null.stypy__str__')
        Null.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        Null.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Null.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Null.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Null.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Null.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Null.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Null.stypy__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        unicode_275017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 817, 15), 'unicode', u'Null()')
        # Assigning a type to the variable 'stypy_return_type' (line 817)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 817, 8), 'stypy_return_type', unicode_275017)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 816)
        stypy_return_type_275018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_275018)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_275018


    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 819, 4, False)
        # Assigning a type to the variable 'self' (line 820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 820, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Null.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        Null.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Null.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Null.stypy__repr__.__dict__.__setitem__('stypy_function_name', 'Null.stypy__repr__')
        Null.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        Null.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Null.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Null.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Null.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Null.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Null.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Null.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        unicode_275019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 820, 15), 'unicode', u'Null()')
        # Assigning a type to the variable 'stypy_return_type' (line 820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 820, 8), 'stypy_return_type', unicode_275019)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 819)
        stypy_return_type_275020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_275020)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_275020


    @norecursion
    def __getattr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__getattr__'
        module_type_store = module_type_store.open_function_context('__getattr__', 829, 4, False)
        # Assigning a type to the variable 'self' (line 830)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 830, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Null.__getattr__.__dict__.__setitem__('stypy_localization', localization)
        Null.__getattr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Null.__getattr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Null.__getattr__.__dict__.__setitem__('stypy_function_name', 'Null.__getattr__')
        Null.__getattr__.__dict__.__setitem__('stypy_param_names_list', ['name'])
        Null.__getattr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Null.__getattr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Null.__getattr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Null.__getattr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Null.__getattr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Null.__getattr__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Null.__getattr__', ['name'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__getattr__', localization, ['name'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__getattr__(...)' code ##################

        # Getting the type of 'self' (line 830)
        self_275021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 15), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 830)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 830, 8), 'stypy_return_type', self_275021)
        
        # ################# End of '__getattr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__getattr__' in the type store
        # Getting the type of 'stypy_return_type' (line 829)
        stypy_return_type_275022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_275022)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__getattr__'
        return stypy_return_type_275022


    @norecursion
    def __setattr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__setattr__'
        module_type_store = module_type_store.open_function_context('__setattr__', 832, 4, False)
        # Assigning a type to the variable 'self' (line 833)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 833, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Null.__setattr__.__dict__.__setitem__('stypy_localization', localization)
        Null.__setattr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Null.__setattr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Null.__setattr__.__dict__.__setitem__('stypy_function_name', 'Null.__setattr__')
        Null.__setattr__.__dict__.__setitem__('stypy_param_names_list', ['name', 'value'])
        Null.__setattr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Null.__setattr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Null.__setattr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Null.__setattr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Null.__setattr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Null.__setattr__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Null.__setattr__', ['name', 'value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__setattr__', localization, ['name', 'value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__setattr__(...)' code ##################

        # Getting the type of 'self' (line 833)
        self_275023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 15), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 833)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 833, 8), 'stypy_return_type', self_275023)
        
        # ################# End of '__setattr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__setattr__' in the type store
        # Getting the type of 'stypy_return_type' (line 832)
        stypy_return_type_275024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_275024)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__setattr__'
        return stypy_return_type_275024


    @norecursion
    def __delattr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__delattr__'
        module_type_store = module_type_store.open_function_context('__delattr__', 835, 4, False)
        # Assigning a type to the variable 'self' (line 836)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 836, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Null.__delattr__.__dict__.__setitem__('stypy_localization', localization)
        Null.__delattr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Null.__delattr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Null.__delattr__.__dict__.__setitem__('stypy_function_name', 'Null.__delattr__')
        Null.__delattr__.__dict__.__setitem__('stypy_param_names_list', ['name'])
        Null.__delattr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Null.__delattr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Null.__delattr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Null.__delattr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Null.__delattr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Null.__delattr__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Null.__delattr__', ['name'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__delattr__', localization, ['name'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__delattr__(...)' code ##################

        # Getting the type of 'self' (line 836)
        self_275025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 15), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 836)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 836, 8), 'stypy_return_type', self_275025)
        
        # ################# End of '__delattr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__delattr__' in the type store
        # Getting the type of 'stypy_return_type' (line 835)
        stypy_return_type_275026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_275026)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__delattr__'
        return stypy_return_type_275026


# Assigning a type to the variable 'Null' (line 806)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 806, 0), 'Null', Null)

# Getting the type of 'six' (line 822)
six_275027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 7), 'six')
# Obtaining the member 'PY3' of a type (line 822)
PY3_275028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 822, 7), six_275027, 'PY3')
# Testing the type of an if condition (line 822)
if_condition_275029 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 822, 4), PY3_275028)
# Assigning a type to the variable 'if_condition_275029' (line 822)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 822, 4), 'if_condition_275029', if_condition_275029)
# SSA begins for if statement (line 822)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

@norecursion
def __bool__(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '__bool__'
    module_type_store = module_type_store.open_function_context('__bool__', 823, 8, False)
    
    # Passed parameters checking function
    __bool__.stypy_localization = localization
    __bool__.stypy_type_of_self = None
    __bool__.stypy_type_store = module_type_store
    __bool__.stypy_function_name = '__bool__'
    __bool__.stypy_param_names_list = ['self']
    __bool__.stypy_varargs_param_name = None
    __bool__.stypy_kwargs_param_name = None
    __bool__.stypy_call_defaults = defaults
    __bool__.stypy_call_varargs = varargs
    __bool__.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '__bool__', ['self'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '__bool__', localization, ['self'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '__bool__(...)' code ##################

    int_275030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 824, 19), 'int')
    # Assigning a type to the variable 'stypy_return_type' (line 824)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 824, 12), 'stypy_return_type', int_275030)
    
    # ################# End of '__bool__(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '__bool__' in the type store
    # Getting the type of 'stypy_return_type' (line 823)
    stypy_return_type_275031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 8), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275031)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '__bool__'
    return stypy_return_type_275031

# Assigning a type to the variable '__bool__' (line 823)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 823, 8), '__bool__', __bool__)
# SSA branch for the else part of an if statement (line 822)
module_type_store.open_ssa_branch('else')

@norecursion
def __nonzero__(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '__nonzero__'
    module_type_store = module_type_store.open_function_context('__nonzero__', 826, 8, False)
    
    # Passed parameters checking function
    __nonzero__.stypy_localization = localization
    __nonzero__.stypy_type_of_self = None
    __nonzero__.stypy_type_store = module_type_store
    __nonzero__.stypy_function_name = '__nonzero__'
    __nonzero__.stypy_param_names_list = ['self']
    __nonzero__.stypy_varargs_param_name = None
    __nonzero__.stypy_kwargs_param_name = None
    __nonzero__.stypy_call_defaults = defaults
    __nonzero__.stypy_call_varargs = varargs
    __nonzero__.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '__nonzero__', ['self'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '__nonzero__', localization, ['self'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '__nonzero__(...)' code ##################

    int_275032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 827, 19), 'int')
    # Assigning a type to the variable 'stypy_return_type' (line 827)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 827, 12), 'stypy_return_type', int_275032)
    
    # ################# End of '__nonzero__(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '__nonzero__' in the type store
    # Getting the type of 'stypy_return_type' (line 826)
    stypy_return_type_275033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 8), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275033)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '__nonzero__'
    return stypy_return_type_275033

# Assigning a type to the variable '__nonzero__' (line 826)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 826, 8), '__nonzero__', __nonzero__)
# SSA join for if statement (line 822)
module_type_store = module_type_store.join_ssa_context()


@norecursion
def mkdirs(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_275034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 839, 24), 'int')
    defaults = [int_275034]
    # Create a new context for function 'mkdirs'
    module_type_store = module_type_store.open_function_context('mkdirs', 839, 0, False)
    
    # Passed parameters checking function
    mkdirs.stypy_localization = localization
    mkdirs.stypy_type_of_self = None
    mkdirs.stypy_type_store = module_type_store
    mkdirs.stypy_function_name = 'mkdirs'
    mkdirs.stypy_param_names_list = ['newdir', 'mode']
    mkdirs.stypy_varargs_param_name = None
    mkdirs.stypy_kwargs_param_name = None
    mkdirs.stypy_call_defaults = defaults
    mkdirs.stypy_call_varargs = varargs
    mkdirs.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'mkdirs', ['newdir', 'mode'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'mkdirs', localization, ['newdir', 'mode'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'mkdirs(...)' code ##################

    unicode_275035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 845, (-1)), 'unicode', u'\n    make directory *newdir* recursively, and set *mode*.  Equivalent to ::\n\n        > mkdir -p NEWDIR\n        > chmod MODE NEWDIR\n    ')
    
    # Getting the type of 'six' (line 848)
    six_275036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 7), 'six')
    # Obtaining the member 'PY3' of a type (line 848)
    PY3_275037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 848, 7), six_275036, 'PY3')
    # Testing the type of an if condition (line 848)
    if_condition_275038 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 848, 4), PY3_275037)
    # Assigning a type to the variable 'if_condition_275038' (line 848)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 848, 4), 'if_condition_275038', if_condition_275038)
    # SSA begins for if statement (line 848)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to makedirs(...): (line 849)
    # Processing the call arguments (line 849)
    # Getting the type of 'newdir' (line 849)
    newdir_275041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 20), 'newdir', False)
    # Processing the call keyword arguments (line 849)
    # Getting the type of 'mode' (line 849)
    mode_275042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 33), 'mode', False)
    keyword_275043 = mode_275042
    # Getting the type of 'True' (line 849)
    True_275044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 48), 'True', False)
    keyword_275045 = True_275044
    kwargs_275046 = {'exist_ok': keyword_275045, 'mode': keyword_275043}
    # Getting the type of 'os' (line 849)
    os_275039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 8), 'os', False)
    # Obtaining the member 'makedirs' of a type (line 849)
    makedirs_275040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 849, 8), os_275039, 'makedirs')
    # Calling makedirs(args, kwargs) (line 849)
    makedirs_call_result_275047 = invoke(stypy.reporting.localization.Localization(__file__, 849, 8), makedirs_275040, *[newdir_275041], **kwargs_275046)
    
    # SSA branch for the else part of an if statement (line 848)
    module_type_store.open_ssa_branch('else')
    
    
    # SSA begins for try-except statement (line 851)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to makedirs(...): (line 852)
    # Processing the call arguments (line 852)
    # Getting the type of 'newdir' (line 852)
    newdir_275050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 852, 24), 'newdir', False)
    # Processing the call keyword arguments (line 852)
    # Getting the type of 'mode' (line 852)
    mode_275051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 852, 37), 'mode', False)
    keyword_275052 = mode_275051
    kwargs_275053 = {'mode': keyword_275052}
    # Getting the type of 'os' (line 852)
    os_275048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 852, 12), 'os', False)
    # Obtaining the member 'makedirs' of a type (line 852)
    makedirs_275049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 852, 12), os_275048, 'makedirs')
    # Calling makedirs(args, kwargs) (line 852)
    makedirs_call_result_275054 = invoke(stypy.reporting.localization.Localization(__file__, 852, 12), makedirs_275049, *[newdir_275050], **kwargs_275053)
    
    # SSA branch for the except part of a try statement (line 851)
    # SSA branch for the except 'OSError' branch of a try statement (line 851)
    # Storing handler type
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'OSError' (line 853)
    OSError_275055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 15), 'OSError')
    # Assigning a type to the variable 'exception' (line 853)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 853, 8), 'exception', OSError_275055)
    
    
    # Getting the type of 'exception' (line 854)
    exception_275056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 854, 15), 'exception')
    # Obtaining the member 'errno' of a type (line 854)
    errno_275057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 854, 15), exception_275056, 'errno')
    # Getting the type of 'errno' (line 854)
    errno_275058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 854, 34), 'errno')
    # Obtaining the member 'EEXIST' of a type (line 854)
    EEXIST_275059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 854, 34), errno_275058, 'EEXIST')
    # Applying the binary operator '!=' (line 854)
    result_ne_275060 = python_operator(stypy.reporting.localization.Localization(__file__, 854, 15), '!=', errno_275057, EEXIST_275059)
    
    # Testing the type of an if condition (line 854)
    if_condition_275061 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 854, 12), result_ne_275060)
    # Assigning a type to the variable 'if_condition_275061' (line 854)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 854, 12), 'if_condition_275061', if_condition_275061)
    # SSA begins for if statement (line 854)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 854)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for try-except statement (line 851)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 848)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'mkdirs(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'mkdirs' in the type store
    # Getting the type of 'stypy_return_type' (line 839)
    stypy_return_type_275062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275062)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'mkdirs'
    return stypy_return_type_275062

# Assigning a type to the variable 'mkdirs' (line 839)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 839, 0), 'mkdirs', mkdirs)
# Declaration of the 'GetRealpathAndStat' class

class GetRealpathAndStat(object, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 859, 4, False)
        # Assigning a type to the variable 'self' (line 860)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 860, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GetRealpathAndStat.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Dict to a Attribute (line 860):
        
        # Assigning a Dict to a Attribute (line 860):
        
        # Obtaining an instance of the builtin type 'dict' (line 860)
        dict_275063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 860, 22), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 860)
        
        # Getting the type of 'self' (line 860)
        self_275064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 8), 'self')
        # Setting the type of the member '_cache' of a type (line 860)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 860, 8), self_275064, '_cache', dict_275063)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 862, 4, False)
        # Assigning a type to the variable 'self' (line 863)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 863, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GetRealpathAndStat.__call__.__dict__.__setitem__('stypy_localization', localization)
        GetRealpathAndStat.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GetRealpathAndStat.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        GetRealpathAndStat.__call__.__dict__.__setitem__('stypy_function_name', 'GetRealpathAndStat.__call__')
        GetRealpathAndStat.__call__.__dict__.__setitem__('stypy_param_names_list', ['path'])
        GetRealpathAndStat.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        GetRealpathAndStat.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GetRealpathAndStat.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        GetRealpathAndStat.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        GetRealpathAndStat.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GetRealpathAndStat.__call__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GetRealpathAndStat.__call__', ['path'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['path'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        # Assigning a Call to a Name (line 863):
        
        # Assigning a Call to a Name (line 863):
        
        # Call to get(...): (line 863)
        # Processing the call arguments (line 863)
        # Getting the type of 'path' (line 863)
        path_275068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 33), 'path', False)
        # Processing the call keyword arguments (line 863)
        kwargs_275069 = {}
        # Getting the type of 'self' (line 863)
        self_275065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 17), 'self', False)
        # Obtaining the member '_cache' of a type (line 863)
        _cache_275066 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 863, 17), self_275065, '_cache')
        # Obtaining the member 'get' of a type (line 863)
        get_275067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 863, 17), _cache_275066, 'get')
        # Calling get(args, kwargs) (line 863)
        get_call_result_275070 = invoke(stypy.reporting.localization.Localization(__file__, 863, 17), get_275067, *[path_275068], **kwargs_275069)
        
        # Assigning a type to the variable 'result' (line 863)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 863, 8), 'result', get_call_result_275070)
        
        # Type idiom detected: calculating its left and rigth part (line 864)
        # Getting the type of 'result' (line 864)
        result_275071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 11), 'result')
        # Getting the type of 'None' (line 864)
        None_275072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 21), 'None')
        
        (may_be_275073, more_types_in_union_275074) = may_be_none(result_275071, None_275072)

        if may_be_275073:

            if more_types_in_union_275074:
                # Runtime conditional SSA (line 864)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 865):
            
            # Assigning a Call to a Name (line 865):
            
            # Call to realpath(...): (line 865)
            # Processing the call arguments (line 865)
            # Getting the type of 'path' (line 865)
            path_275078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 40), 'path', False)
            # Processing the call keyword arguments (line 865)
            kwargs_275079 = {}
            # Getting the type of 'os' (line 865)
            os_275075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 23), 'os', False)
            # Obtaining the member 'path' of a type (line 865)
            path_275076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 865, 23), os_275075, 'path')
            # Obtaining the member 'realpath' of a type (line 865)
            realpath_275077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 865, 23), path_275076, 'realpath')
            # Calling realpath(args, kwargs) (line 865)
            realpath_call_result_275080 = invoke(stypy.reporting.localization.Localization(__file__, 865, 23), realpath_275077, *[path_275078], **kwargs_275079)
            
            # Assigning a type to the variable 'realpath' (line 865)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 865, 12), 'realpath', realpath_call_result_275080)
            
            
            # Getting the type of 'sys' (line 866)
            sys_275081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 15), 'sys')
            # Obtaining the member 'platform' of a type (line 866)
            platform_275082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 866, 15), sys_275081, 'platform')
            unicode_275083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 866, 31), 'unicode', u'win32')
            # Applying the binary operator '==' (line 866)
            result_eq_275084 = python_operator(stypy.reporting.localization.Localization(__file__, 866, 15), '==', platform_275082, unicode_275083)
            
            # Testing the type of an if condition (line 866)
            if_condition_275085 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 866, 12), result_eq_275084)
            # Assigning a type to the variable 'if_condition_275085' (line 866)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 866, 12), 'if_condition_275085', if_condition_275085)
            # SSA begins for if statement (line 866)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Name (line 867):
            
            # Assigning a Name to a Name (line 867):
            # Getting the type of 'realpath' (line 867)
            realpath_275086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 27), 'realpath')
            # Assigning a type to the variable 'stat_key' (line 867)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 867, 16), 'stat_key', realpath_275086)
            # SSA branch for the else part of an if statement (line 866)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Call to a Name (line 869):
            
            # Assigning a Call to a Name (line 869):
            
            # Call to stat(...): (line 869)
            # Processing the call arguments (line 869)
            # Getting the type of 'realpath' (line 869)
            realpath_275089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 31), 'realpath', False)
            # Processing the call keyword arguments (line 869)
            kwargs_275090 = {}
            # Getting the type of 'os' (line 869)
            os_275087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 23), 'os', False)
            # Obtaining the member 'stat' of a type (line 869)
            stat_275088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 869, 23), os_275087, 'stat')
            # Calling stat(args, kwargs) (line 869)
            stat_call_result_275091 = invoke(stypy.reporting.localization.Localization(__file__, 869, 23), stat_275088, *[realpath_275089], **kwargs_275090)
            
            # Assigning a type to the variable 'stat' (line 869)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 869, 16), 'stat', stat_call_result_275091)
            
            # Assigning a Tuple to a Name (line 870):
            
            # Assigning a Tuple to a Name (line 870):
            
            # Obtaining an instance of the builtin type 'tuple' (line 870)
            tuple_275092 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 870, 28), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 870)
            # Adding element type (line 870)
            # Getting the type of 'stat' (line 870)
            stat_275093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 28), 'stat')
            # Obtaining the member 'st_ino' of a type (line 870)
            st_ino_275094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 870, 28), stat_275093, 'st_ino')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 870, 28), tuple_275092, st_ino_275094)
            # Adding element type (line 870)
            # Getting the type of 'stat' (line 870)
            stat_275095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 41), 'stat')
            # Obtaining the member 'st_dev' of a type (line 870)
            st_dev_275096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 870, 41), stat_275095, 'st_dev')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 870, 28), tuple_275092, st_dev_275096)
            
            # Assigning a type to the variable 'stat_key' (line 870)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 870, 16), 'stat_key', tuple_275092)
            # SSA join for if statement (line 866)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Tuple to a Name (line 871):
            
            # Assigning a Tuple to a Name (line 871):
            
            # Obtaining an instance of the builtin type 'tuple' (line 871)
            tuple_275097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 871, 21), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 871)
            # Adding element type (line 871)
            # Getting the type of 'realpath' (line 871)
            realpath_275098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 21), 'realpath')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 871, 21), tuple_275097, realpath_275098)
            # Adding element type (line 871)
            # Getting the type of 'stat_key' (line 871)
            stat_key_275099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 31), 'stat_key')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 871, 21), tuple_275097, stat_key_275099)
            
            # Assigning a type to the variable 'result' (line 871)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 871, 12), 'result', tuple_275097)
            
            # Assigning a Name to a Subscript (line 872):
            
            # Assigning a Name to a Subscript (line 872):
            # Getting the type of 'result' (line 872)
            result_275100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 872, 32), 'result')
            # Getting the type of 'self' (line 872)
            self_275101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 872, 12), 'self')
            # Obtaining the member '_cache' of a type (line 872)
            _cache_275102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 872, 12), self_275101, '_cache')
            # Getting the type of 'path' (line 872)
            path_275103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 872, 24), 'path')
            # Storing an element on a container (line 872)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 872, 12), _cache_275102, (path_275103, result_275100))

            if more_types_in_union_275074:
                # SSA join for if statement (line 864)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'result' (line 873)
        result_275104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 15), 'result')
        # Assigning a type to the variable 'stypy_return_type' (line 873)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 873, 8), 'stypy_return_type', result_275104)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 862)
        stypy_return_type_275105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 862, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_275105)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_275105


# Assigning a type to the variable 'GetRealpathAndStat' (line 858)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 858, 0), 'GetRealpathAndStat', GetRealpathAndStat)

# Assigning a Call to a Name (line 876):

# Assigning a Call to a Name (line 876):

# Call to GetRealpathAndStat(...): (line 876)
# Processing the call keyword arguments (line 876)
kwargs_275107 = {}
# Getting the type of 'GetRealpathAndStat' (line 876)
GetRealpathAndStat_275106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 24), 'GetRealpathAndStat', False)
# Calling GetRealpathAndStat(args, kwargs) (line 876)
GetRealpathAndStat_call_result_275108 = invoke(stypy.reporting.localization.Localization(__file__, 876, 24), GetRealpathAndStat_275106, *[], **kwargs_275107)

# Assigning a type to the variable 'get_realpath_and_stat' (line 876)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 876, 0), 'get_realpath_and_stat', GetRealpathAndStat_call_result_275108)

@norecursion
def dict_delall(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'dict_delall'
    module_type_store = module_type_store.open_function_context('dict_delall', 879, 0, False)
    
    # Passed parameters checking function
    dict_delall.stypy_localization = localization
    dict_delall.stypy_type_of_self = None
    dict_delall.stypy_type_store = module_type_store
    dict_delall.stypy_function_name = 'dict_delall'
    dict_delall.stypy_param_names_list = ['d', 'keys']
    dict_delall.stypy_varargs_param_name = None
    dict_delall.stypy_kwargs_param_name = None
    dict_delall.stypy_call_defaults = defaults
    dict_delall.stypy_call_varargs = varargs
    dict_delall.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'dict_delall', ['d', 'keys'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'dict_delall', localization, ['d', 'keys'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'dict_delall(...)' code ##################

    unicode_275109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 881, 4), 'unicode', u'delete all of the *keys* from the :class:`dict` *d*')
    
    # Getting the type of 'keys' (line 882)
    keys_275110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 15), 'keys')
    # Testing the type of a for loop iterable (line 882)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 882, 4), keys_275110)
    # Getting the type of the for loop variable (line 882)
    for_loop_var_275111 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 882, 4), keys_275110)
    # Assigning a type to the variable 'key' (line 882)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 882, 4), 'key', for_loop_var_275111)
    # SSA begins for a for statement (line 882)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # SSA begins for try-except statement (line 883)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    # Deleting a member
    # Getting the type of 'd' (line 884)
    d_275112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 16), 'd')
    
    # Obtaining the type of the subscript
    # Getting the type of 'key' (line 884)
    key_275113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 18), 'key')
    # Getting the type of 'd' (line 884)
    d_275114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 16), 'd')
    # Obtaining the member '__getitem__' of a type (line 884)
    getitem___275115 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 884, 16), d_275114, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 884)
    subscript_call_result_275116 = invoke(stypy.reporting.localization.Localization(__file__, 884, 16), getitem___275115, key_275113)
    
    del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 884, 12), d_275112, subscript_call_result_275116)
    # SSA branch for the except part of a try statement (line 883)
    # SSA branch for the except 'KeyError' branch of a try statement (line 883)
    module_type_store.open_ssa_branch('except')
    pass
    # SSA join for try-except statement (line 883)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'dict_delall(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'dict_delall' in the type store
    # Getting the type of 'stypy_return_type' (line 879)
    stypy_return_type_275117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275117)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'dict_delall'
    return stypy_return_type_275117

# Assigning a type to the variable 'dict_delall' (line 879)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 879, 0), 'dict_delall', dict_delall)
# Declaration of the 'RingBuffer' class

class RingBuffer(object, ):
    unicode_275118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 891, 4), 'unicode', u' class that implements a not-yet-full buffer ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 892, 4, False)
        # Assigning a type to the variable 'self' (line 893)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 893, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RingBuffer.__init__', ['size_max'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['size_max'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 893):
        
        # Assigning a Name to a Attribute (line 893):
        # Getting the type of 'size_max' (line 893)
        size_max_275119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 19), 'size_max')
        # Getting the type of 'self' (line 893)
        self_275120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 8), 'self')
        # Setting the type of the member 'max' of a type (line 893)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 893, 8), self_275120, 'max', size_max_275119)
        
        # Assigning a List to a Attribute (line 894):
        
        # Assigning a List to a Attribute (line 894):
        
        # Obtaining an instance of the builtin type 'list' (line 894)
        list_275121 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 894, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 894)
        
        # Getting the type of 'self' (line 894)
        self_275122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 8), 'self')
        # Setting the type of the member 'data' of a type (line 894)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 894, 8), self_275122, 'data', list_275121)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()

    # Declaration of the '__Full' class

    class __Full:
        unicode_275123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 897, 8), 'unicode', u' class that implements a full buffer ')

        @norecursion
        def append(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'append'
            module_type_store = module_type_store.open_function_context('append', 898, 8, False)
            # Assigning a type to the variable 'self' (line 899)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 899, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            __Full.append.__dict__.__setitem__('stypy_localization', localization)
            __Full.append.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            __Full.append.__dict__.__setitem__('stypy_type_store', module_type_store)
            __Full.append.__dict__.__setitem__('stypy_function_name', '__Full.append')
            __Full.append.__dict__.__setitem__('stypy_param_names_list', ['x'])
            __Full.append.__dict__.__setitem__('stypy_varargs_param_name', None)
            __Full.append.__dict__.__setitem__('stypy_kwargs_param_name', None)
            __Full.append.__dict__.__setitem__('stypy_call_defaults', defaults)
            __Full.append.__dict__.__setitem__('stypy_call_varargs', varargs)
            __Full.append.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            __Full.append.__dict__.__setitem__('stypy_declared_arg_number', 2)
            arguments = process_argument_values(localization, type_of_self, module_type_store, '__Full.append', ['x'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'append', localization, ['x'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'append(...)' code ##################

            unicode_275124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 899, 12), 'unicode', u' Append an element overwriting the oldest one. ')
            
            # Assigning a Name to a Subscript (line 900):
            
            # Assigning a Name to a Subscript (line 900):
            # Getting the type of 'x' (line 900)
            x_275125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 34), 'x')
            # Getting the type of 'self' (line 900)
            self_275126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 12), 'self')
            # Obtaining the member 'data' of a type (line 900)
            data_275127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 900, 12), self_275126, 'data')
            # Getting the type of 'self' (line 900)
            self_275128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 22), 'self')
            # Obtaining the member 'cur' of a type (line 900)
            cur_275129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 900, 22), self_275128, 'cur')
            # Storing an element on a container (line 900)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 900, 12), data_275127, (cur_275129, x_275125))
            
            # Assigning a BinOp to a Attribute (line 901):
            
            # Assigning a BinOp to a Attribute (line 901):
            # Getting the type of 'self' (line 901)
            self_275130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 24), 'self')
            # Obtaining the member 'cur' of a type (line 901)
            cur_275131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 901, 24), self_275130, 'cur')
            int_275132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 901, 35), 'int')
            # Applying the binary operator '+' (line 901)
            result_add_275133 = python_operator(stypy.reporting.localization.Localization(__file__, 901, 24), '+', cur_275131, int_275132)
            
            # Getting the type of 'self' (line 901)
            self_275134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 40), 'self')
            # Obtaining the member 'max' of a type (line 901)
            max_275135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 901, 40), self_275134, 'max')
            # Applying the binary operator '%' (line 901)
            result_mod_275136 = python_operator(stypy.reporting.localization.Localization(__file__, 901, 23), '%', result_add_275133, max_275135)
            
            # Getting the type of 'self' (line 901)
            self_275137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 12), 'self')
            # Setting the type of the member 'cur' of a type (line 901)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 901, 12), self_275137, 'cur', result_mod_275136)
            
            # ################# End of 'append(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'append' in the type store
            # Getting the type of 'stypy_return_type' (line 898)
            stypy_return_type_275138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_275138)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'append'
            return stypy_return_type_275138


        @norecursion
        def get(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'get'
            module_type_store = module_type_store.open_function_context('get', 903, 8, False)
            # Assigning a type to the variable 'self' (line 904)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 904, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            __Full.get.__dict__.__setitem__('stypy_localization', localization)
            __Full.get.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            __Full.get.__dict__.__setitem__('stypy_type_store', module_type_store)
            __Full.get.__dict__.__setitem__('stypy_function_name', '__Full.get')
            __Full.get.__dict__.__setitem__('stypy_param_names_list', [])
            __Full.get.__dict__.__setitem__('stypy_varargs_param_name', None)
            __Full.get.__dict__.__setitem__('stypy_kwargs_param_name', None)
            __Full.get.__dict__.__setitem__('stypy_call_defaults', defaults)
            __Full.get.__dict__.__setitem__('stypy_call_varargs', varargs)
            __Full.get.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            __Full.get.__dict__.__setitem__('stypy_declared_arg_number', 1)
            arguments = process_argument_values(localization, type_of_self, module_type_store, '__Full.get', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'get', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'get(...)' code ##################

            unicode_275139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 904, 12), 'unicode', u' return list of elements in correct order ')
            
            # Obtaining the type of the subscript
            # Getting the type of 'self' (line 905)
            self_275140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 29), 'self')
            # Obtaining the member 'cur' of a type (line 905)
            cur_275141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 905, 29), self_275140, 'cur')
            slice_275142 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 905, 19), cur_275141, None, None)
            # Getting the type of 'self' (line 905)
            self_275143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 19), 'self')
            # Obtaining the member 'data' of a type (line 905)
            data_275144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 905, 19), self_275143, 'data')
            # Obtaining the member '__getitem__' of a type (line 905)
            getitem___275145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 905, 19), data_275144, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 905)
            subscript_call_result_275146 = invoke(stypy.reporting.localization.Localization(__file__, 905, 19), getitem___275145, slice_275142)
            
            
            # Obtaining the type of the subscript
            # Getting the type of 'self' (line 905)
            self_275147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 53), 'self')
            # Obtaining the member 'cur' of a type (line 905)
            cur_275148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 905, 53), self_275147, 'cur')
            slice_275149 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 905, 42), None, cur_275148, None)
            # Getting the type of 'self' (line 905)
            self_275150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 42), 'self')
            # Obtaining the member 'data' of a type (line 905)
            data_275151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 905, 42), self_275150, 'data')
            # Obtaining the member '__getitem__' of a type (line 905)
            getitem___275152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 905, 42), data_275151, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 905)
            subscript_call_result_275153 = invoke(stypy.reporting.localization.Localization(__file__, 905, 42), getitem___275152, slice_275149)
            
            # Applying the binary operator '+' (line 905)
            result_add_275154 = python_operator(stypy.reporting.localization.Localization(__file__, 905, 19), '+', subscript_call_result_275146, subscript_call_result_275153)
            
            # Assigning a type to the variable 'stypy_return_type' (line 905)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 905, 12), 'stypy_return_type', result_add_275154)
            
            # ################# End of 'get(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'get' in the type store
            # Getting the type of 'stypy_return_type' (line 903)
            stypy_return_type_275155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_275155)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'get'
            return stypy_return_type_275155

    
    # Assigning a type to the variable '__Full' (line 896)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 896, 4), '__Full', __Full)

    @norecursion
    def append(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'append'
        module_type_store = module_type_store.open_function_context('append', 907, 4, False)
        # Assigning a type to the variable 'self' (line 908)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 908, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RingBuffer.append.__dict__.__setitem__('stypy_localization', localization)
        RingBuffer.append.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RingBuffer.append.__dict__.__setitem__('stypy_type_store', module_type_store)
        RingBuffer.append.__dict__.__setitem__('stypy_function_name', 'RingBuffer.append')
        RingBuffer.append.__dict__.__setitem__('stypy_param_names_list', ['x'])
        RingBuffer.append.__dict__.__setitem__('stypy_varargs_param_name', None)
        RingBuffer.append.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RingBuffer.append.__dict__.__setitem__('stypy_call_defaults', defaults)
        RingBuffer.append.__dict__.__setitem__('stypy_call_varargs', varargs)
        RingBuffer.append.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RingBuffer.append.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RingBuffer.append', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'append', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'append(...)' code ##################

        unicode_275156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 908, 8), 'unicode', u'append an element at the end of the buffer')
        
        # Call to append(...): (line 909)
        # Processing the call arguments (line 909)
        # Getting the type of 'x' (line 909)
        x_275160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 25), 'x', False)
        # Processing the call keyword arguments (line 909)
        kwargs_275161 = {}
        # Getting the type of 'self' (line 909)
        self_275157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 8), 'self', False)
        # Obtaining the member 'data' of a type (line 909)
        data_275158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 909, 8), self_275157, 'data')
        # Obtaining the member 'append' of a type (line 909)
        append_275159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 909, 8), data_275158, 'append')
        # Calling append(args, kwargs) (line 909)
        append_call_result_275162 = invoke(stypy.reporting.localization.Localization(__file__, 909, 8), append_275159, *[x_275160], **kwargs_275161)
        
        
        
        
        # Call to len(...): (line 910)
        # Processing the call arguments (line 910)
        # Getting the type of 'self' (line 910)
        self_275164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 15), 'self', False)
        # Obtaining the member 'data' of a type (line 910)
        data_275165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 910, 15), self_275164, 'data')
        # Processing the call keyword arguments (line 910)
        kwargs_275166 = {}
        # Getting the type of 'len' (line 910)
        len_275163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 11), 'len', False)
        # Calling len(args, kwargs) (line 910)
        len_call_result_275167 = invoke(stypy.reporting.localization.Localization(__file__, 910, 11), len_275163, *[data_275165], **kwargs_275166)
        
        # Getting the type of 'self' (line 910)
        self_275168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 29), 'self')
        # Obtaining the member 'max' of a type (line 910)
        max_275169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 910, 29), self_275168, 'max')
        # Applying the binary operator '==' (line 910)
        result_eq_275170 = python_operator(stypy.reporting.localization.Localization(__file__, 910, 11), '==', len_call_result_275167, max_275169)
        
        # Testing the type of an if condition (line 910)
        if_condition_275171 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 910, 8), result_eq_275170)
        # Assigning a type to the variable 'if_condition_275171' (line 910)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 910, 8), 'if_condition_275171', if_condition_275171)
        # SSA begins for if statement (line 910)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Attribute (line 911):
        
        # Assigning a Num to a Attribute (line 911):
        int_275172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 911, 23), 'int')
        # Getting the type of 'self' (line 911)
        self_275173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 12), 'self')
        # Setting the type of the member 'cur' of a type (line 911)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 911, 12), self_275173, 'cur', int_275172)
        
        # Assigning a Name to a Attribute (line 913):
        
        # Assigning a Name to a Attribute (line 913):
        # Getting the type of '__Full' (line 913)
        Full_275174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 29), '__Full')
        # Getting the type of 'self' (line 913)
        self_275175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 12), 'self')
        # Setting the type of the member '__class__' of a type (line 913)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 913, 12), self_275175, '__class__', Full_275174)
        # SSA join for if statement (line 910)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'append(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'append' in the type store
        # Getting the type of 'stypy_return_type' (line 907)
        stypy_return_type_275176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 907, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_275176)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'append'
        return stypy_return_type_275176


    @norecursion
    def get(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get'
        module_type_store = module_type_store.open_function_context('get', 915, 4, False)
        # Assigning a type to the variable 'self' (line 916)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 916, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RingBuffer.get.__dict__.__setitem__('stypy_localization', localization)
        RingBuffer.get.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RingBuffer.get.__dict__.__setitem__('stypy_type_store', module_type_store)
        RingBuffer.get.__dict__.__setitem__('stypy_function_name', 'RingBuffer.get')
        RingBuffer.get.__dict__.__setitem__('stypy_param_names_list', [])
        RingBuffer.get.__dict__.__setitem__('stypy_varargs_param_name', None)
        RingBuffer.get.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RingBuffer.get.__dict__.__setitem__('stypy_call_defaults', defaults)
        RingBuffer.get.__dict__.__setitem__('stypy_call_varargs', varargs)
        RingBuffer.get.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RingBuffer.get.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RingBuffer.get', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get(...)' code ##################

        unicode_275177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 916, 8), 'unicode', u' Return a list of elements from the oldest to the newest. ')
        # Getting the type of 'self' (line 917)
        self_275178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 15), 'self')
        # Obtaining the member 'data' of a type (line 917)
        data_275179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 917, 15), self_275178, 'data')
        # Assigning a type to the variable 'stypy_return_type' (line 917)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 917, 8), 'stypy_return_type', data_275179)
        
        # ################# End of 'get(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get' in the type store
        # Getting the type of 'stypy_return_type' (line 915)
        stypy_return_type_275180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_275180)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get'
        return stypy_return_type_275180


    @norecursion
    def __get_item__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__get_item__'
        module_type_store = module_type_store.open_function_context('__get_item__', 919, 4, False)
        # Assigning a type to the variable 'self' (line 920)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 920, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RingBuffer.__get_item__.__dict__.__setitem__('stypy_localization', localization)
        RingBuffer.__get_item__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RingBuffer.__get_item__.__dict__.__setitem__('stypy_type_store', module_type_store)
        RingBuffer.__get_item__.__dict__.__setitem__('stypy_function_name', 'RingBuffer.__get_item__')
        RingBuffer.__get_item__.__dict__.__setitem__('stypy_param_names_list', ['i'])
        RingBuffer.__get_item__.__dict__.__setitem__('stypy_varargs_param_name', None)
        RingBuffer.__get_item__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RingBuffer.__get_item__.__dict__.__setitem__('stypy_call_defaults', defaults)
        RingBuffer.__get_item__.__dict__.__setitem__('stypy_call_varargs', varargs)
        RingBuffer.__get_item__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RingBuffer.__get_item__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RingBuffer.__get_item__', ['i'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__get_item__', localization, ['i'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__get_item__(...)' code ##################

        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 920)
        i_275181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 25), 'i')
        
        # Call to len(...): (line 920)
        # Processing the call arguments (line 920)
        # Getting the type of 'self' (line 920)
        self_275183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 33), 'self', False)
        # Obtaining the member 'data' of a type (line 920)
        data_275184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 920, 33), self_275183, 'data')
        # Processing the call keyword arguments (line 920)
        kwargs_275185 = {}
        # Getting the type of 'len' (line 920)
        len_275182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 29), 'len', False)
        # Calling len(args, kwargs) (line 920)
        len_call_result_275186 = invoke(stypy.reporting.localization.Localization(__file__, 920, 29), len_275182, *[data_275184], **kwargs_275185)
        
        # Applying the binary operator '%' (line 920)
        result_mod_275187 = python_operator(stypy.reporting.localization.Localization(__file__, 920, 25), '%', i_275181, len_call_result_275186)
        
        # Getting the type of 'self' (line 920)
        self_275188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 15), 'self')
        # Obtaining the member 'data' of a type (line 920)
        data_275189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 920, 15), self_275188, 'data')
        # Obtaining the member '__getitem__' of a type (line 920)
        getitem___275190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 920, 15), data_275189, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 920)
        subscript_call_result_275191 = invoke(stypy.reporting.localization.Localization(__file__, 920, 15), getitem___275190, result_mod_275187)
        
        # Assigning a type to the variable 'stypy_return_type' (line 920)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 920, 8), 'stypy_return_type', subscript_call_result_275191)
        
        # ################# End of '__get_item__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__get_item__' in the type store
        # Getting the type of 'stypy_return_type' (line 919)
        stypy_return_type_275192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_275192)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__get_item__'
        return stypy_return_type_275192


# Assigning a type to the variable 'RingBuffer' (line 889)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 889, 0), 'RingBuffer', RingBuffer)

@norecursion
def get_split_ind(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_split_ind'
    module_type_store = module_type_store.open_function_context('get_split_ind', 923, 0, False)
    
    # Passed parameters checking function
    get_split_ind.stypy_localization = localization
    get_split_ind.stypy_type_of_self = None
    get_split_ind.stypy_type_store = module_type_store
    get_split_ind.stypy_function_name = 'get_split_ind'
    get_split_ind.stypy_param_names_list = ['seq', 'N']
    get_split_ind.stypy_varargs_param_name = None
    get_split_ind.stypy_kwargs_param_name = None
    get_split_ind.stypy_call_defaults = defaults
    get_split_ind.stypy_call_varargs = varargs
    get_split_ind.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_split_ind', ['seq', 'N'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_split_ind', localization, ['seq', 'N'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_split_ind(...)' code ##################

    unicode_275193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 931, (-1)), 'unicode', u"\n    *seq* is a list of words.  Return the index into seq such that::\n\n        len(' '.join(seq[:ind])<=N\n\n    .\n    ")
    
    # Assigning a Num to a Name (line 933):
    
    # Assigning a Num to a Name (line 933):
    int_275194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 933, 12), 'int')
    # Assigning a type to the variable 's_len' (line 933)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 933, 4), 's_len', int_275194)
    
    
    # Call to zip(...): (line 935)
    # Processing the call arguments (line 935)
    # Getting the type of 'seq' (line 935)
    seq_275196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 27), 'seq', False)
    
    # Call to xrange(...): (line 935)
    # Processing the call arguments (line 935)
    
    # Call to len(...): (line 935)
    # Processing the call arguments (line 935)
    # Getting the type of 'seq' (line 935)
    seq_275199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 43), 'seq', False)
    # Processing the call keyword arguments (line 935)
    kwargs_275200 = {}
    # Getting the type of 'len' (line 935)
    len_275198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 39), 'len', False)
    # Calling len(args, kwargs) (line 935)
    len_call_result_275201 = invoke(stypy.reporting.localization.Localization(__file__, 935, 39), len_275198, *[seq_275199], **kwargs_275200)
    
    # Processing the call keyword arguments (line 935)
    kwargs_275202 = {}
    # Getting the type of 'xrange' (line 935)
    xrange_275197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 32), 'xrange', False)
    # Calling xrange(args, kwargs) (line 935)
    xrange_call_result_275203 = invoke(stypy.reporting.localization.Localization(__file__, 935, 32), xrange_275197, *[len_call_result_275201], **kwargs_275202)
    
    # Processing the call keyword arguments (line 935)
    kwargs_275204 = {}
    # Getting the type of 'zip' (line 935)
    zip_275195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 23), 'zip', False)
    # Calling zip(args, kwargs) (line 935)
    zip_call_result_275205 = invoke(stypy.reporting.localization.Localization(__file__, 935, 23), zip_275195, *[seq_275196, xrange_call_result_275203], **kwargs_275204)
    
    # Testing the type of a for loop iterable (line 935)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 935, 4), zip_call_result_275205)
    # Getting the type of the for loop variable (line 935)
    for_loop_var_275206 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 935, 4), zip_call_result_275205)
    # Assigning a type to the variable 'word' (line 935)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 935, 4), 'word', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 935, 4), for_loop_var_275206))
    # Assigning a type to the variable 'ind' (line 935)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 935, 4), 'ind', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 935, 4), for_loop_var_275206))
    # SSA begins for a for statement (line 935)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Getting the type of 's_len' (line 936)
    s_len_275207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 8), 's_len')
    
    # Call to len(...): (line 936)
    # Processing the call arguments (line 936)
    # Getting the type of 'word' (line 936)
    word_275209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 21), 'word', False)
    # Processing the call keyword arguments (line 936)
    kwargs_275210 = {}
    # Getting the type of 'len' (line 936)
    len_275208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 17), 'len', False)
    # Calling len(args, kwargs) (line 936)
    len_call_result_275211 = invoke(stypy.reporting.localization.Localization(__file__, 936, 17), len_275208, *[word_275209], **kwargs_275210)
    
    int_275212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 936, 29), 'int')
    # Applying the binary operator '+' (line 936)
    result_add_275213 = python_operator(stypy.reporting.localization.Localization(__file__, 936, 17), '+', len_call_result_275211, int_275212)
    
    # Applying the binary operator '+=' (line 936)
    result_iadd_275214 = python_operator(stypy.reporting.localization.Localization(__file__, 936, 8), '+=', s_len_275207, result_add_275213)
    # Assigning a type to the variable 's_len' (line 936)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 936, 8), 's_len', result_iadd_275214)
    
    
    
    # Getting the type of 's_len' (line 937)
    s_len_275215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 11), 's_len')
    # Getting the type of 'N' (line 937)
    N_275216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 20), 'N')
    # Applying the binary operator '>=' (line 937)
    result_ge_275217 = python_operator(stypy.reporting.localization.Localization(__file__, 937, 11), '>=', s_len_275215, N_275216)
    
    # Testing the type of an if condition (line 937)
    if_condition_275218 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 937, 8), result_ge_275217)
    # Assigning a type to the variable 'if_condition_275218' (line 937)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 937, 8), 'if_condition_275218', if_condition_275218)
    # SSA begins for if statement (line 937)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'ind' (line 938)
    ind_275219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 19), 'ind')
    # Assigning a type to the variable 'stypy_return_type' (line 938)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 12), 'stypy_return_type', ind_275219)
    # SSA join for if statement (line 937)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to len(...): (line 939)
    # Processing the call arguments (line 939)
    # Getting the type of 'seq' (line 939)
    seq_275221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 15), 'seq', False)
    # Processing the call keyword arguments (line 939)
    kwargs_275222 = {}
    # Getting the type of 'len' (line 939)
    len_275220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 11), 'len', False)
    # Calling len(args, kwargs) (line 939)
    len_call_result_275223 = invoke(stypy.reporting.localization.Localization(__file__, 939, 11), len_275220, *[seq_275221], **kwargs_275222)
    
    # Assigning a type to the variable 'stypy_return_type' (line 939)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 939, 4), 'stypy_return_type', len_call_result_275223)
    
    # ################# End of 'get_split_ind(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_split_ind' in the type store
    # Getting the type of 'stypy_return_type' (line 923)
    stypy_return_type_275224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275224)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_split_ind'
    return stypy_return_type_275224

# Assigning a type to the variable 'get_split_ind' (line 923)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 923, 0), 'get_split_ind', get_split_ind)

@norecursion
def wrap(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'wrap'
    module_type_store = module_type_store.open_function_context('wrap', 942, 0, False)
    
    # Passed parameters checking function
    wrap.stypy_localization = localization
    wrap.stypy_type_of_self = None
    wrap.stypy_type_store = module_type_store
    wrap.stypy_function_name = 'wrap'
    wrap.stypy_param_names_list = ['prefix', 'text', 'cols']
    wrap.stypy_varargs_param_name = None
    wrap.stypy_kwargs_param_name = None
    wrap.stypy_call_defaults = defaults
    wrap.stypy_call_varargs = varargs
    wrap.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'wrap', ['prefix', 'text', 'cols'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'wrap', localization, ['prefix', 'text', 'cols'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'wrap(...)' code ##################

    unicode_275225 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 944, 4), 'unicode', u'wrap *text* with *prefix* at length *cols*')
    
    # Assigning a BinOp to a Name (line 945):
    
    # Assigning a BinOp to a Name (line 945):
    unicode_275226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 945, 10), 'unicode', u' ')
    
    # Call to len(...): (line 945)
    # Processing the call arguments (line 945)
    
    # Call to expandtabs(...): (line 945)
    # Processing the call keyword arguments (line 945)
    kwargs_275230 = {}
    # Getting the type of 'prefix' (line 945)
    prefix_275228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 20), 'prefix', False)
    # Obtaining the member 'expandtabs' of a type (line 945)
    expandtabs_275229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 945, 20), prefix_275228, 'expandtabs')
    # Calling expandtabs(args, kwargs) (line 945)
    expandtabs_call_result_275231 = invoke(stypy.reporting.localization.Localization(__file__, 945, 20), expandtabs_275229, *[], **kwargs_275230)
    
    # Processing the call keyword arguments (line 945)
    kwargs_275232 = {}
    # Getting the type of 'len' (line 945)
    len_275227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 16), 'len', False)
    # Calling len(args, kwargs) (line 945)
    len_call_result_275233 = invoke(stypy.reporting.localization.Localization(__file__, 945, 16), len_275227, *[expandtabs_call_result_275231], **kwargs_275232)
    
    # Applying the binary operator '*' (line 945)
    result_mul_275234 = python_operator(stypy.reporting.localization.Localization(__file__, 945, 10), '*', unicode_275226, len_call_result_275233)
    
    # Assigning a type to the variable 'pad' (line 945)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 945, 4), 'pad', result_mul_275234)
    
    # Assigning a BinOp to a Name (line 946):
    
    # Assigning a BinOp to a Name (line 946):
    # Getting the type of 'cols' (line 946)
    cols_275235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 16), 'cols')
    
    # Call to len(...): (line 946)
    # Processing the call arguments (line 946)
    # Getting the type of 'pad' (line 946)
    pad_275237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 27), 'pad', False)
    # Processing the call keyword arguments (line 946)
    kwargs_275238 = {}
    # Getting the type of 'len' (line 946)
    len_275236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 23), 'len', False)
    # Calling len(args, kwargs) (line 946)
    len_call_result_275239 = invoke(stypy.reporting.localization.Localization(__file__, 946, 23), len_275236, *[pad_275237], **kwargs_275238)
    
    # Applying the binary operator '-' (line 946)
    result_sub_275240 = python_operator(stypy.reporting.localization.Localization(__file__, 946, 16), '-', cols_275235, len_call_result_275239)
    
    # Assigning a type to the variable 'available' (line 946)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 946, 4), 'available', result_sub_275240)
    
    # Assigning a Call to a Name (line 948):
    
    # Assigning a Call to a Name (line 948):
    
    # Call to split(...): (line 948)
    # Processing the call arguments (line 948)
    unicode_275243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 948, 21), 'unicode', u' ')
    # Processing the call keyword arguments (line 948)
    kwargs_275244 = {}
    # Getting the type of 'text' (line 948)
    text_275241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 10), 'text', False)
    # Obtaining the member 'split' of a type (line 948)
    split_275242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 948, 10), text_275241, 'split')
    # Calling split(args, kwargs) (line 948)
    split_call_result_275245 = invoke(stypy.reporting.localization.Localization(__file__, 948, 10), split_275242, *[unicode_275243], **kwargs_275244)
    
    # Assigning a type to the variable 'seq' (line 948)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 948, 4), 'seq', split_call_result_275245)
    
    # Assigning a Call to a Name (line 949):
    
    # Assigning a Call to a Name (line 949):
    
    # Call to len(...): (line 949)
    # Processing the call arguments (line 949)
    # Getting the type of 'seq' (line 949)
    seq_275247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 15), 'seq', False)
    # Processing the call keyword arguments (line 949)
    kwargs_275248 = {}
    # Getting the type of 'len' (line 949)
    len_275246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 11), 'len', False)
    # Calling len(args, kwargs) (line 949)
    len_call_result_275249 = invoke(stypy.reporting.localization.Localization(__file__, 949, 11), len_275246, *[seq_275247], **kwargs_275248)
    
    # Assigning a type to the variable 'Nseq' (line 949)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 949, 4), 'Nseq', len_call_result_275249)
    
    # Assigning a Num to a Name (line 950):
    
    # Assigning a Num to a Name (line 950):
    int_275250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 950, 10), 'int')
    # Assigning a type to the variable 'ind' (line 950)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 950, 4), 'ind', int_275250)
    
    # Assigning a List to a Name (line 951):
    
    # Assigning a List to a Name (line 951):
    
    # Obtaining an instance of the builtin type 'list' (line 951)
    list_275251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 951, 12), 'list')
    # Adding type elements to the builtin type 'list' instance (line 951)
    
    # Assigning a type to the variable 'lines' (line 951)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 951, 4), 'lines', list_275251)
    
    
    # Getting the type of 'ind' (line 952)
    ind_275252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 10), 'ind')
    # Getting the type of 'Nseq' (line 952)
    Nseq_275253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 16), 'Nseq')
    # Applying the binary operator '<' (line 952)
    result_lt_275254 = python_operator(stypy.reporting.localization.Localization(__file__, 952, 10), '<', ind_275252, Nseq_275253)
    
    # Testing the type of an if condition (line 952)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 952, 4), result_lt_275254)
    # SSA begins for while statement (line 952)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Assigning a Name to a Name (line 953):
    
    # Assigning a Name to a Name (line 953):
    # Getting the type of 'ind' (line 953)
    ind_275255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 18), 'ind')
    # Assigning a type to the variable 'lastInd' (line 953)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 953, 8), 'lastInd', ind_275255)
    
    # Getting the type of 'ind' (line 954)
    ind_275256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 8), 'ind')
    
    # Call to get_split_ind(...): (line 954)
    # Processing the call arguments (line 954)
    
    # Obtaining the type of the subscript
    # Getting the type of 'ind' (line 954)
    ind_275258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 33), 'ind', False)
    slice_275259 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 954, 29), ind_275258, None, None)
    # Getting the type of 'seq' (line 954)
    seq_275260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 29), 'seq', False)
    # Obtaining the member '__getitem__' of a type (line 954)
    getitem___275261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 954, 29), seq_275260, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 954)
    subscript_call_result_275262 = invoke(stypy.reporting.localization.Localization(__file__, 954, 29), getitem___275261, slice_275259)
    
    # Getting the type of 'available' (line 954)
    available_275263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 40), 'available', False)
    # Processing the call keyword arguments (line 954)
    kwargs_275264 = {}
    # Getting the type of 'get_split_ind' (line 954)
    get_split_ind_275257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 15), 'get_split_ind', False)
    # Calling get_split_ind(args, kwargs) (line 954)
    get_split_ind_call_result_275265 = invoke(stypy.reporting.localization.Localization(__file__, 954, 15), get_split_ind_275257, *[subscript_call_result_275262, available_275263], **kwargs_275264)
    
    # Applying the binary operator '+=' (line 954)
    result_iadd_275266 = python_operator(stypy.reporting.localization.Localization(__file__, 954, 8), '+=', ind_275256, get_split_ind_call_result_275265)
    # Assigning a type to the variable 'ind' (line 954)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 954, 8), 'ind', result_iadd_275266)
    
    
    # Call to append(...): (line 955)
    # Processing the call arguments (line 955)
    
    # Obtaining the type of the subscript
    # Getting the type of 'lastInd' (line 955)
    lastInd_275269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 25), 'lastInd', False)
    # Getting the type of 'ind' (line 955)
    ind_275270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 33), 'ind', False)
    slice_275271 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 955, 21), lastInd_275269, ind_275270, None)
    # Getting the type of 'seq' (line 955)
    seq_275272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 21), 'seq', False)
    # Obtaining the member '__getitem__' of a type (line 955)
    getitem___275273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 955, 21), seq_275272, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 955)
    subscript_call_result_275274 = invoke(stypy.reporting.localization.Localization(__file__, 955, 21), getitem___275273, slice_275271)
    
    # Processing the call keyword arguments (line 955)
    kwargs_275275 = {}
    # Getting the type of 'lines' (line 955)
    lines_275267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 8), 'lines', False)
    # Obtaining the member 'append' of a type (line 955)
    append_275268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 955, 8), lines_275267, 'append')
    # Calling append(args, kwargs) (line 955)
    append_call_result_275276 = invoke(stypy.reporting.localization.Localization(__file__, 955, 8), append_275268, *[subscript_call_result_275274], **kwargs_275275)
    
    # SSA join for while statement (line 952)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 958):
    
    # Assigning a BinOp to a Name (line 958):
    # Getting the type of 'prefix' (line 958)
    prefix_275277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 10), 'prefix')
    
    # Call to join(...): (line 958)
    # Processing the call arguments (line 958)
    
    # Obtaining the type of the subscript
    int_275280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 958, 34), 'int')
    # Getting the type of 'lines' (line 958)
    lines_275281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 28), 'lines', False)
    # Obtaining the member '__getitem__' of a type (line 958)
    getitem___275282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 958, 28), lines_275281, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 958)
    subscript_call_result_275283 = invoke(stypy.reporting.localization.Localization(__file__, 958, 28), getitem___275282, int_275280)
    
    # Processing the call keyword arguments (line 958)
    kwargs_275284 = {}
    unicode_275278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 958, 19), 'unicode', u' ')
    # Obtaining the member 'join' of a type (line 958)
    join_275279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 958, 19), unicode_275278, 'join')
    # Calling join(args, kwargs) (line 958)
    join_call_result_275285 = invoke(stypy.reporting.localization.Localization(__file__, 958, 19), join_275279, *[subscript_call_result_275283], **kwargs_275284)
    
    # Applying the binary operator '+' (line 958)
    result_add_275286 = python_operator(stypy.reporting.localization.Localization(__file__, 958, 10), '+', prefix_275277, join_call_result_275285)
    
    unicode_275287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 958, 40), 'unicode', u'\n')
    # Applying the binary operator '+' (line 958)
    result_add_275288 = python_operator(stypy.reporting.localization.Localization(__file__, 958, 38), '+', result_add_275286, unicode_275287)
    
    # Assigning a type to the variable 'ret' (line 958)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 958, 4), 'ret', result_add_275288)
    
    
    # Obtaining the type of the subscript
    int_275289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 959, 22), 'int')
    slice_275290 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 959, 16), int_275289, None, None)
    # Getting the type of 'lines' (line 959)
    lines_275291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 16), 'lines')
    # Obtaining the member '__getitem__' of a type (line 959)
    getitem___275292 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 959, 16), lines_275291, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 959)
    subscript_call_result_275293 = invoke(stypy.reporting.localization.Localization(__file__, 959, 16), getitem___275292, slice_275290)
    
    # Testing the type of a for loop iterable (line 959)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 959, 4), subscript_call_result_275293)
    # Getting the type of the for loop variable (line 959)
    for_loop_var_275294 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 959, 4), subscript_call_result_275293)
    # Assigning a type to the variable 'line' (line 959)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 959, 4), 'line', for_loop_var_275294)
    # SSA begins for a for statement (line 959)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Getting the type of 'ret' (line 960)
    ret_275295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 8), 'ret')
    # Getting the type of 'pad' (line 960)
    pad_275296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 15), 'pad')
    
    # Call to join(...): (line 960)
    # Processing the call arguments (line 960)
    # Getting the type of 'line' (line 960)
    line_275299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 30), 'line', False)
    # Processing the call keyword arguments (line 960)
    kwargs_275300 = {}
    unicode_275297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 960, 21), 'unicode', u' ')
    # Obtaining the member 'join' of a type (line 960)
    join_275298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 960, 21), unicode_275297, 'join')
    # Calling join(args, kwargs) (line 960)
    join_call_result_275301 = invoke(stypy.reporting.localization.Localization(__file__, 960, 21), join_275298, *[line_275299], **kwargs_275300)
    
    # Applying the binary operator '+' (line 960)
    result_add_275302 = python_operator(stypy.reporting.localization.Localization(__file__, 960, 15), '+', pad_275296, join_call_result_275301)
    
    unicode_275303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 960, 38), 'unicode', u'\n')
    # Applying the binary operator '+' (line 960)
    result_add_275304 = python_operator(stypy.reporting.localization.Localization(__file__, 960, 36), '+', result_add_275302, unicode_275303)
    
    # Applying the binary operator '+=' (line 960)
    result_iadd_275305 = python_operator(stypy.reporting.localization.Localization(__file__, 960, 8), '+=', ret_275295, result_add_275304)
    # Assigning a type to the variable 'ret' (line 960)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 960, 8), 'ret', result_iadd_275305)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'ret' (line 961)
    ret_275306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 961)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 961, 4), 'stypy_return_type', ret_275306)
    
    # ################# End of 'wrap(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'wrap' in the type store
    # Getting the type of 'stypy_return_type' (line 942)
    stypy_return_type_275307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275307)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'wrap'
    return stypy_return_type_275307

# Assigning a type to the variable 'wrap' (line 942)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 942, 0), 'wrap', wrap)

# Assigning a Call to a Name (line 967):

# Assigning a Call to a Name (line 967):

# Call to compile(...): (line 967)
# Processing the call arguments (line 967)
unicode_275310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 967, 32), 'unicode', u'(?:(?:\\n\\r?)|^)( *)\\S')
# Processing the call keyword arguments (line 967)
kwargs_275311 = {}
# Getting the type of 're' (line 967)
re_275308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 21), 're', False)
# Obtaining the member 'compile' of a type (line 967)
compile_275309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 967, 21), re_275308, 'compile')
# Calling compile(args, kwargs) (line 967)
compile_call_result_275312 = invoke(stypy.reporting.localization.Localization(__file__, 967, 21), compile_275309, *[unicode_275310], **kwargs_275311)

# Assigning a type to the variable '_find_dedent_regex' (line 967)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 967, 0), '_find_dedent_regex', compile_call_result_275312)

# Assigning a Dict to a Name (line 969):

# Assigning a Dict to a Name (line 969):

# Obtaining an instance of the builtin type 'dict' (line 969)
dict_275313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 969, 16), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 969)

# Assigning a type to the variable '_dedent_regex' (line 969)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 969, 0), '_dedent_regex', dict_275313)

@norecursion
def dedent(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'dedent'
    module_type_store = module_type_store.open_function_context('dedent', 972, 0, False)
    
    # Passed parameters checking function
    dedent.stypy_localization = localization
    dedent.stypy_type_of_self = None
    dedent.stypy_type_store = module_type_store
    dedent.stypy_function_name = 'dedent'
    dedent.stypy_param_names_list = ['s']
    dedent.stypy_varargs_param_name = None
    dedent.stypy_kwargs_param_name = None
    dedent.stypy_call_defaults = defaults
    dedent.stypy_call_varargs = varargs
    dedent.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'dedent', ['s'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'dedent', localization, ['s'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'dedent(...)' code ##################

    unicode_275314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 983, (-1)), 'unicode', u'\n    Remove excess indentation from docstring *s*.\n\n    Discards any leading blank lines, then removes up to n whitespace\n    characters from each line, where n is the number of leading\n    whitespace characters in the first line. It differs from\n    textwrap.dedent in its deletion of leading blank lines and its use\n    of the first non-blank line to determine the indentation.\n\n    It is also faster in most cases.\n    ')
    
    
    # Getting the type of 's' (line 989)
    s_275315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 11), 's')
    # Applying the 'not' unary operator (line 989)
    result_not__275316 = python_operator(stypy.reporting.localization.Localization(__file__, 989, 7), 'not', s_275315)
    
    # Testing the type of an if condition (line 989)
    if_condition_275317 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 989, 4), result_not__275316)
    # Assigning a type to the variable 'if_condition_275317' (line 989)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 989, 4), 'if_condition_275317', if_condition_275317)
    # SSA begins for if statement (line 989)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    unicode_275318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 990, 15), 'unicode', u'')
    # Assigning a type to the variable 'stypy_return_type' (line 990)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 990, 8), 'stypy_return_type', unicode_275318)
    # SSA join for if statement (line 989)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 992):
    
    # Assigning a Call to a Name (line 992):
    
    # Call to match(...): (line 992)
    # Processing the call arguments (line 992)
    # Getting the type of 's' (line 992)
    s_275321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 37), 's', False)
    # Processing the call keyword arguments (line 992)
    kwargs_275322 = {}
    # Getting the type of '_find_dedent_regex' (line 992)
    _find_dedent_regex_275319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 12), '_find_dedent_regex', False)
    # Obtaining the member 'match' of a type (line 992)
    match_275320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 992, 12), _find_dedent_regex_275319, 'match')
    # Calling match(args, kwargs) (line 992)
    match_call_result_275323 = invoke(stypy.reporting.localization.Localization(__file__, 992, 12), match_275320, *[s_275321], **kwargs_275322)
    
    # Assigning a type to the variable 'match' (line 992)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 992, 4), 'match', match_call_result_275323)
    
    # Type idiom detected: calculating its left and rigth part (line 993)
    # Getting the type of 'match' (line 993)
    match_275324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 7), 'match')
    # Getting the type of 'None' (line 993)
    None_275325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 16), 'None')
    
    (may_be_275326, more_types_in_union_275327) = may_be_none(match_275324, None_275325)

    if may_be_275326:

        if more_types_in_union_275327:
            # Runtime conditional SSA (line 993)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Getting the type of 's' (line 994)
        s_275328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 15), 's')
        # Assigning a type to the variable 'stypy_return_type' (line 994)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 994, 8), 'stypy_return_type', s_275328)

        if more_types_in_union_275327:
            # SSA join for if statement (line 993)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a BinOp to a Name (line 997):
    
    # Assigning a BinOp to a Name (line 997):
    
    # Call to end(...): (line 997)
    # Processing the call arguments (line 997)
    int_275331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 997, 23), 'int')
    # Processing the call keyword arguments (line 997)
    kwargs_275332 = {}
    # Getting the type of 'match' (line 997)
    match_275329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 13), 'match', False)
    # Obtaining the member 'end' of a type (line 997)
    end_275330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 997, 13), match_275329, 'end')
    # Calling end(args, kwargs) (line 997)
    end_call_result_275333 = invoke(stypy.reporting.localization.Localization(__file__, 997, 13), end_275330, *[int_275331], **kwargs_275332)
    
    
    # Call to start(...): (line 997)
    # Processing the call arguments (line 997)
    int_275336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 997, 40), 'int')
    # Processing the call keyword arguments (line 997)
    kwargs_275337 = {}
    # Getting the type of 'match' (line 997)
    match_275334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 28), 'match', False)
    # Obtaining the member 'start' of a type (line 997)
    start_275335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 997, 28), match_275334, 'start')
    # Calling start(args, kwargs) (line 997)
    start_call_result_275338 = invoke(stypy.reporting.localization.Localization(__file__, 997, 28), start_275335, *[int_275336], **kwargs_275337)
    
    # Applying the binary operator '-' (line 997)
    result_sub_275339 = python_operator(stypy.reporting.localization.Localization(__file__, 997, 13), '-', end_call_result_275333, start_call_result_275338)
    
    # Assigning a type to the variable 'nshift' (line 997)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 997, 4), 'nshift', result_sub_275339)
    
    
    # Getting the type of 'nshift' (line 998)
    nshift_275340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 7), 'nshift')
    int_275341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 998, 17), 'int')
    # Applying the binary operator '==' (line 998)
    result_eq_275342 = python_operator(stypy.reporting.localization.Localization(__file__, 998, 7), '==', nshift_275340, int_275341)
    
    # Testing the type of an if condition (line 998)
    if_condition_275343 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 998, 4), result_eq_275342)
    # Assigning a type to the variable 'if_condition_275343' (line 998)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 998, 4), 'if_condition_275343', if_condition_275343)
    # SSA begins for if statement (line 998)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 's' (line 999)
    s_275344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 15), 's')
    # Assigning a type to the variable 'stypy_return_type' (line 999)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 999, 8), 'stypy_return_type', s_275344)
    # SSA join for if statement (line 998)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1003):
    
    # Assigning a Call to a Name (line 1003):
    
    # Call to get(...): (line 1003)
    # Processing the call arguments (line 1003)
    # Getting the type of 'nshift' (line 1003)
    nshift_275347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 33), 'nshift', False)
    # Getting the type of 'None' (line 1003)
    None_275348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 41), 'None', False)
    # Processing the call keyword arguments (line 1003)
    kwargs_275349 = {}
    # Getting the type of '_dedent_regex' (line 1003)
    _dedent_regex_275345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 15), '_dedent_regex', False)
    # Obtaining the member 'get' of a type (line 1003)
    get_275346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1003, 15), _dedent_regex_275345, 'get')
    # Calling get(args, kwargs) (line 1003)
    get_call_result_275350 = invoke(stypy.reporting.localization.Localization(__file__, 1003, 15), get_275346, *[nshift_275347, None_275348], **kwargs_275349)
    
    # Assigning a type to the variable 'unindent' (line 1003)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1003, 4), 'unindent', get_call_result_275350)
    
    # Type idiom detected: calculating its left and rigth part (line 1004)
    # Getting the type of 'unindent' (line 1004)
    unindent_275351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 7), 'unindent')
    # Getting the type of 'None' (line 1004)
    None_275352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 19), 'None')
    
    (may_be_275353, more_types_in_union_275354) = may_be_none(unindent_275351, None_275352)

    if may_be_275353:

        if more_types_in_union_275354:
            # Runtime conditional SSA (line 1004)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1005):
        
        # Assigning a Call to a Name (line 1005):
        
        # Call to compile(...): (line 1005)
        # Processing the call arguments (line 1005)
        unicode_275357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1005, 30), 'unicode', u'\n\r? {0,%d}')
        # Getting the type of 'nshift' (line 1005)
        nshift_275358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 47), 'nshift', False)
        # Applying the binary operator '%' (line 1005)
        result_mod_275359 = python_operator(stypy.reporting.localization.Localization(__file__, 1005, 30), '%', unicode_275357, nshift_275358)
        
        # Processing the call keyword arguments (line 1005)
        kwargs_275360 = {}
        # Getting the type of 're' (line 1005)
        re_275355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 19), 're', False)
        # Obtaining the member 'compile' of a type (line 1005)
        compile_275356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1005, 19), re_275355, 'compile')
        # Calling compile(args, kwargs) (line 1005)
        compile_call_result_275361 = invoke(stypy.reporting.localization.Localization(__file__, 1005, 19), compile_275356, *[result_mod_275359], **kwargs_275360)
        
        # Assigning a type to the variable 'unindent' (line 1005)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1005, 8), 'unindent', compile_call_result_275361)
        
        # Assigning a Name to a Subscript (line 1006):
        
        # Assigning a Name to a Subscript (line 1006):
        # Getting the type of 'unindent' (line 1006)
        unindent_275362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 32), 'unindent')
        # Getting the type of '_dedent_regex' (line 1006)
        _dedent_regex_275363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 8), '_dedent_regex')
        # Getting the type of 'nshift' (line 1006)
        nshift_275364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 22), 'nshift')
        # Storing an element on a container (line 1006)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1006, 8), _dedent_regex_275363, (nshift_275364, unindent_275362))

        if more_types_in_union_275354:
            # SSA join for if statement (line 1004)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 1008):
    
    # Assigning a Call to a Name (line 1008):
    
    # Call to strip(...): (line 1008)
    # Processing the call keyword arguments (line 1008)
    kwargs_275372 = {}
    
    # Call to sub(...): (line 1008)
    # Processing the call arguments (line 1008)
    unicode_275367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1008, 26), 'unicode', u'\n')
    # Getting the type of 's' (line 1008)
    s_275368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 32), 's', False)
    # Processing the call keyword arguments (line 1008)
    kwargs_275369 = {}
    # Getting the type of 'unindent' (line 1008)
    unindent_275365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 13), 'unindent', False)
    # Obtaining the member 'sub' of a type (line 1008)
    sub_275366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1008, 13), unindent_275365, 'sub')
    # Calling sub(args, kwargs) (line 1008)
    sub_call_result_275370 = invoke(stypy.reporting.localization.Localization(__file__, 1008, 13), sub_275366, *[unicode_275367, s_275368], **kwargs_275369)
    
    # Obtaining the member 'strip' of a type (line 1008)
    strip_275371 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1008, 13), sub_call_result_275370, 'strip')
    # Calling strip(args, kwargs) (line 1008)
    strip_call_result_275373 = invoke(stypy.reporting.localization.Localization(__file__, 1008, 13), strip_275371, *[], **kwargs_275372)
    
    # Assigning a type to the variable 'result' (line 1008)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1008, 4), 'result', strip_call_result_275373)
    # Getting the type of 'result' (line 1009)
    result_275374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 11), 'result')
    # Assigning a type to the variable 'stypy_return_type' (line 1009)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1009, 4), 'stypy_return_type', result_275374)
    
    # ################# End of 'dedent(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'dedent' in the type store
    # Getting the type of 'stypy_return_type' (line 972)
    stypy_return_type_275375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275375)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'dedent'
    return stypy_return_type_275375

# Assigning a type to the variable 'dedent' (line 972)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 972, 0), 'dedent', dedent)

@norecursion
def listFiles(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    unicode_275376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1012, 29), 'unicode', u'*')
    int_275377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1012, 42), 'int')
    int_275378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1012, 60), 'int')
    defaults = [unicode_275376, int_275377, int_275378]
    # Create a new context for function 'listFiles'
    module_type_store = module_type_store.open_function_context('listFiles', 1012, 0, False)
    
    # Passed parameters checking function
    listFiles.stypy_localization = localization
    listFiles.stypy_type_of_self = None
    listFiles.stypy_type_store = module_type_store
    listFiles.stypy_function_name = 'listFiles'
    listFiles.stypy_param_names_list = ['root', 'patterns', 'recurse', 'return_folders']
    listFiles.stypy_varargs_param_name = None
    listFiles.stypy_kwargs_param_name = None
    listFiles.stypy_call_defaults = defaults
    listFiles.stypy_call_varargs = varargs
    listFiles.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'listFiles', ['root', 'patterns', 'recurse', 'return_folders'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'listFiles', localization, ['root', 'patterns', 'recurse', 'return_folders'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'listFiles(...)' code ##################

    unicode_275379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1017, (-1)), 'unicode', u'\n    Recursively list files\n\n    from Parmar and Martelli in the Python Cookbook\n    ')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1018, 4))
    
    # 'import os.path' statement (line 1018)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/cbook/')
    import_275380 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1018, 4), 'os.path')

    if (type(import_275380) is not StypyTypeError):

        if (import_275380 != 'pyd_module'):
            __import__(import_275380)
            sys_modules_275381 = sys.modules[import_275380]
            import_module(stypy.reporting.localization.Localization(__file__, 1018, 4), 'os.path', sys_modules_275381.module_type_store, module_type_store)
        else:
            import os.path

            import_module(stypy.reporting.localization.Localization(__file__, 1018, 4), 'os.path', os.path, module_type_store)

    else:
        # Assigning a type to the variable 'os.path' (line 1018)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1018, 4), 'os.path', import_275380)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/cbook/')
    
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1019, 4))
    
    # 'import fnmatch' statement (line 1019)
    import fnmatch

    import_module(stypy.reporting.localization.Localization(__file__, 1019, 4), 'fnmatch', fnmatch, module_type_store)
    
    
    # Assigning a Call to a Name (line 1021):
    
    # Assigning a Call to a Name (line 1021):
    
    # Call to split(...): (line 1021)
    # Processing the call arguments (line 1021)
    unicode_275384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1021, 34), 'unicode', u';')
    # Processing the call keyword arguments (line 1021)
    kwargs_275385 = {}
    # Getting the type of 'patterns' (line 1021)
    patterns_275382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 19), 'patterns', False)
    # Obtaining the member 'split' of a type (line 1021)
    split_275383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1021, 19), patterns_275382, 'split')
    # Calling split(args, kwargs) (line 1021)
    split_call_result_275386 = invoke(stypy.reporting.localization.Localization(__file__, 1021, 19), split_275383, *[unicode_275384], **kwargs_275385)
    
    # Assigning a type to the variable 'pattern_list' (line 1021)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1021, 4), 'pattern_list', split_call_result_275386)
    
    # Assigning a List to a Name (line 1022):
    
    # Assigning a List to a Name (line 1022):
    
    # Obtaining an instance of the builtin type 'list' (line 1022)
    list_275387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1022, 14), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1022)
    
    # Assigning a type to the variable 'results' (line 1022)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1022, 4), 'results', list_275387)
    
    
    # Call to walk(...): (line 1024)
    # Processing the call arguments (line 1024)
    # Getting the type of 'root' (line 1024)
    root_275390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1024, 40), 'root', False)
    # Processing the call keyword arguments (line 1024)
    kwargs_275391 = {}
    # Getting the type of 'os' (line 1024)
    os_275388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1024, 32), 'os', False)
    # Obtaining the member 'walk' of a type (line 1024)
    walk_275389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1024, 32), os_275388, 'walk')
    # Calling walk(args, kwargs) (line 1024)
    walk_call_result_275392 = invoke(stypy.reporting.localization.Localization(__file__, 1024, 32), walk_275389, *[root_275390], **kwargs_275391)
    
    # Testing the type of a for loop iterable (line 1024)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1024, 4), walk_call_result_275392)
    # Getting the type of the for loop variable (line 1024)
    for_loop_var_275393 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1024, 4), walk_call_result_275392)
    # Assigning a type to the variable 'dirname' (line 1024)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1024, 4), 'dirname', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1024, 4), for_loop_var_275393))
    # Assigning a type to the variable 'dirs' (line 1024)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1024, 4), 'dirs', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1024, 4), for_loop_var_275393))
    # Assigning a type to the variable 'files' (line 1024)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1024, 4), 'files', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1024, 4), for_loop_var_275393))
    # SSA begins for a for statement (line 1024)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Getting the type of 'files' (line 1026)
    files_275394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 20), 'files')
    # Testing the type of a for loop iterable (line 1026)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1026, 8), files_275394)
    # Getting the type of the for loop variable (line 1026)
    for_loop_var_275395 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1026, 8), files_275394)
    # Assigning a type to the variable 'name' (line 1026)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1026, 8), 'name', for_loop_var_275395)
    # SSA begins for a for statement (line 1026)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 1027):
    
    # Assigning a Call to a Name (line 1027):
    
    # Call to normpath(...): (line 1027)
    # Processing the call arguments (line 1027)
    
    # Call to join(...): (line 1027)
    # Processing the call arguments (line 1027)
    # Getting the type of 'dirname' (line 1027)
    dirname_275402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 53), 'dirname', False)
    # Getting the type of 'name' (line 1027)
    name_275403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 62), 'name', False)
    # Processing the call keyword arguments (line 1027)
    kwargs_275404 = {}
    # Getting the type of 'os' (line 1027)
    os_275399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 40), 'os', False)
    # Obtaining the member 'path' of a type (line 1027)
    path_275400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1027, 40), os_275399, 'path')
    # Obtaining the member 'join' of a type (line 1027)
    join_275401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1027, 40), path_275400, 'join')
    # Calling join(args, kwargs) (line 1027)
    join_call_result_275405 = invoke(stypy.reporting.localization.Localization(__file__, 1027, 40), join_275401, *[dirname_275402, name_275403], **kwargs_275404)
    
    # Processing the call keyword arguments (line 1027)
    kwargs_275406 = {}
    # Getting the type of 'os' (line 1027)
    os_275396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 23), 'os', False)
    # Obtaining the member 'path' of a type (line 1027)
    path_275397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1027, 23), os_275396, 'path')
    # Obtaining the member 'normpath' of a type (line 1027)
    normpath_275398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1027, 23), path_275397, 'normpath')
    # Calling normpath(args, kwargs) (line 1027)
    normpath_call_result_275407 = invoke(stypy.reporting.localization.Localization(__file__, 1027, 23), normpath_275398, *[join_call_result_275405], **kwargs_275406)
    
    # Assigning a type to the variable 'fullname' (line 1027)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1027, 12), 'fullname', normpath_call_result_275407)
    
    
    # Evaluating a boolean operation
    # Getting the type of 'return_folders' (line 1028)
    return_folders_275408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 15), 'return_folders')
    
    # Call to isfile(...): (line 1028)
    # Processing the call arguments (line 1028)
    # Getting the type of 'fullname' (line 1028)
    fullname_275412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 48), 'fullname', False)
    # Processing the call keyword arguments (line 1028)
    kwargs_275413 = {}
    # Getting the type of 'os' (line 1028)
    os_275409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 33), 'os', False)
    # Obtaining the member 'path' of a type (line 1028)
    path_275410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1028, 33), os_275409, 'path')
    # Obtaining the member 'isfile' of a type (line 1028)
    isfile_275411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1028, 33), path_275410, 'isfile')
    # Calling isfile(args, kwargs) (line 1028)
    isfile_call_result_275414 = invoke(stypy.reporting.localization.Localization(__file__, 1028, 33), isfile_275411, *[fullname_275412], **kwargs_275413)
    
    # Applying the binary operator 'or' (line 1028)
    result_or_keyword_275415 = python_operator(stypy.reporting.localization.Localization(__file__, 1028, 15), 'or', return_folders_275408, isfile_call_result_275414)
    
    # Testing the type of an if condition (line 1028)
    if_condition_275416 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1028, 12), result_or_keyword_275415)
    # Assigning a type to the variable 'if_condition_275416' (line 1028)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1028, 12), 'if_condition_275416', if_condition_275416)
    # SSA begins for if statement (line 1028)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'pattern_list' (line 1029)
    pattern_list_275417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 31), 'pattern_list')
    # Testing the type of a for loop iterable (line 1029)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1029, 16), pattern_list_275417)
    # Getting the type of the for loop variable (line 1029)
    for_loop_var_275418 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1029, 16), pattern_list_275417)
    # Assigning a type to the variable 'pattern' (line 1029)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1029, 16), 'pattern', for_loop_var_275418)
    # SSA begins for a for statement (line 1029)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to fnmatch(...): (line 1030)
    # Processing the call arguments (line 1030)
    # Getting the type of 'name' (line 1030)
    name_275421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1030, 39), 'name', False)
    # Getting the type of 'pattern' (line 1030)
    pattern_275422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1030, 45), 'pattern', False)
    # Processing the call keyword arguments (line 1030)
    kwargs_275423 = {}
    # Getting the type of 'fnmatch' (line 1030)
    fnmatch_275419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1030, 23), 'fnmatch', False)
    # Obtaining the member 'fnmatch' of a type (line 1030)
    fnmatch_275420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1030, 23), fnmatch_275419, 'fnmatch')
    # Calling fnmatch(args, kwargs) (line 1030)
    fnmatch_call_result_275424 = invoke(stypy.reporting.localization.Localization(__file__, 1030, 23), fnmatch_275420, *[name_275421, pattern_275422], **kwargs_275423)
    
    # Testing the type of an if condition (line 1030)
    if_condition_275425 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1030, 20), fnmatch_call_result_275424)
    # Assigning a type to the variable 'if_condition_275425' (line 1030)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1030, 20), 'if_condition_275425', if_condition_275425)
    # SSA begins for if statement (line 1030)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 1031)
    # Processing the call arguments (line 1031)
    # Getting the type of 'fullname' (line 1031)
    fullname_275428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 39), 'fullname', False)
    # Processing the call keyword arguments (line 1031)
    kwargs_275429 = {}
    # Getting the type of 'results' (line 1031)
    results_275426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 24), 'results', False)
    # Obtaining the member 'append' of a type (line 1031)
    append_275427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1031, 24), results_275426, 'append')
    # Calling append(args, kwargs) (line 1031)
    append_call_result_275430 = invoke(stypy.reporting.localization.Localization(__file__, 1031, 24), append_275427, *[fullname_275428], **kwargs_275429)
    
    # SSA join for if statement (line 1030)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1028)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'recurse' (line 1034)
    recurse_275431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 15), 'recurse')
    # Applying the 'not' unary operator (line 1034)
    result_not__275432 = python_operator(stypy.reporting.localization.Localization(__file__, 1034, 11), 'not', recurse_275431)
    
    # Testing the type of an if condition (line 1034)
    if_condition_275433 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1034, 8), result_not__275432)
    # Assigning a type to the variable 'if_condition_275433' (line 1034)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1034, 8), 'if_condition_275433', if_condition_275433)
    # SSA begins for if statement (line 1034)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 1034)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'results' (line 1037)
    results_275434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 11), 'results')
    # Assigning a type to the variable 'stypy_return_type' (line 1037)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1037, 4), 'stypy_return_type', results_275434)
    
    # ################# End of 'listFiles(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'listFiles' in the type store
    # Getting the type of 'stypy_return_type' (line 1012)
    stypy_return_type_275435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275435)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'listFiles'
    return stypy_return_type_275435

# Assigning a type to the variable 'listFiles' (line 1012)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1012, 0), 'listFiles', listFiles)

@norecursion
def get_recursive_filelist(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_recursive_filelist'
    module_type_store = module_type_store.open_function_context('get_recursive_filelist', 1040, 0, False)
    
    # Passed parameters checking function
    get_recursive_filelist.stypy_localization = localization
    get_recursive_filelist.stypy_type_of_self = None
    get_recursive_filelist.stypy_type_store = module_type_store
    get_recursive_filelist.stypy_function_name = 'get_recursive_filelist'
    get_recursive_filelist.stypy_param_names_list = ['args']
    get_recursive_filelist.stypy_varargs_param_name = None
    get_recursive_filelist.stypy_kwargs_param_name = None
    get_recursive_filelist.stypy_call_defaults = defaults
    get_recursive_filelist.stypy_call_varargs = varargs
    get_recursive_filelist.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_recursive_filelist', ['args'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_recursive_filelist', localization, ['args'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_recursive_filelist(...)' code ##################

    unicode_275436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1045, (-1)), 'unicode', u'\n    Recurse all the files and dirs in *args* ignoring symbolic links\n    and return the files as a list of strings\n    ')
    
    # Assigning a List to a Name (line 1046):
    
    # Assigning a List to a Name (line 1046):
    
    # Obtaining an instance of the builtin type 'list' (line 1046)
    list_275437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1046, 12), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1046)
    
    # Assigning a type to the variable 'files' (line 1046)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1046, 4), 'files', list_275437)
    
    # Getting the type of 'args' (line 1048)
    args_275438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 15), 'args')
    # Testing the type of a for loop iterable (line 1048)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1048, 4), args_275438)
    # Getting the type of the for loop variable (line 1048)
    for_loop_var_275439 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1048, 4), args_275438)
    # Assigning a type to the variable 'arg' (line 1048)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1048, 4), 'arg', for_loop_var_275439)
    # SSA begins for a for statement (line 1048)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to isfile(...): (line 1049)
    # Processing the call arguments (line 1049)
    # Getting the type of 'arg' (line 1049)
    arg_275443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 26), 'arg', False)
    # Processing the call keyword arguments (line 1049)
    kwargs_275444 = {}
    # Getting the type of 'os' (line 1049)
    os_275440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 11), 'os', False)
    # Obtaining the member 'path' of a type (line 1049)
    path_275441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1049, 11), os_275440, 'path')
    # Obtaining the member 'isfile' of a type (line 1049)
    isfile_275442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1049, 11), path_275441, 'isfile')
    # Calling isfile(args, kwargs) (line 1049)
    isfile_call_result_275445 = invoke(stypy.reporting.localization.Localization(__file__, 1049, 11), isfile_275442, *[arg_275443], **kwargs_275444)
    
    # Testing the type of an if condition (line 1049)
    if_condition_275446 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1049, 8), isfile_call_result_275445)
    # Assigning a type to the variable 'if_condition_275446' (line 1049)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1049, 8), 'if_condition_275446', if_condition_275446)
    # SSA begins for if statement (line 1049)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 1050)
    # Processing the call arguments (line 1050)
    # Getting the type of 'arg' (line 1050)
    arg_275449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 25), 'arg', False)
    # Processing the call keyword arguments (line 1050)
    kwargs_275450 = {}
    # Getting the type of 'files' (line 1050)
    files_275447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 12), 'files', False)
    # Obtaining the member 'append' of a type (line 1050)
    append_275448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1050, 12), files_275447, 'append')
    # Calling append(args, kwargs) (line 1050)
    append_call_result_275451 = invoke(stypy.reporting.localization.Localization(__file__, 1050, 12), append_275448, *[arg_275449], **kwargs_275450)
    
    # SSA join for if statement (line 1049)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to isdir(...): (line 1052)
    # Processing the call arguments (line 1052)
    # Getting the type of 'arg' (line 1052)
    arg_275455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 25), 'arg', False)
    # Processing the call keyword arguments (line 1052)
    kwargs_275456 = {}
    # Getting the type of 'os' (line 1052)
    os_275452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 11), 'os', False)
    # Obtaining the member 'path' of a type (line 1052)
    path_275453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1052, 11), os_275452, 'path')
    # Obtaining the member 'isdir' of a type (line 1052)
    isdir_275454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1052, 11), path_275453, 'isdir')
    # Calling isdir(args, kwargs) (line 1052)
    isdir_call_result_275457 = invoke(stypy.reporting.localization.Localization(__file__, 1052, 11), isdir_275454, *[arg_275455], **kwargs_275456)
    
    # Testing the type of an if condition (line 1052)
    if_condition_275458 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1052, 8), isdir_call_result_275457)
    # Assigning a type to the variable 'if_condition_275458' (line 1052)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1052, 8), 'if_condition_275458', if_condition_275458)
    # SSA begins for if statement (line 1052)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1053):
    
    # Assigning a Call to a Name (line 1053):
    
    # Call to listFiles(...): (line 1053)
    # Processing the call arguments (line 1053)
    # Getting the type of 'arg' (line 1053)
    arg_275460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 33), 'arg', False)
    # Processing the call keyword arguments (line 1053)
    int_275461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1053, 46), 'int')
    keyword_275462 = int_275461
    int_275463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1053, 64), 'int')
    keyword_275464 = int_275463
    kwargs_275465 = {'return_folders': keyword_275464, 'recurse': keyword_275462}
    # Getting the type of 'listFiles' (line 1053)
    listFiles_275459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 23), 'listFiles', False)
    # Calling listFiles(args, kwargs) (line 1053)
    listFiles_call_result_275466 = invoke(stypy.reporting.localization.Localization(__file__, 1053, 23), listFiles_275459, *[arg_275460], **kwargs_275465)
    
    # Assigning a type to the variable 'newfiles' (line 1053)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1053, 12), 'newfiles', listFiles_call_result_275466)
    
    # Call to extend(...): (line 1054)
    # Processing the call arguments (line 1054)
    # Getting the type of 'newfiles' (line 1054)
    newfiles_275469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 25), 'newfiles', False)
    # Processing the call keyword arguments (line 1054)
    kwargs_275470 = {}
    # Getting the type of 'files' (line 1054)
    files_275467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 12), 'files', False)
    # Obtaining the member 'extend' of a type (line 1054)
    extend_275468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1054, 12), files_275467, 'extend')
    # Calling extend(args, kwargs) (line 1054)
    extend_call_result_275471 = invoke(stypy.reporting.localization.Localization(__file__, 1054, 12), extend_275468, *[newfiles_275469], **kwargs_275470)
    
    # SSA join for if statement (line 1052)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'files' (line 1056)
    files_275480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 23), 'files')
    comprehension_275481 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1056, 12), files_275480)
    # Assigning a type to the variable 'f' (line 1056)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1056, 12), 'f', comprehension_275481)
    
    
    # Call to islink(...): (line 1056)
    # Processing the call arguments (line 1056)
    # Getting the type of 'f' (line 1056)
    f_275476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 51), 'f', False)
    # Processing the call keyword arguments (line 1056)
    kwargs_275477 = {}
    # Getting the type of 'os' (line 1056)
    os_275473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 36), 'os', False)
    # Obtaining the member 'path' of a type (line 1056)
    path_275474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1056, 36), os_275473, 'path')
    # Obtaining the member 'islink' of a type (line 1056)
    islink_275475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1056, 36), path_275474, 'islink')
    # Calling islink(args, kwargs) (line 1056)
    islink_call_result_275478 = invoke(stypy.reporting.localization.Localization(__file__, 1056, 36), islink_275475, *[f_275476], **kwargs_275477)
    
    # Applying the 'not' unary operator (line 1056)
    result_not__275479 = python_operator(stypy.reporting.localization.Localization(__file__, 1056, 32), 'not', islink_call_result_275478)
    
    # Getting the type of 'f' (line 1056)
    f_275472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 12), 'f')
    list_275482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1056, 12), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1056, 12), list_275482, f_275472)
    # Assigning a type to the variable 'stypy_return_type' (line 1056)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1056, 4), 'stypy_return_type', list_275482)
    
    # ################# End of 'get_recursive_filelist(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_recursive_filelist' in the type store
    # Getting the type of 'stypy_return_type' (line 1040)
    stypy_return_type_275483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275483)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_recursive_filelist'
    return stypy_return_type_275483

# Assigning a type to the variable 'get_recursive_filelist' (line 1040)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1040, 0), 'get_recursive_filelist', get_recursive_filelist)

@norecursion
def pieces(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_275484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1060, 20), 'int')
    defaults = [int_275484]
    # Create a new context for function 'pieces'
    module_type_store = module_type_store.open_function_context('pieces', 1059, 0, False)
    
    # Passed parameters checking function
    pieces.stypy_localization = localization
    pieces.stypy_type_of_self = None
    pieces.stypy_type_store = module_type_store
    pieces.stypy_function_name = 'pieces'
    pieces.stypy_param_names_list = ['seq', 'num']
    pieces.stypy_varargs_param_name = None
    pieces.stypy_kwargs_param_name = None
    pieces.stypy_call_defaults = defaults
    pieces.stypy_call_varargs = varargs
    pieces.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'pieces', ['seq', 'num'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'pieces', localization, ['seq', 'num'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'pieces(...)' code ##################

    unicode_275485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1061, 4), 'unicode', u'Break up the *seq* into *num* tuples')
    
    # Assigning a Num to a Name (line 1062):
    
    # Assigning a Num to a Name (line 1062):
    int_275486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1062, 12), 'int')
    # Assigning a type to the variable 'start' (line 1062)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1062, 4), 'start', int_275486)
    
    int_275487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1063, 10), 'int')
    # Testing the type of an if condition (line 1063)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1063, 4), int_275487)
    # SSA begins for while statement (line 1063)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Assigning a Subscript to a Name (line 1064):
    
    # Assigning a Subscript to a Name (line 1064):
    
    # Obtaining the type of the subscript
    # Getting the type of 'start' (line 1064)
    start_275488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1064, 19), 'start')
    # Getting the type of 'start' (line 1064)
    start_275489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1064, 25), 'start')
    # Getting the type of 'num' (line 1064)
    num_275490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1064, 33), 'num')
    # Applying the binary operator '+' (line 1064)
    result_add_275491 = python_operator(stypy.reporting.localization.Localization(__file__, 1064, 25), '+', start_275489, num_275490)
    
    slice_275492 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1064, 15), start_275488, result_add_275491, None)
    # Getting the type of 'seq' (line 1064)
    seq_275493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1064, 15), 'seq')
    # Obtaining the member '__getitem__' of a type (line 1064)
    getitem___275494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1064, 15), seq_275493, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1064)
    subscript_call_result_275495 = invoke(stypy.reporting.localization.Localization(__file__, 1064, 15), getitem___275494, slice_275492)
    
    # Assigning a type to the variable 'item' (line 1064)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1064, 8), 'item', subscript_call_result_275495)
    
    
    
    # Call to len(...): (line 1065)
    # Processing the call arguments (line 1065)
    # Getting the type of 'item' (line 1065)
    item_275497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 19), 'item', False)
    # Processing the call keyword arguments (line 1065)
    kwargs_275498 = {}
    # Getting the type of 'len' (line 1065)
    len_275496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 15), 'len', False)
    # Calling len(args, kwargs) (line 1065)
    len_call_result_275499 = invoke(stypy.reporting.localization.Localization(__file__, 1065, 15), len_275496, *[item_275497], **kwargs_275498)
    
    # Applying the 'not' unary operator (line 1065)
    result_not__275500 = python_operator(stypy.reporting.localization.Localization(__file__, 1065, 11), 'not', len_call_result_275499)
    
    # Testing the type of an if condition (line 1065)
    if_condition_275501 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1065, 8), result_not__275500)
    # Assigning a type to the variable 'if_condition_275501' (line 1065)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1065, 8), 'if_condition_275501', if_condition_275501)
    # SSA begins for if statement (line 1065)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 1065)
    module_type_store = module_type_store.join_ssa_context()
    
    # Creating a generator
    # Getting the type of 'item' (line 1067)
    item_275502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 14), 'item')
    GeneratorType_275503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1067, 8), 'GeneratorType')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1067, 8), GeneratorType_275503, item_275502)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1067, 8), 'stypy_return_type', GeneratorType_275503)
    
    # Getting the type of 'start' (line 1068)
    start_275504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 8), 'start')
    # Getting the type of 'num' (line 1068)
    num_275505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 17), 'num')
    # Applying the binary operator '+=' (line 1068)
    result_iadd_275506 = python_operator(stypy.reporting.localization.Localization(__file__, 1068, 8), '+=', start_275504, num_275505)
    # Assigning a type to the variable 'start' (line 1068)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1068, 8), 'start', result_iadd_275506)
    
    # SSA join for while statement (line 1063)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'pieces(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'pieces' in the type store
    # Getting the type of 'stypy_return_type' (line 1059)
    stypy_return_type_275507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275507)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'pieces'
    return stypy_return_type_275507

# Assigning a type to the variable 'pieces' (line 1059)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1059, 0), 'pieces', pieces)

@norecursion
def exception_to_str(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1072)
    None_275508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 23), 'None')
    defaults = [None_275508]
    # Create a new context for function 'exception_to_str'
    module_type_store = module_type_store.open_function_context('exception_to_str', 1071, 0, False)
    
    # Passed parameters checking function
    exception_to_str.stypy_localization = localization
    exception_to_str.stypy_type_of_self = None
    exception_to_str.stypy_type_store = module_type_store
    exception_to_str.stypy_function_name = 'exception_to_str'
    exception_to_str.stypy_param_names_list = ['s']
    exception_to_str.stypy_varargs_param_name = None
    exception_to_str.stypy_kwargs_param_name = None
    exception_to_str.stypy_call_defaults = defaults
    exception_to_str.stypy_call_varargs = varargs
    exception_to_str.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'exception_to_str', ['s'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'exception_to_str', localization, ['s'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'exception_to_str(...)' code ##################

    
    # Getting the type of 'six' (line 1073)
    six_275509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1073, 7), 'six')
    # Obtaining the member 'PY3' of a type (line 1073)
    PY3_275510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1073, 7), six_275509, 'PY3')
    # Testing the type of an if condition (line 1073)
    if_condition_275511 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1073, 4), PY3_275510)
    # Assigning a type to the variable 'if_condition_275511' (line 1073)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1073, 4), 'if_condition_275511', if_condition_275511)
    # SSA begins for if statement (line 1073)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1074):
    
    # Assigning a Call to a Name (line 1074):
    
    # Call to StringIO(...): (line 1074)
    # Processing the call keyword arguments (line 1074)
    kwargs_275514 = {}
    # Getting the type of 'io' (line 1074)
    io_275512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 13), 'io', False)
    # Obtaining the member 'StringIO' of a type (line 1074)
    StringIO_275513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1074, 13), io_275512, 'StringIO')
    # Calling StringIO(args, kwargs) (line 1074)
    StringIO_call_result_275515 = invoke(stypy.reporting.localization.Localization(__file__, 1074, 13), StringIO_275513, *[], **kwargs_275514)
    
    # Assigning a type to the variable 'sh' (line 1074)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1074, 8), 'sh', StringIO_call_result_275515)
    # SSA branch for the else part of an if statement (line 1073)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1076):
    
    # Assigning a Call to a Name (line 1076):
    
    # Call to BytesIO(...): (line 1076)
    # Processing the call keyword arguments (line 1076)
    kwargs_275518 = {}
    # Getting the type of 'io' (line 1076)
    io_275516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 13), 'io', False)
    # Obtaining the member 'BytesIO' of a type (line 1076)
    BytesIO_275517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1076, 13), io_275516, 'BytesIO')
    # Calling BytesIO(args, kwargs) (line 1076)
    BytesIO_call_result_275519 = invoke(stypy.reporting.localization.Localization(__file__, 1076, 13), BytesIO_275517, *[], **kwargs_275518)
    
    # Assigning a type to the variable 'sh' (line 1076)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1076, 8), 'sh', BytesIO_call_result_275519)
    # SSA join for if statement (line 1073)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 1077)
    # Getting the type of 's' (line 1077)
    s_275520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1077, 4), 's')
    # Getting the type of 'None' (line 1077)
    None_275521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1077, 16), 'None')
    
    (may_be_275522, more_types_in_union_275523) = may_not_be_none(s_275520, None_275521)

    if may_be_275522:

        if more_types_in_union_275523:
            # Runtime conditional SSA (line 1077)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to print(...): (line 1078)
        # Processing the call arguments (line 1078)
        # Getting the type of 's' (line 1078)
        s_275525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 14), 's', False)
        # Processing the call keyword arguments (line 1078)
        # Getting the type of 'sh' (line 1078)
        sh_275526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 22), 'sh', False)
        keyword_275527 = sh_275526
        kwargs_275528 = {'file': keyword_275527}
        # Getting the type of 'print' (line 1078)
        print_275524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 8), 'print', False)
        # Calling print(args, kwargs) (line 1078)
        print_call_result_275529 = invoke(stypy.reporting.localization.Localization(__file__, 1078, 8), print_275524, *[s_275525], **kwargs_275528)
        

        if more_types_in_union_275523:
            # SSA join for if statement (line 1077)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Call to print_exc(...): (line 1079)
    # Processing the call keyword arguments (line 1079)
    # Getting the type of 'sh' (line 1079)
    sh_275532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1079, 29), 'sh', False)
    keyword_275533 = sh_275532
    kwargs_275534 = {'file': keyword_275533}
    # Getting the type of 'traceback' (line 1079)
    traceback_275530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1079, 4), 'traceback', False)
    # Obtaining the member 'print_exc' of a type (line 1079)
    print_exc_275531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1079, 4), traceback_275530, 'print_exc')
    # Calling print_exc(args, kwargs) (line 1079)
    print_exc_call_result_275535 = invoke(stypy.reporting.localization.Localization(__file__, 1079, 4), print_exc_275531, *[], **kwargs_275534)
    
    
    # Call to getvalue(...): (line 1080)
    # Processing the call keyword arguments (line 1080)
    kwargs_275538 = {}
    # Getting the type of 'sh' (line 1080)
    sh_275536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 11), 'sh', False)
    # Obtaining the member 'getvalue' of a type (line 1080)
    getvalue_275537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1080, 11), sh_275536, 'getvalue')
    # Calling getvalue(args, kwargs) (line 1080)
    getvalue_call_result_275539 = invoke(stypy.reporting.localization.Localization(__file__, 1080, 11), getvalue_275537, *[], **kwargs_275538)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1080)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1080, 4), 'stypy_return_type', getvalue_call_result_275539)
    
    # ################# End of 'exception_to_str(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'exception_to_str' in the type store
    # Getting the type of 'stypy_return_type' (line 1071)
    stypy_return_type_275540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1071, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275540)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'exception_to_str'
    return stypy_return_type_275540

# Assigning a type to the variable 'exception_to_str' (line 1071)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1071, 0), 'exception_to_str', exception_to_str)

@norecursion
def allequal(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'allequal'
    module_type_store = module_type_store.open_function_context('allequal', 1083, 0, False)
    
    # Passed parameters checking function
    allequal.stypy_localization = localization
    allequal.stypy_type_of_self = None
    allequal.stypy_type_store = module_type_store
    allequal.stypy_function_name = 'allequal'
    allequal.stypy_param_names_list = ['seq']
    allequal.stypy_varargs_param_name = None
    allequal.stypy_kwargs_param_name = None
    allequal.stypy_call_defaults = defaults
    allequal.stypy_call_varargs = varargs
    allequal.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'allequal', ['seq'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'allequal', localization, ['seq'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'allequal(...)' code ##################

    unicode_275541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1088, (-1)), 'unicode', u'\n    Return *True* if all elements of *seq* compare equal.  If *seq* is\n    0 or 1 length, return *True*\n    ')
    
    
    
    # Call to len(...): (line 1089)
    # Processing the call arguments (line 1089)
    # Getting the type of 'seq' (line 1089)
    seq_275543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 11), 'seq', False)
    # Processing the call keyword arguments (line 1089)
    kwargs_275544 = {}
    # Getting the type of 'len' (line 1089)
    len_275542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 7), 'len', False)
    # Calling len(args, kwargs) (line 1089)
    len_call_result_275545 = invoke(stypy.reporting.localization.Localization(__file__, 1089, 7), len_275542, *[seq_275543], **kwargs_275544)
    
    int_275546 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1089, 18), 'int')
    # Applying the binary operator '<' (line 1089)
    result_lt_275547 = python_operator(stypy.reporting.localization.Localization(__file__, 1089, 7), '<', len_call_result_275545, int_275546)
    
    # Testing the type of an if condition (line 1089)
    if_condition_275548 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1089, 4), result_lt_275547)
    # Assigning a type to the variable 'if_condition_275548' (line 1089)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1089, 4), 'if_condition_275548', if_condition_275548)
    # SSA begins for if statement (line 1089)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'True' (line 1090)
    True_275549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1090, 15), 'True')
    # Assigning a type to the variable 'stypy_return_type' (line 1090)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1090, 8), 'stypy_return_type', True_275549)
    # SSA join for if statement (line 1089)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 1091):
    
    # Assigning a Subscript to a Name (line 1091):
    
    # Obtaining the type of the subscript
    int_275550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1091, 14), 'int')
    # Getting the type of 'seq' (line 1091)
    seq_275551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 10), 'seq')
    # Obtaining the member '__getitem__' of a type (line 1091)
    getitem___275552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1091, 10), seq_275551, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1091)
    subscript_call_result_275553 = invoke(stypy.reporting.localization.Localization(__file__, 1091, 10), getitem___275552, int_275550)
    
    # Assigning a type to the variable 'val' (line 1091)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1091, 4), 'val', subscript_call_result_275553)
    
    
    # Call to xrange(...): (line 1092)
    # Processing the call arguments (line 1092)
    int_275555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1092, 20), 'int')
    
    # Call to len(...): (line 1092)
    # Processing the call arguments (line 1092)
    # Getting the type of 'seq' (line 1092)
    seq_275557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 27), 'seq', False)
    # Processing the call keyword arguments (line 1092)
    kwargs_275558 = {}
    # Getting the type of 'len' (line 1092)
    len_275556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 23), 'len', False)
    # Calling len(args, kwargs) (line 1092)
    len_call_result_275559 = invoke(stypy.reporting.localization.Localization(__file__, 1092, 23), len_275556, *[seq_275557], **kwargs_275558)
    
    # Processing the call keyword arguments (line 1092)
    kwargs_275560 = {}
    # Getting the type of 'xrange' (line 1092)
    xrange_275554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 13), 'xrange', False)
    # Calling xrange(args, kwargs) (line 1092)
    xrange_call_result_275561 = invoke(stypy.reporting.localization.Localization(__file__, 1092, 13), xrange_275554, *[int_275555, len_call_result_275559], **kwargs_275560)
    
    # Testing the type of a for loop iterable (line 1092)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1092, 4), xrange_call_result_275561)
    # Getting the type of the for loop variable (line 1092)
    for_loop_var_275562 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1092, 4), xrange_call_result_275561)
    # Assigning a type to the variable 'i' (line 1092)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1092, 4), 'i', for_loop_var_275562)
    # SSA begins for a for statement (line 1092)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Name (line 1093):
    
    # Assigning a Subscript to a Name (line 1093):
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1093)
    i_275563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 22), 'i')
    # Getting the type of 'seq' (line 1093)
    seq_275564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 18), 'seq')
    # Obtaining the member '__getitem__' of a type (line 1093)
    getitem___275565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1093, 18), seq_275564, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1093)
    subscript_call_result_275566 = invoke(stypy.reporting.localization.Localization(__file__, 1093, 18), getitem___275565, i_275563)
    
    # Assigning a type to the variable 'thisval' (line 1093)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1093, 8), 'thisval', subscript_call_result_275566)
    
    
    # Getting the type of 'thisval' (line 1094)
    thisval_275567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 11), 'thisval')
    # Getting the type of 'val' (line 1094)
    val_275568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 22), 'val')
    # Applying the binary operator '!=' (line 1094)
    result_ne_275569 = python_operator(stypy.reporting.localization.Localization(__file__, 1094, 11), '!=', thisval_275567, val_275568)
    
    # Testing the type of an if condition (line 1094)
    if_condition_275570 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1094, 8), result_ne_275569)
    # Assigning a type to the variable 'if_condition_275570' (line 1094)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1094, 8), 'if_condition_275570', if_condition_275570)
    # SSA begins for if statement (line 1094)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'False' (line 1095)
    False_275571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1095, 19), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 1095)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1095, 12), 'stypy_return_type', False_275571)
    # SSA join for if statement (line 1094)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'True' (line 1096)
    True_275572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 11), 'True')
    # Assigning a type to the variable 'stypy_return_type' (line 1096)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1096, 4), 'stypy_return_type', True_275572)
    
    # ################# End of 'allequal(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'allequal' in the type store
    # Getting the type of 'stypy_return_type' (line 1083)
    stypy_return_type_275573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1083, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275573)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'allequal'
    return stypy_return_type_275573

# Assigning a type to the variable 'allequal' (line 1083)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1083, 0), 'allequal', allequal)

@norecursion
def alltrue(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'alltrue'
    module_type_store = module_type_store.open_function_context('alltrue', 1099, 0, False)
    
    # Passed parameters checking function
    alltrue.stypy_localization = localization
    alltrue.stypy_type_of_self = None
    alltrue.stypy_type_store = module_type_store
    alltrue.stypy_function_name = 'alltrue'
    alltrue.stypy_param_names_list = ['seq']
    alltrue.stypy_varargs_param_name = None
    alltrue.stypy_kwargs_param_name = None
    alltrue.stypy_call_defaults = defaults
    alltrue.stypy_call_varargs = varargs
    alltrue.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'alltrue', ['seq'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'alltrue', localization, ['seq'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'alltrue(...)' code ##################

    unicode_275574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1104, (-1)), 'unicode', u'\n    Return *True* if all elements of *seq* evaluate to *True*.  If\n    *seq* is empty, return *False*.\n    ')
    
    
    
    # Call to len(...): (line 1105)
    # Processing the call arguments (line 1105)
    # Getting the type of 'seq' (line 1105)
    seq_275576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 15), 'seq', False)
    # Processing the call keyword arguments (line 1105)
    kwargs_275577 = {}
    # Getting the type of 'len' (line 1105)
    len_275575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 11), 'len', False)
    # Calling len(args, kwargs) (line 1105)
    len_call_result_275578 = invoke(stypy.reporting.localization.Localization(__file__, 1105, 11), len_275575, *[seq_275576], **kwargs_275577)
    
    # Applying the 'not' unary operator (line 1105)
    result_not__275579 = python_operator(stypy.reporting.localization.Localization(__file__, 1105, 7), 'not', len_call_result_275578)
    
    # Testing the type of an if condition (line 1105)
    if_condition_275580 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1105, 4), result_not__275579)
    # Assigning a type to the variable 'if_condition_275580' (line 1105)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1105, 4), 'if_condition_275580', if_condition_275580)
    # SSA begins for if statement (line 1105)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'False' (line 1106)
    False_275581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 1106)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1106, 8), 'stypy_return_type', False_275581)
    # SSA join for if statement (line 1105)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'seq' (line 1107)
    seq_275582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 15), 'seq')
    # Testing the type of a for loop iterable (line 1107)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1107, 4), seq_275582)
    # Getting the type of the for loop variable (line 1107)
    for_loop_var_275583 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1107, 4), seq_275582)
    # Assigning a type to the variable 'val' (line 1107)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1107, 4), 'val', for_loop_var_275583)
    # SSA begins for a for statement (line 1107)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'val' (line 1108)
    val_275584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 15), 'val')
    # Applying the 'not' unary operator (line 1108)
    result_not__275585 = python_operator(stypy.reporting.localization.Localization(__file__, 1108, 11), 'not', val_275584)
    
    # Testing the type of an if condition (line 1108)
    if_condition_275586 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1108, 8), result_not__275585)
    # Assigning a type to the variable 'if_condition_275586' (line 1108)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1108, 8), 'if_condition_275586', if_condition_275586)
    # SSA begins for if statement (line 1108)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'False' (line 1109)
    False_275587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 19), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 1109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1109, 12), 'stypy_return_type', False_275587)
    # SSA join for if statement (line 1108)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'True' (line 1110)
    True_275588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 11), 'True')
    # Assigning a type to the variable 'stypy_return_type' (line 1110)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1110, 4), 'stypy_return_type', True_275588)
    
    # ################# End of 'alltrue(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'alltrue' in the type store
    # Getting the type of 'stypy_return_type' (line 1099)
    stypy_return_type_275589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275589)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'alltrue'
    return stypy_return_type_275589

# Assigning a type to the variable 'alltrue' (line 1099)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1099, 0), 'alltrue', alltrue)

@norecursion
def onetrue(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'onetrue'
    module_type_store = module_type_store.open_function_context('onetrue', 1113, 0, False)
    
    # Passed parameters checking function
    onetrue.stypy_localization = localization
    onetrue.stypy_type_of_self = None
    onetrue.stypy_type_store = module_type_store
    onetrue.stypy_function_name = 'onetrue'
    onetrue.stypy_param_names_list = ['seq']
    onetrue.stypy_varargs_param_name = None
    onetrue.stypy_kwargs_param_name = None
    onetrue.stypy_call_defaults = defaults
    onetrue.stypy_call_varargs = varargs
    onetrue.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'onetrue', ['seq'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'onetrue', localization, ['seq'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'onetrue(...)' code ##################

    unicode_275590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1118, (-1)), 'unicode', u'\n    Return *True* if one element of *seq* is *True*.  It *seq* is\n    empty, return *False*.\n    ')
    
    
    
    # Call to len(...): (line 1119)
    # Processing the call arguments (line 1119)
    # Getting the type of 'seq' (line 1119)
    seq_275592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 15), 'seq', False)
    # Processing the call keyword arguments (line 1119)
    kwargs_275593 = {}
    # Getting the type of 'len' (line 1119)
    len_275591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 11), 'len', False)
    # Calling len(args, kwargs) (line 1119)
    len_call_result_275594 = invoke(stypy.reporting.localization.Localization(__file__, 1119, 11), len_275591, *[seq_275592], **kwargs_275593)
    
    # Applying the 'not' unary operator (line 1119)
    result_not__275595 = python_operator(stypy.reporting.localization.Localization(__file__, 1119, 7), 'not', len_call_result_275594)
    
    # Testing the type of an if condition (line 1119)
    if_condition_275596 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1119, 4), result_not__275595)
    # Assigning a type to the variable 'if_condition_275596' (line 1119)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1119, 4), 'if_condition_275596', if_condition_275596)
    # SSA begins for if statement (line 1119)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'False' (line 1120)
    False_275597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 1120)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1120, 8), 'stypy_return_type', False_275597)
    # SSA join for if statement (line 1119)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'seq' (line 1121)
    seq_275598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1121, 15), 'seq')
    # Testing the type of a for loop iterable (line 1121)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1121, 4), seq_275598)
    # Getting the type of the for loop variable (line 1121)
    for_loop_var_275599 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1121, 4), seq_275598)
    # Assigning a type to the variable 'val' (line 1121)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1121, 4), 'val', for_loop_var_275599)
    # SSA begins for a for statement (line 1121)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Getting the type of 'val' (line 1122)
    val_275600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 11), 'val')
    # Testing the type of an if condition (line 1122)
    if_condition_275601 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1122, 8), val_275600)
    # Assigning a type to the variable 'if_condition_275601' (line 1122)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1122, 8), 'if_condition_275601', if_condition_275601)
    # SSA begins for if statement (line 1122)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'True' (line 1123)
    True_275602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 19), 'True')
    # Assigning a type to the variable 'stypy_return_type' (line 1123)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1123, 12), 'stypy_return_type', True_275602)
    # SSA join for if statement (line 1122)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'False' (line 1124)
    False_275603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 11), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 1124)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1124, 4), 'stypy_return_type', False_275603)
    
    # ################# End of 'onetrue(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'onetrue' in the type store
    # Getting the type of 'stypy_return_type' (line 1113)
    stypy_return_type_275604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275604)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'onetrue'
    return stypy_return_type_275604

# Assigning a type to the variable 'onetrue' (line 1113)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1113, 0), 'onetrue', onetrue)

@norecursion
def allpairs(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'allpairs'
    module_type_store = module_type_store.open_function_context('allpairs', 1127, 0, False)
    
    # Passed parameters checking function
    allpairs.stypy_localization = localization
    allpairs.stypy_type_of_self = None
    allpairs.stypy_type_store = module_type_store
    allpairs.stypy_function_name = 'allpairs'
    allpairs.stypy_param_names_list = ['x']
    allpairs.stypy_varargs_param_name = None
    allpairs.stypy_kwargs_param_name = None
    allpairs.stypy_call_defaults = defaults
    allpairs.stypy_call_varargs = varargs
    allpairs.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'allpairs', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'allpairs', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'allpairs(...)' code ##################

    unicode_275605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1131, (-1)), 'unicode', u'\n    return all possible pairs in sequence *x*\n    ')
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to enumerate(...): (line 1132)
    # Processing the call arguments (line 1132)
    # Getting the type of 'x' (line 1132)
    x_275610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 41), 'x', False)
    # Processing the call keyword arguments (line 1132)
    kwargs_275611 = {}
    # Getting the type of 'enumerate' (line 1132)
    enumerate_275609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 31), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 1132)
    enumerate_call_result_275612 = invoke(stypy.reporting.localization.Localization(__file__, 1132, 31), enumerate_275609, *[x_275610], **kwargs_275611)
    
    comprehension_275613 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1132, 12), enumerate_call_result_275612)
    # Assigning a type to the variable 'i' (line 1132)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1132, 12), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1132, 12), comprehension_275613))
    # Assigning a type to the variable 'f' (line 1132)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1132, 12), 'f', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1132, 12), comprehension_275613))
    # Calculating comprehension expression
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1132)
    i_275614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 55), 'i')
    int_275615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1132, 59), 'int')
    # Applying the binary operator '+' (line 1132)
    result_add_275616 = python_operator(stypy.reporting.localization.Localization(__file__, 1132, 55), '+', i_275614, int_275615)
    
    slice_275617 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1132, 53), result_add_275616, None, None)
    # Getting the type of 'x' (line 1132)
    x_275618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 53), 'x')
    # Obtaining the member '__getitem__' of a type (line 1132)
    getitem___275619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1132, 53), x_275618, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1132)
    subscript_call_result_275620 = invoke(stypy.reporting.localization.Localization(__file__, 1132, 53), getitem___275619, slice_275617)
    
    comprehension_275621 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1132, 12), subscript_call_result_275620)
    # Assigning a type to the variable 's' (line 1132)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1132, 12), 's', comprehension_275621)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1132)
    tuple_275606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1132, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1132)
    # Adding element type (line 1132)
    # Getting the type of 's' (line 1132)
    s_275607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 13), 's')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1132, 13), tuple_275606, s_275607)
    # Adding element type (line 1132)
    # Getting the type of 'f' (line 1132)
    f_275608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 16), 'f')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1132, 13), tuple_275606, f_275608)
    
    list_275622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1132, 12), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1132, 12), list_275622, tuple_275606)
    # Assigning a type to the variable 'stypy_return_type' (line 1132)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1132, 4), 'stypy_return_type', list_275622)
    
    # ################# End of 'allpairs(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'allpairs' in the type store
    # Getting the type of 'stypy_return_type' (line 1127)
    stypy_return_type_275623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275623)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'allpairs'
    return stypy_return_type_275623

# Assigning a type to the variable 'allpairs' (line 1127)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1127, 0), 'allpairs', allpairs)
# Declaration of the 'maxdict' class
# Getting the type of 'dict' (line 1135)
dict_275624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 14), 'dict')

class maxdict(dict_275624, ):
    unicode_275625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1140, (-1)), 'unicode', u"\n    A dictionary with a maximum size; this doesn't override all the\n    relevant methods to constrain the size, just setitem, so use with\n    caution\n    ")

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1141, 4, False)
        # Assigning a type to the variable 'self' (line 1142)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1142, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'maxdict.__init__', ['maxsize'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['maxsize'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1142)
        # Processing the call arguments (line 1142)
        # Getting the type of 'self' (line 1142)
        self_275628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 22), 'self', False)
        # Processing the call keyword arguments (line 1142)
        kwargs_275629 = {}
        # Getting the type of 'dict' (line 1142)
        dict_275626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 8), 'dict', False)
        # Obtaining the member '__init__' of a type (line 1142)
        init___275627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1142, 8), dict_275626, '__init__')
        # Calling __init__(args, kwargs) (line 1142)
        init___call_result_275630 = invoke(stypy.reporting.localization.Localization(__file__, 1142, 8), init___275627, *[self_275628], **kwargs_275629)
        
        
        # Assigning a Name to a Attribute (line 1143):
        
        # Assigning a Name to a Attribute (line 1143):
        # Getting the type of 'maxsize' (line 1143)
        maxsize_275631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 23), 'maxsize')
        # Getting the type of 'self' (line 1143)
        self_275632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 8), 'self')
        # Setting the type of the member 'maxsize' of a type (line 1143)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1143, 8), self_275632, 'maxsize', maxsize_275631)
        
        # Assigning a List to a Attribute (line 1144):
        
        # Assigning a List to a Attribute (line 1144):
        
        # Obtaining an instance of the builtin type 'list' (line 1144)
        list_275633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1144, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1144)
        
        # Getting the type of 'self' (line 1144)
        self_275634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 8), 'self')
        # Setting the type of the member '_killkeys' of a type (line 1144)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1144, 8), self_275634, '_killkeys', list_275633)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __setitem__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__setitem__'
        module_type_store = module_type_store.open_function_context('__setitem__', 1146, 4, False)
        # Assigning a type to the variable 'self' (line 1147)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1147, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        maxdict.__setitem__.__dict__.__setitem__('stypy_localization', localization)
        maxdict.__setitem__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        maxdict.__setitem__.__dict__.__setitem__('stypy_type_store', module_type_store)
        maxdict.__setitem__.__dict__.__setitem__('stypy_function_name', 'maxdict.__setitem__')
        maxdict.__setitem__.__dict__.__setitem__('stypy_param_names_list', ['k', 'v'])
        maxdict.__setitem__.__dict__.__setitem__('stypy_varargs_param_name', None)
        maxdict.__setitem__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        maxdict.__setitem__.__dict__.__setitem__('stypy_call_defaults', defaults)
        maxdict.__setitem__.__dict__.__setitem__('stypy_call_varargs', varargs)
        maxdict.__setitem__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        maxdict.__setitem__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'maxdict.__setitem__', ['k', 'v'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__setitem__', localization, ['k', 'v'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__setitem__(...)' code ##################

        
        
        # Getting the type of 'k' (line 1147)
        k_275635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 11), 'k')
        # Getting the type of 'self' (line 1147)
        self_275636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 20), 'self')
        # Applying the binary operator 'notin' (line 1147)
        result_contains_275637 = python_operator(stypy.reporting.localization.Localization(__file__, 1147, 11), 'notin', k_275635, self_275636)
        
        # Testing the type of an if condition (line 1147)
        if_condition_275638 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1147, 8), result_contains_275637)
        # Assigning a type to the variable 'if_condition_275638' (line 1147)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1147, 8), 'if_condition_275638', if_condition_275638)
        # SSA begins for if statement (line 1147)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        
        # Call to len(...): (line 1148)
        # Processing the call arguments (line 1148)
        # Getting the type of 'self' (line 1148)
        self_275640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 19), 'self', False)
        # Processing the call keyword arguments (line 1148)
        kwargs_275641 = {}
        # Getting the type of 'len' (line 1148)
        len_275639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 15), 'len', False)
        # Calling len(args, kwargs) (line 1148)
        len_call_result_275642 = invoke(stypy.reporting.localization.Localization(__file__, 1148, 15), len_275639, *[self_275640], **kwargs_275641)
        
        # Getting the type of 'self' (line 1148)
        self_275643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 28), 'self')
        # Obtaining the member 'maxsize' of a type (line 1148)
        maxsize_275644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1148, 28), self_275643, 'maxsize')
        # Applying the binary operator '>=' (line 1148)
        result_ge_275645 = python_operator(stypy.reporting.localization.Localization(__file__, 1148, 15), '>=', len_call_result_275642, maxsize_275644)
        
        # Testing the type of an if condition (line 1148)
        if_condition_275646 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1148, 12), result_ge_275645)
        # Assigning a type to the variable 'if_condition_275646' (line 1148)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1148, 12), 'if_condition_275646', if_condition_275646)
        # SSA begins for if statement (line 1148)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Deleting a member
        # Getting the type of 'self' (line 1149)
        self_275647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 20), 'self')
        
        # Obtaining the type of the subscript
        
        # Obtaining the type of the subscript
        int_275648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1149, 40), 'int')
        # Getting the type of 'self' (line 1149)
        self_275649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 25), 'self')
        # Obtaining the member '_killkeys' of a type (line 1149)
        _killkeys_275650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1149, 25), self_275649, '_killkeys')
        # Obtaining the member '__getitem__' of a type (line 1149)
        getitem___275651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1149, 25), _killkeys_275650, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1149)
        subscript_call_result_275652 = invoke(stypy.reporting.localization.Localization(__file__, 1149, 25), getitem___275651, int_275648)
        
        # Getting the type of 'self' (line 1149)
        self_275653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 20), 'self')
        # Obtaining the member '__getitem__' of a type (line 1149)
        getitem___275654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1149, 20), self_275653, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1149)
        subscript_call_result_275655 = invoke(stypy.reporting.localization.Localization(__file__, 1149, 20), getitem___275654, subscript_call_result_275652)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1149, 16), self_275647, subscript_call_result_275655)
        # Deleting a member
        # Getting the type of 'self' (line 1150)
        self_275656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 20), 'self')
        # Obtaining the member '_killkeys' of a type (line 1150)
        _killkeys_275657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1150, 20), self_275656, '_killkeys')
        
        # Obtaining the type of the subscript
        int_275658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1150, 35), 'int')
        # Getting the type of 'self' (line 1150)
        self_275659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 20), 'self')
        # Obtaining the member '_killkeys' of a type (line 1150)
        _killkeys_275660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1150, 20), self_275659, '_killkeys')
        # Obtaining the member '__getitem__' of a type (line 1150)
        getitem___275661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1150, 20), _killkeys_275660, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1150)
        subscript_call_result_275662 = invoke(stypy.reporting.localization.Localization(__file__, 1150, 20), getitem___275661, int_275658)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1150, 16), _killkeys_275657, subscript_call_result_275662)
        # SSA join for if statement (line 1148)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 1151)
        # Processing the call arguments (line 1151)
        # Getting the type of 'k' (line 1151)
        k_275666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1151, 34), 'k', False)
        # Processing the call keyword arguments (line 1151)
        kwargs_275667 = {}
        # Getting the type of 'self' (line 1151)
        self_275663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1151, 12), 'self', False)
        # Obtaining the member '_killkeys' of a type (line 1151)
        _killkeys_275664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1151, 12), self_275663, '_killkeys')
        # Obtaining the member 'append' of a type (line 1151)
        append_275665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1151, 12), _killkeys_275664, 'append')
        # Calling append(args, kwargs) (line 1151)
        append_call_result_275668 = invoke(stypy.reporting.localization.Localization(__file__, 1151, 12), append_275665, *[k_275666], **kwargs_275667)
        
        # SSA join for if statement (line 1147)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __setitem__(...): (line 1152)
        # Processing the call arguments (line 1152)
        # Getting the type of 'self' (line 1152)
        self_275671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 25), 'self', False)
        # Getting the type of 'k' (line 1152)
        k_275672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 31), 'k', False)
        # Getting the type of 'v' (line 1152)
        v_275673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 34), 'v', False)
        # Processing the call keyword arguments (line 1152)
        kwargs_275674 = {}
        # Getting the type of 'dict' (line 1152)
        dict_275669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 8), 'dict', False)
        # Obtaining the member '__setitem__' of a type (line 1152)
        setitem___275670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1152, 8), dict_275669, '__setitem__')
        # Calling __setitem__(args, kwargs) (line 1152)
        setitem___call_result_275675 = invoke(stypy.reporting.localization.Localization(__file__, 1152, 8), setitem___275670, *[self_275671, k_275672, v_275673], **kwargs_275674)
        
        
        # ################# End of '__setitem__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__setitem__' in the type store
        # Getting the type of 'stypy_return_type' (line 1146)
        stypy_return_type_275676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_275676)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__setitem__'
        return stypy_return_type_275676


# Assigning a type to the variable 'maxdict' (line 1135)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1135, 0), 'maxdict', maxdict)
# Declaration of the 'Stack' class

class Stack(object, ):
    unicode_275677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1160, (-1)), 'unicode', u'\n    Implement a stack where elements can be pushed on and you can move\n    back and forth.  But no pop.  Should mimic home / back / forward\n    in a browser\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1162)
        None_275678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1162, 31), 'None')
        defaults = [None_275678]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1162, 4, False)
        # Assigning a type to the variable 'self' (line 1163)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1163, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stack.__init__', ['default'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['default'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to clear(...): (line 1163)
        # Processing the call keyword arguments (line 1163)
        kwargs_275681 = {}
        # Getting the type of 'self' (line 1163)
        self_275679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 8), 'self', False)
        # Obtaining the member 'clear' of a type (line 1163)
        clear_275680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1163, 8), self_275679, 'clear')
        # Calling clear(args, kwargs) (line 1163)
        clear_call_result_275682 = invoke(stypy.reporting.localization.Localization(__file__, 1163, 8), clear_275680, *[], **kwargs_275681)
        
        
        # Assigning a Name to a Attribute (line 1164):
        
        # Assigning a Name to a Attribute (line 1164):
        # Getting the type of 'default' (line 1164)
        default_275683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 24), 'default')
        # Getting the type of 'self' (line 1164)
        self_275684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 8), 'self')
        # Setting the type of the member '_default' of a type (line 1164)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1164, 8), self_275684, '_default', default_275683)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 1166, 4, False)
        # Assigning a type to the variable 'self' (line 1167)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1167, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stack.__call__.__dict__.__setitem__('stypy_localization', localization)
        Stack.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stack.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stack.__call__.__dict__.__setitem__('stypy_function_name', 'Stack.__call__')
        Stack.__call__.__dict__.__setitem__('stypy_param_names_list', [])
        Stack.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stack.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stack.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stack.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stack.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stack.__call__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stack.__call__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        unicode_275685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1167, 8), 'unicode', u'return the current element, or None')
        
        
        
        # Call to len(...): (line 1168)
        # Processing the call arguments (line 1168)
        # Getting the type of 'self' (line 1168)
        self_275687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 19), 'self', False)
        # Obtaining the member '_elements' of a type (line 1168)
        _elements_275688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1168, 19), self_275687, '_elements')
        # Processing the call keyword arguments (line 1168)
        kwargs_275689 = {}
        # Getting the type of 'len' (line 1168)
        len_275686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 15), 'len', False)
        # Calling len(args, kwargs) (line 1168)
        len_call_result_275690 = invoke(stypy.reporting.localization.Localization(__file__, 1168, 15), len_275686, *[_elements_275688], **kwargs_275689)
        
        # Applying the 'not' unary operator (line 1168)
        result_not__275691 = python_operator(stypy.reporting.localization.Localization(__file__, 1168, 11), 'not', len_call_result_275690)
        
        # Testing the type of an if condition (line 1168)
        if_condition_275692 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1168, 8), result_not__275691)
        # Assigning a type to the variable 'if_condition_275692' (line 1168)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1168, 8), 'if_condition_275692', if_condition_275692)
        # SSA begins for if statement (line 1168)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 1169)
        self_275693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 19), 'self')
        # Obtaining the member '_default' of a type (line 1169)
        _default_275694 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1169, 19), self_275693, '_default')
        # Assigning a type to the variable 'stypy_return_type' (line 1169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1169, 12), 'stypy_return_type', _default_275694)
        # SSA branch for the else part of an if statement (line 1168)
        module_type_store.open_ssa_branch('else')
        
        # Obtaining the type of the subscript
        # Getting the type of 'self' (line 1171)
        self_275695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 34), 'self')
        # Obtaining the member '_pos' of a type (line 1171)
        _pos_275696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1171, 34), self_275695, '_pos')
        # Getting the type of 'self' (line 1171)
        self_275697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 19), 'self')
        # Obtaining the member '_elements' of a type (line 1171)
        _elements_275698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1171, 19), self_275697, '_elements')
        # Obtaining the member '__getitem__' of a type (line 1171)
        getitem___275699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1171, 19), _elements_275698, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1171)
        subscript_call_result_275700 = invoke(stypy.reporting.localization.Localization(__file__, 1171, 19), getitem___275699, _pos_275696)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1171)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1171, 12), 'stypy_return_type', subscript_call_result_275700)
        # SSA join for if statement (line 1168)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 1166)
        stypy_return_type_275701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_275701)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_275701


    @norecursion
    def __len__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__len__'
        module_type_store = module_type_store.open_function_context('__len__', 1173, 4, False)
        # Assigning a type to the variable 'self' (line 1174)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1174, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stack.__len__.__dict__.__setitem__('stypy_localization', localization)
        Stack.__len__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stack.__len__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stack.__len__.__dict__.__setitem__('stypy_function_name', 'Stack.__len__')
        Stack.__len__.__dict__.__setitem__('stypy_param_names_list', [])
        Stack.__len__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stack.__len__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stack.__len__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stack.__len__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stack.__len__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stack.__len__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stack.__len__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__len__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__len__(...)' code ##################

        
        # Call to __len__(...): (line 1174)
        # Processing the call keyword arguments (line 1174)
        kwargs_275705 = {}
        # Getting the type of 'self' (line 1174)
        self_275702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1174, 15), 'self', False)
        # Obtaining the member '_elements' of a type (line 1174)
        _elements_275703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1174, 15), self_275702, '_elements')
        # Obtaining the member '__len__' of a type (line 1174)
        len___275704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1174, 15), _elements_275703, '__len__')
        # Calling __len__(args, kwargs) (line 1174)
        len___call_result_275706 = invoke(stypy.reporting.localization.Localization(__file__, 1174, 15), len___275704, *[], **kwargs_275705)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1174)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1174, 8), 'stypy_return_type', len___call_result_275706)
        
        # ################# End of '__len__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__len__' in the type store
        # Getting the type of 'stypy_return_type' (line 1173)
        stypy_return_type_275707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1173, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_275707)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__len__'
        return stypy_return_type_275707


    @norecursion
    def __getitem__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__getitem__'
        module_type_store = module_type_store.open_function_context('__getitem__', 1176, 4, False)
        # Assigning a type to the variable 'self' (line 1177)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1177, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stack.__getitem__.__dict__.__setitem__('stypy_localization', localization)
        Stack.__getitem__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stack.__getitem__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stack.__getitem__.__dict__.__setitem__('stypy_function_name', 'Stack.__getitem__')
        Stack.__getitem__.__dict__.__setitem__('stypy_param_names_list', ['ind'])
        Stack.__getitem__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stack.__getitem__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stack.__getitem__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stack.__getitem__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stack.__getitem__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stack.__getitem__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stack.__getitem__', ['ind'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__getitem__', localization, ['ind'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__getitem__(...)' code ##################

        
        # Call to __getitem__(...): (line 1177)
        # Processing the call arguments (line 1177)
        # Getting the type of 'ind' (line 1177)
        ind_275711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 42), 'ind', False)
        # Processing the call keyword arguments (line 1177)
        kwargs_275712 = {}
        # Getting the type of 'self' (line 1177)
        self_275708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 15), 'self', False)
        # Obtaining the member '_elements' of a type (line 1177)
        _elements_275709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1177, 15), self_275708, '_elements')
        # Obtaining the member '__getitem__' of a type (line 1177)
        getitem___275710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1177, 15), _elements_275709, '__getitem__')
        # Calling __getitem__(args, kwargs) (line 1177)
        getitem___call_result_275713 = invoke(stypy.reporting.localization.Localization(__file__, 1177, 15), getitem___275710, *[ind_275711], **kwargs_275712)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1177)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1177, 8), 'stypy_return_type', getitem___call_result_275713)
        
        # ################# End of '__getitem__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__getitem__' in the type store
        # Getting the type of 'stypy_return_type' (line 1176)
        stypy_return_type_275714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_275714)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__getitem__'
        return stypy_return_type_275714


    @norecursion
    def forward(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'forward'
        module_type_store = module_type_store.open_function_context('forward', 1179, 4, False)
        # Assigning a type to the variable 'self' (line 1180)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1180, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stack.forward.__dict__.__setitem__('stypy_localization', localization)
        Stack.forward.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stack.forward.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stack.forward.__dict__.__setitem__('stypy_function_name', 'Stack.forward')
        Stack.forward.__dict__.__setitem__('stypy_param_names_list', [])
        Stack.forward.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stack.forward.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stack.forward.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stack.forward.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stack.forward.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stack.forward.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stack.forward', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'forward', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'forward(...)' code ##################

        unicode_275715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1180, 8), 'unicode', u'move the position forward and return the current element')
        
        # Assigning a Call to a Name (line 1181):
        
        # Assigning a Call to a Name (line 1181):
        
        # Call to len(...): (line 1181)
        # Processing the call arguments (line 1181)
        # Getting the type of 'self' (line 1181)
        self_275717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 16), 'self', False)
        # Obtaining the member '_elements' of a type (line 1181)
        _elements_275718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1181, 16), self_275717, '_elements')
        # Processing the call keyword arguments (line 1181)
        kwargs_275719 = {}
        # Getting the type of 'len' (line 1181)
        len_275716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 12), 'len', False)
        # Calling len(args, kwargs) (line 1181)
        len_call_result_275720 = invoke(stypy.reporting.localization.Localization(__file__, 1181, 12), len_275716, *[_elements_275718], **kwargs_275719)
        
        # Assigning a type to the variable 'n' (line 1181)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1181, 8), 'n', len_call_result_275720)
        
        
        # Getting the type of 'self' (line 1182)
        self_275721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 11), 'self')
        # Obtaining the member '_pos' of a type (line 1182)
        _pos_275722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1182, 11), self_275721, '_pos')
        # Getting the type of 'n' (line 1182)
        n_275723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 23), 'n')
        int_275724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1182, 27), 'int')
        # Applying the binary operator '-' (line 1182)
        result_sub_275725 = python_operator(stypy.reporting.localization.Localization(__file__, 1182, 23), '-', n_275723, int_275724)
        
        # Applying the binary operator '<' (line 1182)
        result_lt_275726 = python_operator(stypy.reporting.localization.Localization(__file__, 1182, 11), '<', _pos_275722, result_sub_275725)
        
        # Testing the type of an if condition (line 1182)
        if_condition_275727 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1182, 8), result_lt_275726)
        # Assigning a type to the variable 'if_condition_275727' (line 1182)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1182, 8), 'if_condition_275727', if_condition_275727)
        # SSA begins for if statement (line 1182)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'self' (line 1183)
        self_275728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 12), 'self')
        # Obtaining the member '_pos' of a type (line 1183)
        _pos_275729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1183, 12), self_275728, '_pos')
        int_275730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1183, 25), 'int')
        # Applying the binary operator '+=' (line 1183)
        result_iadd_275731 = python_operator(stypy.reporting.localization.Localization(__file__, 1183, 12), '+=', _pos_275729, int_275730)
        # Getting the type of 'self' (line 1183)
        self_275732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 12), 'self')
        # Setting the type of the member '_pos' of a type (line 1183)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1183, 12), self_275732, '_pos', result_iadd_275731)
        
        # SSA join for if statement (line 1182)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to self(...): (line 1184)
        # Processing the call keyword arguments (line 1184)
        kwargs_275734 = {}
        # Getting the type of 'self' (line 1184)
        self_275733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 15), 'self', False)
        # Calling self(args, kwargs) (line 1184)
        self_call_result_275735 = invoke(stypy.reporting.localization.Localization(__file__, 1184, 15), self_275733, *[], **kwargs_275734)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1184, 8), 'stypy_return_type', self_call_result_275735)
        
        # ################# End of 'forward(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'forward' in the type store
        # Getting the type of 'stypy_return_type' (line 1179)
        stypy_return_type_275736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_275736)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'forward'
        return stypy_return_type_275736


    @norecursion
    def back(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'back'
        module_type_store = module_type_store.open_function_context('back', 1186, 4, False)
        # Assigning a type to the variable 'self' (line 1187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1187, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stack.back.__dict__.__setitem__('stypy_localization', localization)
        Stack.back.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stack.back.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stack.back.__dict__.__setitem__('stypy_function_name', 'Stack.back')
        Stack.back.__dict__.__setitem__('stypy_param_names_list', [])
        Stack.back.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stack.back.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stack.back.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stack.back.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stack.back.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stack.back.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stack.back', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'back', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'back(...)' code ##################

        unicode_275737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1187, 8), 'unicode', u'move the position back and return the current element')
        
        
        # Getting the type of 'self' (line 1188)
        self_275738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 11), 'self')
        # Obtaining the member '_pos' of a type (line 1188)
        _pos_275739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1188, 11), self_275738, '_pos')
        int_275740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1188, 23), 'int')
        # Applying the binary operator '>' (line 1188)
        result_gt_275741 = python_operator(stypy.reporting.localization.Localization(__file__, 1188, 11), '>', _pos_275739, int_275740)
        
        # Testing the type of an if condition (line 1188)
        if_condition_275742 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1188, 8), result_gt_275741)
        # Assigning a type to the variable 'if_condition_275742' (line 1188)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1188, 8), 'if_condition_275742', if_condition_275742)
        # SSA begins for if statement (line 1188)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'self' (line 1189)
        self_275743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 12), 'self')
        # Obtaining the member '_pos' of a type (line 1189)
        _pos_275744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1189, 12), self_275743, '_pos')
        int_275745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1189, 25), 'int')
        # Applying the binary operator '-=' (line 1189)
        result_isub_275746 = python_operator(stypy.reporting.localization.Localization(__file__, 1189, 12), '-=', _pos_275744, int_275745)
        # Getting the type of 'self' (line 1189)
        self_275747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 12), 'self')
        # Setting the type of the member '_pos' of a type (line 1189)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1189, 12), self_275747, '_pos', result_isub_275746)
        
        # SSA join for if statement (line 1188)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to self(...): (line 1190)
        # Processing the call keyword arguments (line 1190)
        kwargs_275749 = {}
        # Getting the type of 'self' (line 1190)
        self_275748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 15), 'self', False)
        # Calling self(args, kwargs) (line 1190)
        self_call_result_275750 = invoke(stypy.reporting.localization.Localization(__file__, 1190, 15), self_275748, *[], **kwargs_275749)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1190)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1190, 8), 'stypy_return_type', self_call_result_275750)
        
        # ################# End of 'back(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'back' in the type store
        # Getting the type of 'stypy_return_type' (line 1186)
        stypy_return_type_275751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_275751)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'back'
        return stypy_return_type_275751


    @norecursion
    def push(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'push'
        module_type_store = module_type_store.open_function_context('push', 1192, 4, False)
        # Assigning a type to the variable 'self' (line 1193)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1193, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stack.push.__dict__.__setitem__('stypy_localization', localization)
        Stack.push.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stack.push.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stack.push.__dict__.__setitem__('stypy_function_name', 'Stack.push')
        Stack.push.__dict__.__setitem__('stypy_param_names_list', ['o'])
        Stack.push.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stack.push.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stack.push.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stack.push.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stack.push.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stack.push.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stack.push', ['o'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'push', localization, ['o'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'push(...)' code ##################

        unicode_275752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1196, (-1)), 'unicode', u'\n        push object onto stack at current position - all elements\n        occurring later than the current position are discarded\n        ')
        
        # Assigning a Subscript to a Attribute (line 1197):
        
        # Assigning a Subscript to a Attribute (line 1197):
        
        # Obtaining the type of the subscript
        # Getting the type of 'self' (line 1197)
        self_275753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 41), 'self')
        # Obtaining the member '_pos' of a type (line 1197)
        _pos_275754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1197, 41), self_275753, '_pos')
        int_275755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1197, 53), 'int')
        # Applying the binary operator '+' (line 1197)
        result_add_275756 = python_operator(stypy.reporting.localization.Localization(__file__, 1197, 41), '+', _pos_275754, int_275755)
        
        slice_275757 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1197, 25), None, result_add_275756, None)
        # Getting the type of 'self' (line 1197)
        self_275758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 25), 'self')
        # Obtaining the member '_elements' of a type (line 1197)
        _elements_275759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1197, 25), self_275758, '_elements')
        # Obtaining the member '__getitem__' of a type (line 1197)
        getitem___275760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1197, 25), _elements_275759, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1197)
        subscript_call_result_275761 = invoke(stypy.reporting.localization.Localization(__file__, 1197, 25), getitem___275760, slice_275757)
        
        # Getting the type of 'self' (line 1197)
        self_275762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 8), 'self')
        # Setting the type of the member '_elements' of a type (line 1197)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1197, 8), self_275762, '_elements', subscript_call_result_275761)
        
        # Call to append(...): (line 1198)
        # Processing the call arguments (line 1198)
        # Getting the type of 'o' (line 1198)
        o_275766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1198, 30), 'o', False)
        # Processing the call keyword arguments (line 1198)
        kwargs_275767 = {}
        # Getting the type of 'self' (line 1198)
        self_275763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1198, 8), 'self', False)
        # Obtaining the member '_elements' of a type (line 1198)
        _elements_275764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1198, 8), self_275763, '_elements')
        # Obtaining the member 'append' of a type (line 1198)
        append_275765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1198, 8), _elements_275764, 'append')
        # Calling append(args, kwargs) (line 1198)
        append_call_result_275768 = invoke(stypy.reporting.localization.Localization(__file__, 1198, 8), append_275765, *[o_275766], **kwargs_275767)
        
        
        # Assigning a BinOp to a Attribute (line 1199):
        
        # Assigning a BinOp to a Attribute (line 1199):
        
        # Call to len(...): (line 1199)
        # Processing the call arguments (line 1199)
        # Getting the type of 'self' (line 1199)
        self_275770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 24), 'self', False)
        # Obtaining the member '_elements' of a type (line 1199)
        _elements_275771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1199, 24), self_275770, '_elements')
        # Processing the call keyword arguments (line 1199)
        kwargs_275772 = {}
        # Getting the type of 'len' (line 1199)
        len_275769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 20), 'len', False)
        # Calling len(args, kwargs) (line 1199)
        len_call_result_275773 = invoke(stypy.reporting.localization.Localization(__file__, 1199, 20), len_275769, *[_elements_275771], **kwargs_275772)
        
        int_275774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1199, 42), 'int')
        # Applying the binary operator '-' (line 1199)
        result_sub_275775 = python_operator(stypy.reporting.localization.Localization(__file__, 1199, 20), '-', len_call_result_275773, int_275774)
        
        # Getting the type of 'self' (line 1199)
        self_275776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 8), 'self')
        # Setting the type of the member '_pos' of a type (line 1199)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1199, 8), self_275776, '_pos', result_sub_275775)
        
        # Call to self(...): (line 1200)
        # Processing the call keyword arguments (line 1200)
        kwargs_275778 = {}
        # Getting the type of 'self' (line 1200)
        self_275777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 15), 'self', False)
        # Calling self(args, kwargs) (line 1200)
        self_call_result_275779 = invoke(stypy.reporting.localization.Localization(__file__, 1200, 15), self_275777, *[], **kwargs_275778)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1200)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1200, 8), 'stypy_return_type', self_call_result_275779)
        
        # ################# End of 'push(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'push' in the type store
        # Getting the type of 'stypy_return_type' (line 1192)
        stypy_return_type_275780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_275780)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'push'
        return stypy_return_type_275780


    @norecursion
    def home(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'home'
        module_type_store = module_type_store.open_function_context('home', 1202, 4, False)
        # Assigning a type to the variable 'self' (line 1203)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1203, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stack.home.__dict__.__setitem__('stypy_localization', localization)
        Stack.home.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stack.home.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stack.home.__dict__.__setitem__('stypy_function_name', 'Stack.home')
        Stack.home.__dict__.__setitem__('stypy_param_names_list', [])
        Stack.home.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stack.home.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stack.home.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stack.home.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stack.home.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stack.home.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stack.home', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'home', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'home(...)' code ##################

        unicode_275781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1203, 8), 'unicode', u'push the first element onto the top of the stack')
        
        
        
        # Call to len(...): (line 1204)
        # Processing the call arguments (line 1204)
        # Getting the type of 'self' (line 1204)
        self_275783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 19), 'self', False)
        # Obtaining the member '_elements' of a type (line 1204)
        _elements_275784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1204, 19), self_275783, '_elements')
        # Processing the call keyword arguments (line 1204)
        kwargs_275785 = {}
        # Getting the type of 'len' (line 1204)
        len_275782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 15), 'len', False)
        # Calling len(args, kwargs) (line 1204)
        len_call_result_275786 = invoke(stypy.reporting.localization.Localization(__file__, 1204, 15), len_275782, *[_elements_275784], **kwargs_275785)
        
        # Applying the 'not' unary operator (line 1204)
        result_not__275787 = python_operator(stypy.reporting.localization.Localization(__file__, 1204, 11), 'not', len_call_result_275786)
        
        # Testing the type of an if condition (line 1204)
        if_condition_275788 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1204, 8), result_not__275787)
        # Assigning a type to the variable 'if_condition_275788' (line 1204)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1204, 8), 'if_condition_275788', if_condition_275788)
        # SSA begins for if statement (line 1204)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1205)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1205, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1204)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to push(...): (line 1206)
        # Processing the call arguments (line 1206)
        
        # Obtaining the type of the subscript
        int_275791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1206, 33), 'int')
        # Getting the type of 'self' (line 1206)
        self_275792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 18), 'self', False)
        # Obtaining the member '_elements' of a type (line 1206)
        _elements_275793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1206, 18), self_275792, '_elements')
        # Obtaining the member '__getitem__' of a type (line 1206)
        getitem___275794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1206, 18), _elements_275793, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1206)
        subscript_call_result_275795 = invoke(stypy.reporting.localization.Localization(__file__, 1206, 18), getitem___275794, int_275791)
        
        # Processing the call keyword arguments (line 1206)
        kwargs_275796 = {}
        # Getting the type of 'self' (line 1206)
        self_275789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 8), 'self', False)
        # Obtaining the member 'push' of a type (line 1206)
        push_275790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1206, 8), self_275789, 'push')
        # Calling push(args, kwargs) (line 1206)
        push_call_result_275797 = invoke(stypy.reporting.localization.Localization(__file__, 1206, 8), push_275790, *[subscript_call_result_275795], **kwargs_275796)
        
        
        # Call to self(...): (line 1207)
        # Processing the call keyword arguments (line 1207)
        kwargs_275799 = {}
        # Getting the type of 'self' (line 1207)
        self_275798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 15), 'self', False)
        # Calling self(args, kwargs) (line 1207)
        self_call_result_275800 = invoke(stypy.reporting.localization.Localization(__file__, 1207, 15), self_275798, *[], **kwargs_275799)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1207, 8), 'stypy_return_type', self_call_result_275800)
        
        # ################# End of 'home(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'home' in the type store
        # Getting the type of 'stypy_return_type' (line 1202)
        stypy_return_type_275801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_275801)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'home'
        return stypy_return_type_275801


    @norecursion
    def empty(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'empty'
        module_type_store = module_type_store.open_function_context('empty', 1209, 4, False)
        # Assigning a type to the variable 'self' (line 1210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1210, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stack.empty.__dict__.__setitem__('stypy_localization', localization)
        Stack.empty.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stack.empty.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stack.empty.__dict__.__setitem__('stypy_function_name', 'Stack.empty')
        Stack.empty.__dict__.__setitem__('stypy_param_names_list', [])
        Stack.empty.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stack.empty.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stack.empty.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stack.empty.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stack.empty.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stack.empty.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stack.empty', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'empty', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'empty(...)' code ##################

        
        
        # Call to len(...): (line 1210)
        # Processing the call arguments (line 1210)
        # Getting the type of 'self' (line 1210)
        self_275803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 19), 'self', False)
        # Obtaining the member '_elements' of a type (line 1210)
        _elements_275804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1210, 19), self_275803, '_elements')
        # Processing the call keyword arguments (line 1210)
        kwargs_275805 = {}
        # Getting the type of 'len' (line 1210)
        len_275802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 15), 'len', False)
        # Calling len(args, kwargs) (line 1210)
        len_call_result_275806 = invoke(stypy.reporting.localization.Localization(__file__, 1210, 15), len_275802, *[_elements_275804], **kwargs_275805)
        
        int_275807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1210, 38), 'int')
        # Applying the binary operator '==' (line 1210)
        result_eq_275808 = python_operator(stypy.reporting.localization.Localization(__file__, 1210, 15), '==', len_call_result_275806, int_275807)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1210, 8), 'stypy_return_type', result_eq_275808)
        
        # ################# End of 'empty(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'empty' in the type store
        # Getting the type of 'stypy_return_type' (line 1209)
        stypy_return_type_275809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1209, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_275809)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'empty'
        return stypy_return_type_275809


    @norecursion
    def clear(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'clear'
        module_type_store = module_type_store.open_function_context('clear', 1212, 4, False)
        # Assigning a type to the variable 'self' (line 1213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1213, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stack.clear.__dict__.__setitem__('stypy_localization', localization)
        Stack.clear.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stack.clear.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stack.clear.__dict__.__setitem__('stypy_function_name', 'Stack.clear')
        Stack.clear.__dict__.__setitem__('stypy_param_names_list', [])
        Stack.clear.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stack.clear.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stack.clear.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stack.clear.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stack.clear.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stack.clear.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stack.clear', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'clear', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'clear(...)' code ##################

        unicode_275810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1213, 8), 'unicode', u'empty the stack')
        
        # Assigning a Num to a Attribute (line 1214):
        
        # Assigning a Num to a Attribute (line 1214):
        int_275811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1214, 20), 'int')
        # Getting the type of 'self' (line 1214)
        self_275812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 8), 'self')
        # Setting the type of the member '_pos' of a type (line 1214)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1214, 8), self_275812, '_pos', int_275811)
        
        # Assigning a List to a Attribute (line 1215):
        
        # Assigning a List to a Attribute (line 1215):
        
        # Obtaining an instance of the builtin type 'list' (line 1215)
        list_275813 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1215, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1215)
        
        # Getting the type of 'self' (line 1215)
        self_275814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 8), 'self')
        # Setting the type of the member '_elements' of a type (line 1215)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1215, 8), self_275814, '_elements', list_275813)
        
        # ################# End of 'clear(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'clear' in the type store
        # Getting the type of 'stypy_return_type' (line 1212)
        stypy_return_type_275815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_275815)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'clear'
        return stypy_return_type_275815


    @norecursion
    def bubble(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'bubble'
        module_type_store = module_type_store.open_function_context('bubble', 1217, 4, False)
        # Assigning a type to the variable 'self' (line 1218)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1218, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stack.bubble.__dict__.__setitem__('stypy_localization', localization)
        Stack.bubble.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stack.bubble.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stack.bubble.__dict__.__setitem__('stypy_function_name', 'Stack.bubble')
        Stack.bubble.__dict__.__setitem__('stypy_param_names_list', ['o'])
        Stack.bubble.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stack.bubble.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stack.bubble.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stack.bubble.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stack.bubble.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stack.bubble.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stack.bubble', ['o'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'bubble', localization, ['o'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'bubble(...)' code ##################

        unicode_275816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1221, (-1)), 'unicode', u'\n        raise *o* to the top of the stack and return *o*.  *o* must be\n        in the stack\n        ')
        
        
        # Getting the type of 'o' (line 1223)
        o_275817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 11), 'o')
        # Getting the type of 'self' (line 1223)
        self_275818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 20), 'self')
        # Obtaining the member '_elements' of a type (line 1223)
        _elements_275819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1223, 20), self_275818, '_elements')
        # Applying the binary operator 'notin' (line 1223)
        result_contains_275820 = python_operator(stypy.reporting.localization.Localization(__file__, 1223, 11), 'notin', o_275817, _elements_275819)
        
        # Testing the type of an if condition (line 1223)
        if_condition_275821 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1223, 8), result_contains_275820)
        # Assigning a type to the variable 'if_condition_275821' (line 1223)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1223, 8), 'if_condition_275821', if_condition_275821)
        # SSA begins for if statement (line 1223)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1224)
        # Processing the call arguments (line 1224)
        unicode_275823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1224, 29), 'unicode', u'Unknown element o')
        # Processing the call keyword arguments (line 1224)
        kwargs_275824 = {}
        # Getting the type of 'ValueError' (line 1224)
        ValueError_275822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1224)
        ValueError_call_result_275825 = invoke(stypy.reporting.localization.Localization(__file__, 1224, 18), ValueError_275822, *[unicode_275823], **kwargs_275824)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1224, 12), ValueError_call_result_275825, 'raise parameter', BaseException)
        # SSA join for if statement (line 1223)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Subscript to a Name (line 1225):
        
        # Assigning a Subscript to a Name (line 1225):
        
        # Obtaining the type of the subscript
        slice_275826 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1225, 14), None, None, None)
        # Getting the type of 'self' (line 1225)
        self_275827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 14), 'self')
        # Obtaining the member '_elements' of a type (line 1225)
        _elements_275828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1225, 14), self_275827, '_elements')
        # Obtaining the member '__getitem__' of a type (line 1225)
        getitem___275829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1225, 14), _elements_275828, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1225)
        subscript_call_result_275830 = invoke(stypy.reporting.localization.Localization(__file__, 1225, 14), getitem___275829, slice_275826)
        
        # Assigning a type to the variable 'old' (line 1225)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1225, 8), 'old', subscript_call_result_275830)
        
        # Call to clear(...): (line 1226)
        # Processing the call keyword arguments (line 1226)
        kwargs_275833 = {}
        # Getting the type of 'self' (line 1226)
        self_275831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 8), 'self', False)
        # Obtaining the member 'clear' of a type (line 1226)
        clear_275832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1226, 8), self_275831, 'clear')
        # Calling clear(args, kwargs) (line 1226)
        clear_call_result_275834 = invoke(stypy.reporting.localization.Localization(__file__, 1226, 8), clear_275832, *[], **kwargs_275833)
        
        
        # Assigning a List to a Name (line 1227):
        
        # Assigning a List to a Name (line 1227):
        
        # Obtaining an instance of the builtin type 'list' (line 1227)
        list_275835 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1227, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1227)
        
        # Assigning a type to the variable 'bubbles' (line 1227)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1227, 8), 'bubbles', list_275835)
        
        # Getting the type of 'old' (line 1228)
        old_275836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 21), 'old')
        # Testing the type of a for loop iterable (line 1228)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1228, 8), old_275836)
        # Getting the type of the for loop variable (line 1228)
        for_loop_var_275837 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1228, 8), old_275836)
        # Assigning a type to the variable 'thiso' (line 1228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1228, 8), 'thiso', for_loop_var_275837)
        # SSA begins for a for statement (line 1228)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'thiso' (line 1229)
        thiso_275838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 15), 'thiso')
        # Getting the type of 'o' (line 1229)
        o_275839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 24), 'o')
        # Applying the binary operator '==' (line 1229)
        result_eq_275840 = python_operator(stypy.reporting.localization.Localization(__file__, 1229, 15), '==', thiso_275838, o_275839)
        
        # Testing the type of an if condition (line 1229)
        if_condition_275841 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1229, 12), result_eq_275840)
        # Assigning a type to the variable 'if_condition_275841' (line 1229)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1229, 12), 'if_condition_275841', if_condition_275841)
        # SSA begins for if statement (line 1229)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 1230)
        # Processing the call arguments (line 1230)
        # Getting the type of 'thiso' (line 1230)
        thiso_275844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1230, 31), 'thiso', False)
        # Processing the call keyword arguments (line 1230)
        kwargs_275845 = {}
        # Getting the type of 'bubbles' (line 1230)
        bubbles_275842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1230, 16), 'bubbles', False)
        # Obtaining the member 'append' of a type (line 1230)
        append_275843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1230, 16), bubbles_275842, 'append')
        # Calling append(args, kwargs) (line 1230)
        append_call_result_275846 = invoke(stypy.reporting.localization.Localization(__file__, 1230, 16), append_275843, *[thiso_275844], **kwargs_275845)
        
        # SSA branch for the else part of an if statement (line 1229)
        module_type_store.open_ssa_branch('else')
        
        # Call to push(...): (line 1232)
        # Processing the call arguments (line 1232)
        # Getting the type of 'thiso' (line 1232)
        thiso_275849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 26), 'thiso', False)
        # Processing the call keyword arguments (line 1232)
        kwargs_275850 = {}
        # Getting the type of 'self' (line 1232)
        self_275847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 16), 'self', False)
        # Obtaining the member 'push' of a type (line 1232)
        push_275848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1232, 16), self_275847, 'push')
        # Calling push(args, kwargs) (line 1232)
        push_call_result_275851 = invoke(stypy.reporting.localization.Localization(__file__, 1232, 16), push_275848, *[thiso_275849], **kwargs_275850)
        
        # SSA join for if statement (line 1229)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'bubbles' (line 1233)
        bubbles_275852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 21), 'bubbles')
        # Testing the type of a for loop iterable (line 1233)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1233, 8), bubbles_275852)
        # Getting the type of the for loop variable (line 1233)
        for_loop_var_275853 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1233, 8), bubbles_275852)
        # Assigning a type to the variable 'thiso' (line 1233)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1233, 8), 'thiso', for_loop_var_275853)
        # SSA begins for a for statement (line 1233)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to push(...): (line 1234)
        # Processing the call arguments (line 1234)
        # Getting the type of 'o' (line 1234)
        o_275856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 22), 'o', False)
        # Processing the call keyword arguments (line 1234)
        kwargs_275857 = {}
        # Getting the type of 'self' (line 1234)
        self_275854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 12), 'self', False)
        # Obtaining the member 'push' of a type (line 1234)
        push_275855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1234, 12), self_275854, 'push')
        # Calling push(args, kwargs) (line 1234)
        push_call_result_275858 = invoke(stypy.reporting.localization.Localization(__file__, 1234, 12), push_275855, *[o_275856], **kwargs_275857)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'o' (line 1235)
        o_275859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 15), 'o')
        # Assigning a type to the variable 'stypy_return_type' (line 1235)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1235, 8), 'stypy_return_type', o_275859)
        
        # ################# End of 'bubble(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'bubble' in the type store
        # Getting the type of 'stypy_return_type' (line 1217)
        stypy_return_type_275860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_275860)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'bubble'
        return stypy_return_type_275860


    @norecursion
    def remove(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'remove'
        module_type_store = module_type_store.open_function_context('remove', 1237, 4, False)
        # Assigning a type to the variable 'self' (line 1238)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1238, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stack.remove.__dict__.__setitem__('stypy_localization', localization)
        Stack.remove.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stack.remove.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stack.remove.__dict__.__setitem__('stypy_function_name', 'Stack.remove')
        Stack.remove.__dict__.__setitem__('stypy_param_names_list', ['o'])
        Stack.remove.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stack.remove.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stack.remove.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stack.remove.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stack.remove.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stack.remove.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stack.remove', ['o'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'remove', localization, ['o'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'remove(...)' code ##################

        unicode_275861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1238, 8), 'unicode', u'remove element *o* from the stack')
        
        
        # Getting the type of 'o' (line 1239)
        o_275862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 11), 'o')
        # Getting the type of 'self' (line 1239)
        self_275863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 20), 'self')
        # Obtaining the member '_elements' of a type (line 1239)
        _elements_275864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1239, 20), self_275863, '_elements')
        # Applying the binary operator 'notin' (line 1239)
        result_contains_275865 = python_operator(stypy.reporting.localization.Localization(__file__, 1239, 11), 'notin', o_275862, _elements_275864)
        
        # Testing the type of an if condition (line 1239)
        if_condition_275866 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1239, 8), result_contains_275865)
        # Assigning a type to the variable 'if_condition_275866' (line 1239)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1239, 8), 'if_condition_275866', if_condition_275866)
        # SSA begins for if statement (line 1239)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1240)
        # Processing the call arguments (line 1240)
        unicode_275868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1240, 29), 'unicode', u'Unknown element o')
        # Processing the call keyword arguments (line 1240)
        kwargs_275869 = {}
        # Getting the type of 'ValueError' (line 1240)
        ValueError_275867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1240)
        ValueError_call_result_275870 = invoke(stypy.reporting.localization.Localization(__file__, 1240, 18), ValueError_275867, *[unicode_275868], **kwargs_275869)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1240, 12), ValueError_call_result_275870, 'raise parameter', BaseException)
        # SSA join for if statement (line 1239)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Subscript to a Name (line 1241):
        
        # Assigning a Subscript to a Name (line 1241):
        
        # Obtaining the type of the subscript
        slice_275871 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1241, 14), None, None, None)
        # Getting the type of 'self' (line 1241)
        self_275872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 14), 'self')
        # Obtaining the member '_elements' of a type (line 1241)
        _elements_275873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1241, 14), self_275872, '_elements')
        # Obtaining the member '__getitem__' of a type (line 1241)
        getitem___275874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1241, 14), _elements_275873, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1241)
        subscript_call_result_275875 = invoke(stypy.reporting.localization.Localization(__file__, 1241, 14), getitem___275874, slice_275871)
        
        # Assigning a type to the variable 'old' (line 1241)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1241, 8), 'old', subscript_call_result_275875)
        
        # Call to clear(...): (line 1242)
        # Processing the call keyword arguments (line 1242)
        kwargs_275878 = {}
        # Getting the type of 'self' (line 1242)
        self_275876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 8), 'self', False)
        # Obtaining the member 'clear' of a type (line 1242)
        clear_275877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1242, 8), self_275876, 'clear')
        # Calling clear(args, kwargs) (line 1242)
        clear_call_result_275879 = invoke(stypy.reporting.localization.Localization(__file__, 1242, 8), clear_275877, *[], **kwargs_275878)
        
        
        # Getting the type of 'old' (line 1243)
        old_275880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 21), 'old')
        # Testing the type of a for loop iterable (line 1243)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1243, 8), old_275880)
        # Getting the type of the for loop variable (line 1243)
        for_loop_var_275881 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1243, 8), old_275880)
        # Assigning a type to the variable 'thiso' (line 1243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1243, 8), 'thiso', for_loop_var_275881)
        # SSA begins for a for statement (line 1243)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'thiso' (line 1244)
        thiso_275882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 15), 'thiso')
        # Getting the type of 'o' (line 1244)
        o_275883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 24), 'o')
        # Applying the binary operator '==' (line 1244)
        result_eq_275884 = python_operator(stypy.reporting.localization.Localization(__file__, 1244, 15), '==', thiso_275882, o_275883)
        
        # Testing the type of an if condition (line 1244)
        if_condition_275885 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1244, 12), result_eq_275884)
        # Assigning a type to the variable 'if_condition_275885' (line 1244)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1244, 12), 'if_condition_275885', if_condition_275885)
        # SSA begins for if statement (line 1244)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA branch for the else part of an if statement (line 1244)
        module_type_store.open_ssa_branch('else')
        
        # Call to push(...): (line 1247)
        # Processing the call arguments (line 1247)
        # Getting the type of 'thiso' (line 1247)
        thiso_275888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 26), 'thiso', False)
        # Processing the call keyword arguments (line 1247)
        kwargs_275889 = {}
        # Getting the type of 'self' (line 1247)
        self_275886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 16), 'self', False)
        # Obtaining the member 'push' of a type (line 1247)
        push_275887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1247, 16), self_275886, 'push')
        # Calling push(args, kwargs) (line 1247)
        push_call_result_275890 = invoke(stypy.reporting.localization.Localization(__file__, 1247, 16), push_275887, *[thiso_275888], **kwargs_275889)
        
        # SSA join for if statement (line 1244)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'remove(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'remove' in the type store
        # Getting the type of 'stypy_return_type' (line 1237)
        stypy_return_type_275891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_275891)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'remove'
        return stypy_return_type_275891


# Assigning a type to the variable 'Stack' (line 1155)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1155, 0), 'Stack', Stack)

@norecursion
def finddir(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1251)
    False_275892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1251, 27), 'False')
    defaults = [False_275892]
    # Create a new context for function 'finddir'
    module_type_store = module_type_store.open_function_context('finddir', 1250, 0, False)
    
    # Passed parameters checking function
    finddir.stypy_localization = localization
    finddir.stypy_type_of_self = None
    finddir.stypy_type_store = module_type_store
    finddir.stypy_function_name = 'finddir'
    finddir.stypy_param_names_list = ['o', 'match', 'case']
    finddir.stypy_varargs_param_name = None
    finddir.stypy_kwargs_param_name = None
    finddir.stypy_call_defaults = defaults
    finddir.stypy_call_varargs = varargs
    finddir.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'finddir', ['o', 'match', 'case'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'finddir', localization, ['o', 'match', 'case'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'finddir(...)' code ##################

    unicode_275893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1255, (-1)), 'unicode', u'\n    return all attributes of *o* which match string in match.  if case\n    is True require an exact case match.\n    ')
    
    # Getting the type of 'case' (line 1256)
    case_275894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 7), 'case')
    # Testing the type of an if condition (line 1256)
    if_condition_275895 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1256, 4), case_275894)
    # Assigning a type to the variable 'if_condition_275895' (line 1256)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1256, 4), 'if_condition_275895', if_condition_275895)
    # SSA begins for if statement (line 1256)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a ListComp to a Name (line 1257):
    
    # Assigning a ListComp to a Name (line 1257):
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to dir(...): (line 1257)
    # Processing the call arguments (line 1257)
    # Getting the type of 'o' (line 1257)
    o_275906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 46), 'o', False)
    # Processing the call keyword arguments (line 1257)
    kwargs_275907 = {}
    # Getting the type of 'dir' (line 1257)
    dir_275905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 42), 'dir', False)
    # Calling dir(args, kwargs) (line 1257)
    dir_call_result_275908 = invoke(stypy.reporting.localization.Localization(__file__, 1257, 42), dir_275905, *[o_275906], **kwargs_275907)
    
    comprehension_275909 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1257, 17), dir_call_result_275908)
    # Assigning a type to the variable 'name' (line 1257)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1257, 17), 'name', comprehension_275909)
    
    # Call to isinstance(...): (line 1258)
    # Processing the call arguments (line 1258)
    # Getting the type of 'name' (line 1258)
    name_275900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 31), 'name', False)
    # Getting the type of 'six' (line 1258)
    six_275901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 37), 'six', False)
    # Obtaining the member 'string_types' of a type (line 1258)
    string_types_275902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1258, 37), six_275901, 'string_types')
    # Processing the call keyword arguments (line 1258)
    kwargs_275903 = {}
    # Getting the type of 'isinstance' (line 1258)
    isinstance_275899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 20), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1258)
    isinstance_call_result_275904 = invoke(stypy.reporting.localization.Localization(__file__, 1258, 20), isinstance_275899, *[name_275900, string_types_275902], **kwargs_275903)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1257)
    tuple_275896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1257, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1257)
    # Adding element type (line 1257)
    # Getting the type of 'name' (line 1257)
    name_275897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 18), 'name')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1257, 18), tuple_275896, name_275897)
    # Adding element type (line 1257)
    # Getting the type of 'name' (line 1257)
    name_275898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 24), 'name')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1257, 18), tuple_275896, name_275898)
    
    list_275910 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1257, 17), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1257, 17), list_275910, tuple_275896)
    # Assigning a type to the variable 'names' (line 1257)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1257, 8), 'names', list_275910)
    # SSA branch for the else part of an if statement (line 1256)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a ListComp to a Name (line 1260):
    
    # Assigning a ListComp to a Name (line 1260):
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to dir(...): (line 1260)
    # Processing the call arguments (line 1260)
    # Getting the type of 'o' (line 1260)
    o_275924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 54), 'o', False)
    # Processing the call keyword arguments (line 1260)
    kwargs_275925 = {}
    # Getting the type of 'dir' (line 1260)
    dir_275923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 50), 'dir', False)
    # Calling dir(args, kwargs) (line 1260)
    dir_call_result_275926 = invoke(stypy.reporting.localization.Localization(__file__, 1260, 50), dir_275923, *[o_275924], **kwargs_275925)
    
    comprehension_275927 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1260, 17), dir_call_result_275926)
    # Assigning a type to the variable 'name' (line 1260)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1260, 17), 'name', comprehension_275927)
    
    # Call to isinstance(...): (line 1261)
    # Processing the call arguments (line 1261)
    # Getting the type of 'name' (line 1261)
    name_275918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1261, 31), 'name', False)
    # Getting the type of 'six' (line 1261)
    six_275919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1261, 37), 'six', False)
    # Obtaining the member 'string_types' of a type (line 1261)
    string_types_275920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1261, 37), six_275919, 'string_types')
    # Processing the call keyword arguments (line 1261)
    kwargs_275921 = {}
    # Getting the type of 'isinstance' (line 1261)
    isinstance_275917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1261, 20), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1261)
    isinstance_call_result_275922 = invoke(stypy.reporting.localization.Localization(__file__, 1261, 20), isinstance_275917, *[name_275918, string_types_275920], **kwargs_275921)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1260)
    tuple_275911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1260, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1260)
    # Adding element type (line 1260)
    
    # Call to lower(...): (line 1260)
    # Processing the call keyword arguments (line 1260)
    kwargs_275914 = {}
    # Getting the type of 'name' (line 1260)
    name_275912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 18), 'name', False)
    # Obtaining the member 'lower' of a type (line 1260)
    lower_275913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1260, 18), name_275912, 'lower')
    # Calling lower(args, kwargs) (line 1260)
    lower_call_result_275915 = invoke(stypy.reporting.localization.Localization(__file__, 1260, 18), lower_275913, *[], **kwargs_275914)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1260, 18), tuple_275911, lower_call_result_275915)
    # Adding element type (line 1260)
    # Getting the type of 'name' (line 1260)
    name_275916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 32), 'name')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1260, 18), tuple_275911, name_275916)
    
    list_275928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1260, 17), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1260, 17), list_275928, tuple_275911)
    # Assigning a type to the variable 'names' (line 1260)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1260, 8), 'names', list_275928)
    
    # Assigning a Call to a Name (line 1262):
    
    # Assigning a Call to a Name (line 1262):
    
    # Call to lower(...): (line 1262)
    # Processing the call keyword arguments (line 1262)
    kwargs_275931 = {}
    # Getting the type of 'match' (line 1262)
    match_275929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 16), 'match', False)
    # Obtaining the member 'lower' of a type (line 1262)
    lower_275930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1262, 16), match_275929, 'lower')
    # Calling lower(args, kwargs) (line 1262)
    lower_call_result_275932 = invoke(stypy.reporting.localization.Localization(__file__, 1262, 16), lower_275930, *[], **kwargs_275931)
    
    # Assigning a type to the variable 'match' (line 1262)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1262, 8), 'match', lower_call_result_275932)
    # SSA join for if statement (line 1256)
    module_type_store = module_type_store.join_ssa_context()
    
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'names' (line 1263)
    names_275941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 35), 'names')
    comprehension_275942 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1263, 12), names_275941)
    # Assigning a type to the variable 'name' (line 1263)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1263, 12), 'name', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1263, 12), comprehension_275942))
    # Assigning a type to the variable 'orig' (line 1263)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1263, 12), 'orig', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1263, 12), comprehension_275942))
    
    
    # Call to find(...): (line 1263)
    # Processing the call arguments (line 1263)
    # Getting the type of 'match' (line 1263)
    match_275936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 54), 'match', False)
    # Processing the call keyword arguments (line 1263)
    kwargs_275937 = {}
    # Getting the type of 'name' (line 1263)
    name_275934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 44), 'name', False)
    # Obtaining the member 'find' of a type (line 1263)
    find_275935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1263, 44), name_275934, 'find')
    # Calling find(args, kwargs) (line 1263)
    find_call_result_275938 = invoke(stypy.reporting.localization.Localization(__file__, 1263, 44), find_275935, *[match_275936], **kwargs_275937)
    
    int_275939 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1263, 64), 'int')
    # Applying the binary operator '>=' (line 1263)
    result_ge_275940 = python_operator(stypy.reporting.localization.Localization(__file__, 1263, 44), '>=', find_call_result_275938, int_275939)
    
    # Getting the type of 'orig' (line 1263)
    orig_275933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 12), 'orig')
    list_275943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1263, 12), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1263, 12), list_275943, orig_275933)
    # Assigning a type to the variable 'stypy_return_type' (line 1263)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1263, 4), 'stypy_return_type', list_275943)
    
    # ################# End of 'finddir(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'finddir' in the type store
    # Getting the type of 'stypy_return_type' (line 1250)
    stypy_return_type_275944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1250, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275944)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'finddir'
    return stypy_return_type_275944

# Assigning a type to the variable 'finddir' (line 1250)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1250, 0), 'finddir', finddir)

@norecursion
def reverse_dict(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'reverse_dict'
    module_type_store = module_type_store.open_function_context('reverse_dict', 1266, 0, False)
    
    # Passed parameters checking function
    reverse_dict.stypy_localization = localization
    reverse_dict.stypy_type_of_self = None
    reverse_dict.stypy_type_store = module_type_store
    reverse_dict.stypy_function_name = 'reverse_dict'
    reverse_dict.stypy_param_names_list = ['d']
    reverse_dict.stypy_varargs_param_name = None
    reverse_dict.stypy_kwargs_param_name = None
    reverse_dict.stypy_call_defaults = defaults
    reverse_dict.stypy_call_varargs = varargs
    reverse_dict.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'reverse_dict', ['d'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'reverse_dict', localization, ['d'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'reverse_dict(...)' code ##################

    unicode_275945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1268, 4), 'unicode', u'reverse the dictionary -- may lose data if values are not unique!')
    # Calculating dict comprehension
    module_type_store = module_type_store.open_function_context('dict comprehension expression', 1269, 12, True)
    # Calculating comprehension expression
    
    # Call to iteritems(...): (line 1269)
    # Processing the call arguments (line 1269)
    # Getting the type of 'd' (line 1269)
    d_275950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 43), 'd', False)
    # Processing the call keyword arguments (line 1269)
    kwargs_275951 = {}
    # Getting the type of 'six' (line 1269)
    six_275948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 29), 'six', False)
    # Obtaining the member 'iteritems' of a type (line 1269)
    iteritems_275949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1269, 29), six_275948, 'iteritems')
    # Calling iteritems(args, kwargs) (line 1269)
    iteritems_call_result_275952 = invoke(stypy.reporting.localization.Localization(__file__, 1269, 29), iteritems_275949, *[d_275950], **kwargs_275951)
    
    comprehension_275953 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1269, 12), iteritems_call_result_275952)
    # Assigning a type to the variable 'k' (line 1269)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1269, 12), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1269, 12), comprehension_275953))
    # Assigning a type to the variable 'v' (line 1269)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1269, 12), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1269, 12), comprehension_275953))
    # Getting the type of 'v' (line 1269)
    v_275946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 12), 'v')
    # Getting the type of 'k' (line 1269)
    k_275947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 15), 'k')
    dict_275954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1269, 12), 'dict')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1269, 12), dict_275954, (v_275946, k_275947))
    # Assigning a type to the variable 'stypy_return_type' (line 1269)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1269, 4), 'stypy_return_type', dict_275954)
    
    # ################# End of 'reverse_dict(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'reverse_dict' in the type store
    # Getting the type of 'stypy_return_type' (line 1266)
    stypy_return_type_275955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275955)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'reverse_dict'
    return stypy_return_type_275955

# Assigning a type to the variable 'reverse_dict' (line 1266)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1266, 0), 'reverse_dict', reverse_dict)

@norecursion
def restrict_dict(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'restrict_dict'
    module_type_store = module_type_store.open_function_context('restrict_dict', 1272, 0, False)
    
    # Passed parameters checking function
    restrict_dict.stypy_localization = localization
    restrict_dict.stypy_type_of_self = None
    restrict_dict.stypy_type_store = module_type_store
    restrict_dict.stypy_function_name = 'restrict_dict'
    restrict_dict.stypy_param_names_list = ['d', 'keys']
    restrict_dict.stypy_varargs_param_name = None
    restrict_dict.stypy_kwargs_param_name = None
    restrict_dict.stypy_call_defaults = defaults
    restrict_dict.stypy_call_varargs = varargs
    restrict_dict.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'restrict_dict', ['d', 'keys'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'restrict_dict', localization, ['d', 'keys'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'restrict_dict(...)' code ##################

    unicode_275956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1277, (-1)), 'unicode', u'\n    Return a dictionary that contains those keys that appear in both\n    d and keys, with values from d.\n    ')
    # Calculating dict comprehension
    module_type_store = module_type_store.open_function_context('dict comprehension expression', 1278, 12, True)
    # Calculating comprehension expression
    
    # Call to iteritems(...): (line 1278)
    # Processing the call arguments (line 1278)
    # Getting the type of 'd' (line 1278)
    d_275964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1278, 43), 'd', False)
    # Processing the call keyword arguments (line 1278)
    kwargs_275965 = {}
    # Getting the type of 'six' (line 1278)
    six_275962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1278, 29), 'six', False)
    # Obtaining the member 'iteritems' of a type (line 1278)
    iteritems_275963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1278, 29), six_275962, 'iteritems')
    # Calling iteritems(args, kwargs) (line 1278)
    iteritems_call_result_275966 = invoke(stypy.reporting.localization.Localization(__file__, 1278, 29), iteritems_275963, *[d_275964], **kwargs_275965)
    
    comprehension_275967 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1278, 12), iteritems_call_result_275966)
    # Assigning a type to the variable 'k' (line 1278)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1278, 12), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1278, 12), comprehension_275967))
    # Assigning a type to the variable 'v' (line 1278)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1278, 12), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1278, 12), comprehension_275967))
    
    # Getting the type of 'k' (line 1278)
    k_275959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1278, 49), 'k')
    # Getting the type of 'keys' (line 1278)
    keys_275960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1278, 54), 'keys')
    # Applying the binary operator 'in' (line 1278)
    result_contains_275961 = python_operator(stypy.reporting.localization.Localization(__file__, 1278, 49), 'in', k_275959, keys_275960)
    
    # Getting the type of 'k' (line 1278)
    k_275957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1278, 12), 'k')
    # Getting the type of 'v' (line 1278)
    v_275958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1278, 15), 'v')
    dict_275968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1278, 12), 'dict')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1278, 12), dict_275968, (k_275957, v_275958))
    # Assigning a type to the variable 'stypy_return_type' (line 1278)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1278, 4), 'stypy_return_type', dict_275968)
    
    # ################# End of 'restrict_dict(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'restrict_dict' in the type store
    # Getting the type of 'stypy_return_type' (line 1272)
    stypy_return_type_275969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275969)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'restrict_dict'
    return stypy_return_type_275969

# Assigning a type to the variable 'restrict_dict' (line 1272)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1272, 0), 'restrict_dict', restrict_dict)

@norecursion
def report_memory(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_275970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1281, 20), 'int')
    defaults = [int_275970]
    # Create a new context for function 'report_memory'
    module_type_store = module_type_store.open_function_context('report_memory', 1281, 0, False)
    
    # Passed parameters checking function
    report_memory.stypy_localization = localization
    report_memory.stypy_type_of_self = None
    report_memory.stypy_type_store = module_type_store
    report_memory.stypy_function_name = 'report_memory'
    report_memory.stypy_param_names_list = ['i']
    report_memory.stypy_varargs_param_name = None
    report_memory.stypy_kwargs_param_name = None
    report_memory.stypy_call_defaults = defaults
    report_memory.stypy_call_varargs = varargs
    report_memory.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'report_memory', ['i'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'report_memory', localization, ['i'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'report_memory(...)' code ##################

    unicode_275971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1282, 4), 'unicode', u'return the memory consumed by process')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1283, 4))
    
    # 'from matplotlib.compat.subprocess import Popen, PIPE' statement (line 1283)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/cbook/')
    import_275972 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1283, 4), 'matplotlib.compat.subprocess')

    if (type(import_275972) is not StypyTypeError):

        if (import_275972 != 'pyd_module'):
            __import__(import_275972)
            sys_modules_275973 = sys.modules[import_275972]
            import_from_module(stypy.reporting.localization.Localization(__file__, 1283, 4), 'matplotlib.compat.subprocess', sys_modules_275973.module_type_store, module_type_store, ['Popen', 'PIPE'])
            nest_module(stypy.reporting.localization.Localization(__file__, 1283, 4), __file__, sys_modules_275973, sys_modules_275973.module_type_store, module_type_store)
        else:
            from matplotlib.compat.subprocess import Popen, PIPE

            import_from_module(stypy.reporting.localization.Localization(__file__, 1283, 4), 'matplotlib.compat.subprocess', None, module_type_store, ['Popen', 'PIPE'], [Popen, PIPE])

    else:
        # Assigning a type to the variable 'matplotlib.compat.subprocess' (line 1283)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1283, 4), 'matplotlib.compat.subprocess', import_275972)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/cbook/')
    
    
    # Assigning a Call to a Name (line 1284):
    
    # Assigning a Call to a Name (line 1284):
    
    # Call to getpid(...): (line 1284)
    # Processing the call keyword arguments (line 1284)
    kwargs_275976 = {}
    # Getting the type of 'os' (line 1284)
    os_275974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 10), 'os', False)
    # Obtaining the member 'getpid' of a type (line 1284)
    getpid_275975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1284, 10), os_275974, 'getpid')
    # Calling getpid(args, kwargs) (line 1284)
    getpid_call_result_275977 = invoke(stypy.reporting.localization.Localization(__file__, 1284, 10), getpid_275975, *[], **kwargs_275976)
    
    # Assigning a type to the variable 'pid' (line 1284)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1284, 4), 'pid', getpid_call_result_275977)
    
    
    # Getting the type of 'sys' (line 1285)
    sys_275978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1285, 7), 'sys')
    # Obtaining the member 'platform' of a type (line 1285)
    platform_275979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1285, 7), sys_275978, 'platform')
    unicode_275980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1285, 23), 'unicode', u'sunos5')
    # Applying the binary operator '==' (line 1285)
    result_eq_275981 = python_operator(stypy.reporting.localization.Localization(__file__, 1285, 7), '==', platform_275979, unicode_275980)
    
    # Testing the type of an if condition (line 1285)
    if_condition_275982 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1285, 4), result_eq_275981)
    # Assigning a type to the variable 'if_condition_275982' (line 1285)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1285, 4), 'if_condition_275982', if_condition_275982)
    # SSA begins for if statement (line 1285)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # SSA begins for try-except statement (line 1286)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 1287):
    
    # Assigning a Call to a Name (line 1287):
    
    # Call to readlines(...): (line 1287)
    # Processing the call keyword arguments (line 1287)
    kwargs_275998 = {}
    
    # Call to Popen(...): (line 1287)
    # Processing the call arguments (line 1287)
    
    # Call to str(...): (line 1287)
    # Processing the call arguments (line 1287)
    unicode_275985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1287, 27), 'unicode', u'ps -p %d -o osz')
    # Processing the call keyword arguments (line 1287)
    kwargs_275986 = {}
    # Getting the type of 'str' (line 1287)
    str_275984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 23), 'str', False)
    # Calling str(args, kwargs) (line 1287)
    str_call_result_275987 = invoke(stypy.reporting.localization.Localization(__file__, 1287, 23), str_275984, *[unicode_275985], **kwargs_275986)
    
    # Getting the type of 'pid' (line 1287)
    pid_275988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 48), 'pid', False)
    # Applying the binary operator '%' (line 1287)
    result_mod_275989 = python_operator(stypy.reporting.localization.Localization(__file__, 1287, 23), '%', str_call_result_275987, pid_275988)
    
    # Processing the call keyword arguments (line 1287)
    # Getting the type of 'True' (line 1287)
    True_275990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 59), 'True', False)
    keyword_275991 = True_275990
    # Getting the type of 'PIPE' (line 1288)
    PIPE_275992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 30), 'PIPE', False)
    keyword_275993 = PIPE_275992
    kwargs_275994 = {'shell': keyword_275991, 'stdout': keyword_275993}
    # Getting the type of 'Popen' (line 1287)
    Popen_275983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 17), 'Popen', False)
    # Calling Popen(args, kwargs) (line 1287)
    Popen_call_result_275995 = invoke(stypy.reporting.localization.Localization(__file__, 1287, 17), Popen_275983, *[result_mod_275989], **kwargs_275994)
    
    # Obtaining the member 'stdout' of a type (line 1287)
    stdout_275996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1287, 17), Popen_call_result_275995, 'stdout')
    # Obtaining the member 'readlines' of a type (line 1287)
    readlines_275997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1287, 17), stdout_275996, 'readlines')
    # Calling readlines(args, kwargs) (line 1287)
    readlines_call_result_275999 = invoke(stypy.reporting.localization.Localization(__file__, 1287, 17), readlines_275997, *[], **kwargs_275998)
    
    # Assigning a type to the variable 'a2' (line 1287)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1287, 12), 'a2', readlines_call_result_275999)
    # SSA branch for the except part of a try statement (line 1286)
    # SSA branch for the except 'OSError' branch of a try statement (line 1286)
    module_type_store.open_ssa_branch('except')
    
    # Call to NotImplementedError(...): (line 1290)
    # Processing the call arguments (line 1290)
    unicode_276001 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1291, 16), 'unicode', u"report_memory works on Sun OS only if the 'ps' program is found")
    # Processing the call keyword arguments (line 1290)
    kwargs_276002 = {}
    # Getting the type of 'NotImplementedError' (line 1290)
    NotImplementedError_276000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 18), 'NotImplementedError', False)
    # Calling NotImplementedError(args, kwargs) (line 1290)
    NotImplementedError_call_result_276003 = invoke(stypy.reporting.localization.Localization(__file__, 1290, 18), NotImplementedError_276000, *[unicode_276001], **kwargs_276002)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1290, 12), NotImplementedError_call_result_276003, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 1286)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1293):
    
    # Assigning a Call to a Name (line 1293):
    
    # Call to int(...): (line 1293)
    # Processing the call arguments (line 1293)
    
    # Call to strip(...): (line 1293)
    # Processing the call keyword arguments (line 1293)
    kwargs_276010 = {}
    
    # Obtaining the type of the subscript
    int_276005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1293, 21), 'int')
    # Getting the type of 'a2' (line 1293)
    a2_276006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 18), 'a2', False)
    # Obtaining the member '__getitem__' of a type (line 1293)
    getitem___276007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1293, 18), a2_276006, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1293)
    subscript_call_result_276008 = invoke(stypy.reporting.localization.Localization(__file__, 1293, 18), getitem___276007, int_276005)
    
    # Obtaining the member 'strip' of a type (line 1293)
    strip_276009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1293, 18), subscript_call_result_276008, 'strip')
    # Calling strip(args, kwargs) (line 1293)
    strip_call_result_276011 = invoke(stypy.reporting.localization.Localization(__file__, 1293, 18), strip_276009, *[], **kwargs_276010)
    
    # Processing the call keyword arguments (line 1293)
    kwargs_276012 = {}
    # Getting the type of 'int' (line 1293)
    int_276004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 14), 'int', False)
    # Calling int(args, kwargs) (line 1293)
    int_call_result_276013 = invoke(stypy.reporting.localization.Localization(__file__, 1293, 14), int_276004, *[strip_call_result_276011], **kwargs_276012)
    
    # Assigning a type to the variable 'mem' (line 1293)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1293, 8), 'mem', int_call_result_276013)
    # SSA branch for the else part of an if statement (line 1285)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to startswith(...): (line 1294)
    # Processing the call arguments (line 1294)
    unicode_276017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1294, 33), 'unicode', u'linux')
    # Processing the call keyword arguments (line 1294)
    kwargs_276018 = {}
    # Getting the type of 'sys' (line 1294)
    sys_276014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 9), 'sys', False)
    # Obtaining the member 'platform' of a type (line 1294)
    platform_276015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1294, 9), sys_276014, 'platform')
    # Obtaining the member 'startswith' of a type (line 1294)
    startswith_276016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1294, 9), platform_276015, 'startswith')
    # Calling startswith(args, kwargs) (line 1294)
    startswith_call_result_276019 = invoke(stypy.reporting.localization.Localization(__file__, 1294, 9), startswith_276016, *[unicode_276017], **kwargs_276018)
    
    # Testing the type of an if condition (line 1294)
    if_condition_276020 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1294, 9), startswith_call_result_276019)
    # Assigning a type to the variable 'if_condition_276020' (line 1294)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1294, 9), 'if_condition_276020', if_condition_276020)
    # SSA begins for if statement (line 1294)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # SSA begins for try-except statement (line 1295)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 1296):
    
    # Assigning a Call to a Name (line 1296):
    
    # Call to readlines(...): (line 1296)
    # Processing the call keyword arguments (line 1296)
    kwargs_276036 = {}
    
    # Call to Popen(...): (line 1296)
    # Processing the call arguments (line 1296)
    
    # Call to str(...): (line 1296)
    # Processing the call arguments (line 1296)
    unicode_276023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1296, 27), 'unicode', u'ps -p %d -o rss,sz')
    # Processing the call keyword arguments (line 1296)
    kwargs_276024 = {}
    # Getting the type of 'str' (line 1296)
    str_276022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 23), 'str', False)
    # Calling str(args, kwargs) (line 1296)
    str_call_result_276025 = invoke(stypy.reporting.localization.Localization(__file__, 1296, 23), str_276022, *[unicode_276023], **kwargs_276024)
    
    # Getting the type of 'pid' (line 1296)
    pid_276026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 51), 'pid', False)
    # Applying the binary operator '%' (line 1296)
    result_mod_276027 = python_operator(stypy.reporting.localization.Localization(__file__, 1296, 23), '%', str_call_result_276025, pid_276026)
    
    # Processing the call keyword arguments (line 1296)
    # Getting the type of 'True' (line 1296)
    True_276028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 62), 'True', False)
    keyword_276029 = True_276028
    # Getting the type of 'PIPE' (line 1297)
    PIPE_276030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 30), 'PIPE', False)
    keyword_276031 = PIPE_276030
    kwargs_276032 = {'shell': keyword_276029, 'stdout': keyword_276031}
    # Getting the type of 'Popen' (line 1296)
    Popen_276021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 17), 'Popen', False)
    # Calling Popen(args, kwargs) (line 1296)
    Popen_call_result_276033 = invoke(stypy.reporting.localization.Localization(__file__, 1296, 17), Popen_276021, *[result_mod_276027], **kwargs_276032)
    
    # Obtaining the member 'stdout' of a type (line 1296)
    stdout_276034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1296, 17), Popen_call_result_276033, 'stdout')
    # Obtaining the member 'readlines' of a type (line 1296)
    readlines_276035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1296, 17), stdout_276034, 'readlines')
    # Calling readlines(args, kwargs) (line 1296)
    readlines_call_result_276037 = invoke(stypy.reporting.localization.Localization(__file__, 1296, 17), readlines_276035, *[], **kwargs_276036)
    
    # Assigning a type to the variable 'a2' (line 1296)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1296, 12), 'a2', readlines_call_result_276037)
    # SSA branch for the except part of a try statement (line 1295)
    # SSA branch for the except 'OSError' branch of a try statement (line 1295)
    module_type_store.open_ssa_branch('except')
    
    # Call to NotImplementedError(...): (line 1299)
    # Processing the call arguments (line 1299)
    unicode_276039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1300, 16), 'unicode', u"report_memory works on Linux only if the 'ps' program is found")
    # Processing the call keyword arguments (line 1299)
    kwargs_276040 = {}
    # Getting the type of 'NotImplementedError' (line 1299)
    NotImplementedError_276038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 18), 'NotImplementedError', False)
    # Calling NotImplementedError(args, kwargs) (line 1299)
    NotImplementedError_call_result_276041 = invoke(stypy.reporting.localization.Localization(__file__, 1299, 18), NotImplementedError_276038, *[unicode_276039], **kwargs_276040)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1299, 12), NotImplementedError_call_result_276041, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 1295)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1302):
    
    # Assigning a Call to a Name (line 1302):
    
    # Call to int(...): (line 1302)
    # Processing the call arguments (line 1302)
    
    # Obtaining the type of the subscript
    int_276043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1302, 32), 'int')
    
    # Call to split(...): (line 1302)
    # Processing the call keyword arguments (line 1302)
    kwargs_276049 = {}
    
    # Obtaining the type of the subscript
    int_276044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1302, 21), 'int')
    # Getting the type of 'a2' (line 1302)
    a2_276045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 18), 'a2', False)
    # Obtaining the member '__getitem__' of a type (line 1302)
    getitem___276046 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1302, 18), a2_276045, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1302)
    subscript_call_result_276047 = invoke(stypy.reporting.localization.Localization(__file__, 1302, 18), getitem___276046, int_276044)
    
    # Obtaining the member 'split' of a type (line 1302)
    split_276048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1302, 18), subscript_call_result_276047, 'split')
    # Calling split(args, kwargs) (line 1302)
    split_call_result_276050 = invoke(stypy.reporting.localization.Localization(__file__, 1302, 18), split_276048, *[], **kwargs_276049)
    
    # Obtaining the member '__getitem__' of a type (line 1302)
    getitem___276051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1302, 18), split_call_result_276050, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1302)
    subscript_call_result_276052 = invoke(stypy.reporting.localization.Localization(__file__, 1302, 18), getitem___276051, int_276043)
    
    # Processing the call keyword arguments (line 1302)
    kwargs_276053 = {}
    # Getting the type of 'int' (line 1302)
    int_276042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 14), 'int', False)
    # Calling int(args, kwargs) (line 1302)
    int_call_result_276054 = invoke(stypy.reporting.localization.Localization(__file__, 1302, 14), int_276042, *[subscript_call_result_276052], **kwargs_276053)
    
    # Assigning a type to the variable 'mem' (line 1302)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1302, 8), 'mem', int_call_result_276054)
    # SSA branch for the else part of an if statement (line 1294)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to startswith(...): (line 1303)
    # Processing the call arguments (line 1303)
    unicode_276058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1303, 33), 'unicode', u'darwin')
    # Processing the call keyword arguments (line 1303)
    kwargs_276059 = {}
    # Getting the type of 'sys' (line 1303)
    sys_276055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 9), 'sys', False)
    # Obtaining the member 'platform' of a type (line 1303)
    platform_276056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1303, 9), sys_276055, 'platform')
    # Obtaining the member 'startswith' of a type (line 1303)
    startswith_276057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1303, 9), platform_276056, 'startswith')
    # Calling startswith(args, kwargs) (line 1303)
    startswith_call_result_276060 = invoke(stypy.reporting.localization.Localization(__file__, 1303, 9), startswith_276057, *[unicode_276058], **kwargs_276059)
    
    # Testing the type of an if condition (line 1303)
    if_condition_276061 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1303, 9), startswith_call_result_276060)
    # Assigning a type to the variable 'if_condition_276061' (line 1303)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1303, 9), 'if_condition_276061', if_condition_276061)
    # SSA begins for if statement (line 1303)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # SSA begins for try-except statement (line 1304)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 1305):
    
    # Assigning a Call to a Name (line 1305):
    
    # Call to readlines(...): (line 1305)
    # Processing the call keyword arguments (line 1305)
    kwargs_276077 = {}
    
    # Call to Popen(...): (line 1305)
    # Processing the call arguments (line 1305)
    
    # Call to str(...): (line 1305)
    # Processing the call arguments (line 1305)
    unicode_276064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1305, 27), 'unicode', u'ps -p %d -o rss,vsz')
    # Processing the call keyword arguments (line 1305)
    kwargs_276065 = {}
    # Getting the type of 'str' (line 1305)
    str_276063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 23), 'str', False)
    # Calling str(args, kwargs) (line 1305)
    str_call_result_276066 = invoke(stypy.reporting.localization.Localization(__file__, 1305, 23), str_276063, *[unicode_276064], **kwargs_276065)
    
    # Getting the type of 'pid' (line 1305)
    pid_276067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 52), 'pid', False)
    # Applying the binary operator '%' (line 1305)
    result_mod_276068 = python_operator(stypy.reporting.localization.Localization(__file__, 1305, 23), '%', str_call_result_276066, pid_276067)
    
    # Processing the call keyword arguments (line 1305)
    # Getting the type of 'True' (line 1305)
    True_276069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 63), 'True', False)
    keyword_276070 = True_276069
    # Getting the type of 'PIPE' (line 1306)
    PIPE_276071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 30), 'PIPE', False)
    keyword_276072 = PIPE_276071
    kwargs_276073 = {'shell': keyword_276070, 'stdout': keyword_276072}
    # Getting the type of 'Popen' (line 1305)
    Popen_276062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 17), 'Popen', False)
    # Calling Popen(args, kwargs) (line 1305)
    Popen_call_result_276074 = invoke(stypy.reporting.localization.Localization(__file__, 1305, 17), Popen_276062, *[result_mod_276068], **kwargs_276073)
    
    # Obtaining the member 'stdout' of a type (line 1305)
    stdout_276075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1305, 17), Popen_call_result_276074, 'stdout')
    # Obtaining the member 'readlines' of a type (line 1305)
    readlines_276076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1305, 17), stdout_276075, 'readlines')
    # Calling readlines(args, kwargs) (line 1305)
    readlines_call_result_276078 = invoke(stypy.reporting.localization.Localization(__file__, 1305, 17), readlines_276076, *[], **kwargs_276077)
    
    # Assigning a type to the variable 'a2' (line 1305)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1305, 12), 'a2', readlines_call_result_276078)
    # SSA branch for the except part of a try statement (line 1304)
    # SSA branch for the except 'OSError' branch of a try statement (line 1304)
    module_type_store.open_ssa_branch('except')
    
    # Call to NotImplementedError(...): (line 1308)
    # Processing the call arguments (line 1308)
    unicode_276080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1309, 16), 'unicode', u"report_memory works on Mac OS only if the 'ps' program is found")
    # Processing the call keyword arguments (line 1308)
    kwargs_276081 = {}
    # Getting the type of 'NotImplementedError' (line 1308)
    NotImplementedError_276079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 18), 'NotImplementedError', False)
    # Calling NotImplementedError(args, kwargs) (line 1308)
    NotImplementedError_call_result_276082 = invoke(stypy.reporting.localization.Localization(__file__, 1308, 18), NotImplementedError_276079, *[unicode_276080], **kwargs_276081)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1308, 12), NotImplementedError_call_result_276082, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 1304)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1311):
    
    # Assigning a Call to a Name (line 1311):
    
    # Call to int(...): (line 1311)
    # Processing the call arguments (line 1311)
    
    # Obtaining the type of the subscript
    int_276084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1311, 32), 'int')
    
    # Call to split(...): (line 1311)
    # Processing the call keyword arguments (line 1311)
    kwargs_276090 = {}
    
    # Obtaining the type of the subscript
    int_276085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1311, 21), 'int')
    # Getting the type of 'a2' (line 1311)
    a2_276086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1311, 18), 'a2', False)
    # Obtaining the member '__getitem__' of a type (line 1311)
    getitem___276087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1311, 18), a2_276086, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1311)
    subscript_call_result_276088 = invoke(stypy.reporting.localization.Localization(__file__, 1311, 18), getitem___276087, int_276085)
    
    # Obtaining the member 'split' of a type (line 1311)
    split_276089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1311, 18), subscript_call_result_276088, 'split')
    # Calling split(args, kwargs) (line 1311)
    split_call_result_276091 = invoke(stypy.reporting.localization.Localization(__file__, 1311, 18), split_276089, *[], **kwargs_276090)
    
    # Obtaining the member '__getitem__' of a type (line 1311)
    getitem___276092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1311, 18), split_call_result_276091, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1311)
    subscript_call_result_276093 = invoke(stypy.reporting.localization.Localization(__file__, 1311, 18), getitem___276092, int_276084)
    
    # Processing the call keyword arguments (line 1311)
    kwargs_276094 = {}
    # Getting the type of 'int' (line 1311)
    int_276083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1311, 14), 'int', False)
    # Calling int(args, kwargs) (line 1311)
    int_call_result_276095 = invoke(stypy.reporting.localization.Localization(__file__, 1311, 14), int_276083, *[subscript_call_result_276093], **kwargs_276094)
    
    # Assigning a type to the variable 'mem' (line 1311)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1311, 8), 'mem', int_call_result_276095)
    # SSA branch for the else part of an if statement (line 1303)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to startswith(...): (line 1312)
    # Processing the call arguments (line 1312)
    unicode_276099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1312, 33), 'unicode', u'win')
    # Processing the call keyword arguments (line 1312)
    kwargs_276100 = {}
    # Getting the type of 'sys' (line 1312)
    sys_276096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 9), 'sys', False)
    # Obtaining the member 'platform' of a type (line 1312)
    platform_276097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1312, 9), sys_276096, 'platform')
    # Obtaining the member 'startswith' of a type (line 1312)
    startswith_276098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1312, 9), platform_276097, 'startswith')
    # Calling startswith(args, kwargs) (line 1312)
    startswith_call_result_276101 = invoke(stypy.reporting.localization.Localization(__file__, 1312, 9), startswith_276098, *[unicode_276099], **kwargs_276100)
    
    # Testing the type of an if condition (line 1312)
    if_condition_276102 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1312, 9), startswith_call_result_276101)
    # Assigning a type to the variable 'if_condition_276102' (line 1312)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1312, 9), 'if_condition_276102', if_condition_276102)
    # SSA begins for if statement (line 1312)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # SSA begins for try-except statement (line 1313)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 1314):
    
    # Assigning a Call to a Name (line 1314):
    
    # Call to read(...): (line 1314)
    # Processing the call keyword arguments (line 1314)
    kwargs_276120 = {}
    
    # Call to Popen(...): (line 1314)
    # Processing the call arguments (line 1314)
    
    # Obtaining an instance of the builtin type 'list' (line 1314)
    list_276104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1314, 23), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1314)
    # Adding element type (line 1314)
    
    # Call to str(...): (line 1314)
    # Processing the call arguments (line 1314)
    unicode_276106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1314, 28), 'unicode', u'tasklist')
    # Processing the call keyword arguments (line 1314)
    kwargs_276107 = {}
    # Getting the type of 'str' (line 1314)
    str_276105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 24), 'str', False)
    # Calling str(args, kwargs) (line 1314)
    str_call_result_276108 = invoke(stypy.reporting.localization.Localization(__file__, 1314, 24), str_276105, *[unicode_276106], **kwargs_276107)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1314, 23), list_276104, str_call_result_276108)
    # Adding element type (line 1314)
    unicode_276109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1314, 41), 'unicode', u'/nh')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1314, 23), list_276104, unicode_276109)
    # Adding element type (line 1314)
    unicode_276110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1314, 48), 'unicode', u'/fi')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1314, 23), list_276104, unicode_276110)
    # Adding element type (line 1314)
    unicode_276111 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1314, 55), 'unicode', u'pid eq %d')
    # Getting the type of 'pid' (line 1314)
    pid_276112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 69), 'pid', False)
    # Applying the binary operator '%' (line 1314)
    result_mod_276113 = python_operator(stypy.reporting.localization.Localization(__file__, 1314, 55), '%', unicode_276111, pid_276112)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1314, 23), list_276104, result_mod_276113)
    
    # Processing the call keyword arguments (line 1314)
    # Getting the type of 'PIPE' (line 1315)
    PIPE_276114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1315, 30), 'PIPE', False)
    keyword_276115 = PIPE_276114
    kwargs_276116 = {'stdout': keyword_276115}
    # Getting the type of 'Popen' (line 1314)
    Popen_276103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 17), 'Popen', False)
    # Calling Popen(args, kwargs) (line 1314)
    Popen_call_result_276117 = invoke(stypy.reporting.localization.Localization(__file__, 1314, 17), Popen_276103, *[list_276104], **kwargs_276116)
    
    # Obtaining the member 'stdout' of a type (line 1314)
    stdout_276118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1314, 17), Popen_call_result_276117, 'stdout')
    # Obtaining the member 'read' of a type (line 1314)
    read_276119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1314, 17), stdout_276118, 'read')
    # Calling read(args, kwargs) (line 1314)
    read_call_result_276121 = invoke(stypy.reporting.localization.Localization(__file__, 1314, 17), read_276119, *[], **kwargs_276120)
    
    # Assigning a type to the variable 'a2' (line 1314)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1314, 12), 'a2', read_call_result_276121)
    # SSA branch for the except part of a try statement (line 1313)
    # SSA branch for the except 'OSError' branch of a try statement (line 1313)
    module_type_store.open_ssa_branch('except')
    
    # Call to NotImplementedError(...): (line 1317)
    # Processing the call arguments (line 1317)
    unicode_276123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1318, 16), 'unicode', u"report_memory works on Windows only if the 'tasklist' program is found")
    # Processing the call keyword arguments (line 1317)
    kwargs_276124 = {}
    # Getting the type of 'NotImplementedError' (line 1317)
    NotImplementedError_276122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1317, 18), 'NotImplementedError', False)
    # Calling NotImplementedError(args, kwargs) (line 1317)
    NotImplementedError_call_result_276125 = invoke(stypy.reporting.localization.Localization(__file__, 1317, 18), NotImplementedError_276122, *[unicode_276123], **kwargs_276124)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1317, 12), NotImplementedError_call_result_276125, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 1313)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1320):
    
    # Assigning a Call to a Name (line 1320):
    
    # Call to int(...): (line 1320)
    # Processing the call arguments (line 1320)
    
    # Call to replace(...): (line 1320)
    # Processing the call arguments (line 1320)
    unicode_276138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1320, 49), 'unicode', u',')
    unicode_276139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1320, 54), 'unicode', u'')
    # Processing the call keyword arguments (line 1320)
    kwargs_276140 = {}
    
    # Obtaining the type of the subscript
    int_276127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1320, 37), 'int')
    
    # Call to split(...): (line 1320)
    # Processing the call keyword arguments (line 1320)
    kwargs_276133 = {}
    
    # Call to strip(...): (line 1320)
    # Processing the call keyword arguments (line 1320)
    kwargs_276130 = {}
    # Getting the type of 'a2' (line 1320)
    a2_276128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 18), 'a2', False)
    # Obtaining the member 'strip' of a type (line 1320)
    strip_276129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1320, 18), a2_276128, 'strip')
    # Calling strip(args, kwargs) (line 1320)
    strip_call_result_276131 = invoke(stypy.reporting.localization.Localization(__file__, 1320, 18), strip_276129, *[], **kwargs_276130)
    
    # Obtaining the member 'split' of a type (line 1320)
    split_276132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1320, 18), strip_call_result_276131, 'split')
    # Calling split(args, kwargs) (line 1320)
    split_call_result_276134 = invoke(stypy.reporting.localization.Localization(__file__, 1320, 18), split_276132, *[], **kwargs_276133)
    
    # Obtaining the member '__getitem__' of a type (line 1320)
    getitem___276135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1320, 18), split_call_result_276134, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1320)
    subscript_call_result_276136 = invoke(stypy.reporting.localization.Localization(__file__, 1320, 18), getitem___276135, int_276127)
    
    # Obtaining the member 'replace' of a type (line 1320)
    replace_276137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1320, 18), subscript_call_result_276136, 'replace')
    # Calling replace(args, kwargs) (line 1320)
    replace_call_result_276141 = invoke(stypy.reporting.localization.Localization(__file__, 1320, 18), replace_276137, *[unicode_276138, unicode_276139], **kwargs_276140)
    
    # Processing the call keyword arguments (line 1320)
    kwargs_276142 = {}
    # Getting the type of 'int' (line 1320)
    int_276126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 14), 'int', False)
    # Calling int(args, kwargs) (line 1320)
    int_call_result_276143 = invoke(stypy.reporting.localization.Localization(__file__, 1320, 14), int_276126, *[replace_call_result_276141], **kwargs_276142)
    
    # Assigning a type to the variable 'mem' (line 1320)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1320, 8), 'mem', int_call_result_276143)
    # SSA branch for the else part of an if statement (line 1312)
    module_type_store.open_ssa_branch('else')
    
    # Call to NotImplementedError(...): (line 1322)
    # Processing the call arguments (line 1322)
    unicode_276145 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1323, 12), 'unicode', u"We don't have a memory monitor for %s")
    # Getting the type of 'sys' (line 1323)
    sys_276146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1323, 54), 'sys', False)
    # Obtaining the member 'platform' of a type (line 1323)
    platform_276147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1323, 54), sys_276146, 'platform')
    # Applying the binary operator '%' (line 1323)
    result_mod_276148 = python_operator(stypy.reporting.localization.Localization(__file__, 1323, 12), '%', unicode_276145, platform_276147)
    
    # Processing the call keyword arguments (line 1322)
    kwargs_276149 = {}
    # Getting the type of 'NotImplementedError' (line 1322)
    NotImplementedError_276144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1322, 14), 'NotImplementedError', False)
    # Calling NotImplementedError(args, kwargs) (line 1322)
    NotImplementedError_call_result_276150 = invoke(stypy.reporting.localization.Localization(__file__, 1322, 14), NotImplementedError_276144, *[result_mod_276148], **kwargs_276149)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1322, 8), NotImplementedError_call_result_276150, 'raise parameter', BaseException)
    # SSA join for if statement (line 1312)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1303)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1294)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1285)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'mem' (line 1324)
    mem_276151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1324, 11), 'mem')
    # Assigning a type to the variable 'stypy_return_type' (line 1324)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1324, 4), 'stypy_return_type', mem_276151)
    
    # ################# End of 'report_memory(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'report_memory' in the type store
    # Getting the type of 'stypy_return_type' (line 1281)
    stypy_return_type_276152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_276152)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'report_memory'
    return stypy_return_type_276152

# Assigning a type to the variable 'report_memory' (line 1281)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1281, 0), 'report_memory', report_memory)

# Assigning a Str to a Name (line 1327):

# Assigning a Str to a Name (line 1327):
unicode_276153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1327, 15), 'unicode', u'In safezip, len(args[0])=%d but len(args[%d])=%d')
# Assigning a type to the variable '_safezip_msg' (line 1327)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1327, 0), '_safezip_msg', unicode_276153)

@norecursion
def safezip(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'safezip'
    module_type_store = module_type_store.open_function_context('safezip', 1330, 0, False)
    
    # Passed parameters checking function
    safezip.stypy_localization = localization
    safezip.stypy_type_of_self = None
    safezip.stypy_type_store = module_type_store
    safezip.stypy_function_name = 'safezip'
    safezip.stypy_param_names_list = []
    safezip.stypy_varargs_param_name = 'args'
    safezip.stypy_kwargs_param_name = None
    safezip.stypy_call_defaults = defaults
    safezip.stypy_call_varargs = varargs
    safezip.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'safezip', [], 'args', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'safezip', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'safezip(...)' code ##################

    unicode_276154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1331, 4), 'unicode', u'make sure *args* are equal len before zipping')
    
    # Assigning a Call to a Name (line 1332):
    
    # Assigning a Call to a Name (line 1332):
    
    # Call to len(...): (line 1332)
    # Processing the call arguments (line 1332)
    
    # Obtaining the type of the subscript
    int_276156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1332, 18), 'int')
    # Getting the type of 'args' (line 1332)
    args_276157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 13), 'args', False)
    # Obtaining the member '__getitem__' of a type (line 1332)
    getitem___276158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1332, 13), args_276157, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1332)
    subscript_call_result_276159 = invoke(stypy.reporting.localization.Localization(__file__, 1332, 13), getitem___276158, int_276156)
    
    # Processing the call keyword arguments (line 1332)
    kwargs_276160 = {}
    # Getting the type of 'len' (line 1332)
    len_276155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 9), 'len', False)
    # Calling len(args, kwargs) (line 1332)
    len_call_result_276161 = invoke(stypy.reporting.localization.Localization(__file__, 1332, 9), len_276155, *[subscript_call_result_276159], **kwargs_276160)
    
    # Assigning a type to the variable 'Nx' (line 1332)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1332, 4), 'Nx', len_call_result_276161)
    
    
    # Call to enumerate(...): (line 1333)
    # Processing the call arguments (line 1333)
    
    # Obtaining the type of the subscript
    int_276163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1333, 33), 'int')
    slice_276164 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1333, 28), int_276163, None, None)
    # Getting the type of 'args' (line 1333)
    args_276165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1333, 28), 'args', False)
    # Obtaining the member '__getitem__' of a type (line 1333)
    getitem___276166 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1333, 28), args_276165, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1333)
    subscript_call_result_276167 = invoke(stypy.reporting.localization.Localization(__file__, 1333, 28), getitem___276166, slice_276164)
    
    # Processing the call keyword arguments (line 1333)
    kwargs_276168 = {}
    # Getting the type of 'enumerate' (line 1333)
    enumerate_276162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1333, 18), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 1333)
    enumerate_call_result_276169 = invoke(stypy.reporting.localization.Localization(__file__, 1333, 18), enumerate_276162, *[subscript_call_result_276167], **kwargs_276168)
    
    # Testing the type of a for loop iterable (line 1333)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1333, 4), enumerate_call_result_276169)
    # Getting the type of the for loop variable (line 1333)
    for_loop_var_276170 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1333, 4), enumerate_call_result_276169)
    # Assigning a type to the variable 'i' (line 1333)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1333, 4), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1333, 4), for_loop_var_276170))
    # Assigning a type to the variable 'arg' (line 1333)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1333, 4), 'arg', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1333, 4), for_loop_var_276170))
    # SSA begins for a for statement (line 1333)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Call to len(...): (line 1334)
    # Processing the call arguments (line 1334)
    # Getting the type of 'arg' (line 1334)
    arg_276172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 15), 'arg', False)
    # Processing the call keyword arguments (line 1334)
    kwargs_276173 = {}
    # Getting the type of 'len' (line 1334)
    len_276171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 11), 'len', False)
    # Calling len(args, kwargs) (line 1334)
    len_call_result_276174 = invoke(stypy.reporting.localization.Localization(__file__, 1334, 11), len_276171, *[arg_276172], **kwargs_276173)
    
    # Getting the type of 'Nx' (line 1334)
    Nx_276175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 23), 'Nx')
    # Applying the binary operator '!=' (line 1334)
    result_ne_276176 = python_operator(stypy.reporting.localization.Localization(__file__, 1334, 11), '!=', len_call_result_276174, Nx_276175)
    
    # Testing the type of an if condition (line 1334)
    if_condition_276177 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1334, 8), result_ne_276176)
    # Assigning a type to the variable 'if_condition_276177' (line 1334)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1334, 8), 'if_condition_276177', if_condition_276177)
    # SSA begins for if statement (line 1334)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1335)
    # Processing the call arguments (line 1335)
    # Getting the type of '_safezip_msg' (line 1335)
    _safezip_msg_276179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 29), '_safezip_msg', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1335)
    tuple_276180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1335, 45), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1335)
    # Adding element type (line 1335)
    # Getting the type of 'Nx' (line 1335)
    Nx_276181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 45), 'Nx', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1335, 45), tuple_276180, Nx_276181)
    # Adding element type (line 1335)
    # Getting the type of 'i' (line 1335)
    i_276182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 49), 'i', False)
    int_276183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1335, 53), 'int')
    # Applying the binary operator '+' (line 1335)
    result_add_276184 = python_operator(stypy.reporting.localization.Localization(__file__, 1335, 49), '+', i_276182, int_276183)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1335, 45), tuple_276180, result_add_276184)
    # Adding element type (line 1335)
    
    # Call to len(...): (line 1335)
    # Processing the call arguments (line 1335)
    # Getting the type of 'arg' (line 1335)
    arg_276186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 60), 'arg', False)
    # Processing the call keyword arguments (line 1335)
    kwargs_276187 = {}
    # Getting the type of 'len' (line 1335)
    len_276185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 56), 'len', False)
    # Calling len(args, kwargs) (line 1335)
    len_call_result_276188 = invoke(stypy.reporting.localization.Localization(__file__, 1335, 56), len_276185, *[arg_276186], **kwargs_276187)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1335, 45), tuple_276180, len_call_result_276188)
    
    # Applying the binary operator '%' (line 1335)
    result_mod_276189 = python_operator(stypy.reporting.localization.Localization(__file__, 1335, 29), '%', _safezip_msg_276179, tuple_276180)
    
    # Processing the call keyword arguments (line 1335)
    kwargs_276190 = {}
    # Getting the type of 'ValueError' (line 1335)
    ValueError_276178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1335)
    ValueError_call_result_276191 = invoke(stypy.reporting.localization.Localization(__file__, 1335, 18), ValueError_276178, *[result_mod_276189], **kwargs_276190)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1335, 12), ValueError_call_result_276191, 'raise parameter', BaseException)
    # SSA join for if statement (line 1334)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to list(...): (line 1336)
    # Processing the call arguments (line 1336)
    
    # Call to zip(...): (line 1336)
    # Getting the type of 'args' (line 1336)
    args_276194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 21), 'args', False)
    # Processing the call keyword arguments (line 1336)
    kwargs_276195 = {}
    # Getting the type of 'zip' (line 1336)
    zip_276193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 16), 'zip', False)
    # Calling zip(args, kwargs) (line 1336)
    zip_call_result_276196 = invoke(stypy.reporting.localization.Localization(__file__, 1336, 16), zip_276193, *[args_276194], **kwargs_276195)
    
    # Processing the call keyword arguments (line 1336)
    kwargs_276197 = {}
    # Getting the type of 'list' (line 1336)
    list_276192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 11), 'list', False)
    # Calling list(args, kwargs) (line 1336)
    list_call_result_276198 = invoke(stypy.reporting.localization.Localization(__file__, 1336, 11), list_276192, *[zip_call_result_276196], **kwargs_276197)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1336)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1336, 4), 'stypy_return_type', list_call_result_276198)
    
    # ################# End of 'safezip(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'safezip' in the type store
    # Getting the type of 'stypy_return_type' (line 1330)
    stypy_return_type_276199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_276199)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'safezip'
    return stypy_return_type_276199

# Assigning a type to the variable 'safezip' (line 1330)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1330, 0), 'safezip', safezip)

@norecursion
def issubclass_safe(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'issubclass_safe'
    module_type_store = module_type_store.open_function_context('issubclass_safe', 1339, 0, False)
    
    # Passed parameters checking function
    issubclass_safe.stypy_localization = localization
    issubclass_safe.stypy_type_of_self = None
    issubclass_safe.stypy_type_store = module_type_store
    issubclass_safe.stypy_function_name = 'issubclass_safe'
    issubclass_safe.stypy_param_names_list = ['x', 'klass']
    issubclass_safe.stypy_varargs_param_name = None
    issubclass_safe.stypy_kwargs_param_name = None
    issubclass_safe.stypy_call_defaults = defaults
    issubclass_safe.stypy_call_varargs = varargs
    issubclass_safe.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'issubclass_safe', ['x', 'klass'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'issubclass_safe', localization, ['x', 'klass'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'issubclass_safe(...)' code ##################

    unicode_276200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1341, 4), 'unicode', u'return issubclass(x, klass) and return False on a TypeError')
    
    
    # SSA begins for try-except statement (line 1343)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to issubclass(...): (line 1344)
    # Processing the call arguments (line 1344)
    # Getting the type of 'x' (line 1344)
    x_276202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1344, 26), 'x', False)
    # Getting the type of 'klass' (line 1344)
    klass_276203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1344, 29), 'klass', False)
    # Processing the call keyword arguments (line 1344)
    kwargs_276204 = {}
    # Getting the type of 'issubclass' (line 1344)
    issubclass_276201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1344, 15), 'issubclass', False)
    # Calling issubclass(args, kwargs) (line 1344)
    issubclass_call_result_276205 = invoke(stypy.reporting.localization.Localization(__file__, 1344, 15), issubclass_276201, *[x_276202, klass_276203], **kwargs_276204)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1344)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1344, 8), 'stypy_return_type', issubclass_call_result_276205)
    # SSA branch for the except part of a try statement (line 1343)
    # SSA branch for the except 'TypeError' branch of a try statement (line 1343)
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'False' (line 1346)
    False_276206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 1346)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1346, 8), 'stypy_return_type', False_276206)
    # SSA join for try-except statement (line 1343)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'issubclass_safe(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'issubclass_safe' in the type store
    # Getting the type of 'stypy_return_type' (line 1339)
    stypy_return_type_276207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1339, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_276207)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'issubclass_safe'
    return stypy_return_type_276207

# Assigning a type to the variable 'issubclass_safe' (line 1339)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1339, 0), 'issubclass_safe', issubclass_safe)

@norecursion
def safe_masked_invalid(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1349)
    False_276208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 32), 'False')
    defaults = [False_276208]
    # Create a new context for function 'safe_masked_invalid'
    module_type_store = module_type_store.open_function_context('safe_masked_invalid', 1349, 0, False)
    
    # Passed parameters checking function
    safe_masked_invalid.stypy_localization = localization
    safe_masked_invalid.stypy_type_of_self = None
    safe_masked_invalid.stypy_type_store = module_type_store
    safe_masked_invalid.stypy_function_name = 'safe_masked_invalid'
    safe_masked_invalid.stypy_param_names_list = ['x', 'copy']
    safe_masked_invalid.stypy_varargs_param_name = None
    safe_masked_invalid.stypy_kwargs_param_name = None
    safe_masked_invalid.stypy_call_defaults = defaults
    safe_masked_invalid.stypy_call_varargs = varargs
    safe_masked_invalid.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'safe_masked_invalid', ['x', 'copy'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'safe_masked_invalid', localization, ['x', 'copy'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'safe_masked_invalid(...)' code ##################

    
    # Assigning a Call to a Name (line 1350):
    
    # Assigning a Call to a Name (line 1350):
    
    # Call to array(...): (line 1350)
    # Processing the call arguments (line 1350)
    # Getting the type of 'x' (line 1350)
    x_276211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 17), 'x', False)
    # Processing the call keyword arguments (line 1350)
    # Getting the type of 'True' (line 1350)
    True_276212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 26), 'True', False)
    keyword_276213 = True_276212
    # Getting the type of 'copy' (line 1350)
    copy_276214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 37), 'copy', False)
    keyword_276215 = copy_276214
    kwargs_276216 = {'subok': keyword_276213, 'copy': keyword_276215}
    # Getting the type of 'np' (line 1350)
    np_276209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 8), 'np', False)
    # Obtaining the member 'array' of a type (line 1350)
    array_276210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1350, 8), np_276209, 'array')
    # Calling array(args, kwargs) (line 1350)
    array_call_result_276217 = invoke(stypy.reporting.localization.Localization(__file__, 1350, 8), array_276210, *[x_276211], **kwargs_276216)
    
    # Assigning a type to the variable 'x' (line 1350)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1350, 4), 'x', array_call_result_276217)
    
    
    # Getting the type of 'x' (line 1351)
    x_276218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 11), 'x')
    # Obtaining the member 'dtype' of a type (line 1351)
    dtype_276219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1351, 11), x_276218, 'dtype')
    # Obtaining the member 'isnative' of a type (line 1351)
    isnative_276220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1351, 11), dtype_276219, 'isnative')
    # Applying the 'not' unary operator (line 1351)
    result_not__276221 = python_operator(stypy.reporting.localization.Localization(__file__, 1351, 7), 'not', isnative_276220)
    
    # Testing the type of an if condition (line 1351)
    if_condition_276222 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1351, 4), result_not__276221)
    # Assigning a type to the variable 'if_condition_276222' (line 1351)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1351, 4), 'if_condition_276222', if_condition_276222)
    # SSA begins for if statement (line 1351)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1356):
    
    # Assigning a Call to a Name (line 1356):
    
    # Call to newbyteorder(...): (line 1356)
    # Processing the call arguments (line 1356)
    unicode_276229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1356, 42), 'unicode', u'S')
    # Processing the call keyword arguments (line 1356)
    kwargs_276230 = {}
    
    # Call to byteswap(...): (line 1356)
    # Processing the call arguments (line 1356)
    # Getting the type of 'copy' (line 1356)
    copy_276225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 23), 'copy', False)
    # Processing the call keyword arguments (line 1356)
    kwargs_276226 = {}
    # Getting the type of 'x' (line 1356)
    x_276223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 12), 'x', False)
    # Obtaining the member 'byteswap' of a type (line 1356)
    byteswap_276224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1356, 12), x_276223, 'byteswap')
    # Calling byteswap(args, kwargs) (line 1356)
    byteswap_call_result_276227 = invoke(stypy.reporting.localization.Localization(__file__, 1356, 12), byteswap_276224, *[copy_276225], **kwargs_276226)
    
    # Obtaining the member 'newbyteorder' of a type (line 1356)
    newbyteorder_276228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1356, 12), byteswap_call_result_276227, 'newbyteorder')
    # Calling newbyteorder(args, kwargs) (line 1356)
    newbyteorder_call_result_276231 = invoke(stypy.reporting.localization.Localization(__file__, 1356, 12), newbyteorder_276228, *[unicode_276229], **kwargs_276230)
    
    # Assigning a type to the variable 'x' (line 1356)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1356, 8), 'x', newbyteorder_call_result_276231)
    # SSA join for if statement (line 1351)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 1358)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 1359):
    
    # Assigning a Call to a Name (line 1359):
    
    # Call to masked_invalid(...): (line 1359)
    # Processing the call arguments (line 1359)
    # Getting the type of 'x' (line 1359)
    x_276235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 34), 'x', False)
    # Processing the call keyword arguments (line 1359)
    # Getting the type of 'False' (line 1359)
    False_276236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 42), 'False', False)
    keyword_276237 = False_276236
    kwargs_276238 = {'copy': keyword_276237}
    # Getting the type of 'np' (line 1359)
    np_276232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 13), 'np', False)
    # Obtaining the member 'ma' of a type (line 1359)
    ma_276233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1359, 13), np_276232, 'ma')
    # Obtaining the member 'masked_invalid' of a type (line 1359)
    masked_invalid_276234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1359, 13), ma_276233, 'masked_invalid')
    # Calling masked_invalid(args, kwargs) (line 1359)
    masked_invalid_call_result_276239 = invoke(stypy.reporting.localization.Localization(__file__, 1359, 13), masked_invalid_276234, *[x_276235], **kwargs_276238)
    
    # Assigning a type to the variable 'xm' (line 1359)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1359, 8), 'xm', masked_invalid_call_result_276239)
    
    # Call to shrink_mask(...): (line 1360)
    # Processing the call keyword arguments (line 1360)
    kwargs_276242 = {}
    # Getting the type of 'xm' (line 1360)
    xm_276240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 8), 'xm', False)
    # Obtaining the member 'shrink_mask' of a type (line 1360)
    shrink_mask_276241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1360, 8), xm_276240, 'shrink_mask')
    # Calling shrink_mask(args, kwargs) (line 1360)
    shrink_mask_call_result_276243 = invoke(stypy.reporting.localization.Localization(__file__, 1360, 8), shrink_mask_276241, *[], **kwargs_276242)
    
    # SSA branch for the except part of a try statement (line 1358)
    # SSA branch for the except 'TypeError' branch of a try statement (line 1358)
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'x' (line 1362)
    x_276244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 15), 'x')
    # Assigning a type to the variable 'stypy_return_type' (line 1362)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1362, 8), 'stypy_return_type', x_276244)
    # SSA join for try-except statement (line 1358)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'xm' (line 1363)
    xm_276245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 11), 'xm')
    # Assigning a type to the variable 'stypy_return_type' (line 1363)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1363, 4), 'stypy_return_type', xm_276245)
    
    # ################# End of 'safe_masked_invalid(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'safe_masked_invalid' in the type store
    # Getting the type of 'stypy_return_type' (line 1349)
    stypy_return_type_276246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_276246)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'safe_masked_invalid'
    return stypy_return_type_276246

# Assigning a type to the variable 'safe_masked_invalid' (line 1349)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1349, 0), 'safe_masked_invalid', safe_masked_invalid)

@norecursion
def print_cycles(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'sys' (line 1366)
    sys_276247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 36), 'sys')
    # Obtaining the member 'stdout' of a type (line 1366)
    stdout_276248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1366, 36), sys_276247, 'stdout')
    # Getting the type of 'False' (line 1366)
    False_276249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 62), 'False')
    defaults = [stdout_276248, False_276249]
    # Create a new context for function 'print_cycles'
    module_type_store = module_type_store.open_function_context('print_cycles', 1366, 0, False)
    
    # Passed parameters checking function
    print_cycles.stypy_localization = localization
    print_cycles.stypy_type_of_self = None
    print_cycles.stypy_type_store = module_type_store
    print_cycles.stypy_function_name = 'print_cycles'
    print_cycles.stypy_param_names_list = ['objects', 'outstream', 'show_progress']
    print_cycles.stypy_varargs_param_name = None
    print_cycles.stypy_kwargs_param_name = None
    print_cycles.stypy_call_defaults = defaults
    print_cycles.stypy_call_varargs = varargs
    print_cycles.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'print_cycles', ['objects', 'outstream', 'show_progress'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'print_cycles', localization, ['objects', 'outstream', 'show_progress'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'print_cycles(...)' code ##################

    unicode_276250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1378, (-1)), 'unicode', u'\n    *objects*\n        A list of objects to find cycles in.  It is often useful to\n        pass in gc.garbage to find the cycles that are preventing some\n        objects from being garbage collected.\n\n    *outstream*\n        The stream for output.\n\n    *show_progress*\n        If True, print the number of objects reached as they are found.\n    ')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1379, 4))
    
    # 'import gc' statement (line 1379)
    import gc

    import_module(stypy.reporting.localization.Localization(__file__, 1379, 4), 'gc', gc, module_type_store)
    
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1380, 4))
    
    # 'from types import FrameType' statement (line 1380)
    try:
        from types import FrameType

    except:
        FrameType = UndefinedType
    import_from_module(stypy.reporting.localization.Localization(__file__, 1380, 4), 'types', None, module_type_store, ['FrameType'], [FrameType])
    

    @norecursion
    def print_path(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'print_path'
        module_type_store = module_type_store.open_function_context('print_path', 1382, 4, False)
        
        # Passed parameters checking function
        print_path.stypy_localization = localization
        print_path.stypy_type_of_self = None
        print_path.stypy_type_store = module_type_store
        print_path.stypy_function_name = 'print_path'
        print_path.stypy_param_names_list = ['path']
        print_path.stypy_varargs_param_name = None
        print_path.stypy_kwargs_param_name = None
        print_path.stypy_call_defaults = defaults
        print_path.stypy_call_varargs = varargs
        print_path.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'print_path', ['path'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'print_path', localization, ['path'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'print_path(...)' code ##################

        
        
        # Call to enumerate(...): (line 1383)
        # Processing the call arguments (line 1383)
        # Getting the type of 'path' (line 1383)
        path_276252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 33), 'path', False)
        # Processing the call keyword arguments (line 1383)
        kwargs_276253 = {}
        # Getting the type of 'enumerate' (line 1383)
        enumerate_276251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 23), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 1383)
        enumerate_call_result_276254 = invoke(stypy.reporting.localization.Localization(__file__, 1383, 23), enumerate_276251, *[path_276252], **kwargs_276253)
        
        # Testing the type of a for loop iterable (line 1383)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1383, 8), enumerate_call_result_276254)
        # Getting the type of the for loop variable (line 1383)
        for_loop_var_276255 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1383, 8), enumerate_call_result_276254)
        # Assigning a type to the variable 'i' (line 1383)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1383, 8), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1383, 8), for_loop_var_276255))
        # Assigning a type to the variable 'step' (line 1383)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1383, 8), 'step', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1383, 8), for_loop_var_276255))
        # SSA begins for a for statement (line 1383)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Subscript to a Name (line 1385):
        
        # Assigning a Subscript to a Name (line 1385):
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1385)
        i_276256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 25), 'i')
        int_276257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1385, 29), 'int')
        # Applying the binary operator '+' (line 1385)
        result_add_276258 = python_operator(stypy.reporting.localization.Localization(__file__, 1385, 25), '+', i_276256, int_276257)
        
        
        # Call to len(...): (line 1385)
        # Processing the call arguments (line 1385)
        # Getting the type of 'path' (line 1385)
        path_276260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 38), 'path', False)
        # Processing the call keyword arguments (line 1385)
        kwargs_276261 = {}
        # Getting the type of 'len' (line 1385)
        len_276259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 34), 'len', False)
        # Calling len(args, kwargs) (line 1385)
        len_call_result_276262 = invoke(stypy.reporting.localization.Localization(__file__, 1385, 34), len_276259, *[path_276260], **kwargs_276261)
        
        # Applying the binary operator '%' (line 1385)
        result_mod_276263 = python_operator(stypy.reporting.localization.Localization(__file__, 1385, 24), '%', result_add_276258, len_call_result_276262)
        
        # Getting the type of 'path' (line 1385)
        path_276264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 19), 'path')
        # Obtaining the member '__getitem__' of a type (line 1385)
        getitem___276265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1385, 19), path_276264, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1385)
        subscript_call_result_276266 = invoke(stypy.reporting.localization.Localization(__file__, 1385, 19), getitem___276265, result_mod_276263)
        
        # Assigning a type to the variable 'next' (line 1385)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1385, 12), 'next', subscript_call_result_276266)
        
        # Call to write(...): (line 1387)
        # Processing the call arguments (line 1387)
        unicode_276269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1387, 28), 'unicode', u'   %s -- ')
        
        # Call to str(...): (line 1387)
        # Processing the call arguments (line 1387)
        
        # Call to type(...): (line 1387)
        # Processing the call arguments (line 1387)
        # Getting the type of 'step' (line 1387)
        step_276272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 51), 'step', False)
        # Processing the call keyword arguments (line 1387)
        kwargs_276273 = {}
        # Getting the type of 'type' (line 1387)
        type_276271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 46), 'type', False)
        # Calling type(args, kwargs) (line 1387)
        type_call_result_276274 = invoke(stypy.reporting.localization.Localization(__file__, 1387, 46), type_276271, *[step_276272], **kwargs_276273)
        
        # Processing the call keyword arguments (line 1387)
        kwargs_276275 = {}
        # Getting the type of 'str' (line 1387)
        str_276270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 42), 'str', False)
        # Calling str(args, kwargs) (line 1387)
        str_call_result_276276 = invoke(stypy.reporting.localization.Localization(__file__, 1387, 42), str_276270, *[type_call_result_276274], **kwargs_276275)
        
        # Applying the binary operator '%' (line 1387)
        result_mod_276277 = python_operator(stypy.reporting.localization.Localization(__file__, 1387, 28), '%', unicode_276269, str_call_result_276276)
        
        # Processing the call keyword arguments (line 1387)
        kwargs_276278 = {}
        # Getting the type of 'outstream' (line 1387)
        outstream_276267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 12), 'outstream', False)
        # Obtaining the member 'write' of a type (line 1387)
        write_276268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1387, 12), outstream_276267, 'write')
        # Calling write(args, kwargs) (line 1387)
        write_call_result_276279 = invoke(stypy.reporting.localization.Localization(__file__, 1387, 12), write_276268, *[result_mod_276277], **kwargs_276278)
        
        
        # Type idiom detected: calculating its left and rigth part (line 1388)
        # Getting the type of 'dict' (line 1388)
        dict_276280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 32), 'dict')
        # Getting the type of 'step' (line 1388)
        step_276281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 26), 'step')
        
        (may_be_276282, more_types_in_union_276283) = may_be_subtype(dict_276280, step_276281)

        if may_be_276282:

            if more_types_in_union_276283:
                # Runtime conditional SSA (line 1388)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'step' (line 1388)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1388, 12), 'step', remove_not_subtype_from_union(step_276281, dict))
            
            
            # Call to iteritems(...): (line 1389)
            # Processing the call arguments (line 1389)
            # Getting the type of 'step' (line 1389)
            step_276286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 46), 'step', False)
            # Processing the call keyword arguments (line 1389)
            kwargs_276287 = {}
            # Getting the type of 'six' (line 1389)
            six_276284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 32), 'six', False)
            # Obtaining the member 'iteritems' of a type (line 1389)
            iteritems_276285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1389, 32), six_276284, 'iteritems')
            # Calling iteritems(args, kwargs) (line 1389)
            iteritems_call_result_276288 = invoke(stypy.reporting.localization.Localization(__file__, 1389, 32), iteritems_276285, *[step_276286], **kwargs_276287)
            
            # Testing the type of a for loop iterable (line 1389)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1389, 16), iteritems_call_result_276288)
            # Getting the type of the for loop variable (line 1389)
            for_loop_var_276289 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1389, 16), iteritems_call_result_276288)
            # Assigning a type to the variable 'key' (line 1389)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1389, 16), 'key', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1389, 16), for_loop_var_276289))
            # Assigning a type to the variable 'val' (line 1389)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1389, 16), 'val', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1389, 16), for_loop_var_276289))
            # SSA begins for a for statement (line 1389)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            
            # Getting the type of 'val' (line 1390)
            val_276290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 23), 'val')
            # Getting the type of 'next' (line 1390)
            next_276291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 30), 'next')
            # Applying the binary operator 'is' (line 1390)
            result_is__276292 = python_operator(stypy.reporting.localization.Localization(__file__, 1390, 23), 'is', val_276290, next_276291)
            
            # Testing the type of an if condition (line 1390)
            if_condition_276293 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1390, 20), result_is__276292)
            # Assigning a type to the variable 'if_condition_276293' (line 1390)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1390, 20), 'if_condition_276293', if_condition_276293)
            # SSA begins for if statement (line 1390)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to write(...): (line 1391)
            # Processing the call arguments (line 1391)
            unicode_276296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1391, 40), 'unicode', u'[%s]')
            
            # Call to repr(...): (line 1391)
            # Processing the call arguments (line 1391)
            # Getting the type of 'key' (line 1391)
            key_276298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1391, 54), 'key', False)
            # Processing the call keyword arguments (line 1391)
            kwargs_276299 = {}
            # Getting the type of 'repr' (line 1391)
            repr_276297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1391, 49), 'repr', False)
            # Calling repr(args, kwargs) (line 1391)
            repr_call_result_276300 = invoke(stypy.reporting.localization.Localization(__file__, 1391, 49), repr_276297, *[key_276298], **kwargs_276299)
            
            # Applying the binary operator '%' (line 1391)
            result_mod_276301 = python_operator(stypy.reporting.localization.Localization(__file__, 1391, 40), '%', unicode_276296, repr_call_result_276300)
            
            # Processing the call keyword arguments (line 1391)
            kwargs_276302 = {}
            # Getting the type of 'outstream' (line 1391)
            outstream_276294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1391, 24), 'outstream', False)
            # Obtaining the member 'write' of a type (line 1391)
            write_276295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1391, 24), outstream_276294, 'write')
            # Calling write(args, kwargs) (line 1391)
            write_call_result_276303 = invoke(stypy.reporting.localization.Localization(__file__, 1391, 24), write_276295, *[result_mod_276301], **kwargs_276302)
            
            # SSA join for if statement (line 1390)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            # Getting the type of 'key' (line 1393)
            key_276304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 23), 'key')
            # Getting the type of 'next' (line 1393)
            next_276305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 30), 'next')
            # Applying the binary operator 'is' (line 1393)
            result_is__276306 = python_operator(stypy.reporting.localization.Localization(__file__, 1393, 23), 'is', key_276304, next_276305)
            
            # Testing the type of an if condition (line 1393)
            if_condition_276307 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1393, 20), result_is__276306)
            # Assigning a type to the variable 'if_condition_276307' (line 1393)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1393, 20), 'if_condition_276307', if_condition_276307)
            # SSA begins for if statement (line 1393)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to write(...): (line 1394)
            # Processing the call arguments (line 1394)
            unicode_276310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1394, 40), 'unicode', u'[key] = %s')
            
            # Call to repr(...): (line 1394)
            # Processing the call arguments (line 1394)
            # Getting the type of 'val' (line 1394)
            val_276312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 60), 'val', False)
            # Processing the call keyword arguments (line 1394)
            kwargs_276313 = {}
            # Getting the type of 'repr' (line 1394)
            repr_276311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 55), 'repr', False)
            # Calling repr(args, kwargs) (line 1394)
            repr_call_result_276314 = invoke(stypy.reporting.localization.Localization(__file__, 1394, 55), repr_276311, *[val_276312], **kwargs_276313)
            
            # Applying the binary operator '%' (line 1394)
            result_mod_276315 = python_operator(stypy.reporting.localization.Localization(__file__, 1394, 40), '%', unicode_276310, repr_call_result_276314)
            
            # Processing the call keyword arguments (line 1394)
            kwargs_276316 = {}
            # Getting the type of 'outstream' (line 1394)
            outstream_276308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 24), 'outstream', False)
            # Obtaining the member 'write' of a type (line 1394)
            write_276309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1394, 24), outstream_276308, 'write')
            # Calling write(args, kwargs) (line 1394)
            write_call_result_276317 = invoke(stypy.reporting.localization.Localization(__file__, 1394, 24), write_276309, *[result_mod_276315], **kwargs_276316)
            
            # SSA join for if statement (line 1393)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_276283:
                # Runtime conditional SSA for else branch (line 1388)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_276282) or more_types_in_union_276283):
            # Assigning a type to the variable 'step' (line 1388)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1388, 12), 'step', remove_subtype_from_union(step_276281, dict))
            
            # Type idiom detected: calculating its left and rigth part (line 1396)
            # Getting the type of 'list' (line 1396)
            list_276318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1396, 34), 'list')
            # Getting the type of 'step' (line 1396)
            step_276319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1396, 28), 'step')
            
            (may_be_276320, more_types_in_union_276321) = may_be_subtype(list_276318, step_276319)

            if may_be_276320:

                if more_types_in_union_276321:
                    # Runtime conditional SSA (line 1396)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                # Assigning a type to the variable 'step' (line 1396)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1396, 17), 'step', remove_not_subtype_from_union(step_276319, list))
                
                # Call to write(...): (line 1397)
                # Processing the call arguments (line 1397)
                unicode_276324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1397, 32), 'unicode', u'[%d]')
                
                # Call to index(...): (line 1397)
                # Processing the call arguments (line 1397)
                # Getting the type of 'next' (line 1397)
                next_276327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 52), 'next', False)
                # Processing the call keyword arguments (line 1397)
                kwargs_276328 = {}
                # Getting the type of 'step' (line 1397)
                step_276325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 41), 'step', False)
                # Obtaining the member 'index' of a type (line 1397)
                index_276326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1397, 41), step_276325, 'index')
                # Calling index(args, kwargs) (line 1397)
                index_call_result_276329 = invoke(stypy.reporting.localization.Localization(__file__, 1397, 41), index_276326, *[next_276327], **kwargs_276328)
                
                # Applying the binary operator '%' (line 1397)
                result_mod_276330 = python_operator(stypy.reporting.localization.Localization(__file__, 1397, 32), '%', unicode_276324, index_call_result_276329)
                
                # Processing the call keyword arguments (line 1397)
                kwargs_276331 = {}
                # Getting the type of 'outstream' (line 1397)
                outstream_276322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 16), 'outstream', False)
                # Obtaining the member 'write' of a type (line 1397)
                write_276323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1397, 16), outstream_276322, 'write')
                # Calling write(args, kwargs) (line 1397)
                write_call_result_276332 = invoke(stypy.reporting.localization.Localization(__file__, 1397, 16), write_276323, *[result_mod_276330], **kwargs_276331)
                

                if more_types_in_union_276321:
                    # Runtime conditional SSA for else branch (line 1396)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_276320) or more_types_in_union_276321):
                # Assigning a type to the variable 'step' (line 1396)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1396, 17), 'step', remove_subtype_from_union(step_276319, list))
                
                # Type idiom detected: calculating its left and rigth part (line 1398)
                # Getting the type of 'tuple' (line 1398)
                tuple_276333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 34), 'tuple')
                # Getting the type of 'step' (line 1398)
                step_276334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 28), 'step')
                
                (may_be_276335, more_types_in_union_276336) = may_be_subtype(tuple_276333, step_276334)

                if may_be_276335:

                    if more_types_in_union_276336:
                        # Runtime conditional SSA (line 1398)
                        module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                    else:
                        module_type_store = module_type_store

                    # Assigning a type to the variable 'step' (line 1398)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1398, 17), 'step', remove_not_subtype_from_union(step_276334, tuple))
                    
                    # Call to write(...): (line 1399)
                    # Processing the call arguments (line 1399)
                    unicode_276339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1399, 32), 'unicode', u'( tuple )')
                    # Processing the call keyword arguments (line 1399)
                    kwargs_276340 = {}
                    # Getting the type of 'outstream' (line 1399)
                    outstream_276337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1399, 16), 'outstream', False)
                    # Obtaining the member 'write' of a type (line 1399)
                    write_276338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1399, 16), outstream_276337, 'write')
                    # Calling write(args, kwargs) (line 1399)
                    write_call_result_276341 = invoke(stypy.reporting.localization.Localization(__file__, 1399, 16), write_276338, *[unicode_276339], **kwargs_276340)
                    

                    if more_types_in_union_276336:
                        # Runtime conditional SSA for else branch (line 1398)
                        module_type_store.open_ssa_branch('idiom else')



                if ((not may_be_276335) or more_types_in_union_276336):
                    # Assigning a type to the variable 'step' (line 1398)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1398, 17), 'step', remove_subtype_from_union(step_276334, tuple))
                    
                    # Call to write(...): (line 1401)
                    # Processing the call arguments (line 1401)
                    
                    # Call to repr(...): (line 1401)
                    # Processing the call arguments (line 1401)
                    # Getting the type of 'step' (line 1401)
                    step_276345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1401, 37), 'step', False)
                    # Processing the call keyword arguments (line 1401)
                    kwargs_276346 = {}
                    # Getting the type of 'repr' (line 1401)
                    repr_276344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1401, 32), 'repr', False)
                    # Calling repr(args, kwargs) (line 1401)
                    repr_call_result_276347 = invoke(stypy.reporting.localization.Localization(__file__, 1401, 32), repr_276344, *[step_276345], **kwargs_276346)
                    
                    # Processing the call keyword arguments (line 1401)
                    kwargs_276348 = {}
                    # Getting the type of 'outstream' (line 1401)
                    outstream_276342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1401, 16), 'outstream', False)
                    # Obtaining the member 'write' of a type (line 1401)
                    write_276343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1401, 16), outstream_276342, 'write')
                    # Calling write(args, kwargs) (line 1401)
                    write_call_result_276349 = invoke(stypy.reporting.localization.Localization(__file__, 1401, 16), write_276343, *[repr_call_result_276347], **kwargs_276348)
                    

                    if (may_be_276335 and more_types_in_union_276336):
                        # SSA join for if statement (line 1398)
                        module_type_store = module_type_store.join_ssa_context()


                

                if (may_be_276320 and more_types_in_union_276321):
                    # SSA join for if statement (line 1396)
                    module_type_store = module_type_store.join_ssa_context()


            

            if (may_be_276282 and more_types_in_union_276283):
                # SSA join for if statement (line 1388)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to write(...): (line 1402)
        # Processing the call arguments (line 1402)
        unicode_276352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1402, 28), 'unicode', u' ->\n')
        # Processing the call keyword arguments (line 1402)
        kwargs_276353 = {}
        # Getting the type of 'outstream' (line 1402)
        outstream_276350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1402, 12), 'outstream', False)
        # Obtaining the member 'write' of a type (line 1402)
        write_276351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1402, 12), outstream_276350, 'write')
        # Calling write(args, kwargs) (line 1402)
        write_call_result_276354 = invoke(stypy.reporting.localization.Localization(__file__, 1402, 12), write_276351, *[unicode_276352], **kwargs_276353)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to write(...): (line 1403)
        # Processing the call arguments (line 1403)
        unicode_276357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1403, 24), 'unicode', u'\n')
        # Processing the call keyword arguments (line 1403)
        kwargs_276358 = {}
        # Getting the type of 'outstream' (line 1403)
        outstream_276355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1403, 8), 'outstream', False)
        # Obtaining the member 'write' of a type (line 1403)
        write_276356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1403, 8), outstream_276355, 'write')
        # Calling write(args, kwargs) (line 1403)
        write_call_result_276359 = invoke(stypy.reporting.localization.Localization(__file__, 1403, 8), write_276356, *[unicode_276357], **kwargs_276358)
        
        
        # ################# End of 'print_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'print_path' in the type store
        # Getting the type of 'stypy_return_type' (line 1382)
        stypy_return_type_276360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_276360)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'print_path'
        return stypy_return_type_276360

    # Assigning a type to the variable 'print_path' (line 1382)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1382, 4), 'print_path', print_path)

    @norecursion
    def recurse(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'recurse'
        module_type_store = module_type_store.open_function_context('recurse', 1405, 4, False)
        
        # Passed parameters checking function
        recurse.stypy_localization = localization
        recurse.stypy_type_of_self = None
        recurse.stypy_type_store = module_type_store
        recurse.stypy_function_name = 'recurse'
        recurse.stypy_param_names_list = ['obj', 'start', 'all', 'current_path']
        recurse.stypy_varargs_param_name = None
        recurse.stypy_kwargs_param_name = None
        recurse.stypy_call_defaults = defaults
        recurse.stypy_call_varargs = varargs
        recurse.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'recurse', ['obj', 'start', 'all', 'current_path'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'recurse', localization, ['obj', 'start', 'all', 'current_path'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'recurse(...)' code ##################

        
        # Getting the type of 'show_progress' (line 1406)
        show_progress_276361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 11), 'show_progress')
        # Testing the type of an if condition (line 1406)
        if_condition_276362 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1406, 8), show_progress_276361)
        # Assigning a type to the variable 'if_condition_276362' (line 1406)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1406, 8), 'if_condition_276362', if_condition_276362)
        # SSA begins for if statement (line 1406)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to write(...): (line 1407)
        # Processing the call arguments (line 1407)
        unicode_276365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1407, 28), 'unicode', u'%d\r')
        
        # Call to len(...): (line 1407)
        # Processing the call arguments (line 1407)
        # Getting the type of 'all' (line 1407)
        all_276367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 41), 'all', False)
        # Processing the call keyword arguments (line 1407)
        kwargs_276368 = {}
        # Getting the type of 'len' (line 1407)
        len_276366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 37), 'len', False)
        # Calling len(args, kwargs) (line 1407)
        len_call_result_276369 = invoke(stypy.reporting.localization.Localization(__file__, 1407, 37), len_276366, *[all_276367], **kwargs_276368)
        
        # Applying the binary operator '%' (line 1407)
        result_mod_276370 = python_operator(stypy.reporting.localization.Localization(__file__, 1407, 28), '%', unicode_276365, len_call_result_276369)
        
        # Processing the call keyword arguments (line 1407)
        kwargs_276371 = {}
        # Getting the type of 'outstream' (line 1407)
        outstream_276363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 12), 'outstream', False)
        # Obtaining the member 'write' of a type (line 1407)
        write_276364 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1407, 12), outstream_276363, 'write')
        # Calling write(args, kwargs) (line 1407)
        write_call_result_276372 = invoke(stypy.reporting.localization.Localization(__file__, 1407, 12), write_276364, *[result_mod_276370], **kwargs_276371)
        
        # SSA join for if statement (line 1406)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Subscript (line 1409):
        
        # Assigning a Name to a Subscript (line 1409):
        # Getting the type of 'None' (line 1409)
        None_276373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 23), 'None')
        # Getting the type of 'all' (line 1409)
        all_276374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 8), 'all')
        
        # Call to id(...): (line 1409)
        # Processing the call arguments (line 1409)
        # Getting the type of 'obj' (line 1409)
        obj_276376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 15), 'obj', False)
        # Processing the call keyword arguments (line 1409)
        kwargs_276377 = {}
        # Getting the type of 'id' (line 1409)
        id_276375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 12), 'id', False)
        # Calling id(args, kwargs) (line 1409)
        id_call_result_276378 = invoke(stypy.reporting.localization.Localization(__file__, 1409, 12), id_276375, *[obj_276376], **kwargs_276377)
        
        # Storing an element on a container (line 1409)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1409, 8), all_276374, (id_call_result_276378, None_276373))
        
        # Assigning a Call to a Name (line 1411):
        
        # Assigning a Call to a Name (line 1411):
        
        # Call to get_referents(...): (line 1411)
        # Processing the call arguments (line 1411)
        # Getting the type of 'obj' (line 1411)
        obj_276381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 37), 'obj', False)
        # Processing the call keyword arguments (line 1411)
        kwargs_276382 = {}
        # Getting the type of 'gc' (line 1411)
        gc_276379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 20), 'gc', False)
        # Obtaining the member 'get_referents' of a type (line 1411)
        get_referents_276380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1411, 20), gc_276379, 'get_referents')
        # Calling get_referents(args, kwargs) (line 1411)
        get_referents_call_result_276383 = invoke(stypy.reporting.localization.Localization(__file__, 1411, 20), get_referents_276380, *[obj_276381], **kwargs_276382)
        
        # Assigning a type to the variable 'referents' (line 1411)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1411, 8), 'referents', get_referents_call_result_276383)
        
        # Getting the type of 'referents' (line 1412)
        referents_276384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 24), 'referents')
        # Testing the type of a for loop iterable (line 1412)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1412, 8), referents_276384)
        # Getting the type of the for loop variable (line 1412)
        for_loop_var_276385 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1412, 8), referents_276384)
        # Assigning a type to the variable 'referent' (line 1412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1412, 8), 'referent', for_loop_var_276385)
        # SSA begins for a for statement (line 1412)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'referent' (line 1415)
        referent_276386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1415, 15), 'referent')
        # Getting the type of 'start' (line 1415)
        start_276387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1415, 27), 'start')
        # Applying the binary operator 'is' (line 1415)
        result_is__276388 = python_operator(stypy.reporting.localization.Localization(__file__, 1415, 15), 'is', referent_276386, start_276387)
        
        # Testing the type of an if condition (line 1415)
        if_condition_276389 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1415, 12), result_is__276388)
        # Assigning a type to the variable 'if_condition_276389' (line 1415)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1415, 12), 'if_condition_276389', if_condition_276389)
        # SSA begins for if statement (line 1415)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to print_path(...): (line 1416)
        # Processing the call arguments (line 1416)
        # Getting the type of 'current_path' (line 1416)
        current_path_276391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 27), 'current_path', False)
        # Processing the call keyword arguments (line 1416)
        kwargs_276392 = {}
        # Getting the type of 'print_path' (line 1416)
        print_path_276390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 16), 'print_path', False)
        # Calling print_path(args, kwargs) (line 1416)
        print_path_call_result_276393 = invoke(stypy.reporting.localization.Localization(__file__, 1416, 16), print_path_276390, *[current_path_276391], **kwargs_276392)
        
        # SSA branch for the else part of an if statement (line 1415)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'referent' (line 1421)
        referent_276394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 17), 'referent')
        # Getting the type of 'objects' (line 1421)
        objects_276395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 29), 'objects')
        # Applying the binary operator 'is' (line 1421)
        result_is__276396 = python_operator(stypy.reporting.localization.Localization(__file__, 1421, 17), 'is', referent_276394, objects_276395)
        
        
        # Call to isinstance(...): (line 1421)
        # Processing the call arguments (line 1421)
        # Getting the type of 'referent' (line 1421)
        referent_276398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 51), 'referent', False)
        # Getting the type of 'FrameType' (line 1421)
        FrameType_276399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 61), 'FrameType', False)
        # Processing the call keyword arguments (line 1421)
        kwargs_276400 = {}
        # Getting the type of 'isinstance' (line 1421)
        isinstance_276397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 40), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1421)
        isinstance_call_result_276401 = invoke(stypy.reporting.localization.Localization(__file__, 1421, 40), isinstance_276397, *[referent_276398, FrameType_276399], **kwargs_276400)
        
        # Applying the binary operator 'or' (line 1421)
        result_or_keyword_276402 = python_operator(stypy.reporting.localization.Localization(__file__, 1421, 17), 'or', result_is__276396, isinstance_call_result_276401)
        
        # Testing the type of an if condition (line 1421)
        if_condition_276403 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1421, 17), result_or_keyword_276402)
        # Assigning a type to the variable 'if_condition_276403' (line 1421)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1421, 17), 'if_condition_276403', if_condition_276403)
        # SSA begins for if statement (line 1421)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA branch for the else part of an if statement (line 1421)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Call to id(...): (line 1425)
        # Processing the call arguments (line 1425)
        # Getting the type of 'referent' (line 1425)
        referent_276405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 20), 'referent', False)
        # Processing the call keyword arguments (line 1425)
        kwargs_276406 = {}
        # Getting the type of 'id' (line 1425)
        id_276404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 17), 'id', False)
        # Calling id(args, kwargs) (line 1425)
        id_call_result_276407 = invoke(stypy.reporting.localization.Localization(__file__, 1425, 17), id_276404, *[referent_276405], **kwargs_276406)
        
        # Getting the type of 'all' (line 1425)
        all_276408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 37), 'all')
        # Applying the binary operator 'notin' (line 1425)
        result_contains_276409 = python_operator(stypy.reporting.localization.Localization(__file__, 1425, 17), 'notin', id_call_result_276407, all_276408)
        
        # Testing the type of an if condition (line 1425)
        if_condition_276410 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1425, 17), result_contains_276409)
        # Assigning a type to the variable 'if_condition_276410' (line 1425)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1425, 17), 'if_condition_276410', if_condition_276410)
        # SSA begins for if statement (line 1425)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to recurse(...): (line 1426)
        # Processing the call arguments (line 1426)
        # Getting the type of 'referent' (line 1426)
        referent_276412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 24), 'referent', False)
        # Getting the type of 'start' (line 1426)
        start_276413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 34), 'start', False)
        # Getting the type of 'all' (line 1426)
        all_276414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 41), 'all', False)
        # Getting the type of 'current_path' (line 1426)
        current_path_276415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 46), 'current_path', False)
        
        # Obtaining an instance of the builtin type 'list' (line 1426)
        list_276416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1426, 61), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1426)
        # Adding element type (line 1426)
        # Getting the type of 'obj' (line 1426)
        obj_276417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 62), 'obj', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1426, 61), list_276416, obj_276417)
        
        # Applying the binary operator '+' (line 1426)
        result_add_276418 = python_operator(stypy.reporting.localization.Localization(__file__, 1426, 46), '+', current_path_276415, list_276416)
        
        # Processing the call keyword arguments (line 1426)
        kwargs_276419 = {}
        # Getting the type of 'recurse' (line 1426)
        recurse_276411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 16), 'recurse', False)
        # Calling recurse(args, kwargs) (line 1426)
        recurse_call_result_276420 = invoke(stypy.reporting.localization.Localization(__file__, 1426, 16), recurse_276411, *[referent_276412, start_276413, all_276414, result_add_276418], **kwargs_276419)
        
        # SSA join for if statement (line 1425)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1421)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1415)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'recurse(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'recurse' in the type store
        # Getting the type of 'stypy_return_type' (line 1405)
        stypy_return_type_276421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_276421)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'recurse'
        return stypy_return_type_276421

    # Assigning a type to the variable 'recurse' (line 1405)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1405, 4), 'recurse', recurse)
    
    # Getting the type of 'objects' (line 1428)
    objects_276422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1428, 15), 'objects')
    # Testing the type of a for loop iterable (line 1428)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1428, 4), objects_276422)
    # Getting the type of the for loop variable (line 1428)
    for_loop_var_276423 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1428, 4), objects_276422)
    # Assigning a type to the variable 'obj' (line 1428)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1428, 4), 'obj', for_loop_var_276423)
    # SSA begins for a for statement (line 1428)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to write(...): (line 1429)
    # Processing the call arguments (line 1429)
    unicode_276426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1429, 24), 'unicode', u'Examining: %r\n')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1429)
    tuple_276427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1429, 45), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1429)
    # Adding element type (line 1429)
    # Getting the type of 'obj' (line 1429)
    obj_276428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 45), 'obj', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1429, 45), tuple_276427, obj_276428)
    
    # Applying the binary operator '%' (line 1429)
    result_mod_276429 = python_operator(stypy.reporting.localization.Localization(__file__, 1429, 24), '%', unicode_276426, tuple_276427)
    
    # Processing the call keyword arguments (line 1429)
    kwargs_276430 = {}
    # Getting the type of 'outstream' (line 1429)
    outstream_276424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 8), 'outstream', False)
    # Obtaining the member 'write' of a type (line 1429)
    write_276425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1429, 8), outstream_276424, 'write')
    # Calling write(args, kwargs) (line 1429)
    write_call_result_276431 = invoke(stypy.reporting.localization.Localization(__file__, 1429, 8), write_276425, *[result_mod_276429], **kwargs_276430)
    
    
    # Call to recurse(...): (line 1430)
    # Processing the call arguments (line 1430)
    # Getting the type of 'obj' (line 1430)
    obj_276433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 16), 'obj', False)
    # Getting the type of 'obj' (line 1430)
    obj_276434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 21), 'obj', False)
    
    # Obtaining an instance of the builtin type 'dict' (line 1430)
    dict_276435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1430, 26), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 1430)
    
    
    # Obtaining an instance of the builtin type 'list' (line 1430)
    list_276436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1430, 30), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1430)
    
    # Processing the call keyword arguments (line 1430)
    kwargs_276437 = {}
    # Getting the type of 'recurse' (line 1430)
    recurse_276432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 8), 'recurse', False)
    # Calling recurse(args, kwargs) (line 1430)
    recurse_call_result_276438 = invoke(stypy.reporting.localization.Localization(__file__, 1430, 8), recurse_276432, *[obj_276433, obj_276434, dict_276435, list_276436], **kwargs_276437)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'print_cycles(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'print_cycles' in the type store
    # Getting the type of 'stypy_return_type' (line 1366)
    stypy_return_type_276439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_276439)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'print_cycles'
    return stypy_return_type_276439

# Assigning a type to the variable 'print_cycles' (line 1366)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1366, 0), 'print_cycles', print_cycles)
# Declaration of the 'Grouper' class

class Grouper(object, ):
    unicode_276440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1468, (-1)), 'unicode', u"\n    This class provides a lightweight way to group arbitrary objects\n    together into disjoint sets when a full-blown graph data structure\n    would be overkill.\n\n    Objects can be joined using :meth:`join`, tested for connectedness\n    using :meth:`joined`, and all disjoint sets can be retreived by\n    using the object as an iterator.\n\n    The objects being joined must be hashable and weak-referenceable.\n\n    For example:\n\n        >>> from matplotlib.cbook import Grouper\n        >>> class Foo(object):\n        ...     def __init__(self, s):\n        ...         self.s = s\n        ...     def __repr__(self):\n        ...         return self.s\n        ...\n        >>> a, b, c, d, e, f = [Foo(x) for x in 'abcdef']\n        >>> grp = Grouper()\n        >>> grp.join(a, b)\n        >>> grp.join(b, c)\n        >>> grp.join(d, e)\n        >>> sorted(map(tuple, grp))\n        [(a, b, c), (d, e)]\n        >>> grp.joined(a, b)\n        True\n        >>> grp.joined(a, c)\n        True\n        >>> grp.joined(a, d)\n        False\n\n    ")

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        
        # Obtaining an instance of the builtin type 'tuple' (line 1469)
        tuple_276441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1469, 28), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1469)
        
        defaults = [tuple_276441]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1469, 4, False)
        # Assigning a type to the variable 'self' (line 1470)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1470, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Grouper.__init__', ['init'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['init'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Multiple assignment of 2 elements.
        
        # Assigning a Dict to a Attribute (line 1470):
        
        # Obtaining an instance of the builtin type 'dict' (line 1470)
        dict_276442 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1470, 34), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1470)
        
        # Getting the type of 'self' (line 1470)
        self_276443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 18), 'self')
        # Setting the type of the member '_mapping' of a type (line 1470)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1470, 18), self_276443, '_mapping', dict_276442)
        
        # Assigning a Attribute to a Name (line 1470):
        # Getting the type of 'self' (line 1470)
        self_276444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 18), 'self')
        # Obtaining the member '_mapping' of a type (line 1470)
        _mapping_276445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1470, 18), self_276444, '_mapping')
        # Assigning a type to the variable 'mapping' (line 1470)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1470, 8), 'mapping', _mapping_276445)
        
        # Getting the type of 'init' (line 1471)
        init_276446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 17), 'init')
        # Testing the type of a for loop iterable (line 1471)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1471, 8), init_276446)
        # Getting the type of the for loop variable (line 1471)
        for_loop_var_276447 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1471, 8), init_276446)
        # Assigning a type to the variable 'x' (line 1471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1471, 8), 'x', for_loop_var_276447)
        # SSA begins for a for statement (line 1471)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a List to a Subscript (line 1472):
        
        # Assigning a List to a Subscript (line 1472):
        
        # Obtaining an instance of the builtin type 'list' (line 1472)
        list_276448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1472, 30), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1472)
        # Adding element type (line 1472)
        
        # Call to ref(...): (line 1472)
        # Processing the call arguments (line 1472)
        # Getting the type of 'x' (line 1472)
        x_276450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 35), 'x', False)
        # Processing the call keyword arguments (line 1472)
        kwargs_276451 = {}
        # Getting the type of 'ref' (line 1472)
        ref_276449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 31), 'ref', False)
        # Calling ref(args, kwargs) (line 1472)
        ref_call_result_276452 = invoke(stypy.reporting.localization.Localization(__file__, 1472, 31), ref_276449, *[x_276450], **kwargs_276451)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1472, 30), list_276448, ref_call_result_276452)
        
        # Getting the type of 'mapping' (line 1472)
        mapping_276453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 12), 'mapping')
        
        # Call to ref(...): (line 1472)
        # Processing the call arguments (line 1472)
        # Getting the type of 'x' (line 1472)
        x_276455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 24), 'x', False)
        # Processing the call keyword arguments (line 1472)
        kwargs_276456 = {}
        # Getting the type of 'ref' (line 1472)
        ref_276454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 20), 'ref', False)
        # Calling ref(args, kwargs) (line 1472)
        ref_call_result_276457 = invoke(stypy.reporting.localization.Localization(__file__, 1472, 20), ref_276454, *[x_276455], **kwargs_276456)
        
        # Storing an element on a container (line 1472)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1472, 12), mapping_276453, (ref_call_result_276457, list_276448))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __contains__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__contains__'
        module_type_store = module_type_store.open_function_context('__contains__', 1474, 4, False)
        # Assigning a type to the variable 'self' (line 1475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1475, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Grouper.__contains__.__dict__.__setitem__('stypy_localization', localization)
        Grouper.__contains__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Grouper.__contains__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Grouper.__contains__.__dict__.__setitem__('stypy_function_name', 'Grouper.__contains__')
        Grouper.__contains__.__dict__.__setitem__('stypy_param_names_list', ['item'])
        Grouper.__contains__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Grouper.__contains__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Grouper.__contains__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Grouper.__contains__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Grouper.__contains__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Grouper.__contains__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Grouper.__contains__', ['item'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__contains__', localization, ['item'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__contains__(...)' code ##################

        
        
        # Call to ref(...): (line 1475)
        # Processing the call arguments (line 1475)
        # Getting the type of 'item' (line 1475)
        item_276459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 19), 'item', False)
        # Processing the call keyword arguments (line 1475)
        kwargs_276460 = {}
        # Getting the type of 'ref' (line 1475)
        ref_276458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 15), 'ref', False)
        # Calling ref(args, kwargs) (line 1475)
        ref_call_result_276461 = invoke(stypy.reporting.localization.Localization(__file__, 1475, 15), ref_276458, *[item_276459], **kwargs_276460)
        
        # Getting the type of 'self' (line 1475)
        self_276462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 28), 'self')
        # Obtaining the member '_mapping' of a type (line 1475)
        _mapping_276463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1475, 28), self_276462, '_mapping')
        # Applying the binary operator 'in' (line 1475)
        result_contains_276464 = python_operator(stypy.reporting.localization.Localization(__file__, 1475, 15), 'in', ref_call_result_276461, _mapping_276463)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1475, 8), 'stypy_return_type', result_contains_276464)
        
        # ################# End of '__contains__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__contains__' in the type store
        # Getting the type of 'stypy_return_type' (line 1474)
        stypy_return_type_276465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_276465)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__contains__'
        return stypy_return_type_276465


    @norecursion
    def clean(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'clean'
        module_type_store = module_type_store.open_function_context('clean', 1477, 4, False)
        # Assigning a type to the variable 'self' (line 1478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1478, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Grouper.clean.__dict__.__setitem__('stypy_localization', localization)
        Grouper.clean.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Grouper.clean.__dict__.__setitem__('stypy_type_store', module_type_store)
        Grouper.clean.__dict__.__setitem__('stypy_function_name', 'Grouper.clean')
        Grouper.clean.__dict__.__setitem__('stypy_param_names_list', [])
        Grouper.clean.__dict__.__setitem__('stypy_varargs_param_name', None)
        Grouper.clean.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Grouper.clean.__dict__.__setitem__('stypy_call_defaults', defaults)
        Grouper.clean.__dict__.__setitem__('stypy_call_varargs', varargs)
        Grouper.clean.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Grouper.clean.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Grouper.clean', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'clean', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'clean(...)' code ##################

        unicode_276466 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1480, (-1)), 'unicode', u'\n        Clean dead weak references from the dictionary\n        ')
        
        # Assigning a Attribute to a Name (line 1481):
        
        # Assigning a Attribute to a Name (line 1481):
        # Getting the type of 'self' (line 1481)
        self_276467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 18), 'self')
        # Obtaining the member '_mapping' of a type (line 1481)
        _mapping_276468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1481, 18), self_276467, '_mapping')
        # Assigning a type to the variable 'mapping' (line 1481)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1481, 8), 'mapping', _mapping_276468)
        
        # Assigning a ListComp to a Name (line 1482):
        
        # Assigning a ListComp to a Name (line 1482):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'mapping' (line 1482)
        mapping_276475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 34), 'mapping')
        comprehension_276476 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1482, 19), mapping_276475)
        # Assigning a type to the variable 'key' (line 1482)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1482, 19), 'key', comprehension_276476)
        
        
        # Call to key(...): (line 1482)
        # Processing the call keyword arguments (line 1482)
        kwargs_276471 = {}
        # Getting the type of 'key' (line 1482)
        key_276470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 45), 'key', False)
        # Calling key(args, kwargs) (line 1482)
        key_call_result_276472 = invoke(stypy.reporting.localization.Localization(__file__, 1482, 45), key_276470, *[], **kwargs_276471)
        
        # Getting the type of 'None' (line 1482)
        None_276473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 54), 'None')
        # Applying the binary operator 'is' (line 1482)
        result_is__276474 = python_operator(stypy.reporting.localization.Localization(__file__, 1482, 45), 'is', key_call_result_276472, None_276473)
        
        # Getting the type of 'key' (line 1482)
        key_276469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 19), 'key')
        list_276477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1482, 19), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1482, 19), list_276477, key_276469)
        # Assigning a type to the variable 'to_drop' (line 1482)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1482, 8), 'to_drop', list_276477)
        
        # Getting the type of 'to_drop' (line 1483)
        to_drop_276478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 19), 'to_drop')
        # Testing the type of a for loop iterable (line 1483)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1483, 8), to_drop_276478)
        # Getting the type of the for loop variable (line 1483)
        for_loop_var_276479 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1483, 8), to_drop_276478)
        # Assigning a type to the variable 'key' (line 1483)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1483, 8), 'key', for_loop_var_276479)
        # SSA begins for a for statement (line 1483)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 1484):
        
        # Assigning a Call to a Name (line 1484):
        
        # Call to pop(...): (line 1484)
        # Processing the call arguments (line 1484)
        # Getting the type of 'key' (line 1484)
        key_276482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1484, 30), 'key', False)
        # Processing the call keyword arguments (line 1484)
        kwargs_276483 = {}
        # Getting the type of 'mapping' (line 1484)
        mapping_276480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1484, 18), 'mapping', False)
        # Obtaining the member 'pop' of a type (line 1484)
        pop_276481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1484, 18), mapping_276480, 'pop')
        # Calling pop(args, kwargs) (line 1484)
        pop_call_result_276484 = invoke(stypy.reporting.localization.Localization(__file__, 1484, 18), pop_276481, *[key_276482], **kwargs_276483)
        
        # Assigning a type to the variable 'val' (line 1484)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1484, 12), 'val', pop_call_result_276484)
        
        # Call to remove(...): (line 1485)
        # Processing the call arguments (line 1485)
        # Getting the type of 'key' (line 1485)
        key_276487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 23), 'key', False)
        # Processing the call keyword arguments (line 1485)
        kwargs_276488 = {}
        # Getting the type of 'val' (line 1485)
        val_276485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 12), 'val', False)
        # Obtaining the member 'remove' of a type (line 1485)
        remove_276486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1485, 12), val_276485, 'remove')
        # Calling remove(args, kwargs) (line 1485)
        remove_call_result_276489 = invoke(stypy.reporting.localization.Localization(__file__, 1485, 12), remove_276486, *[key_276487], **kwargs_276488)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'clean(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'clean' in the type store
        # Getting the type of 'stypy_return_type' (line 1477)
        stypy_return_type_276490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_276490)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'clean'
        return stypy_return_type_276490


    @norecursion
    def join(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'join'
        module_type_store = module_type_store.open_function_context('join', 1487, 4, False)
        # Assigning a type to the variable 'self' (line 1488)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1488, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Grouper.join.__dict__.__setitem__('stypy_localization', localization)
        Grouper.join.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Grouper.join.__dict__.__setitem__('stypy_type_store', module_type_store)
        Grouper.join.__dict__.__setitem__('stypy_function_name', 'Grouper.join')
        Grouper.join.__dict__.__setitem__('stypy_param_names_list', ['a'])
        Grouper.join.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        Grouper.join.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Grouper.join.__dict__.__setitem__('stypy_call_defaults', defaults)
        Grouper.join.__dict__.__setitem__('stypy_call_varargs', varargs)
        Grouper.join.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Grouper.join.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Grouper.join', ['a'], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'join', localization, ['a'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'join(...)' code ##################

        unicode_276491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1491, (-1)), 'unicode', u'\n        Join given arguments into the same set.  Accepts one or more\n        arguments.\n        ')
        
        # Assigning a Attribute to a Name (line 1492):
        
        # Assigning a Attribute to a Name (line 1492):
        # Getting the type of 'self' (line 1492)
        self_276492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 18), 'self')
        # Obtaining the member '_mapping' of a type (line 1492)
        _mapping_276493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1492, 18), self_276492, '_mapping')
        # Assigning a type to the variable 'mapping' (line 1492)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1492, 8), 'mapping', _mapping_276493)
        
        # Assigning a Call to a Name (line 1493):
        
        # Assigning a Call to a Name (line 1493):
        
        # Call to setdefault(...): (line 1493)
        # Processing the call arguments (line 1493)
        
        # Call to ref(...): (line 1493)
        # Processing the call arguments (line 1493)
        # Getting the type of 'a' (line 1493)
        a_276497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 39), 'a', False)
        # Processing the call keyword arguments (line 1493)
        kwargs_276498 = {}
        # Getting the type of 'ref' (line 1493)
        ref_276496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 35), 'ref', False)
        # Calling ref(args, kwargs) (line 1493)
        ref_call_result_276499 = invoke(stypy.reporting.localization.Localization(__file__, 1493, 35), ref_276496, *[a_276497], **kwargs_276498)
        
        
        # Obtaining an instance of the builtin type 'list' (line 1493)
        list_276500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1493, 43), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1493)
        # Adding element type (line 1493)
        
        # Call to ref(...): (line 1493)
        # Processing the call arguments (line 1493)
        # Getting the type of 'a' (line 1493)
        a_276502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 48), 'a', False)
        # Processing the call keyword arguments (line 1493)
        kwargs_276503 = {}
        # Getting the type of 'ref' (line 1493)
        ref_276501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 44), 'ref', False)
        # Calling ref(args, kwargs) (line 1493)
        ref_call_result_276504 = invoke(stypy.reporting.localization.Localization(__file__, 1493, 44), ref_276501, *[a_276502], **kwargs_276503)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1493, 43), list_276500, ref_call_result_276504)
        
        # Processing the call keyword arguments (line 1493)
        kwargs_276505 = {}
        # Getting the type of 'mapping' (line 1493)
        mapping_276494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 16), 'mapping', False)
        # Obtaining the member 'setdefault' of a type (line 1493)
        setdefault_276495 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1493, 16), mapping_276494, 'setdefault')
        # Calling setdefault(args, kwargs) (line 1493)
        setdefault_call_result_276506 = invoke(stypy.reporting.localization.Localization(__file__, 1493, 16), setdefault_276495, *[ref_call_result_276499, list_276500], **kwargs_276505)
        
        # Assigning a type to the variable 'set_a' (line 1493)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1493, 8), 'set_a', setdefault_call_result_276506)
        
        # Getting the type of 'args' (line 1495)
        args_276507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1495, 19), 'args')
        # Testing the type of a for loop iterable (line 1495)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1495, 8), args_276507)
        # Getting the type of the for loop variable (line 1495)
        for_loop_var_276508 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1495, 8), args_276507)
        # Assigning a type to the variable 'arg' (line 1495)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1495, 8), 'arg', for_loop_var_276508)
        # SSA begins for a for statement (line 1495)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 1496):
        
        # Assigning a Call to a Name (line 1496):
        
        # Call to get(...): (line 1496)
        # Processing the call arguments (line 1496)
        
        # Call to ref(...): (line 1496)
        # Processing the call arguments (line 1496)
        # Getting the type of 'arg' (line 1496)
        arg_276512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 36), 'arg', False)
        # Processing the call keyword arguments (line 1496)
        kwargs_276513 = {}
        # Getting the type of 'ref' (line 1496)
        ref_276511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 32), 'ref', False)
        # Calling ref(args, kwargs) (line 1496)
        ref_call_result_276514 = invoke(stypy.reporting.localization.Localization(__file__, 1496, 32), ref_276511, *[arg_276512], **kwargs_276513)
        
        # Processing the call keyword arguments (line 1496)
        kwargs_276515 = {}
        # Getting the type of 'mapping' (line 1496)
        mapping_276509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 20), 'mapping', False)
        # Obtaining the member 'get' of a type (line 1496)
        get_276510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1496, 20), mapping_276509, 'get')
        # Calling get(args, kwargs) (line 1496)
        get_call_result_276516 = invoke(stypy.reporting.localization.Localization(__file__, 1496, 20), get_276510, *[ref_call_result_276514], **kwargs_276515)
        
        # Assigning a type to the variable 'set_b' (line 1496)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1496, 12), 'set_b', get_call_result_276516)
        
        # Type idiom detected: calculating its left and rigth part (line 1497)
        # Getting the type of 'set_b' (line 1497)
        set_b_276517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 15), 'set_b')
        # Getting the type of 'None' (line 1497)
        None_276518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 24), 'None')
        
        (may_be_276519, more_types_in_union_276520) = may_be_none(set_b_276517, None_276518)

        if may_be_276519:

            if more_types_in_union_276520:
                # Runtime conditional SSA (line 1497)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to append(...): (line 1498)
            # Processing the call arguments (line 1498)
            
            # Call to ref(...): (line 1498)
            # Processing the call arguments (line 1498)
            # Getting the type of 'arg' (line 1498)
            arg_276524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 33), 'arg', False)
            # Processing the call keyword arguments (line 1498)
            kwargs_276525 = {}
            # Getting the type of 'ref' (line 1498)
            ref_276523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 29), 'ref', False)
            # Calling ref(args, kwargs) (line 1498)
            ref_call_result_276526 = invoke(stypy.reporting.localization.Localization(__file__, 1498, 29), ref_276523, *[arg_276524], **kwargs_276525)
            
            # Processing the call keyword arguments (line 1498)
            kwargs_276527 = {}
            # Getting the type of 'set_a' (line 1498)
            set_a_276521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 16), 'set_a', False)
            # Obtaining the member 'append' of a type (line 1498)
            append_276522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1498, 16), set_a_276521, 'append')
            # Calling append(args, kwargs) (line 1498)
            append_call_result_276528 = invoke(stypy.reporting.localization.Localization(__file__, 1498, 16), append_276522, *[ref_call_result_276526], **kwargs_276527)
            
            
            # Assigning a Name to a Subscript (line 1499):
            
            # Assigning a Name to a Subscript (line 1499):
            # Getting the type of 'set_a' (line 1499)
            set_a_276529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1499, 36), 'set_a')
            # Getting the type of 'mapping' (line 1499)
            mapping_276530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1499, 16), 'mapping')
            
            # Call to ref(...): (line 1499)
            # Processing the call arguments (line 1499)
            # Getting the type of 'arg' (line 1499)
            arg_276532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1499, 28), 'arg', False)
            # Processing the call keyword arguments (line 1499)
            kwargs_276533 = {}
            # Getting the type of 'ref' (line 1499)
            ref_276531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1499, 24), 'ref', False)
            # Calling ref(args, kwargs) (line 1499)
            ref_call_result_276534 = invoke(stypy.reporting.localization.Localization(__file__, 1499, 24), ref_276531, *[arg_276532], **kwargs_276533)
            
            # Storing an element on a container (line 1499)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1499, 16), mapping_276530, (ref_call_result_276534, set_a_276529))

            if more_types_in_union_276520:
                # Runtime conditional SSA for else branch (line 1497)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_276519) or more_types_in_union_276520):
            
            
            # Getting the type of 'set_b' (line 1500)
            set_b_276535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 17), 'set_b')
            # Getting the type of 'set_a' (line 1500)
            set_a_276536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 30), 'set_a')
            # Applying the binary operator 'isnot' (line 1500)
            result_is_not_276537 = python_operator(stypy.reporting.localization.Localization(__file__, 1500, 17), 'isnot', set_b_276535, set_a_276536)
            
            # Testing the type of an if condition (line 1500)
            if_condition_276538 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1500, 17), result_is_not_276537)
            # Assigning a type to the variable 'if_condition_276538' (line 1500)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1500, 17), 'if_condition_276538', if_condition_276538)
            # SSA begins for if statement (line 1500)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            
            
            # Call to len(...): (line 1501)
            # Processing the call arguments (line 1501)
            # Getting the type of 'set_b' (line 1501)
            set_b_276540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 23), 'set_b', False)
            # Processing the call keyword arguments (line 1501)
            kwargs_276541 = {}
            # Getting the type of 'len' (line 1501)
            len_276539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 19), 'len', False)
            # Calling len(args, kwargs) (line 1501)
            len_call_result_276542 = invoke(stypy.reporting.localization.Localization(__file__, 1501, 19), len_276539, *[set_b_276540], **kwargs_276541)
            
            
            # Call to len(...): (line 1501)
            # Processing the call arguments (line 1501)
            # Getting the type of 'set_a' (line 1501)
            set_a_276544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 36), 'set_a', False)
            # Processing the call keyword arguments (line 1501)
            kwargs_276545 = {}
            # Getting the type of 'len' (line 1501)
            len_276543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 32), 'len', False)
            # Calling len(args, kwargs) (line 1501)
            len_call_result_276546 = invoke(stypy.reporting.localization.Localization(__file__, 1501, 32), len_276543, *[set_a_276544], **kwargs_276545)
            
            # Applying the binary operator '>' (line 1501)
            result_gt_276547 = python_operator(stypy.reporting.localization.Localization(__file__, 1501, 19), '>', len_call_result_276542, len_call_result_276546)
            
            # Testing the type of an if condition (line 1501)
            if_condition_276548 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1501, 16), result_gt_276547)
            # Assigning a type to the variable 'if_condition_276548' (line 1501)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1501, 16), 'if_condition_276548', if_condition_276548)
            # SSA begins for if statement (line 1501)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Tuple to a Tuple (line 1502):
            
            # Assigning a Name to a Name (line 1502):
            # Getting the type of 'set_b' (line 1502)
            set_b_276549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 35), 'set_b')
            # Assigning a type to the variable 'tuple_assignment_273663' (line 1502)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1502, 20), 'tuple_assignment_273663', set_b_276549)
            
            # Assigning a Name to a Name (line 1502):
            # Getting the type of 'set_a' (line 1502)
            set_a_276550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 42), 'set_a')
            # Assigning a type to the variable 'tuple_assignment_273664' (line 1502)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1502, 20), 'tuple_assignment_273664', set_a_276550)
            
            # Assigning a Name to a Name (line 1502):
            # Getting the type of 'tuple_assignment_273663' (line 1502)
            tuple_assignment_273663_276551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 20), 'tuple_assignment_273663')
            # Assigning a type to the variable 'set_a' (line 1502)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1502, 20), 'set_a', tuple_assignment_273663_276551)
            
            # Assigning a Name to a Name (line 1502):
            # Getting the type of 'tuple_assignment_273664' (line 1502)
            tuple_assignment_273664_276552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 20), 'tuple_assignment_273664')
            # Assigning a type to the variable 'set_b' (line 1502)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1502, 27), 'set_b', tuple_assignment_273664_276552)
            # SSA join for if statement (line 1501)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Call to extend(...): (line 1503)
            # Processing the call arguments (line 1503)
            # Getting the type of 'set_b' (line 1503)
            set_b_276555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 29), 'set_b', False)
            # Processing the call keyword arguments (line 1503)
            kwargs_276556 = {}
            # Getting the type of 'set_a' (line 1503)
            set_a_276553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 16), 'set_a', False)
            # Obtaining the member 'extend' of a type (line 1503)
            extend_276554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1503, 16), set_a_276553, 'extend')
            # Calling extend(args, kwargs) (line 1503)
            extend_call_result_276557 = invoke(stypy.reporting.localization.Localization(__file__, 1503, 16), extend_276554, *[set_b_276555], **kwargs_276556)
            
            
            # Getting the type of 'set_b' (line 1504)
            set_b_276558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1504, 28), 'set_b')
            # Testing the type of a for loop iterable (line 1504)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1504, 16), set_b_276558)
            # Getting the type of the for loop variable (line 1504)
            for_loop_var_276559 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1504, 16), set_b_276558)
            # Assigning a type to the variable 'elem' (line 1504)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1504, 16), 'elem', for_loop_var_276559)
            # SSA begins for a for statement (line 1504)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            # Assigning a Name to a Subscript (line 1505):
            
            # Assigning a Name to a Subscript (line 1505):
            # Getting the type of 'set_a' (line 1505)
            set_a_276560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1505, 36), 'set_a')
            # Getting the type of 'mapping' (line 1505)
            mapping_276561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1505, 20), 'mapping')
            # Getting the type of 'elem' (line 1505)
            elem_276562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1505, 28), 'elem')
            # Storing an element on a container (line 1505)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1505, 20), mapping_276561, (elem_276562, set_a_276560))
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 1500)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_276519 and more_types_in_union_276520):
                # SSA join for if statement (line 1497)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to clean(...): (line 1507)
        # Processing the call keyword arguments (line 1507)
        kwargs_276565 = {}
        # Getting the type of 'self' (line 1507)
        self_276563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 8), 'self', False)
        # Obtaining the member 'clean' of a type (line 1507)
        clean_276564 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1507, 8), self_276563, 'clean')
        # Calling clean(args, kwargs) (line 1507)
        clean_call_result_276566 = invoke(stypy.reporting.localization.Localization(__file__, 1507, 8), clean_276564, *[], **kwargs_276565)
        
        
        # ################# End of 'join(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'join' in the type store
        # Getting the type of 'stypy_return_type' (line 1487)
        stypy_return_type_276567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1487, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_276567)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'join'
        return stypy_return_type_276567


    @norecursion
    def joined(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'joined'
        module_type_store = module_type_store.open_function_context('joined', 1509, 4, False)
        # Assigning a type to the variable 'self' (line 1510)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1510, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Grouper.joined.__dict__.__setitem__('stypy_localization', localization)
        Grouper.joined.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Grouper.joined.__dict__.__setitem__('stypy_type_store', module_type_store)
        Grouper.joined.__dict__.__setitem__('stypy_function_name', 'Grouper.joined')
        Grouper.joined.__dict__.__setitem__('stypy_param_names_list', ['a', 'b'])
        Grouper.joined.__dict__.__setitem__('stypy_varargs_param_name', None)
        Grouper.joined.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Grouper.joined.__dict__.__setitem__('stypy_call_defaults', defaults)
        Grouper.joined.__dict__.__setitem__('stypy_call_varargs', varargs)
        Grouper.joined.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Grouper.joined.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Grouper.joined', ['a', 'b'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'joined', localization, ['a', 'b'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'joined(...)' code ##################

        unicode_276568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1512, (-1)), 'unicode', u'\n        Returns True if *a* and *b* are members of the same set.\n        ')
        
        # Call to clean(...): (line 1513)
        # Processing the call keyword arguments (line 1513)
        kwargs_276571 = {}
        # Getting the type of 'self' (line 1513)
        self_276569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1513, 8), 'self', False)
        # Obtaining the member 'clean' of a type (line 1513)
        clean_276570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1513, 8), self_276569, 'clean')
        # Calling clean(args, kwargs) (line 1513)
        clean_call_result_276572 = invoke(stypy.reporting.localization.Localization(__file__, 1513, 8), clean_276570, *[], **kwargs_276571)
        
        
        # Assigning a Attribute to a Name (line 1515):
        
        # Assigning a Attribute to a Name (line 1515):
        # Getting the type of 'self' (line 1515)
        self_276573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1515, 18), 'self')
        # Obtaining the member '_mapping' of a type (line 1515)
        _mapping_276574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1515, 18), self_276573, '_mapping')
        # Assigning a type to the variable 'mapping' (line 1515)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1515, 8), 'mapping', _mapping_276574)
        
        
        # SSA begins for try-except statement (line 1516)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        
        # Obtaining the type of the subscript
        
        # Call to ref(...): (line 1517)
        # Processing the call arguments (line 1517)
        # Getting the type of 'a' (line 1517)
        a_276576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 31), 'a', False)
        # Processing the call keyword arguments (line 1517)
        kwargs_276577 = {}
        # Getting the type of 'ref' (line 1517)
        ref_276575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 27), 'ref', False)
        # Calling ref(args, kwargs) (line 1517)
        ref_call_result_276578 = invoke(stypy.reporting.localization.Localization(__file__, 1517, 27), ref_276575, *[a_276576], **kwargs_276577)
        
        # Getting the type of 'mapping' (line 1517)
        mapping_276579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 19), 'mapping')
        # Obtaining the member '__getitem__' of a type (line 1517)
        getitem___276580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1517, 19), mapping_276579, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1517)
        subscript_call_result_276581 = invoke(stypy.reporting.localization.Localization(__file__, 1517, 19), getitem___276580, ref_call_result_276578)
        
        
        # Obtaining the type of the subscript
        
        # Call to ref(...): (line 1517)
        # Processing the call arguments (line 1517)
        # Getting the type of 'b' (line 1517)
        b_276583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 50), 'b', False)
        # Processing the call keyword arguments (line 1517)
        kwargs_276584 = {}
        # Getting the type of 'ref' (line 1517)
        ref_276582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 46), 'ref', False)
        # Calling ref(args, kwargs) (line 1517)
        ref_call_result_276585 = invoke(stypy.reporting.localization.Localization(__file__, 1517, 46), ref_276582, *[b_276583], **kwargs_276584)
        
        # Getting the type of 'mapping' (line 1517)
        mapping_276586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 38), 'mapping')
        # Obtaining the member '__getitem__' of a type (line 1517)
        getitem___276587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1517, 38), mapping_276586, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1517)
        subscript_call_result_276588 = invoke(stypy.reporting.localization.Localization(__file__, 1517, 38), getitem___276587, ref_call_result_276585)
        
        # Applying the binary operator 'is' (line 1517)
        result_is__276589 = python_operator(stypy.reporting.localization.Localization(__file__, 1517, 19), 'is', subscript_call_result_276581, subscript_call_result_276588)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1517)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1517, 12), 'stypy_return_type', result_is__276589)
        # SSA branch for the except part of a try statement (line 1516)
        # SSA branch for the except 'KeyError' branch of a try statement (line 1516)
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'False' (line 1519)
        False_276590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1519, 19), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 1519)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1519, 12), 'stypy_return_type', False_276590)
        # SSA join for try-except statement (line 1516)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'joined(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'joined' in the type store
        # Getting the type of 'stypy_return_type' (line 1509)
        stypy_return_type_276591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1509, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_276591)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'joined'
        return stypy_return_type_276591


    @norecursion
    def remove(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'remove'
        module_type_store = module_type_store.open_function_context('remove', 1521, 4, False)
        # Assigning a type to the variable 'self' (line 1522)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1522, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Grouper.remove.__dict__.__setitem__('stypy_localization', localization)
        Grouper.remove.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Grouper.remove.__dict__.__setitem__('stypy_type_store', module_type_store)
        Grouper.remove.__dict__.__setitem__('stypy_function_name', 'Grouper.remove')
        Grouper.remove.__dict__.__setitem__('stypy_param_names_list', ['a'])
        Grouper.remove.__dict__.__setitem__('stypy_varargs_param_name', None)
        Grouper.remove.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Grouper.remove.__dict__.__setitem__('stypy_call_defaults', defaults)
        Grouper.remove.__dict__.__setitem__('stypy_call_varargs', varargs)
        Grouper.remove.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Grouper.remove.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Grouper.remove', ['a'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'remove', localization, ['a'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'remove(...)' code ##################

        
        # Call to clean(...): (line 1522)
        # Processing the call keyword arguments (line 1522)
        kwargs_276594 = {}
        # Getting the type of 'self' (line 1522)
        self_276592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1522, 8), 'self', False)
        # Obtaining the member 'clean' of a type (line 1522)
        clean_276593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1522, 8), self_276592, 'clean')
        # Calling clean(args, kwargs) (line 1522)
        clean_call_result_276595 = invoke(stypy.reporting.localization.Localization(__file__, 1522, 8), clean_276593, *[], **kwargs_276594)
        
        
        # Assigning a Attribute to a Name (line 1524):
        
        # Assigning a Attribute to a Name (line 1524):
        # Getting the type of 'self' (line 1524)
        self_276596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 18), 'self')
        # Obtaining the member '_mapping' of a type (line 1524)
        _mapping_276597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1524, 18), self_276596, '_mapping')
        # Assigning a type to the variable 'mapping' (line 1524)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1524, 8), 'mapping', _mapping_276597)
        
        # Assigning a Call to a Name (line 1525):
        
        # Assigning a Call to a Name (line 1525):
        
        # Call to pop(...): (line 1525)
        # Processing the call arguments (line 1525)
        
        # Call to ref(...): (line 1525)
        # Processing the call arguments (line 1525)
        # Getting the type of 'a' (line 1525)
        a_276601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 31), 'a', False)
        # Processing the call keyword arguments (line 1525)
        kwargs_276602 = {}
        # Getting the type of 'ref' (line 1525)
        ref_276600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 27), 'ref', False)
        # Calling ref(args, kwargs) (line 1525)
        ref_call_result_276603 = invoke(stypy.reporting.localization.Localization(__file__, 1525, 27), ref_276600, *[a_276601], **kwargs_276602)
        
        # Getting the type of 'None' (line 1525)
        None_276604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 35), 'None', False)
        # Processing the call keyword arguments (line 1525)
        kwargs_276605 = {}
        # Getting the type of 'mapping' (line 1525)
        mapping_276598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 15), 'mapping', False)
        # Obtaining the member 'pop' of a type (line 1525)
        pop_276599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1525, 15), mapping_276598, 'pop')
        # Calling pop(args, kwargs) (line 1525)
        pop_call_result_276606 = invoke(stypy.reporting.localization.Localization(__file__, 1525, 15), pop_276599, *[ref_call_result_276603, None_276604], **kwargs_276605)
        
        # Assigning a type to the variable 'seta' (line 1525)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1525, 8), 'seta', pop_call_result_276606)
        
        # Type idiom detected: calculating its left and rigth part (line 1526)
        # Getting the type of 'seta' (line 1526)
        seta_276607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 8), 'seta')
        # Getting the type of 'None' (line 1526)
        None_276608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 23), 'None')
        
        (may_be_276609, more_types_in_union_276610) = may_not_be_none(seta_276607, None_276608)

        if may_be_276609:

            if more_types_in_union_276610:
                # Runtime conditional SSA (line 1526)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to remove(...): (line 1527)
            # Processing the call arguments (line 1527)
            
            # Call to ref(...): (line 1527)
            # Processing the call arguments (line 1527)
            # Getting the type of 'a' (line 1527)
            a_276614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 28), 'a', False)
            # Processing the call keyword arguments (line 1527)
            kwargs_276615 = {}
            # Getting the type of 'ref' (line 1527)
            ref_276613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 24), 'ref', False)
            # Calling ref(args, kwargs) (line 1527)
            ref_call_result_276616 = invoke(stypy.reporting.localization.Localization(__file__, 1527, 24), ref_276613, *[a_276614], **kwargs_276615)
            
            # Processing the call keyword arguments (line 1527)
            kwargs_276617 = {}
            # Getting the type of 'seta' (line 1527)
            seta_276611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 12), 'seta', False)
            # Obtaining the member 'remove' of a type (line 1527)
            remove_276612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1527, 12), seta_276611, 'remove')
            # Calling remove(args, kwargs) (line 1527)
            remove_call_result_276618 = invoke(stypy.reporting.localization.Localization(__file__, 1527, 12), remove_276612, *[ref_call_result_276616], **kwargs_276617)
            

            if more_types_in_union_276610:
                # SSA join for if statement (line 1526)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'remove(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'remove' in the type store
        # Getting the type of 'stypy_return_type' (line 1521)
        stypy_return_type_276619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_276619)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'remove'
        return stypy_return_type_276619


    @norecursion
    def __iter__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__iter__'
        module_type_store = module_type_store.open_function_context('__iter__', 1529, 4, False)
        # Assigning a type to the variable 'self' (line 1530)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1530, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Grouper.__iter__.__dict__.__setitem__('stypy_localization', localization)
        Grouper.__iter__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Grouper.__iter__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Grouper.__iter__.__dict__.__setitem__('stypy_function_name', 'Grouper.__iter__')
        Grouper.__iter__.__dict__.__setitem__('stypy_param_names_list', [])
        Grouper.__iter__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Grouper.__iter__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Grouper.__iter__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Grouper.__iter__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Grouper.__iter__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Grouper.__iter__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Grouper.__iter__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__iter__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__iter__(...)' code ##################

        unicode_276620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1534, (-1)), 'unicode', u'\n        Iterate over each of the disjoint sets as a list.\n\n        The iterator is invalid if interleaved with calls to join().\n        ')
        
        # Call to clean(...): (line 1535)
        # Processing the call keyword arguments (line 1535)
        kwargs_276623 = {}
        # Getting the type of 'self' (line 1535)
        self_276621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 8), 'self', False)
        # Obtaining the member 'clean' of a type (line 1535)
        clean_276622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1535, 8), self_276621, 'clean')
        # Calling clean(args, kwargs) (line 1535)
        clean_call_result_276624 = invoke(stypy.reporting.localization.Localization(__file__, 1535, 8), clean_276622, *[], **kwargs_276623)
        
        
        # Assigning a Call to a Name (line 1536):
        
        # Assigning a Call to a Name (line 1536):
        
        # Call to object(...): (line 1536)
        # Processing the call keyword arguments (line 1536)
        kwargs_276626 = {}
        # Getting the type of 'object' (line 1536)
        object_276625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 16), 'object', False)
        # Calling object(args, kwargs) (line 1536)
        object_call_result_276627 = invoke(stypy.reporting.localization.Localization(__file__, 1536, 16), object_276625, *[], **kwargs_276626)
        
        # Assigning a type to the variable 'token' (line 1536)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1536, 8), 'token', object_call_result_276627)
        
        
        # Call to itervalues(...): (line 1540)
        # Processing the call arguments (line 1540)
        # Getting the type of 'self' (line 1540)
        self_276630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 36), 'self', False)
        # Obtaining the member '_mapping' of a type (line 1540)
        _mapping_276631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1540, 36), self_276630, '_mapping')
        # Processing the call keyword arguments (line 1540)
        kwargs_276632 = {}
        # Getting the type of 'six' (line 1540)
        six_276628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 21), 'six', False)
        # Obtaining the member 'itervalues' of a type (line 1540)
        itervalues_276629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1540, 21), six_276628, 'itervalues')
        # Calling itervalues(args, kwargs) (line 1540)
        itervalues_call_result_276633 = invoke(stypy.reporting.localization.Localization(__file__, 1540, 21), itervalues_276629, *[_mapping_276631], **kwargs_276632)
        
        # Testing the type of a for loop iterable (line 1540)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1540, 8), itervalues_call_result_276633)
        # Getting the type of the for loop variable (line 1540)
        for_loop_var_276634 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1540, 8), itervalues_call_result_276633)
        # Assigning a type to the variable 'group' (line 1540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1540, 8), 'group', for_loop_var_276634)
        # SSA begins for a for statement (line 1540)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        
        # Obtaining the type of the subscript
        int_276635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1541, 21), 'int')
        # Getting the type of 'group' (line 1541)
        group_276636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1541, 15), 'group')
        # Obtaining the member '__getitem__' of a type (line 1541)
        getitem___276637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1541, 15), group_276636, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1541)
        subscript_call_result_276638 = invoke(stypy.reporting.localization.Localization(__file__, 1541, 15), getitem___276637, int_276635)
        
        # Getting the type of 'token' (line 1541)
        token_276639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1541, 32), 'token')
        # Applying the binary operator 'isnot' (line 1541)
        result_is_not_276640 = python_operator(stypy.reporting.localization.Localization(__file__, 1541, 15), 'isnot', subscript_call_result_276638, token_276639)
        
        # Testing the type of an if condition (line 1541)
        if_condition_276641 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1541, 12), result_is_not_276640)
        # Assigning a type to the variable 'if_condition_276641' (line 1541)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1541, 12), 'if_condition_276641', if_condition_276641)
        # SSA begins for if statement (line 1541)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Creating a generator
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'group' (line 1542)
        group_276645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 36), 'group')
        comprehension_276646 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1542, 23), group_276645)
        # Assigning a type to the variable 'x' (line 1542)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1542, 23), 'x', comprehension_276646)
        
        # Call to x(...): (line 1542)
        # Processing the call keyword arguments (line 1542)
        kwargs_276643 = {}
        # Getting the type of 'x' (line 1542)
        x_276642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 23), 'x', False)
        # Calling x(args, kwargs) (line 1542)
        x_call_result_276644 = invoke(stypy.reporting.localization.Localization(__file__, 1542, 23), x_276642, *[], **kwargs_276643)
        
        list_276647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1542, 23), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1542, 23), list_276647, x_call_result_276644)
        GeneratorType_276648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1542, 16), 'GeneratorType')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1542, 16), GeneratorType_276648, list_276647)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1542, 16), 'stypy_return_type', GeneratorType_276648)
        
        # Call to append(...): (line 1543)
        # Processing the call arguments (line 1543)
        # Getting the type of 'token' (line 1543)
        token_276651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 29), 'token', False)
        # Processing the call keyword arguments (line 1543)
        kwargs_276652 = {}
        # Getting the type of 'group' (line 1543)
        group_276649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 16), 'group', False)
        # Obtaining the member 'append' of a type (line 1543)
        append_276650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1543, 16), group_276649, 'append')
        # Calling append(args, kwargs) (line 1543)
        append_call_result_276653 = invoke(stypy.reporting.localization.Localization(__file__, 1543, 16), append_276650, *[token_276651], **kwargs_276652)
        
        # SSA join for if statement (line 1541)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to itervalues(...): (line 1546)
        # Processing the call arguments (line 1546)
        # Getting the type of 'self' (line 1546)
        self_276656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 36), 'self', False)
        # Obtaining the member '_mapping' of a type (line 1546)
        _mapping_276657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1546, 36), self_276656, '_mapping')
        # Processing the call keyword arguments (line 1546)
        kwargs_276658 = {}
        # Getting the type of 'six' (line 1546)
        six_276654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 21), 'six', False)
        # Obtaining the member 'itervalues' of a type (line 1546)
        itervalues_276655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1546, 21), six_276654, 'itervalues')
        # Calling itervalues(args, kwargs) (line 1546)
        itervalues_call_result_276659 = invoke(stypy.reporting.localization.Localization(__file__, 1546, 21), itervalues_276655, *[_mapping_276657], **kwargs_276658)
        
        # Testing the type of a for loop iterable (line 1546)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1546, 8), itervalues_call_result_276659)
        # Getting the type of the for loop variable (line 1546)
        for_loop_var_276660 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1546, 8), itervalues_call_result_276659)
        # Assigning a type to the variable 'group' (line 1546)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1546, 8), 'group', for_loop_var_276660)
        # SSA begins for a for statement (line 1546)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        
        # Obtaining the type of the subscript
        int_276661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1547, 21), 'int')
        # Getting the type of 'group' (line 1547)
        group_276662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1547, 15), 'group')
        # Obtaining the member '__getitem__' of a type (line 1547)
        getitem___276663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1547, 15), group_276662, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1547)
        subscript_call_result_276664 = invoke(stypy.reporting.localization.Localization(__file__, 1547, 15), getitem___276663, int_276661)
        
        # Getting the type of 'token' (line 1547)
        token_276665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1547, 28), 'token')
        # Applying the binary operator 'is' (line 1547)
        result_is__276666 = python_operator(stypy.reporting.localization.Localization(__file__, 1547, 15), 'is', subscript_call_result_276664, token_276665)
        
        # Testing the type of an if condition (line 1547)
        if_condition_276667 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1547, 12), result_is__276666)
        # Assigning a type to the variable 'if_condition_276667' (line 1547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1547, 12), 'if_condition_276667', if_condition_276667)
        # SSA begins for if statement (line 1547)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Deleting a member
        # Getting the type of 'group' (line 1548)
        group_276668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1548, 20), 'group')
        
        # Obtaining the type of the subscript
        int_276669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1548, 26), 'int')
        # Getting the type of 'group' (line 1548)
        group_276670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1548, 20), 'group')
        # Obtaining the member '__getitem__' of a type (line 1548)
        getitem___276671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1548, 20), group_276670, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1548)
        subscript_call_result_276672 = invoke(stypy.reporting.localization.Localization(__file__, 1548, 20), getitem___276671, int_276669)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1548, 16), group_276668, subscript_call_result_276672)
        # SSA join for if statement (line 1547)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__iter__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__iter__' in the type store
        # Getting the type of 'stypy_return_type' (line 1529)
        stypy_return_type_276673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_276673)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__iter__'
        return stypy_return_type_276673


    @norecursion
    def get_siblings(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_siblings'
        module_type_store = module_type_store.open_function_context('get_siblings', 1550, 4, False)
        # Assigning a type to the variable 'self' (line 1551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1551, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Grouper.get_siblings.__dict__.__setitem__('stypy_localization', localization)
        Grouper.get_siblings.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Grouper.get_siblings.__dict__.__setitem__('stypy_type_store', module_type_store)
        Grouper.get_siblings.__dict__.__setitem__('stypy_function_name', 'Grouper.get_siblings')
        Grouper.get_siblings.__dict__.__setitem__('stypy_param_names_list', ['a'])
        Grouper.get_siblings.__dict__.__setitem__('stypy_varargs_param_name', None)
        Grouper.get_siblings.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Grouper.get_siblings.__dict__.__setitem__('stypy_call_defaults', defaults)
        Grouper.get_siblings.__dict__.__setitem__('stypy_call_varargs', varargs)
        Grouper.get_siblings.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Grouper.get_siblings.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Grouper.get_siblings', ['a'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_siblings', localization, ['a'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_siblings(...)' code ##################

        unicode_276674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1553, (-1)), 'unicode', u'\n        Returns all of the items joined with *a*, including itself.\n        ')
        
        # Call to clean(...): (line 1554)
        # Processing the call keyword arguments (line 1554)
        kwargs_276677 = {}
        # Getting the type of 'self' (line 1554)
        self_276675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1554, 8), 'self', False)
        # Obtaining the member 'clean' of a type (line 1554)
        clean_276676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1554, 8), self_276675, 'clean')
        # Calling clean(args, kwargs) (line 1554)
        clean_call_result_276678 = invoke(stypy.reporting.localization.Localization(__file__, 1554, 8), clean_276676, *[], **kwargs_276677)
        
        
        # Assigning a Call to a Name (line 1556):
        
        # Assigning a Call to a Name (line 1556):
        
        # Call to get(...): (line 1556)
        # Processing the call arguments (line 1556)
        
        # Call to ref(...): (line 1556)
        # Processing the call arguments (line 1556)
        # Getting the type of 'a' (line 1556)
        a_276683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 41), 'a', False)
        # Processing the call keyword arguments (line 1556)
        kwargs_276684 = {}
        # Getting the type of 'ref' (line 1556)
        ref_276682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 37), 'ref', False)
        # Calling ref(args, kwargs) (line 1556)
        ref_call_result_276685 = invoke(stypy.reporting.localization.Localization(__file__, 1556, 37), ref_276682, *[a_276683], **kwargs_276684)
        
        
        # Obtaining an instance of the builtin type 'list' (line 1556)
        list_276686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1556, 45), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1556)
        # Adding element type (line 1556)
        
        # Call to ref(...): (line 1556)
        # Processing the call arguments (line 1556)
        # Getting the type of 'a' (line 1556)
        a_276688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 50), 'a', False)
        # Processing the call keyword arguments (line 1556)
        kwargs_276689 = {}
        # Getting the type of 'ref' (line 1556)
        ref_276687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 46), 'ref', False)
        # Calling ref(args, kwargs) (line 1556)
        ref_call_result_276690 = invoke(stypy.reporting.localization.Localization(__file__, 1556, 46), ref_276687, *[a_276688], **kwargs_276689)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1556, 45), list_276686, ref_call_result_276690)
        
        # Processing the call keyword arguments (line 1556)
        kwargs_276691 = {}
        # Getting the type of 'self' (line 1556)
        self_276679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 19), 'self', False)
        # Obtaining the member '_mapping' of a type (line 1556)
        _mapping_276680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1556, 19), self_276679, '_mapping')
        # Obtaining the member 'get' of a type (line 1556)
        get_276681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1556, 19), _mapping_276680, 'get')
        # Calling get(args, kwargs) (line 1556)
        get_call_result_276692 = invoke(stypy.reporting.localization.Localization(__file__, 1556, 19), get_276681, *[ref_call_result_276685, list_276686], **kwargs_276691)
        
        # Assigning a type to the variable 'siblings' (line 1556)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1556, 8), 'siblings', get_call_result_276692)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'siblings' (line 1557)
        siblings_276696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1557, 29), 'siblings')
        comprehension_276697 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1557, 16), siblings_276696)
        # Assigning a type to the variable 'x' (line 1557)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1557, 16), 'x', comprehension_276697)
        
        # Call to x(...): (line 1557)
        # Processing the call keyword arguments (line 1557)
        kwargs_276694 = {}
        # Getting the type of 'x' (line 1557)
        x_276693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1557, 16), 'x', False)
        # Calling x(args, kwargs) (line 1557)
        x_call_result_276695 = invoke(stypy.reporting.localization.Localization(__file__, 1557, 16), x_276693, *[], **kwargs_276694)
        
        list_276698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1557, 16), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1557, 16), list_276698, x_call_result_276695)
        # Assigning a type to the variable 'stypy_return_type' (line 1557)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1557, 8), 'stypy_return_type', list_276698)
        
        # ################# End of 'get_siblings(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_siblings' in the type store
        # Getting the type of 'stypy_return_type' (line 1550)
        stypy_return_type_276699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_276699)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_siblings'
        return stypy_return_type_276699


# Assigning a type to the variable 'Grouper' (line 1433)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1433, 0), 'Grouper', Grouper)

@norecursion
def simple_linear_interpolation(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'simple_linear_interpolation'
    module_type_store = module_type_store.open_function_context('simple_linear_interpolation', 1560, 0, False)
    
    # Passed parameters checking function
    simple_linear_interpolation.stypy_localization = localization
    simple_linear_interpolation.stypy_type_of_self = None
    simple_linear_interpolation.stypy_type_store = module_type_store
    simple_linear_interpolation.stypy_function_name = 'simple_linear_interpolation'
    simple_linear_interpolation.stypy_param_names_list = ['a', 'steps']
    simple_linear_interpolation.stypy_varargs_param_name = None
    simple_linear_interpolation.stypy_kwargs_param_name = None
    simple_linear_interpolation.stypy_call_defaults = defaults
    simple_linear_interpolation.stypy_call_varargs = varargs
    simple_linear_interpolation.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'simple_linear_interpolation', ['a', 'steps'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'simple_linear_interpolation', localization, ['a', 'steps'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'simple_linear_interpolation(...)' code ##################

    
    
    # Getting the type of 'steps' (line 1561)
    steps_276700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 7), 'steps')
    int_276701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1561, 16), 'int')
    # Applying the binary operator '==' (line 1561)
    result_eq_276702 = python_operator(stypy.reporting.localization.Localization(__file__, 1561, 7), '==', steps_276700, int_276701)
    
    # Testing the type of an if condition (line 1561)
    if_condition_276703 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1561, 4), result_eq_276702)
    # Assigning a type to the variable 'if_condition_276703' (line 1561)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1561, 4), 'if_condition_276703', if_condition_276703)
    # SSA begins for if statement (line 1561)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'a' (line 1562)
    a_276704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1562, 15), 'a')
    # Assigning a type to the variable 'stypy_return_type' (line 1562)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1562, 8), 'stypy_return_type', a_276704)
    # SSA join for if statement (line 1561)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1564):
    
    # Assigning a Call to a Name (line 1564):
    
    # Call to int(...): (line 1564)
    # Processing the call arguments (line 1564)
    
    # Call to floor(...): (line 1564)
    # Processing the call arguments (line 1564)
    # Getting the type of 'steps' (line 1564)
    steps_276708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1564, 25), 'steps', False)
    # Processing the call keyword arguments (line 1564)
    kwargs_276709 = {}
    # Getting the type of 'np' (line 1564)
    np_276706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1564, 16), 'np', False)
    # Obtaining the member 'floor' of a type (line 1564)
    floor_276707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1564, 16), np_276706, 'floor')
    # Calling floor(args, kwargs) (line 1564)
    floor_call_result_276710 = invoke(stypy.reporting.localization.Localization(__file__, 1564, 16), floor_276707, *[steps_276708], **kwargs_276709)
    
    # Processing the call keyword arguments (line 1564)
    kwargs_276711 = {}
    # Getting the type of 'int' (line 1564)
    int_276705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1564, 12), 'int', False)
    # Calling int(args, kwargs) (line 1564)
    int_call_result_276712 = invoke(stypy.reporting.localization.Localization(__file__, 1564, 12), int_276705, *[floor_call_result_276710], **kwargs_276711)
    
    # Assigning a type to the variable 'steps' (line 1564)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1564, 4), 'steps', int_call_result_276712)
    
    # Assigning a BinOp to a Name (line 1565):
    
    # Assigning a BinOp to a Name (line 1565):
    
    # Call to len(...): (line 1565)
    # Processing the call arguments (line 1565)
    # Getting the type of 'a' (line 1565)
    a_276714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 23), 'a', False)
    # Processing the call keyword arguments (line 1565)
    kwargs_276715 = {}
    # Getting the type of 'len' (line 1565)
    len_276713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 19), 'len', False)
    # Calling len(args, kwargs) (line 1565)
    len_call_result_276716 = invoke(stypy.reporting.localization.Localization(__file__, 1565, 19), len_276713, *[a_276714], **kwargs_276715)
    
    int_276717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1565, 28), 'int')
    # Applying the binary operator '-' (line 1565)
    result_sub_276718 = python_operator(stypy.reporting.localization.Localization(__file__, 1565, 19), '-', len_call_result_276716, int_276717)
    
    # Getting the type of 'steps' (line 1565)
    steps_276719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 33), 'steps')
    # Applying the binary operator '*' (line 1565)
    result_mul_276720 = python_operator(stypy.reporting.localization.Localization(__file__, 1565, 18), '*', result_sub_276718, steps_276719)
    
    int_276721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1565, 42), 'int')
    # Applying the binary operator '+' (line 1565)
    result_add_276722 = python_operator(stypy.reporting.localization.Localization(__file__, 1565, 17), '+', result_mul_276720, int_276721)
    
    # Assigning a type to the variable 'new_length' (line 1565)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1565, 4), 'new_length', result_add_276722)
    
    # Assigning a Call to a Name (line 1566):
    
    # Assigning a Call to a Name (line 1566):
    
    # Call to list(...): (line 1566)
    # Processing the call arguments (line 1566)
    # Getting the type of 'a' (line 1566)
    a_276724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 21), 'a', False)
    # Obtaining the member 'shape' of a type (line 1566)
    shape_276725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1566, 21), a_276724, 'shape')
    # Processing the call keyword arguments (line 1566)
    kwargs_276726 = {}
    # Getting the type of 'list' (line 1566)
    list_276723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 16), 'list', False)
    # Calling list(args, kwargs) (line 1566)
    list_call_result_276727 = invoke(stypy.reporting.localization.Localization(__file__, 1566, 16), list_276723, *[shape_276725], **kwargs_276726)
    
    # Assigning a type to the variable 'new_shape' (line 1566)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1566, 4), 'new_shape', list_call_result_276727)
    
    # Assigning a Name to a Subscript (line 1567):
    
    # Assigning a Name to a Subscript (line 1567):
    # Getting the type of 'new_length' (line 1567)
    new_length_276728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 19), 'new_length')
    # Getting the type of 'new_shape' (line 1567)
    new_shape_276729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 4), 'new_shape')
    int_276730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1567, 14), 'int')
    # Storing an element on a container (line 1567)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1567, 4), new_shape_276729, (int_276730, new_length_276728))
    
    # Assigning a Call to a Name (line 1568):
    
    # Assigning a Call to a Name (line 1568):
    
    # Call to zeros(...): (line 1568)
    # Processing the call arguments (line 1568)
    # Getting the type of 'new_shape' (line 1568)
    new_shape_276733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1568, 22), 'new_shape', False)
    # Getting the type of 'a' (line 1568)
    a_276734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1568, 33), 'a', False)
    # Obtaining the member 'dtype' of a type (line 1568)
    dtype_276735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1568, 33), a_276734, 'dtype')
    # Processing the call keyword arguments (line 1568)
    kwargs_276736 = {}
    # Getting the type of 'np' (line 1568)
    np_276731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1568, 13), 'np', False)
    # Obtaining the member 'zeros' of a type (line 1568)
    zeros_276732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1568, 13), np_276731, 'zeros')
    # Calling zeros(args, kwargs) (line 1568)
    zeros_call_result_276737 = invoke(stypy.reporting.localization.Localization(__file__, 1568, 13), zeros_276732, *[new_shape_276733, dtype_276735], **kwargs_276736)
    
    # Assigning a type to the variable 'result' (line 1568)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1568, 4), 'result', zeros_call_result_276737)
    
    # Assigning a Subscript to a Subscript (line 1570):
    
    # Assigning a Subscript to a Subscript (line 1570):
    
    # Obtaining the type of the subscript
    int_276738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1570, 18), 'int')
    # Getting the type of 'a' (line 1570)
    a_276739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1570, 16), 'a')
    # Obtaining the member '__getitem__' of a type (line 1570)
    getitem___276740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1570, 16), a_276739, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1570)
    subscript_call_result_276741 = invoke(stypy.reporting.localization.Localization(__file__, 1570, 16), getitem___276740, int_276738)
    
    # Getting the type of 'result' (line 1570)
    result_276742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1570, 4), 'result')
    int_276743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1570, 11), 'int')
    # Storing an element on a container (line 1570)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1570, 4), result_276742, (int_276743, subscript_call_result_276741))
    
    # Assigning a Subscript to a Name (line 1571):
    
    # Assigning a Subscript to a Name (line 1571):
    
    # Obtaining the type of the subscript
    int_276744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1571, 11), 'int')
    int_276745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1571, 13), 'int')
    slice_276746 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1571, 9), int_276744, int_276745, None)
    # Getting the type of 'a' (line 1571)
    a_276747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 9), 'a')
    # Obtaining the member '__getitem__' of a type (line 1571)
    getitem___276748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1571, 9), a_276747, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1571)
    subscript_call_result_276749 = invoke(stypy.reporting.localization.Localization(__file__, 1571, 9), getitem___276748, slice_276746)
    
    # Assigning a type to the variable 'a0' (line 1571)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1571, 4), 'a0', subscript_call_result_276749)
    
    # Assigning a Subscript to a Name (line 1572):
    
    # Assigning a Subscript to a Name (line 1572):
    
    # Obtaining the type of the subscript
    int_276750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1572, 11), 'int')
    slice_276751 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1572, 9), int_276750, None, None)
    # Getting the type of 'a' (line 1572)
    a_276752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1572, 9), 'a')
    # Obtaining the member '__getitem__' of a type (line 1572)
    getitem___276753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1572, 9), a_276752, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1572)
    subscript_call_result_276754 = invoke(stypy.reporting.localization.Localization(__file__, 1572, 9), getitem___276753, slice_276751)
    
    # Assigning a type to the variable 'a1' (line 1572)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1572, 4), 'a1', subscript_call_result_276754)
    
    # Assigning a BinOp to a Name (line 1573):
    
    # Assigning a BinOp to a Name (line 1573):
    # Getting the type of 'a1' (line 1573)
    a1_276755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 14), 'a1')
    # Getting the type of 'a0' (line 1573)
    a0_276756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 19), 'a0')
    # Applying the binary operator '-' (line 1573)
    result_sub_276757 = python_operator(stypy.reporting.localization.Localization(__file__, 1573, 14), '-', a1_276755, a0_276756)
    
    # Getting the type of 'steps' (line 1573)
    steps_276758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 25), 'steps')
    # Applying the binary operator 'div' (line 1573)
    result_div_276759 = python_operator(stypy.reporting.localization.Localization(__file__, 1573, 13), 'div', result_sub_276757, steps_276758)
    
    # Assigning a type to the variable 'delta' (line 1573)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1573, 4), 'delta', result_div_276759)
    
    
    # Call to range(...): (line 1574)
    # Processing the call arguments (line 1574)
    int_276761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1574, 19), 'int')
    # Getting the type of 'steps' (line 1574)
    steps_276762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1574, 22), 'steps', False)
    # Processing the call keyword arguments (line 1574)
    kwargs_276763 = {}
    # Getting the type of 'range' (line 1574)
    range_276760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1574, 13), 'range', False)
    # Calling range(args, kwargs) (line 1574)
    range_call_result_276764 = invoke(stypy.reporting.localization.Localization(__file__, 1574, 13), range_276760, *[int_276761, steps_276762], **kwargs_276763)
    
    # Testing the type of a for loop iterable (line 1574)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1574, 4), range_call_result_276764)
    # Getting the type of the for loop variable (line 1574)
    for_loop_var_276765 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1574, 4), range_call_result_276764)
    # Assigning a type to the variable 'i' (line 1574)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1574, 4), 'i', for_loop_var_276765)
    # SSA begins for a for statement (line 1574)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a BinOp to a Subscript (line 1575):
    
    # Assigning a BinOp to a Subscript (line 1575):
    # Getting the type of 'delta' (line 1575)
    delta_276766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 27), 'delta')
    # Getting the type of 'i' (line 1575)
    i_276767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 35), 'i')
    # Applying the binary operator '*' (line 1575)
    result_mul_276768 = python_operator(stypy.reporting.localization.Localization(__file__, 1575, 27), '*', delta_276766, i_276767)
    
    # Getting the type of 'a0' (line 1575)
    a0_276769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 39), 'a0')
    # Applying the binary operator '+' (line 1575)
    result_add_276770 = python_operator(stypy.reporting.localization.Localization(__file__, 1575, 27), '+', result_mul_276768, a0_276769)
    
    # Getting the type of 'result' (line 1575)
    result_276771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 8), 'result')
    # Getting the type of 'i' (line 1575)
    i_276772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 15), 'i')
    # Getting the type of 'steps' (line 1575)
    steps_276773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 18), 'steps')
    slice_276774 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1575, 8), i_276772, None, steps_276773)
    # Storing an element on a container (line 1575)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1575, 8), result_276771, (slice_276774, result_add_276770))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Subscript (line 1576):
    
    # Assigning a Name to a Subscript (line 1576):
    # Getting the type of 'a1' (line 1576)
    a1_276775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1576, 27), 'a1')
    # Getting the type of 'result' (line 1576)
    result_276776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1576, 4), 'result')
    # Getting the type of 'steps' (line 1576)
    steps_276777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1576, 11), 'steps')
    # Getting the type of 'steps' (line 1576)
    steps_276778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1576, 18), 'steps')
    slice_276779 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1576, 4), steps_276777, None, steps_276778)
    # Storing an element on a container (line 1576)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1576, 4), result_276776, (slice_276779, a1_276775))
    # Getting the type of 'result' (line 1578)
    result_276780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1578, 11), 'result')
    # Assigning a type to the variable 'stypy_return_type' (line 1578)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1578, 4), 'stypy_return_type', result_276780)
    
    # ################# End of 'simple_linear_interpolation(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'simple_linear_interpolation' in the type store
    # Getting the type of 'stypy_return_type' (line 1560)
    stypy_return_type_276781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1560, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_276781)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'simple_linear_interpolation'
    return stypy_return_type_276781

# Assigning a type to the variable 'simple_linear_interpolation' (line 1560)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1560, 0), 'simple_linear_interpolation', simple_linear_interpolation)

@norecursion
def recursive_remove(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'recursive_remove'
    module_type_store = module_type_store.open_function_context('recursive_remove', 1581, 0, False)
    
    # Passed parameters checking function
    recursive_remove.stypy_localization = localization
    recursive_remove.stypy_type_of_self = None
    recursive_remove.stypy_type_store = module_type_store
    recursive_remove.stypy_function_name = 'recursive_remove'
    recursive_remove.stypy_param_names_list = ['path']
    recursive_remove.stypy_varargs_param_name = None
    recursive_remove.stypy_kwargs_param_name = None
    recursive_remove.stypy_call_defaults = defaults
    recursive_remove.stypy_call_varargs = varargs
    recursive_remove.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'recursive_remove', ['path'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'recursive_remove', localization, ['path'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'recursive_remove(...)' code ##################

    
    
    # Call to isdir(...): (line 1583)
    # Processing the call arguments (line 1583)
    # Getting the type of 'path' (line 1583)
    path_276785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 21), 'path', False)
    # Processing the call keyword arguments (line 1583)
    kwargs_276786 = {}
    # Getting the type of 'os' (line 1583)
    os_276782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 7), 'os', False)
    # Obtaining the member 'path' of a type (line 1583)
    path_276783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1583, 7), os_276782, 'path')
    # Obtaining the member 'isdir' of a type (line 1583)
    isdir_276784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1583, 7), path_276783, 'isdir')
    # Calling isdir(args, kwargs) (line 1583)
    isdir_call_result_276787 = invoke(stypy.reporting.localization.Localization(__file__, 1583, 7), isdir_276784, *[path_276785], **kwargs_276786)
    
    # Testing the type of an if condition (line 1583)
    if_condition_276788 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1583, 4), isdir_call_result_276787)
    # Assigning a type to the variable 'if_condition_276788' (line 1583)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1583, 4), 'if_condition_276788', if_condition_276788)
    # SSA begins for if statement (line 1583)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to glob(...): (line 1584)
    # Processing the call arguments (line 1584)
    
    # Call to join(...): (line 1584)
    # Processing the call arguments (line 1584)
    # Getting the type of 'path' (line 1584)
    path_276794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 45), 'path', False)
    unicode_276795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1584, 51), 'unicode', u'*')
    # Processing the call keyword arguments (line 1584)
    kwargs_276796 = {}
    # Getting the type of 'os' (line 1584)
    os_276791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 32), 'os', False)
    # Obtaining the member 'path' of a type (line 1584)
    path_276792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1584, 32), os_276791, 'path')
    # Obtaining the member 'join' of a type (line 1584)
    join_276793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1584, 32), path_276792, 'join')
    # Calling join(args, kwargs) (line 1584)
    join_call_result_276797 = invoke(stypy.reporting.localization.Localization(__file__, 1584, 32), join_276793, *[path_276794, unicode_276795], **kwargs_276796)
    
    # Processing the call keyword arguments (line 1584)
    kwargs_276798 = {}
    # Getting the type of 'glob' (line 1584)
    glob_276789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 22), 'glob', False)
    # Obtaining the member 'glob' of a type (line 1584)
    glob_276790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1584, 22), glob_276789, 'glob')
    # Calling glob(args, kwargs) (line 1584)
    glob_call_result_276799 = invoke(stypy.reporting.localization.Localization(__file__, 1584, 22), glob_276790, *[join_call_result_276797], **kwargs_276798)
    
    
    # Call to glob(...): (line 1585)
    # Processing the call arguments (line 1585)
    
    # Call to join(...): (line 1585)
    # Processing the call arguments (line 1585)
    # Getting the type of 'path' (line 1585)
    path_276805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1585, 45), 'path', False)
    unicode_276806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1585, 51), 'unicode', u'.*')
    # Processing the call keyword arguments (line 1585)
    kwargs_276807 = {}
    # Getting the type of 'os' (line 1585)
    os_276802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1585, 32), 'os', False)
    # Obtaining the member 'path' of a type (line 1585)
    path_276803 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1585, 32), os_276802, 'path')
    # Obtaining the member 'join' of a type (line 1585)
    join_276804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1585, 32), path_276803, 'join')
    # Calling join(args, kwargs) (line 1585)
    join_call_result_276808 = invoke(stypy.reporting.localization.Localization(__file__, 1585, 32), join_276804, *[path_276805, unicode_276806], **kwargs_276807)
    
    # Processing the call keyword arguments (line 1585)
    kwargs_276809 = {}
    # Getting the type of 'glob' (line 1585)
    glob_276800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1585, 22), 'glob', False)
    # Obtaining the member 'glob' of a type (line 1585)
    glob_276801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1585, 22), glob_276800, 'glob')
    # Calling glob(args, kwargs) (line 1585)
    glob_call_result_276810 = invoke(stypy.reporting.localization.Localization(__file__, 1585, 22), glob_276801, *[join_call_result_276808], **kwargs_276809)
    
    # Applying the binary operator '+' (line 1584)
    result_add_276811 = python_operator(stypy.reporting.localization.Localization(__file__, 1584, 22), '+', glob_call_result_276799, glob_call_result_276810)
    
    # Testing the type of a for loop iterable (line 1584)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1584, 8), result_add_276811)
    # Getting the type of the for loop variable (line 1584)
    for_loop_var_276812 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1584, 8), result_add_276811)
    # Assigning a type to the variable 'fname' (line 1584)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1584, 8), 'fname', for_loop_var_276812)
    # SSA begins for a for statement (line 1584)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to isdir(...): (line 1586)
    # Processing the call arguments (line 1586)
    # Getting the type of 'fname' (line 1586)
    fname_276816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1586, 29), 'fname', False)
    # Processing the call keyword arguments (line 1586)
    kwargs_276817 = {}
    # Getting the type of 'os' (line 1586)
    os_276813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1586, 15), 'os', False)
    # Obtaining the member 'path' of a type (line 1586)
    path_276814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1586, 15), os_276813, 'path')
    # Obtaining the member 'isdir' of a type (line 1586)
    isdir_276815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1586, 15), path_276814, 'isdir')
    # Calling isdir(args, kwargs) (line 1586)
    isdir_call_result_276818 = invoke(stypy.reporting.localization.Localization(__file__, 1586, 15), isdir_276815, *[fname_276816], **kwargs_276817)
    
    # Testing the type of an if condition (line 1586)
    if_condition_276819 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1586, 12), isdir_call_result_276818)
    # Assigning a type to the variable 'if_condition_276819' (line 1586)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1586, 12), 'if_condition_276819', if_condition_276819)
    # SSA begins for if statement (line 1586)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to recursive_remove(...): (line 1587)
    # Processing the call arguments (line 1587)
    # Getting the type of 'fname' (line 1587)
    fname_276821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1587, 33), 'fname', False)
    # Processing the call keyword arguments (line 1587)
    kwargs_276822 = {}
    # Getting the type of 'recursive_remove' (line 1587)
    recursive_remove_276820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1587, 16), 'recursive_remove', False)
    # Calling recursive_remove(args, kwargs) (line 1587)
    recursive_remove_call_result_276823 = invoke(stypy.reporting.localization.Localization(__file__, 1587, 16), recursive_remove_276820, *[fname_276821], **kwargs_276822)
    
    
    # Call to removedirs(...): (line 1588)
    # Processing the call arguments (line 1588)
    # Getting the type of 'fname' (line 1588)
    fname_276826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1588, 30), 'fname', False)
    # Processing the call keyword arguments (line 1588)
    kwargs_276827 = {}
    # Getting the type of 'os' (line 1588)
    os_276824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1588, 16), 'os', False)
    # Obtaining the member 'removedirs' of a type (line 1588)
    removedirs_276825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1588, 16), os_276824, 'removedirs')
    # Calling removedirs(args, kwargs) (line 1588)
    removedirs_call_result_276828 = invoke(stypy.reporting.localization.Localization(__file__, 1588, 16), removedirs_276825, *[fname_276826], **kwargs_276827)
    
    # SSA branch for the else part of an if statement (line 1586)
    module_type_store.open_ssa_branch('else')
    
    # Call to remove(...): (line 1590)
    # Processing the call arguments (line 1590)
    # Getting the type of 'fname' (line 1590)
    fname_276831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1590, 26), 'fname', False)
    # Processing the call keyword arguments (line 1590)
    kwargs_276832 = {}
    # Getting the type of 'os' (line 1590)
    os_276829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1590, 16), 'os', False)
    # Obtaining the member 'remove' of a type (line 1590)
    remove_276830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1590, 16), os_276829, 'remove')
    # Calling remove(args, kwargs) (line 1590)
    remove_call_result_276833 = invoke(stypy.reporting.localization.Localization(__file__, 1590, 16), remove_276830, *[fname_276831], **kwargs_276832)
    
    # SSA join for if statement (line 1586)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1583)
    module_type_store.open_ssa_branch('else')
    
    # Call to remove(...): (line 1593)
    # Processing the call arguments (line 1593)
    # Getting the type of 'path' (line 1593)
    path_276836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 18), 'path', False)
    # Processing the call keyword arguments (line 1593)
    kwargs_276837 = {}
    # Getting the type of 'os' (line 1593)
    os_276834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 8), 'os', False)
    # Obtaining the member 'remove' of a type (line 1593)
    remove_276835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1593, 8), os_276834, 'remove')
    # Calling remove(args, kwargs) (line 1593)
    remove_call_result_276838 = invoke(stypy.reporting.localization.Localization(__file__, 1593, 8), remove_276835, *[path_276836], **kwargs_276837)
    
    # SSA join for if statement (line 1583)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'recursive_remove(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'recursive_remove' in the type store
    # Getting the type of 'stypy_return_type' (line 1581)
    stypy_return_type_276839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_276839)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'recursive_remove'
    return stypy_return_type_276839

# Assigning a type to the variable 'recursive_remove' (line 1581)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1581, 0), 'recursive_remove', recursive_remove)

@norecursion
def delete_masked_points(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'delete_masked_points'
    module_type_store = module_type_store.open_function_context('delete_masked_points', 1596, 0, False)
    
    # Passed parameters checking function
    delete_masked_points.stypy_localization = localization
    delete_masked_points.stypy_type_of_self = None
    delete_masked_points.stypy_type_store = module_type_store
    delete_masked_points.stypy_function_name = 'delete_masked_points'
    delete_masked_points.stypy_param_names_list = []
    delete_masked_points.stypy_varargs_param_name = 'args'
    delete_masked_points.stypy_kwargs_param_name = None
    delete_masked_points.stypy_call_defaults = defaults
    delete_masked_points.stypy_call_varargs = varargs
    delete_masked_points.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'delete_masked_points', [], 'args', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'delete_masked_points', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'delete_masked_points(...)' code ##################

    unicode_276840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1627, (-1)), 'unicode', u'\n    Find all masked and/or non-finite points in a set of arguments,\n    and return the arguments with only the unmasked points remaining.\n\n    Arguments can be in any of 5 categories:\n\n    1) 1-D masked arrays\n    2) 1-D ndarrays\n    3) ndarrays with more than one dimension\n    4) other non-string iterables\n    5) anything else\n\n    The first argument must be in one of the first four categories;\n    any argument with a length differing from that of the first\n    argument (and hence anything in category 5) then will be\n    passed through unchanged.\n\n    Masks are obtained from all arguments of the correct length\n    in categories 1, 2, and 4; a point is bad if masked in a masked\n    array or if it is a nan or inf.  No attempt is made to\n    extract a mask from categories 2, 3, and 4 if :meth:`np.isfinite`\n    does not yield a Boolean array.\n\n    All input arguments that are not passed unchanged are returned\n    as ndarrays after removing the points or rows corresponding to\n    masks in any of the arguments.\n\n    A vastly simpler version of this function was originally\n    written as a helper for Axes.scatter().\n\n    ')
    
    
    
    # Call to len(...): (line 1628)
    # Processing the call arguments (line 1628)
    # Getting the type of 'args' (line 1628)
    args_276842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1628, 15), 'args', False)
    # Processing the call keyword arguments (line 1628)
    kwargs_276843 = {}
    # Getting the type of 'len' (line 1628)
    len_276841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1628, 11), 'len', False)
    # Calling len(args, kwargs) (line 1628)
    len_call_result_276844 = invoke(stypy.reporting.localization.Localization(__file__, 1628, 11), len_276841, *[args_276842], **kwargs_276843)
    
    # Applying the 'not' unary operator (line 1628)
    result_not__276845 = python_operator(stypy.reporting.localization.Localization(__file__, 1628, 7), 'not', len_call_result_276844)
    
    # Testing the type of an if condition (line 1628)
    if_condition_276846 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1628, 4), result_not__276845)
    # Assigning a type to the variable 'if_condition_276846' (line 1628)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1628, 4), 'if_condition_276846', if_condition_276846)
    # SSA begins for if statement (line 1628)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1629)
    tuple_276847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1629, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1629)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1629)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1629, 8), 'stypy_return_type', tuple_276847)
    # SSA join for if statement (line 1628)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Call to isinstance(...): (line 1630)
    # Processing the call arguments (line 1630)
    
    # Obtaining the type of the subscript
    int_276849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1630, 24), 'int')
    # Getting the type of 'args' (line 1630)
    args_276850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 19), 'args', False)
    # Obtaining the member '__getitem__' of a type (line 1630)
    getitem___276851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1630, 19), args_276850, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1630)
    subscript_call_result_276852 = invoke(stypy.reporting.localization.Localization(__file__, 1630, 19), getitem___276851, int_276849)
    
    # Getting the type of 'six' (line 1630)
    six_276853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 28), 'six', False)
    # Obtaining the member 'string_types' of a type (line 1630)
    string_types_276854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1630, 28), six_276853, 'string_types')
    # Processing the call keyword arguments (line 1630)
    kwargs_276855 = {}
    # Getting the type of 'isinstance' (line 1630)
    isinstance_276848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 8), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1630)
    isinstance_call_result_276856 = invoke(stypy.reporting.localization.Localization(__file__, 1630, 8), isinstance_276848, *[subscript_call_result_276852, string_types_276854], **kwargs_276855)
    
    
    
    # Call to iterable(...): (line 1630)
    # Processing the call arguments (line 1630)
    
    # Obtaining the type of the subscript
    int_276858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1630, 67), 'int')
    # Getting the type of 'args' (line 1630)
    args_276859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 62), 'args', False)
    # Obtaining the member '__getitem__' of a type (line 1630)
    getitem___276860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1630, 62), args_276859, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1630)
    subscript_call_result_276861 = invoke(stypy.reporting.localization.Localization(__file__, 1630, 62), getitem___276860, int_276858)
    
    # Processing the call keyword arguments (line 1630)
    kwargs_276862 = {}
    # Getting the type of 'iterable' (line 1630)
    iterable_276857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 53), 'iterable', False)
    # Calling iterable(args, kwargs) (line 1630)
    iterable_call_result_276863 = invoke(stypy.reporting.localization.Localization(__file__, 1630, 53), iterable_276857, *[subscript_call_result_276861], **kwargs_276862)
    
    # Applying the 'not' unary operator (line 1630)
    result_not__276864 = python_operator(stypy.reporting.localization.Localization(__file__, 1630, 49), 'not', iterable_call_result_276863)
    
    # Applying the binary operator 'or' (line 1630)
    result_or_keyword_276865 = python_operator(stypy.reporting.localization.Localization(__file__, 1630, 8), 'or', isinstance_call_result_276856, result_not__276864)
    
    # Testing the type of an if condition (line 1630)
    if_condition_276866 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1630, 4), result_or_keyword_276865)
    # Assigning a type to the variable 'if_condition_276866' (line 1630)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1630, 4), 'if_condition_276866', if_condition_276866)
    # SSA begins for if statement (line 1630)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1631)
    # Processing the call arguments (line 1631)
    unicode_276868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1631, 25), 'unicode', u'First argument must be a sequence')
    # Processing the call keyword arguments (line 1631)
    kwargs_276869 = {}
    # Getting the type of 'ValueError' (line 1631)
    ValueError_276867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1631, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1631)
    ValueError_call_result_276870 = invoke(stypy.reporting.localization.Localization(__file__, 1631, 14), ValueError_276867, *[unicode_276868], **kwargs_276869)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1631, 8), ValueError_call_result_276870, 'raise parameter', BaseException)
    # SSA join for if statement (line 1630)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1632):
    
    # Assigning a Call to a Name (line 1632):
    
    # Call to len(...): (line 1632)
    # Processing the call arguments (line 1632)
    
    # Obtaining the type of the subscript
    int_276872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1632, 21), 'int')
    # Getting the type of 'args' (line 1632)
    args_276873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1632, 16), 'args', False)
    # Obtaining the member '__getitem__' of a type (line 1632)
    getitem___276874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1632, 16), args_276873, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1632)
    subscript_call_result_276875 = invoke(stypy.reporting.localization.Localization(__file__, 1632, 16), getitem___276874, int_276872)
    
    # Processing the call keyword arguments (line 1632)
    kwargs_276876 = {}
    # Getting the type of 'len' (line 1632)
    len_276871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1632, 12), 'len', False)
    # Calling len(args, kwargs) (line 1632)
    len_call_result_276877 = invoke(stypy.reporting.localization.Localization(__file__, 1632, 12), len_276871, *[subscript_call_result_276875], **kwargs_276876)
    
    # Assigning a type to the variable 'nrecs' (line 1632)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1632, 4), 'nrecs', len_call_result_276877)
    
    # Assigning a List to a Name (line 1633):
    
    # Assigning a List to a Name (line 1633):
    
    # Obtaining an instance of the builtin type 'list' (line 1633)
    list_276878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1633, 12), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1633)
    
    # Assigning a type to the variable 'margs' (line 1633)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1633, 4), 'margs', list_276878)
    
    # Assigning a BinOp to a Name (line 1634):
    
    # Assigning a BinOp to a Name (line 1634):
    
    # Obtaining an instance of the builtin type 'list' (line 1634)
    list_276879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1634, 14), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1634)
    # Adding element type (line 1634)
    # Getting the type of 'False' (line 1634)
    False_276880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 15), 'False')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1634, 14), list_276879, False_276880)
    
    
    # Call to len(...): (line 1634)
    # Processing the call arguments (line 1634)
    # Getting the type of 'args' (line 1634)
    args_276882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 28), 'args', False)
    # Processing the call keyword arguments (line 1634)
    kwargs_276883 = {}
    # Getting the type of 'len' (line 1634)
    len_276881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 24), 'len', False)
    # Calling len(args, kwargs) (line 1634)
    len_call_result_276884 = invoke(stypy.reporting.localization.Localization(__file__, 1634, 24), len_276881, *[args_276882], **kwargs_276883)
    
    # Applying the binary operator '*' (line 1634)
    result_mul_276885 = python_operator(stypy.reporting.localization.Localization(__file__, 1634, 14), '*', list_276879, len_call_result_276884)
    
    # Assigning a type to the variable 'seqlist' (line 1634)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1634, 4), 'seqlist', result_mul_276885)
    
    
    # Call to enumerate(...): (line 1635)
    # Processing the call arguments (line 1635)
    # Getting the type of 'args' (line 1635)
    args_276887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1635, 26), 'args', False)
    # Processing the call keyword arguments (line 1635)
    kwargs_276888 = {}
    # Getting the type of 'enumerate' (line 1635)
    enumerate_276886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1635, 16), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 1635)
    enumerate_call_result_276889 = invoke(stypy.reporting.localization.Localization(__file__, 1635, 16), enumerate_276886, *[args_276887], **kwargs_276888)
    
    # Testing the type of a for loop iterable (line 1635)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1635, 4), enumerate_call_result_276889)
    # Getting the type of the for loop variable (line 1635)
    for_loop_var_276890 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1635, 4), enumerate_call_result_276889)
    # Assigning a type to the variable 'i' (line 1635)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1635, 4), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1635, 4), for_loop_var_276890))
    # Assigning a type to the variable 'x' (line 1635)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1635, 4), 'x', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1635, 4), for_loop_var_276890))
    # SSA begins for a for statement (line 1635)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Evaluating a boolean operation
    
    
    # Call to isinstance(...): (line 1636)
    # Processing the call arguments (line 1636)
    # Getting the type of 'x' (line 1636)
    x_276892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1636, 27), 'x', False)
    # Getting the type of 'six' (line 1636)
    six_276893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1636, 30), 'six', False)
    # Obtaining the member 'string_types' of a type (line 1636)
    string_types_276894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1636, 30), six_276893, 'string_types')
    # Processing the call keyword arguments (line 1636)
    kwargs_276895 = {}
    # Getting the type of 'isinstance' (line 1636)
    isinstance_276891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1636, 16), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1636)
    isinstance_call_result_276896 = invoke(stypy.reporting.localization.Localization(__file__, 1636, 16), isinstance_276891, *[x_276892, string_types_276894], **kwargs_276895)
    
    # Applying the 'not' unary operator (line 1636)
    result_not__276897 = python_operator(stypy.reporting.localization.Localization(__file__, 1636, 12), 'not', isinstance_call_result_276896)
    
    
    # Call to iterable(...): (line 1636)
    # Processing the call arguments (line 1636)
    # Getting the type of 'x' (line 1636)
    x_276899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1636, 61), 'x', False)
    # Processing the call keyword arguments (line 1636)
    kwargs_276900 = {}
    # Getting the type of 'iterable' (line 1636)
    iterable_276898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1636, 52), 'iterable', False)
    # Calling iterable(args, kwargs) (line 1636)
    iterable_call_result_276901 = invoke(stypy.reporting.localization.Localization(__file__, 1636, 52), iterable_276898, *[x_276899], **kwargs_276900)
    
    # Applying the binary operator 'and' (line 1636)
    result_and_keyword_276902 = python_operator(stypy.reporting.localization.Localization(__file__, 1636, 12), 'and', result_not__276897, iterable_call_result_276901)
    
    
    # Call to len(...): (line 1637)
    # Processing the call arguments (line 1637)
    # Getting the type of 'x' (line 1637)
    x_276904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 24), 'x', False)
    # Processing the call keyword arguments (line 1637)
    kwargs_276905 = {}
    # Getting the type of 'len' (line 1637)
    len_276903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 20), 'len', False)
    # Calling len(args, kwargs) (line 1637)
    len_call_result_276906 = invoke(stypy.reporting.localization.Localization(__file__, 1637, 20), len_276903, *[x_276904], **kwargs_276905)
    
    # Getting the type of 'nrecs' (line 1637)
    nrecs_276907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 30), 'nrecs')
    # Applying the binary operator '==' (line 1637)
    result_eq_276908 = python_operator(stypy.reporting.localization.Localization(__file__, 1637, 20), '==', len_call_result_276906, nrecs_276907)
    
    # Applying the binary operator 'and' (line 1636)
    result_and_keyword_276909 = python_operator(stypy.reporting.localization.Localization(__file__, 1636, 12), 'and', result_and_keyword_276902, result_eq_276908)
    
    # Testing the type of an if condition (line 1636)
    if_condition_276910 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1636, 8), result_and_keyword_276909)
    # Assigning a type to the variable 'if_condition_276910' (line 1636)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1636, 8), 'if_condition_276910', if_condition_276910)
    # SSA begins for if statement (line 1636)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Subscript (line 1638):
    
    # Assigning a Name to a Subscript (line 1638):
    # Getting the type of 'True' (line 1638)
    True_276911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 25), 'True')
    # Getting the type of 'seqlist' (line 1638)
    seqlist_276912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 12), 'seqlist')
    # Getting the type of 'i' (line 1638)
    i_276913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 20), 'i')
    # Storing an element on a container (line 1638)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1638, 12), seqlist_276912, (i_276913, True_276911))
    
    
    # Call to isinstance(...): (line 1639)
    # Processing the call arguments (line 1639)
    # Getting the type of 'x' (line 1639)
    x_276915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 26), 'x', False)
    # Getting the type of 'np' (line 1639)
    np_276916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 29), 'np', False)
    # Obtaining the member 'ma' of a type (line 1639)
    ma_276917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1639, 29), np_276916, 'ma')
    # Obtaining the member 'MaskedArray' of a type (line 1639)
    MaskedArray_276918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1639, 29), ma_276917, 'MaskedArray')
    # Processing the call keyword arguments (line 1639)
    kwargs_276919 = {}
    # Getting the type of 'isinstance' (line 1639)
    isinstance_276914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 15), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1639)
    isinstance_call_result_276920 = invoke(stypy.reporting.localization.Localization(__file__, 1639, 15), isinstance_276914, *[x_276915, MaskedArray_276918], **kwargs_276919)
    
    # Testing the type of an if condition (line 1639)
    if_condition_276921 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1639, 12), isinstance_call_result_276920)
    # Assigning a type to the variable 'if_condition_276921' (line 1639)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1639, 12), 'if_condition_276921', if_condition_276921)
    # SSA begins for if statement (line 1639)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'x' (line 1640)
    x_276922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 19), 'x')
    # Obtaining the member 'ndim' of a type (line 1640)
    ndim_276923 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1640, 19), x_276922, 'ndim')
    int_276924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1640, 28), 'int')
    # Applying the binary operator '>' (line 1640)
    result_gt_276925 = python_operator(stypy.reporting.localization.Localization(__file__, 1640, 19), '>', ndim_276923, int_276924)
    
    # Testing the type of an if condition (line 1640)
    if_condition_276926 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1640, 16), result_gt_276925)
    # Assigning a type to the variable 'if_condition_276926' (line 1640)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1640, 16), 'if_condition_276926', if_condition_276926)
    # SSA begins for if statement (line 1640)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1641)
    # Processing the call arguments (line 1641)
    unicode_276928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1641, 37), 'unicode', u'Masked arrays must be 1-D')
    # Processing the call keyword arguments (line 1641)
    kwargs_276929 = {}
    # Getting the type of 'ValueError' (line 1641)
    ValueError_276927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 26), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1641)
    ValueError_call_result_276930 = invoke(stypy.reporting.localization.Localization(__file__, 1641, 26), ValueError_276927, *[unicode_276928], **kwargs_276929)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1641, 20), ValueError_call_result_276930, 'raise parameter', BaseException)
    # SSA join for if statement (line 1640)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1639)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1643):
    
    # Assigning a Call to a Name (line 1643):
    
    # Call to asarray(...): (line 1643)
    # Processing the call arguments (line 1643)
    # Getting the type of 'x' (line 1643)
    x_276933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1643, 31), 'x', False)
    # Processing the call keyword arguments (line 1643)
    kwargs_276934 = {}
    # Getting the type of 'np' (line 1643)
    np_276931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1643, 20), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1643)
    asarray_276932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1643, 20), np_276931, 'asarray')
    # Calling asarray(args, kwargs) (line 1643)
    asarray_call_result_276935 = invoke(stypy.reporting.localization.Localization(__file__, 1643, 20), asarray_276932, *[x_276933], **kwargs_276934)
    
    # Assigning a type to the variable 'x' (line 1643)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1643, 16), 'x', asarray_call_result_276935)
    # SSA join for if statement (line 1639)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1636)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to append(...): (line 1644)
    # Processing the call arguments (line 1644)
    # Getting the type of 'x' (line 1644)
    x_276938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1644, 21), 'x', False)
    # Processing the call keyword arguments (line 1644)
    kwargs_276939 = {}
    # Getting the type of 'margs' (line 1644)
    margs_276936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1644, 8), 'margs', False)
    # Obtaining the member 'append' of a type (line 1644)
    append_276937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1644, 8), margs_276936, 'append')
    # Calling append(args, kwargs) (line 1644)
    append_call_result_276940 = invoke(stypy.reporting.localization.Localization(__file__, 1644, 8), append_276937, *[x_276938], **kwargs_276939)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a List to a Name (line 1645):
    
    # Assigning a List to a Name (line 1645):
    
    # Obtaining an instance of the builtin type 'list' (line 1645)
    list_276941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1645, 12), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1645)
    
    # Assigning a type to the variable 'masks' (line 1645)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1645, 4), 'masks', list_276941)
    
    
    # Call to enumerate(...): (line 1646)
    # Processing the call arguments (line 1646)
    # Getting the type of 'margs' (line 1646)
    margs_276943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 26), 'margs', False)
    # Processing the call keyword arguments (line 1646)
    kwargs_276944 = {}
    # Getting the type of 'enumerate' (line 1646)
    enumerate_276942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 16), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 1646)
    enumerate_call_result_276945 = invoke(stypy.reporting.localization.Localization(__file__, 1646, 16), enumerate_276942, *[margs_276943], **kwargs_276944)
    
    # Testing the type of a for loop iterable (line 1646)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1646, 4), enumerate_call_result_276945)
    # Getting the type of the for loop variable (line 1646)
    for_loop_var_276946 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1646, 4), enumerate_call_result_276945)
    # Assigning a type to the variable 'i' (line 1646)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1646, 4), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1646, 4), for_loop_var_276946))
    # Assigning a type to the variable 'x' (line 1646)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1646, 4), 'x', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1646, 4), for_loop_var_276946))
    # SSA begins for a for statement (line 1646)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1647)
    i_276947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 19), 'i')
    # Getting the type of 'seqlist' (line 1647)
    seqlist_276948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 11), 'seqlist')
    # Obtaining the member '__getitem__' of a type (line 1647)
    getitem___276949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1647, 11), seqlist_276948, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1647)
    subscript_call_result_276950 = invoke(stypy.reporting.localization.Localization(__file__, 1647, 11), getitem___276949, i_276947)
    
    # Testing the type of an if condition (line 1647)
    if_condition_276951 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1647, 8), subscript_call_result_276950)
    # Assigning a type to the variable 'if_condition_276951' (line 1647)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1647, 8), 'if_condition_276951', if_condition_276951)
    # SSA begins for if statement (line 1647)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'x' (line 1648)
    x_276952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 15), 'x')
    # Obtaining the member 'ndim' of a type (line 1648)
    ndim_276953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1648, 15), x_276952, 'ndim')
    int_276954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1648, 24), 'int')
    # Applying the binary operator '>' (line 1648)
    result_gt_276955 = python_operator(stypy.reporting.localization.Localization(__file__, 1648, 15), '>', ndim_276953, int_276954)
    
    # Testing the type of an if condition (line 1648)
    if_condition_276956 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1648, 12), result_gt_276955)
    # Assigning a type to the variable 'if_condition_276956' (line 1648)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1648, 12), 'if_condition_276956', if_condition_276956)
    # SSA begins for if statement (line 1648)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 1648)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to isinstance(...): (line 1650)
    # Processing the call arguments (line 1650)
    # Getting the type of 'x' (line 1650)
    x_276958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 26), 'x', False)
    # Getting the type of 'np' (line 1650)
    np_276959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 29), 'np', False)
    # Obtaining the member 'ma' of a type (line 1650)
    ma_276960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1650, 29), np_276959, 'ma')
    # Obtaining the member 'MaskedArray' of a type (line 1650)
    MaskedArray_276961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1650, 29), ma_276960, 'MaskedArray')
    # Processing the call keyword arguments (line 1650)
    kwargs_276962 = {}
    # Getting the type of 'isinstance' (line 1650)
    isinstance_276957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 15), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1650)
    isinstance_call_result_276963 = invoke(stypy.reporting.localization.Localization(__file__, 1650, 15), isinstance_276957, *[x_276958, MaskedArray_276961], **kwargs_276962)
    
    # Testing the type of an if condition (line 1650)
    if_condition_276964 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1650, 12), isinstance_call_result_276963)
    # Assigning a type to the variable 'if_condition_276964' (line 1650)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1650, 12), 'if_condition_276964', if_condition_276964)
    # SSA begins for if statement (line 1650)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 1651)
    # Processing the call arguments (line 1651)
    
    
    # Call to getmaskarray(...): (line 1651)
    # Processing the call arguments (line 1651)
    # Getting the type of 'x' (line 1651)
    x_276970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 49), 'x', False)
    # Processing the call keyword arguments (line 1651)
    kwargs_276971 = {}
    # Getting the type of 'np' (line 1651)
    np_276967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 30), 'np', False)
    # Obtaining the member 'ma' of a type (line 1651)
    ma_276968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1651, 30), np_276967, 'ma')
    # Obtaining the member 'getmaskarray' of a type (line 1651)
    getmaskarray_276969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1651, 30), ma_276968, 'getmaskarray')
    # Calling getmaskarray(args, kwargs) (line 1651)
    getmaskarray_call_result_276972 = invoke(stypy.reporting.localization.Localization(__file__, 1651, 30), getmaskarray_276969, *[x_276970], **kwargs_276971)
    
    # Applying the '~' unary operator (line 1651)
    result_inv_276973 = python_operator(stypy.reporting.localization.Localization(__file__, 1651, 29), '~', getmaskarray_call_result_276972)
    
    # Processing the call keyword arguments (line 1651)
    kwargs_276974 = {}
    # Getting the type of 'masks' (line 1651)
    masks_276965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 16), 'masks', False)
    # Obtaining the member 'append' of a type (line 1651)
    append_276966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1651, 16), masks_276965, 'append')
    # Calling append(args, kwargs) (line 1651)
    append_call_result_276975 = invoke(stypy.reporting.localization.Localization(__file__, 1651, 16), append_276966, *[result_inv_276973], **kwargs_276974)
    
    
    # Assigning a Attribute to a Name (line 1652):
    
    # Assigning a Attribute to a Name (line 1652):
    # Getting the type of 'x' (line 1652)
    x_276976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 21), 'x')
    # Obtaining the member 'data' of a type (line 1652)
    data_276977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1652, 21), x_276976, 'data')
    # Assigning a type to the variable 'xd' (line 1652)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1652, 16), 'xd', data_276977)
    # SSA branch for the else part of an if statement (line 1650)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 1654):
    
    # Assigning a Name to a Name (line 1654):
    # Getting the type of 'x' (line 1654)
    x_276978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 21), 'x')
    # Assigning a type to the variable 'xd' (line 1654)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1654, 16), 'xd', x_276978)
    # SSA join for if statement (line 1650)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 1655)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 1656):
    
    # Assigning a Call to a Name (line 1656):
    
    # Call to isfinite(...): (line 1656)
    # Processing the call arguments (line 1656)
    # Getting the type of 'xd' (line 1656)
    xd_276981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1656, 35), 'xd', False)
    # Processing the call keyword arguments (line 1656)
    kwargs_276982 = {}
    # Getting the type of 'np' (line 1656)
    np_276979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1656, 23), 'np', False)
    # Obtaining the member 'isfinite' of a type (line 1656)
    isfinite_276980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1656, 23), np_276979, 'isfinite')
    # Calling isfinite(args, kwargs) (line 1656)
    isfinite_call_result_276983 = invoke(stypy.reporting.localization.Localization(__file__, 1656, 23), isfinite_276980, *[xd_276981], **kwargs_276982)
    
    # Assigning a type to the variable 'mask' (line 1656)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1656, 16), 'mask', isfinite_call_result_276983)
    
    
    # Call to isinstance(...): (line 1657)
    # Processing the call arguments (line 1657)
    # Getting the type of 'mask' (line 1657)
    mask_276985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 30), 'mask', False)
    # Getting the type of 'np' (line 1657)
    np_276986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 36), 'np', False)
    # Obtaining the member 'ndarray' of a type (line 1657)
    ndarray_276987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1657, 36), np_276986, 'ndarray')
    # Processing the call keyword arguments (line 1657)
    kwargs_276988 = {}
    # Getting the type of 'isinstance' (line 1657)
    isinstance_276984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 19), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1657)
    isinstance_call_result_276989 = invoke(stypy.reporting.localization.Localization(__file__, 1657, 19), isinstance_276984, *[mask_276985, ndarray_276987], **kwargs_276988)
    
    # Testing the type of an if condition (line 1657)
    if_condition_276990 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1657, 16), isinstance_call_result_276989)
    # Assigning a type to the variable 'if_condition_276990' (line 1657)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1657, 16), 'if_condition_276990', if_condition_276990)
    # SSA begins for if statement (line 1657)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 1658)
    # Processing the call arguments (line 1658)
    # Getting the type of 'mask' (line 1658)
    mask_276993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 33), 'mask', False)
    # Processing the call keyword arguments (line 1658)
    kwargs_276994 = {}
    # Getting the type of 'masks' (line 1658)
    masks_276991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 20), 'masks', False)
    # Obtaining the member 'append' of a type (line 1658)
    append_276992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1658, 20), masks_276991, 'append')
    # Calling append(args, kwargs) (line 1658)
    append_call_result_276995 = invoke(stypy.reporting.localization.Localization(__file__, 1658, 20), append_276992, *[mask_276993], **kwargs_276994)
    
    # SSA join for if statement (line 1657)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the except part of a try statement (line 1655)
    # SSA branch for the except '<any exception>' branch of a try statement (line 1655)
    module_type_store.open_ssa_branch('except')
    pass
    # SSA join for try-except statement (line 1655)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1647)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to len(...): (line 1661)
    # Processing the call arguments (line 1661)
    # Getting the type of 'masks' (line 1661)
    masks_276997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 11), 'masks', False)
    # Processing the call keyword arguments (line 1661)
    kwargs_276998 = {}
    # Getting the type of 'len' (line 1661)
    len_276996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 7), 'len', False)
    # Calling len(args, kwargs) (line 1661)
    len_call_result_276999 = invoke(stypy.reporting.localization.Localization(__file__, 1661, 7), len_276996, *[masks_276997], **kwargs_276998)
    
    # Testing the type of an if condition (line 1661)
    if_condition_277000 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1661, 4), len_call_result_276999)
    # Assigning a type to the variable 'if_condition_277000' (line 1661)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1661, 4), 'if_condition_277000', if_condition_277000)
    # SSA begins for if statement (line 1661)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1662):
    
    # Assigning a Call to a Name (line 1662):
    
    # Call to reduce(...): (line 1662)
    # Processing the call arguments (line 1662)
    # Getting the type of 'masks' (line 1662)
    masks_277004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1662, 37), 'masks', False)
    # Processing the call keyword arguments (line 1662)
    kwargs_277005 = {}
    # Getting the type of 'np' (line 1662)
    np_277001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1662, 15), 'np', False)
    # Obtaining the member 'logical_and' of a type (line 1662)
    logical_and_277002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1662, 15), np_277001, 'logical_and')
    # Obtaining the member 'reduce' of a type (line 1662)
    reduce_277003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1662, 15), logical_and_277002, 'reduce')
    # Calling reduce(args, kwargs) (line 1662)
    reduce_call_result_277006 = invoke(stypy.reporting.localization.Localization(__file__, 1662, 15), reduce_277003, *[masks_277004], **kwargs_277005)
    
    # Assigning a type to the variable 'mask' (line 1662)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1662, 8), 'mask', reduce_call_result_277006)
    
    # Assigning a Subscript to a Name (line 1663):
    
    # Assigning a Subscript to a Name (line 1663):
    
    # Obtaining the type of the subscript
    int_277007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1663, 31), 'int')
    
    # Call to nonzero(...): (line 1663)
    # Processing the call keyword arguments (line 1663)
    kwargs_277010 = {}
    # Getting the type of 'mask' (line 1663)
    mask_277008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 16), 'mask', False)
    # Obtaining the member 'nonzero' of a type (line 1663)
    nonzero_277009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1663, 16), mask_277008, 'nonzero')
    # Calling nonzero(args, kwargs) (line 1663)
    nonzero_call_result_277011 = invoke(stypy.reporting.localization.Localization(__file__, 1663, 16), nonzero_277009, *[], **kwargs_277010)
    
    # Obtaining the member '__getitem__' of a type (line 1663)
    getitem___277012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1663, 16), nonzero_call_result_277011, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1663)
    subscript_call_result_277013 = invoke(stypy.reporting.localization.Localization(__file__, 1663, 16), getitem___277012, int_277007)
    
    # Assigning a type to the variable 'igood' (line 1663)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1663, 8), 'igood', subscript_call_result_277013)
    
    
    
    # Call to len(...): (line 1664)
    # Processing the call arguments (line 1664)
    # Getting the type of 'igood' (line 1664)
    igood_277015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 15), 'igood', False)
    # Processing the call keyword arguments (line 1664)
    kwargs_277016 = {}
    # Getting the type of 'len' (line 1664)
    len_277014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 11), 'len', False)
    # Calling len(args, kwargs) (line 1664)
    len_call_result_277017 = invoke(stypy.reporting.localization.Localization(__file__, 1664, 11), len_277014, *[igood_277015], **kwargs_277016)
    
    # Getting the type of 'nrecs' (line 1664)
    nrecs_277018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 24), 'nrecs')
    # Applying the binary operator '<' (line 1664)
    result_lt_277019 = python_operator(stypy.reporting.localization.Localization(__file__, 1664, 11), '<', len_call_result_277017, nrecs_277018)
    
    # Testing the type of an if condition (line 1664)
    if_condition_277020 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1664, 8), result_lt_277019)
    # Assigning a type to the variable 'if_condition_277020' (line 1664)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1664, 8), 'if_condition_277020', if_condition_277020)
    # SSA begins for if statement (line 1664)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to enumerate(...): (line 1665)
    # Processing the call arguments (line 1665)
    # Getting the type of 'margs' (line 1665)
    margs_277022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1665, 34), 'margs', False)
    # Processing the call keyword arguments (line 1665)
    kwargs_277023 = {}
    # Getting the type of 'enumerate' (line 1665)
    enumerate_277021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1665, 24), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 1665)
    enumerate_call_result_277024 = invoke(stypy.reporting.localization.Localization(__file__, 1665, 24), enumerate_277021, *[margs_277022], **kwargs_277023)
    
    # Testing the type of a for loop iterable (line 1665)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1665, 12), enumerate_call_result_277024)
    # Getting the type of the for loop variable (line 1665)
    for_loop_var_277025 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1665, 12), enumerate_call_result_277024)
    # Assigning a type to the variable 'i' (line 1665)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1665, 12), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1665, 12), for_loop_var_277025))
    # Assigning a type to the variable 'x' (line 1665)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1665, 12), 'x', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1665, 12), for_loop_var_277025))
    # SSA begins for a for statement (line 1665)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1666)
    i_277026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 27), 'i')
    # Getting the type of 'seqlist' (line 1666)
    seqlist_277027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 19), 'seqlist')
    # Obtaining the member '__getitem__' of a type (line 1666)
    getitem___277028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1666, 19), seqlist_277027, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1666)
    subscript_call_result_277029 = invoke(stypy.reporting.localization.Localization(__file__, 1666, 19), getitem___277028, i_277026)
    
    # Testing the type of an if condition (line 1666)
    if_condition_277030 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1666, 16), subscript_call_result_277029)
    # Assigning a type to the variable 'if_condition_277030' (line 1666)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1666, 16), 'if_condition_277030', if_condition_277030)
    # SSA begins for if statement (line 1666)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Subscript (line 1667):
    
    # Assigning a Call to a Subscript (line 1667):
    
    # Call to take(...): (line 1667)
    # Processing the call arguments (line 1667)
    # Getting the type of 'igood' (line 1667)
    igood_277033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 38), 'igood', False)
    # Processing the call keyword arguments (line 1667)
    int_277034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1667, 50), 'int')
    keyword_277035 = int_277034
    kwargs_277036 = {'axis': keyword_277035}
    # Getting the type of 'x' (line 1667)
    x_277031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 31), 'x', False)
    # Obtaining the member 'take' of a type (line 1667)
    take_277032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1667, 31), x_277031, 'take')
    # Calling take(args, kwargs) (line 1667)
    take_call_result_277037 = invoke(stypy.reporting.localization.Localization(__file__, 1667, 31), take_277032, *[igood_277033], **kwargs_277036)
    
    # Getting the type of 'margs' (line 1667)
    margs_277038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 20), 'margs')
    # Getting the type of 'i' (line 1667)
    i_277039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 26), 'i')
    # Storing an element on a container (line 1667)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1667, 20), margs_277038, (i_277039, take_call_result_277037))
    # SSA join for if statement (line 1666)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1664)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1661)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to enumerate(...): (line 1668)
    # Processing the call arguments (line 1668)
    # Getting the type of 'margs' (line 1668)
    margs_277041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 26), 'margs', False)
    # Processing the call keyword arguments (line 1668)
    kwargs_277042 = {}
    # Getting the type of 'enumerate' (line 1668)
    enumerate_277040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 16), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 1668)
    enumerate_call_result_277043 = invoke(stypy.reporting.localization.Localization(__file__, 1668, 16), enumerate_277040, *[margs_277041], **kwargs_277042)
    
    # Testing the type of a for loop iterable (line 1668)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1668, 4), enumerate_call_result_277043)
    # Getting the type of the for loop variable (line 1668)
    for_loop_var_277044 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1668, 4), enumerate_call_result_277043)
    # Assigning a type to the variable 'i' (line 1668)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1668, 4), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1668, 4), for_loop_var_277044))
    # Assigning a type to the variable 'x' (line 1668)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1668, 4), 'x', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1668, 4), for_loop_var_277044))
    # SSA begins for a for statement (line 1668)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Evaluating a boolean operation
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1669)
    i_277045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1669, 19), 'i')
    # Getting the type of 'seqlist' (line 1669)
    seqlist_277046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1669, 11), 'seqlist')
    # Obtaining the member '__getitem__' of a type (line 1669)
    getitem___277047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1669, 11), seqlist_277046, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1669)
    subscript_call_result_277048 = invoke(stypy.reporting.localization.Localization(__file__, 1669, 11), getitem___277047, i_277045)
    
    
    # Call to isinstance(...): (line 1669)
    # Processing the call arguments (line 1669)
    # Getting the type of 'x' (line 1669)
    x_277050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1669, 37), 'x', False)
    # Getting the type of 'np' (line 1669)
    np_277051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1669, 40), 'np', False)
    # Obtaining the member 'ma' of a type (line 1669)
    ma_277052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1669, 40), np_277051, 'ma')
    # Obtaining the member 'MaskedArray' of a type (line 1669)
    MaskedArray_277053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1669, 40), ma_277052, 'MaskedArray')
    # Processing the call keyword arguments (line 1669)
    kwargs_277054 = {}
    # Getting the type of 'isinstance' (line 1669)
    isinstance_277049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1669, 26), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1669)
    isinstance_call_result_277055 = invoke(stypy.reporting.localization.Localization(__file__, 1669, 26), isinstance_277049, *[x_277050, MaskedArray_277053], **kwargs_277054)
    
    # Applying the binary operator 'and' (line 1669)
    result_and_keyword_277056 = python_operator(stypy.reporting.localization.Localization(__file__, 1669, 11), 'and', subscript_call_result_277048, isinstance_call_result_277055)
    
    # Testing the type of an if condition (line 1669)
    if_condition_277057 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1669, 8), result_and_keyword_277056)
    # Assigning a type to the variable 'if_condition_277057' (line 1669)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1669, 8), 'if_condition_277057', if_condition_277057)
    # SSA begins for if statement (line 1669)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Subscript (line 1670):
    
    # Assigning a Call to a Subscript (line 1670):
    
    # Call to filled(...): (line 1670)
    # Processing the call keyword arguments (line 1670)
    kwargs_277060 = {}
    # Getting the type of 'x' (line 1670)
    x_277058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 23), 'x', False)
    # Obtaining the member 'filled' of a type (line 1670)
    filled_277059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1670, 23), x_277058, 'filled')
    # Calling filled(args, kwargs) (line 1670)
    filled_call_result_277061 = invoke(stypy.reporting.localization.Localization(__file__, 1670, 23), filled_277059, *[], **kwargs_277060)
    
    # Getting the type of 'margs' (line 1670)
    margs_277062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 12), 'margs')
    # Getting the type of 'i' (line 1670)
    i_277063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 18), 'i')
    # Storing an element on a container (line 1670)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1670, 12), margs_277062, (i_277063, filled_call_result_277061))
    # SSA join for if statement (line 1669)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'margs' (line 1671)
    margs_277064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 11), 'margs')
    # Assigning a type to the variable 'stypy_return_type' (line 1671)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1671, 4), 'stypy_return_type', margs_277064)
    
    # ################# End of 'delete_masked_points(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'delete_masked_points' in the type store
    # Getting the type of 'stypy_return_type' (line 1596)
    stypy_return_type_277065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_277065)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'delete_masked_points'
    return stypy_return_type_277065

# Assigning a type to the variable 'delete_masked_points' (line 1596)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1596, 0), 'delete_masked_points', delete_masked_points)

@norecursion
def boxplot_stats(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_277066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1674, 26), 'float')
    # Getting the type of 'None' (line 1674)
    None_277067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 41), 'None')
    # Getting the type of 'None' (line 1674)
    None_277068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 54), 'None')
    # Getting the type of 'False' (line 1675)
    False_277069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 28), 'False')
    defaults = [float_277066, None_277067, None_277068, False_277069]
    # Create a new context for function 'boxplot_stats'
    module_type_store = module_type_store.open_function_context('boxplot_stats', 1674, 0, False)
    
    # Passed parameters checking function
    boxplot_stats.stypy_localization = localization
    boxplot_stats.stypy_type_of_self = None
    boxplot_stats.stypy_type_store = module_type_store
    boxplot_stats.stypy_function_name = 'boxplot_stats'
    boxplot_stats.stypy_param_names_list = ['X', 'whis', 'bootstrap', 'labels', 'autorange']
    boxplot_stats.stypy_varargs_param_name = None
    boxplot_stats.stypy_kwargs_param_name = None
    boxplot_stats.stypy_call_defaults = defaults
    boxplot_stats.stypy_call_varargs = varargs
    boxplot_stats.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'boxplot_stats', ['X', 'whis', 'bootstrap', 'labels', 'autorange'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'boxplot_stats', localization, ['X', 'whis', 'bootstrap', 'labels', 'autorange'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'boxplot_stats(...)' code ##################

    unicode_277070 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1752, (-1)), 'unicode', u'\n    Returns list of dictionaries of statistics used to draw a series\n    of box and whisker plots. The `Returns` section enumerates the\n    required keys of the dictionary. Users can skip this function and\n    pass a user-defined set of dictionaries to the new `axes.bxp` method\n    instead of relying on MPL to do the calculations.\n\n    Parameters\n    ----------\n    X : array-like\n        Data that will be represented in the boxplots. Should have 2 or\n        fewer dimensions.\n\n    whis : float, string, or sequence (default = 1.5)\n        As a float, determines the reach of the whiskers to the beyond the\n        first and third quartiles. In other words, where IQR is the\n        interquartile range (`Q3-Q1`), the upper whisker will extend to last\n        datum less than `Q3 + whis*IQR`). Similarly, the lower whisker will\n        extend to the first datum greater than `Q1 - whis*IQR`.\n        Beyond the whiskers, data are considered outliers\n        and are plotted as individual points. This can be set this to an\n        ascending sequence of percentile (e.g., [5, 95]) to set the\n        whiskers at specific percentiles of the data. Finally, `whis`\n        can be the string ``\'range\'`` to force the whiskers to the\n        minimum and maximum of the data. In the edge case that the 25th\n        and 75th percentiles are equivalent, `whis` can be automatically\n        set to ``\'range\'`` via the `autorange` option.\n\n    bootstrap : int, optional\n        Number of times the confidence intervals around the median\n        should be bootstrapped (percentile method).\n\n    labels : array-like, optional\n        Labels for each dataset. Length must be compatible with\n        dimensions of `X`.\n\n    autorange : bool, optional (False)\n        When `True` and the data are distributed such that the  25th and\n        75th percentiles are equal, ``whis`` is set to ``\'range\'`` such\n        that the whisker ends are at the minimum and maximum of the\n        data.\n\n    Returns\n    -------\n    bxpstats : list of dict\n        A list of dictionaries containing the results for each column\n        of data. Keys of each dictionary are the following:\n\n        ========   ===================================\n        Key        Value Description\n        ========   ===================================\n        label      tick label for the boxplot\n        mean       arithemetic mean value\n        med        50th percentile\n        q1         first quartile (25th percentile)\n        q3         third quartile (75th percentile)\n        cilo       lower notch around the median\n        cihi       upper notch around the median\n        whislo     end of the lower whisker\n        whishi     end of the upper whisker\n        fliers     outliers\n        ========   ===================================\n\n    Notes\n    -----\n    Non-bootstrapping approach to confidence interval uses Gaussian-\n    based asymptotic approximation:\n\n    .. math::\n\n        \\mathrm{med} \\pm 1.57 \\times \\frac{\\mathrm{iqr}}{\\sqrt{N}}\n\n    General approach from:\n    McGill, R., Tukey, J.W., and Larsen, W.A. (1978) "Variations of\n    Boxplots", The American Statistician, 32:12-16.\n\n    ')

    @norecursion
    def _bootstrap_median(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_277071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1754, 34), 'int')
        defaults = [int_277071]
        # Create a new context for function '_bootstrap_median'
        module_type_store = module_type_store.open_function_context('_bootstrap_median', 1754, 4, False)
        
        # Passed parameters checking function
        _bootstrap_median.stypy_localization = localization
        _bootstrap_median.stypy_type_of_self = None
        _bootstrap_median.stypy_type_store = module_type_store
        _bootstrap_median.stypy_function_name = '_bootstrap_median'
        _bootstrap_median.stypy_param_names_list = ['data', 'N']
        _bootstrap_median.stypy_varargs_param_name = None
        _bootstrap_median.stypy_kwargs_param_name = None
        _bootstrap_median.stypy_call_defaults = defaults
        _bootstrap_median.stypy_call_varargs = varargs
        _bootstrap_median.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_bootstrap_median', ['data', 'N'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_bootstrap_median', localization, ['data', 'N'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_bootstrap_median(...)' code ##################

        
        # Assigning a Call to a Name (line 1756):
        
        # Assigning a Call to a Name (line 1756):
        
        # Call to len(...): (line 1756)
        # Processing the call arguments (line 1756)
        # Getting the type of 'data' (line 1756)
        data_277073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1756, 16), 'data', False)
        # Processing the call keyword arguments (line 1756)
        kwargs_277074 = {}
        # Getting the type of 'len' (line 1756)
        len_277072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1756, 12), 'len', False)
        # Calling len(args, kwargs) (line 1756)
        len_call_result_277075 = invoke(stypy.reporting.localization.Localization(__file__, 1756, 12), len_277072, *[data_277073], **kwargs_277074)
        
        # Assigning a type to the variable 'M' (line 1756)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1756, 8), 'M', len_call_result_277075)
        
        # Assigning a List to a Name (line 1757):
        
        # Assigning a List to a Name (line 1757):
        
        # Obtaining an instance of the builtin type 'list' (line 1757)
        list_277076 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1757, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1757)
        # Adding element type (line 1757)
        float_277077 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1757, 23), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1757, 22), list_277076, float_277077)
        # Adding element type (line 1757)
        float_277078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1757, 28), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1757, 22), list_277076, float_277078)
        
        # Assigning a type to the variable 'percentiles' (line 1757)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1757, 8), 'percentiles', list_277076)
        
        # Assigning a Call to a Name (line 1759):
        
        # Assigning a Call to a Name (line 1759):
        
        # Call to randint(...): (line 1759)
        # Processing the call arguments (line 1759)
        # Getting the type of 'M' (line 1759)
        M_277082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1759, 37), 'M', False)
        # Processing the call keyword arguments (line 1759)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1759)
        tuple_277083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1759, 46), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1759)
        # Adding element type (line 1759)
        # Getting the type of 'N' (line 1759)
        N_277084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1759, 46), 'N', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1759, 46), tuple_277083, N_277084)
        # Adding element type (line 1759)
        # Getting the type of 'M' (line 1759)
        M_277085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1759, 49), 'M', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1759, 46), tuple_277083, M_277085)
        
        keyword_277086 = tuple_277083
        kwargs_277087 = {'size': keyword_277086}
        # Getting the type of 'np' (line 1759)
        np_277079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1759, 19), 'np', False)
        # Obtaining the member 'random' of a type (line 1759)
        random_277080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1759, 19), np_277079, 'random')
        # Obtaining the member 'randint' of a type (line 1759)
        randint_277081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1759, 19), random_277080, 'randint')
        # Calling randint(args, kwargs) (line 1759)
        randint_call_result_277088 = invoke(stypy.reporting.localization.Localization(__file__, 1759, 19), randint_277081, *[M_277082], **kwargs_277087)
        
        # Assigning a type to the variable 'bs_index' (line 1759)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1759, 8), 'bs_index', randint_call_result_277088)
        
        # Assigning a Subscript to a Name (line 1760):
        
        # Assigning a Subscript to a Name (line 1760):
        
        # Obtaining the type of the subscript
        # Getting the type of 'bs_index' (line 1760)
        bs_index_277089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1760, 22), 'bs_index')
        # Getting the type of 'data' (line 1760)
        data_277090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1760, 17), 'data')
        # Obtaining the member '__getitem__' of a type (line 1760)
        getitem___277091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1760, 17), data_277090, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1760)
        subscript_call_result_277092 = invoke(stypy.reporting.localization.Localization(__file__, 1760, 17), getitem___277091, bs_index_277089)
        
        # Assigning a type to the variable 'bsData' (line 1760)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1760, 8), 'bsData', subscript_call_result_277092)
        
        # Assigning a Call to a Name (line 1761):
        
        # Assigning a Call to a Name (line 1761):
        
        # Call to median(...): (line 1761)
        # Processing the call arguments (line 1761)
        # Getting the type of 'bsData' (line 1761)
        bsData_277095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 29), 'bsData', False)
        # Processing the call keyword arguments (line 1761)
        int_277096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1761, 42), 'int')
        keyword_277097 = int_277096
        # Getting the type of 'True' (line 1761)
        True_277098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 61), 'True', False)
        keyword_277099 = True_277098
        kwargs_277100 = {'overwrite_input': keyword_277099, 'axis': keyword_277097}
        # Getting the type of 'np' (line 1761)
        np_277093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 19), 'np', False)
        # Obtaining the member 'median' of a type (line 1761)
        median_277094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1761, 19), np_277093, 'median')
        # Calling median(args, kwargs) (line 1761)
        median_call_result_277101 = invoke(stypy.reporting.localization.Localization(__file__, 1761, 19), median_277094, *[bsData_277095], **kwargs_277100)
        
        # Assigning a type to the variable 'estimate' (line 1761)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1761, 8), 'estimate', median_call_result_277101)
        
        # Assigning a Call to a Name (line 1763):
        
        # Assigning a Call to a Name (line 1763):
        
        # Call to percentile(...): (line 1763)
        # Processing the call arguments (line 1763)
        # Getting the type of 'estimate' (line 1763)
        estimate_277104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 27), 'estimate', False)
        # Getting the type of 'percentiles' (line 1763)
        percentiles_277105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 37), 'percentiles', False)
        # Processing the call keyword arguments (line 1763)
        kwargs_277106 = {}
        # Getting the type of 'np' (line 1763)
        np_277102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 13), 'np', False)
        # Obtaining the member 'percentile' of a type (line 1763)
        percentile_277103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1763, 13), np_277102, 'percentile')
        # Calling percentile(args, kwargs) (line 1763)
        percentile_call_result_277107 = invoke(stypy.reporting.localization.Localization(__file__, 1763, 13), percentile_277103, *[estimate_277104, percentiles_277105], **kwargs_277106)
        
        # Assigning a type to the variable 'CI' (line 1763)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1763, 8), 'CI', percentile_call_result_277107)
        # Getting the type of 'CI' (line 1764)
        CI_277108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 15), 'CI')
        # Assigning a type to the variable 'stypy_return_type' (line 1764)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1764, 8), 'stypy_return_type', CI_277108)
        
        # ################# End of '_bootstrap_median(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_bootstrap_median' in the type store
        # Getting the type of 'stypy_return_type' (line 1754)
        stypy_return_type_277109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1754, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_277109)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_bootstrap_median'
        return stypy_return_type_277109

    # Assigning a type to the variable '_bootstrap_median' (line 1754)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1754, 4), '_bootstrap_median', _bootstrap_median)

    @norecursion
    def _compute_conf_interval(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_compute_conf_interval'
        module_type_store = module_type_store.open_function_context('_compute_conf_interval', 1766, 4, False)
        
        # Passed parameters checking function
        _compute_conf_interval.stypy_localization = localization
        _compute_conf_interval.stypy_type_of_self = None
        _compute_conf_interval.stypy_type_store = module_type_store
        _compute_conf_interval.stypy_function_name = '_compute_conf_interval'
        _compute_conf_interval.stypy_param_names_list = ['data', 'med', 'iqr', 'bootstrap']
        _compute_conf_interval.stypy_varargs_param_name = None
        _compute_conf_interval.stypy_kwargs_param_name = None
        _compute_conf_interval.stypy_call_defaults = defaults
        _compute_conf_interval.stypy_call_varargs = varargs
        _compute_conf_interval.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_compute_conf_interval', ['data', 'med', 'iqr', 'bootstrap'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_compute_conf_interval', localization, ['data', 'med', 'iqr', 'bootstrap'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_compute_conf_interval(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 1767)
        # Getting the type of 'bootstrap' (line 1767)
        bootstrap_277110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 8), 'bootstrap')
        # Getting the type of 'None' (line 1767)
        None_277111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 28), 'None')
        
        (may_be_277112, more_types_in_union_277113) = may_not_be_none(bootstrap_277110, None_277111)

        if may_be_277112:

            if more_types_in_union_277113:
                # Runtime conditional SSA (line 1767)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 1770):
            
            # Assigning a Call to a Name (line 1770):
            
            # Call to _bootstrap_median(...): (line 1770)
            # Processing the call arguments (line 1770)
            # Getting the type of 'data' (line 1770)
            data_277115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1770, 35), 'data', False)
            # Processing the call keyword arguments (line 1770)
            # Getting the type of 'bootstrap' (line 1770)
            bootstrap_277116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1770, 43), 'bootstrap', False)
            keyword_277117 = bootstrap_277116
            kwargs_277118 = {'N': keyword_277117}
            # Getting the type of '_bootstrap_median' (line 1770)
            _bootstrap_median_277114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1770, 17), '_bootstrap_median', False)
            # Calling _bootstrap_median(args, kwargs) (line 1770)
            _bootstrap_median_call_result_277119 = invoke(stypy.reporting.localization.Localization(__file__, 1770, 17), _bootstrap_median_277114, *[data_277115], **kwargs_277118)
            
            # Assigning a type to the variable 'CI' (line 1770)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1770, 12), 'CI', _bootstrap_median_call_result_277119)
            
            # Assigning a Subscript to a Name (line 1771):
            
            # Assigning a Subscript to a Name (line 1771):
            
            # Obtaining the type of the subscript
            int_277120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1771, 27), 'int')
            # Getting the type of 'CI' (line 1771)
            CI_277121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 24), 'CI')
            # Obtaining the member '__getitem__' of a type (line 1771)
            getitem___277122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1771, 24), CI_277121, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1771)
            subscript_call_result_277123 = invoke(stypy.reporting.localization.Localization(__file__, 1771, 24), getitem___277122, int_277120)
            
            # Assigning a type to the variable 'notch_min' (line 1771)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1771, 12), 'notch_min', subscript_call_result_277123)
            
            # Assigning a Subscript to a Name (line 1772):
            
            # Assigning a Subscript to a Name (line 1772):
            
            # Obtaining the type of the subscript
            int_277124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1772, 27), 'int')
            # Getting the type of 'CI' (line 1772)
            CI_277125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1772, 24), 'CI')
            # Obtaining the member '__getitem__' of a type (line 1772)
            getitem___277126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1772, 24), CI_277125, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1772)
            subscript_call_result_277127 = invoke(stypy.reporting.localization.Localization(__file__, 1772, 24), getitem___277126, int_277124)
            
            # Assigning a type to the variable 'notch_max' (line 1772)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1772, 12), 'notch_max', subscript_call_result_277127)

            if more_types_in_union_277113:
                # Runtime conditional SSA for else branch (line 1767)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_277112) or more_types_in_union_277113):
            
            # Assigning a Call to a Name (line 1775):
            
            # Assigning a Call to a Name (line 1775):
            
            # Call to len(...): (line 1775)
            # Processing the call arguments (line 1775)
            # Getting the type of 'data' (line 1775)
            data_277129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1775, 20), 'data', False)
            # Processing the call keyword arguments (line 1775)
            kwargs_277130 = {}
            # Getting the type of 'len' (line 1775)
            len_277128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1775, 16), 'len', False)
            # Calling len(args, kwargs) (line 1775)
            len_call_result_277131 = invoke(stypy.reporting.localization.Localization(__file__, 1775, 16), len_277128, *[data_277129], **kwargs_277130)
            
            # Assigning a type to the variable 'N' (line 1775)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1775, 12), 'N', len_call_result_277131)
            
            # Assigning a BinOp to a Name (line 1776):
            
            # Assigning a BinOp to a Name (line 1776):
            # Getting the type of 'med' (line 1776)
            med_277132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 24), 'med')
            float_277133 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1776, 30), 'float')
            # Getting the type of 'iqr' (line 1776)
            iqr_277134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 37), 'iqr')
            # Applying the binary operator '*' (line 1776)
            result_mul_277135 = python_operator(stypy.reporting.localization.Localization(__file__, 1776, 30), '*', float_277133, iqr_277134)
            
            
            # Call to sqrt(...): (line 1776)
            # Processing the call arguments (line 1776)
            # Getting the type of 'N' (line 1776)
            N_277138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 51), 'N', False)
            # Processing the call keyword arguments (line 1776)
            kwargs_277139 = {}
            # Getting the type of 'np' (line 1776)
            np_277136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 43), 'np', False)
            # Obtaining the member 'sqrt' of a type (line 1776)
            sqrt_277137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1776, 43), np_277136, 'sqrt')
            # Calling sqrt(args, kwargs) (line 1776)
            sqrt_call_result_277140 = invoke(stypy.reporting.localization.Localization(__file__, 1776, 43), sqrt_277137, *[N_277138], **kwargs_277139)
            
            # Applying the binary operator 'div' (line 1776)
            result_div_277141 = python_operator(stypy.reporting.localization.Localization(__file__, 1776, 41), 'div', result_mul_277135, sqrt_call_result_277140)
            
            # Applying the binary operator '-' (line 1776)
            result_sub_277142 = python_operator(stypy.reporting.localization.Localization(__file__, 1776, 24), '-', med_277132, result_div_277141)
            
            # Assigning a type to the variable 'notch_min' (line 1776)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1776, 12), 'notch_min', result_sub_277142)
            
            # Assigning a BinOp to a Name (line 1777):
            
            # Assigning a BinOp to a Name (line 1777):
            # Getting the type of 'med' (line 1777)
            med_277143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 24), 'med')
            float_277144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1777, 30), 'float')
            # Getting the type of 'iqr' (line 1777)
            iqr_277145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 37), 'iqr')
            # Applying the binary operator '*' (line 1777)
            result_mul_277146 = python_operator(stypy.reporting.localization.Localization(__file__, 1777, 30), '*', float_277144, iqr_277145)
            
            
            # Call to sqrt(...): (line 1777)
            # Processing the call arguments (line 1777)
            # Getting the type of 'N' (line 1777)
            N_277149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 51), 'N', False)
            # Processing the call keyword arguments (line 1777)
            kwargs_277150 = {}
            # Getting the type of 'np' (line 1777)
            np_277147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 43), 'np', False)
            # Obtaining the member 'sqrt' of a type (line 1777)
            sqrt_277148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1777, 43), np_277147, 'sqrt')
            # Calling sqrt(args, kwargs) (line 1777)
            sqrt_call_result_277151 = invoke(stypy.reporting.localization.Localization(__file__, 1777, 43), sqrt_277148, *[N_277149], **kwargs_277150)
            
            # Applying the binary operator 'div' (line 1777)
            result_div_277152 = python_operator(stypy.reporting.localization.Localization(__file__, 1777, 41), 'div', result_mul_277146, sqrt_call_result_277151)
            
            # Applying the binary operator '+' (line 1777)
            result_add_277153 = python_operator(stypy.reporting.localization.Localization(__file__, 1777, 24), '+', med_277143, result_div_277152)
            
            # Assigning a type to the variable 'notch_max' (line 1777)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1777, 12), 'notch_max', result_add_277153)

            if (may_be_277112 and more_types_in_union_277113):
                # SSA join for if statement (line 1767)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1779)
        tuple_277154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1779, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1779)
        # Adding element type (line 1779)
        # Getting the type of 'notch_min' (line 1779)
        notch_min_277155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1779, 15), 'notch_min')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1779, 15), tuple_277154, notch_min_277155)
        # Adding element type (line 1779)
        # Getting the type of 'notch_max' (line 1779)
        notch_max_277156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1779, 26), 'notch_max')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1779, 15), tuple_277154, notch_max_277156)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1779)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1779, 8), 'stypy_return_type', tuple_277154)
        
        # ################# End of '_compute_conf_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_compute_conf_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 1766)
        stypy_return_type_277157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1766, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_277157)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_compute_conf_interval'
        return stypy_return_type_277157

    # Assigning a type to the variable '_compute_conf_interval' (line 1766)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1766, 4), '_compute_conf_interval', _compute_conf_interval)
    
    # Assigning a List to a Name (line 1782):
    
    # Assigning a List to a Name (line 1782):
    
    # Obtaining an instance of the builtin type 'list' (line 1782)
    list_277158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1782, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1782)
    
    # Assigning a type to the variable 'bxpstats' (line 1782)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1782, 4), 'bxpstats', list_277158)
    
    # Assigning a Call to a Name (line 1785):
    
    # Assigning a Call to a Name (line 1785):
    
    # Call to _reshape_2D(...): (line 1785)
    # Processing the call arguments (line 1785)
    # Getting the type of 'X' (line 1785)
    X_277160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 20), 'X', False)
    unicode_277161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1785, 23), 'unicode', u'X')
    # Processing the call keyword arguments (line 1785)
    kwargs_277162 = {}
    # Getting the type of '_reshape_2D' (line 1785)
    _reshape_2D_277159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 8), '_reshape_2D', False)
    # Calling _reshape_2D(args, kwargs) (line 1785)
    _reshape_2D_call_result_277163 = invoke(stypy.reporting.localization.Localization(__file__, 1785, 8), _reshape_2D_277159, *[X_277160, unicode_277161], **kwargs_277162)
    
    # Assigning a type to the variable 'X' (line 1785)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1785, 4), 'X', _reshape_2D_call_result_277163)
    
    # Assigning a Call to a Name (line 1787):
    
    # Assigning a Call to a Name (line 1787):
    
    # Call to len(...): (line 1787)
    # Processing the call arguments (line 1787)
    # Getting the type of 'X' (line 1787)
    X_277165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 16), 'X', False)
    # Processing the call keyword arguments (line 1787)
    kwargs_277166 = {}
    # Getting the type of 'len' (line 1787)
    len_277164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 12), 'len', False)
    # Calling len(args, kwargs) (line 1787)
    len_call_result_277167 = invoke(stypy.reporting.localization.Localization(__file__, 1787, 12), len_277164, *[X_277165], **kwargs_277166)
    
    # Assigning a type to the variable 'ncols' (line 1787)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1787, 4), 'ncols', len_call_result_277167)
    
    # Type idiom detected: calculating its left and rigth part (line 1788)
    # Getting the type of 'labels' (line 1788)
    labels_277168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 7), 'labels')
    # Getting the type of 'None' (line 1788)
    None_277169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 17), 'None')
    
    (may_be_277170, more_types_in_union_277171) = may_be_none(labels_277168, None_277169)

    if may_be_277170:

        if more_types_in_union_277171:
            # Runtime conditional SSA (line 1788)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1789):
        
        # Assigning a Call to a Name (line 1789):
        
        # Call to repeat(...): (line 1789)
        # Processing the call arguments (line 1789)
        # Getting the type of 'None' (line 1789)
        None_277173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 24), 'None', False)
        # Processing the call keyword arguments (line 1789)
        kwargs_277174 = {}
        # Getting the type of 'repeat' (line 1789)
        repeat_277172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 17), 'repeat', False)
        # Calling repeat(args, kwargs) (line 1789)
        repeat_call_result_277175 = invoke(stypy.reporting.localization.Localization(__file__, 1789, 17), repeat_277172, *[None_277173], **kwargs_277174)
        
        # Assigning a type to the variable 'labels' (line 1789)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1789, 8), 'labels', repeat_call_result_277175)

        if more_types_in_union_277171:
            # Runtime conditional SSA for else branch (line 1788)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_277170) or more_types_in_union_277171):
        
        
        
        # Call to len(...): (line 1790)
        # Processing the call arguments (line 1790)
        # Getting the type of 'labels' (line 1790)
        labels_277177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 13), 'labels', False)
        # Processing the call keyword arguments (line 1790)
        kwargs_277178 = {}
        # Getting the type of 'len' (line 1790)
        len_277176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 9), 'len', False)
        # Calling len(args, kwargs) (line 1790)
        len_call_result_277179 = invoke(stypy.reporting.localization.Localization(__file__, 1790, 9), len_277176, *[labels_277177], **kwargs_277178)
        
        # Getting the type of 'ncols' (line 1790)
        ncols_277180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 24), 'ncols')
        # Applying the binary operator '!=' (line 1790)
        result_ne_277181 = python_operator(stypy.reporting.localization.Localization(__file__, 1790, 9), '!=', len_call_result_277179, ncols_277180)
        
        # Testing the type of an if condition (line 1790)
        if_condition_277182 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1790, 9), result_ne_277181)
        # Assigning a type to the variable 'if_condition_277182' (line 1790)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1790, 9), 'if_condition_277182', if_condition_277182)
        # SSA begins for if statement (line 1790)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1791)
        # Processing the call arguments (line 1791)
        unicode_277184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1791, 25), 'unicode', u'Dimensions of labels and X must be compatible')
        # Processing the call keyword arguments (line 1791)
        kwargs_277185 = {}
        # Getting the type of 'ValueError' (line 1791)
        ValueError_277183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 14), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1791)
        ValueError_call_result_277186 = invoke(stypy.reporting.localization.Localization(__file__, 1791, 14), ValueError_277183, *[unicode_277184], **kwargs_277185)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1791, 8), ValueError_call_result_277186, 'raise parameter', BaseException)
        # SSA join for if statement (line 1790)
        module_type_store = module_type_store.join_ssa_context()
        

        if (may_be_277170 and more_types_in_union_277171):
            # SSA join for if statement (line 1788)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Name to a Name (line 1793):
    
    # Assigning a Name to a Name (line 1793):
    # Getting the type of 'whis' (line 1793)
    whis_277187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 17), 'whis')
    # Assigning a type to the variable 'input_whis' (line 1793)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1793, 4), 'input_whis', whis_277187)
    
    
    # Call to enumerate(...): (line 1794)
    # Processing the call arguments (line 1794)
    
    # Call to zip(...): (line 1794)
    # Processing the call arguments (line 1794)
    # Getting the type of 'X' (line 1794)
    X_277190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 40), 'X', False)
    # Getting the type of 'labels' (line 1794)
    labels_277191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 43), 'labels', False)
    # Processing the call keyword arguments (line 1794)
    kwargs_277192 = {}
    # Getting the type of 'zip' (line 1794)
    zip_277189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 36), 'zip', False)
    # Calling zip(args, kwargs) (line 1794)
    zip_call_result_277193 = invoke(stypy.reporting.localization.Localization(__file__, 1794, 36), zip_277189, *[X_277190, labels_277191], **kwargs_277192)
    
    # Processing the call keyword arguments (line 1794)
    int_277194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1794, 58), 'int')
    keyword_277195 = int_277194
    kwargs_277196 = {'start': keyword_277195}
    # Getting the type of 'enumerate' (line 1794)
    enumerate_277188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 26), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 1794)
    enumerate_call_result_277197 = invoke(stypy.reporting.localization.Localization(__file__, 1794, 26), enumerate_277188, *[zip_call_result_277193], **kwargs_277196)
    
    # Testing the type of a for loop iterable (line 1794)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1794, 4), enumerate_call_result_277197)
    # Getting the type of the for loop variable (line 1794)
    for_loop_var_277198 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1794, 4), enumerate_call_result_277197)
    # Assigning a type to the variable 'ii' (line 1794)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1794, 4), 'ii', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1794, 4), for_loop_var_277198))
    # Assigning a type to the variable 'x' (line 1794)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1794, 4), 'x', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1794, 4), for_loop_var_277198))
    # Assigning a type to the variable 'label' (line 1794)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1794, 4), 'label', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1794, 4), for_loop_var_277198))
    # SSA begins for a for statement (line 1794)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Dict to a Name (line 1797):
    
    # Assigning a Dict to a Name (line 1797):
    
    # Obtaining an instance of the builtin type 'dict' (line 1797)
    dict_277199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1797, 16), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 1797)
    
    # Assigning a type to the variable 'stats' (line 1797)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1797, 8), 'stats', dict_277199)
    
    # Type idiom detected: calculating its left and rigth part (line 1798)
    # Getting the type of 'label' (line 1798)
    label_277200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 8), 'label')
    # Getting the type of 'None' (line 1798)
    None_277201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 24), 'None')
    
    (may_be_277202, more_types_in_union_277203) = may_not_be_none(label_277200, None_277201)

    if may_be_277202:

        if more_types_in_union_277203:
            # Runtime conditional SSA (line 1798)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Subscript (line 1799):
        
        # Assigning a Name to a Subscript (line 1799):
        # Getting the type of 'label' (line 1799)
        label_277204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1799, 29), 'label')
        # Getting the type of 'stats' (line 1799)
        stats_277205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1799, 12), 'stats')
        unicode_277206 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1799, 18), 'unicode', u'label')
        # Storing an element on a container (line 1799)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1799, 12), stats_277205, (unicode_277206, label_277204))

        if more_types_in_union_277203:
            # SSA join for if statement (line 1798)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Name to a Name (line 1802):
    
    # Assigning a Name to a Name (line 1802):
    # Getting the type of 'input_whis' (line 1802)
    input_whis_277207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 15), 'input_whis')
    # Assigning a type to the variable 'whis' (line 1802)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1802, 8), 'whis', input_whis_277207)
    
    # Call to append(...): (line 1805)
    # Processing the call arguments (line 1805)
    # Getting the type of 'stats' (line 1805)
    stats_277210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 24), 'stats', False)
    # Processing the call keyword arguments (line 1805)
    kwargs_277211 = {}
    # Getting the type of 'bxpstats' (line 1805)
    bxpstats_277208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 8), 'bxpstats', False)
    # Obtaining the member 'append' of a type (line 1805)
    append_277209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1805, 8), bxpstats_277208, 'append')
    # Calling append(args, kwargs) (line 1805)
    append_call_result_277212 = invoke(stypy.reporting.localization.Localization(__file__, 1805, 8), append_277209, *[stats_277210], **kwargs_277211)
    
    
    
    
    # Call to len(...): (line 1808)
    # Processing the call arguments (line 1808)
    # Getting the type of 'x' (line 1808)
    x_277214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1808, 15), 'x', False)
    # Processing the call keyword arguments (line 1808)
    kwargs_277215 = {}
    # Getting the type of 'len' (line 1808)
    len_277213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1808, 11), 'len', False)
    # Calling len(args, kwargs) (line 1808)
    len_call_result_277216 = invoke(stypy.reporting.localization.Localization(__file__, 1808, 11), len_277213, *[x_277214], **kwargs_277215)
    
    int_277217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1808, 21), 'int')
    # Applying the binary operator '==' (line 1808)
    result_eq_277218 = python_operator(stypy.reporting.localization.Localization(__file__, 1808, 11), '==', len_call_result_277216, int_277217)
    
    # Testing the type of an if condition (line 1808)
    if_condition_277219 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1808, 8), result_eq_277218)
    # Assigning a type to the variable 'if_condition_277219' (line 1808)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1808, 8), 'if_condition_277219', if_condition_277219)
    # SSA begins for if statement (line 1808)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Subscript (line 1809):
    
    # Assigning a Call to a Subscript (line 1809):
    
    # Call to array(...): (line 1809)
    # Processing the call arguments (line 1809)
    
    # Obtaining an instance of the builtin type 'list' (line 1809)
    list_277222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1809, 39), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1809)
    
    # Processing the call keyword arguments (line 1809)
    kwargs_277223 = {}
    # Getting the type of 'np' (line 1809)
    np_277220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 30), 'np', False)
    # Obtaining the member 'array' of a type (line 1809)
    array_277221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1809, 30), np_277220, 'array')
    # Calling array(args, kwargs) (line 1809)
    array_call_result_277224 = invoke(stypy.reporting.localization.Localization(__file__, 1809, 30), array_277221, *[list_277222], **kwargs_277223)
    
    # Getting the type of 'stats' (line 1809)
    stats_277225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 12), 'stats')
    unicode_277226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1809, 18), 'unicode', u'fliers')
    # Storing an element on a container (line 1809)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1809, 12), stats_277225, (unicode_277226, array_call_result_277224))
    
    # Assigning a Attribute to a Subscript (line 1810):
    
    # Assigning a Attribute to a Subscript (line 1810):
    # Getting the type of 'np' (line 1810)
    np_277227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 28), 'np')
    # Obtaining the member 'nan' of a type (line 1810)
    nan_277228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1810, 28), np_277227, 'nan')
    # Getting the type of 'stats' (line 1810)
    stats_277229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 12), 'stats')
    unicode_277230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1810, 18), 'unicode', u'mean')
    # Storing an element on a container (line 1810)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1810, 12), stats_277229, (unicode_277230, nan_277228))
    
    # Assigning a Attribute to a Subscript (line 1811):
    
    # Assigning a Attribute to a Subscript (line 1811):
    # Getting the type of 'np' (line 1811)
    np_277231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 27), 'np')
    # Obtaining the member 'nan' of a type (line 1811)
    nan_277232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1811, 27), np_277231, 'nan')
    # Getting the type of 'stats' (line 1811)
    stats_277233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 12), 'stats')
    unicode_277234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1811, 18), 'unicode', u'med')
    # Storing an element on a container (line 1811)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1811, 12), stats_277233, (unicode_277234, nan_277232))
    
    # Assigning a Attribute to a Subscript (line 1812):
    
    # Assigning a Attribute to a Subscript (line 1812):
    # Getting the type of 'np' (line 1812)
    np_277235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1812, 26), 'np')
    # Obtaining the member 'nan' of a type (line 1812)
    nan_277236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1812, 26), np_277235, 'nan')
    # Getting the type of 'stats' (line 1812)
    stats_277237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1812, 12), 'stats')
    unicode_277238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1812, 18), 'unicode', u'q1')
    # Storing an element on a container (line 1812)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1812, 12), stats_277237, (unicode_277238, nan_277236))
    
    # Assigning a Attribute to a Subscript (line 1813):
    
    # Assigning a Attribute to a Subscript (line 1813):
    # Getting the type of 'np' (line 1813)
    np_277239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 26), 'np')
    # Obtaining the member 'nan' of a type (line 1813)
    nan_277240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1813, 26), np_277239, 'nan')
    # Getting the type of 'stats' (line 1813)
    stats_277241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 12), 'stats')
    unicode_277242 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1813, 18), 'unicode', u'q3')
    # Storing an element on a container (line 1813)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1813, 12), stats_277241, (unicode_277242, nan_277240))
    
    # Assigning a Attribute to a Subscript (line 1814):
    
    # Assigning a Attribute to a Subscript (line 1814):
    # Getting the type of 'np' (line 1814)
    np_277243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 28), 'np')
    # Obtaining the member 'nan' of a type (line 1814)
    nan_277244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1814, 28), np_277243, 'nan')
    # Getting the type of 'stats' (line 1814)
    stats_277245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 12), 'stats')
    unicode_277246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1814, 18), 'unicode', u'cilo')
    # Storing an element on a container (line 1814)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1814, 12), stats_277245, (unicode_277246, nan_277244))
    
    # Assigning a Attribute to a Subscript (line 1815):
    
    # Assigning a Attribute to a Subscript (line 1815):
    # Getting the type of 'np' (line 1815)
    np_277247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 28), 'np')
    # Obtaining the member 'nan' of a type (line 1815)
    nan_277248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1815, 28), np_277247, 'nan')
    # Getting the type of 'stats' (line 1815)
    stats_277249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 12), 'stats')
    unicode_277250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1815, 18), 'unicode', u'cihi')
    # Storing an element on a container (line 1815)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1815, 12), stats_277249, (unicode_277250, nan_277248))
    
    # Assigning a Attribute to a Subscript (line 1816):
    
    # Assigning a Attribute to a Subscript (line 1816):
    # Getting the type of 'np' (line 1816)
    np_277251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 30), 'np')
    # Obtaining the member 'nan' of a type (line 1816)
    nan_277252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1816, 30), np_277251, 'nan')
    # Getting the type of 'stats' (line 1816)
    stats_277253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 12), 'stats')
    unicode_277254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1816, 18), 'unicode', u'whislo')
    # Storing an element on a container (line 1816)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1816, 12), stats_277253, (unicode_277254, nan_277252))
    
    # Assigning a Attribute to a Subscript (line 1817):
    
    # Assigning a Attribute to a Subscript (line 1817):
    # Getting the type of 'np' (line 1817)
    np_277255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 30), 'np')
    # Obtaining the member 'nan' of a type (line 1817)
    nan_277256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1817, 30), np_277255, 'nan')
    # Getting the type of 'stats' (line 1817)
    stats_277257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 12), 'stats')
    unicode_277258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1817, 18), 'unicode', u'whishi')
    # Storing an element on a container (line 1817)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1817, 12), stats_277257, (unicode_277258, nan_277256))
    
    # Assigning a Attribute to a Subscript (line 1818):
    
    # Assigning a Attribute to a Subscript (line 1818):
    # Getting the type of 'np' (line 1818)
    np_277259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1818, 27), 'np')
    # Obtaining the member 'nan' of a type (line 1818)
    nan_277260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1818, 27), np_277259, 'nan')
    # Getting the type of 'stats' (line 1818)
    stats_277261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1818, 12), 'stats')
    unicode_277262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1818, 18), 'unicode', u'med')
    # Storing an element on a container (line 1818)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1818, 12), stats_277261, (unicode_277262, nan_277260))
    # SSA join for if statement (line 1808)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1822):
    
    # Assigning a Call to a Name (line 1822):
    
    # Call to asarray(...): (line 1822)
    # Processing the call arguments (line 1822)
    # Getting the type of 'x' (line 1822)
    x_277265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 23), 'x', False)
    # Processing the call keyword arguments (line 1822)
    kwargs_277266 = {}
    # Getting the type of 'np' (line 1822)
    np_277263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 12), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1822)
    asarray_277264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1822, 12), np_277263, 'asarray')
    # Calling asarray(args, kwargs) (line 1822)
    asarray_call_result_277267 = invoke(stypy.reporting.localization.Localization(__file__, 1822, 12), asarray_277264, *[x_277265], **kwargs_277266)
    
    # Assigning a type to the variable 'x' (line 1822)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1822, 8), 'x', asarray_call_result_277267)
    
    # Assigning a Call to a Subscript (line 1825):
    
    # Assigning a Call to a Subscript (line 1825):
    
    # Call to mean(...): (line 1825)
    # Processing the call arguments (line 1825)
    # Getting the type of 'x' (line 1825)
    x_277270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 32), 'x', False)
    # Processing the call keyword arguments (line 1825)
    kwargs_277271 = {}
    # Getting the type of 'np' (line 1825)
    np_277268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 24), 'np', False)
    # Obtaining the member 'mean' of a type (line 1825)
    mean_277269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1825, 24), np_277268, 'mean')
    # Calling mean(args, kwargs) (line 1825)
    mean_call_result_277272 = invoke(stypy.reporting.localization.Localization(__file__, 1825, 24), mean_277269, *[x_277270], **kwargs_277271)
    
    # Getting the type of 'stats' (line 1825)
    stats_277273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 8), 'stats')
    unicode_277274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1825, 14), 'unicode', u'mean')
    # Storing an element on a container (line 1825)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1825, 8), stats_277273, (unicode_277274, mean_call_result_277272))
    
    # Assigning a Call to a Tuple (line 1828):
    
    # Assigning a Call to a Name:
    
    # Call to percentile(...): (line 1828)
    # Processing the call arguments (line 1828)
    # Getting the type of 'x' (line 1828)
    x_277277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 36), 'x', False)
    
    # Obtaining an instance of the builtin type 'list' (line 1828)
    list_277278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1828, 39), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1828)
    # Adding element type (line 1828)
    int_277279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1828, 40), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1828, 39), list_277278, int_277279)
    # Adding element type (line 1828)
    int_277280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1828, 44), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1828, 39), list_277278, int_277280)
    # Adding element type (line 1828)
    int_277281 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1828, 48), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1828, 39), list_277278, int_277281)
    
    # Processing the call keyword arguments (line 1828)
    kwargs_277282 = {}
    # Getting the type of 'np' (line 1828)
    np_277275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 22), 'np', False)
    # Obtaining the member 'percentile' of a type (line 1828)
    percentile_277276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1828, 22), np_277275, 'percentile')
    # Calling percentile(args, kwargs) (line 1828)
    percentile_call_result_277283 = invoke(stypy.reporting.localization.Localization(__file__, 1828, 22), percentile_277276, *[x_277277, list_277278], **kwargs_277282)
    
    # Assigning a type to the variable 'call_assignment_273665' (line 1828)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1828, 8), 'call_assignment_273665', percentile_call_result_277283)
    
    # Assigning a Call to a Name (line 1828):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_277286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1828, 8), 'int')
    # Processing the call keyword arguments
    kwargs_277287 = {}
    # Getting the type of 'call_assignment_273665' (line 1828)
    call_assignment_273665_277284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 8), 'call_assignment_273665', False)
    # Obtaining the member '__getitem__' of a type (line 1828)
    getitem___277285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1828, 8), call_assignment_273665_277284, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_277288 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___277285, *[int_277286], **kwargs_277287)
    
    # Assigning a type to the variable 'call_assignment_273666' (line 1828)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1828, 8), 'call_assignment_273666', getitem___call_result_277288)
    
    # Assigning a Name to a Name (line 1828):
    # Getting the type of 'call_assignment_273666' (line 1828)
    call_assignment_273666_277289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 8), 'call_assignment_273666')
    # Assigning a type to the variable 'q1' (line 1828)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1828, 8), 'q1', call_assignment_273666_277289)
    
    # Assigning a Call to a Name (line 1828):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_277292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1828, 8), 'int')
    # Processing the call keyword arguments
    kwargs_277293 = {}
    # Getting the type of 'call_assignment_273665' (line 1828)
    call_assignment_273665_277290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 8), 'call_assignment_273665', False)
    # Obtaining the member '__getitem__' of a type (line 1828)
    getitem___277291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1828, 8), call_assignment_273665_277290, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_277294 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___277291, *[int_277292], **kwargs_277293)
    
    # Assigning a type to the variable 'call_assignment_273667' (line 1828)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1828, 8), 'call_assignment_273667', getitem___call_result_277294)
    
    # Assigning a Name to a Name (line 1828):
    # Getting the type of 'call_assignment_273667' (line 1828)
    call_assignment_273667_277295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 8), 'call_assignment_273667')
    # Assigning a type to the variable 'med' (line 1828)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1828, 12), 'med', call_assignment_273667_277295)
    
    # Assigning a Call to a Name (line 1828):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_277298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1828, 8), 'int')
    # Processing the call keyword arguments
    kwargs_277299 = {}
    # Getting the type of 'call_assignment_273665' (line 1828)
    call_assignment_273665_277296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 8), 'call_assignment_273665', False)
    # Obtaining the member '__getitem__' of a type (line 1828)
    getitem___277297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1828, 8), call_assignment_273665_277296, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_277300 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___277297, *[int_277298], **kwargs_277299)
    
    # Assigning a type to the variable 'call_assignment_273668' (line 1828)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1828, 8), 'call_assignment_273668', getitem___call_result_277300)
    
    # Assigning a Name to a Name (line 1828):
    # Getting the type of 'call_assignment_273668' (line 1828)
    call_assignment_273668_277301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 8), 'call_assignment_273668')
    # Assigning a type to the variable 'q3' (line 1828)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1828, 17), 'q3', call_assignment_273668_277301)
    
    # Assigning a BinOp to a Subscript (line 1831):
    
    # Assigning a BinOp to a Subscript (line 1831):
    # Getting the type of 'q3' (line 1831)
    q3_277302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 23), 'q3')
    # Getting the type of 'q1' (line 1831)
    q1_277303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 28), 'q1')
    # Applying the binary operator '-' (line 1831)
    result_sub_277304 = python_operator(stypy.reporting.localization.Localization(__file__, 1831, 23), '-', q3_277302, q1_277303)
    
    # Getting the type of 'stats' (line 1831)
    stats_277305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 8), 'stats')
    unicode_277306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1831, 14), 'unicode', u'iqr')
    # Storing an element on a container (line 1831)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1831, 8), stats_277305, (unicode_277306, result_sub_277304))
    
    
    # Evaluating a boolean operation
    
    
    # Obtaining the type of the subscript
    unicode_277307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1832, 17), 'unicode', u'iqr')
    # Getting the type of 'stats' (line 1832)
    stats_277308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 11), 'stats')
    # Obtaining the member '__getitem__' of a type (line 1832)
    getitem___277309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1832, 11), stats_277308, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1832)
    subscript_call_result_277310 = invoke(stypy.reporting.localization.Localization(__file__, 1832, 11), getitem___277309, unicode_277307)
    
    int_277311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1832, 27), 'int')
    # Applying the binary operator '==' (line 1832)
    result_eq_277312 = python_operator(stypy.reporting.localization.Localization(__file__, 1832, 11), '==', subscript_call_result_277310, int_277311)
    
    # Getting the type of 'autorange' (line 1832)
    autorange_277313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 33), 'autorange')
    # Applying the binary operator 'and' (line 1832)
    result_and_keyword_277314 = python_operator(stypy.reporting.localization.Localization(__file__, 1832, 11), 'and', result_eq_277312, autorange_277313)
    
    # Testing the type of an if condition (line 1832)
    if_condition_277315 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1832, 8), result_and_keyword_277314)
    # Assigning a type to the variable 'if_condition_277315' (line 1832)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1832, 8), 'if_condition_277315', if_condition_277315)
    # SSA begins for if statement (line 1832)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Name (line 1833):
    
    # Assigning a Str to a Name (line 1833):
    unicode_277316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1833, 19), 'unicode', u'range')
    # Assigning a type to the variable 'whis' (line 1833)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1833, 12), 'whis', unicode_277316)
    # SSA join for if statement (line 1832)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 1836):
    
    # Assigning a Call to a Name:
    
    # Call to _compute_conf_interval(...): (line 1836)
    # Processing the call arguments (line 1836)
    # Getting the type of 'x' (line 1837)
    x_277318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 12), 'x', False)
    # Getting the type of 'med' (line 1837)
    med_277319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 15), 'med', False)
    
    # Obtaining the type of the subscript
    unicode_277320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1837, 26), 'unicode', u'iqr')
    # Getting the type of 'stats' (line 1837)
    stats_277321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 20), 'stats', False)
    # Obtaining the member '__getitem__' of a type (line 1837)
    getitem___277322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1837, 20), stats_277321, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1837)
    subscript_call_result_277323 = invoke(stypy.reporting.localization.Localization(__file__, 1837, 20), getitem___277322, unicode_277320)
    
    # Getting the type of 'bootstrap' (line 1837)
    bootstrap_277324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 34), 'bootstrap', False)
    # Processing the call keyword arguments (line 1836)
    kwargs_277325 = {}
    # Getting the type of '_compute_conf_interval' (line 1836)
    _compute_conf_interval_277317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1836, 39), '_compute_conf_interval', False)
    # Calling _compute_conf_interval(args, kwargs) (line 1836)
    _compute_conf_interval_call_result_277326 = invoke(stypy.reporting.localization.Localization(__file__, 1836, 39), _compute_conf_interval_277317, *[x_277318, med_277319, subscript_call_result_277323, bootstrap_277324], **kwargs_277325)
    
    # Assigning a type to the variable 'call_assignment_273669' (line 1836)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1836, 8), 'call_assignment_273669', _compute_conf_interval_call_result_277326)
    
    # Assigning a Call to a Name (line 1836):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_277329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1836, 8), 'int')
    # Processing the call keyword arguments
    kwargs_277330 = {}
    # Getting the type of 'call_assignment_273669' (line 1836)
    call_assignment_273669_277327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1836, 8), 'call_assignment_273669', False)
    # Obtaining the member '__getitem__' of a type (line 1836)
    getitem___277328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1836, 8), call_assignment_273669_277327, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_277331 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___277328, *[int_277329], **kwargs_277330)
    
    # Assigning a type to the variable 'call_assignment_273670' (line 1836)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1836, 8), 'call_assignment_273670', getitem___call_result_277331)
    
    # Assigning a Name to a Subscript (line 1836):
    # Getting the type of 'call_assignment_273670' (line 1836)
    call_assignment_273670_277332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1836, 8), 'call_assignment_273670')
    # Getting the type of 'stats' (line 1836)
    stats_277333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1836, 8), 'stats')
    unicode_277334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1836, 14), 'unicode', u'cilo')
    # Storing an element on a container (line 1836)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1836, 8), stats_277333, (unicode_277334, call_assignment_273670_277332))
    
    # Assigning a Call to a Name (line 1836):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_277337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1836, 8), 'int')
    # Processing the call keyword arguments
    kwargs_277338 = {}
    # Getting the type of 'call_assignment_273669' (line 1836)
    call_assignment_273669_277335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1836, 8), 'call_assignment_273669', False)
    # Obtaining the member '__getitem__' of a type (line 1836)
    getitem___277336 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1836, 8), call_assignment_273669_277335, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_277339 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___277336, *[int_277337], **kwargs_277338)
    
    # Assigning a type to the variable 'call_assignment_273671' (line 1836)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1836, 8), 'call_assignment_273671', getitem___call_result_277339)
    
    # Assigning a Name to a Subscript (line 1836):
    # Getting the type of 'call_assignment_273671' (line 1836)
    call_assignment_273671_277340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1836, 8), 'call_assignment_273671')
    # Getting the type of 'stats' (line 1836)
    stats_277341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1836, 23), 'stats')
    unicode_277342 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1836, 29), 'unicode', u'cihi')
    # Storing an element on a container (line 1836)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1836, 23), stats_277341, (unicode_277342, call_assignment_273671_277340))
    
    
    # Call to isscalar(...): (line 1841)
    # Processing the call arguments (line 1841)
    # Getting the type of 'whis' (line 1841)
    whis_277345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1841, 23), 'whis', False)
    # Processing the call keyword arguments (line 1841)
    kwargs_277346 = {}
    # Getting the type of 'np' (line 1841)
    np_277343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1841, 11), 'np', False)
    # Obtaining the member 'isscalar' of a type (line 1841)
    isscalar_277344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1841, 11), np_277343, 'isscalar')
    # Calling isscalar(args, kwargs) (line 1841)
    isscalar_call_result_277347 = invoke(stypy.reporting.localization.Localization(__file__, 1841, 11), isscalar_277344, *[whis_277345], **kwargs_277346)
    
    # Testing the type of an if condition (line 1841)
    if_condition_277348 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1841, 8), isscalar_call_result_277347)
    # Assigning a type to the variable 'if_condition_277348' (line 1841)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1841, 8), 'if_condition_277348', if_condition_277348)
    # SSA begins for if statement (line 1841)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to isreal(...): (line 1842)
    # Processing the call arguments (line 1842)
    # Getting the type of 'whis' (line 1842)
    whis_277351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1842, 25), 'whis', False)
    # Processing the call keyword arguments (line 1842)
    kwargs_277352 = {}
    # Getting the type of 'np' (line 1842)
    np_277349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1842, 15), 'np', False)
    # Obtaining the member 'isreal' of a type (line 1842)
    isreal_277350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1842, 15), np_277349, 'isreal')
    # Calling isreal(args, kwargs) (line 1842)
    isreal_call_result_277353 = invoke(stypy.reporting.localization.Localization(__file__, 1842, 15), isreal_277350, *[whis_277351], **kwargs_277352)
    
    # Testing the type of an if condition (line 1842)
    if_condition_277354 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1842, 12), isreal_call_result_277353)
    # Assigning a type to the variable 'if_condition_277354' (line 1842)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1842, 12), 'if_condition_277354', if_condition_277354)
    # SSA begins for if statement (line 1842)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1843):
    
    # Assigning a BinOp to a Name (line 1843):
    # Getting the type of 'q1' (line 1843)
    q1_277355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1843, 24), 'q1')
    # Getting the type of 'whis' (line 1843)
    whis_277356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1843, 29), 'whis')
    
    # Obtaining the type of the subscript
    unicode_277357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1843, 42), 'unicode', u'iqr')
    # Getting the type of 'stats' (line 1843)
    stats_277358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1843, 36), 'stats')
    # Obtaining the member '__getitem__' of a type (line 1843)
    getitem___277359 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1843, 36), stats_277358, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1843)
    subscript_call_result_277360 = invoke(stypy.reporting.localization.Localization(__file__, 1843, 36), getitem___277359, unicode_277357)
    
    # Applying the binary operator '*' (line 1843)
    result_mul_277361 = python_operator(stypy.reporting.localization.Localization(__file__, 1843, 29), '*', whis_277356, subscript_call_result_277360)
    
    # Applying the binary operator '-' (line 1843)
    result_sub_277362 = python_operator(stypy.reporting.localization.Localization(__file__, 1843, 24), '-', q1_277355, result_mul_277361)
    
    # Assigning a type to the variable 'loval' (line 1843)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1843, 16), 'loval', result_sub_277362)
    
    # Assigning a BinOp to a Name (line 1844):
    
    # Assigning a BinOp to a Name (line 1844):
    # Getting the type of 'q3' (line 1844)
    q3_277363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 24), 'q3')
    # Getting the type of 'whis' (line 1844)
    whis_277364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 29), 'whis')
    
    # Obtaining the type of the subscript
    unicode_277365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1844, 42), 'unicode', u'iqr')
    # Getting the type of 'stats' (line 1844)
    stats_277366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 36), 'stats')
    # Obtaining the member '__getitem__' of a type (line 1844)
    getitem___277367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1844, 36), stats_277366, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1844)
    subscript_call_result_277368 = invoke(stypy.reporting.localization.Localization(__file__, 1844, 36), getitem___277367, unicode_277365)
    
    # Applying the binary operator '*' (line 1844)
    result_mul_277369 = python_operator(stypy.reporting.localization.Localization(__file__, 1844, 29), '*', whis_277364, subscript_call_result_277368)
    
    # Applying the binary operator '+' (line 1844)
    result_add_277370 = python_operator(stypy.reporting.localization.Localization(__file__, 1844, 24), '+', q3_277363, result_mul_277369)
    
    # Assigning a type to the variable 'hival' (line 1844)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1844, 16), 'hival', result_add_277370)
    # SSA branch for the else part of an if statement (line 1842)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'whis' (line 1845)
    whis_277371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1845, 17), 'whis')
    
    # Obtaining an instance of the builtin type 'list' (line 1845)
    list_277372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1845, 25), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1845)
    # Adding element type (line 1845)
    unicode_277373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1845, 26), 'unicode', u'range')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1845, 25), list_277372, unicode_277373)
    # Adding element type (line 1845)
    unicode_277374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1845, 35), 'unicode', u'limit')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1845, 25), list_277372, unicode_277374)
    # Adding element type (line 1845)
    unicode_277375 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1845, 44), 'unicode', u'limits')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1845, 25), list_277372, unicode_277375)
    # Adding element type (line 1845)
    unicode_277376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1845, 54), 'unicode', u'min/max')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1845, 25), list_277372, unicode_277376)
    
    # Applying the binary operator 'in' (line 1845)
    result_contains_277377 = python_operator(stypy.reporting.localization.Localization(__file__, 1845, 17), 'in', whis_277371, list_277372)
    
    # Testing the type of an if condition (line 1845)
    if_condition_277378 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1845, 17), result_contains_277377)
    # Assigning a type to the variable 'if_condition_277378' (line 1845)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1845, 17), 'if_condition_277378', if_condition_277378)
    # SSA begins for if statement (line 1845)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1846):
    
    # Assigning a Call to a Name (line 1846):
    
    # Call to min(...): (line 1846)
    # Processing the call arguments (line 1846)
    # Getting the type of 'x' (line 1846)
    x_277381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1846, 31), 'x', False)
    # Processing the call keyword arguments (line 1846)
    kwargs_277382 = {}
    # Getting the type of 'np' (line 1846)
    np_277379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1846, 24), 'np', False)
    # Obtaining the member 'min' of a type (line 1846)
    min_277380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1846, 24), np_277379, 'min')
    # Calling min(args, kwargs) (line 1846)
    min_call_result_277383 = invoke(stypy.reporting.localization.Localization(__file__, 1846, 24), min_277380, *[x_277381], **kwargs_277382)
    
    # Assigning a type to the variable 'loval' (line 1846)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1846, 16), 'loval', min_call_result_277383)
    
    # Assigning a Call to a Name (line 1847):
    
    # Assigning a Call to a Name (line 1847):
    
    # Call to max(...): (line 1847)
    # Processing the call arguments (line 1847)
    # Getting the type of 'x' (line 1847)
    x_277386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1847, 31), 'x', False)
    # Processing the call keyword arguments (line 1847)
    kwargs_277387 = {}
    # Getting the type of 'np' (line 1847)
    np_277384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1847, 24), 'np', False)
    # Obtaining the member 'max' of a type (line 1847)
    max_277385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1847, 24), np_277384, 'max')
    # Calling max(args, kwargs) (line 1847)
    max_call_result_277388 = invoke(stypy.reporting.localization.Localization(__file__, 1847, 24), max_277385, *[x_277386], **kwargs_277387)
    
    # Assigning a type to the variable 'hival' (line 1847)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1847, 16), 'hival', max_call_result_277388)
    # SSA branch for the else part of an if statement (line 1845)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Str to a Name (line 1849):
    
    # Assigning a Str to a Name (line 1849):
    unicode_277389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1849, 27), 'unicode', u'whis must be a float, valid string, or list of percentiles')
    # Assigning a type to the variable 'whismsg' (line 1849)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1849, 16), 'whismsg', unicode_277389)
    
    # Call to ValueError(...): (line 1851)
    # Processing the call arguments (line 1851)
    # Getting the type of 'whismsg' (line 1851)
    whismsg_277391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 33), 'whismsg', False)
    # Processing the call keyword arguments (line 1851)
    kwargs_277392 = {}
    # Getting the type of 'ValueError' (line 1851)
    ValueError_277390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 22), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1851)
    ValueError_call_result_277393 = invoke(stypy.reporting.localization.Localization(__file__, 1851, 22), ValueError_277390, *[whismsg_277391], **kwargs_277392)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1851, 16), ValueError_call_result_277393, 'raise parameter', BaseException)
    # SSA join for if statement (line 1845)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1842)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1841)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1853):
    
    # Assigning a Call to a Name (line 1853):
    
    # Call to percentile(...): (line 1853)
    # Processing the call arguments (line 1853)
    # Getting the type of 'x' (line 1853)
    x_277396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1853, 34), 'x', False)
    
    # Obtaining the type of the subscript
    int_277397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1853, 42), 'int')
    # Getting the type of 'whis' (line 1853)
    whis_277398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1853, 37), 'whis', False)
    # Obtaining the member '__getitem__' of a type (line 1853)
    getitem___277399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1853, 37), whis_277398, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1853)
    subscript_call_result_277400 = invoke(stypy.reporting.localization.Localization(__file__, 1853, 37), getitem___277399, int_277397)
    
    # Processing the call keyword arguments (line 1853)
    kwargs_277401 = {}
    # Getting the type of 'np' (line 1853)
    np_277394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1853, 20), 'np', False)
    # Obtaining the member 'percentile' of a type (line 1853)
    percentile_277395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1853, 20), np_277394, 'percentile')
    # Calling percentile(args, kwargs) (line 1853)
    percentile_call_result_277402 = invoke(stypy.reporting.localization.Localization(__file__, 1853, 20), percentile_277395, *[x_277396, subscript_call_result_277400], **kwargs_277401)
    
    # Assigning a type to the variable 'loval' (line 1853)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1853, 12), 'loval', percentile_call_result_277402)
    
    # Assigning a Call to a Name (line 1854):
    
    # Assigning a Call to a Name (line 1854):
    
    # Call to percentile(...): (line 1854)
    # Processing the call arguments (line 1854)
    # Getting the type of 'x' (line 1854)
    x_277405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 34), 'x', False)
    
    # Obtaining the type of the subscript
    int_277406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1854, 42), 'int')
    # Getting the type of 'whis' (line 1854)
    whis_277407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 37), 'whis', False)
    # Obtaining the member '__getitem__' of a type (line 1854)
    getitem___277408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1854, 37), whis_277407, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1854)
    subscript_call_result_277409 = invoke(stypy.reporting.localization.Localization(__file__, 1854, 37), getitem___277408, int_277406)
    
    # Processing the call keyword arguments (line 1854)
    kwargs_277410 = {}
    # Getting the type of 'np' (line 1854)
    np_277403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 20), 'np', False)
    # Obtaining the member 'percentile' of a type (line 1854)
    percentile_277404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1854, 20), np_277403, 'percentile')
    # Calling percentile(args, kwargs) (line 1854)
    percentile_call_result_277411 = invoke(stypy.reporting.localization.Localization(__file__, 1854, 20), percentile_277404, *[x_277405, subscript_call_result_277409], **kwargs_277410)
    
    # Assigning a type to the variable 'hival' (line 1854)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1854, 12), 'hival', percentile_call_result_277411)
    # SSA join for if statement (line 1841)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1857):
    
    # Assigning a Call to a Name (line 1857):
    
    # Call to compress(...): (line 1857)
    # Processing the call arguments (line 1857)
    
    # Getting the type of 'x' (line 1857)
    x_277414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1857, 29), 'x', False)
    # Getting the type of 'hival' (line 1857)
    hival_277415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1857, 34), 'hival', False)
    # Applying the binary operator '<=' (line 1857)
    result_le_277416 = python_operator(stypy.reporting.localization.Localization(__file__, 1857, 29), '<=', x_277414, hival_277415)
    
    # Getting the type of 'x' (line 1857)
    x_277417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1857, 41), 'x', False)
    # Processing the call keyword arguments (line 1857)
    kwargs_277418 = {}
    # Getting the type of 'np' (line 1857)
    np_277412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1857, 17), 'np', False)
    # Obtaining the member 'compress' of a type (line 1857)
    compress_277413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1857, 17), np_277412, 'compress')
    # Calling compress(args, kwargs) (line 1857)
    compress_call_result_277419 = invoke(stypy.reporting.localization.Localization(__file__, 1857, 17), compress_277413, *[result_le_277416, x_277417], **kwargs_277418)
    
    # Assigning a type to the variable 'wiskhi' (line 1857)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1857, 8), 'wiskhi', compress_call_result_277419)
    
    
    # Evaluating a boolean operation
    
    
    # Call to len(...): (line 1858)
    # Processing the call arguments (line 1858)
    # Getting the type of 'wiskhi' (line 1858)
    wiskhi_277421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1858, 15), 'wiskhi', False)
    # Processing the call keyword arguments (line 1858)
    kwargs_277422 = {}
    # Getting the type of 'len' (line 1858)
    len_277420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1858, 11), 'len', False)
    # Calling len(args, kwargs) (line 1858)
    len_call_result_277423 = invoke(stypy.reporting.localization.Localization(__file__, 1858, 11), len_277420, *[wiskhi_277421], **kwargs_277422)
    
    int_277424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1858, 26), 'int')
    # Applying the binary operator '==' (line 1858)
    result_eq_277425 = python_operator(stypy.reporting.localization.Localization(__file__, 1858, 11), '==', len_call_result_277423, int_277424)
    
    
    
    # Call to max(...): (line 1858)
    # Processing the call arguments (line 1858)
    # Getting the type of 'wiskhi' (line 1858)
    wiskhi_277428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1858, 38), 'wiskhi', False)
    # Processing the call keyword arguments (line 1858)
    kwargs_277429 = {}
    # Getting the type of 'np' (line 1858)
    np_277426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1858, 31), 'np', False)
    # Obtaining the member 'max' of a type (line 1858)
    max_277427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1858, 31), np_277426, 'max')
    # Calling max(args, kwargs) (line 1858)
    max_call_result_277430 = invoke(stypy.reporting.localization.Localization(__file__, 1858, 31), max_277427, *[wiskhi_277428], **kwargs_277429)
    
    # Getting the type of 'q3' (line 1858)
    q3_277431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1858, 48), 'q3')
    # Applying the binary operator '<' (line 1858)
    result_lt_277432 = python_operator(stypy.reporting.localization.Localization(__file__, 1858, 31), '<', max_call_result_277430, q3_277431)
    
    # Applying the binary operator 'or' (line 1858)
    result_or_keyword_277433 = python_operator(stypy.reporting.localization.Localization(__file__, 1858, 11), 'or', result_eq_277425, result_lt_277432)
    
    # Testing the type of an if condition (line 1858)
    if_condition_277434 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1858, 8), result_or_keyword_277433)
    # Assigning a type to the variable 'if_condition_277434' (line 1858)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1858, 8), 'if_condition_277434', if_condition_277434)
    # SSA begins for if statement (line 1858)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Subscript (line 1859):
    
    # Assigning a Name to a Subscript (line 1859):
    # Getting the type of 'q3' (line 1859)
    q3_277435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 30), 'q3')
    # Getting the type of 'stats' (line 1859)
    stats_277436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 12), 'stats')
    unicode_277437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1859, 18), 'unicode', u'whishi')
    # Storing an element on a container (line 1859)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1859, 12), stats_277436, (unicode_277437, q3_277435))
    # SSA branch for the else part of an if statement (line 1858)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Subscript (line 1861):
    
    # Assigning a Call to a Subscript (line 1861):
    
    # Call to max(...): (line 1861)
    # Processing the call arguments (line 1861)
    # Getting the type of 'wiskhi' (line 1861)
    wiskhi_277440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 37), 'wiskhi', False)
    # Processing the call keyword arguments (line 1861)
    kwargs_277441 = {}
    # Getting the type of 'np' (line 1861)
    np_277438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 30), 'np', False)
    # Obtaining the member 'max' of a type (line 1861)
    max_277439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1861, 30), np_277438, 'max')
    # Calling max(args, kwargs) (line 1861)
    max_call_result_277442 = invoke(stypy.reporting.localization.Localization(__file__, 1861, 30), max_277439, *[wiskhi_277440], **kwargs_277441)
    
    # Getting the type of 'stats' (line 1861)
    stats_277443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 12), 'stats')
    unicode_277444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1861, 18), 'unicode', u'whishi')
    # Storing an element on a container (line 1861)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1861, 12), stats_277443, (unicode_277444, max_call_result_277442))
    # SSA join for if statement (line 1858)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1864):
    
    # Assigning a Call to a Name (line 1864):
    
    # Call to compress(...): (line 1864)
    # Processing the call arguments (line 1864)
    
    # Getting the type of 'x' (line 1864)
    x_277447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 29), 'x', False)
    # Getting the type of 'loval' (line 1864)
    loval_277448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 34), 'loval', False)
    # Applying the binary operator '>=' (line 1864)
    result_ge_277449 = python_operator(stypy.reporting.localization.Localization(__file__, 1864, 29), '>=', x_277447, loval_277448)
    
    # Getting the type of 'x' (line 1864)
    x_277450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 41), 'x', False)
    # Processing the call keyword arguments (line 1864)
    kwargs_277451 = {}
    # Getting the type of 'np' (line 1864)
    np_277445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 17), 'np', False)
    # Obtaining the member 'compress' of a type (line 1864)
    compress_277446 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1864, 17), np_277445, 'compress')
    # Calling compress(args, kwargs) (line 1864)
    compress_call_result_277452 = invoke(stypy.reporting.localization.Localization(__file__, 1864, 17), compress_277446, *[result_ge_277449, x_277450], **kwargs_277451)
    
    # Assigning a type to the variable 'wisklo' (line 1864)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1864, 8), 'wisklo', compress_call_result_277452)
    
    
    # Evaluating a boolean operation
    
    
    # Call to len(...): (line 1865)
    # Processing the call arguments (line 1865)
    # Getting the type of 'wisklo' (line 1865)
    wisklo_277454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 15), 'wisklo', False)
    # Processing the call keyword arguments (line 1865)
    kwargs_277455 = {}
    # Getting the type of 'len' (line 1865)
    len_277453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 11), 'len', False)
    # Calling len(args, kwargs) (line 1865)
    len_call_result_277456 = invoke(stypy.reporting.localization.Localization(__file__, 1865, 11), len_277453, *[wisklo_277454], **kwargs_277455)
    
    int_277457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1865, 26), 'int')
    # Applying the binary operator '==' (line 1865)
    result_eq_277458 = python_operator(stypy.reporting.localization.Localization(__file__, 1865, 11), '==', len_call_result_277456, int_277457)
    
    
    
    # Call to min(...): (line 1865)
    # Processing the call arguments (line 1865)
    # Getting the type of 'wisklo' (line 1865)
    wisklo_277461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 38), 'wisklo', False)
    # Processing the call keyword arguments (line 1865)
    kwargs_277462 = {}
    # Getting the type of 'np' (line 1865)
    np_277459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 31), 'np', False)
    # Obtaining the member 'min' of a type (line 1865)
    min_277460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1865, 31), np_277459, 'min')
    # Calling min(args, kwargs) (line 1865)
    min_call_result_277463 = invoke(stypy.reporting.localization.Localization(__file__, 1865, 31), min_277460, *[wisklo_277461], **kwargs_277462)
    
    # Getting the type of 'q1' (line 1865)
    q1_277464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 48), 'q1')
    # Applying the binary operator '>' (line 1865)
    result_gt_277465 = python_operator(stypy.reporting.localization.Localization(__file__, 1865, 31), '>', min_call_result_277463, q1_277464)
    
    # Applying the binary operator 'or' (line 1865)
    result_or_keyword_277466 = python_operator(stypy.reporting.localization.Localization(__file__, 1865, 11), 'or', result_eq_277458, result_gt_277465)
    
    # Testing the type of an if condition (line 1865)
    if_condition_277467 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1865, 8), result_or_keyword_277466)
    # Assigning a type to the variable 'if_condition_277467' (line 1865)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1865, 8), 'if_condition_277467', if_condition_277467)
    # SSA begins for if statement (line 1865)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Subscript (line 1866):
    
    # Assigning a Name to a Subscript (line 1866):
    # Getting the type of 'q1' (line 1866)
    q1_277468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 30), 'q1')
    # Getting the type of 'stats' (line 1866)
    stats_277469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 12), 'stats')
    unicode_277470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1866, 18), 'unicode', u'whislo')
    # Storing an element on a container (line 1866)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1866, 12), stats_277469, (unicode_277470, q1_277468))
    # SSA branch for the else part of an if statement (line 1865)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Subscript (line 1868):
    
    # Assigning a Call to a Subscript (line 1868):
    
    # Call to min(...): (line 1868)
    # Processing the call arguments (line 1868)
    # Getting the type of 'wisklo' (line 1868)
    wisklo_277473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 37), 'wisklo', False)
    # Processing the call keyword arguments (line 1868)
    kwargs_277474 = {}
    # Getting the type of 'np' (line 1868)
    np_277471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 30), 'np', False)
    # Obtaining the member 'min' of a type (line 1868)
    min_277472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1868, 30), np_277471, 'min')
    # Calling min(args, kwargs) (line 1868)
    min_call_result_277475 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 30), min_277472, *[wisklo_277473], **kwargs_277474)
    
    # Getting the type of 'stats' (line 1868)
    stats_277476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 12), 'stats')
    unicode_277477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1868, 18), 'unicode', u'whislo')
    # Storing an element on a container (line 1868)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1868, 12), stats_277476, (unicode_277477, min_call_result_277475))
    # SSA join for if statement (line 1865)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Subscript (line 1871):
    
    # Assigning a Call to a Subscript (line 1871):
    
    # Call to hstack(...): (line 1871)
    # Processing the call arguments (line 1871)
    
    # Obtaining an instance of the builtin type 'list' (line 1871)
    list_277480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1871, 36), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1871)
    # Adding element type (line 1871)
    
    # Call to compress(...): (line 1872)
    # Processing the call arguments (line 1872)
    
    # Getting the type of 'x' (line 1872)
    x_277483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 24), 'x', False)
    
    # Obtaining the type of the subscript
    unicode_277484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1872, 34), 'unicode', u'whislo')
    # Getting the type of 'stats' (line 1872)
    stats_277485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 28), 'stats', False)
    # Obtaining the member '__getitem__' of a type (line 1872)
    getitem___277486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1872, 28), stats_277485, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1872)
    subscript_call_result_277487 = invoke(stypy.reporting.localization.Localization(__file__, 1872, 28), getitem___277486, unicode_277484)
    
    # Applying the binary operator '<' (line 1872)
    result_lt_277488 = python_operator(stypy.reporting.localization.Localization(__file__, 1872, 24), '<', x_277483, subscript_call_result_277487)
    
    # Getting the type of 'x' (line 1872)
    x_277489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 45), 'x', False)
    # Processing the call keyword arguments (line 1872)
    kwargs_277490 = {}
    # Getting the type of 'np' (line 1872)
    np_277481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 12), 'np', False)
    # Obtaining the member 'compress' of a type (line 1872)
    compress_277482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1872, 12), np_277481, 'compress')
    # Calling compress(args, kwargs) (line 1872)
    compress_call_result_277491 = invoke(stypy.reporting.localization.Localization(__file__, 1872, 12), compress_277482, *[result_lt_277488, x_277489], **kwargs_277490)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1871, 36), list_277480, compress_call_result_277491)
    # Adding element type (line 1871)
    
    # Call to compress(...): (line 1873)
    # Processing the call arguments (line 1873)
    
    # Getting the type of 'x' (line 1873)
    x_277494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 24), 'x', False)
    
    # Obtaining the type of the subscript
    unicode_277495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1873, 34), 'unicode', u'whishi')
    # Getting the type of 'stats' (line 1873)
    stats_277496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 28), 'stats', False)
    # Obtaining the member '__getitem__' of a type (line 1873)
    getitem___277497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1873, 28), stats_277496, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1873)
    subscript_call_result_277498 = invoke(stypy.reporting.localization.Localization(__file__, 1873, 28), getitem___277497, unicode_277495)
    
    # Applying the binary operator '>' (line 1873)
    result_gt_277499 = python_operator(stypy.reporting.localization.Localization(__file__, 1873, 24), '>', x_277494, subscript_call_result_277498)
    
    # Getting the type of 'x' (line 1873)
    x_277500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 45), 'x', False)
    # Processing the call keyword arguments (line 1873)
    kwargs_277501 = {}
    # Getting the type of 'np' (line 1873)
    np_277492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 12), 'np', False)
    # Obtaining the member 'compress' of a type (line 1873)
    compress_277493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1873, 12), np_277492, 'compress')
    # Calling compress(args, kwargs) (line 1873)
    compress_call_result_277502 = invoke(stypy.reporting.localization.Localization(__file__, 1873, 12), compress_277493, *[result_gt_277499, x_277500], **kwargs_277501)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1871, 36), list_277480, compress_call_result_277502)
    
    # Processing the call keyword arguments (line 1871)
    kwargs_277503 = {}
    # Getting the type of 'np' (line 1871)
    np_277478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 26), 'np', False)
    # Obtaining the member 'hstack' of a type (line 1871)
    hstack_277479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1871, 26), np_277478, 'hstack')
    # Calling hstack(args, kwargs) (line 1871)
    hstack_call_result_277504 = invoke(stypy.reporting.localization.Localization(__file__, 1871, 26), hstack_277479, *[list_277480], **kwargs_277503)
    
    # Getting the type of 'stats' (line 1871)
    stats_277505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 8), 'stats')
    unicode_277506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1871, 14), 'unicode', u'fliers')
    # Storing an element on a container (line 1871)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1871, 8), stats_277505, (unicode_277506, hstack_call_result_277504))
    
    # Assigning a Tuple to a Tuple (line 1877):
    
    # Assigning a Name to a Name (line 1877):
    # Getting the type of 'q1' (line 1877)
    q1_277507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 49), 'q1')
    # Assigning a type to the variable 'tuple_assignment_273672' (line 1877)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1877, 8), 'tuple_assignment_273672', q1_277507)
    
    # Assigning a Name to a Name (line 1877):
    # Getting the type of 'med' (line 1877)
    med_277508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 53), 'med')
    # Assigning a type to the variable 'tuple_assignment_273673' (line 1877)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1877, 8), 'tuple_assignment_273673', med_277508)
    
    # Assigning a Name to a Name (line 1877):
    # Getting the type of 'q3' (line 1877)
    q3_277509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 58), 'q3')
    # Assigning a type to the variable 'tuple_assignment_273674' (line 1877)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1877, 8), 'tuple_assignment_273674', q3_277509)
    
    # Assigning a Name to a Subscript (line 1877):
    # Getting the type of 'tuple_assignment_273672' (line 1877)
    tuple_assignment_273672_277510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 8), 'tuple_assignment_273672')
    # Getting the type of 'stats' (line 1877)
    stats_277511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 8), 'stats')
    unicode_277512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1877, 14), 'unicode', u'q1')
    # Storing an element on a container (line 1877)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1877, 8), stats_277511, (unicode_277512, tuple_assignment_273672_277510))
    
    # Assigning a Name to a Subscript (line 1877):
    # Getting the type of 'tuple_assignment_273673' (line 1877)
    tuple_assignment_273673_277513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 8), 'tuple_assignment_273673')
    # Getting the type of 'stats' (line 1877)
    stats_277514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 21), 'stats')
    unicode_277515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1877, 27), 'unicode', u'med')
    # Storing an element on a container (line 1877)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1877, 21), stats_277514, (unicode_277515, tuple_assignment_273673_277513))
    
    # Assigning a Name to a Subscript (line 1877):
    # Getting the type of 'tuple_assignment_273674' (line 1877)
    tuple_assignment_273674_277516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 8), 'tuple_assignment_273674')
    # Getting the type of 'stats' (line 1877)
    stats_277517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 35), 'stats')
    unicode_277518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1877, 41), 'unicode', u'q3')
    # Storing an element on a container (line 1877)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1877, 35), stats_277517, (unicode_277518, tuple_assignment_273674_277516))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'bxpstats' (line 1879)
    bxpstats_277519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1879, 11), 'bxpstats')
    # Assigning a type to the variable 'stypy_return_type' (line 1879)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1879, 4), 'stypy_return_type', bxpstats_277519)
    
    # ################# End of 'boxplot_stats(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'boxplot_stats' in the type store
    # Getting the type of 'stypy_return_type' (line 1674)
    stypy_return_type_277520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_277520)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'boxplot_stats'
    return stypy_return_type_277520

# Assigning a type to the variable 'boxplot_stats' (line 1674)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1674, 0), 'boxplot_stats', boxplot_stats)

@norecursion
def unmasked_index_ranges(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 1884)
    True_277521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 43), 'True')
    defaults = [True_277521]
    # Create a new context for function 'unmasked_index_ranges'
    module_type_store = module_type_store.open_function_context('unmasked_index_ranges', 1883, 0, False)
    
    # Passed parameters checking function
    unmasked_index_ranges.stypy_localization = localization
    unmasked_index_ranges.stypy_type_of_self = None
    unmasked_index_ranges.stypy_type_store = module_type_store
    unmasked_index_ranges.stypy_function_name = 'unmasked_index_ranges'
    unmasked_index_ranges.stypy_param_names_list = ['mask', 'compressed']
    unmasked_index_ranges.stypy_varargs_param_name = None
    unmasked_index_ranges.stypy_kwargs_param_name = None
    unmasked_index_ranges.stypy_call_defaults = defaults
    unmasked_index_ranges.stypy_call_varargs = varargs
    unmasked_index_ranges.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'unmasked_index_ranges', ['mask', 'compressed'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'unmasked_index_ranges', localization, ['mask', 'compressed'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'unmasked_index_ranges(...)' code ##################

    unicode_277522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1915, (-1)), 'unicode', u'\n    Find index ranges where *mask* is *False*.\n\n    *mask* will be flattened if it is not already 1-D.\n\n    Returns Nx2 :class:`numpy.ndarray` with each row the start and stop\n    indices for slices of the compressed :class:`numpy.ndarray`\n    corresponding to each of *N* uninterrupted runs of unmasked\n    values.  If optional argument *compressed* is *False*, it returns\n    the start and stop indices into the original :class:`numpy.ndarray`,\n    not the compressed :class:`numpy.ndarray`.  Returns *None* if there\n    are no unmasked values.\n\n    Example::\n\n      y = ma.array(np.arange(5), mask = [0,0,1,0,0])\n      ii = unmasked_index_ranges(ma.getmaskarray(y))\n      # returns array [[0,2,] [2,4,]]\n\n      y.compressed()[ii[1,0]:ii[1,1]]\n      # returns array [3,4,]\n\n      ii = unmasked_index_ranges(ma.getmaskarray(y), compressed=False)\n      # returns array [[0, 2], [3, 5]]\n\n      y.filled()[ii[1,0]:ii[1,1]]\n      # returns array [3,4,]\n\n    Prior to the transforms refactoring, this was used to support\n    masked arrays in Line2D.\n    ')
    
    # Assigning a Call to a Name (line 1916):
    
    # Assigning a Call to a Name (line 1916):
    
    # Call to reshape(...): (line 1916)
    # Processing the call arguments (line 1916)
    # Getting the type of 'mask' (line 1916)
    mask_277525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 24), 'mask', False)
    # Obtaining the member 'size' of a type (line 1916)
    size_277526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1916, 24), mask_277525, 'size')
    # Processing the call keyword arguments (line 1916)
    kwargs_277527 = {}
    # Getting the type of 'mask' (line 1916)
    mask_277523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 11), 'mask', False)
    # Obtaining the member 'reshape' of a type (line 1916)
    reshape_277524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1916, 11), mask_277523, 'reshape')
    # Calling reshape(args, kwargs) (line 1916)
    reshape_call_result_277528 = invoke(stypy.reporting.localization.Localization(__file__, 1916, 11), reshape_277524, *[size_277526], **kwargs_277527)
    
    # Assigning a type to the variable 'mask' (line 1916)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1916, 4), 'mask', reshape_call_result_277528)
    
    # Assigning a Call to a Name (line 1917):
    
    # Assigning a Call to a Name (line 1917):
    
    # Call to concatenate(...): (line 1917)
    # Processing the call arguments (line 1917)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1917)
    tuple_277531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1917, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1917)
    # Adding element type (line 1917)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1917)
    tuple_277532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1917, 25), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1917)
    # Adding element type (line 1917)
    int_277533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1917, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1917, 25), tuple_277532, int_277533)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1917, 24), tuple_277531, tuple_277532)
    # Adding element type (line 1917)
    # Getting the type of 'mask' (line 1917)
    mask_277534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1917, 30), 'mask', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1917, 24), tuple_277531, mask_277534)
    # Adding element type (line 1917)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1917)
    tuple_277535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1917, 37), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1917)
    # Adding element type (line 1917)
    int_277536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1917, 37), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1917, 37), tuple_277535, int_277536)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1917, 24), tuple_277531, tuple_277535)
    
    # Processing the call keyword arguments (line 1917)
    kwargs_277537 = {}
    # Getting the type of 'np' (line 1917)
    np_277529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1917, 8), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 1917)
    concatenate_277530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1917, 8), np_277529, 'concatenate')
    # Calling concatenate(args, kwargs) (line 1917)
    concatenate_call_result_277538 = invoke(stypy.reporting.localization.Localization(__file__, 1917, 8), concatenate_277530, *[tuple_277531], **kwargs_277537)
    
    # Assigning a type to the variable 'm' (line 1917)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1917, 4), 'm', concatenate_call_result_277538)
    
    # Assigning a Call to a Name (line 1918):
    
    # Assigning a Call to a Name (line 1918):
    
    # Call to arange(...): (line 1918)
    # Processing the call arguments (line 1918)
    
    # Call to len(...): (line 1918)
    # Processing the call arguments (line 1918)
    # Getting the type of 'mask' (line 1918)
    mask_277542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1918, 28), 'mask', False)
    # Processing the call keyword arguments (line 1918)
    kwargs_277543 = {}
    # Getting the type of 'len' (line 1918)
    len_277541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1918, 24), 'len', False)
    # Calling len(args, kwargs) (line 1918)
    len_call_result_277544 = invoke(stypy.reporting.localization.Localization(__file__, 1918, 24), len_277541, *[mask_277542], **kwargs_277543)
    
    int_277545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1918, 36), 'int')
    # Applying the binary operator '+' (line 1918)
    result_add_277546 = python_operator(stypy.reporting.localization.Localization(__file__, 1918, 24), '+', len_call_result_277544, int_277545)
    
    # Processing the call keyword arguments (line 1918)
    kwargs_277547 = {}
    # Getting the type of 'np' (line 1918)
    np_277539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1918, 14), 'np', False)
    # Obtaining the member 'arange' of a type (line 1918)
    arange_277540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1918, 14), np_277539, 'arange')
    # Calling arange(args, kwargs) (line 1918)
    arange_call_result_277548 = invoke(stypy.reporting.localization.Localization(__file__, 1918, 14), arange_277540, *[result_add_277546], **kwargs_277547)
    
    # Assigning a type to the variable 'indices' (line 1918)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1918, 4), 'indices', arange_call_result_277548)
    
    # Assigning a BinOp to a Name (line 1919):
    
    # Assigning a BinOp to a Name (line 1919):
    
    # Obtaining the type of the subscript
    int_277549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1919, 13), 'int')
    slice_277550 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1919, 11), int_277549, None, None)
    # Getting the type of 'm' (line 1919)
    m_277551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1919, 11), 'm')
    # Obtaining the member '__getitem__' of a type (line 1919)
    getitem___277552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1919, 11), m_277551, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1919)
    subscript_call_result_277553 = invoke(stypy.reporting.localization.Localization(__file__, 1919, 11), getitem___277552, slice_277550)
    
    
    # Obtaining the type of the subscript
    int_277554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1919, 22), 'int')
    slice_277555 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1919, 19), None, int_277554, None)
    # Getting the type of 'm' (line 1919)
    m_277556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1919, 19), 'm')
    # Obtaining the member '__getitem__' of a type (line 1919)
    getitem___277557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1919, 19), m_277556, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1919)
    subscript_call_result_277558 = invoke(stypy.reporting.localization.Localization(__file__, 1919, 19), getitem___277557, slice_277555)
    
    # Applying the binary operator '-' (line 1919)
    result_sub_277559 = python_operator(stypy.reporting.localization.Localization(__file__, 1919, 11), '-', subscript_call_result_277553, subscript_call_result_277558)
    
    # Assigning a type to the variable 'mdif' (line 1919)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1919, 4), 'mdif', result_sub_277559)
    
    # Assigning a Call to a Name (line 1920):
    
    # Assigning a Call to a Name (line 1920):
    
    # Call to compress(...): (line 1920)
    # Processing the call arguments (line 1920)
    
    # Getting the type of 'mdif' (line 1920)
    mdif_277562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 21), 'mdif', False)
    int_277563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1920, 29), 'int')
    # Applying the binary operator '==' (line 1920)
    result_eq_277564 = python_operator(stypy.reporting.localization.Localization(__file__, 1920, 21), '==', mdif_277562, int_277563)
    
    # Getting the type of 'indices' (line 1920)
    indices_277565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 33), 'indices', False)
    # Processing the call keyword arguments (line 1920)
    kwargs_277566 = {}
    # Getting the type of 'np' (line 1920)
    np_277560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 9), 'np', False)
    # Obtaining the member 'compress' of a type (line 1920)
    compress_277561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1920, 9), np_277560, 'compress')
    # Calling compress(args, kwargs) (line 1920)
    compress_call_result_277567 = invoke(stypy.reporting.localization.Localization(__file__, 1920, 9), compress_277561, *[result_eq_277564, indices_277565], **kwargs_277566)
    
    # Assigning a type to the variable 'i0' (line 1920)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1920, 4), 'i0', compress_call_result_277567)
    
    # Assigning a Call to a Name (line 1921):
    
    # Assigning a Call to a Name (line 1921):
    
    # Call to compress(...): (line 1921)
    # Processing the call arguments (line 1921)
    
    # Getting the type of 'mdif' (line 1921)
    mdif_277570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 21), 'mdif', False)
    int_277571 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1921, 29), 'int')
    # Applying the binary operator '==' (line 1921)
    result_eq_277572 = python_operator(stypy.reporting.localization.Localization(__file__, 1921, 21), '==', mdif_277570, int_277571)
    
    # Getting the type of 'indices' (line 1921)
    indices_277573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 32), 'indices', False)
    # Processing the call keyword arguments (line 1921)
    kwargs_277574 = {}
    # Getting the type of 'np' (line 1921)
    np_277568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 9), 'np', False)
    # Obtaining the member 'compress' of a type (line 1921)
    compress_277569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1921, 9), np_277568, 'compress')
    # Calling compress(args, kwargs) (line 1921)
    compress_call_result_277575 = invoke(stypy.reporting.localization.Localization(__file__, 1921, 9), compress_277569, *[result_eq_277572, indices_277573], **kwargs_277574)
    
    # Assigning a type to the variable 'i1' (line 1921)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1921, 4), 'i1', compress_call_result_277575)
    # Evaluating assert statement condition
    
    
    # Call to len(...): (line 1922)
    # Processing the call arguments (line 1922)
    # Getting the type of 'i0' (line 1922)
    i0_277577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 15), 'i0', False)
    # Processing the call keyword arguments (line 1922)
    kwargs_277578 = {}
    # Getting the type of 'len' (line 1922)
    len_277576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 11), 'len', False)
    # Calling len(args, kwargs) (line 1922)
    len_call_result_277579 = invoke(stypy.reporting.localization.Localization(__file__, 1922, 11), len_277576, *[i0_277577], **kwargs_277578)
    
    
    # Call to len(...): (line 1922)
    # Processing the call arguments (line 1922)
    # Getting the type of 'i1' (line 1922)
    i1_277581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 26), 'i1', False)
    # Processing the call keyword arguments (line 1922)
    kwargs_277582 = {}
    # Getting the type of 'len' (line 1922)
    len_277580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 22), 'len', False)
    # Calling len(args, kwargs) (line 1922)
    len_call_result_277583 = invoke(stypy.reporting.localization.Localization(__file__, 1922, 22), len_277580, *[i1_277581], **kwargs_277582)
    
    # Applying the binary operator '==' (line 1922)
    result_eq_277584 = python_operator(stypy.reporting.localization.Localization(__file__, 1922, 11), '==', len_call_result_277579, len_call_result_277583)
    
    
    
    
    # Call to len(...): (line 1923)
    # Processing the call arguments (line 1923)
    # Getting the type of 'i1' (line 1923)
    i1_277586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 11), 'i1', False)
    # Processing the call keyword arguments (line 1923)
    kwargs_277587 = {}
    # Getting the type of 'len' (line 1923)
    len_277585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 7), 'len', False)
    # Calling len(args, kwargs) (line 1923)
    len_call_result_277588 = invoke(stypy.reporting.localization.Localization(__file__, 1923, 7), len_277585, *[i1_277586], **kwargs_277587)
    
    int_277589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1923, 18), 'int')
    # Applying the binary operator '==' (line 1923)
    result_eq_277590 = python_operator(stypy.reporting.localization.Localization(__file__, 1923, 7), '==', len_call_result_277588, int_277589)
    
    # Testing the type of an if condition (line 1923)
    if_condition_277591 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1923, 4), result_eq_277590)
    # Assigning a type to the variable 'if_condition_277591' (line 1923)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1923, 4), 'if_condition_277591', if_condition_277591)
    # SSA begins for if statement (line 1923)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'None' (line 1924)
    None_277592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 15), 'None')
    # Assigning a type to the variable 'stypy_return_type' (line 1924)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1924, 8), 'stypy_return_type', None_277592)
    # SSA join for if statement (line 1923)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'compressed' (line 1925)
    compressed_277593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 11), 'compressed')
    # Applying the 'not' unary operator (line 1925)
    result_not__277594 = python_operator(stypy.reporting.localization.Localization(__file__, 1925, 7), 'not', compressed_277593)
    
    # Testing the type of an if condition (line 1925)
    if_condition_277595 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1925, 4), result_not__277594)
    # Assigning a type to the variable 'if_condition_277595' (line 1925)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1925, 4), 'if_condition_277595', if_condition_277595)
    # SSA begins for if statement (line 1925)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to concatenate(...): (line 1926)
    # Processing the call arguments (line 1926)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1926)
    tuple_277598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1926, 31), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1926)
    # Adding element type (line 1926)
    
    # Obtaining the type of the subscript
    slice_277599 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1926, 31), None, None, None)
    # Getting the type of 'np' (line 1926)
    np_277600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 37), 'np', False)
    # Obtaining the member 'newaxis' of a type (line 1926)
    newaxis_277601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1926, 37), np_277600, 'newaxis')
    # Getting the type of 'i0' (line 1926)
    i0_277602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 31), 'i0', False)
    # Obtaining the member '__getitem__' of a type (line 1926)
    getitem___277603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1926, 31), i0_277602, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1926)
    subscript_call_result_277604 = invoke(stypy.reporting.localization.Localization(__file__, 1926, 31), getitem___277603, (slice_277599, newaxis_277601))
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1926, 31), tuple_277598, subscript_call_result_277604)
    # Adding element type (line 1926)
    
    # Obtaining the type of the subscript
    slice_277605 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1926, 50), None, None, None)
    # Getting the type of 'np' (line 1926)
    np_277606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 56), 'np', False)
    # Obtaining the member 'newaxis' of a type (line 1926)
    newaxis_277607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1926, 56), np_277606, 'newaxis')
    # Getting the type of 'i1' (line 1926)
    i1_277608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 50), 'i1', False)
    # Obtaining the member '__getitem__' of a type (line 1926)
    getitem___277609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1926, 50), i1_277608, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1926)
    subscript_call_result_277610 = invoke(stypy.reporting.localization.Localization(__file__, 1926, 50), getitem___277609, (slice_277605, newaxis_277607))
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1926, 31), tuple_277598, subscript_call_result_277610)
    
    # Processing the call keyword arguments (line 1926)
    int_277611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1926, 75), 'int')
    keyword_277612 = int_277611
    kwargs_277613 = {'axis': keyword_277612}
    # Getting the type of 'np' (line 1926)
    np_277596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 15), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 1926)
    concatenate_277597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1926, 15), np_277596, 'concatenate')
    # Calling concatenate(args, kwargs) (line 1926)
    concatenate_call_result_277614 = invoke(stypy.reporting.localization.Localization(__file__, 1926, 15), concatenate_277597, *[tuple_277598], **kwargs_277613)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1926)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1926, 8), 'stypy_return_type', concatenate_call_result_277614)
    # SSA join for if statement (line 1925)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1927):
    
    # Assigning a BinOp to a Name (line 1927):
    # Getting the type of 'i1' (line 1927)
    i1_277615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1927, 17), 'i1')
    # Getting the type of 'i0' (line 1927)
    i0_277616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1927, 22), 'i0')
    # Applying the binary operator '-' (line 1927)
    result_sub_277617 = python_operator(stypy.reporting.localization.Localization(__file__, 1927, 17), '-', i1_277615, i0_277616)
    
    # Assigning a type to the variable 'seglengths' (line 1927)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1927, 4), 'seglengths', result_sub_277617)
    
    # Assigning a Call to a Name (line 1928):
    
    # Assigning a Call to a Name (line 1928):
    
    # Call to cumsum(...): (line 1928)
    # Processing the call arguments (line 1928)
    # Getting the type of 'seglengths' (line 1928)
    seglengths_277620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 28), 'seglengths', False)
    # Processing the call keyword arguments (line 1928)
    kwargs_277621 = {}
    # Getting the type of 'np' (line 1928)
    np_277618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 18), 'np', False)
    # Obtaining the member 'cumsum' of a type (line 1928)
    cumsum_277619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1928, 18), np_277618, 'cumsum')
    # Calling cumsum(args, kwargs) (line 1928)
    cumsum_call_result_277622 = invoke(stypy.reporting.localization.Localization(__file__, 1928, 18), cumsum_277619, *[seglengths_277620], **kwargs_277621)
    
    # Assigning a type to the variable 'breakpoints' (line 1928)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1928, 4), 'breakpoints', cumsum_call_result_277622)
    
    # Assigning a Call to a Name (line 1929):
    
    # Assigning a Call to a Name (line 1929):
    
    # Call to concatenate(...): (line 1929)
    # Processing the call arguments (line 1929)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1929)
    tuple_277625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1929, 26), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1929)
    # Adding element type (line 1929)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1929)
    tuple_277626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1929, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1929)
    # Adding element type (line 1929)
    int_277627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1929, 27), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1929, 27), tuple_277626, int_277627)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1929, 26), tuple_277625, tuple_277626)
    # Adding element type (line 1929)
    
    # Obtaining the type of the subscript
    int_277628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1929, 45), 'int')
    slice_277629 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1929, 32), None, int_277628, None)
    # Getting the type of 'breakpoints' (line 1929)
    breakpoints_277630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1929, 32), 'breakpoints', False)
    # Obtaining the member '__getitem__' of a type (line 1929)
    getitem___277631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1929, 32), breakpoints_277630, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1929)
    subscript_call_result_277632 = invoke(stypy.reporting.localization.Localization(__file__, 1929, 32), getitem___277631, slice_277629)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1929, 26), tuple_277625, subscript_call_result_277632)
    
    # Processing the call keyword arguments (line 1929)
    kwargs_277633 = {}
    # Getting the type of 'np' (line 1929)
    np_277623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1929, 10), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 1929)
    concatenate_277624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1929, 10), np_277623, 'concatenate')
    # Calling concatenate(args, kwargs) (line 1929)
    concatenate_call_result_277634 = invoke(stypy.reporting.localization.Localization(__file__, 1929, 10), concatenate_277624, *[tuple_277625], **kwargs_277633)
    
    # Assigning a type to the variable 'ic0' (line 1929)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1929, 4), 'ic0', concatenate_call_result_277634)
    
    # Assigning a Name to a Name (line 1930):
    
    # Assigning a Name to a Name (line 1930):
    # Getting the type of 'breakpoints' (line 1930)
    breakpoints_277635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1930, 10), 'breakpoints')
    # Assigning a type to the variable 'ic1' (line 1930)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1930, 4), 'ic1', breakpoints_277635)
    
    # Call to concatenate(...): (line 1931)
    # Processing the call arguments (line 1931)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1931)
    tuple_277638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1931, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1931)
    # Adding element type (line 1931)
    
    # Obtaining the type of the subscript
    slice_277639 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1931, 27), None, None, None)
    # Getting the type of 'np' (line 1931)
    np_277640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 34), 'np', False)
    # Obtaining the member 'newaxis' of a type (line 1931)
    newaxis_277641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1931, 34), np_277640, 'newaxis')
    # Getting the type of 'ic0' (line 1931)
    ic0_277642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 27), 'ic0', False)
    # Obtaining the member '__getitem__' of a type (line 1931)
    getitem___277643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1931, 27), ic0_277642, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1931)
    subscript_call_result_277644 = invoke(stypy.reporting.localization.Localization(__file__, 1931, 27), getitem___277643, (slice_277639, newaxis_277641))
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1931, 27), tuple_277638, subscript_call_result_277644)
    # Adding element type (line 1931)
    
    # Obtaining the type of the subscript
    slice_277645 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1931, 47), None, None, None)
    # Getting the type of 'np' (line 1931)
    np_277646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 54), 'np', False)
    # Obtaining the member 'newaxis' of a type (line 1931)
    newaxis_277647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1931, 54), np_277646, 'newaxis')
    # Getting the type of 'ic1' (line 1931)
    ic1_277648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 47), 'ic1', False)
    # Obtaining the member '__getitem__' of a type (line 1931)
    getitem___277649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1931, 47), ic1_277648, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1931)
    subscript_call_result_277650 = invoke(stypy.reporting.localization.Localization(__file__, 1931, 47), getitem___277649, (slice_277645, newaxis_277647))
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1931, 27), tuple_277638, subscript_call_result_277650)
    
    # Processing the call keyword arguments (line 1931)
    int_277651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1931, 73), 'int')
    keyword_277652 = int_277651
    kwargs_277653 = {'axis': keyword_277652}
    # Getting the type of 'np' (line 1931)
    np_277636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 11), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 1931)
    concatenate_277637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1931, 11), np_277636, 'concatenate')
    # Calling concatenate(args, kwargs) (line 1931)
    concatenate_call_result_277654 = invoke(stypy.reporting.localization.Localization(__file__, 1931, 11), concatenate_277637, *[tuple_277638], **kwargs_277653)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1931)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1931, 4), 'stypy_return_type', concatenate_call_result_277654)
    
    # ################# End of 'unmasked_index_ranges(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'unmasked_index_ranges' in the type store
    # Getting the type of 'stypy_return_type' (line 1883)
    stypy_return_type_277655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1883, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_277655)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'unmasked_index_ranges'
    return stypy_return_type_277655

# Assigning a type to the variable 'unmasked_index_ranges' (line 1883)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1883, 0), 'unmasked_index_ranges', unmasked_index_ranges)

# Assigning a Dict to a Name (line 1936):

# Assigning a Dict to a Name (line 1936):

# Obtaining an instance of the builtin type 'dict' (line 1936)
dict_277656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1936, 12), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 1936)
# Adding element type (key, value) (line 1936)
unicode_277657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1936, 13), 'unicode', u'-')
unicode_277658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1936, 18), 'unicode', u'solid')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1936, 12), dict_277656, (unicode_277657, unicode_277658))
# Adding element type (key, value) (line 1936)
unicode_277659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1936, 27), 'unicode', u'--')
unicode_277660 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1936, 33), 'unicode', u'dashed')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1936, 12), dict_277656, (unicode_277659, unicode_277660))
# Adding element type (key, value) (line 1936)
unicode_277661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1936, 43), 'unicode', u'-.')
unicode_277662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1936, 49), 'unicode', u'dashdot')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1936, 12), dict_277656, (unicode_277661, unicode_277662))
# Adding element type (key, value) (line 1936)
unicode_277663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1936, 60), 'unicode', u':')
unicode_277664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1936, 65), 'unicode', u'dotted')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1936, 12), dict_277656, (unicode_277663, unicode_277664))

# Assigning a type to the variable 'ls_mapper' (line 1936)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1936, 0), 'ls_mapper', dict_277656)

# Assigning a DictComp to a Name (line 1937):

# Assigning a DictComp to a Name (line 1937):
# Calculating dict comprehension
module_type_store = module_type_store.open_function_context('dict comprehension expression', 1937, 15, True)
# Calculating comprehension expression

# Call to iteritems(...): (line 1937)
# Processing the call arguments (line 1937)
# Getting the type of 'ls_mapper' (line 1937)
ls_mapper_277669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 46), 'ls_mapper', False)
# Processing the call keyword arguments (line 1937)
kwargs_277670 = {}
# Getting the type of 'six' (line 1937)
six_277667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 32), 'six', False)
# Obtaining the member 'iteritems' of a type (line 1937)
iteritems_277668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1937, 32), six_277667, 'iteritems')
# Calling iteritems(args, kwargs) (line 1937)
iteritems_call_result_277671 = invoke(stypy.reporting.localization.Localization(__file__, 1937, 32), iteritems_277668, *[ls_mapper_277669], **kwargs_277670)

comprehension_277672 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1937, 15), iteritems_call_result_277671)
# Assigning a type to the variable 'k' (line 1937)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1937, 15), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1937, 15), comprehension_277672))
# Assigning a type to the variable 'v' (line 1937)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1937, 15), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1937, 15), comprehension_277672))
# Getting the type of 'v' (line 1937)
v_277665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 15), 'v')
# Getting the type of 'k' (line 1937)
k_277666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 18), 'k')
dict_277673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1937, 15), 'dict')
# Destroy the current context
module_type_store = module_type_store.close_function_context()
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1937, 15), dict_277673, (v_277665, k_277666))
# Assigning a type to the variable 'ls_mapper_r' (line 1937)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1937, 0), 'ls_mapper_r', dict_277673)

@norecursion
def align_iterators(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'align_iterators'
    module_type_store = module_type_store.open_function_context('align_iterators', 1940, 0, False)
    
    # Passed parameters checking function
    align_iterators.stypy_localization = localization
    align_iterators.stypy_type_of_self = None
    align_iterators.stypy_type_store = module_type_store
    align_iterators.stypy_function_name = 'align_iterators'
    align_iterators.stypy_param_names_list = ['func']
    align_iterators.stypy_varargs_param_name = 'iterables'
    align_iterators.stypy_kwargs_param_name = None
    align_iterators.stypy_call_defaults = defaults
    align_iterators.stypy_call_varargs = varargs
    align_iterators.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'align_iterators', ['func'], 'iterables', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'align_iterators', localization, ['func'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'align_iterators(...)' code ##################

    unicode_277674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1948, (-1)), 'unicode', u'\n    This generator takes a bunch of iterables that are ordered by func\n    It sends out ordered tuples::\n\n       (func(row), [rows from all iterators matching func(row)])\n\n    It is used by :func:`matplotlib.mlab.recs_join` to join record arrays\n    ')
    # Declaration of the 'myiter' class

    class myiter:

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 1950, 8, False)
            # Assigning a type to the variable 'self' (line 1951)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1951, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'myiter.__init__', ['it'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, ['it'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            
            # Assigning a Name to a Attribute (line 1951):
            
            # Assigning a Name to a Attribute (line 1951):
            # Getting the type of 'it' (line 1951)
            it_277675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1951, 22), 'it')
            # Getting the type of 'self' (line 1951)
            self_277676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1951, 12), 'self')
            # Setting the type of the member 'it' of a type (line 1951)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1951, 12), self_277676, 'it', it_277675)
            
            # Multiple assignment of 2 elements.
            
            # Assigning a Name to a Attribute (line 1952):
            # Getting the type of 'None' (line 1952)
            None_277677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 36), 'None')
            # Getting the type of 'self' (line 1952)
            self_277678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 23), 'self')
            # Setting the type of the member 'value' of a type (line 1952)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1952, 23), self_277678, 'value', None_277677)
            
            # Assigning a Attribute to a Attribute (line 1952):
            # Getting the type of 'self' (line 1952)
            self_277679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 23), 'self')
            # Obtaining the member 'value' of a type (line 1952)
            value_277680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1952, 23), self_277679, 'value')
            # Getting the type of 'self' (line 1952)
            self_277681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 12), 'self')
            # Setting the type of the member 'key' of a type (line 1952)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1952, 12), self_277681, 'key', value_277680)
            
            # Call to iternext(...): (line 1953)
            # Processing the call keyword arguments (line 1953)
            kwargs_277684 = {}
            # Getting the type of 'self' (line 1953)
            self_277682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1953, 12), 'self', False)
            # Obtaining the member 'iternext' of a type (line 1953)
            iternext_277683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1953, 12), self_277682, 'iternext')
            # Calling iternext(args, kwargs) (line 1953)
            iternext_call_result_277685 = invoke(stypy.reporting.localization.Localization(__file__, 1953, 12), iternext_277683, *[], **kwargs_277684)
            
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()


        @norecursion
        def iternext(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'iternext'
            module_type_store = module_type_store.open_function_context('iternext', 1955, 8, False)
            # Assigning a type to the variable 'self' (line 1956)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1956, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            myiter.iternext.__dict__.__setitem__('stypy_localization', localization)
            myiter.iternext.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            myiter.iternext.__dict__.__setitem__('stypy_type_store', module_type_store)
            myiter.iternext.__dict__.__setitem__('stypy_function_name', 'myiter.iternext')
            myiter.iternext.__dict__.__setitem__('stypy_param_names_list', [])
            myiter.iternext.__dict__.__setitem__('stypy_varargs_param_name', None)
            myiter.iternext.__dict__.__setitem__('stypy_kwargs_param_name', None)
            myiter.iternext.__dict__.__setitem__('stypy_call_defaults', defaults)
            myiter.iternext.__dict__.__setitem__('stypy_call_varargs', varargs)
            myiter.iternext.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            myiter.iternext.__dict__.__setitem__('stypy_declared_arg_number', 1)
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'myiter.iternext', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'iternext', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'iternext(...)' code ##################

            
            
            # SSA begins for try-except statement (line 1956)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            # Assigning a Call to a Attribute (line 1957):
            
            # Assigning a Call to a Attribute (line 1957):
            
            # Call to next(...): (line 1957)
            # Processing the call arguments (line 1957)
            # Getting the type of 'self' (line 1957)
            self_277687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1957, 34), 'self', False)
            # Obtaining the member 'it' of a type (line 1957)
            it_277688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1957, 34), self_277687, 'it')
            # Processing the call keyword arguments (line 1957)
            kwargs_277689 = {}
            # Getting the type of 'next' (line 1957)
            next_277686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1957, 29), 'next', False)
            # Calling next(args, kwargs) (line 1957)
            next_call_result_277690 = invoke(stypy.reporting.localization.Localization(__file__, 1957, 29), next_277686, *[it_277688], **kwargs_277689)
            
            # Getting the type of 'self' (line 1957)
            self_277691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1957, 16), 'self')
            # Setting the type of the member 'value' of a type (line 1957)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1957, 16), self_277691, 'value', next_call_result_277690)
            
            # Assigning a Call to a Attribute (line 1958):
            
            # Assigning a Call to a Attribute (line 1958):
            
            # Call to func(...): (line 1958)
            # Processing the call arguments (line 1958)
            # Getting the type of 'self' (line 1958)
            self_277693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1958, 32), 'self', False)
            # Obtaining the member 'value' of a type (line 1958)
            value_277694 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1958, 32), self_277693, 'value')
            # Processing the call keyword arguments (line 1958)
            kwargs_277695 = {}
            # Getting the type of 'func' (line 1958)
            func_277692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1958, 27), 'func', False)
            # Calling func(args, kwargs) (line 1958)
            func_call_result_277696 = invoke(stypy.reporting.localization.Localization(__file__, 1958, 27), func_277692, *[value_277694], **kwargs_277695)
            
            # Getting the type of 'self' (line 1958)
            self_277697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1958, 16), 'self')
            # Setting the type of the member 'key' of a type (line 1958)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1958, 16), self_277697, 'key', func_call_result_277696)
            # SSA branch for the except part of a try statement (line 1956)
            # SSA branch for the except 'StopIteration' branch of a try statement (line 1956)
            module_type_store.open_ssa_branch('except')
            
            # Multiple assignment of 2 elements.
            
            # Assigning a Name to a Attribute (line 1960):
            # Getting the type of 'None' (line 1960)
            None_277698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1960, 40), 'None')
            # Getting the type of 'self' (line 1960)
            self_277699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1960, 29), 'self')
            # Setting the type of the member 'key' of a type (line 1960)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1960, 29), self_277699, 'key', None_277698)
            
            # Assigning a Attribute to a Attribute (line 1960):
            # Getting the type of 'self' (line 1960)
            self_277700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1960, 29), 'self')
            # Obtaining the member 'key' of a type (line 1960)
            key_277701 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1960, 29), self_277700, 'key')
            # Getting the type of 'self' (line 1960)
            self_277702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1960, 16), 'self')
            # Setting the type of the member 'value' of a type (line 1960)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1960, 16), self_277702, 'value', key_277701)
            # SSA join for try-except statement (line 1956)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # ################# End of 'iternext(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'iternext' in the type store
            # Getting the type of 'stypy_return_type' (line 1955)
            stypy_return_type_277703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1955, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_277703)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'iternext'
            return stypy_return_type_277703


        @norecursion
        def __call__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '__call__'
            module_type_store = module_type_store.open_function_context('__call__', 1962, 8, False)
            # Assigning a type to the variable 'self' (line 1963)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1963, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            myiter.__call__.__dict__.__setitem__('stypy_localization', localization)
            myiter.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            myiter.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
            myiter.__call__.__dict__.__setitem__('stypy_function_name', 'myiter.__call__')
            myiter.__call__.__dict__.__setitem__('stypy_param_names_list', ['key'])
            myiter.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
            myiter.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
            myiter.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
            myiter.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
            myiter.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            myiter.__call__.__dict__.__setitem__('stypy_declared_arg_number', 2)
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'myiter.__call__', ['key'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, '__call__', localization, ['key'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__call__(...)' code ##################

            
            # Assigning a Name to a Name (line 1963):
            
            # Assigning a Name to a Name (line 1963):
            # Getting the type of 'None' (line 1963)
            None_277704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 21), 'None')
            # Assigning a type to the variable 'retval' (line 1963)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1963, 12), 'retval', None_277704)
            
            
            # Getting the type of 'key' (line 1964)
            key_277705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1964, 15), 'key')
            # Getting the type of 'self' (line 1964)
            self_277706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1964, 22), 'self')
            # Obtaining the member 'key' of a type (line 1964)
            key_277707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1964, 22), self_277706, 'key')
            # Applying the binary operator '==' (line 1964)
            result_eq_277708 = python_operator(stypy.reporting.localization.Localization(__file__, 1964, 15), '==', key_277705, key_277707)
            
            # Testing the type of an if condition (line 1964)
            if_condition_277709 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1964, 12), result_eq_277708)
            # Assigning a type to the variable 'if_condition_277709' (line 1964)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1964, 12), 'if_condition_277709', if_condition_277709)
            # SSA begins for if statement (line 1964)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Attribute to a Name (line 1965):
            
            # Assigning a Attribute to a Name (line 1965):
            # Getting the type of 'self' (line 1965)
            self_277710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1965, 25), 'self')
            # Obtaining the member 'value' of a type (line 1965)
            value_277711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1965, 25), self_277710, 'value')
            # Assigning a type to the variable 'retval' (line 1965)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1965, 16), 'retval', value_277711)
            
            # Call to iternext(...): (line 1966)
            # Processing the call keyword arguments (line 1966)
            kwargs_277714 = {}
            # Getting the type of 'self' (line 1966)
            self_277712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1966, 16), 'self', False)
            # Obtaining the member 'iternext' of a type (line 1966)
            iternext_277713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1966, 16), self_277712, 'iternext')
            # Calling iternext(args, kwargs) (line 1966)
            iternext_call_result_277715 = invoke(stypy.reporting.localization.Localization(__file__, 1966, 16), iternext_277713, *[], **kwargs_277714)
            
            # SSA branch for the else part of an if statement (line 1964)
            module_type_store.open_ssa_branch('else')
            
            
            # Evaluating a boolean operation
            # Getting the type of 'self' (line 1967)
            self_277716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1967, 17), 'self')
            # Obtaining the member 'key' of a type (line 1967)
            key_277717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1967, 17), self_277716, 'key')
            
            # Getting the type of 'key' (line 1967)
            key_277718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1967, 30), 'key')
            # Getting the type of 'self' (line 1967)
            self_277719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1967, 36), 'self')
            # Obtaining the member 'key' of a type (line 1967)
            key_277720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1967, 36), self_277719, 'key')
            # Applying the binary operator '>' (line 1967)
            result_gt_277721 = python_operator(stypy.reporting.localization.Localization(__file__, 1967, 30), '>', key_277718, key_277720)
            
            # Applying the binary operator 'and' (line 1967)
            result_and_keyword_277722 = python_operator(stypy.reporting.localization.Localization(__file__, 1967, 17), 'and', key_277717, result_gt_277721)
            
            # Testing the type of an if condition (line 1967)
            if_condition_277723 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1967, 17), result_and_keyword_277722)
            # Assigning a type to the variable 'if_condition_277723' (line 1967)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1967, 17), 'if_condition_277723', if_condition_277723)
            # SSA begins for if statement (line 1967)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to ValueError(...): (line 1968)
            # Processing the call arguments (line 1968)
            unicode_277725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1968, 33), 'unicode', u'Iterator has been left behind')
            # Processing the call keyword arguments (line 1968)
            kwargs_277726 = {}
            # Getting the type of 'ValueError' (line 1968)
            ValueError_277724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1968, 22), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 1968)
            ValueError_call_result_277727 = invoke(stypy.reporting.localization.Localization(__file__, 1968, 22), ValueError_277724, *[unicode_277725], **kwargs_277726)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1968, 16), ValueError_call_result_277727, 'raise parameter', BaseException)
            # SSA join for if statement (line 1967)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 1964)
            module_type_store = module_type_store.join_ssa_context()
            
            # Getting the type of 'retval' (line 1969)
            retval_277728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1969, 19), 'retval')
            # Assigning a type to the variable 'stypy_return_type' (line 1969)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1969, 12), 'stypy_return_type', retval_277728)
            
            # ################# End of '__call__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function '__call__' in the type store
            # Getting the type of 'stypy_return_type' (line 1962)
            stypy_return_type_277729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_277729)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '__call__'
            return stypy_return_type_277729

    
    # Assigning a type to the variable 'myiter' (line 1949)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1949, 4), 'myiter', myiter)
    
    # Assigning a ListComp to a Name (line 1973):
    
    # Assigning a ListComp to a Name (line 1973):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'iterables' (line 1973)
    iterables_277734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 34), 'iterables')
    comprehension_277735 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1973, 13), iterables_277734)
    # Assigning a type to the variable 'it' (line 1973)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1973, 13), 'it', comprehension_277735)
    
    # Call to myiter(...): (line 1973)
    # Processing the call arguments (line 1973)
    # Getting the type of 'it' (line 1973)
    it_277731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 20), 'it', False)
    # Processing the call keyword arguments (line 1973)
    kwargs_277732 = {}
    # Getting the type of 'myiter' (line 1973)
    myiter_277730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 13), 'myiter', False)
    # Calling myiter(args, kwargs) (line 1973)
    myiter_call_result_277733 = invoke(stypy.reporting.localization.Localization(__file__, 1973, 13), myiter_277730, *[it_277731], **kwargs_277732)
    
    list_277736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1973, 13), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1973, 13), list_277736, myiter_call_result_277733)
    # Assigning a type to the variable 'iters' (line 1973)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1973, 4), 'iters', list_277736)
    
    # Multiple assignment of 2 elements.
    
    # Assigning a Name to a Name (line 1974):
    # Getting the type of 'True' (line 1974)
    True_277737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 23), 'True')
    # Assigning a type to the variable 'minkey' (line 1974)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1974, 14), 'minkey', True_277737)
    
    # Assigning a Name to a Name (line 1974):
    # Getting the type of 'minkey' (line 1974)
    minkey_277738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 14), 'minkey')
    # Assigning a type to the variable 'minvals' (line 1974)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1974, 4), 'minvals', minkey_277738)
    
    # Getting the type of 'True' (line 1975)
    True_277739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1975, 10), 'True')
    # Testing the type of an if condition (line 1975)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1975, 4), True_277739)
    # SSA begins for while statement (line 1975)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Assigning a ListComp to a Name (line 1976):
    
    # Assigning a ListComp to a Name (line 1976):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'iters' (line 1976)
    iters_277744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1976, 51), 'iters')
    comprehension_277745 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1976, 34), iters_277744)
    # Assigning a type to the variable 'it' (line 1976)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1976, 34), 'it', comprehension_277745)
    # Getting the type of 'it' (line 1976)
    it_277742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1976, 34), 'it')
    # Obtaining the member 'key' of a type (line 1976)
    key_277743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1976, 34), it_277742, 'key')
    list_277746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1976, 34), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1976, 34), list_277746, key_277743)
    comprehension_277747 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1976, 20), list_277746)
    # Assigning a type to the variable '_f' (line 1976)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1976, 20), '_f', comprehension_277747)
    # Getting the type of '_f' (line 1976)
    _f_277741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1976, 61), '_f')
    # Getting the type of '_f' (line 1976)
    _f_277740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1976, 20), '_f')
    list_277748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1976, 20), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1976, 20), list_277748, _f_277740)
    # Assigning a type to the variable 'minvals' (line 1976)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1976, 8), 'minvals', list_277748)
    
    # Getting the type of 'minvals' (line 1977)
    minvals_277749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1977, 11), 'minvals')
    # Testing the type of an if condition (line 1977)
    if_condition_277750 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1977, 8), minvals_277749)
    # Assigning a type to the variable 'if_condition_277750' (line 1977)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1977, 8), 'if_condition_277750', if_condition_277750)
    # SSA begins for if statement (line 1977)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1978):
    
    # Assigning a Call to a Name (line 1978):
    
    # Call to min(...): (line 1978)
    # Processing the call arguments (line 1978)
    # Getting the type of 'minvals' (line 1978)
    minvals_277752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1978, 25), 'minvals', False)
    # Processing the call keyword arguments (line 1978)
    kwargs_277753 = {}
    # Getting the type of 'min' (line 1978)
    min_277751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1978, 21), 'min', False)
    # Calling min(args, kwargs) (line 1978)
    min_call_result_277754 = invoke(stypy.reporting.localization.Localization(__file__, 1978, 21), min_277751, *[minvals_277752], **kwargs_277753)
    
    # Assigning a type to the variable 'minkey' (line 1978)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1978, 12), 'minkey', min_call_result_277754)
    # Creating a generator
    
    # Obtaining an instance of the builtin type 'tuple' (line 1979)
    tuple_277755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1979, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1979)
    # Adding element type (line 1979)
    # Getting the type of 'minkey' (line 1979)
    minkey_277756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1979, 19), 'minkey')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1979, 19), tuple_277755, minkey_277756)
    # Adding element type (line 1979)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'iters' (line 1979)
    iters_277761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1979, 49), 'iters')
    comprehension_277762 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1979, 28), iters_277761)
    # Assigning a type to the variable 'it' (line 1979)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1979, 28), 'it', comprehension_277762)
    
    # Call to it(...): (line 1979)
    # Processing the call arguments (line 1979)
    # Getting the type of 'minkey' (line 1979)
    minkey_277758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1979, 31), 'minkey', False)
    # Processing the call keyword arguments (line 1979)
    kwargs_277759 = {}
    # Getting the type of 'it' (line 1979)
    it_277757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1979, 28), 'it', False)
    # Calling it(args, kwargs) (line 1979)
    it_call_result_277760 = invoke(stypy.reporting.localization.Localization(__file__, 1979, 28), it_277757, *[minkey_277758], **kwargs_277759)
    
    list_277763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1979, 28), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1979, 28), list_277763, it_call_result_277760)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1979, 19), tuple_277755, list_277763)
    
    GeneratorType_277764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1979, 12), 'GeneratorType')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1979, 12), GeneratorType_277764, tuple_277755)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1979, 12), 'stypy_return_type', GeneratorType_277764)
    # SSA branch for the else part of an if statement (line 1977)
    module_type_store.open_ssa_branch('else')
    # SSA join for if statement (line 1977)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for while statement (line 1975)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'align_iterators(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'align_iterators' in the type store
    # Getting the type of 'stypy_return_type' (line 1940)
    stypy_return_type_277765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_277765)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'align_iterators'
    return stypy_return_type_277765

# Assigning a type to the variable 'align_iterators' (line 1940)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1940, 0), 'align_iterators', align_iterators)

@norecursion
def is_math_text(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'is_math_text'
    module_type_store = module_type_store.open_function_context('is_math_text', 1984, 0, False)
    
    # Passed parameters checking function
    is_math_text.stypy_localization = localization
    is_math_text.stypy_type_of_self = None
    is_math_text.stypy_type_store = module_type_store
    is_math_text.stypy_function_name = 'is_math_text'
    is_math_text.stypy_param_names_list = ['s']
    is_math_text.stypy_varargs_param_name = None
    is_math_text.stypy_kwargs_param_name = None
    is_math_text.stypy_call_defaults = defaults
    is_math_text.stypy_call_varargs = varargs
    is_math_text.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'is_math_text', ['s'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'is_math_text', localization, ['s'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'is_math_text(...)' code ##################

    
    
    # SSA begins for try-except statement (line 1987)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 1988):
    
    # Assigning a Call to a Name (line 1988):
    
    # Call to text_type(...): (line 1988)
    # Processing the call arguments (line 1988)
    # Getting the type of 's' (line 1988)
    s_277768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1988, 26), 's', False)
    # Processing the call keyword arguments (line 1988)
    kwargs_277769 = {}
    # Getting the type of 'six' (line 1988)
    six_277766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1988, 12), 'six', False)
    # Obtaining the member 'text_type' of a type (line 1988)
    text_type_277767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1988, 12), six_277766, 'text_type')
    # Calling text_type(args, kwargs) (line 1988)
    text_type_call_result_277770 = invoke(stypy.reporting.localization.Localization(__file__, 1988, 12), text_type_277767, *[s_277768], **kwargs_277769)
    
    # Assigning a type to the variable 's' (line 1988)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1988, 8), 's', text_type_call_result_277770)
    # SSA branch for the except part of a try statement (line 1987)
    # SSA branch for the except 'UnicodeDecodeError' branch of a try statement (line 1987)
    module_type_store.open_ssa_branch('except')
    
    # Call to ValueError(...): (line 1990)
    # Processing the call arguments (line 1990)
    unicode_277772 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1991, 12), 'unicode', u'matplotlib display text must have all code points < 128 or use Unicode strings')
    # Processing the call keyword arguments (line 1990)
    kwargs_277773 = {}
    # Getting the type of 'ValueError' (line 1990)
    ValueError_277771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1990, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1990)
    ValueError_call_result_277774 = invoke(stypy.reporting.localization.Localization(__file__, 1990, 14), ValueError_277771, *[unicode_277772], **kwargs_277773)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1990, 8), ValueError_call_result_277774, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 1987)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1994):
    
    # Assigning a BinOp to a Name (line 1994):
    
    # Call to count(...): (line 1994)
    # Processing the call arguments (line 1994)
    unicode_277777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1994, 27), 'unicode', u'$')
    # Processing the call keyword arguments (line 1994)
    kwargs_277778 = {}
    # Getting the type of 's' (line 1994)
    s_277775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 19), 's', False)
    # Obtaining the member 'count' of a type (line 1994)
    count_277776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1994, 19), s_277775, 'count')
    # Calling count(args, kwargs) (line 1994)
    count_call_result_277779 = invoke(stypy.reporting.localization.Localization(__file__, 1994, 19), count_277776, *[unicode_277777], **kwargs_277778)
    
    
    # Call to count(...): (line 1994)
    # Processing the call arguments (line 1994)
    unicode_277782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1994, 43), 'unicode', u'\\$')
    # Processing the call keyword arguments (line 1994)
    kwargs_277783 = {}
    # Getting the type of 's' (line 1994)
    s_277780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 35), 's', False)
    # Obtaining the member 'count' of a type (line 1994)
    count_277781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1994, 35), s_277780, 'count')
    # Calling count(args, kwargs) (line 1994)
    count_call_result_277784 = invoke(stypy.reporting.localization.Localization(__file__, 1994, 35), count_277781, *[unicode_277782], **kwargs_277783)
    
    # Applying the binary operator '-' (line 1994)
    result_sub_277785 = python_operator(stypy.reporting.localization.Localization(__file__, 1994, 19), '-', count_call_result_277779, count_call_result_277784)
    
    # Assigning a type to the variable 'dollar_count' (line 1994)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1994, 4), 'dollar_count', result_sub_277785)
    
    # Assigning a BoolOp to a Name (line 1995):
    
    # Assigning a BoolOp to a Name (line 1995):
    
    # Evaluating a boolean operation
    
    # Getting the type of 'dollar_count' (line 1995)
    dollar_count_277786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 20), 'dollar_count')
    int_277787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1995, 35), 'int')
    # Applying the binary operator '>' (line 1995)
    result_gt_277788 = python_operator(stypy.reporting.localization.Localization(__file__, 1995, 20), '>', dollar_count_277786, int_277787)
    
    
    # Getting the type of 'dollar_count' (line 1995)
    dollar_count_277789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 41), 'dollar_count')
    int_277790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1995, 56), 'int')
    # Applying the binary operator '%' (line 1995)
    result_mod_277791 = python_operator(stypy.reporting.localization.Localization(__file__, 1995, 41), '%', dollar_count_277789, int_277790)
    
    int_277792 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1995, 61), 'int')
    # Applying the binary operator '==' (line 1995)
    result_eq_277793 = python_operator(stypy.reporting.localization.Localization(__file__, 1995, 41), '==', result_mod_277791, int_277792)
    
    # Applying the binary operator 'and' (line 1995)
    result_and_keyword_277794 = python_operator(stypy.reporting.localization.Localization(__file__, 1995, 20), 'and', result_gt_277788, result_eq_277793)
    
    # Assigning a type to the variable 'even_dollars' (line 1995)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1995, 4), 'even_dollars', result_and_keyword_277794)
    # Getting the type of 'even_dollars' (line 1997)
    even_dollars_277795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1997, 11), 'even_dollars')
    # Assigning a type to the variable 'stypy_return_type' (line 1997)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1997, 4), 'stypy_return_type', even_dollars_277795)
    
    # ################# End of 'is_math_text(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'is_math_text' in the type store
    # Getting the type of 'stypy_return_type' (line 1984)
    stypy_return_type_277796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1984, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_277796)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'is_math_text'
    return stypy_return_type_277796

# Assigning a type to the variable 'is_math_text' (line 1984)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1984, 0), 'is_math_text', is_math_text)

@norecursion
def _to_unmasked_float_array(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_to_unmasked_float_array'
    module_type_store = module_type_store.open_function_context('_to_unmasked_float_array', 2000, 0, False)
    
    # Passed parameters checking function
    _to_unmasked_float_array.stypy_localization = localization
    _to_unmasked_float_array.stypy_type_of_self = None
    _to_unmasked_float_array.stypy_type_store = module_type_store
    _to_unmasked_float_array.stypy_function_name = '_to_unmasked_float_array'
    _to_unmasked_float_array.stypy_param_names_list = ['x']
    _to_unmasked_float_array.stypy_varargs_param_name = None
    _to_unmasked_float_array.stypy_kwargs_param_name = None
    _to_unmasked_float_array.stypy_call_defaults = defaults
    _to_unmasked_float_array.stypy_call_varargs = varargs
    _to_unmasked_float_array.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_to_unmasked_float_array', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_to_unmasked_float_array', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_to_unmasked_float_array(...)' code ##################

    unicode_277797 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2004, (-1)), 'unicode', u'\n    Convert a sequence to a float array; if input was a masked array, masked\n    values are converted to nans.\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 2005)
    unicode_277798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2005, 18), 'unicode', u'mask')
    # Getting the type of 'x' (line 2005)
    x_277799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2005, 15), 'x')
    
    (may_be_277800, more_types_in_union_277801) = may_provide_member(unicode_277798, x_277799)

    if may_be_277800:

        if more_types_in_union_277801:
            # Runtime conditional SSA (line 2005)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'x' (line 2005)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2005, 4), 'x', remove_not_member_provider_from_union(x_277799, u'mask'))
        
        # Call to filled(...): (line 2006)
        # Processing the call arguments (line 2006)
        # Getting the type of 'np' (line 2006)
        np_277810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2006, 46), 'np', False)
        # Obtaining the member 'nan' of a type (line 2006)
        nan_277811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2006, 46), np_277810, 'nan')
        # Processing the call keyword arguments (line 2006)
        kwargs_277812 = {}
        
        # Call to asarray(...): (line 2006)
        # Processing the call arguments (line 2006)
        # Getting the type of 'x' (line 2006)
        x_277805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2006, 29), 'x', False)
        # Getting the type of 'float' (line 2006)
        float_277806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2006, 32), 'float', False)
        # Processing the call keyword arguments (line 2006)
        kwargs_277807 = {}
        # Getting the type of 'np' (line 2006)
        np_277802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2006, 15), 'np', False)
        # Obtaining the member 'ma' of a type (line 2006)
        ma_277803 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2006, 15), np_277802, 'ma')
        # Obtaining the member 'asarray' of a type (line 2006)
        asarray_277804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2006, 15), ma_277803, 'asarray')
        # Calling asarray(args, kwargs) (line 2006)
        asarray_call_result_277808 = invoke(stypy.reporting.localization.Localization(__file__, 2006, 15), asarray_277804, *[x_277805, float_277806], **kwargs_277807)
        
        # Obtaining the member 'filled' of a type (line 2006)
        filled_277809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2006, 15), asarray_call_result_277808, 'filled')
        # Calling filled(args, kwargs) (line 2006)
        filled_call_result_277813 = invoke(stypy.reporting.localization.Localization(__file__, 2006, 15), filled_277809, *[nan_277811], **kwargs_277812)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2006)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2006, 8), 'stypy_return_type', filled_call_result_277813)

        if more_types_in_union_277801:
            # Runtime conditional SSA for else branch (line 2005)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_277800) or more_types_in_union_277801):
        # Assigning a type to the variable 'x' (line 2005)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2005, 4), 'x', remove_member_provider_from_union(x_277799, u'mask'))
        
        # Call to asarray(...): (line 2008)
        # Processing the call arguments (line 2008)
        # Getting the type of 'x' (line 2008)
        x_277816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 26), 'x', False)
        # Getting the type of 'float' (line 2008)
        float_277817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 29), 'float', False)
        # Processing the call keyword arguments (line 2008)
        kwargs_277818 = {}
        # Getting the type of 'np' (line 2008)
        np_277814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 15), 'np', False)
        # Obtaining the member 'asarray' of a type (line 2008)
        asarray_277815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2008, 15), np_277814, 'asarray')
        # Calling asarray(args, kwargs) (line 2008)
        asarray_call_result_277819 = invoke(stypy.reporting.localization.Localization(__file__, 2008, 15), asarray_277815, *[x_277816, float_277817], **kwargs_277818)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2008)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2008, 8), 'stypy_return_type', asarray_call_result_277819)

        if (may_be_277800 and more_types_in_union_277801):
            # SSA join for if statement (line 2005)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of '_to_unmasked_float_array(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_to_unmasked_float_array' in the type store
    # Getting the type of 'stypy_return_type' (line 2000)
    stypy_return_type_277820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2000, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_277820)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_to_unmasked_float_array'
    return stypy_return_type_277820

# Assigning a type to the variable '_to_unmasked_float_array' (line 2000)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2000, 0), '_to_unmasked_float_array', _to_unmasked_float_array)

@norecursion
def _check_1d(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_check_1d'
    module_type_store = module_type_store.open_function_context('_check_1d', 2011, 0, False)
    
    # Passed parameters checking function
    _check_1d.stypy_localization = localization
    _check_1d.stypy_type_of_self = None
    _check_1d.stypy_type_store = module_type_store
    _check_1d.stypy_function_name = '_check_1d'
    _check_1d.stypy_param_names_list = ['x']
    _check_1d.stypy_varargs_param_name = None
    _check_1d.stypy_kwargs_param_name = None
    _check_1d.stypy_call_defaults = defaults
    _check_1d.stypy_call_varargs = varargs
    _check_1d.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_check_1d', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_check_1d', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_check_1d(...)' code ##################

    unicode_277821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2015, (-1)), 'unicode', u'\n    Converts a sequence of less than 1 dimension, to an array of 1\n    dimension; leaves everything else untouched.\n    ')
    
    
    # Evaluating a boolean operation
    
    
    # Call to hasattr(...): (line 2016)
    # Processing the call arguments (line 2016)
    # Getting the type of 'x' (line 2016)
    x_277823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2016, 19), 'x', False)
    unicode_277824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2016, 22), 'unicode', u'shape')
    # Processing the call keyword arguments (line 2016)
    kwargs_277825 = {}
    # Getting the type of 'hasattr' (line 2016)
    hasattr_277822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2016, 11), 'hasattr', False)
    # Calling hasattr(args, kwargs) (line 2016)
    hasattr_call_result_277826 = invoke(stypy.reporting.localization.Localization(__file__, 2016, 11), hasattr_277822, *[x_277823, unicode_277824], **kwargs_277825)
    
    # Applying the 'not' unary operator (line 2016)
    result_not__277827 = python_operator(stypy.reporting.localization.Localization(__file__, 2016, 7), 'not', hasattr_call_result_277826)
    
    
    
    # Call to len(...): (line 2016)
    # Processing the call arguments (line 2016)
    # Getting the type of 'x' (line 2016)
    x_277829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2016, 38), 'x', False)
    # Obtaining the member 'shape' of a type (line 2016)
    shape_277830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2016, 38), x_277829, 'shape')
    # Processing the call keyword arguments (line 2016)
    kwargs_277831 = {}
    # Getting the type of 'len' (line 2016)
    len_277828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2016, 34), 'len', False)
    # Calling len(args, kwargs) (line 2016)
    len_call_result_277832 = invoke(stypy.reporting.localization.Localization(__file__, 2016, 34), len_277828, *[shape_277830], **kwargs_277831)
    
    int_277833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2016, 49), 'int')
    # Applying the binary operator '<' (line 2016)
    result_lt_277834 = python_operator(stypy.reporting.localization.Localization(__file__, 2016, 34), '<', len_call_result_277832, int_277833)
    
    # Applying the binary operator 'or' (line 2016)
    result_or_keyword_277835 = python_operator(stypy.reporting.localization.Localization(__file__, 2016, 7), 'or', result_not__277827, result_lt_277834)
    
    # Testing the type of an if condition (line 2016)
    if_condition_277836 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2016, 4), result_or_keyword_277835)
    # Assigning a type to the variable 'if_condition_277836' (line 2016)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2016, 4), 'if_condition_277836', if_condition_277836)
    # SSA begins for if statement (line 2016)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to atleast_1d(...): (line 2017)
    # Processing the call arguments (line 2017)
    # Getting the type of 'x' (line 2017)
    x_277839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2017, 29), 'x', False)
    # Processing the call keyword arguments (line 2017)
    kwargs_277840 = {}
    # Getting the type of 'np' (line 2017)
    np_277837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2017, 15), 'np', False)
    # Obtaining the member 'atleast_1d' of a type (line 2017)
    atleast_1d_277838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2017, 15), np_277837, 'atleast_1d')
    # Calling atleast_1d(args, kwargs) (line 2017)
    atleast_1d_call_result_277841 = invoke(stypy.reporting.localization.Localization(__file__, 2017, 15), atleast_1d_277838, *[x_277839], **kwargs_277840)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2017)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2017, 8), 'stypy_return_type', atleast_1d_call_result_277841)
    # SSA branch for the else part of an if statement (line 2016)
    module_type_store.open_ssa_branch('else')
    
    
    # SSA begins for try-except statement (line 2019)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Obtaining the type of the subscript
    slice_277842 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2020, 12), None, None, None)
    # Getting the type of 'None' (line 2020)
    None_277843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2020, 17), 'None')
    # Getting the type of 'x' (line 2020)
    x_277844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2020, 12), 'x')
    # Obtaining the member '__getitem__' of a type (line 2020)
    getitem___277845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2020, 12), x_277844, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2020)
    subscript_call_result_277846 = invoke(stypy.reporting.localization.Localization(__file__, 2020, 12), getitem___277845, (slice_277842, None_277843))
    
    # Getting the type of 'x' (line 2021)
    x_277847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2021, 19), 'x')
    # Assigning a type to the variable 'stypy_return_type' (line 2021)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2021, 12), 'stypy_return_type', x_277847)
    # SSA branch for the except part of a try statement (line 2019)
    # SSA branch for the except 'Tuple' branch of a try statement (line 2019)
    module_type_store.open_ssa_branch('except')
    
    # Call to atleast_1d(...): (line 2023)
    # Processing the call arguments (line 2023)
    # Getting the type of 'x' (line 2023)
    x_277850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2023, 33), 'x', False)
    # Processing the call keyword arguments (line 2023)
    kwargs_277851 = {}
    # Getting the type of 'np' (line 2023)
    np_277848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2023, 19), 'np', False)
    # Obtaining the member 'atleast_1d' of a type (line 2023)
    atleast_1d_277849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2023, 19), np_277848, 'atleast_1d')
    # Calling atleast_1d(args, kwargs) (line 2023)
    atleast_1d_call_result_277852 = invoke(stypy.reporting.localization.Localization(__file__, 2023, 19), atleast_1d_277849, *[x_277850], **kwargs_277851)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2023)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2023, 12), 'stypy_return_type', atleast_1d_call_result_277852)
    # SSA join for try-except statement (line 2019)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2016)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_check_1d(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_check_1d' in the type store
    # Getting the type of 'stypy_return_type' (line 2011)
    stypy_return_type_277853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2011, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_277853)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_check_1d'
    return stypy_return_type_277853

# Assigning a type to the variable '_check_1d' (line 2011)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2011, 0), '_check_1d', _check_1d)

@norecursion
def _reshape_2D(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_reshape_2D'
    module_type_store = module_type_store.open_function_context('_reshape_2D', 2026, 0, False)
    
    # Passed parameters checking function
    _reshape_2D.stypy_localization = localization
    _reshape_2D.stypy_type_of_self = None
    _reshape_2D.stypy_type_store = module_type_store
    _reshape_2D.stypy_function_name = '_reshape_2D'
    _reshape_2D.stypy_param_names_list = ['X', 'name']
    _reshape_2D.stypy_varargs_param_name = None
    _reshape_2D.stypy_kwargs_param_name = None
    _reshape_2D.stypy_call_defaults = defaults
    _reshape_2D.stypy_call_varargs = varargs
    _reshape_2D.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_reshape_2D', ['X', 'name'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_reshape_2D', localization, ['X', 'name'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_reshape_2D(...)' code ##################

    unicode_277854 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2036, (-1)), 'unicode', u'\n    Use Fortran ordering to convert ndarrays and lists of iterables to lists of\n    1D arrays.\n\n    Lists of iterables are converted by applying `np.asarray` to each of their\n    elements.  1D ndarrays are returned in a singleton list containing them.\n    2D ndarrays are converted to the list of their *columns*.\n\n    *name* is used to generate the error message for invalid inputs.\n    ')
    
    # Assigning a Call to a Name (line 2038):
    
    # Assigning a Call to a Name (line 2038):
    
    # Call to atleast_1d(...): (line 2038)
    # Processing the call arguments (line 2038)
    
    
    # Call to isinstance(...): (line 2038)
    # Processing the call arguments (line 2038)
    # Getting the type of 'X' (line 2038)
    X_277858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 40), 'X', False)
    # Getting the type of 'np' (line 2038)
    np_277859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 43), 'np', False)
    # Obtaining the member 'ndarray' of a type (line 2038)
    ndarray_277860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2038, 43), np_277859, 'ndarray')
    # Processing the call keyword arguments (line 2038)
    kwargs_277861 = {}
    # Getting the type of 'isinstance' (line 2038)
    isinstance_277857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 29), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2038)
    isinstance_call_result_277862 = invoke(stypy.reporting.localization.Localization(__file__, 2038, 29), isinstance_277857, *[X_277858, ndarray_277860], **kwargs_277861)
    
    # Testing the type of an if expression (line 2038)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2038, 22), isinstance_call_result_277862)
    # SSA begins for if expression (line 2038)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    # Getting the type of 'X' (line 2038)
    X_277863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 22), 'X', False)
    # Obtaining the member 'T' of a type (line 2038)
    T_277864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2038, 22), X_277863, 'T')
    # SSA branch for the else part of an if expression (line 2038)
    module_type_store.open_ssa_branch('if expression else')
    
    # Call to asarray(...): (line 2038)
    # Processing the call arguments (line 2038)
    # Getting the type of 'X' (line 2038)
    X_277867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 71), 'X', False)
    # Processing the call keyword arguments (line 2038)
    kwargs_277868 = {}
    # Getting the type of 'np' (line 2038)
    np_277865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 60), 'np', False)
    # Obtaining the member 'asarray' of a type (line 2038)
    asarray_277866 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2038, 60), np_277865, 'asarray')
    # Calling asarray(args, kwargs) (line 2038)
    asarray_call_result_277869 = invoke(stypy.reporting.localization.Localization(__file__, 2038, 60), asarray_277866, *[X_277867], **kwargs_277868)
    
    # SSA join for if expression (line 2038)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_277870 = union_type.UnionType.add(T_277864, asarray_call_result_277869)
    
    # Processing the call keyword arguments (line 2038)
    kwargs_277871 = {}
    # Getting the type of 'np' (line 2038)
    np_277855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 8), 'np', False)
    # Obtaining the member 'atleast_1d' of a type (line 2038)
    atleast_1d_277856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2038, 8), np_277855, 'atleast_1d')
    # Calling atleast_1d(args, kwargs) (line 2038)
    atleast_1d_call_result_277872 = invoke(stypy.reporting.localization.Localization(__file__, 2038, 8), atleast_1d_277856, *[if_exp_277870], **kwargs_277871)
    
    # Assigning a type to the variable 'X' (line 2038)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2038, 4), 'X', atleast_1d_call_result_277872)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'X' (line 2039)
    X_277873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2039, 7), 'X')
    # Obtaining the member 'ndim' of a type (line 2039)
    ndim_277874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2039, 7), X_277873, 'ndim')
    int_277875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2039, 17), 'int')
    # Applying the binary operator '==' (line 2039)
    result_eq_277876 = python_operator(stypy.reporting.localization.Localization(__file__, 2039, 7), '==', ndim_277874, int_277875)
    
    
    # Getting the type of 'X' (line 2039)
    X_277877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2039, 23), 'X')
    # Obtaining the member 'dtype' of a type (line 2039)
    dtype_277878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2039, 23), X_277877, 'dtype')
    # Obtaining the member 'type' of a type (line 2039)
    type_277879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2039, 23), dtype_277878, 'type')
    # Getting the type of 'np' (line 2039)
    np_277880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2039, 39), 'np')
    # Obtaining the member 'object_' of a type (line 2039)
    object__277881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2039, 39), np_277880, 'object_')
    # Applying the binary operator '!=' (line 2039)
    result_ne_277882 = python_operator(stypy.reporting.localization.Localization(__file__, 2039, 23), '!=', type_277879, object__277881)
    
    # Applying the binary operator 'and' (line 2039)
    result_and_keyword_277883 = python_operator(stypy.reporting.localization.Localization(__file__, 2039, 7), 'and', result_eq_277876, result_ne_277882)
    
    # Testing the type of an if condition (line 2039)
    if_condition_277884 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2039, 4), result_and_keyword_277883)
    # Assigning a type to the variable 'if_condition_277884' (line 2039)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2039, 4), 'if_condition_277884', if_condition_277884)
    # SSA begins for if statement (line 2039)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'list' (line 2041)
    list_277885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2041, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2041)
    # Adding element type (line 2041)
    # Getting the type of 'X' (line 2041)
    X_277886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 16), 'X')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2041, 15), list_277885, X_277886)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2041)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2041, 8), 'stypy_return_type', list_277885)
    # SSA branch for the else part of an if statement (line 2039)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'X' (line 2042)
    X_277887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 9), 'X')
    # Obtaining the member 'ndim' of a type (line 2042)
    ndim_277888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2042, 9), X_277887, 'ndim')
    
    # Obtaining an instance of the builtin type 'list' (line 2042)
    list_277889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2042, 19), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2042)
    # Adding element type (line 2042)
    int_277890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2042, 20), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2042, 19), list_277889, int_277890)
    # Adding element type (line 2042)
    int_277891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2042, 23), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2042, 19), list_277889, int_277891)
    
    # Applying the binary operator 'in' (line 2042)
    result_contains_277892 = python_operator(stypy.reporting.localization.Localization(__file__, 2042, 9), 'in', ndim_277888, list_277889)
    
    # Testing the type of an if condition (line 2042)
    if_condition_277893 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2042, 9), result_contains_277892)
    # Assigning a type to the variable 'if_condition_277893' (line 2042)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2042, 9), 'if_condition_277893', if_condition_277893)
    # SSA begins for if statement (line 2042)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'X' (line 2044)
    X_277900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2044, 43), 'X')
    comprehension_277901 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2044, 16), X_277900)
    # Assigning a type to the variable 'x' (line 2044)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2044, 16), 'x', comprehension_277901)
    
    # Call to reshape(...): (line 2044)
    # Processing the call arguments (line 2044)
    # Getting the type of 'x' (line 2044)
    x_277896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2044, 27), 'x', False)
    int_277897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2044, 30), 'int')
    # Processing the call keyword arguments (line 2044)
    kwargs_277898 = {}
    # Getting the type of 'np' (line 2044)
    np_277894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2044, 16), 'np', False)
    # Obtaining the member 'reshape' of a type (line 2044)
    reshape_277895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2044, 16), np_277894, 'reshape')
    # Calling reshape(args, kwargs) (line 2044)
    reshape_call_result_277899 = invoke(stypy.reporting.localization.Localization(__file__, 2044, 16), reshape_277895, *[x_277896, int_277897], **kwargs_277898)
    
    list_277902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2044, 16), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2044, 16), list_277902, reshape_call_result_277899)
    # Assigning a type to the variable 'stypy_return_type' (line 2044)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2044, 8), 'stypy_return_type', list_277902)
    # SSA branch for the else part of an if statement (line 2042)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 2046)
    # Processing the call arguments (line 2046)
    
    # Call to format(...): (line 2046)
    # Processing the call arguments (line 2046)
    # Getting the type of 'name' (line 2046)
    name_277906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2046, 69), 'name', False)
    # Processing the call keyword arguments (line 2046)
    kwargs_277907 = {}
    unicode_277904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2046, 25), 'unicode', u'{} must have 2 or fewer dimensions')
    # Obtaining the member 'format' of a type (line 2046)
    format_277905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2046, 25), unicode_277904, 'format')
    # Calling format(args, kwargs) (line 2046)
    format_call_result_277908 = invoke(stypy.reporting.localization.Localization(__file__, 2046, 25), format_277905, *[name_277906], **kwargs_277907)
    
    # Processing the call keyword arguments (line 2046)
    kwargs_277909 = {}
    # Getting the type of 'ValueError' (line 2046)
    ValueError_277903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2046, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2046)
    ValueError_call_result_277910 = invoke(stypy.reporting.localization.Localization(__file__, 2046, 14), ValueError_277903, *[format_call_result_277908], **kwargs_277909)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2046, 8), ValueError_call_result_277910, 'raise parameter', BaseException)
    # SSA join for if statement (line 2042)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2039)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_reshape_2D(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_reshape_2D' in the type store
    # Getting the type of 'stypy_return_type' (line 2026)
    stypy_return_type_277911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2026, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_277911)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_reshape_2D'
    return stypy_return_type_277911

# Assigning a type to the variable '_reshape_2D' (line 2026)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2026, 0), '_reshape_2D', _reshape_2D)

@norecursion
def violin_stats(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_277912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2049, 35), 'int')
    defaults = [int_277912]
    # Create a new context for function 'violin_stats'
    module_type_store = module_type_store.open_function_context('violin_stats', 2049, 0, False)
    
    # Passed parameters checking function
    violin_stats.stypy_localization = localization
    violin_stats.stypy_type_of_self = None
    violin_stats.stypy_type_store = module_type_store
    violin_stats.stypy_function_name = 'violin_stats'
    violin_stats.stypy_param_names_list = ['X', 'method', 'points']
    violin_stats.stypy_varargs_param_name = None
    violin_stats.stypy_kwargs_param_name = None
    violin_stats.stypy_call_defaults = defaults
    violin_stats.stypy_call_varargs = varargs
    violin_stats.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'violin_stats', ['X', 'method', 'points'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'violin_stats', localization, ['X', 'method', 'points'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'violin_stats(...)' code ##################

    unicode_277913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2087, (-1)), 'unicode', u'\n    Returns a list of dictionaries of data which can be used to draw a series\n    of violin plots. See the `Returns` section below to view the required keys\n    of the dictionary. Users can skip this function and pass a user-defined set\n    of dictionaries to the `axes.vplot` method instead of using MPL to do the\n    calculations.\n\n    Parameters\n    ----------\n    X : array-like\n        Sample data that will be used to produce the gaussian kernel density\n        estimates. Must have 2 or fewer dimensions.\n\n    method : callable\n        The method used to calculate the kernel density estimate for each\n        column of data. When called via `method(v, coords)`, it should\n        return a vector of the values of the KDE evaluated at the values\n        specified in coords.\n\n    points : scalar, default = 100\n        Defines the number of points to evaluate each of the gaussian kernel\n        density estimates at.\n\n    Returns\n    -------\n\n    A list of dictionaries containing the results for each column of data.\n    The dictionaries contain at least the following:\n\n        - coords: A list of scalars containing the coordinates this particular\n          kernel density estimate was evaluated at.\n        - vals: A list of scalars containing the values of the kernel density\n          estimate at each of the coordinates given in `coords`.\n        - mean: The mean value for this column of data.\n        - median: The median value for this column of data.\n        - min: The minimum value for this column of data.\n        - max: The maximum value for this column of data.\n    ')
    
    # Assigning a List to a Name (line 2090):
    
    # Assigning a List to a Name (line 2090):
    
    # Obtaining an instance of the builtin type 'list' (line 2090)
    list_277914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2090, 14), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2090)
    
    # Assigning a type to the variable 'vpstats' (line 2090)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2090, 4), 'vpstats', list_277914)
    
    # Assigning a Call to a Name (line 2093):
    
    # Assigning a Call to a Name (line 2093):
    
    # Call to _reshape_2D(...): (line 2093)
    # Processing the call arguments (line 2093)
    # Getting the type of 'X' (line 2093)
    X_277916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2093, 20), 'X', False)
    unicode_277917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2093, 23), 'unicode', u'X')
    # Processing the call keyword arguments (line 2093)
    kwargs_277918 = {}
    # Getting the type of '_reshape_2D' (line 2093)
    _reshape_2D_277915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2093, 8), '_reshape_2D', False)
    # Calling _reshape_2D(args, kwargs) (line 2093)
    _reshape_2D_call_result_277919 = invoke(stypy.reporting.localization.Localization(__file__, 2093, 8), _reshape_2D_277915, *[X_277916, unicode_277917], **kwargs_277918)
    
    # Assigning a type to the variable 'X' (line 2093)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2093, 4), 'X', _reshape_2D_call_result_277919)
    
    # Getting the type of 'X' (line 2095)
    X_277920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 13), 'X')
    # Testing the type of a for loop iterable (line 2095)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2095, 4), X_277920)
    # Getting the type of the for loop variable (line 2095)
    for_loop_var_277921 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2095, 4), X_277920)
    # Assigning a type to the variable 'x' (line 2095)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2095, 4), 'x', for_loop_var_277921)
    # SSA begins for a for statement (line 2095)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Dict to a Name (line 2097):
    
    # Assigning a Dict to a Name (line 2097):
    
    # Obtaining an instance of the builtin type 'dict' (line 2097)
    dict_277922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2097, 16), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 2097)
    
    # Assigning a type to the variable 'stats' (line 2097)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2097, 8), 'stats', dict_277922)
    
    # Assigning a Call to a Name (line 2100):
    
    # Assigning a Call to a Name (line 2100):
    
    # Call to min(...): (line 2100)
    # Processing the call arguments (line 2100)
    # Getting the type of 'x' (line 2100)
    x_277925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 25), 'x', False)
    # Processing the call keyword arguments (line 2100)
    kwargs_277926 = {}
    # Getting the type of 'np' (line 2100)
    np_277923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 18), 'np', False)
    # Obtaining the member 'min' of a type (line 2100)
    min_277924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2100, 18), np_277923, 'min')
    # Calling min(args, kwargs) (line 2100)
    min_call_result_277927 = invoke(stypy.reporting.localization.Localization(__file__, 2100, 18), min_277924, *[x_277925], **kwargs_277926)
    
    # Assigning a type to the variable 'min_val' (line 2100)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2100, 8), 'min_val', min_call_result_277927)
    
    # Assigning a Call to a Name (line 2101):
    
    # Assigning a Call to a Name (line 2101):
    
    # Call to max(...): (line 2101)
    # Processing the call arguments (line 2101)
    # Getting the type of 'x' (line 2101)
    x_277930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2101, 25), 'x', False)
    # Processing the call keyword arguments (line 2101)
    kwargs_277931 = {}
    # Getting the type of 'np' (line 2101)
    np_277928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2101, 18), 'np', False)
    # Obtaining the member 'max' of a type (line 2101)
    max_277929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2101, 18), np_277928, 'max')
    # Calling max(args, kwargs) (line 2101)
    max_call_result_277932 = invoke(stypy.reporting.localization.Localization(__file__, 2101, 18), max_277929, *[x_277930], **kwargs_277931)
    
    # Assigning a type to the variable 'max_val' (line 2101)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2101, 8), 'max_val', max_call_result_277932)
    
    # Assigning a Call to a Name (line 2104):
    
    # Assigning a Call to a Name (line 2104):
    
    # Call to linspace(...): (line 2104)
    # Processing the call arguments (line 2104)
    # Getting the type of 'min_val' (line 2104)
    min_val_277935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2104, 29), 'min_val', False)
    # Getting the type of 'max_val' (line 2104)
    max_val_277936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2104, 38), 'max_val', False)
    # Getting the type of 'points' (line 2104)
    points_277937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2104, 47), 'points', False)
    # Processing the call keyword arguments (line 2104)
    kwargs_277938 = {}
    # Getting the type of 'np' (line 2104)
    np_277933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2104, 17), 'np', False)
    # Obtaining the member 'linspace' of a type (line 2104)
    linspace_277934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2104, 17), np_277933, 'linspace')
    # Calling linspace(args, kwargs) (line 2104)
    linspace_call_result_277939 = invoke(stypy.reporting.localization.Localization(__file__, 2104, 17), linspace_277934, *[min_val_277935, max_val_277936, points_277937], **kwargs_277938)
    
    # Assigning a type to the variable 'coords' (line 2104)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2104, 8), 'coords', linspace_call_result_277939)
    
    # Assigning a Call to a Subscript (line 2105):
    
    # Assigning a Call to a Subscript (line 2105):
    
    # Call to method(...): (line 2105)
    # Processing the call arguments (line 2105)
    # Getting the type of 'x' (line 2105)
    x_277941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2105, 31), 'x', False)
    # Getting the type of 'coords' (line 2105)
    coords_277942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2105, 34), 'coords', False)
    # Processing the call keyword arguments (line 2105)
    kwargs_277943 = {}
    # Getting the type of 'method' (line 2105)
    method_277940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2105, 24), 'method', False)
    # Calling method(args, kwargs) (line 2105)
    method_call_result_277944 = invoke(stypy.reporting.localization.Localization(__file__, 2105, 24), method_277940, *[x_277941, coords_277942], **kwargs_277943)
    
    # Getting the type of 'stats' (line 2105)
    stats_277945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2105, 8), 'stats')
    unicode_277946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2105, 14), 'unicode', u'vals')
    # Storing an element on a container (line 2105)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2105, 8), stats_277945, (unicode_277946, method_call_result_277944))
    
    # Assigning a Name to a Subscript (line 2106):
    
    # Assigning a Name to a Subscript (line 2106):
    # Getting the type of 'coords' (line 2106)
    coords_277947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2106, 26), 'coords')
    # Getting the type of 'stats' (line 2106)
    stats_277948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2106, 8), 'stats')
    unicode_277949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2106, 14), 'unicode', u'coords')
    # Storing an element on a container (line 2106)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2106, 8), stats_277948, (unicode_277949, coords_277947))
    
    # Assigning a Call to a Subscript (line 2109):
    
    # Assigning a Call to a Subscript (line 2109):
    
    # Call to mean(...): (line 2109)
    # Processing the call arguments (line 2109)
    # Getting the type of 'x' (line 2109)
    x_277952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 32), 'x', False)
    # Processing the call keyword arguments (line 2109)
    kwargs_277953 = {}
    # Getting the type of 'np' (line 2109)
    np_277950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 24), 'np', False)
    # Obtaining the member 'mean' of a type (line 2109)
    mean_277951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2109, 24), np_277950, 'mean')
    # Calling mean(args, kwargs) (line 2109)
    mean_call_result_277954 = invoke(stypy.reporting.localization.Localization(__file__, 2109, 24), mean_277951, *[x_277952], **kwargs_277953)
    
    # Getting the type of 'stats' (line 2109)
    stats_277955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 8), 'stats')
    unicode_277956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2109, 14), 'unicode', u'mean')
    # Storing an element on a container (line 2109)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2109, 8), stats_277955, (unicode_277956, mean_call_result_277954))
    
    # Assigning a Call to a Subscript (line 2110):
    
    # Assigning a Call to a Subscript (line 2110):
    
    # Call to median(...): (line 2110)
    # Processing the call arguments (line 2110)
    # Getting the type of 'x' (line 2110)
    x_277959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 36), 'x', False)
    # Processing the call keyword arguments (line 2110)
    kwargs_277960 = {}
    # Getting the type of 'np' (line 2110)
    np_277957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 26), 'np', False)
    # Obtaining the member 'median' of a type (line 2110)
    median_277958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2110, 26), np_277957, 'median')
    # Calling median(args, kwargs) (line 2110)
    median_call_result_277961 = invoke(stypy.reporting.localization.Localization(__file__, 2110, 26), median_277958, *[x_277959], **kwargs_277960)
    
    # Getting the type of 'stats' (line 2110)
    stats_277962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 8), 'stats')
    unicode_277963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2110, 14), 'unicode', u'median')
    # Storing an element on a container (line 2110)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2110, 8), stats_277962, (unicode_277963, median_call_result_277961))
    
    # Assigning a Name to a Subscript (line 2111):
    
    # Assigning a Name to a Subscript (line 2111):
    # Getting the type of 'min_val' (line 2111)
    min_val_277964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 23), 'min_val')
    # Getting the type of 'stats' (line 2111)
    stats_277965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 8), 'stats')
    unicode_277966 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2111, 14), 'unicode', u'min')
    # Storing an element on a container (line 2111)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2111, 8), stats_277965, (unicode_277966, min_val_277964))
    
    # Assigning a Name to a Subscript (line 2112):
    
    # Assigning a Name to a Subscript (line 2112):
    # Getting the type of 'max_val' (line 2112)
    max_val_277967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2112, 23), 'max_val')
    # Getting the type of 'stats' (line 2112)
    stats_277968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2112, 8), 'stats')
    unicode_277969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2112, 14), 'unicode', u'max')
    # Storing an element on a container (line 2112)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2112, 8), stats_277968, (unicode_277969, max_val_277967))
    
    # Call to append(...): (line 2115)
    # Processing the call arguments (line 2115)
    # Getting the type of 'stats' (line 2115)
    stats_277972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2115, 23), 'stats', False)
    # Processing the call keyword arguments (line 2115)
    kwargs_277973 = {}
    # Getting the type of 'vpstats' (line 2115)
    vpstats_277970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2115, 8), 'vpstats', False)
    # Obtaining the member 'append' of a type (line 2115)
    append_277971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2115, 8), vpstats_277970, 'append')
    # Calling append(args, kwargs) (line 2115)
    append_call_result_277974 = invoke(stypy.reporting.localization.Localization(__file__, 2115, 8), append_277971, *[stats_277972], **kwargs_277973)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'vpstats' (line 2117)
    vpstats_277975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2117, 11), 'vpstats')
    # Assigning a type to the variable 'stypy_return_type' (line 2117)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2117, 4), 'stypy_return_type', vpstats_277975)
    
    # ################# End of 'violin_stats(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'violin_stats' in the type store
    # Getting the type of 'stypy_return_type' (line 2049)
    stypy_return_type_277976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2049, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_277976)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'violin_stats'
    return stypy_return_type_277976

# Assigning a type to the variable 'violin_stats' (line 2049)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2049, 0), 'violin_stats', violin_stats)
# Declaration of the '_NestedClassGetter' class

class _NestedClassGetter(object, ):
    unicode_277977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2126, (-1)), 'unicode', u'\n    When called with the containing class as the first argument,\n    and the name of the nested class as the second argument,\n    returns an instance of the nested class.\n    ')

    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 2127, 4, False)
        # Assigning a type to the variable 'self' (line 2128)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2128, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _NestedClassGetter.__call__.__dict__.__setitem__('stypy_localization', localization)
        _NestedClassGetter.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _NestedClassGetter.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _NestedClassGetter.__call__.__dict__.__setitem__('stypy_function_name', '_NestedClassGetter.__call__')
        _NestedClassGetter.__call__.__dict__.__setitem__('stypy_param_names_list', ['containing_class', 'class_name'])
        _NestedClassGetter.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _NestedClassGetter.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _NestedClassGetter.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _NestedClassGetter.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _NestedClassGetter.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _NestedClassGetter.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_NestedClassGetter.__call__', ['containing_class', 'class_name'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['containing_class', 'class_name'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        # Assigning a Call to a Name (line 2128):
        
        # Assigning a Call to a Name (line 2128):
        
        # Call to getattr(...): (line 2128)
        # Processing the call arguments (line 2128)
        # Getting the type of 'containing_class' (line 2128)
        containing_class_277979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2128, 31), 'containing_class', False)
        # Getting the type of 'class_name' (line 2128)
        class_name_277980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2128, 49), 'class_name', False)
        # Processing the call keyword arguments (line 2128)
        kwargs_277981 = {}
        # Getting the type of 'getattr' (line 2128)
        getattr_277978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2128, 23), 'getattr', False)
        # Calling getattr(args, kwargs) (line 2128)
        getattr_call_result_277982 = invoke(stypy.reporting.localization.Localization(__file__, 2128, 23), getattr_277978, *[containing_class_277979, class_name_277980], **kwargs_277981)
        
        # Assigning a type to the variable 'nested_class' (line 2128)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2128, 8), 'nested_class', getattr_call_result_277982)
        
        # Assigning a Call to a Name (line 2132):
        
        # Assigning a Call to a Name (line 2132):
        
        # Call to _NestedClassGetter(...): (line 2132)
        # Processing the call keyword arguments (line 2132)
        kwargs_277984 = {}
        # Getting the type of '_NestedClassGetter' (line 2132)
        _NestedClassGetter_277983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2132, 26), '_NestedClassGetter', False)
        # Calling _NestedClassGetter(args, kwargs) (line 2132)
        _NestedClassGetter_call_result_277985 = invoke(stypy.reporting.localization.Localization(__file__, 2132, 26), _NestedClassGetter_277983, *[], **kwargs_277984)
        
        # Assigning a type to the variable 'nested_instance' (line 2132)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2132, 8), 'nested_instance', _NestedClassGetter_call_result_277985)
        
        # Assigning a Name to a Attribute (line 2136):
        
        # Assigning a Name to a Attribute (line 2136):
        # Getting the type of 'nested_class' (line 2136)
        nested_class_277986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2136, 36), 'nested_class')
        # Getting the type of 'nested_instance' (line 2136)
        nested_instance_277987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2136, 8), 'nested_instance')
        # Setting the type of the member '__class__' of a type (line 2136)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2136, 8), nested_instance_277987, '__class__', nested_class_277986)
        # Getting the type of 'nested_instance' (line 2137)
        nested_instance_277988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2137, 15), 'nested_instance')
        # Assigning a type to the variable 'stypy_return_type' (line 2137)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2137, 8), 'stypy_return_type', nested_instance_277988)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 2127)
        stypy_return_type_277989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2127, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_277989)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_277989


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2120, 0, False)
        # Assigning a type to the variable 'self' (line 2121)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2121, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_NestedClassGetter.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable '_NestedClassGetter' (line 2120)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2120, 0), '_NestedClassGetter', _NestedClassGetter)
# Declaration of the '_InstanceMethodPickler' class

class _InstanceMethodPickler(object, ):
    unicode_277990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2144, (-1)), 'unicode', u'\n    Pickle cannot handle instancemethod saving. _InstanceMethodPickler\n    provides a solution to this.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2145, 4, False)
        # Assigning a type to the variable 'self' (line 2146)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2146, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_InstanceMethodPickler.__init__', ['instancemethod'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['instancemethod'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_277991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2146, 8), 'unicode', u'Takes an instancemethod as its only argument.')
        
        # Getting the type of 'six' (line 2147)
        six_277992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2147, 11), 'six')
        # Obtaining the member 'PY3' of a type (line 2147)
        PY3_277993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2147, 11), six_277992, 'PY3')
        # Testing the type of an if condition (line 2147)
        if_condition_277994 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2147, 8), PY3_277993)
        # Assigning a type to the variable 'if_condition_277994' (line 2147)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2147, 8), 'if_condition_277994', if_condition_277994)
        # SSA begins for if statement (line 2147)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Attribute (line 2148):
        
        # Assigning a Attribute to a Attribute (line 2148):
        # Getting the type of 'instancemethod' (line 2148)
        instancemethod_277995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2148, 30), 'instancemethod')
        # Obtaining the member '__self__' of a type (line 2148)
        self___277996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2148, 30), instancemethod_277995, '__self__')
        # Getting the type of 'self' (line 2148)
        self_277997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2148, 12), 'self')
        # Setting the type of the member 'parent_obj' of a type (line 2148)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2148, 12), self_277997, 'parent_obj', self___277996)
        
        # Assigning a Attribute to a Attribute (line 2149):
        
        # Assigning a Attribute to a Attribute (line 2149):
        # Getting the type of 'instancemethod' (line 2149)
        instancemethod_277998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2149, 39), 'instancemethod')
        # Obtaining the member '__func__' of a type (line 2149)
        func___277999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2149, 39), instancemethod_277998, '__func__')
        # Obtaining the member '__name__' of a type (line 2149)
        name___278000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2149, 39), func___277999, '__name__')
        # Getting the type of 'self' (line 2149)
        self_278001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2149, 12), 'self')
        # Setting the type of the member 'instancemethod_name' of a type (line 2149)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2149, 12), self_278001, 'instancemethod_name', name___278000)
        # SSA branch for the else part of an if statement (line 2147)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Attribute (line 2151):
        
        # Assigning a Attribute to a Attribute (line 2151):
        # Getting the type of 'instancemethod' (line 2151)
        instancemethod_278002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2151, 30), 'instancemethod')
        # Obtaining the member 'im_self' of a type (line 2151)
        im_self_278003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2151, 30), instancemethod_278002, 'im_self')
        # Getting the type of 'self' (line 2151)
        self_278004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2151, 12), 'self')
        # Setting the type of the member 'parent_obj' of a type (line 2151)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2151, 12), self_278004, 'parent_obj', im_self_278003)
        
        # Assigning a Attribute to a Attribute (line 2152):
        
        # Assigning a Attribute to a Attribute (line 2152):
        # Getting the type of 'instancemethod' (line 2152)
        instancemethod_278005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2152, 39), 'instancemethod')
        # Obtaining the member 'im_func' of a type (line 2152)
        im_func_278006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2152, 39), instancemethod_278005, 'im_func')
        # Obtaining the member '__name__' of a type (line 2152)
        name___278007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2152, 39), im_func_278006, '__name__')
        # Getting the type of 'self' (line 2152)
        self_278008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2152, 12), 'self')
        # Setting the type of the member 'instancemethod_name' of a type (line 2152)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2152, 12), self_278008, 'instancemethod_name', name___278007)
        # SSA join for if statement (line 2147)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def get_instancemethod(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_instancemethod'
        module_type_store = module_type_store.open_function_context('get_instancemethod', 2154, 4, False)
        # Assigning a type to the variable 'self' (line 2155)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2155, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _InstanceMethodPickler.get_instancemethod.__dict__.__setitem__('stypy_localization', localization)
        _InstanceMethodPickler.get_instancemethod.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _InstanceMethodPickler.get_instancemethod.__dict__.__setitem__('stypy_type_store', module_type_store)
        _InstanceMethodPickler.get_instancemethod.__dict__.__setitem__('stypy_function_name', '_InstanceMethodPickler.get_instancemethod')
        _InstanceMethodPickler.get_instancemethod.__dict__.__setitem__('stypy_param_names_list', [])
        _InstanceMethodPickler.get_instancemethod.__dict__.__setitem__('stypy_varargs_param_name', None)
        _InstanceMethodPickler.get_instancemethod.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _InstanceMethodPickler.get_instancemethod.__dict__.__setitem__('stypy_call_defaults', defaults)
        _InstanceMethodPickler.get_instancemethod.__dict__.__setitem__('stypy_call_varargs', varargs)
        _InstanceMethodPickler.get_instancemethod.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _InstanceMethodPickler.get_instancemethod.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_InstanceMethodPickler.get_instancemethod', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_instancemethod', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_instancemethod(...)' code ##################

        
        # Call to getattr(...): (line 2155)
        # Processing the call arguments (line 2155)
        # Getting the type of 'self' (line 2155)
        self_278010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2155, 23), 'self', False)
        # Obtaining the member 'parent_obj' of a type (line 2155)
        parent_obj_278011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2155, 23), self_278010, 'parent_obj')
        # Getting the type of 'self' (line 2155)
        self_278012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2155, 40), 'self', False)
        # Obtaining the member 'instancemethod_name' of a type (line 2155)
        instancemethod_name_278013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2155, 40), self_278012, 'instancemethod_name')
        # Processing the call keyword arguments (line 2155)
        kwargs_278014 = {}
        # Getting the type of 'getattr' (line 2155)
        getattr_278009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2155, 15), 'getattr', False)
        # Calling getattr(args, kwargs) (line 2155)
        getattr_call_result_278015 = invoke(stypy.reporting.localization.Localization(__file__, 2155, 15), getattr_278009, *[parent_obj_278011, instancemethod_name_278013], **kwargs_278014)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2155)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2155, 8), 'stypy_return_type', getattr_call_result_278015)
        
        # ################# End of 'get_instancemethod(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_instancemethod' in the type store
        # Getting the type of 'stypy_return_type' (line 2154)
        stypy_return_type_278016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2154, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_278016)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_instancemethod'
        return stypy_return_type_278016


# Assigning a type to the variable '_InstanceMethodPickler' (line 2140)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2140, 0), '_InstanceMethodPickler', _InstanceMethodPickler)

@norecursion
def pts_to_prestep(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'pts_to_prestep'
    module_type_store = module_type_store.open_function_context('pts_to_prestep', 2158, 0, False)
    
    # Passed parameters checking function
    pts_to_prestep.stypy_localization = localization
    pts_to_prestep.stypy_type_of_self = None
    pts_to_prestep.stypy_type_store = module_type_store
    pts_to_prestep.stypy_function_name = 'pts_to_prestep'
    pts_to_prestep.stypy_param_names_list = ['x']
    pts_to_prestep.stypy_varargs_param_name = 'args'
    pts_to_prestep.stypy_kwargs_param_name = None
    pts_to_prestep.stypy_call_defaults = defaults
    pts_to_prestep.stypy_call_varargs = varargs
    pts_to_prestep.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'pts_to_prestep', ['x'], 'args', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'pts_to_prestep', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'pts_to_prestep(...)' code ##################

    unicode_278017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2184, (-1)), 'unicode', u'\n    Convert continuous line to pre-steps.\n\n    Given a set of ``N`` points, convert to ``2N - 1`` points, which when\n    connected linearly give a step function which changes values at the\n    beginning of the intervals.\n\n    Parameters\n    ----------\n    x : array\n        The x location of the steps.\n\n    y1, ..., yp : array\n        y arrays to be turned into steps; all must be the same length as ``x``.\n\n    Returns\n    -------\n    out : array\n        The x and y values converted to steps in the same order as the input;\n        can be unpacked as ``x_out, y1_out, ..., yp_out``.  If the input is\n        length ``N``, each of these arrays will be length ``2N + 1``.\n\n    Examples\n    --------\n    >> x_s, y1_s, y2_s = pts_to_prestep(x, y1, y2)\n    ')
    
    # Assigning a Call to a Name (line 2185):
    
    # Assigning a Call to a Name (line 2185):
    
    # Call to zeros(...): (line 2185)
    # Processing the call arguments (line 2185)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2185)
    tuple_278020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2185, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2185)
    # Adding element type (line 2185)
    int_278021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2185, 22), 'int')
    
    # Call to len(...): (line 2185)
    # Processing the call arguments (line 2185)
    # Getting the type of 'args' (line 2185)
    args_278023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 30), 'args', False)
    # Processing the call keyword arguments (line 2185)
    kwargs_278024 = {}
    # Getting the type of 'len' (line 2185)
    len_278022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 26), 'len', False)
    # Calling len(args, kwargs) (line 2185)
    len_call_result_278025 = invoke(stypy.reporting.localization.Localization(__file__, 2185, 26), len_278022, *[args_278023], **kwargs_278024)
    
    # Applying the binary operator '+' (line 2185)
    result_add_278026 = python_operator(stypy.reporting.localization.Localization(__file__, 2185, 22), '+', int_278021, len_call_result_278025)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2185, 22), tuple_278020, result_add_278026)
    # Adding element type (line 2185)
    int_278027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2185, 37), 'int')
    
    # Call to len(...): (line 2185)
    # Processing the call arguments (line 2185)
    # Getting the type of 'x' (line 2185)
    x_278029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 45), 'x', False)
    # Processing the call keyword arguments (line 2185)
    kwargs_278030 = {}
    # Getting the type of 'len' (line 2185)
    len_278028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 41), 'len', False)
    # Calling len(args, kwargs) (line 2185)
    len_call_result_278031 = invoke(stypy.reporting.localization.Localization(__file__, 2185, 41), len_278028, *[x_278029], **kwargs_278030)
    
    # Applying the binary operator '*' (line 2185)
    result_mul_278032 = python_operator(stypy.reporting.localization.Localization(__file__, 2185, 37), '*', int_278027, len_call_result_278031)
    
    int_278033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2185, 50), 'int')
    # Applying the binary operator '-' (line 2185)
    result_sub_278034 = python_operator(stypy.reporting.localization.Localization(__file__, 2185, 37), '-', result_mul_278032, int_278033)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2185, 22), tuple_278020, result_sub_278034)
    
    # Processing the call keyword arguments (line 2185)
    kwargs_278035 = {}
    # Getting the type of 'np' (line 2185)
    np_278018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 12), 'np', False)
    # Obtaining the member 'zeros' of a type (line 2185)
    zeros_278019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2185, 12), np_278018, 'zeros')
    # Calling zeros(args, kwargs) (line 2185)
    zeros_call_result_278036 = invoke(stypy.reporting.localization.Localization(__file__, 2185, 12), zeros_278019, *[tuple_278020], **kwargs_278035)
    
    # Assigning a type to the variable 'steps' (line 2185)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2185, 4), 'steps', zeros_call_result_278036)
    
    # Assigning a Name to a Subscript (line 2188):
    
    # Assigning a Name to a Subscript (line 2188):
    # Getting the type of 'x' (line 2188)
    x_278037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 21), 'x')
    # Getting the type of 'steps' (line 2188)
    steps_278038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 4), 'steps')
    int_278039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2188, 10), 'int')
    int_278040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2188, 13), 'int')
    int_278041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2188, 16), 'int')
    slice_278042 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2188, 4), int_278040, None, int_278041)
    # Storing an element on a container (line 2188)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2188, 4), steps_278038, ((int_278039, slice_278042), x_278037))
    
    # Assigning a Subscript to a Subscript (line 2189):
    
    # Assigning a Subscript to a Subscript (line 2189):
    
    # Obtaining the type of the subscript
    int_278043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2189, 27), 'int')
    int_278044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2189, 30), 'int')
    int_278045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2189, 32), 'int')
    int_278046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2189, 35), 'int')
    slice_278047 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2189, 21), int_278044, int_278045, int_278046)
    # Getting the type of 'steps' (line 2189)
    steps_278048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2189, 21), 'steps')
    # Obtaining the member '__getitem__' of a type (line 2189)
    getitem___278049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2189, 21), steps_278048, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2189)
    subscript_call_result_278050 = invoke(stypy.reporting.localization.Localization(__file__, 2189, 21), getitem___278049, (int_278043, slice_278047))
    
    # Getting the type of 'steps' (line 2189)
    steps_278051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2189, 4), 'steps')
    int_278052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2189, 10), 'int')
    int_278053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2189, 13), 'int')
    int_278054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2189, 16), 'int')
    slice_278055 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2189, 4), int_278053, None, int_278054)
    # Storing an element on a container (line 2189)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2189, 4), steps_278051, ((int_278052, slice_278055), subscript_call_result_278050))
    
    # Assigning a Name to a Subscript (line 2190):
    
    # Assigning a Name to a Subscript (line 2190):
    # Getting the type of 'args' (line 2190)
    args_278056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2190, 22), 'args')
    # Getting the type of 'steps' (line 2190)
    steps_278057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2190, 4), 'steps')
    int_278058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2190, 10), 'int')
    slice_278059 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2190, 4), int_278058, None, None)
    int_278060 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2190, 14), 'int')
    int_278061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2190, 17), 'int')
    slice_278062 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2190, 4), int_278060, None, int_278061)
    # Storing an element on a container (line 2190)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2190, 4), steps_278057, ((slice_278059, slice_278062), args_278056))
    
    # Assigning a Subscript to a Subscript (line 2191):
    
    # Assigning a Subscript to a Subscript (line 2191):
    
    # Obtaining the type of the subscript
    int_278063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2191, 28), 'int')
    slice_278064 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2191, 22), int_278063, None, None)
    int_278065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2191, 32), 'int')
    int_278066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2191, 35), 'int')
    slice_278067 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2191, 22), int_278065, None, int_278066)
    # Getting the type of 'steps' (line 2191)
    steps_278068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2191, 22), 'steps')
    # Obtaining the member '__getitem__' of a type (line 2191)
    getitem___278069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2191, 22), steps_278068, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2191)
    subscript_call_result_278070 = invoke(stypy.reporting.localization.Localization(__file__, 2191, 22), getitem___278069, (slice_278064, slice_278067))
    
    # Getting the type of 'steps' (line 2191)
    steps_278071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2191, 4), 'steps')
    int_278072 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2191, 10), 'int')
    slice_278073 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2191, 4), int_278072, None, None)
    int_278074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2191, 14), 'int')
    int_278075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2191, 17), 'int')
    slice_278076 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2191, 4), int_278074, None, int_278075)
    # Storing an element on a container (line 2191)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2191, 4), steps_278071, ((slice_278073, slice_278076), subscript_call_result_278070))
    # Getting the type of 'steps' (line 2192)
    steps_278077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2192, 11), 'steps')
    # Assigning a type to the variable 'stypy_return_type' (line 2192)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2192, 4), 'stypy_return_type', steps_278077)
    
    # ################# End of 'pts_to_prestep(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'pts_to_prestep' in the type store
    # Getting the type of 'stypy_return_type' (line 2158)
    stypy_return_type_278078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2158, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_278078)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'pts_to_prestep'
    return stypy_return_type_278078

# Assigning a type to the variable 'pts_to_prestep' (line 2158)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2158, 0), 'pts_to_prestep', pts_to_prestep)

@norecursion
def pts_to_poststep(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'pts_to_poststep'
    module_type_store = module_type_store.open_function_context('pts_to_poststep', 2195, 0, False)
    
    # Passed parameters checking function
    pts_to_poststep.stypy_localization = localization
    pts_to_poststep.stypy_type_of_self = None
    pts_to_poststep.stypy_type_store = module_type_store
    pts_to_poststep.stypy_function_name = 'pts_to_poststep'
    pts_to_poststep.stypy_param_names_list = ['x']
    pts_to_poststep.stypy_varargs_param_name = 'args'
    pts_to_poststep.stypy_kwargs_param_name = None
    pts_to_poststep.stypy_call_defaults = defaults
    pts_to_poststep.stypy_call_varargs = varargs
    pts_to_poststep.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'pts_to_poststep', ['x'], 'args', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'pts_to_poststep', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'pts_to_poststep(...)' code ##################

    unicode_278079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2221, (-1)), 'unicode', u'\n    Convert continuous line to post-steps.\n\n    Given a set of ``N`` points convert to ``2N + 1`` points, which when\n    connected linearly give a step function which changes values at the end of\n    the intervals.\n\n    Parameters\n    ----------\n    x : array\n        The x location of the steps.\n\n    y1, ..., yp : array\n        y arrays to be turned into steps; all must be the same length as ``x``.\n\n    Returns\n    -------\n    out : array\n        The x and y values converted to steps in the same order as the input;\n        can be unpacked as ``x_out, y1_out, ..., yp_out``.  If the input is\n        length ``N``, each of these arrays will be length ``2N + 1``.\n\n    Examples\n    --------\n    >> x_s, y1_s, y2_s = pts_to_poststep(x, y1, y2)\n    ')
    
    # Assigning a Call to a Name (line 2222):
    
    # Assigning a Call to a Name (line 2222):
    
    # Call to zeros(...): (line 2222)
    # Processing the call arguments (line 2222)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2222)
    tuple_278082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2222, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2222)
    # Adding element type (line 2222)
    int_278083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2222, 22), 'int')
    
    # Call to len(...): (line 2222)
    # Processing the call arguments (line 2222)
    # Getting the type of 'args' (line 2222)
    args_278085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 30), 'args', False)
    # Processing the call keyword arguments (line 2222)
    kwargs_278086 = {}
    # Getting the type of 'len' (line 2222)
    len_278084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 26), 'len', False)
    # Calling len(args, kwargs) (line 2222)
    len_call_result_278087 = invoke(stypy.reporting.localization.Localization(__file__, 2222, 26), len_278084, *[args_278085], **kwargs_278086)
    
    # Applying the binary operator '+' (line 2222)
    result_add_278088 = python_operator(stypy.reporting.localization.Localization(__file__, 2222, 22), '+', int_278083, len_call_result_278087)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2222, 22), tuple_278082, result_add_278088)
    # Adding element type (line 2222)
    int_278089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2222, 37), 'int')
    
    # Call to len(...): (line 2222)
    # Processing the call arguments (line 2222)
    # Getting the type of 'x' (line 2222)
    x_278091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 45), 'x', False)
    # Processing the call keyword arguments (line 2222)
    kwargs_278092 = {}
    # Getting the type of 'len' (line 2222)
    len_278090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 41), 'len', False)
    # Calling len(args, kwargs) (line 2222)
    len_call_result_278093 = invoke(stypy.reporting.localization.Localization(__file__, 2222, 41), len_278090, *[x_278091], **kwargs_278092)
    
    # Applying the binary operator '*' (line 2222)
    result_mul_278094 = python_operator(stypy.reporting.localization.Localization(__file__, 2222, 37), '*', int_278089, len_call_result_278093)
    
    int_278095 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2222, 50), 'int')
    # Applying the binary operator '-' (line 2222)
    result_sub_278096 = python_operator(stypy.reporting.localization.Localization(__file__, 2222, 37), '-', result_mul_278094, int_278095)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2222, 22), tuple_278082, result_sub_278096)
    
    # Processing the call keyword arguments (line 2222)
    kwargs_278097 = {}
    # Getting the type of 'np' (line 2222)
    np_278080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 12), 'np', False)
    # Obtaining the member 'zeros' of a type (line 2222)
    zeros_278081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2222, 12), np_278080, 'zeros')
    # Calling zeros(args, kwargs) (line 2222)
    zeros_call_result_278098 = invoke(stypy.reporting.localization.Localization(__file__, 2222, 12), zeros_278081, *[tuple_278082], **kwargs_278097)
    
    # Assigning a type to the variable 'steps' (line 2222)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2222, 4), 'steps', zeros_call_result_278098)
    
    # Assigning a Name to a Subscript (line 2223):
    
    # Assigning a Name to a Subscript (line 2223):
    # Getting the type of 'x' (line 2223)
    x_278099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2223, 21), 'x')
    # Getting the type of 'steps' (line 2223)
    steps_278100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2223, 4), 'steps')
    int_278101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2223, 10), 'int')
    int_278102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2223, 13), 'int')
    int_278103 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2223, 16), 'int')
    slice_278104 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2223, 4), int_278102, None, int_278103)
    # Storing an element on a container (line 2223)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2223, 4), steps_278100, ((int_278101, slice_278104), x_278099))
    
    # Assigning a Subscript to a Subscript (line 2224):
    
    # Assigning a Subscript to a Subscript (line 2224):
    
    # Obtaining the type of the subscript
    int_278105 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2224, 27), 'int')
    int_278106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2224, 30), 'int')
    int_278107 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2224, 33), 'int')
    slice_278108 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2224, 21), int_278106, None, int_278107)
    # Getting the type of 'steps' (line 2224)
    steps_278109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 21), 'steps')
    # Obtaining the member '__getitem__' of a type (line 2224)
    getitem___278110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2224, 21), steps_278109, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2224)
    subscript_call_result_278111 = invoke(stypy.reporting.localization.Localization(__file__, 2224, 21), getitem___278110, (int_278105, slice_278108))
    
    # Getting the type of 'steps' (line 2224)
    steps_278112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 4), 'steps')
    int_278113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2224, 10), 'int')
    int_278114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2224, 13), 'int')
    int_278115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2224, 16), 'int')
    slice_278116 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2224, 4), int_278114, None, int_278115)
    # Storing an element on a container (line 2224)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2224, 4), steps_278112, ((int_278113, slice_278116), subscript_call_result_278111))
    
    # Assigning a Name to a Subscript (line 2225):
    
    # Assigning a Name to a Subscript (line 2225):
    # Getting the type of 'args' (line 2225)
    args_278117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2225, 22), 'args')
    # Getting the type of 'steps' (line 2225)
    steps_278118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2225, 4), 'steps')
    int_278119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2225, 10), 'int')
    slice_278120 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2225, 4), int_278119, None, None)
    int_278121 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2225, 14), 'int')
    int_278122 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2225, 17), 'int')
    slice_278123 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2225, 4), int_278121, None, int_278122)
    # Storing an element on a container (line 2225)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2225, 4), steps_278118, ((slice_278120, slice_278123), args_278117))
    
    # Assigning a Subscript to a Subscript (line 2226):
    
    # Assigning a Subscript to a Subscript (line 2226):
    
    # Obtaining the type of the subscript
    int_278124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2226, 28), 'int')
    slice_278125 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2226, 22), int_278124, None, None)
    int_278126 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2226, 32), 'int')
    int_278127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2226, 34), 'int')
    int_278128 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2226, 37), 'int')
    slice_278129 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2226, 22), int_278126, int_278127, int_278128)
    # Getting the type of 'steps' (line 2226)
    steps_278130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2226, 22), 'steps')
    # Obtaining the member '__getitem__' of a type (line 2226)
    getitem___278131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2226, 22), steps_278130, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2226)
    subscript_call_result_278132 = invoke(stypy.reporting.localization.Localization(__file__, 2226, 22), getitem___278131, (slice_278125, slice_278129))
    
    # Getting the type of 'steps' (line 2226)
    steps_278133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2226, 4), 'steps')
    int_278134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2226, 10), 'int')
    slice_278135 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2226, 4), int_278134, None, None)
    int_278136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2226, 14), 'int')
    int_278137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2226, 17), 'int')
    slice_278138 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2226, 4), int_278136, None, int_278137)
    # Storing an element on a container (line 2226)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2226, 4), steps_278133, ((slice_278135, slice_278138), subscript_call_result_278132))
    # Getting the type of 'steps' (line 2227)
    steps_278139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2227, 11), 'steps')
    # Assigning a type to the variable 'stypy_return_type' (line 2227)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2227, 4), 'stypy_return_type', steps_278139)
    
    # ################# End of 'pts_to_poststep(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'pts_to_poststep' in the type store
    # Getting the type of 'stypy_return_type' (line 2195)
    stypy_return_type_278140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_278140)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'pts_to_poststep'
    return stypy_return_type_278140

# Assigning a type to the variable 'pts_to_poststep' (line 2195)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2195, 0), 'pts_to_poststep', pts_to_poststep)

@norecursion
def pts_to_midstep(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'pts_to_midstep'
    module_type_store = module_type_store.open_function_context('pts_to_midstep', 2230, 0, False)
    
    # Passed parameters checking function
    pts_to_midstep.stypy_localization = localization
    pts_to_midstep.stypy_type_of_self = None
    pts_to_midstep.stypy_type_store = module_type_store
    pts_to_midstep.stypy_function_name = 'pts_to_midstep'
    pts_to_midstep.stypy_param_names_list = ['x']
    pts_to_midstep.stypy_varargs_param_name = 'args'
    pts_to_midstep.stypy_kwargs_param_name = None
    pts_to_midstep.stypy_call_defaults = defaults
    pts_to_midstep.stypy_call_varargs = varargs
    pts_to_midstep.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'pts_to_midstep', ['x'], 'args', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'pts_to_midstep', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'pts_to_midstep(...)' code ##################

    unicode_278141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2256, (-1)), 'unicode', u'\n    Convert continuous line to mid-steps.\n\n    Given a set of ``N`` points convert to ``2N`` points which when connected\n    linearly give a step function which changes values at the middle of the\n    intervals.\n\n    Parameters\n    ----------\n    x : array\n        The x location of the steps.\n\n    y1, ..., yp : array\n        y arrays to be turned into steps; all must be the same length as ``x``.\n\n    Returns\n    -------\n    out : array\n        The x and y values converted to steps in the same order as the input;\n        can be unpacked as ``x_out, y1_out, ..., yp_out``.  If the input is\n        length ``N``, each of these arrays will be length ``2N``.\n\n    Examples\n    --------\n    >> x_s, y1_s, y2_s = pts_to_midstep(x, y1, y2)\n    ')
    
    # Assigning a Call to a Name (line 2257):
    
    # Assigning a Call to a Name (line 2257):
    
    # Call to zeros(...): (line 2257)
    # Processing the call arguments (line 2257)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2257)
    tuple_278144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2257, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2257)
    # Adding element type (line 2257)
    int_278145 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2257, 22), 'int')
    
    # Call to len(...): (line 2257)
    # Processing the call arguments (line 2257)
    # Getting the type of 'args' (line 2257)
    args_278147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2257, 30), 'args', False)
    # Processing the call keyword arguments (line 2257)
    kwargs_278148 = {}
    # Getting the type of 'len' (line 2257)
    len_278146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2257, 26), 'len', False)
    # Calling len(args, kwargs) (line 2257)
    len_call_result_278149 = invoke(stypy.reporting.localization.Localization(__file__, 2257, 26), len_278146, *[args_278147], **kwargs_278148)
    
    # Applying the binary operator '+' (line 2257)
    result_add_278150 = python_operator(stypy.reporting.localization.Localization(__file__, 2257, 22), '+', int_278145, len_call_result_278149)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2257, 22), tuple_278144, result_add_278150)
    # Adding element type (line 2257)
    int_278151 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2257, 37), 'int')
    
    # Call to len(...): (line 2257)
    # Processing the call arguments (line 2257)
    # Getting the type of 'x' (line 2257)
    x_278153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2257, 45), 'x', False)
    # Processing the call keyword arguments (line 2257)
    kwargs_278154 = {}
    # Getting the type of 'len' (line 2257)
    len_278152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2257, 41), 'len', False)
    # Calling len(args, kwargs) (line 2257)
    len_call_result_278155 = invoke(stypy.reporting.localization.Localization(__file__, 2257, 41), len_278152, *[x_278153], **kwargs_278154)
    
    # Applying the binary operator '*' (line 2257)
    result_mul_278156 = python_operator(stypy.reporting.localization.Localization(__file__, 2257, 37), '*', int_278151, len_call_result_278155)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2257, 22), tuple_278144, result_mul_278156)
    
    # Processing the call keyword arguments (line 2257)
    kwargs_278157 = {}
    # Getting the type of 'np' (line 2257)
    np_278142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2257, 12), 'np', False)
    # Obtaining the member 'zeros' of a type (line 2257)
    zeros_278143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2257, 12), np_278142, 'zeros')
    # Calling zeros(args, kwargs) (line 2257)
    zeros_call_result_278158 = invoke(stypy.reporting.localization.Localization(__file__, 2257, 12), zeros_278143, *[tuple_278144], **kwargs_278157)
    
    # Assigning a type to the variable 'steps' (line 2257)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2257, 4), 'steps', zeros_call_result_278158)
    
    # Assigning a Call to a Name (line 2258):
    
    # Assigning a Call to a Name (line 2258):
    
    # Call to asanyarray(...): (line 2258)
    # Processing the call arguments (line 2258)
    # Getting the type of 'x' (line 2258)
    x_278161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2258, 22), 'x', False)
    # Processing the call keyword arguments (line 2258)
    kwargs_278162 = {}
    # Getting the type of 'np' (line 2258)
    np_278159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2258, 8), 'np', False)
    # Obtaining the member 'asanyarray' of a type (line 2258)
    asanyarray_278160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2258, 8), np_278159, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 2258)
    asanyarray_call_result_278163 = invoke(stypy.reporting.localization.Localization(__file__, 2258, 8), asanyarray_278160, *[x_278161], **kwargs_278162)
    
    # Assigning a type to the variable 'x' (line 2258)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2258, 4), 'x', asanyarray_call_result_278163)
    
    # Multiple assignment of 2 elements.
    
    # Assigning a BinOp to a Subscript (line 2259):
    
    # Obtaining the type of the subscript
    int_278164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2259, 44), 'int')
    slice_278165 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2259, 41), None, int_278164, None)
    # Getting the type of 'x' (line 2259)
    x_278166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2259, 41), 'x')
    # Obtaining the member '__getitem__' of a type (line 2259)
    getitem___278167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2259, 41), x_278166, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2259)
    subscript_call_result_278168 = invoke(stypy.reporting.localization.Localization(__file__, 2259, 41), getitem___278167, slice_278165)
    
    
    # Obtaining the type of the subscript
    int_278169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2259, 52), 'int')
    slice_278170 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2259, 50), int_278169, None, None)
    # Getting the type of 'x' (line 2259)
    x_278171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2259, 50), 'x')
    # Obtaining the member '__getitem__' of a type (line 2259)
    getitem___278172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2259, 50), x_278171, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2259)
    subscript_call_result_278173 = invoke(stypy.reporting.localization.Localization(__file__, 2259, 50), getitem___278172, slice_278170)
    
    # Applying the binary operator '+' (line 2259)
    result_add_278174 = python_operator(stypy.reporting.localization.Localization(__file__, 2259, 41), '+', subscript_call_result_278168, subscript_call_result_278173)
    
    int_278175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2259, 59), 'int')
    # Applying the binary operator 'div' (line 2259)
    result_div_278176 = python_operator(stypy.reporting.localization.Localization(__file__, 2259, 40), 'div', result_add_278174, int_278175)
    
    # Getting the type of 'steps' (line 2259)
    steps_278177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2259, 23), 'steps')
    int_278178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2259, 29), 'int')
    int_278179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2259, 32), 'int')
    int_278180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2259, 35), 'int')
    slice_278181 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2259, 23), int_278179, None, int_278180)
    # Storing an element on a container (line 2259)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2259, 23), steps_278177, ((int_278178, slice_278181), result_div_278176))
    
    # Assigning a Subscript to a Subscript (line 2259):
    
    # Obtaining the type of the subscript
    int_278182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2259, 29), 'int')
    int_278183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2259, 32), 'int')
    int_278184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2259, 35), 'int')
    slice_278185 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2259, 23), int_278183, None, int_278184)
    # Getting the type of 'steps' (line 2259)
    steps_278186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2259, 23), 'steps')
    # Obtaining the member '__getitem__' of a type (line 2259)
    getitem___278187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2259, 23), steps_278186, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2259)
    subscript_call_result_278188 = invoke(stypy.reporting.localization.Localization(__file__, 2259, 23), getitem___278187, (int_278182, slice_278185))
    
    # Getting the type of 'steps' (line 2259)
    steps_278189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2259, 4), 'steps')
    int_278190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2259, 10), 'int')
    int_278191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2259, 13), 'int')
    int_278192 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2259, 15), 'int')
    int_278193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2259, 18), 'int')
    slice_278194 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2259, 4), int_278191, int_278192, int_278193)
    # Storing an element on a container (line 2259)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2259, 4), steps_278189, ((int_278190, slice_278194), subscript_call_result_278188))
    
    # Assigning a Tuple to a Tuple (line 2260):
    
    # Assigning a Subscript to a Name (line 2260):
    
    # Obtaining the type of the subscript
    int_278195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2260, 34), 'int')
    # Getting the type of 'x' (line 2260)
    x_278196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2260, 32), 'x')
    # Obtaining the member '__getitem__' of a type (line 2260)
    getitem___278197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2260, 32), x_278196, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2260)
    subscript_call_result_278198 = invoke(stypy.reporting.localization.Localization(__file__, 2260, 32), getitem___278197, int_278195)
    
    # Assigning a type to the variable 'tuple_assignment_273675' (line 2260)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2260, 4), 'tuple_assignment_273675', subscript_call_result_278198)
    
    # Assigning a Subscript to a Name (line 2260):
    
    # Obtaining the type of the subscript
    int_278199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2260, 40), 'int')
    # Getting the type of 'x' (line 2260)
    x_278200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2260, 38), 'x')
    # Obtaining the member '__getitem__' of a type (line 2260)
    getitem___278201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2260, 38), x_278200, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2260)
    subscript_call_result_278202 = invoke(stypy.reporting.localization.Localization(__file__, 2260, 38), getitem___278201, int_278199)
    
    # Assigning a type to the variable 'tuple_assignment_273676' (line 2260)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2260, 4), 'tuple_assignment_273676', subscript_call_result_278202)
    
    # Assigning a Name to a Subscript (line 2260):
    # Getting the type of 'tuple_assignment_273675' (line 2260)
    tuple_assignment_273675_278203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2260, 4), 'tuple_assignment_273675')
    # Getting the type of 'steps' (line 2260)
    steps_278204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2260, 4), 'steps')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2260)
    tuple_278205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2260, 10), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2260)
    # Adding element type (line 2260)
    int_278206 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2260, 10), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2260, 10), tuple_278205, int_278206)
    # Adding element type (line 2260)
    int_278207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2260, 13), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2260, 10), tuple_278205, int_278207)
    
    # Storing an element on a container (line 2260)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2260, 4), steps_278204, (tuple_278205, tuple_assignment_273675_278203))
    
    # Assigning a Name to a Subscript (line 2260):
    # Getting the type of 'tuple_assignment_273676' (line 2260)
    tuple_assignment_273676_278208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2260, 4), 'tuple_assignment_273676')
    # Getting the type of 'steps' (line 2260)
    steps_278209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2260, 17), 'steps')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2260)
    tuple_278210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2260, 23), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2260)
    # Adding element type (line 2260)
    int_278211 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2260, 23), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2260, 23), tuple_278210, int_278211)
    # Adding element type (line 2260)
    int_278212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2260, 26), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2260, 23), tuple_278210, int_278212)
    
    # Storing an element on a container (line 2260)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2260, 17), steps_278209, (tuple_278210, tuple_assignment_273676_278208))
    
    # Assigning a Name to a Subscript (line 2261):
    
    # Assigning a Name to a Subscript (line 2261):
    # Getting the type of 'args' (line 2261)
    args_278213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 22), 'args')
    # Getting the type of 'steps' (line 2261)
    steps_278214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 4), 'steps')
    int_278215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2261, 10), 'int')
    slice_278216 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2261, 4), int_278215, None, None)
    int_278217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2261, 14), 'int')
    int_278218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2261, 17), 'int')
    slice_278219 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2261, 4), int_278217, None, int_278218)
    # Storing an element on a container (line 2261)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2261, 4), steps_278214, ((slice_278216, slice_278219), args_278213))
    
    # Assigning a Subscript to a Subscript (line 2262):
    
    # Assigning a Subscript to a Subscript (line 2262):
    
    # Obtaining the type of the subscript
    int_278220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2262, 28), 'int')
    slice_278221 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2262, 22), int_278220, None, None)
    int_278222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2262, 32), 'int')
    int_278223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2262, 35), 'int')
    slice_278224 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2262, 22), int_278222, None, int_278223)
    # Getting the type of 'steps' (line 2262)
    steps_278225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2262, 22), 'steps')
    # Obtaining the member '__getitem__' of a type (line 2262)
    getitem___278226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2262, 22), steps_278225, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2262)
    subscript_call_result_278227 = invoke(stypy.reporting.localization.Localization(__file__, 2262, 22), getitem___278226, (slice_278221, slice_278224))
    
    # Getting the type of 'steps' (line 2262)
    steps_278228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2262, 4), 'steps')
    int_278229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2262, 10), 'int')
    slice_278230 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2262, 4), int_278229, None, None)
    int_278231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2262, 14), 'int')
    int_278232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2262, 17), 'int')
    slice_278233 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2262, 4), int_278231, None, int_278232)
    # Storing an element on a container (line 2262)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2262, 4), steps_278228, ((slice_278230, slice_278233), subscript_call_result_278227))
    # Getting the type of 'steps' (line 2263)
    steps_278234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2263, 11), 'steps')
    # Assigning a type to the variable 'stypy_return_type' (line 2263)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2263, 4), 'stypy_return_type', steps_278234)
    
    # ################# End of 'pts_to_midstep(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'pts_to_midstep' in the type store
    # Getting the type of 'stypy_return_type' (line 2230)
    stypy_return_type_278235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2230, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_278235)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'pts_to_midstep'
    return stypy_return_type_278235

# Assigning a type to the variable 'pts_to_midstep' (line 2230)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2230, 0), 'pts_to_midstep', pts_to_midstep)

# Assigning a Dict to a Name (line 2266):

# Assigning a Dict to a Name (line 2266):

# Obtaining an instance of the builtin type 'dict' (line 2266)
dict_278236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2266, 18), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 2266)
# Adding element type (key, value) (line 2266)
unicode_278237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2266, 19), 'unicode', u'default')

@norecursion
def _stypy_temp_lambda_116(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_116'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_116', 2266, 30, True)
    # Passed parameters checking function
    _stypy_temp_lambda_116.stypy_localization = localization
    _stypy_temp_lambda_116.stypy_type_of_self = None
    _stypy_temp_lambda_116.stypy_type_store = module_type_store
    _stypy_temp_lambda_116.stypy_function_name = '_stypy_temp_lambda_116'
    _stypy_temp_lambda_116.stypy_param_names_list = ['x', 'y']
    _stypy_temp_lambda_116.stypy_varargs_param_name = None
    _stypy_temp_lambda_116.stypy_kwargs_param_name = None
    _stypy_temp_lambda_116.stypy_call_defaults = defaults
    _stypy_temp_lambda_116.stypy_call_varargs = varargs
    _stypy_temp_lambda_116.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_116', ['x', 'y'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_116', ['x', 'y'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    
    # Obtaining an instance of the builtin type 'tuple' (line 2266)
    tuple_278238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2266, 44), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2266)
    # Adding element type (line 2266)
    # Getting the type of 'x' (line 2266)
    x_278239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2266, 44), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2266, 44), tuple_278238, x_278239)
    # Adding element type (line 2266)
    # Getting the type of 'y' (line 2266)
    y_278240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2266, 47), 'y')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2266, 44), tuple_278238, y_278240)
    
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 2266)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2266, 30), 'stypy_return_type', tuple_278238)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_116' in the type store
    # Getting the type of 'stypy_return_type' (line 2266)
    stypy_return_type_278241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2266, 30), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_278241)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_116'
    return stypy_return_type_278241

# Assigning a type to the variable '_stypy_temp_lambda_116' (line 2266)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2266, 30), '_stypy_temp_lambda_116', _stypy_temp_lambda_116)
# Getting the type of '_stypy_temp_lambda_116' (line 2266)
_stypy_temp_lambda_116_278242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2266, 30), '_stypy_temp_lambda_116')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2266, 18), dict_278236, (unicode_278237, _stypy_temp_lambda_116_278242))
# Adding element type (key, value) (line 2266)
unicode_278243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2267, 19), 'unicode', u'steps')
# Getting the type of 'pts_to_prestep' (line 2267)
pts_to_prestep_278244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2267, 28), 'pts_to_prestep')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2266, 18), dict_278236, (unicode_278243, pts_to_prestep_278244))
# Adding element type (key, value) (line 2266)
unicode_278245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2268, 19), 'unicode', u'steps-pre')
# Getting the type of 'pts_to_prestep' (line 2268)
pts_to_prestep_278246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2268, 32), 'pts_to_prestep')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2266, 18), dict_278236, (unicode_278245, pts_to_prestep_278246))
# Adding element type (key, value) (line 2266)
unicode_278247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2269, 19), 'unicode', u'steps-post')
# Getting the type of 'pts_to_poststep' (line 2269)
pts_to_poststep_278248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 33), 'pts_to_poststep')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2266, 18), dict_278236, (unicode_278247, pts_to_poststep_278248))
# Adding element type (key, value) (line 2266)
unicode_278249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2270, 19), 'unicode', u'steps-mid')
# Getting the type of 'pts_to_midstep' (line 2270)
pts_to_midstep_278250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 32), 'pts_to_midstep')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2266, 18), dict_278236, (unicode_278249, pts_to_midstep_278250))

# Assigning a type to the variable 'STEP_LOOKUP_MAP' (line 2266)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2266, 0), 'STEP_LOOKUP_MAP', dict_278236)

@norecursion
def index_of(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'index_of'
    module_type_store = module_type_store.open_function_context('index_of', 2273, 0, False)
    
    # Passed parameters checking function
    index_of.stypy_localization = localization
    index_of.stypy_type_of_self = None
    index_of.stypy_type_store = module_type_store
    index_of.stypy_function_name = 'index_of'
    index_of.stypy_param_names_list = ['y']
    index_of.stypy_varargs_param_name = None
    index_of.stypy_kwargs_param_name = None
    index_of.stypy_call_defaults = defaults
    index_of.stypy_call_varargs = varargs
    index_of.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'index_of', ['y'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'index_of', localization, ['y'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'index_of(...)' code ##################

    unicode_278251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2293, (-1)), 'unicode', u'\n    A helper function to get the index of an input to plot\n    against if x values are not explicitly given.\n\n    Tries to get `y.index` (works if this is a pd.Series), if that\n    fails, return np.arange(y.shape[0]).\n\n    This will be extended in the future to deal with more types of\n    labeled data.\n\n    Parameters\n    ----------\n    y : scalar or array-like\n        The proposed y-value\n\n    Returns\n    -------\n    x, y : ndarray\n       The x and y values to plot.\n    ')
    
    
    # SSA begins for try-except statement (line 2294)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2295)
    tuple_278252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2295, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2295)
    # Adding element type (line 2295)
    # Getting the type of 'y' (line 2295)
    y_278253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2295, 15), 'y')
    # Obtaining the member 'index' of a type (line 2295)
    index_278254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2295, 15), y_278253, 'index')
    # Obtaining the member 'values' of a type (line 2295)
    values_278255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2295, 15), index_278254, 'values')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2295, 15), tuple_278252, values_278255)
    # Adding element type (line 2295)
    # Getting the type of 'y' (line 2295)
    y_278256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2295, 31), 'y')
    # Obtaining the member 'values' of a type (line 2295)
    values_278257 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2295, 31), y_278256, 'values')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2295, 15), tuple_278252, values_278257)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2295)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2295, 8), 'stypy_return_type', tuple_278252)
    # SSA branch for the except part of a try statement (line 2294)
    # SSA branch for the except 'AttributeError' branch of a try statement (line 2294)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Call to a Name (line 2297):
    
    # Assigning a Call to a Name (line 2297):
    
    # Call to _check_1d(...): (line 2297)
    # Processing the call arguments (line 2297)
    # Getting the type of 'y' (line 2297)
    y_278259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 22), 'y', False)
    # Processing the call keyword arguments (line 2297)
    kwargs_278260 = {}
    # Getting the type of '_check_1d' (line 2297)
    _check_1d_278258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 12), '_check_1d', False)
    # Calling _check_1d(args, kwargs) (line 2297)
    _check_1d_call_result_278261 = invoke(stypy.reporting.localization.Localization(__file__, 2297, 12), _check_1d_278258, *[y_278259], **kwargs_278260)
    
    # Assigning a type to the variable 'y' (line 2297)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2297, 8), 'y', _check_1d_call_result_278261)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2298)
    tuple_278262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2298, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2298)
    # Adding element type (line 2298)
    
    # Call to arange(...): (line 2298)
    # Processing the call arguments (line 2298)
    
    # Obtaining the type of the subscript
    int_278265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2298, 33), 'int')
    # Getting the type of 'y' (line 2298)
    y_278266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 25), 'y', False)
    # Obtaining the member 'shape' of a type (line 2298)
    shape_278267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2298, 25), y_278266, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2298)
    getitem___278268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2298, 25), shape_278267, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2298)
    subscript_call_result_278269 = invoke(stypy.reporting.localization.Localization(__file__, 2298, 25), getitem___278268, int_278265)
    
    # Processing the call keyword arguments (line 2298)
    # Getting the type of 'float' (line 2298)
    float_278270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 43), 'float', False)
    keyword_278271 = float_278270
    kwargs_278272 = {'dtype': keyword_278271}
    # Getting the type of 'np' (line 2298)
    np_278263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 15), 'np', False)
    # Obtaining the member 'arange' of a type (line 2298)
    arange_278264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2298, 15), np_278263, 'arange')
    # Calling arange(args, kwargs) (line 2298)
    arange_call_result_278273 = invoke(stypy.reporting.localization.Localization(__file__, 2298, 15), arange_278264, *[subscript_call_result_278269], **kwargs_278272)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2298, 15), tuple_278262, arange_call_result_278273)
    # Adding element type (line 2298)
    # Getting the type of 'y' (line 2298)
    y_278274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 51), 'y')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2298, 15), tuple_278262, y_278274)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2298)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2298, 8), 'stypy_return_type', tuple_278262)
    # SSA join for try-except statement (line 2294)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'index_of(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'index_of' in the type store
    # Getting the type of 'stypy_return_type' (line 2273)
    stypy_return_type_278275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2273, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_278275)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'index_of'
    return stypy_return_type_278275

# Assigning a type to the variable 'index_of' (line 2273)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2273, 0), 'index_of', index_of)

@norecursion
def safe_first_element(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'safe_first_element'
    module_type_store = module_type_store.open_function_context('safe_first_element', 2301, 0, False)
    
    # Passed parameters checking function
    safe_first_element.stypy_localization = localization
    safe_first_element.stypy_type_of_self = None
    safe_first_element.stypy_type_store = module_type_store
    safe_first_element.stypy_function_name = 'safe_first_element'
    safe_first_element.stypy_param_names_list = ['obj']
    safe_first_element.stypy_varargs_param_name = None
    safe_first_element.stypy_kwargs_param_name = None
    safe_first_element.stypy_call_defaults = defaults
    safe_first_element.stypy_call_varargs = varargs
    safe_first_element.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'safe_first_element', ['obj'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'safe_first_element', localization, ['obj'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'safe_first_element(...)' code ##################

    
    
    # Call to isinstance(...): (line 2302)
    # Processing the call arguments (line 2302)
    # Getting the type of 'obj' (line 2302)
    obj_278277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2302, 18), 'obj', False)
    # Getting the type of 'collections' (line 2302)
    collections_278278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2302, 23), 'collections', False)
    # Obtaining the member 'Iterator' of a type (line 2302)
    Iterator_278279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2302, 23), collections_278278, 'Iterator')
    # Processing the call keyword arguments (line 2302)
    kwargs_278280 = {}
    # Getting the type of 'isinstance' (line 2302)
    isinstance_278276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2302, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2302)
    isinstance_call_result_278281 = invoke(stypy.reporting.localization.Localization(__file__, 2302, 7), isinstance_278276, *[obj_278277, Iterator_278279], **kwargs_278280)
    
    # Testing the type of an if condition (line 2302)
    if_condition_278282 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2302, 4), isinstance_call_result_278281)
    # Assigning a type to the variable 'if_condition_278282' (line 2302)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2302, 4), 'if_condition_278282', if_condition_278282)
    # SSA begins for if statement (line 2302)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # SSA begins for try-except statement (line 2308)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Obtaining the type of the subscript
    int_278283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2309, 23), 'int')
    # Getting the type of 'obj' (line 2309)
    obj_278284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2309, 19), 'obj')
    # Obtaining the member '__getitem__' of a type (line 2309)
    getitem___278285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2309, 19), obj_278284, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2309)
    subscript_call_result_278286 = invoke(stypy.reporting.localization.Localization(__file__, 2309, 19), getitem___278285, int_278283)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2309)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2309, 12), 'stypy_return_type', subscript_call_result_278286)
    # SSA branch for the except part of a try statement (line 2308)
    # SSA branch for the except 'TypeError' branch of a try statement (line 2308)
    module_type_store.open_ssa_branch('except')
    pass
    # SSA join for try-except statement (line 2308)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to RuntimeError(...): (line 2312)
    # Processing the call arguments (line 2312)
    unicode_278288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2312, 27), 'unicode', u'matplotlib does not support generators as input')
    # Processing the call keyword arguments (line 2312)
    kwargs_278289 = {}
    # Getting the type of 'RuntimeError' (line 2312)
    RuntimeError_278287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2312, 14), 'RuntimeError', False)
    # Calling RuntimeError(args, kwargs) (line 2312)
    RuntimeError_call_result_278290 = invoke(stypy.reporting.localization.Localization(__file__, 2312, 14), RuntimeError_278287, *[unicode_278288], **kwargs_278289)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2312, 8), RuntimeError_call_result_278290, 'raise parameter', BaseException)
    # SSA join for if statement (line 2302)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to next(...): (line 2314)
    # Processing the call arguments (line 2314)
    
    # Call to iter(...): (line 2314)
    # Processing the call arguments (line 2314)
    # Getting the type of 'obj' (line 2314)
    obj_278293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2314, 21), 'obj', False)
    # Processing the call keyword arguments (line 2314)
    kwargs_278294 = {}
    # Getting the type of 'iter' (line 2314)
    iter_278292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2314, 16), 'iter', False)
    # Calling iter(args, kwargs) (line 2314)
    iter_call_result_278295 = invoke(stypy.reporting.localization.Localization(__file__, 2314, 16), iter_278292, *[obj_278293], **kwargs_278294)
    
    # Processing the call keyword arguments (line 2314)
    kwargs_278296 = {}
    # Getting the type of 'next' (line 2314)
    next_278291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2314, 11), 'next', False)
    # Calling next(args, kwargs) (line 2314)
    next_call_result_278297 = invoke(stypy.reporting.localization.Localization(__file__, 2314, 11), next_278291, *[iter_call_result_278295], **kwargs_278296)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2314)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2314, 4), 'stypy_return_type', next_call_result_278297)
    
    # ################# End of 'safe_first_element(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'safe_first_element' in the type store
    # Getting the type of 'stypy_return_type' (line 2301)
    stypy_return_type_278298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2301, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_278298)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'safe_first_element'
    return stypy_return_type_278298

# Assigning a type to the variable 'safe_first_element' (line 2301)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2301, 0), 'safe_first_element', safe_first_element)

@norecursion
def sanitize_sequence(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'sanitize_sequence'
    module_type_store = module_type_store.open_function_context('sanitize_sequence', 2317, 0, False)
    
    # Passed parameters checking function
    sanitize_sequence.stypy_localization = localization
    sanitize_sequence.stypy_type_of_self = None
    sanitize_sequence.stypy_type_store = module_type_store
    sanitize_sequence.stypy_function_name = 'sanitize_sequence'
    sanitize_sequence.stypy_param_names_list = ['data']
    sanitize_sequence.stypy_varargs_param_name = None
    sanitize_sequence.stypy_kwargs_param_name = None
    sanitize_sequence.stypy_call_defaults = defaults
    sanitize_sequence.stypy_call_varargs = varargs
    sanitize_sequence.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'sanitize_sequence', ['data'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'sanitize_sequence', localization, ['data'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'sanitize_sequence(...)' code ##################

    unicode_278299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2318, 4), 'unicode', u'Converts dictview object to list')
    
    
    # Call to isinstance(...): (line 2319)
    # Processing the call arguments (line 2319)
    # Getting the type of 'data' (line 2319)
    data_278301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2319, 36), 'data', False)
    # Getting the type of 'collections' (line 2319)
    collections_278302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2319, 42), 'collections', False)
    # Obtaining the member 'MappingView' of a type (line 2319)
    MappingView_278303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2319, 42), collections_278302, 'MappingView')
    # Processing the call keyword arguments (line 2319)
    kwargs_278304 = {}
    # Getting the type of 'isinstance' (line 2319)
    isinstance_278300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2319, 25), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2319)
    isinstance_call_result_278305 = invoke(stypy.reporting.localization.Localization(__file__, 2319, 25), isinstance_278300, *[data_278301, MappingView_278303], **kwargs_278304)
    
    # Testing the type of an if expression (line 2319)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2319, 11), isinstance_call_result_278305)
    # SSA begins for if expression (line 2319)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    
    # Call to list(...): (line 2319)
    # Processing the call arguments (line 2319)
    # Getting the type of 'data' (line 2319)
    data_278307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2319, 16), 'data', False)
    # Processing the call keyword arguments (line 2319)
    kwargs_278308 = {}
    # Getting the type of 'list' (line 2319)
    list_278306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2319, 11), 'list', False)
    # Calling list(args, kwargs) (line 2319)
    list_call_result_278309 = invoke(stypy.reporting.localization.Localization(__file__, 2319, 11), list_278306, *[data_278307], **kwargs_278308)
    
    # SSA branch for the else part of an if expression (line 2319)
    module_type_store.open_ssa_branch('if expression else')
    # Getting the type of 'data' (line 2319)
    data_278310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2319, 72), 'data')
    # SSA join for if expression (line 2319)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_278311 = union_type.UnionType.add(list_call_result_278309, data_278310)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2319)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2319, 4), 'stypy_return_type', if_exp_278311)
    
    # ################# End of 'sanitize_sequence(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'sanitize_sequence' in the type store
    # Getting the type of 'stypy_return_type' (line 2317)
    stypy_return_type_278312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2317, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_278312)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'sanitize_sequence'
    return stypy_return_type_278312

# Assigning a type to the variable 'sanitize_sequence' (line 2317)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2317, 0), 'sanitize_sequence', sanitize_sequence)

@norecursion
def normalize_kwargs(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2322)
    None_278313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2322, 39), 'None')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2322)
    tuple_278314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2322, 54), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2322)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 2322)
    tuple_278315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2322, 68), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2322)
    
    # Getting the type of 'None' (line 2323)
    None_278316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2323, 29), 'None')
    defaults = [None_278313, tuple_278314, tuple_278315, None_278316]
    # Create a new context for function 'normalize_kwargs'
    module_type_store = module_type_store.open_function_context('normalize_kwargs', 2322, 0, False)
    
    # Passed parameters checking function
    normalize_kwargs.stypy_localization = localization
    normalize_kwargs.stypy_type_of_self = None
    normalize_kwargs.stypy_type_store = module_type_store
    normalize_kwargs.stypy_function_name = 'normalize_kwargs'
    normalize_kwargs.stypy_param_names_list = ['kw', 'alias_mapping', 'required', 'forbidden', 'allowed']
    normalize_kwargs.stypy_varargs_param_name = None
    normalize_kwargs.stypy_kwargs_param_name = None
    normalize_kwargs.stypy_call_defaults = defaults
    normalize_kwargs.stypy_call_varargs = varargs
    normalize_kwargs.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'normalize_kwargs', ['kw', 'alias_mapping', 'required', 'forbidden', 'allowed'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'normalize_kwargs', localization, ['kw', 'alias_mapping', 'required', 'forbidden', 'allowed'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'normalize_kwargs(...)' code ##################

    unicode_278317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2364, (-1)), 'unicode', u'Helper function to normalize kwarg inputs\n\n    The order they are resolved are:\n\n     1. aliasing\n     2. required\n     3. forbidden\n     4. allowed\n\n    This order means that only the canonical names need appear in\n    `allowed`, `forbidden`, `required`\n\n    Parameters\n    ----------\n\n    alias_mapping, dict, optional\n        A mapping between a canonical name to a list of\n        aliases, in order of precedence from lowest to highest.\n\n        If the canonical value is not in the list it is assumed to have\n        the highest priority.\n\n    required : iterable, optional\n        A tuple of fields that must be in kwargs.\n\n    forbidden : iterable, optional\n        A list of keys which may not be in kwargs\n\n    allowed : tuple, optional\n        A tuple of allowed fields.  If this not None, then raise if\n        `kw` contains any keys not in the union of `required`\n        and `allowed`.  To allow only the required fields pass in\n        ``()`` for `allowed`\n\n    Raises\n    ------\n    TypeError\n        To match what python raises if invalid args/kwargs are passed to\n        a callable.\n\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 2366)
    # Getting the type of 'alias_mapping' (line 2366)
    alias_mapping_278318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2366, 7), 'alias_mapping')
    # Getting the type of 'None' (line 2366)
    None_278319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2366, 24), 'None')
    
    (may_be_278320, more_types_in_union_278321) = may_be_none(alias_mapping_278318, None_278319)

    if may_be_278320:

        if more_types_in_union_278321:
            # Runtime conditional SSA (line 2366)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 2367):
        
        # Assigning a Call to a Name (line 2367):
        
        # Call to dict(...): (line 2367)
        # Processing the call keyword arguments (line 2367)
        kwargs_278323 = {}
        # Getting the type of 'dict' (line 2367)
        dict_278322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2367, 24), 'dict', False)
        # Calling dict(args, kwargs) (line 2367)
        dict_call_result_278324 = invoke(stypy.reporting.localization.Localization(__file__, 2367, 24), dict_278322, *[], **kwargs_278323)
        
        # Assigning a type to the variable 'alias_mapping' (line 2367)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2367, 8), 'alias_mapping', dict_call_result_278324)

        if more_types_in_union_278321:
            # SSA join for if statement (line 2366)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 2370):
    
    # Assigning a Call to a Name (line 2370):
    
    # Call to dict(...): (line 2370)
    # Processing the call arguments (line 2370)
    # Getting the type of 'kw' (line 2370)
    kw_278326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2370, 14), 'kw', False)
    # Processing the call keyword arguments (line 2370)
    kwargs_278327 = {}
    # Getting the type of 'dict' (line 2370)
    dict_278325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2370, 9), 'dict', False)
    # Calling dict(args, kwargs) (line 2370)
    dict_call_result_278328 = invoke(stypy.reporting.localization.Localization(__file__, 2370, 9), dict_278325, *[kw_278326], **kwargs_278327)
    
    # Assigning a type to the variable 'kw' (line 2370)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2370, 4), 'kw', dict_call_result_278328)
    
    # Assigning a Call to a Name (line 2372):
    
    # Assigning a Call to a Name (line 2372):
    
    # Call to dict(...): (line 2372)
    # Processing the call keyword arguments (line 2372)
    kwargs_278330 = {}
    # Getting the type of 'dict' (line 2372)
    dict_278329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2372, 10), 'dict', False)
    # Calling dict(args, kwargs) (line 2372)
    dict_call_result_278331 = invoke(stypy.reporting.localization.Localization(__file__, 2372, 10), dict_278329, *[], **kwargs_278330)
    
    # Assigning a type to the variable 'ret' (line 2372)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2372, 4), 'ret', dict_call_result_278331)
    
    
    # Call to iteritems(...): (line 2375)
    # Processing the call arguments (line 2375)
    # Getting the type of 'alias_mapping' (line 2375)
    alias_mapping_278334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2375, 47), 'alias_mapping', False)
    # Processing the call keyword arguments (line 2375)
    kwargs_278335 = {}
    # Getting the type of 'six' (line 2375)
    six_278332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2375, 33), 'six', False)
    # Obtaining the member 'iteritems' of a type (line 2375)
    iteritems_278333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2375, 33), six_278332, 'iteritems')
    # Calling iteritems(args, kwargs) (line 2375)
    iteritems_call_result_278336 = invoke(stypy.reporting.localization.Localization(__file__, 2375, 33), iteritems_278333, *[alias_mapping_278334], **kwargs_278335)
    
    # Testing the type of a for loop iterable (line 2375)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2375, 4), iteritems_call_result_278336)
    # Getting the type of the for loop variable (line 2375)
    for_loop_var_278337 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2375, 4), iteritems_call_result_278336)
    # Assigning a type to the variable 'canonical' (line 2375)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2375, 4), 'canonical', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2375, 4), for_loop_var_278337))
    # Assigning a type to the variable 'alias_list' (line 2375)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2375, 4), 'alias_list', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2375, 4), for_loop_var_278337))
    # SSA begins for a for statement (line 2375)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a List to a Name (line 2379):
    
    # Assigning a List to a Name (line 2379):
    
    # Obtaining an instance of the builtin type 'list' (line 2379)
    list_278338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2379, 14), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2379)
    
    # Assigning a type to the variable 'tmp' (line 2379)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2379, 8), 'tmp', list_278338)
    
    # Assigning a List to a Name (line 2380):
    
    # Assigning a List to a Name (line 2380):
    
    # Obtaining an instance of the builtin type 'list' (line 2380)
    list_278339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2380, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2380)
    
    # Assigning a type to the variable 'seen' (line 2380)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2380, 8), 'seen', list_278339)
    
    # Getting the type of 'alias_list' (line 2381)
    alias_list_278340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2381, 17), 'alias_list')
    # Testing the type of a for loop iterable (line 2381)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2381, 8), alias_list_278340)
    # Getting the type of the for loop variable (line 2381)
    for_loop_var_278341 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2381, 8), alias_list_278340)
    # Assigning a type to the variable 'a' (line 2381)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2381, 8), 'a', for_loop_var_278341)
    # SSA begins for a for statement (line 2381)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # SSA begins for try-except statement (line 2382)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to append(...): (line 2383)
    # Processing the call arguments (line 2383)
    
    # Call to pop(...): (line 2383)
    # Processing the call arguments (line 2383)
    # Getting the type of 'a' (line 2383)
    a_278346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2383, 34), 'a', False)
    # Processing the call keyword arguments (line 2383)
    kwargs_278347 = {}
    # Getting the type of 'kw' (line 2383)
    kw_278344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2383, 27), 'kw', False)
    # Obtaining the member 'pop' of a type (line 2383)
    pop_278345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2383, 27), kw_278344, 'pop')
    # Calling pop(args, kwargs) (line 2383)
    pop_call_result_278348 = invoke(stypy.reporting.localization.Localization(__file__, 2383, 27), pop_278345, *[a_278346], **kwargs_278347)
    
    # Processing the call keyword arguments (line 2383)
    kwargs_278349 = {}
    # Getting the type of 'tmp' (line 2383)
    tmp_278342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2383, 16), 'tmp', False)
    # Obtaining the member 'append' of a type (line 2383)
    append_278343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2383, 16), tmp_278342, 'append')
    # Calling append(args, kwargs) (line 2383)
    append_call_result_278350 = invoke(stypy.reporting.localization.Localization(__file__, 2383, 16), append_278343, *[pop_call_result_278348], **kwargs_278349)
    
    
    # Call to append(...): (line 2384)
    # Processing the call arguments (line 2384)
    # Getting the type of 'a' (line 2384)
    a_278353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2384, 28), 'a', False)
    # Processing the call keyword arguments (line 2384)
    kwargs_278354 = {}
    # Getting the type of 'seen' (line 2384)
    seen_278351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2384, 16), 'seen', False)
    # Obtaining the member 'append' of a type (line 2384)
    append_278352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2384, 16), seen_278351, 'append')
    # Calling append(args, kwargs) (line 2384)
    append_call_result_278355 = invoke(stypy.reporting.localization.Localization(__file__, 2384, 16), append_278352, *[a_278353], **kwargs_278354)
    
    # SSA branch for the except part of a try statement (line 2382)
    # SSA branch for the except 'KeyError' branch of a try statement (line 2382)
    module_type_store.open_ssa_branch('except')
    pass
    # SSA join for try-except statement (line 2382)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'canonical' (line 2388)
    canonical_278356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2388, 11), 'canonical')
    # Getting the type of 'alias_list' (line 2388)
    alias_list_278357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2388, 28), 'alias_list')
    # Applying the binary operator 'notin' (line 2388)
    result_contains_278358 = python_operator(stypy.reporting.localization.Localization(__file__, 2388, 11), 'notin', canonical_278356, alias_list_278357)
    
    # Testing the type of an if condition (line 2388)
    if_condition_278359 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2388, 8), result_contains_278358)
    # Assigning a type to the variable 'if_condition_278359' (line 2388)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2388, 8), 'if_condition_278359', if_condition_278359)
    # SSA begins for if statement (line 2388)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # SSA begins for try-except statement (line 2389)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to append(...): (line 2390)
    # Processing the call arguments (line 2390)
    
    # Call to pop(...): (line 2390)
    # Processing the call arguments (line 2390)
    # Getting the type of 'canonical' (line 2390)
    canonical_278364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2390, 34), 'canonical', False)
    # Processing the call keyword arguments (line 2390)
    kwargs_278365 = {}
    # Getting the type of 'kw' (line 2390)
    kw_278362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2390, 27), 'kw', False)
    # Obtaining the member 'pop' of a type (line 2390)
    pop_278363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2390, 27), kw_278362, 'pop')
    # Calling pop(args, kwargs) (line 2390)
    pop_call_result_278366 = invoke(stypy.reporting.localization.Localization(__file__, 2390, 27), pop_278363, *[canonical_278364], **kwargs_278365)
    
    # Processing the call keyword arguments (line 2390)
    kwargs_278367 = {}
    # Getting the type of 'tmp' (line 2390)
    tmp_278360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2390, 16), 'tmp', False)
    # Obtaining the member 'append' of a type (line 2390)
    append_278361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2390, 16), tmp_278360, 'append')
    # Calling append(args, kwargs) (line 2390)
    append_call_result_278368 = invoke(stypy.reporting.localization.Localization(__file__, 2390, 16), append_278361, *[pop_call_result_278366], **kwargs_278367)
    
    
    # Call to append(...): (line 2391)
    # Processing the call arguments (line 2391)
    # Getting the type of 'canonical' (line 2391)
    canonical_278371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2391, 28), 'canonical', False)
    # Processing the call keyword arguments (line 2391)
    kwargs_278372 = {}
    # Getting the type of 'seen' (line 2391)
    seen_278369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2391, 16), 'seen', False)
    # Obtaining the member 'append' of a type (line 2391)
    append_278370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2391, 16), seen_278369, 'append')
    # Calling append(args, kwargs) (line 2391)
    append_call_result_278373 = invoke(stypy.reporting.localization.Localization(__file__, 2391, 16), append_278370, *[canonical_278371], **kwargs_278372)
    
    # SSA branch for the except part of a try statement (line 2389)
    # SSA branch for the except 'KeyError' branch of a try statement (line 2389)
    module_type_store.open_ssa_branch('except')
    pass
    # SSA join for try-except statement (line 2389)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2388)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'tmp' (line 2396)
    tmp_278374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2396, 11), 'tmp')
    # Testing the type of an if condition (line 2396)
    if_condition_278375 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2396, 8), tmp_278374)
    # Assigning a type to the variable 'if_condition_278375' (line 2396)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2396, 8), 'if_condition_278375', if_condition_278375)
    # SSA begins for if statement (line 2396)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Subscript (line 2397):
    
    # Assigning a Subscript to a Subscript (line 2397):
    
    # Obtaining the type of the subscript
    int_278376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2397, 33), 'int')
    # Getting the type of 'tmp' (line 2397)
    tmp_278377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2397, 29), 'tmp')
    # Obtaining the member '__getitem__' of a type (line 2397)
    getitem___278378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2397, 29), tmp_278377, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2397)
    subscript_call_result_278379 = invoke(stypy.reporting.localization.Localization(__file__, 2397, 29), getitem___278378, int_278376)
    
    # Getting the type of 'ret' (line 2397)
    ret_278380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2397, 12), 'ret')
    # Getting the type of 'canonical' (line 2397)
    canonical_278381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2397, 16), 'canonical')
    # Storing an element on a container (line 2397)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2397, 12), ret_278380, (canonical_278381, subscript_call_result_278379))
    
    
    
    # Call to len(...): (line 2398)
    # Processing the call arguments (line 2398)
    # Getting the type of 'tmp' (line 2398)
    tmp_278383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2398, 19), 'tmp', False)
    # Processing the call keyword arguments (line 2398)
    kwargs_278384 = {}
    # Getting the type of 'len' (line 2398)
    len_278382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2398, 15), 'len', False)
    # Calling len(args, kwargs) (line 2398)
    len_call_result_278385 = invoke(stypy.reporting.localization.Localization(__file__, 2398, 15), len_278382, *[tmp_278383], **kwargs_278384)
    
    int_278386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2398, 26), 'int')
    # Applying the binary operator '>' (line 2398)
    result_gt_278387 = python_operator(stypy.reporting.localization.Localization(__file__, 2398, 15), '>', len_call_result_278385, int_278386)
    
    # Testing the type of an if condition (line 2398)
    if_condition_278388 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2398, 12), result_gt_278387)
    # Assigning a type to the variable 'if_condition_278388' (line 2398)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2398, 12), 'if_condition_278388', if_condition_278388)
    # SSA begins for if statement (line 2398)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 2399)
    # Processing the call arguments (line 2399)
    
    # Call to format(...): (line 2399)
    # Processing the call keyword arguments (line 2399)
    # Getting the type of 'seen' (line 2401)
    seen_278393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2401, 39), 'seen', False)
    keyword_278394 = seen_278393
    # Getting the type of 'canonical' (line 2401)
    canonical_278395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2401, 51), 'canonical', False)
    keyword_278396 = canonical_278395
    
    # Obtaining the type of the subscript
    int_278397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2401, 72), 'int')
    # Getting the type of 'seen' (line 2401)
    seen_278398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2401, 67), 'seen', False)
    # Obtaining the member '__getitem__' of a type (line 2401)
    getitem___278399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2401, 67), seen_278398, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2401)
    subscript_call_result_278400 = invoke(stypy.reporting.localization.Localization(__file__, 2401, 67), getitem___278399, int_278397)
    
    keyword_278401 = subscript_call_result_278400
    kwargs_278402 = {'seen': keyword_278394, 'used': keyword_278401, 'canon': keyword_278396}
    unicode_278391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2399, 30), 'unicode', u'Saw kwargs {seen!r} which are all aliases for {canon!r}.  Kept value from {used!r}')
    # Obtaining the member 'format' of a type (line 2399)
    format_278392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2399, 30), unicode_278391, 'format')
    # Calling format(args, kwargs) (line 2399)
    format_call_result_278403 = invoke(stypy.reporting.localization.Localization(__file__, 2399, 30), format_278392, *[], **kwargs_278402)
    
    # Processing the call keyword arguments (line 2399)
    kwargs_278404 = {}
    # Getting the type of 'warnings' (line 2399)
    warnings_278389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2399, 16), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 2399)
    warn_278390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2399, 16), warnings_278389, 'warn')
    # Calling warn(args, kwargs) (line 2399)
    warn_call_result_278405 = invoke(stypy.reporting.localization.Localization(__file__, 2399, 16), warn_278390, *[format_call_result_278403], **kwargs_278404)
    
    # SSA join for if statement (line 2398)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2396)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to update(...): (line 2405)
    # Processing the call arguments (line 2405)
    # Getting the type of 'kw' (line 2405)
    kw_278408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2405, 15), 'kw', False)
    # Processing the call keyword arguments (line 2405)
    kwargs_278409 = {}
    # Getting the type of 'ret' (line 2405)
    ret_278406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2405, 4), 'ret', False)
    # Obtaining the member 'update' of a type (line 2405)
    update_278407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2405, 4), ret_278406, 'update')
    # Calling update(args, kwargs) (line 2405)
    update_call_result_278410 = invoke(stypy.reporting.localization.Localization(__file__, 2405, 4), update_278407, *[kw_278408], **kwargs_278409)
    
    
    # Assigning a ListComp to a Name (line 2407):
    
    # Assigning a ListComp to a Name (line 2407):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'required' (line 2407)
    required_278415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2407, 28), 'required')
    comprehension_278416 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2407, 17), required_278415)
    # Assigning a type to the variable 'k' (line 2407)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2407, 17), 'k', comprehension_278416)
    
    # Getting the type of 'k' (line 2407)
    k_278412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2407, 40), 'k')
    # Getting the type of 'ret' (line 2407)
    ret_278413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2407, 49), 'ret')
    # Applying the binary operator 'notin' (line 2407)
    result_contains_278414 = python_operator(stypy.reporting.localization.Localization(__file__, 2407, 40), 'notin', k_278412, ret_278413)
    
    # Getting the type of 'k' (line 2407)
    k_278411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2407, 17), 'k')
    list_278417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2407, 17), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2407, 17), list_278417, k_278411)
    # Assigning a type to the variable 'fail_keys' (line 2407)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2407, 4), 'fail_keys', list_278417)
    
    # Getting the type of 'fail_keys' (line 2408)
    fail_keys_278418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2408, 7), 'fail_keys')
    # Testing the type of an if condition (line 2408)
    if_condition_278419 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2408, 4), fail_keys_278418)
    # Assigning a type to the variable 'if_condition_278419' (line 2408)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2408, 4), 'if_condition_278419', if_condition_278419)
    # SSA begins for if statement (line 2408)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to TypeError(...): (line 2409)
    # Processing the call arguments (line 2409)
    
    # Call to format(...): (line 2409)
    # Processing the call keyword arguments (line 2409)
    # Getting the type of 'fail_keys' (line 2410)
    fail_keys_278423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2410, 56), 'fail_keys', False)
    keyword_278424 = fail_keys_278423
    kwargs_278425 = {'keys': keyword_278424}
    unicode_278421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2409, 24), 'unicode', u'The required keys {keys!r} are not in kwargs')
    # Obtaining the member 'format' of a type (line 2409)
    format_278422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2409, 24), unicode_278421, 'format')
    # Calling format(args, kwargs) (line 2409)
    format_call_result_278426 = invoke(stypy.reporting.localization.Localization(__file__, 2409, 24), format_278422, *[], **kwargs_278425)
    
    # Processing the call keyword arguments (line 2409)
    kwargs_278427 = {}
    # Getting the type of 'TypeError' (line 2409)
    TypeError_278420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2409, 14), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 2409)
    TypeError_call_result_278428 = invoke(stypy.reporting.localization.Localization(__file__, 2409, 14), TypeError_278420, *[format_call_result_278426], **kwargs_278427)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2409, 8), TypeError_call_result_278428, 'raise parameter', BaseException)
    # SSA join for if statement (line 2408)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a ListComp to a Name (line 2412):
    
    # Assigning a ListComp to a Name (line 2412):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'forbidden' (line 2412)
    forbidden_278433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2412, 28), 'forbidden')
    comprehension_278434 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2412, 17), forbidden_278433)
    # Assigning a type to the variable 'k' (line 2412)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2412, 17), 'k', comprehension_278434)
    
    # Getting the type of 'k' (line 2412)
    k_278430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2412, 41), 'k')
    # Getting the type of 'ret' (line 2412)
    ret_278431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2412, 46), 'ret')
    # Applying the binary operator 'in' (line 2412)
    result_contains_278432 = python_operator(stypy.reporting.localization.Localization(__file__, 2412, 41), 'in', k_278430, ret_278431)
    
    # Getting the type of 'k' (line 2412)
    k_278429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2412, 17), 'k')
    list_278435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2412, 17), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2412, 17), list_278435, k_278429)
    # Assigning a type to the variable 'fail_keys' (line 2412)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2412, 4), 'fail_keys', list_278435)
    
    # Getting the type of 'fail_keys' (line 2413)
    fail_keys_278436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2413, 7), 'fail_keys')
    # Testing the type of an if condition (line 2413)
    if_condition_278437 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2413, 4), fail_keys_278436)
    # Assigning a type to the variable 'if_condition_278437' (line 2413)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2413, 4), 'if_condition_278437', if_condition_278437)
    # SSA begins for if statement (line 2413)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to TypeError(...): (line 2414)
    # Processing the call arguments (line 2414)
    
    # Call to format(...): (line 2414)
    # Processing the call keyword arguments (line 2414)
    # Getting the type of 'fail_keys' (line 2415)
    fail_keys_278441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2415, 52), 'fail_keys', False)
    keyword_278442 = fail_keys_278441
    kwargs_278443 = {'keys': keyword_278442}
    unicode_278439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2414, 24), 'unicode', u'The forbidden keys {keys!r} are in kwargs')
    # Obtaining the member 'format' of a type (line 2414)
    format_278440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2414, 24), unicode_278439, 'format')
    # Calling format(args, kwargs) (line 2414)
    format_call_result_278444 = invoke(stypy.reporting.localization.Localization(__file__, 2414, 24), format_278440, *[], **kwargs_278443)
    
    # Processing the call keyword arguments (line 2414)
    kwargs_278445 = {}
    # Getting the type of 'TypeError' (line 2414)
    TypeError_278438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2414, 14), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 2414)
    TypeError_call_result_278446 = invoke(stypy.reporting.localization.Localization(__file__, 2414, 14), TypeError_278438, *[format_call_result_278444], **kwargs_278445)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2414, 8), TypeError_call_result_278446, 'raise parameter', BaseException)
    # SSA join for if statement (line 2413)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 2417)
    # Getting the type of 'allowed' (line 2417)
    allowed_278447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2417, 4), 'allowed')
    # Getting the type of 'None' (line 2417)
    None_278448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2417, 22), 'None')
    
    (may_be_278449, more_types_in_union_278450) = may_not_be_none(allowed_278447, None_278448)

    if may_be_278449:

        if more_types_in_union_278450:
            # Runtime conditional SSA (line 2417)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a BinOp to a Name (line 2418):
        
        # Assigning a BinOp to a Name (line 2418):
        
        # Call to set(...): (line 2418)
        # Processing the call arguments (line 2418)
        # Getting the type of 'required' (line 2418)
        required_278452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2418, 26), 'required', False)
        # Processing the call keyword arguments (line 2418)
        kwargs_278453 = {}
        # Getting the type of 'set' (line 2418)
        set_278451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2418, 22), 'set', False)
        # Calling set(args, kwargs) (line 2418)
        set_call_result_278454 = invoke(stypy.reporting.localization.Localization(__file__, 2418, 22), set_278451, *[required_278452], **kwargs_278453)
        
        
        # Call to set(...): (line 2418)
        # Processing the call arguments (line 2418)
        # Getting the type of 'allowed' (line 2418)
        allowed_278456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2418, 42), 'allowed', False)
        # Processing the call keyword arguments (line 2418)
        kwargs_278457 = {}
        # Getting the type of 'set' (line 2418)
        set_278455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2418, 38), 'set', False)
        # Calling set(args, kwargs) (line 2418)
        set_call_result_278458 = invoke(stypy.reporting.localization.Localization(__file__, 2418, 38), set_278455, *[allowed_278456], **kwargs_278457)
        
        # Applying the binary operator '|' (line 2418)
        result_or__278459 = python_operator(stypy.reporting.localization.Localization(__file__, 2418, 22), '|', set_call_result_278454, set_call_result_278458)
        
        # Assigning a type to the variable 'allowed_set' (line 2418)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2418, 8), 'allowed_set', result_or__278459)
        
        # Assigning a ListComp to a Name (line 2419):
        
        # Assigning a ListComp to a Name (line 2419):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'ret' (line 2419)
        ret_278464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2419, 32), 'ret')
        comprehension_278465 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2419, 21), ret_278464)
        # Assigning a type to the variable 'k' (line 2419)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2419, 21), 'k', comprehension_278465)
        
        # Getting the type of 'k' (line 2419)
        k_278461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2419, 39), 'k')
        # Getting the type of 'allowed_set' (line 2419)
        allowed_set_278462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2419, 48), 'allowed_set')
        # Applying the binary operator 'notin' (line 2419)
        result_contains_278463 = python_operator(stypy.reporting.localization.Localization(__file__, 2419, 39), 'notin', k_278461, allowed_set_278462)
        
        # Getting the type of 'k' (line 2419)
        k_278460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2419, 21), 'k')
        list_278466 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2419, 21), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2419, 21), list_278466, k_278460)
        # Assigning a type to the variable 'fail_keys' (line 2419)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2419, 8), 'fail_keys', list_278466)
        
        # Getting the type of 'fail_keys' (line 2420)
        fail_keys_278467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2420, 11), 'fail_keys')
        # Testing the type of an if condition (line 2420)
        if_condition_278468 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2420, 8), fail_keys_278467)
        # Assigning a type to the variable 'if_condition_278468' (line 2420)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2420, 8), 'if_condition_278468', if_condition_278468)
        # SSA begins for if statement (line 2420)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to TypeError(...): (line 2421)
        # Processing the call arguments (line 2421)
        
        # Call to format(...): (line 2421)
        # Processing the call keyword arguments (line 2421)
        # Getting the type of 'fail_keys' (line 2424)
        fail_keys_278472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2424, 37), 'fail_keys', False)
        keyword_278473 = fail_keys_278472
        # Getting the type of 'required' (line 2424)
        required_278474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2424, 52), 'required', False)
        keyword_278475 = required_278474
        # Getting the type of 'allowed' (line 2425)
        allowed_278476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2425, 38), 'allowed', False)
        keyword_278477 = allowed_278476
        kwargs_278478 = {'keys': keyword_278473, 'req': keyword_278475, 'allow': keyword_278477}
        unicode_278470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2421, 28), 'unicode', u'kwargs contains {keys!r} which are not in the required {req!r} or allowed {allow!r} keys')
        # Obtaining the member 'format' of a type (line 2421)
        format_278471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2421, 28), unicode_278470, 'format')
        # Calling format(args, kwargs) (line 2421)
        format_call_result_278479 = invoke(stypy.reporting.localization.Localization(__file__, 2421, 28), format_278471, *[], **kwargs_278478)
        
        # Processing the call keyword arguments (line 2421)
        kwargs_278480 = {}
        # Getting the type of 'TypeError' (line 2421)
        TypeError_278469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2421, 18), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 2421)
        TypeError_call_result_278481 = invoke(stypy.reporting.localization.Localization(__file__, 2421, 18), TypeError_278469, *[format_call_result_278479], **kwargs_278480)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2421, 12), TypeError_call_result_278481, 'raise parameter', BaseException)
        # SSA join for if statement (line 2420)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_278450:
            # SSA join for if statement (line 2417)
            module_type_store = module_type_store.join_ssa_context()


    
    # Getting the type of 'ret' (line 2427)
    ret_278482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2427, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 2427)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2427, 4), 'stypy_return_type', ret_278482)
    
    # ################# End of 'normalize_kwargs(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'normalize_kwargs' in the type store
    # Getting the type of 'stypy_return_type' (line 2322)
    stypy_return_type_278483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2322, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_278483)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'normalize_kwargs'
    return stypy_return_type_278483

# Assigning a type to the variable 'normalize_kwargs' (line 2322)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2322, 0), 'normalize_kwargs', normalize_kwargs)

@norecursion
def get_label(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_label'
    module_type_store = module_type_store.open_function_context('get_label', 2430, 0, False)
    
    # Passed parameters checking function
    get_label.stypy_localization = localization
    get_label.stypy_type_of_self = None
    get_label.stypy_type_store = module_type_store
    get_label.stypy_function_name = 'get_label'
    get_label.stypy_param_names_list = ['y', 'default_name']
    get_label.stypy_varargs_param_name = None
    get_label.stypy_kwargs_param_name = None
    get_label.stypy_call_defaults = defaults
    get_label.stypy_call_varargs = varargs
    get_label.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_label', ['y', 'default_name'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_label', localization, ['y', 'default_name'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_label(...)' code ##################

    
    
    # SSA begins for try-except statement (line 2431)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    # Getting the type of 'y' (line 2432)
    y_278484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2432, 15), 'y')
    # Obtaining the member 'name' of a type (line 2432)
    name_278485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2432, 15), y_278484, 'name')
    # Assigning a type to the variable 'stypy_return_type' (line 2432)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2432, 8), 'stypy_return_type', name_278485)
    # SSA branch for the except part of a try statement (line 2431)
    # SSA branch for the except 'AttributeError' branch of a try statement (line 2431)
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'default_name' (line 2434)
    default_name_278486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2434, 15), 'default_name')
    # Assigning a type to the variable 'stypy_return_type' (line 2434)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2434, 8), 'stypy_return_type', default_name_278486)
    # SSA join for try-except statement (line 2431)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'get_label(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_label' in the type store
    # Getting the type of 'stypy_return_type' (line 2430)
    stypy_return_type_278487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2430, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_278487)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_label'
    return stypy_return_type_278487

# Assigning a type to the variable 'get_label' (line 2430)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2430, 0), 'get_label', get_label)

# Assigning a Str to a Name (line 2437):

# Assigning a Str to a Name (line 2437):
unicode_278488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2443, (-1)), 'unicode', u'LOCKERROR: matplotlib is trying to acquire the lock\n    {!r}\nand has failed.  This maybe due to any other process holding this\nlock.  If you are sure no other matplotlib process is running try\nremoving these folders and trying again.\n')
# Assigning a type to the variable '_lockstr' (line 2437)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2437, 0), '_lockstr', unicode_278488)
# Declaration of the 'Locked' class

class Locked(object, ):
    unicode_278489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2457, (-1)), 'unicode', u'\n    Context manager to handle locks.\n\n    Based on code from conda.\n\n    (c) 2012-2013 Continuum Analytics, Inc. / https://www.continuum.io/\n    All Rights Reserved\n\n    conda is distributed under the terms of the BSD 3-clause license.\n    Consult LICENSE_CONDA or https://opensource.org/licenses/BSD-3-Clause.\n    ')
    
    # Assigning a Str to a Name (line 2458):
    # Declaration of the 'TimeoutError' class
    # Getting the type of 'RuntimeError' (line 2460)
    RuntimeError_278490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2460, 23), 'RuntimeError')

    class TimeoutError(RuntimeError_278490, ):
        pass
    
    # Assigning a type to the variable 'TimeoutError' (line 2460)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2460, 4), 'TimeoutError', TimeoutError)

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2463, 4, False)
        # Assigning a type to the variable 'self' (line 2464)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2464, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Locked.__init__', ['path'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['path'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 2464):
        
        # Assigning a Name to a Attribute (line 2464):
        # Getting the type of 'path' (line 2464)
        path_278491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2464, 20), 'path')
        # Getting the type of 'self' (line 2464)
        self_278492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2464, 8), 'self')
        # Setting the type of the member 'path' of a type (line 2464)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2464, 8), self_278492, 'path', path_278491)
        
        # Assigning a BinOp to a Attribute (line 2465):
        
        # Assigning a BinOp to a Attribute (line 2465):
        unicode_278493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2465, 19), 'unicode', u'-')
        
        # Call to str(...): (line 2465)
        # Processing the call arguments (line 2465)
        
        # Call to getpid(...): (line 2465)
        # Processing the call keyword arguments (line 2465)
        kwargs_278497 = {}
        # Getting the type of 'os' (line 2465)
        os_278495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2465, 29), 'os', False)
        # Obtaining the member 'getpid' of a type (line 2465)
        getpid_278496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2465, 29), os_278495, 'getpid')
        # Calling getpid(args, kwargs) (line 2465)
        getpid_call_result_278498 = invoke(stypy.reporting.localization.Localization(__file__, 2465, 29), getpid_278496, *[], **kwargs_278497)
        
        # Processing the call keyword arguments (line 2465)
        kwargs_278499 = {}
        # Getting the type of 'str' (line 2465)
        str_278494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2465, 25), 'str', False)
        # Calling str(args, kwargs) (line 2465)
        str_call_result_278500 = invoke(stypy.reporting.localization.Localization(__file__, 2465, 25), str_278494, *[getpid_call_result_278498], **kwargs_278499)
        
        # Applying the binary operator '+' (line 2465)
        result_add_278501 = python_operator(stypy.reporting.localization.Localization(__file__, 2465, 19), '+', unicode_278493, str_call_result_278500)
        
        # Getting the type of 'self' (line 2465)
        self_278502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2465, 8), 'self')
        # Setting the type of the member 'end' of a type (line 2465)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2465, 8), self_278502, 'end', result_add_278501)
        
        # Assigning a Call to a Attribute (line 2466):
        
        # Assigning a Call to a Attribute (line 2466):
        
        # Call to join(...): (line 2466)
        # Processing the call arguments (line 2466)
        # Getting the type of 'self' (line 2466)
        self_278506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2466, 38), 'self', False)
        # Obtaining the member 'path' of a type (line 2466)
        path_278507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2466, 38), self_278506, 'path')
        # Getting the type of 'self' (line 2466)
        self_278508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2466, 49), 'self', False)
        # Obtaining the member 'LOCKFN' of a type (line 2466)
        LOCKFN_278509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2466, 49), self_278508, 'LOCKFN')
        # Getting the type of 'self' (line 2466)
        self_278510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2466, 63), 'self', False)
        # Obtaining the member 'end' of a type (line 2466)
        end_278511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2466, 63), self_278510, 'end')
        # Applying the binary operator '+' (line 2466)
        result_add_278512 = python_operator(stypy.reporting.localization.Localization(__file__, 2466, 49), '+', LOCKFN_278509, end_278511)
        
        # Processing the call keyword arguments (line 2466)
        kwargs_278513 = {}
        # Getting the type of 'os' (line 2466)
        os_278503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2466, 25), 'os', False)
        # Obtaining the member 'path' of a type (line 2466)
        path_278504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2466, 25), os_278503, 'path')
        # Obtaining the member 'join' of a type (line 2466)
        join_278505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2466, 25), path_278504, 'join')
        # Calling join(args, kwargs) (line 2466)
        join_call_result_278514 = invoke(stypy.reporting.localization.Localization(__file__, 2466, 25), join_278505, *[path_278507, result_add_278512], **kwargs_278513)
        
        # Getting the type of 'self' (line 2466)
        self_278515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2466, 8), 'self')
        # Setting the type of the member 'lock_path' of a type (line 2466)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2466, 8), self_278515, 'lock_path', join_call_result_278514)
        
        # Assigning a Call to a Attribute (line 2467):
        
        # Assigning a Call to a Attribute (line 2467):
        
        # Call to join(...): (line 2467)
        # Processing the call arguments (line 2467)
        # Getting the type of 'self' (line 2467)
        self_278519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2467, 36), 'self', False)
        # Obtaining the member 'path' of a type (line 2467)
        path_278520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2467, 36), self_278519, 'path')
        # Getting the type of 'self' (line 2467)
        self_278521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2467, 47), 'self', False)
        # Obtaining the member 'LOCKFN' of a type (line 2467)
        LOCKFN_278522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2467, 47), self_278521, 'LOCKFN')
        unicode_278523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2467, 61), 'unicode', u'-*')
        # Applying the binary operator '+' (line 2467)
        result_add_278524 = python_operator(stypy.reporting.localization.Localization(__file__, 2467, 47), '+', LOCKFN_278522, unicode_278523)
        
        # Processing the call keyword arguments (line 2467)
        kwargs_278525 = {}
        # Getting the type of 'os' (line 2467)
        os_278516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2467, 23), 'os', False)
        # Obtaining the member 'path' of a type (line 2467)
        path_278517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2467, 23), os_278516, 'path')
        # Obtaining the member 'join' of a type (line 2467)
        join_278518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2467, 23), path_278517, 'join')
        # Calling join(args, kwargs) (line 2467)
        join_call_result_278526 = invoke(stypy.reporting.localization.Localization(__file__, 2467, 23), join_278518, *[path_278520, result_add_278524], **kwargs_278525)
        
        # Getting the type of 'self' (line 2467)
        self_278527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2467, 8), 'self')
        # Setting the type of the member 'pattern' of a type (line 2467)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2467, 8), self_278527, 'pattern', join_call_result_278526)
        
        # Assigning a Name to a Attribute (line 2468):
        
        # Assigning a Name to a Attribute (line 2468):
        # Getting the type of 'True' (line 2468)
        True_278528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2468, 22), 'True')
        # Getting the type of 'self' (line 2468)
        self_278529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2468, 8), 'self')
        # Setting the type of the member 'remove' of a type (line 2468)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2468, 8), self_278529, 'remove', True_278528)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __enter__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__enter__'
        module_type_store = module_type_store.open_function_context('__enter__', 2470, 4, False)
        # Assigning a type to the variable 'self' (line 2471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2471, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Locked.__enter__.__dict__.__setitem__('stypy_localization', localization)
        Locked.__enter__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Locked.__enter__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Locked.__enter__.__dict__.__setitem__('stypy_function_name', 'Locked.__enter__')
        Locked.__enter__.__dict__.__setitem__('stypy_param_names_list', [])
        Locked.__enter__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Locked.__enter__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Locked.__enter__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Locked.__enter__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Locked.__enter__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Locked.__enter__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Locked.__enter__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__enter__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__enter__(...)' code ##################

        
        # Assigning a Num to a Name (line 2471):
        
        # Assigning a Num to a Name (line 2471):
        int_278530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2471, 18), 'int')
        # Assigning a type to the variable 'retries' (line 2471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2471, 8), 'retries', int_278530)
        
        # Assigning a Num to a Name (line 2472):
        
        # Assigning a Num to a Name (line 2472):
        float_278531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2472, 20), 'float')
        # Assigning a type to the variable 'sleeptime' (line 2472)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2472, 8), 'sleeptime', float_278531)
        
        # Getting the type of 'retries' (line 2473)
        retries_278532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2473, 14), 'retries')
        # Testing the type of an if condition (line 2473)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2473, 8), retries_278532)
        # SSA begins for while statement (line 2473)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        # Assigning a Call to a Name (line 2474):
        
        # Assigning a Call to a Name (line 2474):
        
        # Call to glob(...): (line 2474)
        # Processing the call arguments (line 2474)
        # Getting the type of 'self' (line 2474)
        self_278535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2474, 30), 'self', False)
        # Obtaining the member 'pattern' of a type (line 2474)
        pattern_278536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2474, 30), self_278535, 'pattern')
        # Processing the call keyword arguments (line 2474)
        kwargs_278537 = {}
        # Getting the type of 'glob' (line 2474)
        glob_278533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2474, 20), 'glob', False)
        # Obtaining the member 'glob' of a type (line 2474)
        glob_278534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2474, 20), glob_278533, 'glob')
        # Calling glob(args, kwargs) (line 2474)
        glob_call_result_278538 = invoke(stypy.reporting.localization.Localization(__file__, 2474, 20), glob_278534, *[pattern_278536], **kwargs_278537)
        
        # Assigning a type to the variable 'files' (line 2474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2474, 12), 'files', glob_call_result_278538)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'files' (line 2475)
        files_278539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2475, 15), 'files')
        
        
        # Call to endswith(...): (line 2475)
        # Processing the call arguments (line 2475)
        # Getting the type of 'self' (line 2475)
        self_278545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2475, 47), 'self', False)
        # Obtaining the member 'end' of a type (line 2475)
        end_278546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2475, 47), self_278545, 'end')
        # Processing the call keyword arguments (line 2475)
        kwargs_278547 = {}
        
        # Obtaining the type of the subscript
        int_278540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2475, 35), 'int')
        # Getting the type of 'files' (line 2475)
        files_278541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2475, 29), 'files', False)
        # Obtaining the member '__getitem__' of a type (line 2475)
        getitem___278542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2475, 29), files_278541, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2475)
        subscript_call_result_278543 = invoke(stypy.reporting.localization.Localization(__file__, 2475, 29), getitem___278542, int_278540)
        
        # Obtaining the member 'endswith' of a type (line 2475)
        endswith_278544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2475, 29), subscript_call_result_278543, 'endswith')
        # Calling endswith(args, kwargs) (line 2475)
        endswith_call_result_278548 = invoke(stypy.reporting.localization.Localization(__file__, 2475, 29), endswith_278544, *[end_278546], **kwargs_278547)
        
        # Applying the 'not' unary operator (line 2475)
        result_not__278549 = python_operator(stypy.reporting.localization.Localization(__file__, 2475, 25), 'not', endswith_call_result_278548)
        
        # Applying the binary operator 'and' (line 2475)
        result_and_keyword_278550 = python_operator(stypy.reporting.localization.Localization(__file__, 2475, 15), 'and', files_278539, result_not__278549)
        
        # Testing the type of an if condition (line 2475)
        if_condition_278551 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2475, 12), result_and_keyword_278550)
        # Assigning a type to the variable 'if_condition_278551' (line 2475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2475, 12), 'if_condition_278551', if_condition_278551)
        # SSA begins for if statement (line 2475)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to sleep(...): (line 2476)
        # Processing the call arguments (line 2476)
        # Getting the type of 'sleeptime' (line 2476)
        sleeptime_278554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2476, 27), 'sleeptime', False)
        # Processing the call keyword arguments (line 2476)
        kwargs_278555 = {}
        # Getting the type of 'time' (line 2476)
        time_278552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2476, 16), 'time', False)
        # Obtaining the member 'sleep' of a type (line 2476)
        sleep_278553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2476, 16), time_278552, 'sleep')
        # Calling sleep(args, kwargs) (line 2476)
        sleep_call_result_278556 = invoke(stypy.reporting.localization.Localization(__file__, 2476, 16), sleep_278553, *[sleeptime_278554], **kwargs_278555)
        
        
        # Getting the type of 'retries' (line 2477)
        retries_278557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 16), 'retries')
        int_278558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2477, 27), 'int')
        # Applying the binary operator '-=' (line 2477)
        result_isub_278559 = python_operator(stypy.reporting.localization.Localization(__file__, 2477, 16), '-=', retries_278557, int_278558)
        # Assigning a type to the variable 'retries' (line 2477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2477, 16), 'retries', result_isub_278559)
        
        # SSA branch for the else part of an if statement (line 2475)
        module_type_store.open_ssa_branch('else')
        # SSA join for if statement (line 2475)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of a while statement (line 2473)
        module_type_store.open_ssa_branch('while loop else')
        
        # Assigning a Call to a Name (line 2481):
        
        # Assigning a Call to a Name (line 2481):
        
        # Call to format(...): (line 2481)
        # Processing the call arguments (line 2481)
        # Getting the type of 'self' (line 2481)
        self_278562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2481, 38), 'self', False)
        # Obtaining the member 'pattern' of a type (line 2481)
        pattern_278563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2481, 38), self_278562, 'pattern')
        # Processing the call keyword arguments (line 2481)
        kwargs_278564 = {}
        # Getting the type of '_lockstr' (line 2481)
        _lockstr_278560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2481, 22), '_lockstr', False)
        # Obtaining the member 'format' of a type (line 2481)
        format_278561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2481, 22), _lockstr_278560, 'format')
        # Calling format(args, kwargs) (line 2481)
        format_call_result_278565 = invoke(stypy.reporting.localization.Localization(__file__, 2481, 22), format_278561, *[pattern_278563], **kwargs_278564)
        
        # Assigning a type to the variable 'err_str' (line 2481)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2481, 12), 'err_str', format_call_result_278565)
        
        # Call to TimeoutError(...): (line 2482)
        # Processing the call arguments (line 2482)
        # Getting the type of 'err_str' (line 2482)
        err_str_278568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2482, 36), 'err_str', False)
        # Processing the call keyword arguments (line 2482)
        kwargs_278569 = {}
        # Getting the type of 'self' (line 2482)
        self_278566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2482, 18), 'self', False)
        # Obtaining the member 'TimeoutError' of a type (line 2482)
        TimeoutError_278567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2482, 18), self_278566, 'TimeoutError')
        # Calling TimeoutError(args, kwargs) (line 2482)
        TimeoutError_call_result_278570 = invoke(stypy.reporting.localization.Localization(__file__, 2482, 18), TimeoutError_278567, *[err_str_278568], **kwargs_278569)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2482, 12), TimeoutError_call_result_278570, 'raise parameter', BaseException)
        # SSA join for while statement (line 2473)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'files' (line 2484)
        files_278571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2484, 15), 'files')
        # Applying the 'not' unary operator (line 2484)
        result_not__278572 = python_operator(stypy.reporting.localization.Localization(__file__, 2484, 11), 'not', files_278571)
        
        # Testing the type of an if condition (line 2484)
        if_condition_278573 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2484, 8), result_not__278572)
        # Assigning a type to the variable 'if_condition_278573' (line 2484)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2484, 8), 'if_condition_278573', if_condition_278573)
        # SSA begins for if statement (line 2484)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # SSA begins for try-except statement (line 2485)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to makedirs(...): (line 2486)
        # Processing the call arguments (line 2486)
        # Getting the type of 'self' (line 2486)
        self_278576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2486, 28), 'self', False)
        # Obtaining the member 'lock_path' of a type (line 2486)
        lock_path_278577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2486, 28), self_278576, 'lock_path')
        # Processing the call keyword arguments (line 2486)
        kwargs_278578 = {}
        # Getting the type of 'os' (line 2486)
        os_278574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2486, 16), 'os', False)
        # Obtaining the member 'makedirs' of a type (line 2486)
        makedirs_278575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2486, 16), os_278574, 'makedirs')
        # Calling makedirs(args, kwargs) (line 2486)
        makedirs_call_result_278579 = invoke(stypy.reporting.localization.Localization(__file__, 2486, 16), makedirs_278575, *[lock_path_278577], **kwargs_278578)
        
        # SSA branch for the except part of a try statement (line 2485)
        # SSA branch for the except 'OSError' branch of a try statement (line 2485)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 2485)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 2484)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Attribute (line 2490):
        
        # Assigning a Name to a Attribute (line 2490):
        # Getting the type of 'False' (line 2490)
        False_278580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2490, 26), 'False')
        # Getting the type of 'self' (line 2490)
        self_278581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2490, 12), 'self')
        # Setting the type of the member 'remove' of a type (line 2490)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2490, 12), self_278581, 'remove', False_278580)
        # SSA join for if statement (line 2484)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__enter__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__enter__' in the type store
        # Getting the type of 'stypy_return_type' (line 2470)
        stypy_return_type_278582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2470, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_278582)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__enter__'
        return stypy_return_type_278582


    @norecursion
    def __exit__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__exit__'
        module_type_store = module_type_store.open_function_context('__exit__', 2492, 4, False)
        # Assigning a type to the variable 'self' (line 2493)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2493, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Locked.__exit__.__dict__.__setitem__('stypy_localization', localization)
        Locked.__exit__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Locked.__exit__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Locked.__exit__.__dict__.__setitem__('stypy_function_name', 'Locked.__exit__')
        Locked.__exit__.__dict__.__setitem__('stypy_param_names_list', ['exc_type', 'exc_value', 'traceback'])
        Locked.__exit__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Locked.__exit__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Locked.__exit__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Locked.__exit__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Locked.__exit__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Locked.__exit__.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Locked.__exit__', ['exc_type', 'exc_value', 'traceback'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__exit__', localization, ['exc_type', 'exc_value', 'traceback'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__exit__(...)' code ##################

        
        # Getting the type of 'self' (line 2493)
        self_278583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2493, 11), 'self')
        # Obtaining the member 'remove' of a type (line 2493)
        remove_278584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2493, 11), self_278583, 'remove')
        # Testing the type of an if condition (line 2493)
        if_condition_278585 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2493, 8), remove_278584)
        # Assigning a type to the variable 'if_condition_278585' (line 2493)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2493, 8), 'if_condition_278585', if_condition_278585)
        # SSA begins for if statement (line 2493)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 2494)
        tuple_278586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2494, 24), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2494)
        # Adding element type (line 2494)
        # Getting the type of 'self' (line 2494)
        self_278587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2494, 24), 'self')
        # Obtaining the member 'lock_path' of a type (line 2494)
        lock_path_278588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2494, 24), self_278587, 'lock_path')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2494, 24), tuple_278586, lock_path_278588)
        # Adding element type (line 2494)
        # Getting the type of 'self' (line 2494)
        self_278589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2494, 40), 'self')
        # Obtaining the member 'path' of a type (line 2494)
        path_278590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2494, 40), self_278589, 'path')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2494, 24), tuple_278586, path_278590)
        
        # Testing the type of a for loop iterable (line 2494)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2494, 12), tuple_278586)
        # Getting the type of the for loop variable (line 2494)
        for_loop_var_278591 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2494, 12), tuple_278586)
        # Assigning a type to the variable 'path' (line 2494)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2494, 12), 'path', for_loop_var_278591)
        # SSA begins for a for statement (line 2494)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # SSA begins for try-except statement (line 2495)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to rmdir(...): (line 2496)
        # Processing the call arguments (line 2496)
        # Getting the type of 'path' (line 2496)
        path_278594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2496, 29), 'path', False)
        # Processing the call keyword arguments (line 2496)
        kwargs_278595 = {}
        # Getting the type of 'os' (line 2496)
        os_278592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2496, 20), 'os', False)
        # Obtaining the member 'rmdir' of a type (line 2496)
        rmdir_278593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2496, 20), os_278592, 'rmdir')
        # Calling rmdir(args, kwargs) (line 2496)
        rmdir_call_result_278596 = invoke(stypy.reporting.localization.Localization(__file__, 2496, 20), rmdir_278593, *[path_278594], **kwargs_278595)
        
        # SSA branch for the except part of a try statement (line 2495)
        # SSA branch for the except 'OSError' branch of a try statement (line 2495)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 2495)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2493)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__exit__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__exit__' in the type store
        # Getting the type of 'stypy_return_type' (line 2492)
        stypy_return_type_278597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2492, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_278597)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__exit__'
        return stypy_return_type_278597


# Assigning a type to the variable 'Locked' (line 2446)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2446, 0), 'Locked', Locked)

# Assigning a Str to a Name (line 2458):
unicode_278598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2458, 13), 'unicode', u'.matplotlib_lock')
# Getting the type of 'Locked'
Locked_278599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Locked')
# Setting the type of the member 'LOCKFN' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Locked_278599, 'LOCKFN', unicode_278598)
# Declaration of the '_FuncInfo' class

class _FuncInfo(object, ):
    unicode_278600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2505, (-1)), 'unicode', u'\n    Class used to store a function.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'True' (line 2507)
        True_278601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2507, 54), 'True')
        # Getting the type of 'None' (line 2507)
        None_278602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2507, 73), 'None')
        defaults = [True_278601, None_278602]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2507, 4, False)
        # Assigning a type to the variable 'self' (line 2508)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2508, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_FuncInfo.__init__', ['function', 'inverse', 'bounded_0_1', 'check_params'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['function', 'inverse', 'bounded_0_1', 'check_params'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_278603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2533, (-1)), 'unicode', u"\n        Parameters\n        ----------\n\n        function : callable\n            A callable implementing the function receiving the variable as\n            first argument and any additional parameters in a list as second\n            argument.\n        inverse : callable\n            A callable implementing the inverse function receiving the variable\n            as first argument and any additional parameters in a list as\n            second argument. It must satisfy 'inverse(function(x, p), p) == x'.\n        bounded_0_1: bool or callable\n            A boolean indicating whether the function is bounded in the [0,1]\n            interval, or a callable taking a list of values for the additional\n            parameters, and returning a boolean indicating whether the function\n            is bounded in the [0,1] interval for that combination of\n            parameters. Default True.\n        check_params: callable or None\n            A callable taking a list of values for the additional parameters\n            and returning a boolean indicating whether that combination of\n            parameters is valid. It is only required if the function has\n            additional parameters and some of them are restricted.\n            Default None.\n\n        ")
        
        # Assigning a Name to a Attribute (line 2535):
        
        # Assigning a Name to a Attribute (line 2535):
        # Getting the type of 'function' (line 2535)
        function_278604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2535, 24), 'function')
        # Getting the type of 'self' (line 2535)
        self_278605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2535, 8), 'self')
        # Setting the type of the member 'function' of a type (line 2535)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2535, 8), self_278605, 'function', function_278604)
        
        # Assigning a Name to a Attribute (line 2536):
        
        # Assigning a Name to a Attribute (line 2536):
        # Getting the type of 'inverse' (line 2536)
        inverse_278606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2536, 23), 'inverse')
        # Getting the type of 'self' (line 2536)
        self_278607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2536, 8), 'self')
        # Setting the type of the member 'inverse' of a type (line 2536)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2536, 8), self_278607, 'inverse', inverse_278606)
        
        
        # Call to callable(...): (line 2538)
        # Processing the call arguments (line 2538)
        # Getting the type of 'bounded_0_1' (line 2538)
        bounded_0_1_278609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2538, 20), 'bounded_0_1', False)
        # Processing the call keyword arguments (line 2538)
        kwargs_278610 = {}
        # Getting the type of 'callable' (line 2538)
        callable_278608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2538, 11), 'callable', False)
        # Calling callable(args, kwargs) (line 2538)
        callable_call_result_278611 = invoke(stypy.reporting.localization.Localization(__file__, 2538, 11), callable_278608, *[bounded_0_1_278609], **kwargs_278610)
        
        # Testing the type of an if condition (line 2538)
        if_condition_278612 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2538, 8), callable_call_result_278611)
        # Assigning a type to the variable 'if_condition_278612' (line 2538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2538, 8), 'if_condition_278612', if_condition_278612)
        # SSA begins for if statement (line 2538)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 2539):
        
        # Assigning a Name to a Attribute (line 2539):
        # Getting the type of 'bounded_0_1' (line 2539)
        bounded_0_1_278613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2539, 32), 'bounded_0_1')
        # Getting the type of 'self' (line 2539)
        self_278614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2539, 12), 'self')
        # Setting the type of the member '_bounded_0_1' of a type (line 2539)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2539, 12), self_278614, '_bounded_0_1', bounded_0_1_278613)
        # SSA branch for the else part of an if statement (line 2538)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Lambda to a Attribute (line 2541):
        
        # Assigning a Lambda to a Attribute (line 2541):

        @norecursion
        def _stypy_temp_lambda_117(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_117'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_117', 2541, 32, True)
            # Passed parameters checking function
            _stypy_temp_lambda_117.stypy_localization = localization
            _stypy_temp_lambda_117.stypy_type_of_self = None
            _stypy_temp_lambda_117.stypy_type_store = module_type_store
            _stypy_temp_lambda_117.stypy_function_name = '_stypy_temp_lambda_117'
            _stypy_temp_lambda_117.stypy_param_names_list = ['x']
            _stypy_temp_lambda_117.stypy_varargs_param_name = None
            _stypy_temp_lambda_117.stypy_kwargs_param_name = None
            _stypy_temp_lambda_117.stypy_call_defaults = defaults
            _stypy_temp_lambda_117.stypy_call_varargs = varargs
            _stypy_temp_lambda_117.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_117', ['x'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_117', ['x'], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            # Getting the type of 'bounded_0_1' (line 2541)
            bounded_0_1_278615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2541, 42), 'bounded_0_1')
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 2541)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2541, 32), 'stypy_return_type', bounded_0_1_278615)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_117' in the type store
            # Getting the type of 'stypy_return_type' (line 2541)
            stypy_return_type_278616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2541, 32), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_278616)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_117'
            return stypy_return_type_278616

        # Assigning a type to the variable '_stypy_temp_lambda_117' (line 2541)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2541, 32), '_stypy_temp_lambda_117', _stypy_temp_lambda_117)
        # Getting the type of '_stypy_temp_lambda_117' (line 2541)
        _stypy_temp_lambda_117_278617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2541, 32), '_stypy_temp_lambda_117')
        # Getting the type of 'self' (line 2541)
        self_278618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2541, 12), 'self')
        # Setting the type of the member '_bounded_0_1' of a type (line 2541)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2541, 12), self_278618, '_bounded_0_1', _stypy_temp_lambda_117_278617)
        # SSA join for if statement (line 2538)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 2543)
        # Getting the type of 'check_params' (line 2543)
        check_params_278619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2543, 11), 'check_params')
        # Getting the type of 'None' (line 2543)
        None_278620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2543, 27), 'None')
        
        (may_be_278621, more_types_in_union_278622) = may_be_none(check_params_278619, None_278620)

        if may_be_278621:

            if more_types_in_union_278622:
                # Runtime conditional SSA (line 2543)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Lambda to a Attribute (line 2544):
            
            # Assigning a Lambda to a Attribute (line 2544):

            @norecursion
            def _stypy_temp_lambda_118(localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function '_stypy_temp_lambda_118'
                module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_118', 2544, 33, True)
                # Passed parameters checking function
                _stypy_temp_lambda_118.stypy_localization = localization
                _stypy_temp_lambda_118.stypy_type_of_self = None
                _stypy_temp_lambda_118.stypy_type_store = module_type_store
                _stypy_temp_lambda_118.stypy_function_name = '_stypy_temp_lambda_118'
                _stypy_temp_lambda_118.stypy_param_names_list = ['x']
                _stypy_temp_lambda_118.stypy_varargs_param_name = None
                _stypy_temp_lambda_118.stypy_kwargs_param_name = None
                _stypy_temp_lambda_118.stypy_call_defaults = defaults
                _stypy_temp_lambda_118.stypy_call_varargs = varargs
                _stypy_temp_lambda_118.stypy_call_kwargs = kwargs
                arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_118', ['x'], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Stacktrace push for error reporting
                localization.set_stack_trace('_stypy_temp_lambda_118', ['x'], arguments)
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of the lambda function code ##################

                # Getting the type of 'True' (line 2544)
                True_278623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2544, 43), 'True')
                # Assigning the return type of the lambda function
                # Assigning a type to the variable 'stypy_return_type' (line 2544)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2544, 33), 'stypy_return_type', True_278623)
                
                # ################# End of the lambda function code ##################

                # Stacktrace pop (error reporting)
                localization.unset_stack_trace()
                
                # Storing the return type of function '_stypy_temp_lambda_118' in the type store
                # Getting the type of 'stypy_return_type' (line 2544)
                stypy_return_type_278624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2544, 33), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_278624)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function '_stypy_temp_lambda_118'
                return stypy_return_type_278624

            # Assigning a type to the variable '_stypy_temp_lambda_118' (line 2544)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2544, 33), '_stypy_temp_lambda_118', _stypy_temp_lambda_118)
            # Getting the type of '_stypy_temp_lambda_118' (line 2544)
            _stypy_temp_lambda_118_278625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2544, 33), '_stypy_temp_lambda_118')
            # Getting the type of 'self' (line 2544)
            self_278626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2544, 12), 'self')
            # Setting the type of the member '_check_params' of a type (line 2544)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2544, 12), self_278626, '_check_params', _stypy_temp_lambda_118_278625)

            if more_types_in_union_278622:
                # Runtime conditional SSA for else branch (line 2543)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_278621) or more_types_in_union_278622):
            
            
            # Call to callable(...): (line 2545)
            # Processing the call arguments (line 2545)
            # Getting the type of 'check_params' (line 2545)
            check_params_278628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2545, 22), 'check_params', False)
            # Processing the call keyword arguments (line 2545)
            kwargs_278629 = {}
            # Getting the type of 'callable' (line 2545)
            callable_278627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2545, 13), 'callable', False)
            # Calling callable(args, kwargs) (line 2545)
            callable_call_result_278630 = invoke(stypy.reporting.localization.Localization(__file__, 2545, 13), callable_278627, *[check_params_278628], **kwargs_278629)
            
            # Testing the type of an if condition (line 2545)
            if_condition_278631 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2545, 13), callable_call_result_278630)
            # Assigning a type to the variable 'if_condition_278631' (line 2545)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2545, 13), 'if_condition_278631', if_condition_278631)
            # SSA begins for if statement (line 2545)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Attribute (line 2546):
            
            # Assigning a Name to a Attribute (line 2546):
            # Getting the type of 'check_params' (line 2546)
            check_params_278632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2546, 33), 'check_params')
            # Getting the type of 'self' (line 2546)
            self_278633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2546, 12), 'self')
            # Setting the type of the member '_check_params' of a type (line 2546)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2546, 12), self_278633, '_check_params', check_params_278632)
            # SSA branch for the else part of an if statement (line 2545)
            module_type_store.open_ssa_branch('else')
            
            # Call to ValueError(...): (line 2548)
            # Processing the call arguments (line 2548)
            unicode_278635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2548, 29), 'unicode', u"Invalid 'check_params' argument.")
            # Processing the call keyword arguments (line 2548)
            kwargs_278636 = {}
            # Getting the type of 'ValueError' (line 2548)
            ValueError_278634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2548, 18), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 2548)
            ValueError_call_result_278637 = invoke(stypy.reporting.localization.Localization(__file__, 2548, 18), ValueError_278634, *[unicode_278635], **kwargs_278636)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2548, 12), ValueError_call_result_278637, 'raise parameter', BaseException)
            # SSA join for if statement (line 2545)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_278621 and more_types_in_union_278622):
                # SSA join for if statement (line 2543)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def is_bounded_0_1(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 2550)
        None_278638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2550, 36), 'None')
        defaults = [None_278638]
        # Create a new context for function 'is_bounded_0_1'
        module_type_store = module_type_store.open_function_context('is_bounded_0_1', 2550, 4, False)
        # Assigning a type to the variable 'self' (line 2551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2551, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _FuncInfo.is_bounded_0_1.__dict__.__setitem__('stypy_localization', localization)
        _FuncInfo.is_bounded_0_1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _FuncInfo.is_bounded_0_1.__dict__.__setitem__('stypy_type_store', module_type_store)
        _FuncInfo.is_bounded_0_1.__dict__.__setitem__('stypy_function_name', '_FuncInfo.is_bounded_0_1')
        _FuncInfo.is_bounded_0_1.__dict__.__setitem__('stypy_param_names_list', ['params'])
        _FuncInfo.is_bounded_0_1.__dict__.__setitem__('stypy_varargs_param_name', None)
        _FuncInfo.is_bounded_0_1.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _FuncInfo.is_bounded_0_1.__dict__.__setitem__('stypy_call_defaults', defaults)
        _FuncInfo.is_bounded_0_1.__dict__.__setitem__('stypy_call_varargs', varargs)
        _FuncInfo.is_bounded_0_1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _FuncInfo.is_bounded_0_1.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_FuncInfo.is_bounded_0_1', ['params'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'is_bounded_0_1', localization, ['params'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'is_bounded_0_1(...)' code ##################

        unicode_278639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2568, (-1)), 'unicode', u"\n        Returns a boolean indicating if the function is bounded in the [0,1]\n        interval for a particular set of additional parameters.\n\n        Parameters\n        ----------\n\n        params : list\n            The list of additional parameters. Default None.\n\n        Returns\n        -------\n\n        out : bool\n            True if the function is bounded in the [0,1] interval for\n            parameters 'params'. Otherwise False.\n\n        ")
        
        # Call to _bounded_0_1(...): (line 2570)
        # Processing the call arguments (line 2570)
        # Getting the type of 'params' (line 2570)
        params_278642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2570, 33), 'params', False)
        # Processing the call keyword arguments (line 2570)
        kwargs_278643 = {}
        # Getting the type of 'self' (line 2570)
        self_278640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2570, 15), 'self', False)
        # Obtaining the member '_bounded_0_1' of a type (line 2570)
        _bounded_0_1_278641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2570, 15), self_278640, '_bounded_0_1')
        # Calling _bounded_0_1(args, kwargs) (line 2570)
        _bounded_0_1_call_result_278644 = invoke(stypy.reporting.localization.Localization(__file__, 2570, 15), _bounded_0_1_278641, *[params_278642], **kwargs_278643)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2570)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2570, 8), 'stypy_return_type', _bounded_0_1_call_result_278644)
        
        # ################# End of 'is_bounded_0_1(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'is_bounded_0_1' in the type store
        # Getting the type of 'stypy_return_type' (line 2550)
        stypy_return_type_278645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2550, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_278645)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'is_bounded_0_1'
        return stypy_return_type_278645


    @norecursion
    def check_params(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 2572)
        None_278646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2572, 34), 'None')
        defaults = [None_278646]
        # Create a new context for function 'check_params'
        module_type_store = module_type_store.open_function_context('check_params', 2572, 4, False)
        # Assigning a type to the variable 'self' (line 2573)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2573, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _FuncInfo.check_params.__dict__.__setitem__('stypy_localization', localization)
        _FuncInfo.check_params.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _FuncInfo.check_params.__dict__.__setitem__('stypy_type_store', module_type_store)
        _FuncInfo.check_params.__dict__.__setitem__('stypy_function_name', '_FuncInfo.check_params')
        _FuncInfo.check_params.__dict__.__setitem__('stypy_param_names_list', ['params'])
        _FuncInfo.check_params.__dict__.__setitem__('stypy_varargs_param_name', None)
        _FuncInfo.check_params.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _FuncInfo.check_params.__dict__.__setitem__('stypy_call_defaults', defaults)
        _FuncInfo.check_params.__dict__.__setitem__('stypy_call_varargs', varargs)
        _FuncInfo.check_params.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _FuncInfo.check_params.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_FuncInfo.check_params', ['params'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'check_params', localization, ['params'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'check_params(...)' code ##################

        unicode_278647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2590, (-1)), 'unicode', u"\n        Returns a boolean indicating if the set of additional parameters is\n        valid.\n\n        Parameters\n        ----------\n\n        params : list\n            The list of additional parameters. Default None.\n\n        Returns\n        -------\n\n        out : bool\n            True if 'params' is a valid set of additional parameters for the\n            function. Otherwise False.\n\n        ")
        
        # Call to _check_params(...): (line 2592)
        # Processing the call arguments (line 2592)
        # Getting the type of 'params' (line 2592)
        params_278650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2592, 34), 'params', False)
        # Processing the call keyword arguments (line 2592)
        kwargs_278651 = {}
        # Getting the type of 'self' (line 2592)
        self_278648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2592, 15), 'self', False)
        # Obtaining the member '_check_params' of a type (line 2592)
        _check_params_278649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2592, 15), self_278648, '_check_params')
        # Calling _check_params(args, kwargs) (line 2592)
        _check_params_call_result_278652 = invoke(stypy.reporting.localization.Localization(__file__, 2592, 15), _check_params_278649, *[params_278650], **kwargs_278651)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2592)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2592, 8), 'stypy_return_type', _check_params_call_result_278652)
        
        # ################# End of 'check_params(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'check_params' in the type store
        # Getting the type of 'stypy_return_type' (line 2572)
        stypy_return_type_278653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2572, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_278653)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'check_params'
        return stypy_return_type_278653


# Assigning a type to the variable '_FuncInfo' (line 2501)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2501, 0), '_FuncInfo', _FuncInfo)
# Declaration of the '_StringFuncParser' class

class _StringFuncParser(object, ):
    unicode_278654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2601, (-1)), 'unicode', u'\n    A class used to convert predefined strings into\n    _FuncInfo objects, or to directly obtain _FuncInfo\n    properties.\n\n    ')
    
    # Assigning a Dict to a Name (line 2603):
    
    # Assigning a Call to a Subscript (line 2604):
    
    # Assigning a Call to a Subscript (line 2607):
    
    # Assigning a Call to a Subscript (line 2610):
    
    # Assigning a Call to a Subscript (line 2613):
    
    # Assigning a Call to a Subscript (line 2616):
    
    # Assigning a Call to a Subscript (line 2619):
    
    # Assigning a Call to a Subscript (line 2622):
    
    # Assigning a Call to a Subscript (line 2625):
    
    # Assigning a Call to a Subscript (line 2628):
    
    # Assigning a Call to a Subscript (line 2631):
    
    # Assigning a Call to a Subscript (line 2634):
    
    # Assigning a Call to a Subscript (line 2639):
    
    # Assigning a Call to a Subscript (line 2642):
    
    # Assigning a Call to a Subscript (line 2645):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2651, 4, False)
        # Assigning a type to the variable 'self' (line 2652)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2652, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_StringFuncParser.__init__', ['str_func'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['str_func'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_278655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2658, (-1)), 'unicode', u'\n        Parameters\n        ----------\n        str_func : string\n            String to be parsed.\n\n        ')
        
        
        
        # Call to isinstance(...): (line 2660)
        # Processing the call arguments (line 2660)
        # Getting the type of 'str_func' (line 2660)
        str_func_278657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2660, 26), 'str_func', False)
        # Getting the type of 'six' (line 2660)
        six_278658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2660, 36), 'six', False)
        # Obtaining the member 'string_types' of a type (line 2660)
        string_types_278659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2660, 36), six_278658, 'string_types')
        # Processing the call keyword arguments (line 2660)
        kwargs_278660 = {}
        # Getting the type of 'isinstance' (line 2660)
        isinstance_278656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2660, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 2660)
        isinstance_call_result_278661 = invoke(stypy.reporting.localization.Localization(__file__, 2660, 15), isinstance_278656, *[str_func_278657, string_types_278659], **kwargs_278660)
        
        # Applying the 'not' unary operator (line 2660)
        result_not__278662 = python_operator(stypy.reporting.localization.Localization(__file__, 2660, 11), 'not', isinstance_call_result_278661)
        
        # Testing the type of an if condition (line 2660)
        if_condition_278663 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2660, 8), result_not__278662)
        # Assigning a type to the variable 'if_condition_278663' (line 2660)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2660, 8), 'if_condition_278663', if_condition_278663)
        # SSA begins for if statement (line 2660)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2661)
        # Processing the call arguments (line 2661)
        unicode_278665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2661, 29), 'unicode', u"'%s' must be a string.")
        # Getting the type of 'str_func' (line 2661)
        str_func_278666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2661, 56), 'str_func', False)
        # Applying the binary operator '%' (line 2661)
        result_mod_278667 = python_operator(stypy.reporting.localization.Localization(__file__, 2661, 29), '%', unicode_278665, str_func_278666)
        
        # Processing the call keyword arguments (line 2661)
        kwargs_278668 = {}
        # Getting the type of 'ValueError' (line 2661)
        ValueError_278664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2661, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2661)
        ValueError_call_result_278669 = invoke(stypy.reporting.localization.Localization(__file__, 2661, 18), ValueError_278664, *[result_mod_278667], **kwargs_278668)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2661, 12), ValueError_call_result_278669, 'raise parameter', BaseException)
        # SSA join for if statement (line 2660)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 2662):
        
        # Assigning a Call to a Attribute (line 2662):
        
        # Call to text_type(...): (line 2662)
        # Processing the call arguments (line 2662)
        # Getting the type of 'str_func' (line 2662)
        str_func_278672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2662, 39), 'str_func', False)
        # Processing the call keyword arguments (line 2662)
        kwargs_278673 = {}
        # Getting the type of 'six' (line 2662)
        six_278670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2662, 25), 'six', False)
        # Obtaining the member 'text_type' of a type (line 2662)
        text_type_278671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2662, 25), six_278670, 'text_type')
        # Calling text_type(args, kwargs) (line 2662)
        text_type_call_result_278674 = invoke(stypy.reporting.localization.Localization(__file__, 2662, 25), text_type_278671, *[str_func_278672], **kwargs_278673)
        
        # Getting the type of 'self' (line 2662)
        self_278675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2662, 8), 'self')
        # Setting the type of the member '_str_func' of a type (line 2662)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2662, 8), self_278675, '_str_func', text_type_call_result_278674)
        
        # Assigning a Call to a Tuple (line 2663):
        
        # Assigning a Call to a Name:
        
        # Call to _get_key_params(...): (line 2663)
        # Processing the call keyword arguments (line 2663)
        kwargs_278678 = {}
        # Getting the type of 'self' (line 2663)
        self_278676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2663, 34), 'self', False)
        # Obtaining the member '_get_key_params' of a type (line 2663)
        _get_key_params_278677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2663, 34), self_278676, '_get_key_params')
        # Calling _get_key_params(args, kwargs) (line 2663)
        _get_key_params_call_result_278679 = invoke(stypy.reporting.localization.Localization(__file__, 2663, 34), _get_key_params_278677, *[], **kwargs_278678)
        
        # Assigning a type to the variable 'call_assignment_273677' (line 2663)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2663, 8), 'call_assignment_273677', _get_key_params_call_result_278679)
        
        # Assigning a Call to a Name (line 2663):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_278682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2663, 8), 'int')
        # Processing the call keyword arguments
        kwargs_278683 = {}
        # Getting the type of 'call_assignment_273677' (line 2663)
        call_assignment_273677_278680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2663, 8), 'call_assignment_273677', False)
        # Obtaining the member '__getitem__' of a type (line 2663)
        getitem___278681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2663, 8), call_assignment_273677_278680, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_278684 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___278681, *[int_278682], **kwargs_278683)
        
        # Assigning a type to the variable 'call_assignment_273678' (line 2663)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2663, 8), 'call_assignment_273678', getitem___call_result_278684)
        
        # Assigning a Name to a Attribute (line 2663):
        # Getting the type of 'call_assignment_273678' (line 2663)
        call_assignment_273678_278685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2663, 8), 'call_assignment_273678')
        # Getting the type of 'self' (line 2663)
        self_278686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2663, 8), 'self')
        # Setting the type of the member '_key' of a type (line 2663)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2663, 8), self_278686, '_key', call_assignment_273678_278685)
        
        # Assigning a Call to a Name (line 2663):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_278689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2663, 8), 'int')
        # Processing the call keyword arguments
        kwargs_278690 = {}
        # Getting the type of 'call_assignment_273677' (line 2663)
        call_assignment_273677_278687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2663, 8), 'call_assignment_273677', False)
        # Obtaining the member '__getitem__' of a type (line 2663)
        getitem___278688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2663, 8), call_assignment_273677_278687, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_278691 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___278688, *[int_278689], **kwargs_278690)
        
        # Assigning a type to the variable 'call_assignment_273679' (line 2663)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2663, 8), 'call_assignment_273679', getitem___call_result_278691)
        
        # Assigning a Name to a Attribute (line 2663):
        # Getting the type of 'call_assignment_273679' (line 2663)
        call_assignment_273679_278692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2663, 8), 'call_assignment_273679')
        # Getting the type of 'self' (line 2663)
        self_278693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2663, 19), 'self')
        # Setting the type of the member '_params' of a type (line 2663)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2663, 19), self_278693, '_params', call_assignment_273679_278692)
        
        # Assigning a Call to a Attribute (line 2664):
        
        # Assigning a Call to a Attribute (line 2664):
        
        # Call to _parse_func(...): (line 2664)
        # Processing the call keyword arguments (line 2664)
        kwargs_278696 = {}
        # Getting the type of 'self' (line 2664)
        self_278694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2664, 21), 'self', False)
        # Obtaining the member '_parse_func' of a type (line 2664)
        _parse_func_278695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2664, 21), self_278694, '_parse_func')
        # Calling _parse_func(args, kwargs) (line 2664)
        _parse_func_call_result_278697 = invoke(stypy.reporting.localization.Localization(__file__, 2664, 21), _parse_func_278695, *[], **kwargs_278696)
        
        # Getting the type of 'self' (line 2664)
        self_278698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2664, 8), 'self')
        # Setting the type of the member '_func' of a type (line 2664)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2664, 8), self_278698, '_func', _parse_func_call_result_278697)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _parse_func(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_parse_func'
        module_type_store = module_type_store.open_function_context('_parse_func', 2666, 4, False)
        # Assigning a type to the variable 'self' (line 2667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2667, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _StringFuncParser._parse_func.__dict__.__setitem__('stypy_localization', localization)
        _StringFuncParser._parse_func.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _StringFuncParser._parse_func.__dict__.__setitem__('stypy_type_store', module_type_store)
        _StringFuncParser._parse_func.__dict__.__setitem__('stypy_function_name', '_StringFuncParser._parse_func')
        _StringFuncParser._parse_func.__dict__.__setitem__('stypy_param_names_list', [])
        _StringFuncParser._parse_func.__dict__.__setitem__('stypy_varargs_param_name', None)
        _StringFuncParser._parse_func.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _StringFuncParser._parse_func.__dict__.__setitem__('stypy_call_defaults', defaults)
        _StringFuncParser._parse_func.__dict__.__setitem__('stypy_call_varargs', varargs)
        _StringFuncParser._parse_func.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _StringFuncParser._parse_func.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_StringFuncParser._parse_func', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_parse_func', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_parse_func(...)' code ##################

        unicode_278699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2672, (-1)), 'unicode', u'\n        Parses the parameters to build a new _FuncInfo object,\n        replacing the relevant parameters if necessary in the lambda\n        functions.\n\n        ')
        
        # Assigning a Subscript to a Name (line 2674):
        
        # Assigning a Subscript to a Name (line 2674):
        
        # Obtaining the type of the subscript
        # Getting the type of 'self' (line 2674)
        self_278700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2674, 27), 'self')
        # Obtaining the member '_key' of a type (line 2674)
        _key_278701 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2674, 27), self_278700, '_key')
        # Getting the type of 'self' (line 2674)
        self_278702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2674, 15), 'self')
        # Obtaining the member '_funcs' of a type (line 2674)
        _funcs_278703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2674, 15), self_278702, '_funcs')
        # Obtaining the member '__getitem__' of a type (line 2674)
        getitem___278704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2674, 15), _funcs_278703, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2674)
        subscript_call_result_278705 = invoke(stypy.reporting.localization.Localization(__file__, 2674, 15), getitem___278704, _key_278701)
        
        # Assigning a type to the variable 'func' (line 2674)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2674, 8), 'func', subscript_call_result_278705)
        
        
        # Getting the type of 'self' (line 2676)
        self_278706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2676, 15), 'self')
        # Obtaining the member '_params' of a type (line 2676)
        _params_278707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2676, 15), self_278706, '_params')
        # Applying the 'not' unary operator (line 2676)
        result_not__278708 = python_operator(stypy.reporting.localization.Localization(__file__, 2676, 11), 'not', _params_278707)
        
        # Testing the type of an if condition (line 2676)
        if_condition_278709 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2676, 8), result_not__278708)
        # Assigning a type to the variable 'if_condition_278709' (line 2676)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2676, 8), 'if_condition_278709', if_condition_278709)
        # SSA begins for if statement (line 2676)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2677):
        
        # Assigning a Call to a Name (line 2677):
        
        # Call to _FuncInfo(...): (line 2677)
        # Processing the call arguments (line 2677)
        # Getting the type of 'func' (line 2677)
        func_278711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2677, 29), 'func', False)
        # Obtaining the member 'function' of a type (line 2677)
        function_278712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2677, 29), func_278711, 'function')
        # Getting the type of 'func' (line 2677)
        func_278713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2677, 44), 'func', False)
        # Obtaining the member 'inverse' of a type (line 2677)
        inverse_278714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2677, 44), func_278713, 'inverse')
        
        # Call to is_bounded_0_1(...): (line 2678)
        # Processing the call keyword arguments (line 2678)
        kwargs_278717 = {}
        # Getting the type of 'func' (line 2678)
        func_278715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2678, 29), 'func', False)
        # Obtaining the member 'is_bounded_0_1' of a type (line 2678)
        is_bounded_0_1_278716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2678, 29), func_278715, 'is_bounded_0_1')
        # Calling is_bounded_0_1(args, kwargs) (line 2678)
        is_bounded_0_1_call_result_278718 = invoke(stypy.reporting.localization.Localization(__file__, 2678, 29), is_bounded_0_1_278716, *[], **kwargs_278717)
        
        # Processing the call keyword arguments (line 2677)
        kwargs_278719 = {}
        # Getting the type of '_FuncInfo' (line 2677)
        _FuncInfo_278710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2677, 19), '_FuncInfo', False)
        # Calling _FuncInfo(args, kwargs) (line 2677)
        _FuncInfo_call_result_278720 = invoke(stypy.reporting.localization.Localization(__file__, 2677, 19), _FuncInfo_278710, *[function_278712, inverse_278714, is_bounded_0_1_call_result_278718], **kwargs_278719)
        
        # Assigning a type to the variable 'func' (line 2677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2677, 12), 'func', _FuncInfo_call_result_278720)
        # SSA branch for the else part of an if statement (line 2676)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 2680):
        
        # Assigning a Attribute to a Name (line 2680):
        # Getting the type of 'func' (line 2680)
        func_278721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2680, 16), 'func')
        # Obtaining the member 'function' of a type (line 2680)
        function_278722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2680, 16), func_278721, 'function')
        # Assigning a type to the variable 'm' (line 2680)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2680, 12), 'm', function_278722)
        
        # Assigning a Lambda to a Name (line 2681):
        
        # Assigning a Lambda to a Name (line 2681):

        @norecursion
        def _stypy_temp_lambda_119(localization, *varargs, **kwargs):
            global module_type_store
            # Getting the type of 'm' (line 2681)
            m_278723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2681, 36), 'm')
            # Assign values to the parameters with defaults
            defaults = [m_278723]
            # Create a new context for function '_stypy_temp_lambda_119'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_119', 2681, 24, True)
            # Passed parameters checking function
            _stypy_temp_lambda_119.stypy_localization = localization
            _stypy_temp_lambda_119.stypy_type_of_self = None
            _stypy_temp_lambda_119.stypy_type_store = module_type_store
            _stypy_temp_lambda_119.stypy_function_name = '_stypy_temp_lambda_119'
            _stypy_temp_lambda_119.stypy_param_names_list = ['x', 'm']
            _stypy_temp_lambda_119.stypy_varargs_param_name = None
            _stypy_temp_lambda_119.stypy_kwargs_param_name = None
            _stypy_temp_lambda_119.stypy_call_defaults = defaults
            _stypy_temp_lambda_119.stypy_call_varargs = varargs
            _stypy_temp_lambda_119.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_119', ['x', 'm'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_119', ['x', 'm'], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            
            # Call to m(...): (line 2681)
            # Processing the call arguments (line 2681)
            # Getting the type of 'x' (line 2681)
            x_278725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2681, 41), 'x', False)
            # Getting the type of 'self' (line 2681)
            self_278726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2681, 44), 'self', False)
            # Obtaining the member '_params' of a type (line 2681)
            _params_278727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2681, 44), self_278726, '_params')
            # Processing the call keyword arguments (line 2681)
            kwargs_278728 = {}
            # Getting the type of 'm' (line 2681)
            m_278724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2681, 39), 'm', False)
            # Calling m(args, kwargs) (line 2681)
            m_call_result_278729 = invoke(stypy.reporting.localization.Localization(__file__, 2681, 39), m_278724, *[x_278725, _params_278727], **kwargs_278728)
            
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 2681)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2681, 24), 'stypy_return_type', m_call_result_278729)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_119' in the type store
            # Getting the type of 'stypy_return_type' (line 2681)
            stypy_return_type_278730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2681, 24), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_278730)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_119'
            return stypy_return_type_278730

        # Assigning a type to the variable '_stypy_temp_lambda_119' (line 2681)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2681, 24), '_stypy_temp_lambda_119', _stypy_temp_lambda_119)
        # Getting the type of '_stypy_temp_lambda_119' (line 2681)
        _stypy_temp_lambda_119_278731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2681, 24), '_stypy_temp_lambda_119')
        # Assigning a type to the variable 'function' (line 2681)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2681, 12), 'function', _stypy_temp_lambda_119_278731)
        
        # Assigning a Attribute to a Name (line 2683):
        
        # Assigning a Attribute to a Name (line 2683):
        # Getting the type of 'func' (line 2683)
        func_278732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2683, 16), 'func')
        # Obtaining the member 'inverse' of a type (line 2683)
        inverse_278733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2683, 16), func_278732, 'inverse')
        # Assigning a type to the variable 'm' (line 2683)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2683, 12), 'm', inverse_278733)
        
        # Assigning a Lambda to a Name (line 2684):
        
        # Assigning a Lambda to a Name (line 2684):

        @norecursion
        def _stypy_temp_lambda_120(localization, *varargs, **kwargs):
            global module_type_store
            # Getting the type of 'm' (line 2684)
            m_278734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2684, 35), 'm')
            # Assign values to the parameters with defaults
            defaults = [m_278734]
            # Create a new context for function '_stypy_temp_lambda_120'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_120', 2684, 23, True)
            # Passed parameters checking function
            _stypy_temp_lambda_120.stypy_localization = localization
            _stypy_temp_lambda_120.stypy_type_of_self = None
            _stypy_temp_lambda_120.stypy_type_store = module_type_store
            _stypy_temp_lambda_120.stypy_function_name = '_stypy_temp_lambda_120'
            _stypy_temp_lambda_120.stypy_param_names_list = ['x', 'm']
            _stypy_temp_lambda_120.stypy_varargs_param_name = None
            _stypy_temp_lambda_120.stypy_kwargs_param_name = None
            _stypy_temp_lambda_120.stypy_call_defaults = defaults
            _stypy_temp_lambda_120.stypy_call_varargs = varargs
            _stypy_temp_lambda_120.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_120', ['x', 'm'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_120', ['x', 'm'], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            
            # Call to m(...): (line 2684)
            # Processing the call arguments (line 2684)
            # Getting the type of 'x' (line 2684)
            x_278736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2684, 40), 'x', False)
            # Getting the type of 'self' (line 2684)
            self_278737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2684, 43), 'self', False)
            # Obtaining the member '_params' of a type (line 2684)
            _params_278738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2684, 43), self_278737, '_params')
            # Processing the call keyword arguments (line 2684)
            kwargs_278739 = {}
            # Getting the type of 'm' (line 2684)
            m_278735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2684, 38), 'm', False)
            # Calling m(args, kwargs) (line 2684)
            m_call_result_278740 = invoke(stypy.reporting.localization.Localization(__file__, 2684, 38), m_278735, *[x_278736, _params_278738], **kwargs_278739)
            
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 2684)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2684, 23), 'stypy_return_type', m_call_result_278740)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_120' in the type store
            # Getting the type of 'stypy_return_type' (line 2684)
            stypy_return_type_278741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2684, 23), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_278741)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_120'
            return stypy_return_type_278741

        # Assigning a type to the variable '_stypy_temp_lambda_120' (line 2684)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2684, 23), '_stypy_temp_lambda_120', _stypy_temp_lambda_120)
        # Getting the type of '_stypy_temp_lambda_120' (line 2684)
        _stypy_temp_lambda_120_278742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2684, 23), '_stypy_temp_lambda_120')
        # Assigning a type to the variable 'inverse' (line 2684)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2684, 12), 'inverse', _stypy_temp_lambda_120_278742)
        
        # Assigning a Call to a Name (line 2686):
        
        # Assigning a Call to a Name (line 2686):
        
        # Call to is_bounded_0_1(...): (line 2686)
        # Processing the call arguments (line 2686)
        # Getting the type of 'self' (line 2686)
        self_278745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2686, 49), 'self', False)
        # Obtaining the member '_params' of a type (line 2686)
        _params_278746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2686, 49), self_278745, '_params')
        # Processing the call keyword arguments (line 2686)
        kwargs_278747 = {}
        # Getting the type of 'func' (line 2686)
        func_278743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2686, 29), 'func', False)
        # Obtaining the member 'is_bounded_0_1' of a type (line 2686)
        is_bounded_0_1_278744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2686, 29), func_278743, 'is_bounded_0_1')
        # Calling is_bounded_0_1(args, kwargs) (line 2686)
        is_bounded_0_1_call_result_278748 = invoke(stypy.reporting.localization.Localization(__file__, 2686, 29), is_bounded_0_1_278744, *[_params_278746], **kwargs_278747)
        
        # Assigning a type to the variable 'is_bounded_0_1' (line 2686)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2686, 12), 'is_bounded_0_1', is_bounded_0_1_call_result_278748)
        
        # Assigning a Call to a Name (line 2688):
        
        # Assigning a Call to a Name (line 2688):
        
        # Call to _FuncInfo(...): (line 2688)
        # Processing the call arguments (line 2688)
        # Getting the type of 'function' (line 2688)
        function_278750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2688, 29), 'function', False)
        # Getting the type of 'inverse' (line 2688)
        inverse_278751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2688, 39), 'inverse', False)
        # Getting the type of 'is_bounded_0_1' (line 2689)
        is_bounded_0_1_278752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2689, 29), 'is_bounded_0_1', False)
        # Processing the call keyword arguments (line 2688)
        kwargs_278753 = {}
        # Getting the type of '_FuncInfo' (line 2688)
        _FuncInfo_278749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2688, 19), '_FuncInfo', False)
        # Calling _FuncInfo(args, kwargs) (line 2688)
        _FuncInfo_call_result_278754 = invoke(stypy.reporting.localization.Localization(__file__, 2688, 19), _FuncInfo_278749, *[function_278750, inverse_278751, is_bounded_0_1_278752], **kwargs_278753)
        
        # Assigning a type to the variable 'func' (line 2688)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2688, 12), 'func', _FuncInfo_call_result_278754)
        # SSA join for if statement (line 2676)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'func' (line 2690)
        func_278755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2690, 15), 'func')
        # Assigning a type to the variable 'stypy_return_type' (line 2690)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2690, 8), 'stypy_return_type', func_278755)
        
        # ################# End of '_parse_func(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_parse_func' in the type store
        # Getting the type of 'stypy_return_type' (line 2666)
        stypy_return_type_278756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2666, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_278756)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_parse_func'
        return stypy_return_type_278756


    @norecursion
    def func_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'func_info'
        module_type_store = module_type_store.open_function_context('func_info', 2692, 4, False)
        # Assigning a type to the variable 'self' (line 2693)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2693, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _StringFuncParser.func_info.__dict__.__setitem__('stypy_localization', localization)
        _StringFuncParser.func_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _StringFuncParser.func_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        _StringFuncParser.func_info.__dict__.__setitem__('stypy_function_name', '_StringFuncParser.func_info')
        _StringFuncParser.func_info.__dict__.__setitem__('stypy_param_names_list', [])
        _StringFuncParser.func_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        _StringFuncParser.func_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _StringFuncParser.func_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        _StringFuncParser.func_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        _StringFuncParser.func_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _StringFuncParser.func_info.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_StringFuncParser.func_info', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'func_info', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'func_info(...)' code ##################

        unicode_278757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2697, (-1)), 'unicode', u'\n        Returns the _FuncInfo object.\n\n        ')
        # Getting the type of 'self' (line 2698)
        self_278758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2698, 15), 'self')
        # Obtaining the member '_func' of a type (line 2698)
        _func_278759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2698, 15), self_278758, '_func')
        # Assigning a type to the variable 'stypy_return_type' (line 2698)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2698, 8), 'stypy_return_type', _func_278759)
        
        # ################# End of 'func_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'func_info' in the type store
        # Getting the type of 'stypy_return_type' (line 2692)
        stypy_return_type_278760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2692, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_278760)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'func_info'
        return stypy_return_type_278760


    @norecursion
    def function(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'function'
        module_type_store = module_type_store.open_function_context('function', 2700, 4, False)
        # Assigning a type to the variable 'self' (line 2701)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2701, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _StringFuncParser.function.__dict__.__setitem__('stypy_localization', localization)
        _StringFuncParser.function.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _StringFuncParser.function.__dict__.__setitem__('stypy_type_store', module_type_store)
        _StringFuncParser.function.__dict__.__setitem__('stypy_function_name', '_StringFuncParser.function')
        _StringFuncParser.function.__dict__.__setitem__('stypy_param_names_list', [])
        _StringFuncParser.function.__dict__.__setitem__('stypy_varargs_param_name', None)
        _StringFuncParser.function.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _StringFuncParser.function.__dict__.__setitem__('stypy_call_defaults', defaults)
        _StringFuncParser.function.__dict__.__setitem__('stypy_call_varargs', varargs)
        _StringFuncParser.function.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _StringFuncParser.function.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_StringFuncParser.function', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'function', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'function(...)' code ##################

        unicode_278761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2705, (-1)), 'unicode', u'\n        Returns the callable for the direct function.\n\n        ')
        # Getting the type of 'self' (line 2706)
        self_278762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2706, 15), 'self')
        # Obtaining the member '_func' of a type (line 2706)
        _func_278763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2706, 15), self_278762, '_func')
        # Obtaining the member 'function' of a type (line 2706)
        function_278764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2706, 15), _func_278763, 'function')
        # Assigning a type to the variable 'stypy_return_type' (line 2706)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2706, 8), 'stypy_return_type', function_278764)
        
        # ################# End of 'function(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'function' in the type store
        # Getting the type of 'stypy_return_type' (line 2700)
        stypy_return_type_278765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2700, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_278765)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'function'
        return stypy_return_type_278765


    @norecursion
    def inverse(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'inverse'
        module_type_store = module_type_store.open_function_context('inverse', 2708, 4, False)
        # Assigning a type to the variable 'self' (line 2709)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2709, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _StringFuncParser.inverse.__dict__.__setitem__('stypy_localization', localization)
        _StringFuncParser.inverse.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _StringFuncParser.inverse.__dict__.__setitem__('stypy_type_store', module_type_store)
        _StringFuncParser.inverse.__dict__.__setitem__('stypy_function_name', '_StringFuncParser.inverse')
        _StringFuncParser.inverse.__dict__.__setitem__('stypy_param_names_list', [])
        _StringFuncParser.inverse.__dict__.__setitem__('stypy_varargs_param_name', None)
        _StringFuncParser.inverse.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _StringFuncParser.inverse.__dict__.__setitem__('stypy_call_defaults', defaults)
        _StringFuncParser.inverse.__dict__.__setitem__('stypy_call_varargs', varargs)
        _StringFuncParser.inverse.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _StringFuncParser.inverse.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_StringFuncParser.inverse', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'inverse', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'inverse(...)' code ##################

        unicode_278766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2713, (-1)), 'unicode', u'\n        Returns the callable for the inverse function.\n\n        ')
        # Getting the type of 'self' (line 2714)
        self_278767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2714, 15), 'self')
        # Obtaining the member '_func' of a type (line 2714)
        _func_278768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2714, 15), self_278767, '_func')
        # Obtaining the member 'inverse' of a type (line 2714)
        inverse_278769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2714, 15), _func_278768, 'inverse')
        # Assigning a type to the variable 'stypy_return_type' (line 2714)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2714, 8), 'stypy_return_type', inverse_278769)
        
        # ################# End of 'inverse(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'inverse' in the type store
        # Getting the type of 'stypy_return_type' (line 2708)
        stypy_return_type_278770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2708, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_278770)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'inverse'
        return stypy_return_type_278770


    @norecursion
    def is_bounded_0_1(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'is_bounded_0_1'
        module_type_store = module_type_store.open_function_context('is_bounded_0_1', 2716, 4, False)
        # Assigning a type to the variable 'self' (line 2717)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2717, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _StringFuncParser.is_bounded_0_1.__dict__.__setitem__('stypy_localization', localization)
        _StringFuncParser.is_bounded_0_1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _StringFuncParser.is_bounded_0_1.__dict__.__setitem__('stypy_type_store', module_type_store)
        _StringFuncParser.is_bounded_0_1.__dict__.__setitem__('stypy_function_name', '_StringFuncParser.is_bounded_0_1')
        _StringFuncParser.is_bounded_0_1.__dict__.__setitem__('stypy_param_names_list', [])
        _StringFuncParser.is_bounded_0_1.__dict__.__setitem__('stypy_varargs_param_name', None)
        _StringFuncParser.is_bounded_0_1.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _StringFuncParser.is_bounded_0_1.__dict__.__setitem__('stypy_call_defaults', defaults)
        _StringFuncParser.is_bounded_0_1.__dict__.__setitem__('stypy_call_varargs', varargs)
        _StringFuncParser.is_bounded_0_1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _StringFuncParser.is_bounded_0_1.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_StringFuncParser.is_bounded_0_1', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'is_bounded_0_1', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'is_bounded_0_1(...)' code ##################

        unicode_278771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2722, (-1)), 'unicode', u'\n        Returns a boolean indicating if the function is bounded\n        in the [0-1 interval].\n\n        ')
        
        # Call to is_bounded_0_1(...): (line 2723)
        # Processing the call keyword arguments (line 2723)
        kwargs_278775 = {}
        # Getting the type of 'self' (line 2723)
        self_278772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2723, 15), 'self', False)
        # Obtaining the member '_func' of a type (line 2723)
        _func_278773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2723, 15), self_278772, '_func')
        # Obtaining the member 'is_bounded_0_1' of a type (line 2723)
        is_bounded_0_1_278774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2723, 15), _func_278773, 'is_bounded_0_1')
        # Calling is_bounded_0_1(args, kwargs) (line 2723)
        is_bounded_0_1_call_result_278776 = invoke(stypy.reporting.localization.Localization(__file__, 2723, 15), is_bounded_0_1_278774, *[], **kwargs_278775)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2723)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2723, 8), 'stypy_return_type', is_bounded_0_1_call_result_278776)
        
        # ################# End of 'is_bounded_0_1(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'is_bounded_0_1' in the type store
        # Getting the type of 'stypy_return_type' (line 2716)
        stypy_return_type_278777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2716, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_278777)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'is_bounded_0_1'
        return stypy_return_type_278777


    @norecursion
    def _get_key_params(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_key_params'
        module_type_store = module_type_store.open_function_context('_get_key_params', 2725, 4, False)
        # Assigning a type to the variable 'self' (line 2726)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2726, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _StringFuncParser._get_key_params.__dict__.__setitem__('stypy_localization', localization)
        _StringFuncParser._get_key_params.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _StringFuncParser._get_key_params.__dict__.__setitem__('stypy_type_store', module_type_store)
        _StringFuncParser._get_key_params.__dict__.__setitem__('stypy_function_name', '_StringFuncParser._get_key_params')
        _StringFuncParser._get_key_params.__dict__.__setitem__('stypy_param_names_list', [])
        _StringFuncParser._get_key_params.__dict__.__setitem__('stypy_varargs_param_name', None)
        _StringFuncParser._get_key_params.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _StringFuncParser._get_key_params.__dict__.__setitem__('stypy_call_defaults', defaults)
        _StringFuncParser._get_key_params.__dict__.__setitem__('stypy_call_varargs', varargs)
        _StringFuncParser._get_key_params.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _StringFuncParser._get_key_params.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_StringFuncParser._get_key_params', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_key_params', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_key_params(...)' code ##################

        
        # Assigning a Attribute to a Name (line 2726):
        
        # Assigning a Attribute to a Name (line 2726):
        # Getting the type of 'self' (line 2726)
        self_278778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2726, 19), 'self')
        # Obtaining the member '_str_func' of a type (line 2726)
        _str_func_278779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2726, 19), self_278778, '_str_func')
        # Assigning a type to the variable 'str_func' (line 2726)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2726, 8), 'str_func', _str_func_278779)
        
        # Assigning a Str to a Name (line 2728):
        
        # Assigning a Str to a Name (line 2728):
        unicode_278780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2728, 16), 'unicode', u'\\{(.*?)\\}')
        # Assigning a type to the variable 'regex' (line 2728)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2728, 8), 'regex', unicode_278780)
        
        # Assigning a Call to a Name (line 2729):
        
        # Assigning a Call to a Name (line 2729):
        
        # Call to findall(...): (line 2729)
        # Processing the call arguments (line 2729)
        # Getting the type of 'regex' (line 2729)
        regex_278783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2729, 28), 'regex', False)
        # Getting the type of 'str_func' (line 2729)
        str_func_278784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2729, 35), 'str_func', False)
        # Processing the call keyword arguments (line 2729)
        kwargs_278785 = {}
        # Getting the type of 're' (line 2729)
        re_278781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2729, 17), 're', False)
        # Obtaining the member 'findall' of a type (line 2729)
        findall_278782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2729, 17), re_278781, 'findall')
        # Calling findall(args, kwargs) (line 2729)
        findall_call_result_278786 = invoke(stypy.reporting.localization.Localization(__file__, 2729, 17), findall_278782, *[regex_278783, str_func_278784], **kwargs_278785)
        
        # Assigning a type to the variable 'params' (line 2729)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2729, 8), 'params', findall_call_result_278786)
        
        
        # Call to enumerate(...): (line 2731)
        # Processing the call arguments (line 2731)
        # Getting the type of 'params' (line 2731)
        params_278788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2731, 34), 'params', False)
        # Processing the call keyword arguments (line 2731)
        kwargs_278789 = {}
        # Getting the type of 'enumerate' (line 2731)
        enumerate_278787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2731, 24), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 2731)
        enumerate_call_result_278790 = invoke(stypy.reporting.localization.Localization(__file__, 2731, 24), enumerate_278787, *[params_278788], **kwargs_278789)
        
        # Testing the type of a for loop iterable (line 2731)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2731, 8), enumerate_call_result_278790)
        # Getting the type of the for loop variable (line 2731)
        for_loop_var_278791 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2731, 8), enumerate_call_result_278790)
        # Assigning a type to the variable 'i' (line 2731)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2731, 8), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2731, 8), for_loop_var_278791))
        # Assigning a type to the variable 'param' (line 2731)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2731, 8), 'param', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2731, 8), for_loop_var_278791))
        # SSA begins for a for statement (line 2731)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # SSA begins for try-except statement (line 2732)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Subscript (line 2733):
        
        # Assigning a Call to a Subscript (line 2733):
        
        # Call to float(...): (line 2733)
        # Processing the call arguments (line 2733)
        # Getting the type of 'param' (line 2733)
        param_278793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2733, 34), 'param', False)
        # Processing the call keyword arguments (line 2733)
        kwargs_278794 = {}
        # Getting the type of 'float' (line 2733)
        float_278792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2733, 28), 'float', False)
        # Calling float(args, kwargs) (line 2733)
        float_call_result_278795 = invoke(stypy.reporting.localization.Localization(__file__, 2733, 28), float_278792, *[param_278793], **kwargs_278794)
        
        # Getting the type of 'params' (line 2733)
        params_278796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2733, 16), 'params')
        # Getting the type of 'i' (line 2733)
        i_278797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2733, 23), 'i')
        # Storing an element on a container (line 2733)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2733, 16), params_278796, (i_278797, float_call_result_278795))
        # SSA branch for the except part of a try statement (line 2732)
        # SSA branch for the except 'ValueError' branch of a try statement (line 2732)
        module_type_store.open_ssa_branch('except')
        
        # Call to ValueError(...): (line 2735)
        # Processing the call arguments (line 2735)
        unicode_278799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2735, 33), 'unicode', u"Parameter %i is '%s', which is not a number.")
        
        # Obtaining an instance of the builtin type 'tuple' (line 2737)
        tuple_278800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2737, 34), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2737)
        # Adding element type (line 2737)
        # Getting the type of 'i' (line 2737)
        i_278801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2737, 34), 'i', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2737, 34), tuple_278800, i_278801)
        # Adding element type (line 2737)
        # Getting the type of 'param' (line 2737)
        param_278802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2737, 37), 'param', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2737, 34), tuple_278800, param_278802)
        
        # Applying the binary operator '%' (line 2735)
        result_mod_278803 = python_operator(stypy.reporting.localization.Localization(__file__, 2735, 33), '%', unicode_278799, tuple_278800)
        
        # Processing the call keyword arguments (line 2735)
        kwargs_278804 = {}
        # Getting the type of 'ValueError' (line 2735)
        ValueError_278798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2735, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2735)
        ValueError_call_result_278805 = invoke(stypy.reporting.localization.Localization(__file__, 2735, 22), ValueError_278798, *[result_mod_278803], **kwargs_278804)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2735, 16), ValueError_call_result_278805, 'raise parameter', BaseException)
        # SSA join for try-except statement (line 2732)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2739):
        
        # Assigning a Call to a Name (line 2739):
        
        # Call to sub(...): (line 2739)
        # Processing the call arguments (line 2739)
        # Getting the type of 'regex' (line 2739)
        regex_278808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2739, 26), 'regex', False)
        unicode_278809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2739, 33), 'unicode', u'{p}')
        # Getting the type of 'str_func' (line 2739)
        str_func_278810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2739, 40), 'str_func', False)
        # Processing the call keyword arguments (line 2739)
        kwargs_278811 = {}
        # Getting the type of 're' (line 2739)
        re_278806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2739, 19), 're', False)
        # Obtaining the member 'sub' of a type (line 2739)
        sub_278807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2739, 19), re_278806, 'sub')
        # Calling sub(args, kwargs) (line 2739)
        sub_call_result_278812 = invoke(stypy.reporting.localization.Localization(__file__, 2739, 19), sub_278807, *[regex_278808, unicode_278809, str_func_278810], **kwargs_278811)
        
        # Assigning a type to the variable 'str_func' (line 2739)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2739, 8), 'str_func', sub_call_result_278812)
        
        
        # SSA begins for try-except statement (line 2741)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Subscript to a Name (line 2742):
        
        # Assigning a Subscript to a Name (line 2742):
        
        # Obtaining the type of the subscript
        # Getting the type of 'str_func' (line 2742)
        str_func_278813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2742, 31), 'str_func')
        # Getting the type of 'self' (line 2742)
        self_278814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2742, 19), 'self')
        # Obtaining the member '_funcs' of a type (line 2742)
        _funcs_278815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2742, 19), self_278814, '_funcs')
        # Obtaining the member '__getitem__' of a type (line 2742)
        getitem___278816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2742, 19), _funcs_278815, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2742)
        subscript_call_result_278817 = invoke(stypy.reporting.localization.Localization(__file__, 2742, 19), getitem___278816, str_func_278813)
        
        # Assigning a type to the variable 'func' (line 2742)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2742, 12), 'func', subscript_call_result_278817)
        # SSA branch for the except part of a try statement (line 2741)
        # SSA branch for the except 'Tuple' branch of a try statement (line 2741)
        module_type_store.open_ssa_branch('except')
        
        # Call to ValueError(...): (line 2744)
        # Processing the call arguments (line 2744)
        unicode_278819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2744, 29), 'unicode', u"'%s' is an invalid string. The only strings recognized as functions are %s.")
        
        # Obtaining an instance of the builtin type 'tuple' (line 2746)
        tuple_278820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2746, 30), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2746)
        # Adding element type (line 2746)
        # Getting the type of 'str_func' (line 2746)
        str_func_278821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2746, 30), 'str_func', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2746, 30), tuple_278820, str_func_278821)
        # Adding element type (line 2746)
        
        # Call to list(...): (line 2746)
        # Processing the call arguments (line 2746)
        # Getting the type of 'self' (line 2746)
        self_278823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2746, 45), 'self', False)
        # Obtaining the member '_funcs' of a type (line 2746)
        _funcs_278824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2746, 45), self_278823, '_funcs')
        # Processing the call keyword arguments (line 2746)
        kwargs_278825 = {}
        # Getting the type of 'list' (line 2746)
        list_278822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2746, 40), 'list', False)
        # Calling list(args, kwargs) (line 2746)
        list_call_result_278826 = invoke(stypy.reporting.localization.Localization(__file__, 2746, 40), list_278822, *[_funcs_278824], **kwargs_278825)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2746, 30), tuple_278820, list_call_result_278826)
        
        # Applying the binary operator '%' (line 2744)
        result_mod_278827 = python_operator(stypy.reporting.localization.Localization(__file__, 2744, 29), '%', unicode_278819, tuple_278820)
        
        # Processing the call keyword arguments (line 2744)
        kwargs_278828 = {}
        # Getting the type of 'ValueError' (line 2744)
        ValueError_278818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2744, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2744)
        ValueError_call_result_278829 = invoke(stypy.reporting.localization.Localization(__file__, 2744, 18), ValueError_278818, *[result_mod_278827], **kwargs_278828)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2744, 12), ValueError_call_result_278829, 'raise parameter', BaseException)
        # SSA join for try-except statement (line 2741)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to check_params(...): (line 2749)
        # Processing the call arguments (line 2749)
        # Getting the type of 'params' (line 2749)
        params_278832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2749, 33), 'params', False)
        # Processing the call keyword arguments (line 2749)
        kwargs_278833 = {}
        # Getting the type of 'func' (line 2749)
        func_278830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2749, 15), 'func', False)
        # Obtaining the member 'check_params' of a type (line 2749)
        check_params_278831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2749, 15), func_278830, 'check_params')
        # Calling check_params(args, kwargs) (line 2749)
        check_params_call_result_278834 = invoke(stypy.reporting.localization.Localization(__file__, 2749, 15), check_params_278831, *[params_278832], **kwargs_278833)
        
        # Applying the 'not' unary operator (line 2749)
        result_not__278835 = python_operator(stypy.reporting.localization.Localization(__file__, 2749, 11), 'not', check_params_call_result_278834)
        
        # Testing the type of an if condition (line 2749)
        if_condition_278836 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2749, 8), result_not__278835)
        # Assigning a type to the variable 'if_condition_278836' (line 2749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2749, 8), 'if_condition_278836', if_condition_278836)
        # SSA begins for if statement (line 2749)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2750)
        # Processing the call arguments (line 2750)
        unicode_278838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2750, 29), 'unicode', u'%s are invalid values for the parameters in %s.')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2752)
        tuple_278839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2752, 30), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2752)
        # Adding element type (line 2752)
        # Getting the type of 'params' (line 2752)
        params_278840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2752, 30), 'params', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2752, 30), tuple_278839, params_278840)
        # Adding element type (line 2752)
        # Getting the type of 'str_func' (line 2752)
        str_func_278841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2752, 38), 'str_func', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2752, 30), tuple_278839, str_func_278841)
        
        # Applying the binary operator '%' (line 2750)
        result_mod_278842 = python_operator(stypy.reporting.localization.Localization(__file__, 2750, 29), '%', unicode_278838, tuple_278839)
        
        # Processing the call keyword arguments (line 2750)
        kwargs_278843 = {}
        # Getting the type of 'ValueError' (line 2750)
        ValueError_278837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2750, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2750)
        ValueError_call_result_278844 = invoke(stypy.reporting.localization.Localization(__file__, 2750, 18), ValueError_278837, *[result_mod_278842], **kwargs_278843)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2750, 12), ValueError_call_result_278844, 'raise parameter', BaseException)
        # SSA join for if statement (line 2749)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 2754)
        tuple_278845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2754, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2754)
        # Adding element type (line 2754)
        # Getting the type of 'str_func' (line 2754)
        str_func_278846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2754, 15), 'str_func')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2754, 15), tuple_278845, str_func_278846)
        # Adding element type (line 2754)
        # Getting the type of 'params' (line 2754)
        params_278847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2754, 25), 'params')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2754, 15), tuple_278845, params_278847)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2754)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2754, 8), 'stypy_return_type', tuple_278845)
        
        # ################# End of '_get_key_params(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_key_params' in the type store
        # Getting the type of 'stypy_return_type' (line 2725)
        stypy_return_type_278848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2725, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_278848)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_key_params'
        return stypy_return_type_278848


# Assigning a type to the variable '_StringFuncParser' (line 2595)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2595, 0), '_StringFuncParser', _StringFuncParser)

# Assigning a Dict to a Name (line 2603):

# Obtaining an instance of the builtin type 'dict' (line 2603)
dict_278849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2603, 13), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 2603)

# Getting the type of '_StringFuncParser'
_StringFuncParser_278850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_StringFuncParser')
# Setting the type of the member '_funcs' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _StringFuncParser_278850, '_funcs', dict_278849)

# Assigning a Call to a Subscript (line 2604):

# Call to _FuncInfo(...): (line 2604)
# Processing the call arguments (line 2604)

@norecursion
def _stypy_temp_lambda_121(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_121'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_121', 2604, 33, True)
    # Passed parameters checking function
    _stypy_temp_lambda_121.stypy_localization = localization
    _stypy_temp_lambda_121.stypy_type_of_self = None
    _stypy_temp_lambda_121.stypy_type_store = module_type_store
    _stypy_temp_lambda_121.stypy_function_name = '_stypy_temp_lambda_121'
    _stypy_temp_lambda_121.stypy_param_names_list = ['x']
    _stypy_temp_lambda_121.stypy_varargs_param_name = None
    _stypy_temp_lambda_121.stypy_kwargs_param_name = None
    _stypy_temp_lambda_121.stypy_call_defaults = defaults
    _stypy_temp_lambda_121.stypy_call_varargs = varargs
    _stypy_temp_lambda_121.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_121', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_121', ['x'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    # Getting the type of 'x' (line 2604)
    x_278852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2604, 43), 'x', False)
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 2604)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2604, 33), 'stypy_return_type', x_278852)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_121' in the type store
    # Getting the type of 'stypy_return_type' (line 2604)
    stypy_return_type_278853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2604, 33), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_278853)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_121'
    return stypy_return_type_278853

# Assigning a type to the variable '_stypy_temp_lambda_121' (line 2604)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2604, 33), '_stypy_temp_lambda_121', _stypy_temp_lambda_121)
# Getting the type of '_stypy_temp_lambda_121' (line 2604)
_stypy_temp_lambda_121_278854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2604, 33), '_stypy_temp_lambda_121')

@norecursion
def _stypy_temp_lambda_122(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_122'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_122', 2605, 33, True)
    # Passed parameters checking function
    _stypy_temp_lambda_122.stypy_localization = localization
    _stypy_temp_lambda_122.stypy_type_of_self = None
    _stypy_temp_lambda_122.stypy_type_store = module_type_store
    _stypy_temp_lambda_122.stypy_function_name = '_stypy_temp_lambda_122'
    _stypy_temp_lambda_122.stypy_param_names_list = ['x']
    _stypy_temp_lambda_122.stypy_varargs_param_name = None
    _stypy_temp_lambda_122.stypy_kwargs_param_name = None
    _stypy_temp_lambda_122.stypy_call_defaults = defaults
    _stypy_temp_lambda_122.stypy_call_varargs = varargs
    _stypy_temp_lambda_122.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_122', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_122', ['x'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    # Getting the type of 'x' (line 2605)
    x_278855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2605, 43), 'x', False)
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 2605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2605, 33), 'stypy_return_type', x_278855)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_122' in the type store
    # Getting the type of 'stypy_return_type' (line 2605)
    stypy_return_type_278856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2605, 33), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_278856)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_122'
    return stypy_return_type_278856

# Assigning a type to the variable '_stypy_temp_lambda_122' (line 2605)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2605, 33), '_stypy_temp_lambda_122', _stypy_temp_lambda_122)
# Getting the type of '_stypy_temp_lambda_122' (line 2605)
_stypy_temp_lambda_122_278857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2605, 33), '_stypy_temp_lambda_122')
# Getting the type of 'True' (line 2606)
True_278858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2606, 33), 'True', False)
# Processing the call keyword arguments (line 2604)
kwargs_278859 = {}
# Getting the type of '_FuncInfo' (line 2604)
_FuncInfo_278851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2604, 23), '_FuncInfo', False)
# Calling _FuncInfo(args, kwargs) (line 2604)
_FuncInfo_call_result_278860 = invoke(stypy.reporting.localization.Localization(__file__, 2604, 23), _FuncInfo_278851, *[_stypy_temp_lambda_121_278854, _stypy_temp_lambda_122_278857, True_278858], **kwargs_278859)

# Getting the type of '_StringFuncParser'
_StringFuncParser_278861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_StringFuncParser')
# Setting the type of the member '_funcs' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _StringFuncParser_278861, '_funcs', _FuncInfo_call_result_278860)

# Assigning a Call to a Subscript (line 2607):

# Call to _FuncInfo(...): (line 2607)
# Processing the call arguments (line 2607)
# Getting the type of 'np' (line 2607)
np_278863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2607, 36), 'np', False)
# Obtaining the member 'square' of a type (line 2607)
square_278864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2607, 36), np_278863, 'square')
# Getting the type of 'np' (line 2608)
np_278865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 36), 'np', False)
# Obtaining the member 'sqrt' of a type (line 2608)
sqrt_278866 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2608, 36), np_278865, 'sqrt')
# Getting the type of 'True' (line 2609)
True_278867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2609, 36), 'True', False)
# Processing the call keyword arguments (line 2607)
kwargs_278868 = {}
# Getting the type of '_FuncInfo' (line 2607)
_FuncInfo_278862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2607, 26), '_FuncInfo', False)
# Calling _FuncInfo(args, kwargs) (line 2607)
_FuncInfo_call_result_278869 = invoke(stypy.reporting.localization.Localization(__file__, 2607, 26), _FuncInfo_278862, *[square_278864, sqrt_278866, True_278867], **kwargs_278868)

# Getting the type of '_StringFuncParser'
_StringFuncParser_278870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_StringFuncParser')
# Setting the type of the member '_funcs' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _StringFuncParser_278870, '_funcs', _FuncInfo_call_result_278869)

# Assigning a Call to a Subscript (line 2610):

# Call to _FuncInfo(...): (line 2610)
# Processing the call arguments (line 2610)

@norecursion
def _stypy_temp_lambda_123(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_123'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_123', 2610, 32, True)
    # Passed parameters checking function
    _stypy_temp_lambda_123.stypy_localization = localization
    _stypy_temp_lambda_123.stypy_type_of_self = None
    _stypy_temp_lambda_123.stypy_type_store = module_type_store
    _stypy_temp_lambda_123.stypy_function_name = '_stypy_temp_lambda_123'
    _stypy_temp_lambda_123.stypy_param_names_list = ['x']
    _stypy_temp_lambda_123.stypy_varargs_param_name = None
    _stypy_temp_lambda_123.stypy_kwargs_param_name = None
    _stypy_temp_lambda_123.stypy_call_defaults = defaults
    _stypy_temp_lambda_123.stypy_call_varargs = varargs
    _stypy_temp_lambda_123.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_123', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_123', ['x'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    # Getting the type of 'x' (line 2610)
    x_278872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2610, 42), 'x', False)
    int_278873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2610, 45), 'int')
    # Applying the binary operator '**' (line 2610)
    result_pow_278874 = python_operator(stypy.reporting.localization.Localization(__file__, 2610, 42), '**', x_278872, int_278873)
    
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 2610)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2610, 32), 'stypy_return_type', result_pow_278874)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_123' in the type store
    # Getting the type of 'stypy_return_type' (line 2610)
    stypy_return_type_278875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2610, 32), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_278875)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_123'
    return stypy_return_type_278875

# Assigning a type to the variable '_stypy_temp_lambda_123' (line 2610)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2610, 32), '_stypy_temp_lambda_123', _stypy_temp_lambda_123)
# Getting the type of '_stypy_temp_lambda_123' (line 2610)
_stypy_temp_lambda_123_278876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2610, 32), '_stypy_temp_lambda_123')

@norecursion
def _stypy_temp_lambda_124(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_124'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_124', 2611, 32, True)
    # Passed parameters checking function
    _stypy_temp_lambda_124.stypy_localization = localization
    _stypy_temp_lambda_124.stypy_type_of_self = None
    _stypy_temp_lambda_124.stypy_type_store = module_type_store
    _stypy_temp_lambda_124.stypy_function_name = '_stypy_temp_lambda_124'
    _stypy_temp_lambda_124.stypy_param_names_list = ['x']
    _stypy_temp_lambda_124.stypy_varargs_param_name = None
    _stypy_temp_lambda_124.stypy_kwargs_param_name = None
    _stypy_temp_lambda_124.stypy_call_defaults = defaults
    _stypy_temp_lambda_124.stypy_call_varargs = varargs
    _stypy_temp_lambda_124.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_124', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_124', ['x'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    # Getting the type of 'x' (line 2611)
    x_278877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2611, 42), 'x', False)
    float_278878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2611, 46), 'float')
    int_278879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2611, 51), 'int')
    # Applying the binary operator 'div' (line 2611)
    result_div_278880 = python_operator(stypy.reporting.localization.Localization(__file__, 2611, 46), 'div', float_278878, int_278879)
    
    # Applying the binary operator '**' (line 2611)
    result_pow_278881 = python_operator(stypy.reporting.localization.Localization(__file__, 2611, 42), '**', x_278877, result_div_278880)
    
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 2611)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2611, 32), 'stypy_return_type', result_pow_278881)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_124' in the type store
    # Getting the type of 'stypy_return_type' (line 2611)
    stypy_return_type_278882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2611, 32), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_278882)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_124'
    return stypy_return_type_278882

# Assigning a type to the variable '_stypy_temp_lambda_124' (line 2611)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2611, 32), '_stypy_temp_lambda_124', _stypy_temp_lambda_124)
# Getting the type of '_stypy_temp_lambda_124' (line 2611)
_stypy_temp_lambda_124_278883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2611, 32), '_stypy_temp_lambda_124')
# Getting the type of 'True' (line 2612)
True_278884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2612, 32), 'True', False)
# Processing the call keyword arguments (line 2610)
kwargs_278885 = {}
# Getting the type of '_FuncInfo' (line 2610)
_FuncInfo_278871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2610, 22), '_FuncInfo', False)
# Calling _FuncInfo(args, kwargs) (line 2610)
_FuncInfo_call_result_278886 = invoke(stypy.reporting.localization.Localization(__file__, 2610, 22), _FuncInfo_278871, *[_stypy_temp_lambda_123_278876, _stypy_temp_lambda_124_278883, True_278884], **kwargs_278885)

# Getting the type of '_StringFuncParser'
_StringFuncParser_278887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_StringFuncParser')
# Setting the type of the member '_funcs' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _StringFuncParser_278887, '_funcs', _FuncInfo_call_result_278886)

# Assigning a Call to a Subscript (line 2613):

# Call to _FuncInfo(...): (line 2613)
# Processing the call arguments (line 2613)
# Getting the type of 'np' (line 2613)
np_278889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2613, 31), 'np', False)
# Obtaining the member 'sqrt' of a type (line 2613)
sqrt_278890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2613, 31), np_278889, 'sqrt')
# Getting the type of 'np' (line 2614)
np_278891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2614, 31), 'np', False)
# Obtaining the member 'square' of a type (line 2614)
square_278892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2614, 31), np_278891, 'square')
# Getting the type of 'True' (line 2615)
True_278893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2615, 31), 'True', False)
# Processing the call keyword arguments (line 2613)
kwargs_278894 = {}
# Getting the type of '_FuncInfo' (line 2613)
_FuncInfo_278888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2613, 21), '_FuncInfo', False)
# Calling _FuncInfo(args, kwargs) (line 2613)
_FuncInfo_call_result_278895 = invoke(stypy.reporting.localization.Localization(__file__, 2613, 21), _FuncInfo_278888, *[sqrt_278890, square_278892, True_278893], **kwargs_278894)

# Getting the type of '_StringFuncParser'
_StringFuncParser_278896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_StringFuncParser')
# Setting the type of the member '_funcs' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _StringFuncParser_278896, '_funcs', _FuncInfo_call_result_278895)

# Assigning a Call to a Subscript (line 2616):

# Call to _FuncInfo(...): (line 2616)
# Processing the call arguments (line 2616)

@norecursion
def _stypy_temp_lambda_125(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_125'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_125', 2616, 31, True)
    # Passed parameters checking function
    _stypy_temp_lambda_125.stypy_localization = localization
    _stypy_temp_lambda_125.stypy_type_of_self = None
    _stypy_temp_lambda_125.stypy_type_store = module_type_store
    _stypy_temp_lambda_125.stypy_function_name = '_stypy_temp_lambda_125'
    _stypy_temp_lambda_125.stypy_param_names_list = ['x']
    _stypy_temp_lambda_125.stypy_varargs_param_name = None
    _stypy_temp_lambda_125.stypy_kwargs_param_name = None
    _stypy_temp_lambda_125.stypy_call_defaults = defaults
    _stypy_temp_lambda_125.stypy_call_varargs = varargs
    _stypy_temp_lambda_125.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_125', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_125', ['x'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    # Getting the type of 'x' (line 2616)
    x_278898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2616, 41), 'x', False)
    float_278899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2616, 45), 'float')
    int_278900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2616, 50), 'int')
    # Applying the binary operator 'div' (line 2616)
    result_div_278901 = python_operator(stypy.reporting.localization.Localization(__file__, 2616, 45), 'div', float_278899, int_278900)
    
    # Applying the binary operator '**' (line 2616)
    result_pow_278902 = python_operator(stypy.reporting.localization.Localization(__file__, 2616, 41), '**', x_278898, result_div_278901)
    
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 2616)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2616, 31), 'stypy_return_type', result_pow_278902)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_125' in the type store
    # Getting the type of 'stypy_return_type' (line 2616)
    stypy_return_type_278903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2616, 31), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_278903)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_125'
    return stypy_return_type_278903

# Assigning a type to the variable '_stypy_temp_lambda_125' (line 2616)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2616, 31), '_stypy_temp_lambda_125', _stypy_temp_lambda_125)
# Getting the type of '_stypy_temp_lambda_125' (line 2616)
_stypy_temp_lambda_125_278904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2616, 31), '_stypy_temp_lambda_125')

@norecursion
def _stypy_temp_lambda_126(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_126'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_126', 2617, 31, True)
    # Passed parameters checking function
    _stypy_temp_lambda_126.stypy_localization = localization
    _stypy_temp_lambda_126.stypy_type_of_self = None
    _stypy_temp_lambda_126.stypy_type_store = module_type_store
    _stypy_temp_lambda_126.stypy_function_name = '_stypy_temp_lambda_126'
    _stypy_temp_lambda_126.stypy_param_names_list = ['x']
    _stypy_temp_lambda_126.stypy_varargs_param_name = None
    _stypy_temp_lambda_126.stypy_kwargs_param_name = None
    _stypy_temp_lambda_126.stypy_call_defaults = defaults
    _stypy_temp_lambda_126.stypy_call_varargs = varargs
    _stypy_temp_lambda_126.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_126', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_126', ['x'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    # Getting the type of 'x' (line 2617)
    x_278905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2617, 41), 'x', False)
    int_278906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2617, 44), 'int')
    # Applying the binary operator '**' (line 2617)
    result_pow_278907 = python_operator(stypy.reporting.localization.Localization(__file__, 2617, 41), '**', x_278905, int_278906)
    
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 2617)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2617, 31), 'stypy_return_type', result_pow_278907)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_126' in the type store
    # Getting the type of 'stypy_return_type' (line 2617)
    stypy_return_type_278908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2617, 31), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_278908)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_126'
    return stypy_return_type_278908

# Assigning a type to the variable '_stypy_temp_lambda_126' (line 2617)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2617, 31), '_stypy_temp_lambda_126', _stypy_temp_lambda_126)
# Getting the type of '_stypy_temp_lambda_126' (line 2617)
_stypy_temp_lambda_126_278909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2617, 31), '_stypy_temp_lambda_126')
# Getting the type of 'True' (line 2618)
True_278910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2618, 31), 'True', False)
# Processing the call keyword arguments (line 2616)
kwargs_278911 = {}
# Getting the type of '_FuncInfo' (line 2616)
_FuncInfo_278897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2616, 21), '_FuncInfo', False)
# Calling _FuncInfo(args, kwargs) (line 2616)
_FuncInfo_call_result_278912 = invoke(stypy.reporting.localization.Localization(__file__, 2616, 21), _FuncInfo_278897, *[_stypy_temp_lambda_125_278904, _stypy_temp_lambda_126_278909, True_278910], **kwargs_278911)

# Getting the type of '_StringFuncParser'
_StringFuncParser_278913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_StringFuncParser')
# Setting the type of the member '_funcs' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _StringFuncParser_278913, '_funcs', _FuncInfo_call_result_278912)

# Assigning a Call to a Subscript (line 2619):

# Call to _FuncInfo(...): (line 2619)
# Processing the call arguments (line 2619)
# Getting the type of 'np' (line 2619)
np_278915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2619, 32), 'np', False)
# Obtaining the member 'log10' of a type (line 2619)
log10_278916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2619, 32), np_278915, 'log10')

@norecursion
def _stypy_temp_lambda_127(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_127'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_127', 2620, 32, True)
    # Passed parameters checking function
    _stypy_temp_lambda_127.stypy_localization = localization
    _stypy_temp_lambda_127.stypy_type_of_self = None
    _stypy_temp_lambda_127.stypy_type_store = module_type_store
    _stypy_temp_lambda_127.stypy_function_name = '_stypy_temp_lambda_127'
    _stypy_temp_lambda_127.stypy_param_names_list = ['x']
    _stypy_temp_lambda_127.stypy_varargs_param_name = None
    _stypy_temp_lambda_127.stypy_kwargs_param_name = None
    _stypy_temp_lambda_127.stypy_call_defaults = defaults
    _stypy_temp_lambda_127.stypy_call_varargs = varargs
    _stypy_temp_lambda_127.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_127', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_127', ['x'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    int_278917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2620, 43), 'int')
    # Getting the type of 'x' (line 2620)
    x_278918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2620, 48), 'x', False)
    # Applying the binary operator '**' (line 2620)
    result_pow_278919 = python_operator(stypy.reporting.localization.Localization(__file__, 2620, 43), '**', int_278917, x_278918)
    
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 2620)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2620, 32), 'stypy_return_type', result_pow_278919)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_127' in the type store
    # Getting the type of 'stypy_return_type' (line 2620)
    stypy_return_type_278920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2620, 32), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_278920)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_127'
    return stypy_return_type_278920

# Assigning a type to the variable '_stypy_temp_lambda_127' (line 2620)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2620, 32), '_stypy_temp_lambda_127', _stypy_temp_lambda_127)
# Getting the type of '_stypy_temp_lambda_127' (line 2620)
_stypy_temp_lambda_127_278921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2620, 32), '_stypy_temp_lambda_127')
# Getting the type of 'False' (line 2621)
False_278922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2621, 32), 'False', False)
# Processing the call keyword arguments (line 2619)
kwargs_278923 = {}
# Getting the type of '_FuncInfo' (line 2619)
_FuncInfo_278914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2619, 22), '_FuncInfo', False)
# Calling _FuncInfo(args, kwargs) (line 2619)
_FuncInfo_call_result_278924 = invoke(stypy.reporting.localization.Localization(__file__, 2619, 22), _FuncInfo_278914, *[log10_278916, _stypy_temp_lambda_127_278921, False_278922], **kwargs_278923)

# Getting the type of '_StringFuncParser'
_StringFuncParser_278925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_StringFuncParser')
# Setting the type of the member '_funcs' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _StringFuncParser_278925, '_funcs', _FuncInfo_call_result_278924)

# Assigning a Call to a Subscript (line 2622):

# Call to _FuncInfo(...): (line 2622)
# Processing the call arguments (line 2622)
# Getting the type of 'np' (line 2622)
np_278927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2622, 30), 'np', False)
# Obtaining the member 'log' of a type (line 2622)
log_278928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2622, 30), np_278927, 'log')
# Getting the type of 'np' (line 2623)
np_278929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2623, 30), 'np', False)
# Obtaining the member 'exp' of a type (line 2623)
exp_278930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2623, 30), np_278929, 'exp')
# Getting the type of 'False' (line 2624)
False_278931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2624, 30), 'False', False)
# Processing the call keyword arguments (line 2622)
kwargs_278932 = {}
# Getting the type of '_FuncInfo' (line 2622)
_FuncInfo_278926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2622, 20), '_FuncInfo', False)
# Calling _FuncInfo(args, kwargs) (line 2622)
_FuncInfo_call_result_278933 = invoke(stypy.reporting.localization.Localization(__file__, 2622, 20), _FuncInfo_278926, *[log_278928, exp_278930, False_278931], **kwargs_278932)

# Getting the type of '_StringFuncParser'
_StringFuncParser_278934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_StringFuncParser')
# Setting the type of the member '_funcs' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _StringFuncParser_278934, '_funcs', _FuncInfo_call_result_278933)

# Assigning a Call to a Subscript (line 2625):

# Call to _FuncInfo(...): (line 2625)
# Processing the call arguments (line 2625)
# Getting the type of 'np' (line 2625)
np_278936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2625, 31), 'np', False)
# Obtaining the member 'log2' of a type (line 2625)
log2_278937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2625, 31), np_278936, 'log2')

@norecursion
def _stypy_temp_lambda_128(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_128'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_128', 2626, 31, True)
    # Passed parameters checking function
    _stypy_temp_lambda_128.stypy_localization = localization
    _stypy_temp_lambda_128.stypy_type_of_self = None
    _stypy_temp_lambda_128.stypy_type_store = module_type_store
    _stypy_temp_lambda_128.stypy_function_name = '_stypy_temp_lambda_128'
    _stypy_temp_lambda_128.stypy_param_names_list = ['x']
    _stypy_temp_lambda_128.stypy_varargs_param_name = None
    _stypy_temp_lambda_128.stypy_kwargs_param_name = None
    _stypy_temp_lambda_128.stypy_call_defaults = defaults
    _stypy_temp_lambda_128.stypy_call_varargs = varargs
    _stypy_temp_lambda_128.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_128', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_128', ['x'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    int_278938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2626, 42), 'int')
    # Getting the type of 'x' (line 2626)
    x_278939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2626, 45), 'x', False)
    # Applying the binary operator '**' (line 2626)
    result_pow_278940 = python_operator(stypy.reporting.localization.Localization(__file__, 2626, 42), '**', int_278938, x_278939)
    
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 2626)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2626, 31), 'stypy_return_type', result_pow_278940)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_128' in the type store
    # Getting the type of 'stypy_return_type' (line 2626)
    stypy_return_type_278941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2626, 31), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_278941)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_128'
    return stypy_return_type_278941

# Assigning a type to the variable '_stypy_temp_lambda_128' (line 2626)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2626, 31), '_stypy_temp_lambda_128', _stypy_temp_lambda_128)
# Getting the type of '_stypy_temp_lambda_128' (line 2626)
_stypy_temp_lambda_128_278942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2626, 31), '_stypy_temp_lambda_128')
# Getting the type of 'False' (line 2627)
False_278943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2627, 31), 'False', False)
# Processing the call keyword arguments (line 2625)
kwargs_278944 = {}
# Getting the type of '_FuncInfo' (line 2625)
_FuncInfo_278935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2625, 21), '_FuncInfo', False)
# Calling _FuncInfo(args, kwargs) (line 2625)
_FuncInfo_call_result_278945 = invoke(stypy.reporting.localization.Localization(__file__, 2625, 21), _FuncInfo_278935, *[log2_278937, _stypy_temp_lambda_128_278942, False_278943], **kwargs_278944)

# Getting the type of '_StringFuncParser'
_StringFuncParser_278946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_StringFuncParser')
# Setting the type of the member '_funcs' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _StringFuncParser_278946, '_funcs', _FuncInfo_call_result_278945)

# Assigning a Call to a Subscript (line 2628):

# Call to _FuncInfo(...): (line 2628)
# Processing the call arguments (line 2628)

@norecursion
def _stypy_temp_lambda_129(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_129'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_129', 2628, 33, True)
    # Passed parameters checking function
    _stypy_temp_lambda_129.stypy_localization = localization
    _stypy_temp_lambda_129.stypy_type_of_self = None
    _stypy_temp_lambda_129.stypy_type_store = module_type_store
    _stypy_temp_lambda_129.stypy_function_name = '_stypy_temp_lambda_129'
    _stypy_temp_lambda_129.stypy_param_names_list = ['x', 'p']
    _stypy_temp_lambda_129.stypy_varargs_param_name = None
    _stypy_temp_lambda_129.stypy_kwargs_param_name = None
    _stypy_temp_lambda_129.stypy_call_defaults = defaults
    _stypy_temp_lambda_129.stypy_call_varargs = varargs
    _stypy_temp_lambda_129.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_129', ['x', 'p'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_129', ['x', 'p'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    # Getting the type of 'x' (line 2628)
    x_278948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2628, 46), 'x', False)
    
    # Obtaining the type of the subscript
    int_278949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2628, 51), 'int')
    # Getting the type of 'p' (line 2628)
    p_278950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2628, 49), 'p', False)
    # Obtaining the member '__getitem__' of a type (line 2628)
    getitem___278951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2628, 49), p_278950, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2628)
    subscript_call_result_278952 = invoke(stypy.reporting.localization.Localization(__file__, 2628, 49), getitem___278951, int_278949)
    
    # Applying the binary operator '**' (line 2628)
    result_pow_278953 = python_operator(stypy.reporting.localization.Localization(__file__, 2628, 46), '**', x_278948, subscript_call_result_278952)
    
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 2628)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2628, 33), 'stypy_return_type', result_pow_278953)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_129' in the type store
    # Getting the type of 'stypy_return_type' (line 2628)
    stypy_return_type_278954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2628, 33), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_278954)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_129'
    return stypy_return_type_278954

# Assigning a type to the variable '_stypy_temp_lambda_129' (line 2628)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2628, 33), '_stypy_temp_lambda_129', _stypy_temp_lambda_129)
# Getting the type of '_stypy_temp_lambda_129' (line 2628)
_stypy_temp_lambda_129_278955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2628, 33), '_stypy_temp_lambda_129')

@norecursion
def _stypy_temp_lambda_130(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_130'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_130', 2629, 33, True)
    # Passed parameters checking function
    _stypy_temp_lambda_130.stypy_localization = localization
    _stypy_temp_lambda_130.stypy_type_of_self = None
    _stypy_temp_lambda_130.stypy_type_store = module_type_store
    _stypy_temp_lambda_130.stypy_function_name = '_stypy_temp_lambda_130'
    _stypy_temp_lambda_130.stypy_param_names_list = ['x', 'p']
    _stypy_temp_lambda_130.stypy_varargs_param_name = None
    _stypy_temp_lambda_130.stypy_kwargs_param_name = None
    _stypy_temp_lambda_130.stypy_call_defaults = defaults
    _stypy_temp_lambda_130.stypy_call_varargs = varargs
    _stypy_temp_lambda_130.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_130', ['x', 'p'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_130', ['x', 'p'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    # Getting the type of 'x' (line 2629)
    x_278956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2629, 46), 'x', False)
    float_278957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2629, 50), 'float')
    
    # Obtaining the type of the subscript
    int_278958 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2629, 57), 'int')
    # Getting the type of 'p' (line 2629)
    p_278959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2629, 55), 'p', False)
    # Obtaining the member '__getitem__' of a type (line 2629)
    getitem___278960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2629, 55), p_278959, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2629)
    subscript_call_result_278961 = invoke(stypy.reporting.localization.Localization(__file__, 2629, 55), getitem___278960, int_278958)
    
    # Applying the binary operator 'div' (line 2629)
    result_div_278962 = python_operator(stypy.reporting.localization.Localization(__file__, 2629, 50), 'div', float_278957, subscript_call_result_278961)
    
    # Applying the binary operator '**' (line 2629)
    result_pow_278963 = python_operator(stypy.reporting.localization.Localization(__file__, 2629, 46), '**', x_278956, result_div_278962)
    
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 2629)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2629, 33), 'stypy_return_type', result_pow_278963)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_130' in the type store
    # Getting the type of 'stypy_return_type' (line 2629)
    stypy_return_type_278964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2629, 33), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_278964)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_130'
    return stypy_return_type_278964

# Assigning a type to the variable '_stypy_temp_lambda_130' (line 2629)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2629, 33), '_stypy_temp_lambda_130', _stypy_temp_lambda_130)
# Getting the type of '_stypy_temp_lambda_130' (line 2629)
_stypy_temp_lambda_130_278965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2629, 33), '_stypy_temp_lambda_130')
# Getting the type of 'True' (line 2630)
True_278966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2630, 33), 'True', False)
# Processing the call keyword arguments (line 2628)
kwargs_278967 = {}
# Getting the type of '_FuncInfo' (line 2628)
_FuncInfo_278947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2628, 23), '_FuncInfo', False)
# Calling _FuncInfo(args, kwargs) (line 2628)
_FuncInfo_call_result_278968 = invoke(stypy.reporting.localization.Localization(__file__, 2628, 23), _FuncInfo_278947, *[_stypy_temp_lambda_129_278955, _stypy_temp_lambda_130_278965, True_278966], **kwargs_278967)

# Getting the type of '_StringFuncParser'
_StringFuncParser_278969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_StringFuncParser')
# Setting the type of the member '_funcs' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _StringFuncParser_278969, '_funcs', _FuncInfo_call_result_278968)

# Assigning a Call to a Subscript (line 2631):

# Call to _FuncInfo(...): (line 2631)
# Processing the call arguments (line 2631)

@norecursion
def _stypy_temp_lambda_131(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_131'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_131', 2631, 37, True)
    # Passed parameters checking function
    _stypy_temp_lambda_131.stypy_localization = localization
    _stypy_temp_lambda_131.stypy_type_of_self = None
    _stypy_temp_lambda_131.stypy_type_store = module_type_store
    _stypy_temp_lambda_131.stypy_function_name = '_stypy_temp_lambda_131'
    _stypy_temp_lambda_131.stypy_param_names_list = ['x', 'p']
    _stypy_temp_lambda_131.stypy_varargs_param_name = None
    _stypy_temp_lambda_131.stypy_kwargs_param_name = None
    _stypy_temp_lambda_131.stypy_call_defaults = defaults
    _stypy_temp_lambda_131.stypy_call_varargs = varargs
    _stypy_temp_lambda_131.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_131', ['x', 'p'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_131', ['x', 'p'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    # Getting the type of 'x' (line 2631)
    x_278971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2631, 50), 'x', False)
    float_278972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2631, 54), 'float')
    
    # Obtaining the type of the subscript
    int_278973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2631, 61), 'int')
    # Getting the type of 'p' (line 2631)
    p_278974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2631, 59), 'p', False)
    # Obtaining the member '__getitem__' of a type (line 2631)
    getitem___278975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2631, 59), p_278974, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2631)
    subscript_call_result_278976 = invoke(stypy.reporting.localization.Localization(__file__, 2631, 59), getitem___278975, int_278973)
    
    # Applying the binary operator 'div' (line 2631)
    result_div_278977 = python_operator(stypy.reporting.localization.Localization(__file__, 2631, 54), 'div', float_278972, subscript_call_result_278976)
    
    # Applying the binary operator '**' (line 2631)
    result_pow_278978 = python_operator(stypy.reporting.localization.Localization(__file__, 2631, 50), '**', x_278971, result_div_278977)
    
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 2631)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2631, 37), 'stypy_return_type', result_pow_278978)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_131' in the type store
    # Getting the type of 'stypy_return_type' (line 2631)
    stypy_return_type_278979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2631, 37), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_278979)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_131'
    return stypy_return_type_278979

# Assigning a type to the variable '_stypy_temp_lambda_131' (line 2631)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2631, 37), '_stypy_temp_lambda_131', _stypy_temp_lambda_131)
# Getting the type of '_stypy_temp_lambda_131' (line 2631)
_stypy_temp_lambda_131_278980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2631, 37), '_stypy_temp_lambda_131')

@norecursion
def _stypy_temp_lambda_132(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_132'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_132', 2632, 37, True)
    # Passed parameters checking function
    _stypy_temp_lambda_132.stypy_localization = localization
    _stypy_temp_lambda_132.stypy_type_of_self = None
    _stypy_temp_lambda_132.stypy_type_store = module_type_store
    _stypy_temp_lambda_132.stypy_function_name = '_stypy_temp_lambda_132'
    _stypy_temp_lambda_132.stypy_param_names_list = ['x', 'p']
    _stypy_temp_lambda_132.stypy_varargs_param_name = None
    _stypy_temp_lambda_132.stypy_kwargs_param_name = None
    _stypy_temp_lambda_132.stypy_call_defaults = defaults
    _stypy_temp_lambda_132.stypy_call_varargs = varargs
    _stypy_temp_lambda_132.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_132', ['x', 'p'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_132', ['x', 'p'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    # Getting the type of 'x' (line 2632)
    x_278981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2632, 50), 'x', False)
    # Getting the type of 'p' (line 2632)
    p_278982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2632, 53), 'p', False)
    # Applying the binary operator '**' (line 2632)
    result_pow_278983 = python_operator(stypy.reporting.localization.Localization(__file__, 2632, 50), '**', x_278981, p_278982)
    
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 2632)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2632, 37), 'stypy_return_type', result_pow_278983)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_132' in the type store
    # Getting the type of 'stypy_return_type' (line 2632)
    stypy_return_type_278984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2632, 37), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_278984)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_132'
    return stypy_return_type_278984

# Assigning a type to the variable '_stypy_temp_lambda_132' (line 2632)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2632, 37), '_stypy_temp_lambda_132', _stypy_temp_lambda_132)
# Getting the type of '_stypy_temp_lambda_132' (line 2632)
_stypy_temp_lambda_132_278985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2632, 37), '_stypy_temp_lambda_132')
# Getting the type of 'True' (line 2633)
True_278986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2633, 37), 'True', False)
# Processing the call keyword arguments (line 2631)
kwargs_278987 = {}
# Getting the type of '_FuncInfo' (line 2631)
_FuncInfo_278970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2631, 27), '_FuncInfo', False)
# Calling _FuncInfo(args, kwargs) (line 2631)
_FuncInfo_call_result_278988 = invoke(stypy.reporting.localization.Localization(__file__, 2631, 27), _FuncInfo_278970, *[_stypy_temp_lambda_131_278980, _stypy_temp_lambda_132_278985, True_278986], **kwargs_278987)

# Getting the type of '_StringFuncParser'
_StringFuncParser_278989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_StringFuncParser')
# Setting the type of the member '_funcs' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _StringFuncParser_278989, '_funcs', _FuncInfo_call_result_278988)

# Assigning a Call to a Subscript (line 2634):

# Call to _FuncInfo(...): (line 2634)
# Processing the call arguments (line 2634)

@norecursion
def _stypy_temp_lambda_133(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_133'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_133', 2634, 36, True)
    # Passed parameters checking function
    _stypy_temp_lambda_133.stypy_localization = localization
    _stypy_temp_lambda_133.stypy_type_of_self = None
    _stypy_temp_lambda_133.stypy_type_store = module_type_store
    _stypy_temp_lambda_133.stypy_function_name = '_stypy_temp_lambda_133'
    _stypy_temp_lambda_133.stypy_param_names_list = ['x', 'p']
    _stypy_temp_lambda_133.stypy_varargs_param_name = None
    _stypy_temp_lambda_133.stypy_kwargs_param_name = None
    _stypy_temp_lambda_133.stypy_call_defaults = defaults
    _stypy_temp_lambda_133.stypy_call_varargs = varargs
    _stypy_temp_lambda_133.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_133', ['x', 'p'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_133', ['x', 'p'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    
    # Call to log(...): (line 2634)
    # Processing the call arguments (line 2634)
    # Getting the type of 'x' (line 2634)
    x_278993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2634, 57), 'x', False)
    # Processing the call keyword arguments (line 2634)
    kwargs_278994 = {}
    # Getting the type of 'np' (line 2634)
    np_278991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2634, 50), 'np', False)
    # Obtaining the member 'log' of a type (line 2634)
    log_278992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2634, 50), np_278991, 'log')
    # Calling log(args, kwargs) (line 2634)
    log_call_result_278995 = invoke(stypy.reporting.localization.Localization(__file__, 2634, 50), log_278992, *[x_278993], **kwargs_278994)
    
    
    # Call to log(...): (line 2635)
    # Processing the call arguments (line 2635)
    
    # Obtaining the type of the subscript
    int_278998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2635, 59), 'int')
    # Getting the type of 'p' (line 2635)
    p_278999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2635, 57), 'p', False)
    # Obtaining the member '__getitem__' of a type (line 2635)
    getitem___279000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2635, 57), p_278999, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2635)
    subscript_call_result_279001 = invoke(stypy.reporting.localization.Localization(__file__, 2635, 57), getitem___279000, int_278998)
    
    # Processing the call keyword arguments (line 2635)
    kwargs_279002 = {}
    # Getting the type of 'np' (line 2635)
    np_278996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2635, 50), 'np', False)
    # Obtaining the member 'log' of a type (line 2635)
    log_278997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2635, 50), np_278996, 'log')
    # Calling log(args, kwargs) (line 2635)
    log_call_result_279003 = invoke(stypy.reporting.localization.Localization(__file__, 2635, 50), log_278997, *[subscript_call_result_279001], **kwargs_279002)
    
    # Applying the binary operator 'div' (line 2634)
    result_div_279004 = python_operator(stypy.reporting.localization.Localization(__file__, 2634, 50), 'div', log_call_result_278995, log_call_result_279003)
    
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 2634)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2634, 36), 'stypy_return_type', result_div_279004)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_133' in the type store
    # Getting the type of 'stypy_return_type' (line 2634)
    stypy_return_type_279005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2634, 36), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_279005)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_133'
    return stypy_return_type_279005

# Assigning a type to the variable '_stypy_temp_lambda_133' (line 2634)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2634, 36), '_stypy_temp_lambda_133', _stypy_temp_lambda_133)
# Getting the type of '_stypy_temp_lambda_133' (line 2634)
_stypy_temp_lambda_133_279006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2634, 36), '_stypy_temp_lambda_133')

@norecursion
def _stypy_temp_lambda_134(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_134'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_134', 2636, 36, True)
    # Passed parameters checking function
    _stypy_temp_lambda_134.stypy_localization = localization
    _stypy_temp_lambda_134.stypy_type_of_self = None
    _stypy_temp_lambda_134.stypy_type_store = module_type_store
    _stypy_temp_lambda_134.stypy_function_name = '_stypy_temp_lambda_134'
    _stypy_temp_lambda_134.stypy_param_names_list = ['x', 'p']
    _stypy_temp_lambda_134.stypy_varargs_param_name = None
    _stypy_temp_lambda_134.stypy_kwargs_param_name = None
    _stypy_temp_lambda_134.stypy_call_defaults = defaults
    _stypy_temp_lambda_134.stypy_call_varargs = varargs
    _stypy_temp_lambda_134.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_134', ['x', 'p'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_134', ['x', 'p'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    
    # Obtaining the type of the subscript
    int_279007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2636, 51), 'int')
    # Getting the type of 'p' (line 2636)
    p_279008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 49), 'p', False)
    # Obtaining the member '__getitem__' of a type (line 2636)
    getitem___279009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2636, 49), p_279008, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2636)
    subscript_call_result_279010 = invoke(stypy.reporting.localization.Localization(__file__, 2636, 49), getitem___279009, int_279007)
    
    # Getting the type of 'x' (line 2636)
    x_279011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 56), 'x', False)
    # Applying the binary operator '**' (line 2636)
    result_pow_279012 = python_operator(stypy.reporting.localization.Localization(__file__, 2636, 49), '**', subscript_call_result_279010, x_279011)
    
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 2636)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2636, 36), 'stypy_return_type', result_pow_279012)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_134' in the type store
    # Getting the type of 'stypy_return_type' (line 2636)
    stypy_return_type_279013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 36), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_279013)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_134'
    return stypy_return_type_279013

# Assigning a type to the variable '_stypy_temp_lambda_134' (line 2636)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2636, 36), '_stypy_temp_lambda_134', _stypy_temp_lambda_134)
# Getting the type of '_stypy_temp_lambda_134' (line 2636)
_stypy_temp_lambda_134_279014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 36), '_stypy_temp_lambda_134')
# Getting the type of 'False' (line 2637)
False_279015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2637, 36), 'False', False)

@norecursion
def _stypy_temp_lambda_135(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_135'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_135', 2638, 36, True)
    # Passed parameters checking function
    _stypy_temp_lambda_135.stypy_localization = localization
    _stypy_temp_lambda_135.stypy_type_of_self = None
    _stypy_temp_lambda_135.stypy_type_store = module_type_store
    _stypy_temp_lambda_135.stypy_function_name = '_stypy_temp_lambda_135'
    _stypy_temp_lambda_135.stypy_param_names_list = ['p']
    _stypy_temp_lambda_135.stypy_varargs_param_name = None
    _stypy_temp_lambda_135.stypy_kwargs_param_name = None
    _stypy_temp_lambda_135.stypy_call_defaults = defaults
    _stypy_temp_lambda_135.stypy_call_varargs = varargs
    _stypy_temp_lambda_135.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_135', ['p'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_135', ['p'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    
    
    # Obtaining the type of the subscript
    int_279016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2638, 48), 'int')
    # Getting the type of 'p' (line 2638)
    p_279017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2638, 46), 'p', False)
    # Obtaining the member '__getitem__' of a type (line 2638)
    getitem___279018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2638, 46), p_279017, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2638)
    subscript_call_result_279019 = invoke(stypy.reporting.localization.Localization(__file__, 2638, 46), getitem___279018, int_279016)
    
    int_279020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2638, 53), 'int')
    # Applying the binary operator '>' (line 2638)
    result_gt_279021 = python_operator(stypy.reporting.localization.Localization(__file__, 2638, 46), '>', subscript_call_result_279019, int_279020)
    
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 2638)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2638, 36), 'stypy_return_type', result_gt_279021)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_135' in the type store
    # Getting the type of 'stypy_return_type' (line 2638)
    stypy_return_type_279022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2638, 36), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_279022)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_135'
    return stypy_return_type_279022

# Assigning a type to the variable '_stypy_temp_lambda_135' (line 2638)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2638, 36), '_stypy_temp_lambda_135', _stypy_temp_lambda_135)
# Getting the type of '_stypy_temp_lambda_135' (line 2638)
_stypy_temp_lambda_135_279023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2638, 36), '_stypy_temp_lambda_135')
# Processing the call keyword arguments (line 2634)
kwargs_279024 = {}
# Getting the type of '_FuncInfo' (line 2634)
_FuncInfo_278990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2634, 26), '_FuncInfo', False)
# Calling _FuncInfo(args, kwargs) (line 2634)
_FuncInfo_call_result_279025 = invoke(stypy.reporting.localization.Localization(__file__, 2634, 26), _FuncInfo_278990, *[_stypy_temp_lambda_133_279006, _stypy_temp_lambda_134_279014, False_279015, _stypy_temp_lambda_135_279023], **kwargs_279024)

# Getting the type of '_StringFuncParser'
_StringFuncParser_279026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_StringFuncParser')
# Setting the type of the member '_funcs' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _StringFuncParser_279026, '_funcs', _FuncInfo_call_result_279025)

# Assigning a Call to a Subscript (line 2639):

# Call to _FuncInfo(...): (line 2639)
# Processing the call arguments (line 2639)

@norecursion
def _stypy_temp_lambda_136(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_136'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_136', 2639, 39, True)
    # Passed parameters checking function
    _stypy_temp_lambda_136.stypy_localization = localization
    _stypy_temp_lambda_136.stypy_type_of_self = None
    _stypy_temp_lambda_136.stypy_type_store = module_type_store
    _stypy_temp_lambda_136.stypy_function_name = '_stypy_temp_lambda_136'
    _stypy_temp_lambda_136.stypy_param_names_list = ['x', 'p']
    _stypy_temp_lambda_136.stypy_varargs_param_name = None
    _stypy_temp_lambda_136.stypy_kwargs_param_name = None
    _stypy_temp_lambda_136.stypy_call_defaults = defaults
    _stypy_temp_lambda_136.stypy_call_varargs = varargs
    _stypy_temp_lambda_136.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_136', ['x', 'p'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_136', ['x', 'p'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    
    # Call to log10(...): (line 2639)
    # Processing the call arguments (line 2639)
    # Getting the type of 'x' (line 2639)
    x_279030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2639, 61), 'x', False)
    
    # Obtaining the type of the subscript
    int_279031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2639, 67), 'int')
    # Getting the type of 'p' (line 2639)
    p_279032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2639, 65), 'p', False)
    # Obtaining the member '__getitem__' of a type (line 2639)
    getitem___279033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2639, 65), p_279032, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2639)
    subscript_call_result_279034 = invoke(stypy.reporting.localization.Localization(__file__, 2639, 65), getitem___279033, int_279031)
    
    # Applying the binary operator '+' (line 2639)
    result_add_279035 = python_operator(stypy.reporting.localization.Localization(__file__, 2639, 61), '+', x_279030, subscript_call_result_279034)
    
    # Processing the call keyword arguments (line 2639)
    kwargs_279036 = {}
    # Getting the type of 'np' (line 2639)
    np_279028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2639, 52), 'np', False)
    # Obtaining the member 'log10' of a type (line 2639)
    log10_279029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2639, 52), np_279028, 'log10')
    # Calling log10(args, kwargs) (line 2639)
    log10_call_result_279037 = invoke(stypy.reporting.localization.Localization(__file__, 2639, 52), log10_279029, *[result_add_279035], **kwargs_279036)
    
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 2639)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2639, 39), 'stypy_return_type', log10_call_result_279037)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_136' in the type store
    # Getting the type of 'stypy_return_type' (line 2639)
    stypy_return_type_279038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2639, 39), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_279038)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_136'
    return stypy_return_type_279038

# Assigning a type to the variable '_stypy_temp_lambda_136' (line 2639)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2639, 39), '_stypy_temp_lambda_136', _stypy_temp_lambda_136)
# Getting the type of '_stypy_temp_lambda_136' (line 2639)
_stypy_temp_lambda_136_279039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2639, 39), '_stypy_temp_lambda_136')

@norecursion
def _stypy_temp_lambda_137(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_137'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_137', 2640, 39, True)
    # Passed parameters checking function
    _stypy_temp_lambda_137.stypy_localization = localization
    _stypy_temp_lambda_137.stypy_type_of_self = None
    _stypy_temp_lambda_137.stypy_type_store = module_type_store
    _stypy_temp_lambda_137.stypy_function_name = '_stypy_temp_lambda_137'
    _stypy_temp_lambda_137.stypy_param_names_list = ['x', 'p']
    _stypy_temp_lambda_137.stypy_varargs_param_name = None
    _stypy_temp_lambda_137.stypy_kwargs_param_name = None
    _stypy_temp_lambda_137.stypy_call_defaults = defaults
    _stypy_temp_lambda_137.stypy_call_varargs = varargs
    _stypy_temp_lambda_137.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_137', ['x', 'p'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_137', ['x', 'p'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    int_279040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2640, 52), 'int')
    # Getting the type of 'x' (line 2640)
    x_279041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 56), 'x', False)
    # Applying the binary operator '**' (line 2640)
    result_pow_279042 = python_operator(stypy.reporting.localization.Localization(__file__, 2640, 52), '**', int_279040, x_279041)
    
    
    # Obtaining the type of the subscript
    int_279043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2640, 62), 'int')
    # Getting the type of 'p' (line 2640)
    p_279044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 60), 'p', False)
    # Obtaining the member '__getitem__' of a type (line 2640)
    getitem___279045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2640, 60), p_279044, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2640)
    subscript_call_result_279046 = invoke(stypy.reporting.localization.Localization(__file__, 2640, 60), getitem___279045, int_279043)
    
    # Applying the binary operator '-' (line 2640)
    result_sub_279047 = python_operator(stypy.reporting.localization.Localization(__file__, 2640, 52), '-', result_pow_279042, subscript_call_result_279046)
    
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 2640)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2640, 39), 'stypy_return_type', result_sub_279047)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_137' in the type store
    # Getting the type of 'stypy_return_type' (line 2640)
    stypy_return_type_279048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 39), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_279048)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_137'
    return stypy_return_type_279048

# Assigning a type to the variable '_stypy_temp_lambda_137' (line 2640)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2640, 39), '_stypy_temp_lambda_137', _stypy_temp_lambda_137)
# Getting the type of '_stypy_temp_lambda_137' (line 2640)
_stypy_temp_lambda_137_279049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 39), '_stypy_temp_lambda_137')

@norecursion
def _stypy_temp_lambda_138(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_138'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_138', 2641, 39, True)
    # Passed parameters checking function
    _stypy_temp_lambda_138.stypy_localization = localization
    _stypy_temp_lambda_138.stypy_type_of_self = None
    _stypy_temp_lambda_138.stypy_type_store = module_type_store
    _stypy_temp_lambda_138.stypy_function_name = '_stypy_temp_lambda_138'
    _stypy_temp_lambda_138.stypy_param_names_list = ['p']
    _stypy_temp_lambda_138.stypy_varargs_param_name = None
    _stypy_temp_lambda_138.stypy_kwargs_param_name = None
    _stypy_temp_lambda_138.stypy_call_defaults = defaults
    _stypy_temp_lambda_138.stypy_call_varargs = varargs
    _stypy_temp_lambda_138.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_138', ['p'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_138', ['p'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    
    
    # Obtaining the type of the subscript
    int_279050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2641, 51), 'int')
    # Getting the type of 'p' (line 2641)
    p_279051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2641, 49), 'p', False)
    # Obtaining the member '__getitem__' of a type (line 2641)
    getitem___279052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2641, 49), p_279051, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2641)
    subscript_call_result_279053 = invoke(stypy.reporting.localization.Localization(__file__, 2641, 49), getitem___279052, int_279050)
    
    int_279054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2641, 56), 'int')
    # Applying the binary operator '>' (line 2641)
    result_gt_279055 = python_operator(stypy.reporting.localization.Localization(__file__, 2641, 49), '>', subscript_call_result_279053, int_279054)
    
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 2641)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2641, 39), 'stypy_return_type', result_gt_279055)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_138' in the type store
    # Getting the type of 'stypy_return_type' (line 2641)
    stypy_return_type_279056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2641, 39), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_279056)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_138'
    return stypy_return_type_279056

# Assigning a type to the variable '_stypy_temp_lambda_138' (line 2641)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2641, 39), '_stypy_temp_lambda_138', _stypy_temp_lambda_138)
# Getting the type of '_stypy_temp_lambda_138' (line 2641)
_stypy_temp_lambda_138_279057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2641, 39), '_stypy_temp_lambda_138')
# Processing the call keyword arguments (line 2639)
kwargs_279058 = {}
# Getting the type of '_FuncInfo' (line 2639)
_FuncInfo_279027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2639, 29), '_FuncInfo', False)
# Calling _FuncInfo(args, kwargs) (line 2639)
_FuncInfo_call_result_279059 = invoke(stypy.reporting.localization.Localization(__file__, 2639, 29), _FuncInfo_279027, *[_stypy_temp_lambda_136_279039, _stypy_temp_lambda_137_279049, _stypy_temp_lambda_138_279057], **kwargs_279058)

# Getting the type of '_StringFuncParser'
_StringFuncParser_279060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_StringFuncParser')
# Setting the type of the member '_funcs' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _StringFuncParser_279060, '_funcs', _FuncInfo_call_result_279059)

# Assigning a Call to a Subscript (line 2642):

# Call to _FuncInfo(...): (line 2642)
# Processing the call arguments (line 2642)

@norecursion
def _stypy_temp_lambda_139(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_139'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_139', 2642, 37, True)
    # Passed parameters checking function
    _stypy_temp_lambda_139.stypy_localization = localization
    _stypy_temp_lambda_139.stypy_type_of_self = None
    _stypy_temp_lambda_139.stypy_type_store = module_type_store
    _stypy_temp_lambda_139.stypy_function_name = '_stypy_temp_lambda_139'
    _stypy_temp_lambda_139.stypy_param_names_list = ['x', 'p']
    _stypy_temp_lambda_139.stypy_varargs_param_name = None
    _stypy_temp_lambda_139.stypy_kwargs_param_name = None
    _stypy_temp_lambda_139.stypy_call_defaults = defaults
    _stypy_temp_lambda_139.stypy_call_varargs = varargs
    _stypy_temp_lambda_139.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_139', ['x', 'p'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_139', ['x', 'p'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    
    # Call to log(...): (line 2642)
    # Processing the call arguments (line 2642)
    # Getting the type of 'x' (line 2642)
    x_279064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2642, 57), 'x', False)
    
    # Obtaining the type of the subscript
    int_279065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2642, 63), 'int')
    # Getting the type of 'p' (line 2642)
    p_279066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2642, 61), 'p', False)
    # Obtaining the member '__getitem__' of a type (line 2642)
    getitem___279067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2642, 61), p_279066, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2642)
    subscript_call_result_279068 = invoke(stypy.reporting.localization.Localization(__file__, 2642, 61), getitem___279067, int_279065)
    
    # Applying the binary operator '+' (line 2642)
    result_add_279069 = python_operator(stypy.reporting.localization.Localization(__file__, 2642, 57), '+', x_279064, subscript_call_result_279068)
    
    # Processing the call keyword arguments (line 2642)
    kwargs_279070 = {}
    # Getting the type of 'np' (line 2642)
    np_279062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2642, 50), 'np', False)
    # Obtaining the member 'log' of a type (line 2642)
    log_279063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2642, 50), np_279062, 'log')
    # Calling log(args, kwargs) (line 2642)
    log_call_result_279071 = invoke(stypy.reporting.localization.Localization(__file__, 2642, 50), log_279063, *[result_add_279069], **kwargs_279070)
    
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 2642)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2642, 37), 'stypy_return_type', log_call_result_279071)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_139' in the type store
    # Getting the type of 'stypy_return_type' (line 2642)
    stypy_return_type_279072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2642, 37), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_279072)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_139'
    return stypy_return_type_279072

# Assigning a type to the variable '_stypy_temp_lambda_139' (line 2642)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2642, 37), '_stypy_temp_lambda_139', _stypy_temp_lambda_139)
# Getting the type of '_stypy_temp_lambda_139' (line 2642)
_stypy_temp_lambda_139_279073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2642, 37), '_stypy_temp_lambda_139')

@norecursion
def _stypy_temp_lambda_140(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_140'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_140', 2643, 37, True)
    # Passed parameters checking function
    _stypy_temp_lambda_140.stypy_localization = localization
    _stypy_temp_lambda_140.stypy_type_of_self = None
    _stypy_temp_lambda_140.stypy_type_store = module_type_store
    _stypy_temp_lambda_140.stypy_function_name = '_stypy_temp_lambda_140'
    _stypy_temp_lambda_140.stypy_param_names_list = ['x', 'p']
    _stypy_temp_lambda_140.stypy_varargs_param_name = None
    _stypy_temp_lambda_140.stypy_kwargs_param_name = None
    _stypy_temp_lambda_140.stypy_call_defaults = defaults
    _stypy_temp_lambda_140.stypy_call_varargs = varargs
    _stypy_temp_lambda_140.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_140', ['x', 'p'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_140', ['x', 'p'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    
    # Call to exp(...): (line 2643)
    # Processing the call arguments (line 2643)
    # Getting the type of 'x' (line 2643)
    x_279076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2643, 57), 'x', False)
    # Processing the call keyword arguments (line 2643)
    kwargs_279077 = {}
    # Getting the type of 'np' (line 2643)
    np_279074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2643, 50), 'np', False)
    # Obtaining the member 'exp' of a type (line 2643)
    exp_279075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2643, 50), np_279074, 'exp')
    # Calling exp(args, kwargs) (line 2643)
    exp_call_result_279078 = invoke(stypy.reporting.localization.Localization(__file__, 2643, 50), exp_279075, *[x_279076], **kwargs_279077)
    
    
    # Obtaining the type of the subscript
    int_279079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2643, 64), 'int')
    # Getting the type of 'p' (line 2643)
    p_279080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2643, 62), 'p', False)
    # Obtaining the member '__getitem__' of a type (line 2643)
    getitem___279081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2643, 62), p_279080, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2643)
    subscript_call_result_279082 = invoke(stypy.reporting.localization.Localization(__file__, 2643, 62), getitem___279081, int_279079)
    
    # Applying the binary operator '-' (line 2643)
    result_sub_279083 = python_operator(stypy.reporting.localization.Localization(__file__, 2643, 50), '-', exp_call_result_279078, subscript_call_result_279082)
    
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 2643)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2643, 37), 'stypy_return_type', result_sub_279083)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_140' in the type store
    # Getting the type of 'stypy_return_type' (line 2643)
    stypy_return_type_279084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2643, 37), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_279084)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_140'
    return stypy_return_type_279084

# Assigning a type to the variable '_stypy_temp_lambda_140' (line 2643)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2643, 37), '_stypy_temp_lambda_140', _stypy_temp_lambda_140)
# Getting the type of '_stypy_temp_lambda_140' (line 2643)
_stypy_temp_lambda_140_279085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2643, 37), '_stypy_temp_lambda_140')

@norecursion
def _stypy_temp_lambda_141(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_141'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_141', 2644, 37, True)
    # Passed parameters checking function
    _stypy_temp_lambda_141.stypy_localization = localization
    _stypy_temp_lambda_141.stypy_type_of_self = None
    _stypy_temp_lambda_141.stypy_type_store = module_type_store
    _stypy_temp_lambda_141.stypy_function_name = '_stypy_temp_lambda_141'
    _stypy_temp_lambda_141.stypy_param_names_list = ['p']
    _stypy_temp_lambda_141.stypy_varargs_param_name = None
    _stypy_temp_lambda_141.stypy_kwargs_param_name = None
    _stypy_temp_lambda_141.stypy_call_defaults = defaults
    _stypy_temp_lambda_141.stypy_call_varargs = varargs
    _stypy_temp_lambda_141.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_141', ['p'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_141', ['p'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    
    
    # Obtaining the type of the subscript
    int_279086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2644, 49), 'int')
    # Getting the type of 'p' (line 2644)
    p_279087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2644, 47), 'p', False)
    # Obtaining the member '__getitem__' of a type (line 2644)
    getitem___279088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2644, 47), p_279087, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2644)
    subscript_call_result_279089 = invoke(stypy.reporting.localization.Localization(__file__, 2644, 47), getitem___279088, int_279086)
    
    int_279090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2644, 54), 'int')
    # Applying the binary operator '>' (line 2644)
    result_gt_279091 = python_operator(stypy.reporting.localization.Localization(__file__, 2644, 47), '>', subscript_call_result_279089, int_279090)
    
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 2644)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2644, 37), 'stypy_return_type', result_gt_279091)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_141' in the type store
    # Getting the type of 'stypy_return_type' (line 2644)
    stypy_return_type_279092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2644, 37), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_279092)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_141'
    return stypy_return_type_279092

# Assigning a type to the variable '_stypy_temp_lambda_141' (line 2644)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2644, 37), '_stypy_temp_lambda_141', _stypy_temp_lambda_141)
# Getting the type of '_stypy_temp_lambda_141' (line 2644)
_stypy_temp_lambda_141_279093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2644, 37), '_stypy_temp_lambda_141')
# Processing the call keyword arguments (line 2642)
kwargs_279094 = {}
# Getting the type of '_FuncInfo' (line 2642)
_FuncInfo_279061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2642, 27), '_FuncInfo', False)
# Calling _FuncInfo(args, kwargs) (line 2642)
_FuncInfo_call_result_279095 = invoke(stypy.reporting.localization.Localization(__file__, 2642, 27), _FuncInfo_279061, *[_stypy_temp_lambda_139_279073, _stypy_temp_lambda_140_279085, _stypy_temp_lambda_141_279093], **kwargs_279094)

# Getting the type of '_StringFuncParser'
_StringFuncParser_279096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_StringFuncParser')
# Setting the type of the member '_funcs' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _StringFuncParser_279096, '_funcs', _FuncInfo_call_result_279095)

# Assigning a Call to a Subscript (line 2645):

# Call to _FuncInfo(...): (line 2645)
# Processing the call arguments (line 2645)

@norecursion
def _stypy_temp_lambda_142(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_142'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_142', 2645, 40, True)
    # Passed parameters checking function
    _stypy_temp_lambda_142.stypy_localization = localization
    _stypy_temp_lambda_142.stypy_type_of_self = None
    _stypy_temp_lambda_142.stypy_type_store = module_type_store
    _stypy_temp_lambda_142.stypy_function_name = '_stypy_temp_lambda_142'
    _stypy_temp_lambda_142.stypy_param_names_list = ['x', 'p']
    _stypy_temp_lambda_142.stypy_varargs_param_name = None
    _stypy_temp_lambda_142.stypy_kwargs_param_name = None
    _stypy_temp_lambda_142.stypy_call_defaults = defaults
    _stypy_temp_lambda_142.stypy_call_varargs = varargs
    _stypy_temp_lambda_142.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_142', ['x', 'p'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_142', ['x', 'p'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    
    # Call to log(...): (line 2645)
    # Processing the call arguments (line 2645)
    # Getting the type of 'x' (line 2645)
    x_279100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2645, 61), 'x', False)
    
    # Obtaining the type of the subscript
    int_279101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2645, 67), 'int')
    # Getting the type of 'p' (line 2645)
    p_279102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2645, 65), 'p', False)
    # Obtaining the member '__getitem__' of a type (line 2645)
    getitem___279103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2645, 65), p_279102, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2645)
    subscript_call_result_279104 = invoke(stypy.reporting.localization.Localization(__file__, 2645, 65), getitem___279103, int_279101)
    
    # Applying the binary operator '+' (line 2645)
    result_add_279105 = python_operator(stypy.reporting.localization.Localization(__file__, 2645, 61), '+', x_279100, subscript_call_result_279104)
    
    # Processing the call keyword arguments (line 2645)
    kwargs_279106 = {}
    # Getting the type of 'np' (line 2645)
    np_279098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2645, 54), 'np', False)
    # Obtaining the member 'log' of a type (line 2645)
    log_279099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2645, 54), np_279098, 'log')
    # Calling log(args, kwargs) (line 2645)
    log_call_result_279107 = invoke(stypy.reporting.localization.Localization(__file__, 2645, 54), log_279099, *[result_add_279105], **kwargs_279106)
    
    
    # Call to log(...): (line 2646)
    # Processing the call arguments (line 2646)
    
    # Obtaining the type of the subscript
    int_279110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2646, 63), 'int')
    # Getting the type of 'p' (line 2646)
    p_279111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2646, 61), 'p', False)
    # Obtaining the member '__getitem__' of a type (line 2646)
    getitem___279112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2646, 61), p_279111, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2646)
    subscript_call_result_279113 = invoke(stypy.reporting.localization.Localization(__file__, 2646, 61), getitem___279112, int_279110)
    
    # Processing the call keyword arguments (line 2646)
    kwargs_279114 = {}
    # Getting the type of 'np' (line 2646)
    np_279108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2646, 54), 'np', False)
    # Obtaining the member 'log' of a type (line 2646)
    log_279109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2646, 54), np_279108, 'log')
    # Calling log(args, kwargs) (line 2646)
    log_call_result_279115 = invoke(stypy.reporting.localization.Localization(__file__, 2646, 54), log_279109, *[subscript_call_result_279113], **kwargs_279114)
    
    # Applying the binary operator 'div' (line 2645)
    result_div_279116 = python_operator(stypy.reporting.localization.Localization(__file__, 2645, 54), 'div', log_call_result_279107, log_call_result_279115)
    
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 2645)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2645, 40), 'stypy_return_type', result_div_279116)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_142' in the type store
    # Getting the type of 'stypy_return_type' (line 2645)
    stypy_return_type_279117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2645, 40), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_279117)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_142'
    return stypy_return_type_279117

# Assigning a type to the variable '_stypy_temp_lambda_142' (line 2645)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2645, 40), '_stypy_temp_lambda_142', _stypy_temp_lambda_142)
# Getting the type of '_stypy_temp_lambda_142' (line 2645)
_stypy_temp_lambda_142_279118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2645, 40), '_stypy_temp_lambda_142')

@norecursion
def _stypy_temp_lambda_143(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_143'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_143', 2647, 40, True)
    # Passed parameters checking function
    _stypy_temp_lambda_143.stypy_localization = localization
    _stypy_temp_lambda_143.stypy_type_of_self = None
    _stypy_temp_lambda_143.stypy_type_store = module_type_store
    _stypy_temp_lambda_143.stypy_function_name = '_stypy_temp_lambda_143'
    _stypy_temp_lambda_143.stypy_param_names_list = ['x', 'p']
    _stypy_temp_lambda_143.stypy_varargs_param_name = None
    _stypy_temp_lambda_143.stypy_kwargs_param_name = None
    _stypy_temp_lambda_143.stypy_call_defaults = defaults
    _stypy_temp_lambda_143.stypy_call_varargs = varargs
    _stypy_temp_lambda_143.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_143', ['x', 'p'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_143', ['x', 'p'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    
    # Obtaining the type of the subscript
    int_279119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2647, 55), 'int')
    # Getting the type of 'p' (line 2647)
    p_279120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2647, 53), 'p', False)
    # Obtaining the member '__getitem__' of a type (line 2647)
    getitem___279121 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2647, 53), p_279120, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2647)
    subscript_call_result_279122 = invoke(stypy.reporting.localization.Localization(__file__, 2647, 53), getitem___279121, int_279119)
    
    # Getting the type of 'x' (line 2647)
    x_279123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2647, 60), 'x', False)
    # Applying the binary operator '**' (line 2647)
    result_pow_279124 = python_operator(stypy.reporting.localization.Localization(__file__, 2647, 53), '**', subscript_call_result_279122, x_279123)
    
    
    # Obtaining the type of the subscript
    int_279125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2647, 67), 'int')
    # Getting the type of 'p' (line 2647)
    p_279126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2647, 65), 'p', False)
    # Obtaining the member '__getitem__' of a type (line 2647)
    getitem___279127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2647, 65), p_279126, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2647)
    subscript_call_result_279128 = invoke(stypy.reporting.localization.Localization(__file__, 2647, 65), getitem___279127, int_279125)
    
    # Applying the binary operator '-' (line 2647)
    result_sub_279129 = python_operator(stypy.reporting.localization.Localization(__file__, 2647, 53), '-', result_pow_279124, subscript_call_result_279128)
    
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 2647)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2647, 40), 'stypy_return_type', result_sub_279129)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_143' in the type store
    # Getting the type of 'stypy_return_type' (line 2647)
    stypy_return_type_279130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2647, 40), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_279130)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_143'
    return stypy_return_type_279130

# Assigning a type to the variable '_stypy_temp_lambda_143' (line 2647)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2647, 40), '_stypy_temp_lambda_143', _stypy_temp_lambda_143)
# Getting the type of '_stypy_temp_lambda_143' (line 2647)
_stypy_temp_lambda_143_279131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2647, 40), '_stypy_temp_lambda_143')

@norecursion
def _stypy_temp_lambda_144(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_144'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_144', 2648, 40, True)
    # Passed parameters checking function
    _stypy_temp_lambda_144.stypy_localization = localization
    _stypy_temp_lambda_144.stypy_type_of_self = None
    _stypy_temp_lambda_144.stypy_type_store = module_type_store
    _stypy_temp_lambda_144.stypy_function_name = '_stypy_temp_lambda_144'
    _stypy_temp_lambda_144.stypy_param_names_list = ['p']
    _stypy_temp_lambda_144.stypy_varargs_param_name = None
    _stypy_temp_lambda_144.stypy_kwargs_param_name = None
    _stypy_temp_lambda_144.stypy_call_defaults = defaults
    _stypy_temp_lambda_144.stypy_call_varargs = varargs
    _stypy_temp_lambda_144.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_144', ['p'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_144', ['p'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    
    
    # Obtaining the type of the subscript
    int_279132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2648, 52), 'int')
    # Getting the type of 'p' (line 2648)
    p_279133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2648, 50), 'p', False)
    # Obtaining the member '__getitem__' of a type (line 2648)
    getitem___279134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2648, 50), p_279133, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2648)
    subscript_call_result_279135 = invoke(stypy.reporting.localization.Localization(__file__, 2648, 50), getitem___279134, int_279132)
    
    int_279136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2648, 57), 'int')
    # Applying the binary operator '>' (line 2648)
    result_gt_279137 = python_operator(stypy.reporting.localization.Localization(__file__, 2648, 50), '>', subscript_call_result_279135, int_279136)
    
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 2648)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2648, 40), 'stypy_return_type', result_gt_279137)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_144' in the type store
    # Getting the type of 'stypy_return_type' (line 2648)
    stypy_return_type_279138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2648, 40), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_279138)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_144'
    return stypy_return_type_279138

# Assigning a type to the variable '_stypy_temp_lambda_144' (line 2648)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2648, 40), '_stypy_temp_lambda_144', _stypy_temp_lambda_144)
# Getting the type of '_stypy_temp_lambda_144' (line 2648)
_stypy_temp_lambda_144_279139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2648, 40), '_stypy_temp_lambda_144')

@norecursion
def _stypy_temp_lambda_145(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_145'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_145', 2649, 40, True)
    # Passed parameters checking function
    _stypy_temp_lambda_145.stypy_localization = localization
    _stypy_temp_lambda_145.stypy_type_of_self = None
    _stypy_temp_lambda_145.stypy_type_store = module_type_store
    _stypy_temp_lambda_145.stypy_function_name = '_stypy_temp_lambda_145'
    _stypy_temp_lambda_145.stypy_param_names_list = ['p']
    _stypy_temp_lambda_145.stypy_varargs_param_name = None
    _stypy_temp_lambda_145.stypy_kwargs_param_name = None
    _stypy_temp_lambda_145.stypy_call_defaults = defaults
    _stypy_temp_lambda_145.stypy_call_varargs = varargs
    _stypy_temp_lambda_145.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_145', ['p'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_145', ['p'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    
    
    # Obtaining the type of the subscript
    int_279140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2649, 52), 'int')
    # Getting the type of 'p' (line 2649)
    p_279141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2649, 50), 'p', False)
    # Obtaining the member '__getitem__' of a type (line 2649)
    getitem___279142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2649, 50), p_279141, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2649)
    subscript_call_result_279143 = invoke(stypy.reporting.localization.Localization(__file__, 2649, 50), getitem___279142, int_279140)
    
    int_279144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2649, 57), 'int')
    # Applying the binary operator '>' (line 2649)
    result_gt_279145 = python_operator(stypy.reporting.localization.Localization(__file__, 2649, 50), '>', subscript_call_result_279143, int_279144)
    
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 2649)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2649, 40), 'stypy_return_type', result_gt_279145)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_145' in the type store
    # Getting the type of 'stypy_return_type' (line 2649)
    stypy_return_type_279146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2649, 40), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_279146)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_145'
    return stypy_return_type_279146

# Assigning a type to the variable '_stypy_temp_lambda_145' (line 2649)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2649, 40), '_stypy_temp_lambda_145', _stypy_temp_lambda_145)
# Getting the type of '_stypy_temp_lambda_145' (line 2649)
_stypy_temp_lambda_145_279147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2649, 40), '_stypy_temp_lambda_145')
# Processing the call keyword arguments (line 2645)
kwargs_279148 = {}
# Getting the type of '_FuncInfo' (line 2645)
_FuncInfo_279097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2645, 30), '_FuncInfo', False)
# Calling _FuncInfo(args, kwargs) (line 2645)
_FuncInfo_call_result_279149 = invoke(stypy.reporting.localization.Localization(__file__, 2645, 30), _FuncInfo_279097, *[_stypy_temp_lambda_142_279118, _stypy_temp_lambda_143_279131, _stypy_temp_lambda_144_279139, _stypy_temp_lambda_145_279147], **kwargs_279148)

# Getting the type of '_StringFuncParser'
_StringFuncParser_279150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_StringFuncParser')
# Setting the type of the member '_funcs' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _StringFuncParser_279150, '_funcs', _FuncInfo_call_result_279149)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
